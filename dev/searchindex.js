Search.setIndex({"alltitles": {"(Generalized) linear models": [[197, "generalized-linear-models"]], "1-way partial dependence with different models": [[168, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[68, "newsgroups-dataset"]], "2D interaction plots": [[168, "d-interaction-plots"]], "3D representation": [[168, "d-representation"]], "A constant prediction baseline": [[197, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[56, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[45, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "A demo of the Spectral Biclustering algorithm": [[18, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[19, "a-demo-of-the-spectral-co-clustering-algorithm"]], "A demo of the mean-shift clustering algorithm": [[61, "a-demo-of-the-mean-shift-clustering-algorithm"]], "A more flexible plotting API": [[318, "a-more-flexible-plotting-api"]], "A note on shuffling": [[414, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[11, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[386, "a-simple-algorithmic-trick-warm-restarts"]], "A simple example shipped with scikit-learn: iris dataset": [[1026, null]], "A tutorial on statistical-learning for scientific data processing": [[1023, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "A typical workflow for triaging issues": [[379, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[989, "aic-and-bic-criteria"]], "API Interface": [[400, "api-interface"]], "API Reference": [[408, "api-reference"]], "API changes": [[1043, "api-changes"]], "API changes summary": [[1036, "api-changes-summary"], [1036, "id4"], [1036, "id7"], [1036, "id10"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1042, "api-changes-summary"], [1042, "id6"], [1043, "api-changes-summary"]], "APIs of scikit-learn objects": [[382, "apis-of-scikit-learn-objects"]], "ARFF parser": [[374, "arff-parser"]], "AWeber": [[1018, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[155, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Ablation study": [[236, "ablation-study"]], "About the project": [[392, "about-the-project"]], "About us": [[0, "about-us"]], "Access pipeline steps": [[411, "access-pipeline-steps"]], "Access to nested parameters": [[411, "access-to-nested-parameters"]], "Accuracy of the Model": [[169, "accuracy-of-the-model"]], "Accuracy score": [[993, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[356, "accuracy-vs-alpha-for-training-and-testing-sets"]], "AdaBoost": [[417, "adaboost"]], "Add support for monotonic constraints in tree-based models": [[322, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[410, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[985, "additive-chi-squared-kernel"]], "Addressing the problem with a business metric": [[253, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[35, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Advanced Plotting With Partial Dependence": [[237, "advanced-plotting-with-partial-dependence"]], "Advantages:": [[410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null]], "Affinity Propagation": [[410, "affinity-propagation"]], "Agglomerative clustering with and without structure": [[37, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[38, "agglomerative-clustering-with-different-metrics"]], "Aggressive elimination of candidates": [[982, "aggressive-elimination-of-candidates"]], "Algorithms": [[997, "algorithms"]], "Alpine Linux": [[397, "alpine-linux"]], "Alternative compilers": [[378, "alternative-compilers"]], "Alternatives to brute force parameter search": [[982, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[236, "ames-housing-dataset"]], "Amount of resource and number of candidates at each iteration": [[982, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "An example custom estimator implementing a simple classifier": [[107, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[57, "an-example-of-k-means-initialization"]], "An example of reshaping data would be the digits dataset": [[1026, null]], "An introduction to machine learning with scikit-learn": [[1020, "an-introduction-to-machine-learning-with-scikit-learn"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[397, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[109, "analysis"]], "Analysis of a bag-of-words document classifier": [[351, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[168, "analysis-of-the-plots"]], "Analysis of the results": [[25, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[982, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[11, "analyzing-the-bike-sharing-demand-dataset"]], "Application example: vector quantization": [[1028, null]], "Applications and examples": [[418, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[283, "approximate-nearest-neighbors-in-tsne"]], "Arch Linux": [[397, "arch-linux"]], "Architectural / general goals": [[1014, "architectural-general-goals"]], "Array API support (experimental)": [[405, "array-api-support-experimental"]], "Artwork": [[0, "artwork"]], "Attributes": [[394, "attributes"]], "Authors": [[1036, "authors"], [1036, "id20"]], "Automatic Relevance Determination (ARD)": [[181, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[989, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[393, "automatic-parameter-searches"]], "Available Plotting Utilities": [[1033, "available-plotting-utilities"]], "Available documentation for Scikit-learn": [[1032, "available-documentation-for-scikit-learn"]], "BIRCH": [[410, "birch"]], "BNP Paribas Cardif": [[1018, "id29"]], "Bagging meta-estimator": [[417, "bagging-meta-estimator"]], "Bags of words": [[1029, "bags-of-words"]], "Balance model complexity and cross-validated score": [[258, "balance-model-complexity-and-cross-validated-score"]], "Balanced accuracy score": [[993, "balanced-accuracy-score"]], "Ball Tree": [[996, "ball-tree"]], "Base classes": [[408, "base-classes"]], "BaseEstimator and mixins:": [[382, null]], "Basic kernels": [[420, "basic-kernels"]], "Basic shrinkage": [[412, "basic-shrinkage"]], "Bayesian Regression": [[989, "bayesian-regression"]], "Bayesian Ridge Regression": [[989, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[176, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[408, "bayesian-regressors"]], "Before a release": [[384, "before-a-release"]], "Benchmark and plot helper functions": [[8, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[8, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[5, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[8, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[8, "benchmark-throughput"]], "Benchmarking classifiers": [[351, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[995, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[998, "bernoulli-restricted-boltzmann-machines"]], "Bestofmedia Group": [[1018, "id13"]], "Biclustering": [[16, "biclustering"], [164, "biclustering"], [376, "biclustering"], [406, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[17, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Biclustering evaluation": [[406, "biclustering-evaluation"]], "Biclustering metrics": [[408, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[168, "bike-sharing-dataset-preprocessing"]], "Binary Case": [[989, "binary-case"]], "Binary case": [[993, "binary-case"]], "Binary classification": [[993, "binary-classification"]], "Birchbox": [[1018, "id12"]], "Bisecting K-Means": [[410, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[41, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "BisectingKMeans: divide and cluster": [[319, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[94, "blind-source-separation-using-fastica"]], "Boil down your script to something as small as possible": [[385, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[136, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1018, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[377, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[993, "brier-score-loss"]], "Brute Force": [[996, "brute-force"]], "Bug Tracker": [[1017, "bug-tracker"]], "Bug fixes": [[1039, "bug-fixes"], [1039, "id1"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id3"], [1042, "bug-fixes"], [1042, "id5"], [1043, "bug-fixes"], [1043, "id4"]], "Bug triaging and issue curation": [[379, "bug-triaging-and-issue-curation"]], "Build a pipeline": [[411, "build-a-pipeline"]], "Build dependencies": [[378, "build-dependencies"]], "Build the dataset": [[154, "build-the-dataset"]], "Building a pipeline": [[1029, "building-a-pipeline"]], "Building a specific version from a tag": [[378, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[388, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[378, "building-from-source"]], "Building the documentation": [[380, "building-the-documentation"]], "Bulk versus Atomic mode": [[366, "bulk-versus-atomic-mode"]], "CCA (PLS mode B with symmetric deflation)": [[83, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[362, "cv-splitters"], [362, "id3"]], "Caching nearest neighbors": [[285, "caching-nearest-neighbors"]], "Caching transformers within a Pipeline": [[70, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[411, "caching-transformers-avoid-repeated-computation"]], "Calibrating a classifier": [[407, "calibrating-a-classifier"]], "Calibration": [[21, "calibration"], [164, "calibration"]], "Calibration curves": [[23, "calibration-curves"], [25, "calibration-curves"], [407, "calibration-curves"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "California Housing dataset": [[375, "california-housing-dataset"]], "Calinski-Harabasz Index": [[410, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[83, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[413, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[236, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Categorical Features Support": [[417, "categorical-features-support"]], "Categorical Naive Bayes": [[995, "categorical-naive-bayes"]], "Centering kernel matrices": [[1003, "centering-kernel-matrices"]], "Chain of binary classifiers": [[281, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[380, "change-the-default-value-of-a-parameter"]], "Change.org": [[1018, "id14"]], "Changed displays": [[1052, "changed-displays"]], "Changed models": [[1043, "changed-models"], [1044, "changed-models"], [1044, "id9"], [1044, "id22"], [1045, "changed-models"], [1045, "id6"], [1046, "changed-models"], [1047, "changed-models"], [1047, "id3"], [1048, "changed-models"], [1049, "changed-models"], [1050, "changed-models"], [1050, "id6"], [1051, "changed-models"], [1051, "id7"], [1052, "changed-models"], [1052, "id4"], [1053, "changed-models"], [1054, "changed-models"]], "Changelog": [[1036, "changelog"], [1036, "id1"], [1036, "id3"], [1036, "id6"], [1036, "id9"], [1036, "id12"], [1036, "id14"], [1036, "id16"], [1036, "id18"], [1036, "id19"], [1037, "changelog"], [1037, "id2"], [1038, "changelog"], [1039, "changelog"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id2"], [1042, "changelog"], [1042, "id1"], [1042, "id3"], [1043, "changelog"], [1043, "id2"], [1044, "changelog"], [1044, "id1"], [1044, "id5"], [1044, "id10"], [1044, "id23"], [1045, "changelog"], [1045, "id1"], [1045, "id2"], [1045, "id7"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id1"], [1048, "id4"], [1049, "changelog"], [1049, "id6"], [1050, "changelog"], [1050, "id1"], [1050, "id7"], [1051, "changelog"], [1051, "id1"], [1051, "id9"], [1052, "changelog"], [1052, "id1"], [1052, "id6"], [1053, "changelog"], [1053, "id2"], [1054, "changelog"], [1055, "changelog"]], "Changes impacting all modules": [[1051, "changes-impacting-all-modules"], [1051, "id8"], [1052, "changes-impacting-all-modules"], [1052, "id5"], [1053, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1053, "changes-impacting-many-modules"], [1054, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1044, "changes-to-estimator-checks"], [1045, "changes-to-estimator-checks"], [1046, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[388, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[315, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[167, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[991, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[415, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[5, "choose-parameters"]], "Choosing a resource": [[982, "choosing-a-resource"]], "Choosing min_resources and the number of candidates": [[982, "choosing-min-resources-and-the-number-of-candidates"]], "Choosing the parameters of the model": [[1020, null]], "Choosing the right estimator": [[1022, "choosing-the-right-estimator"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[394, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[262, "class-likelihood-ratios-to-measure-classification-performance"]], "Class likelihood ratios": [[993, "class-likelihood-ratios"]], "Classes": [[408, "classes"]], "Classical linear regressors": [[408, "classical-linear-regressors"]], "Classification": [[27, "classification"], [30, "classification"], [157, "classification"], [164, "classification"], [989, "classification"], [996, "id4"], [997, "classification"], [1007, "classification"], [1008, "classification"], [1009, "classification"], [1027, "classification"]], "Classification and ROC analysis": [[269, "classification-and-roc-analysis"]], "Classification criteria": [[1009, "classification-criteria"]], "Classification metrics": [[408, "classification-metrics"], [993, "classification-metrics"]], "Classification of text documents using sparse features": [[351, "classification-of-text-documents-using-sparse-features"]], "Classification pipeline": [[68, "classification-pipeline"]], "Classification report": [[993, "classification-report"]], "Classifier comparison": [[29, "classifier-comparison"]], "ClassifierChain": [[994, "classifierchain"]], "Classifying irises:": [[1027, null]], "Clear definition of the public API": [[1046, "clear-definition-of-the-public-api"]], "Cloning": [[382, "cloning"]], "Closing issues: a tough call": [[379, null]], "Cluster centers - MiniBatchKMeans": [[93, "cluster-centers-minibatchkmeans"]], "Clustering": [[34, "clustering"], [164, "clustering"], [410, "clustering"]], "Clustering evaluation summary": [[352, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[415, null]], "Clustering metrics": [[408, "clustering-metrics"], [993, "clustering-metrics"]], "Clustering performance evaluation": [[410, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[352, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[352, "clustering-text-documents-using-k-means"]], "Clustering using affinity propagation": [[10, "clustering-using-affinity-propagation"]], "Clustering: grouping observations together": [[1028, "clustering-grouping-observations-together"]], "Code Contributors": [[1040, "code-contributors"], [1041, "code-contributors"], [1042, "code-contributors"], [1042, "id7"]], "Code Review Guidelines": [[380, "code-review-guidelines"]], "Code and Documentation Contributors": [[1043, "code-and-documentation-contributors"], [1043, "id10"], [1044, "code-and-documentation-contributors"], [1044, "id8"], [1044, "id21"], [1044, "id41"]], "Coding guidelines": [[382, "coding-guidelines"]], "Cohen\u2019s kappa": [[993, "cohen-s-kappa"]], "Color Quantization using K-Means": [[46, "color-quantization-using-k-means"]], "Column Transformer with Heterogeneous Data Sources": [[68, "column-transformer-with-heterogeneous-data-sources"]], "Column Transformer with Mixed Types": [[69, "column-transformer-with-mixed-types"]], "ColumnTransformer for heterogeneous data": [[411, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[323, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[130, "combine-predictors-using-stacking"]], "Combining the display objects into a single plot": [[227, "combining-the-display-objects-into-a-single-plot"]], "Common Vectorizer usage": [[418, "common-vectorizer-usage"]], "Common cases: predefined values": [[993, "common-cases-predefined-values"]], "Common estimator checks": [[405, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[362, "common-pitfalls-and-recommended-practices"]], "Common pitfalls and subtleties": [[362, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[167, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[228, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[40, "compare-birch-and-minibatchkmeans"]], "Compare Stochastic learning strategies for MLPClassifier": [[300, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Compare cross decomposition methods": [[83, "compare-cross-decomposition-methods"]], "Compare different approaches to setting the regularization parameter": [[76, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[24, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[305, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Compare times of SVR and Kernel Ridge Regression": [[232, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[176, "comparing-linear-bayesian-regressors"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[291, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Comparing QuantileRegressor and LinearRegression": [[199, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[115, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Comparing Target Encoder with Other Encoders": [[311, "comparing-target-encoder-with-other-encoders"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[226, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Comparing different clustering algorithms on toy datasets": [[42, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Comparing different hierarchical linkage methods on toy datasets": [[60, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "Comparing random forests and the multi-output meta estimator": [[129, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Comparing randomized search and grid search for hyperparameter estimation": [[267, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Comparing the results": [[173, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[183, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[183, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[259, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[259, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[204, "comparing-various-online-solvers"]], "Comparison between grid search and successive halving": [[270, "comparison-between-grid-search-and-successive-halving"]], "Comparison of Calibration of Classifiers": [[25, "comparison-of-calibration-of-classifiers"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[101, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Comparison of LDA and QDA": [[32, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[218, "comparison-of-manifold-learning-methods"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Comparison of kernel ridge regression and SVR": [[232, "comparison-of-kernel-ridge-regression-and-svr"]], "Comparison of results": [[78, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[62, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Comparison with special purpose text vectorizers": [[353, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[989, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[995, "complement-naive-bayes"]], "Complexity": [[996, "complexity"], [997, "complexity"], [1007, "complexity"], [1008, "complexity"], [1009, "complexity"]], "Complexity analysis": [[261, "complexity-analysis"]], "Components and loadings": [[1028, null]], "Composite estimators and parameter spaces": [[982, "composite-estimators-and-parameter-spaces"]], "Compression via vector quantization": [[51, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[12, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Computation methods": [[1000, "computation-methods"]], "Computation times": [[14, "computation-times"], [20, "computation-times"], [26, "computation-times"], [33, "computation-times"], [66, "computation-times"], [74, "computation-times"], [81, "computation-times"], [85, "computation-times"], [91, "computation-times"], [104, "computation-times"], [106, "computation-times"], [134, "computation-times"], [139, "computation-times"], [147, "computation-times"], [159, "computation-times"], [163, "computation-times"], [171, "computation-times"], [174, "computation-times"], [216, "computation-times"], [224, "computation-times"], [241, "computation-times"], [250, "computation-times"], [276, "computation-times"], [279, "computation-times"], [282, "computation-times"], [297, "computation-times"], [303, "computation-times"], [313, "computation-times"], [324, "computation-times"], [332, "computation-times"], [333, "computation-times"], [349, "computation-times"], [354, "computation-times"], [361, "computation-times"], [1015, "computation-times"]], "Computational Performance": [[366, "computational-performance"]], "Compute Affinity Propagation": [[36, "compute-affinity-propagation"]], "Compute DBSCAN": [[47, "compute-dbscan"]], "Compute clustering": [[45, "compute-clustering"], [65, "compute-clustering"], [65, "id1"]], "Compute clustering with KMeans": [[62, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[61, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[62, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[202, "compute-paths"]], "Compute regularization path": [[190, "compute-regularization-path"]], "Compute score and computation times": [[115, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[76, "compute-the-likelihood-on-test-data"]], "Compute train and test errors": [[272, "compute-train-and-test-errors"]], "Computing Centrality scores": [[15, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[15, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[414, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[15, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[365, "computing-with-scikit-learn"]], "Concatenating multiple feature extraction methods": [[72, "concatenating-multiple-feature-extraction-methods"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[243, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Concluding remarks": [[2, "concluding-remarks"], [222, "concluding-remarks"]], "Conclusion": [[5, "conclusion"], [11, "conclusion"], [186, "conclusion"], [278, "conclusion"], [286, "conclusion"], [312, "conclusion"], [343, "conclusion"]], "Conclusions": [[181, "conclusions"]], "Configuration switches": [[367, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[366, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[252, "confusion-matrix"], [993, "confusion-matrix"]], "Connectivity graph of an image": [[418, "connectivity-graph-of-an-image"]], "Connectivity-constrained clustering": [[1028, "connectivity-constrained-clustering"]], "Cons:": [[992, null], [992, null]], "Consideration regarding model refitting and cross-validation": [[253, "consideration-regarding-model-refitting-and-cross-validation"]], "Construct the kernel-based regression models": [[232, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[233, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[233, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[410, "contingency-matrix"]], "Continuous Integration (CI)": [[380, "continuous-integration-ci"]], "Contributing": [[380, "contributing"], [392, "contributing"]], "Contributing code": [[380, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[395, "contributors"]], "Controlling randomness": [[362, "controlling-randomness"]], "Controlling the tree size": [[417, "controlling-the-tree-size"]], "Conventions": [[1020, "conventions"]], "Convergence of the AdaBoostClassifier": [[109, "convergence-of-the-adaboostclassifier"]], "Core Contributors": [[395, "core-contributors"]], "Cosine similarity": [[991, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[253, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[253, "cost-sensitive-learning-with-constant-gains-and-costs"]], "Covariance estimation": [[75, "covariance-estimation"], [164, "covariance-estimation"], [412, "covariance-estimation"]], "Coverage error": [[993, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[385, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Create ConfusionMatrixDisplay": [[227, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[227, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[227, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[312, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[266, "create-multi-label-data-fit-and-predict"]], "Create the data": [[100, "create-the-data"]], "Create the pipeline": [[342, "create-the-pipeline"]], "Creating a dataset": [[343, "creating-a-dataset"]], "Creating a non-noisy data set": [[201, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[109, "creating-the-dataset"]], "Creating transformers": [[68, "creating-transformers"]], "Cross decomposition": [[82, "cross-decomposition"], [164, "cross-decomposition"], [413, "cross-decomposition"]], "Cross validation and model selection": [[414, "cross-validation-and-model-selection"]], "Cross validation iterators": [[414, "cross-validation-iterators"]], "Cross validation of time series data": [[414, "cross-validation-of-time-series-data"]], "Cross-validated estimators": [[1024, "cross-validated-estimators"]], "Cross-validation generators": [[1024, "cross-validation-generators"]], "Cross-validation iterators for grouped data": [[414, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[414, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[414, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[262, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[136, "cross-validation-on-diabetes-dataset-exercise"]], "Cross-validation: evaluating estimator performance": [[414, "cross-validation-evaluating-estimator-performance"]], "Curve Fitting with Bayesian Ridge Regression": [[177, "curve-fitting-with-bayesian-ridge-regression"]], "Custom Kernels": [[1008, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[323, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[257, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "Custom transformers": [[1003, "custom-transformers"]], "Customizing the vectorizer classes": [[418, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[381, "cython-best-practices-conventions-and-knowledge"]], "DBSCAN": [[410, "dbscan"]], "DO NOT report your data unless it is extremely necessary": [[385, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[24, "data"]], "Data Considerations": [[375, null]], "Data Loading and Feature Engineering": [[169, "data-loading-and-feature-engineering"]], "Data Preparation": [[120, "data-preparation"]], "Data Publica": [[1018, "id21"]], "Data and sample properties": [[394, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[2, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[32, "data-generation"], [47, "data-generation"], [55, "data-generation"], [126, "data-generation"], [145, "data-generation"], [155, "data-generation"], [248, "data-generation"], [326, "data-generation"], [346, "data-generation"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Data leakage": [[362, "data-leakage"]], "Data leakage during pre-processing": [[362, "data-leakage-during-pre-processing"]], "Data loading": [[260, "data-loading"]], "Data preprocessing": [[123, "data-preprocessing"]], "DataFrame Support": [[1053, "dataframe-support"]], "DataRobot": [[1018, "id18"]], "Dataiku": [[1018, "id25"]], "Dataset": [[23, "dataset"], [25, "dataset"], [186, "dataset"], [265, "dataset"]], "Dataset Versions": [[374, "dataset-versions"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[266, "dataset-and-model"]], "Dataset based latent variables model": [[83, "dataset-based-latent-variables-model"]], "Dataset examples": [[86, "dataset-examples"], [164, "dataset-examples"]], "Dataset generation": [[156, "dataset-generation"], [199, "dataset-generation"]], "Dataset loading utilities": [[373, "dataset-loading-utilities"], [385, "dataset-loading-utilities"]], "Dataset preparation": [[93, "dataset-preparation"], [218, "dataset-preparation"]], "Dataset preprocessing and model training": [[236, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[372, "dataset-transformations"]], "Datasets": [[1026, "datasets"]], "Datasets in svmlight / libsvm format": [[374, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[410, "davies-bouldin-index"]], "Debian/Ubuntu": [[397, "debian-ubuntu"]], "Debugging memory errors in Cython with valgrind": [[388, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[395, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[231, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[358, "decision-tree-regression"]], "Decision Tree Regression with AdaBoost": [[110, "decision-tree-regression-with-adaboost"]], "Decision Trees": [[164, "decision-trees"], [355, "decision-trees"], [1009, "decision-trees"]], "Decision boundary": [[286, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[331, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "Decision path": [[360, "decision-path"]], "Decoding text files": [[418, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[415, "decomposing-signals-in-components-matrix-factorization-problems"]], "Decomposition": [[92, "decomposition"], [93, "decomposition"], [164, "decomposition"]], "Decomposition: Dictionary learning": [[93, "decomposition-dictionary-learning"]], "Decompositions: from a signal to components and loadings": [[1028, "decompositions-from-a-signal-to-components-and-loadings"]], "Define a function to visualize cross-validation behavior": [[254, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[218, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[56, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[257, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[353, "define-preprocessing-functions"]], "Define structure of the data": [[45, "define-structure-of-the-data"]], "Define the classifiers": [[256, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[35, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[993, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[47, "demo-of-dbscan-clustering-algorithm"]], "Demo of HDBSCAN clustering algorithm": [[53, "demo-of-hdbscan-clustering-algorithm"]], "Demo of OPTICS clustering algorithm": [[63, "demo-of-optics-clustering-algorithm"]], "Demo of affinity propagation clustering algorithm": [[36, "demo-of-affinity-propagation-clustering-algorithm"]], "Demonstrating the different strategies of KBinsDiscretizer": [[308, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Demonstration of k-means assumptions": [[55, "demonstration-of-k-means-assumptions"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[263, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Density Estimation": [[416, "density-estimation"]], "Density Estimation for a Gaussian mixture": [[247, "density-estimation-for-a-gaussian-mixture"]], "Density Estimation: Histograms": [[416, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1008, "density-estimation-novelty-detection"]], "Dependencies": [[378, "dependencies"]], "Deprecation": [[380, "deprecation"]], "Deprecation / Default Value Change": [[233, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1046, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[166, "description-of-the-simulated-data"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Detection error tradeoff (DET)": [[993, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[256, "detection-error-tradeoff-det-curve"]], "Developer API for HTML representation": [[382, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[382, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[382, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[388, "developers-tips-and-tricks"]], "Developer\u2019s Guide": [[383, "developer-s-guide"]], "Developing Estimators": [[105, "developing-estimators"], [164, "developing-estimators"]], "Developing scikit-learn estimators": [[382, "developing-scikit-learn-estimators"]], "Developing with the Plotting API": [[387, "developing-with-the-plotting-api"]], "Diabetes dataset": [[377, "diabetes-dataset"], [1027, null]], "DictVectorizer": [[353, "dictvectorizer"]], "Dictionary Learning": [[415, "dictionary-learning"]], "Dictionary learning": [[93, "dictionary-learning"]], "Dictionary learning - positive code": [[93, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[93, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[93, "dictionary-learning-positive-dictionary-code"]], "Differences between solvers": [[989, "differences-between-solvers"]], "Different algorithms for the same problem": [[1027, null]], "Different label assignment strategies": [[410, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[410, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[382, "different-objects"]], "Different scenario and useful concepts": [[989, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[400, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "Digits dataset": [[30, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[292, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Dimensionality reduction": [[996, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[987, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discretization": [[1003, "discretization"]], "Dispatching": [[390, "dispatching"]], "Display Objects": [[1033, "display-objects"]], "Display code coverage in pull requests": [[388, "display-code-coverage-in-pull-requests"]], "Display results": [[202, "display-results"]], "Display the distorted image": [[96, "display-the-distorted-image"]], "Displaying Pipelines": [[238, "displaying-pipelines"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[238, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[238, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[238, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[238, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[238, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[228, "displaying-estimators-and-complex-pipelines"]], "Distance metrics": [[408, "distance-metrics"]], "Do you plan to implement transform for target y in a pipeline?": [[392, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[392, "do-you-support-pypy"]], "Documentation": [[380, "documentation"], [1036, "documentation"]], "Documentation Resources": [[1017, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1039, "documentation-improvements"], [1040, "documentation-improvements"]], "Domain specific packages": [[1013, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[420, "dot-product-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Download data, if not already on disk": [[15, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[130, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[374, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null]], "Dummy estimators": [[993, "dummy-estimators"]], "D\u00b2 score": [[993, "d2-score"]], "D\u00b2 score for classification": [[993, "d2-score-for-classification"]], "Earlier versions": [[1036, "earlier-versions"]], "Early stopping in Gradient Boosting": [[120, "early-stopping-in-gradient-boosting"]], "Early stopping of Stochastic Gradient Descent": [[205, "early-stopping-of-stochastic-gradient-descent"]], "Easy tag": [[380, null]], "Effect of number of trees and early stopping": [[125, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[310, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[310, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[310, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[73, "effect-of-transforming-the-targets-in-regression-model"]], "Effect of varying threshold for self-training": [[329, "effect-of-varying-threshold-for-self-training"]], "Efficient Linear Algebra & Array Operations": [[389, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[389, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[389, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[93, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[989, "elastic-net"]], "ElasticNet": [[181, "elasticnet"]], "Embedding in 2D space": [[10, "embedding-in-2d-space"]], "Embedding techniques comparison": [[219, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Empirical covariance": [[412, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[59, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Empirical validation": [[230, "empirical-validation"]], "Encoding categorical features": [[1003, "encoding-categorical-features"]], "Encoding strategy": [[51, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1047, "enforcing-keyword-only-arguments"], [1049, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[395, "enhancement-proposals-sleps"]], "Enhancements": [[1039, "enhancements"], [1040, "enhancements"], [1041, "enhancements"], [1042, "enhancements"], [1042, "id4"], [1043, "enhancements"], [1043, "id3"]], "Enriched estimator displays": [[322, "enriched-estimator-displays"]], "Ensemble methods": [[108, "ensemble-methods"], [164, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[417, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Environment variables": [[367, "environment-variables"]], "Error Calculation": [[120, "error-calculation"]], "Error caused by file path length limit on Windows": [[397, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[109, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[173, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[62, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[173, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[173, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[80, "estimate-the-covariance"]], "Estimate the score": [[162, "estimate-the-score"]], "Estimated Attributes": [[382, "estimated-attributes"]], "Estimation algorithms": [[987, "estimation-algorithms"]], "Estimator Tags": [[382, "estimator-tags"]], "Estimator types": [[382, "estimator-types"]], "Estimators": [[362, "estimators"], [362, "id2"], [382, "estimators"], [405, "estimators"], [408, "estimators"]], "Estimators objects": [[1026, "estimators-objects"]], "Estimators that handle NaN values": [[983, "estimators-that-handle-nan-values"]], "Evaluation": [[79, "evaluation"], [302, "evaluation"]], "Evaluation metrics": [[253, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[236, "evaluation-of-outlier-detection-estimators"]], "Evaluation of the calibration of predictions": [[197, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the performance on the test set": [[1029, "evaluation-of-the-performance-on-the-test-set"]], "Evaluation of the ranking power": [[197, "evaluation-of-the-ranking-power"]], "Evernote": [[1018, "id6"]], "Exact Kernel PCA": [[415, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[415, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[405, "example-usage"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Example:": [[993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [1005, null], [1027, null]], "Examples": [[164, "examples"], [368, "examples"], [375, null], [409, "examples"], [414, null], [414, null], [419, null], [419, null], [420, null], [986, null], [989, null], [989, null], [989, null], [1006, null], [1006, null], [1010, null], [1010, null], [1010, null], [1036, "examples"]], "Examples based on real world datasets": [[1, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "Examples using sklearn.base.BaseEstimator": [[424, "examples-using-sklearn-base-baseestimator"]], "Examples using sklearn.base.ClassifierMixin": [[427, "examples-using-sklearn-base-classifiermixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[430, "examples-using-sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.RegressorMixin": [[433, "examples-using-sklearn-base-regressormixin"]], "Examples using sklearn.base.TransformerMixin": [[434, "examples-using-sklearn-base-transformermixin"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[438, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[439, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "Examples using sklearn.cluster.AffinityPropagation": [[441, "examples-using-sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[442, "examples-using-sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.Birch": [[443, "examples-using-sklearn-cluster-birch"]], "Examples using sklearn.cluster.BisectingKMeans": [[444, "examples-using-sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.DBSCAN": [[445, "examples-using-sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[446, "examples-using-sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.HDBSCAN": [[447, "examples-using-sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.KMeans": [[448, "examples-using-sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.MeanShift": [[449, "examples-using-sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[450, "examples-using-sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.OPTICS": [[451, "examples-using-sklearn-cluster-optics"]], "Examples using sklearn.cluster.SpectralBiclustering": [[452, "examples-using-sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[453, "examples-using-sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[454, "examples-using-sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.affinity_propagation": [[455, "examples-using-sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[456, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.estimate_bandwidth": [[459, "examples-using-sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.kmeans_plusplus": [[461, "examples-using-sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.spectral_clustering": [[463, "examples-using-sklearn-cluster-spectral-clustering"]], "Examples using sklearn.compose.ColumnTransformer": [[465, "examples-using-sklearn-compose-columntransformer"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[466, "examples-using-sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.make_column_selector": [[467, "examples-using-sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_transformer": [[468, "examples-using-sklearn-compose-make-column-transformer"]], "Examples using sklearn.config_context": [[469, "examples-using-sklearn-config-context"]], "Examples using sklearn.covariance.EllipticEnvelope": [[470, "examples-using-sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[471, "examples-using-sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[473, "examples-using-sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.LedoitWolf": [[474, "examples-using-sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.MinCovDet": [[475, "examples-using-sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.OAS": [[476, "examples-using-sklearn-covariance-oas"]], "Examples using sklearn.covariance.ShrunkCovariance": [[477, "examples-using-sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.empirical_covariance": [[478, "examples-using-sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.ledoit_wolf": [[480, "examples-using-sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.cross_decomposition.CCA": [[483, "examples-using-sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[484, "examples-using-sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[485, "examples-using-sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[489, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[490, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_california_housing": [[491, "examples-using-sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_covtype": [[492, "examples-using-sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_kddcup99": [[493, "examples-using-sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_lfw_people": [[495, "examples-using-sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[496, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_openml": [[497, "examples-using-sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_species_distributions": [[499, "examples-using-sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.get_data_home": [[500, "examples-using-sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.load_breast_cancer": [[501, "examples-using-sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_diabetes": [[502, "examples-using-sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_digits": [[503, "examples-using-sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_iris": [[505, "examples-using-sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_sample_image": [[507, "examples-using-sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_wine": [[511, "examples-using-sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.make_biclusters": [[512, "examples-using-sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_blobs": [[513, "examples-using-sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_checkerboard": [[514, "examples-using-sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_circles": [[515, "examples-using-sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_classification": [[516, "examples-using-sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[520, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_hastie_10_2": [[521, "examples-using-sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[522, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_moons": [[523, "examples-using-sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_multilabel_classification": [[524, "examples-using-sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_regression": [[525, "examples-using-sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_s_curve": [[526, "examples-using-sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[527, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[528, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_swiss_roll": [[531, "examples-using-sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.decomposition.FactorAnalysis": [[533, "examples-using-sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FastICA": [[534, "examples-using-sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.IncrementalPCA": [[535, "examples-using-sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.KernelPCA": [[536, "examples-using-sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[537, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[538, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[539, "examples-using-sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[540, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.NMF": [[541, "examples-using-sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.PCA": [[542, "examples-using-sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.SparseCoder": [[543, "examples-using-sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparsePCA": [[544, "examples-using-sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.TruncatedSVD": [[545, "examples-using-sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[550, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[551, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.dummy.DummyClassifier": [[552, "examples-using-sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyRegressor": [[553, "examples-using-sklearn-dummy-dummyregressor"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[554, "examples-using-sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[555, "examples-using-sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[557, "examples-using-sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[558, "examples-using-sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[559, "examples-using-sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[560, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[561, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[562, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[563, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.IsolationForest": [[564, "examples-using-sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[565, "examples-using-sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[566, "examples-using-sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[567, "examples-using-sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.StackingClassifier": [[568, "examples-using-sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingRegressor": [[569, "examples-using-sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.VotingClassifier": [[570, "examples-using-sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingRegressor": [[571, "examples-using-sklearn-ensemble-votingregressor"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[572, "examples-using-sklearn-exceptions-convergencewarning"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[582, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[583, "examples-using-sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[585, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[588, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[589, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[590, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[591, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[592, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_selection.RFE": [[594, "examples-using-sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFECV": [[595, "examples-using-sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.SelectFromModel": [[598, "examples-using-sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectKBest": [[600, "examples-using-sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectPercentile": [[601, "examples-using-sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[603, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.chi2": [[605, "examples-using-sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.f_classif": [[606, "examples-using-sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_regression": [[607, "examples-using-sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[608, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[609, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[611, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[612, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[614, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[615, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[616, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[618, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[619, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[620, "examples-using-sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[623, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[624, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[626, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.impute.IterativeImputer": [[628, "examples-using-sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.KNNImputer": [[629, "examples-using-sklearn-impute-knnimputer"]], "Examples using sklearn.impute.SimpleImputer": [[631, "examples-using-sklearn-impute-simpleimputer"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[632, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[632, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[633, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[633, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "Examples using sklearn.inspection.partial_dependence": [[634, "examples-using-sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.permutation_importance": [[635, "examples-using-sklearn-inspection-permutation-importance"]], "Examples using sklearn.isotonic.IsotonicRegression": [[636, "examples-using-sklearn-isotonic-isotonicregression"]], "Examples using sklearn.kernel_approximation.Nystroem": [[640, "examples-using-sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[641, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[642, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[644, "examples-using-sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.linear_model.ARDRegression": [[645, "examples-using-sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.BayesianRidge": [[646, "examples-using-sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.ElasticNet": [[647, "examples-using-sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNetCV": [[648, "examples-using-sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.GammaRegressor": [[649, "examples-using-sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[650, "examples-using-sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.Lasso": [[653, "examples-using-sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.LassoCV": [[654, "examples-using-sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[656, "examples-using-sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsIC": [[657, "examples-using-sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LinearRegression": [[658, "examples-using-sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[659, "examples-using-sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[660, "examples-using-sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[663, "examples-using-sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[665, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[666, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[667, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.Perceptron": [[669, "examples-using-sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.PoissonRegressor": [[670, "examples-using-sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[671, "examples-using-sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[672, "examples-using-sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.Ridge": [[673, "examples-using-sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.RidgeCV": [[674, "examples-using-sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeClassifier": [[675, "examples-using-sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[677, "examples-using-sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[678, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDRegressor": [[679, "examples-using-sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[680, "examples-using-sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[681, "examples-using-sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.enet_path": [[682, "examples-using-sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.lars_path": [[683, "examples-using-sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lasso_path": [[685, "examples-using-sklearn-linear-model-lasso-path"]], "Examples using sklearn.manifold.Isomap": [[689, "examples-using-sklearn-manifold-isomap"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[690, "examples-using-sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.MDS": [[691, "examples-using-sklearn-manifold-mds"]], "Examples using sklearn.manifold.SpectralEmbedding": [[692, "examples-using-sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.TSNE": [[693, "examples-using-sklearn-manifold-tsne"]], "Examples using sklearn.manifold.locally_linear_embedding": [[694, "examples-using-sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[698, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[698, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[699, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[701, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[701, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[701, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[702, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[702, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[702, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "Examples using sklearn.metrics.RocCurveDisplay": [[703, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[703, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[703, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "Examples using sklearn.metrics.accuracy_score": [[704, "examples-using-sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[705, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[706, "examples-using-sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.auc": [[707, "examples-using-sklearn-metrics-auc"]], "Examples using sklearn.metrics.average_precision_score": [[708, "examples-using-sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.balanced_accuracy_score": [[709, "examples-using-sklearn-metrics-balanced-accuracy-score"]], "Examples using sklearn.metrics.brier_score_loss": [[710, "examples-using-sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[713, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.classification_report": [[714, "examples-using-sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.completeness_score": [[718, "examples-using-sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.confusion_matrix": [[719, "examples-using-sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.consensus_score": [[720, "examples-using-sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.det_curve": [[728, "examples-using-sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.f1_score": [[730, "examples-using-sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.get_scorer": [[733, "examples-using-sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.hamming_loss": [[735, "examples-using-sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hinge_loss": [[736, "examples-using-sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.homogeneity_score": [[738, "examples-using-sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.jaccard_score": [[739, "examples-using-sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.log_loss": [[742, "examples-using-sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.make_scorer": [[743, "examples-using-sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.mean_absolute_error": [[746, "examples-using-sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[747, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_pinball_loss": [[749, "examples-using-sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[750, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_squared_error": [[751, "examples-using-sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[753, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.median_absolute_error": [[754, "examples-using-sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.mutual_info_score": [[756, "examples-using-sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[758, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[762, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise_distances": [[779, "examples-using-sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[780, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.precision_recall_curve": [[783, "examples-using-sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_score": [[785, "examples-using-sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.r2_score": [[786, "examples-using-sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.rand_score": [[787, "examples-using-sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.recall_score": [[788, "examples-using-sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.roc_auc_score": [[789, "examples-using-sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_curve": [[790, "examples-using-sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.root_mean_squared_error": [[791, "examples-using-sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.silhouette_samples": [[793, "examples-using-sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_score": [[794, "examples-using-sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.v_measure_score": [[796, "examples-using-sklearn-metrics-v-measure-score"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[798, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[799, "examples-using-sklearn-mixture-gaussianmixture"]], "Examples using sklearn.model_selection.FixedThresholdClassifier": [[800, "examples-using-sklearn-model-selection-fixedthresholdclassifier"]], "Examples using sklearn.model_selection.GridSearchCV": [[801, "examples-using-sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GroupKFold": [[802, "examples-using-sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[803, "examples-using-sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[804, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[805, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.KFold": [[806, "examples-using-sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[807, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[807, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[815, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RepeatedKFold": [[816, "examples-using-sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[817, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.ShuffleSplit": [[818, "examples-using-sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[819, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[820, "examples-using-sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[821, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[822, "examples-using-sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TunedThresholdClassifierCV": [[823, "examples-using-sklearn-model-selection-tunedthresholdclassifiercv"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[824, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "Examples using sklearn.model_selection.cross_val_predict": [[826, "examples-using-sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_score": [[827, "examples-using-sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_validate": [[828, "examples-using-sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.learning_curve": [[829, "examples-using-sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.permutation_test_score": [[830, "examples-using-sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.train_test_split": [[831, "examples-using-sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.validation_curve": [[832, "examples-using-sklearn-model-selection-validation-curve"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[833, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[834, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[835, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multioutput.ClassifierChain": [[836, "examples-using-sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[838, "examples-using-sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[840, "examples-using-sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[842, "examples-using-sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[843, "examples-using-sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[844, "examples-using-sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[847, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[848, "examples-using-sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[849, "examples-using-sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KernelDensity": [[850, "examples-using-sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[851, "examples-using-sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.NearestCentroid": [[852, "examples-using-sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestNeighbors": [[853, "examples-using-sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[854, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.kneighbors_graph": [[858, "examples-using-sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neural_network.BernoulliRBM": [[861, "examples-using-sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.MLPClassifier": [[862, "examples-using-sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPRegressor": [[863, "examples-using-sklearn-neural-network-mlpregressor"]], "Examples using sklearn.pipeline.FeatureUnion": [[864, "examples-using-sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.Pipeline": [[865, "examples-using-sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[866, "examples-using-sklearn-pipeline-make-pipeline"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[869, "examples-using-sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[870, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[872, "examples-using-sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[874, "examples-using-sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[875, "examples-using-sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.Normalizer": [[877, "examples-using-sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[878, "examples-using-sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[879, "examples-using-sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[880, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PowerTransformer": [[881, "examples-using-sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[882, "examples-using-sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.RobustScaler": [[883, "examples-using-sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.SplineTransformer": [[884, "examples-using-sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.StandardScaler": [[885, "examples-using-sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.TargetEncoder": [[886, "examples-using-sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.label_binarize": [[889, "examples-using-sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.minmax_scale": [[891, "examples-using-sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.quantile_transform": [[894, "examples-using-sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[898, "examples-using-sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[899, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[901, "examples-using-sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[902, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.set_config": [[903, "examples-using-sklearn-set-config"]], "Examples using sklearn.svm.LinearSVC": [[905, "examples-using-sklearn-svm-linearsvc"]], "Examples using sklearn.svm.NuSVR": [[908, "examples-using-sklearn-svm-nusvr"]], "Examples using sklearn.svm.OneClassSVM": [[909, "examples-using-sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.SVC": [[910, "examples-using-sklearn-svm-svc"]], "Examples using sklearn.svm.SVR": [[911, "examples-using-sklearn-svm-svr"]], "Examples using sklearn.svm.l1_min_c": [[912, "examples-using-sklearn-svm-l1-min-c"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[913, "examples-using-sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[914, "examples-using-sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.plot_tree": [[919, "examples-using-sklearn-tree-plot-tree"]], "Examples using sklearn.utils.Bunch": [[920, "examples-using-sklearn-utils-bunch"]], "Examples using sklearn.utils.check_random_state": [[928, "examples-using-sklearn-utils-check-random-state"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[937, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.extmath.density": [[939, "examples-using-sklearn-utils-extmath-density"]], "Examples using sklearn.utils.gen_even_slices": [[946, "examples-using-sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[950, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[951, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[952, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[953, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metaestimators.available_if": [[954, "examples-using-sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.shuffle": [[967, "examples-using-sklearn-utils-shuffle"]], "Examples using sklearn.utils.validation.check_is_fitted": [[977, "examples-using-sklearn-utils-validation-check-is-fitted"]], "Examples:": [[374, null], [375, null], [396, null], [406, null], [406, null], [407, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [411, null], [411, null], [411, null], [411, null], [411, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [413, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [416, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [419, null], [419, null], [419, null], [419, null], [982, null], [982, null], [982, null], [984, null], [985, null], [985, null], [985, null], [987, null], [987, null], [987, null], [988, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [990, null], [992, null], [992, null], [992, null], [992, null], [993, null], [993, null], [993, null], [993, null], [993, null], [994, null], [996, null], [996, null], [996, null], [996, null], [996, null], [997, null], [997, null], [998, null], [999, null], [999, null], [999, null], [999, null], [999, null], [999, null], [1000, null], [1001, null], [1003, null], [1003, null], [1003, null], [1007, null], [1007, null], [1008, null], [1008, null], [1008, null], [1008, null], [1008, null], [1008, null], [1009, null], [1009, null], [1009, null], [1009, null], [1033, null]], "Exercise": [[1024, null], [1024, null], [1027, null], [1027, null]], "Exercise 1: Language identification": [[1029, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1029, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1029, "exercise-3-cli-text-classification-utility"]], "Exercises": [[1029, "exercises"]], "Exhausting the available resources": [[982, "exhausting-the-available-resources"]], "Exhaustive Grid Search": [[982, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[158, "exp-sine-squared-kernel"], [420, "exp-sine-squared-kernel"]], "Experimental / Under Development": [[1052, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[320, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental features": [[384, "experimental-features"]], "Explained variance score": [[993, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[231, "explicit-feature-map-approximation-for-rbf-kernels"]], "External Resources, Videos and Talks": [[1012, "external-resources-videos-and-talks"]], "External Tutorials": [[1012, "external-tutorials"]], "External dependencies": [[1036, "external-dependencies"]], "Extract noisy patches and reconstruct them using the dictionary": [[96, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[96, "extract-reference-patches"]], "Extracting features": [[368, "extracting-features"]], "Extracting features from text files": [[1029, "extracting-features-from-text-files"]], "Extremely Randomized Trees": [[417, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[235, "face-completion-with-a-multi-output-estimators"]], "Face recognition with eigenfaces": [[1025, "face-recognition-with-eigenfaces"]], "Faces dataset decompositions": [[93, "faces-dataset-decompositions"]], "Faces recognition example using eigenfaces and SVMs": [[4, "faces-recognition-example-using-eigenfaces-and-svms"]], "Factor Analysis": [[415, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[103, "factor-analysis-with-rotation-to-visualize-patterns"]], "Factor Analysis components - FA": [[93, "factor-analysis-components-fa"]], "Failure of Machine Learning to infer causal effects": [[166, "failure-of-machine-learning-to-infer-causal-effects"]], "FastICA on 2D point clouds": [[95, "fastica-on-2d-point-clouds"]], "Faster parser in fetch_openml": [[320, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[366, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[352, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[318, "feature-names-support"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Feature agglomeration": [[49, "feature-agglomeration"], [1010, "feature-agglomeration"], [1028, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[52, "feature-agglomeration-vs-univariate-selection"]], "Feature binarization": [[1003, "feature-binarization"]], "Feature discretization": [[307, "feature-discretization"]], "Feature extraction": [[418, "feature-extraction"]], "Feature hashing": [[418, "feature-hashing"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[417, "feature-importance-evaluation"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Feature normalization": [[173, "feature-normalization"]], "Feature scaling": [[1010, null]], "Feature selection": [[419, "feature-selection"]], "Feature selection as part of a pipeline": [[419, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[419, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[419, null]], "Feature transformations with ensembles of trees": [[114, "feature-transformations-with-ensembles-of-trees"]], "FeatureAgglomeration": [[410, null]], "FeatureHasher": [[353, "featurehasher"]], "FeatureHasher and DictVectorizer Comparison": [[353, "featurehasher-and-dictvectorizer-comparison"]], "FeatureUnion: composite feature spaces": [[411, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[125, "features-in-histogram-gradient-boosting-trees"]], "Fedora": [[397, "fedora"]], "Final conclusion": [[149, "final-conclusion"]], "Final remarks": [[55, "final-remarks"]], "Finding the Nearest Neighbors": [[996, "finding-the-nearest-neighbors"]], "First example": [[7, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[35, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[94, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[177, "fit-by-cubic-polynomial"]], "Fit models": [[191, "fit-models"], [281, "fit-models"]], "Fit models and plot results": [[55, "fit-models-and-plot-results"]], "Fit regression model": [[123, "fit-regression-model"], [295, "fit-regression-model"], [345, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[290, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[100, "fit-the-models"]], "Fit the regressors": [[176, "fit-the-regressors"], [176, "id2"]], "Fitting": [[382, "fitting"]], "Fitting SpectralBiclustering": [[18, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[199, "fitting-a-quantileregressor"]], "Fitting additional trees": [[417, "fitting-additional-trees"]], "Fitting additional weak-learners": [[417, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[178, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "Fitting an elliptic envelope": [[999, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[24, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[393, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1049, "fixed-models"]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[323, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1036, "fixes"]], "Flexibility of IterativeImputer": [[983, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[388, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[154, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Forest covertypes": [[375, "forest-covertypes"]], "Forest covertypes dataset": [[236, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[410, "fowlkes-mallows-scores"]], "FreeBSD": [[378, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[215, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[392, "frequently-asked-questions"]], "From binary to multiclass and multilabel": [[993, "from-binary-to-multiclass-and-multilabel"]], "From images": [[408, "module-sklearn.feature_extraction.image"]], "From occurrences to frequencies": [[1029, "from-occurrences-to-frequencies"]], "From text": [[408, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[379, null]], "Functions": [[408, "functions"], [408, "id1"]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[246, "gmm-initialization-methods"]], "GMM covariances": [[245, "gmm-covariances"]], "GPC examples": [[420, "gpc-examples"]], "Gamma loss for gradient boosting": [[321, "gamma-loss-for-gradient-boosting"]], "Gaussian Mixture": [[992, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[244, "gaussian-mixture-model-ellipsoids"]], "Gaussian Mixture Model Selection": [[248, "gaussian-mixture-model-selection"]], "Gaussian Mixture Model Sine Curve": [[249, "gaussian-mixture-model-sine-curve"]], "Gaussian Mixture Models": [[164, "gaussian-mixture-models"], [242, "gaussian-mixture-models"]], "Gaussian Naive Bayes": [[23, "gaussian-naive-bayes"], [995, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[22, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[420, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[420, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[148, "gaussian-process-for-machine-learning"], [164, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[420, "gaussian-processes"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Gaussian mixture models": [[992, "gaussian-mixture-models"]], "Gaussian process classification (GPC) on iris dataset": [[151, "gaussian-process-classification-gpc-on-iris-dataset"], [420, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Gaussian random projection": [[1005, "gaussian-random-projection"]], "General Concepts": [[394, "general-concepts"]], "General recommendations": [[362, "general-recommendations"]], "Generalized Linear Models": [[164, "generalized-linear-models"], [175, "generalized-linear-models"], [989, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[316, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[408, "generalized-linear-models-glm-for-regression"]], "Generate data": [[45, "generate-data"], [65, "generate-data"], [78, "generate-data"], [191, "generate-data"], [302, "generate-data"]], "Generate data with outliers": [[290, "generate-data-with-outliers"]], "Generate distorted image": [[96, "generate-distorted-image"]], "Generate sample data": [[18, "generate-sample-data"], [36, "generate-sample-data"], [53, "generate-sample-data"], [61, "generate-sample-data"], [76, "generate-sample-data"], [94, "generate-sample-data"], [95, "generate-sample-data"], [142, "generate-sample-data"], [232, "generate-sample-data"], [272, "generate-sample-data"], [295, "generate-sample-data"], [345, "generate-sample-data"]], "Generate sinusoidal data with noise": [[177, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[256, "generate-synthetic-data"]], "Generate synthetic dataset": [[22, "generate-synthetic-dataset"], [176, "generate-synthetic-dataset"], [176, "id1"], [181, "generate-synthetic-dataset"]], "Generate the data": [[62, "generate-the-data"], [64, "generate-the-data"], [80, "generate-the-data"]], "Generated datasets": [[376, "generated-datasets"]], "Generated documentation on GitHub Actions": [[380, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[11, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Generating polynomial features": [[1003, "generating-polynomial-features"]], "Generators for classification and clustering": [[376, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[376, "generators-for-decomposition"]], "Generators for manifold learning": [[376, "generators-for-manifold-learning"]], "Generators for regression": [[376, "generators-for-regression"]], "Generic dictionary learning": [[415, "generic-dictionary-learning"]], "Getting Started": [[393, "getting-started"]], "Getting reproducible results across multiple executions": [[362, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1017, "gitter"]], "Glossary of Common Terms and API Elements": [[394, "glossary-of-common-terms-and-api-elements"]], "Good practices": [[385, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[395, "governance-model-changes"]], "Gradient Boosting": [[2, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "Gradient Boosting Regression Trees for Poisson regression": [[197, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "Gradient boosting": [[168, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[417, "gradient-boosted-trees"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[417, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[417, null]], "Graph Routines": [[389, "graph-routines"]], "Graphical model and parametrization": [[998, "graphical-model-and-parametrization"]], "Grid-search": [[1024, "grid-search"]], "Grid-search and cross-validated estimators": [[1024, "grid-search-and-cross-validated-estimators"]], "Group Shuffle Split": [[414, "group-shuffle-split"]], "Group k-fold": [[414, "group-k-fold"]], "Grouping infrequent categories in OneHotEncoder": [[319, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[321, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "HDBSCAN": [[410, "hdbscan"]], "HDBSCAN: hierarchical density-based clustering": [[321, "hdbscan-hierarchical-density-based-clustering"]], "Hamming loss": [[993, "hamming-loss"]], "Handling Multicollinear Features": [[170, "handling-multicollinear-features"]], "Hash Functions": [[389, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[128, "hashing-feature-transformation-using-totally-random-trees"]], "HashingVectorizer": [[352, "hashingvectorizer"]], "Helper Functions": [[389, "helper-functions"]], "Helper function": [[158, "helper-function"]], "Helper function to plot embedding": [[219, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[990, "hessian-eigenmapping"]], "Hierarchical Clustering": [[410, "id11"]], "Hierarchical agglomerative clustering: Ward": [[1028, "hierarchical-agglomerative-clustering-ward"]], "Hierarchical clustering": [[410, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[65, "hierarchical-clustering-structured-vs-unstructured-ward"]], "Higher-level parallelism with joblib": [[367, "higher-level-parallelism-with-joblib"]], "Highlights": [[1036, "highlights"], [1039, "highlights"], [1040, "highlights"], [1043, "highlights"], [1044, "highlights"]], "Hinge loss": [[993, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[322, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Histogram-Based Gradient Boosting": [[417, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[318, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[410, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[392, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[392, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[392, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[392, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[392, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[392, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[392, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[392, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[362, "how-to-avoid-data-leakage"]], "How to contribute": [[380, "how-to-contribute"]], "How to make a good bug report": [[380, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[386, "how-to-optimize-for-speed"]], "HowAboutWe": [[1018, "id16"]], "Huber Regression": [[989, "huber-regression"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[179, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Hugging Face": [[1018, "id5"]], "Hyper-parameter optimizers": [[408, "hyper-parameter-optimizers"]], "Hyperparameter Robustness": [[53, "hyperparameter-robustness"]], "ICE vs. PDP": [[168, "ice-vs-pdp"]], "INFONEA": [[1018, "id24"]], "Illustration of GPC on the XOR dataset": [[420, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Illustration of Pipeline and GridSearchCV": [[70, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Image denoising using dictionary learning": [[96, "image-denoising-using-dictionary-learning"]], "Image denoising using kernel PCA": [[3, "image-denoising-using-kernel-pca"]], "Image feature extraction": [[418, "image-feature-extraction"]], "Implementation": [[996, "implementation"]], "Implementation decisions": [[392, "implementation-decisions"]], "Implementation details": [[1007, "implementation-details"], [1008, "implementation-details"]], "Implementing your own scoring object": [[993, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[310, "importance-of-feature-scaling"]], "Important notes regarding the internal cross-validation": [[409, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[320, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[322, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[317, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[316, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[983, "imputation-of-missing-values"], [1003, "imputation-of-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "In binary classification settings": [[266, "in-binary-classification-settings"]], "In multi-label settings": [[266, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[166, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[166, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[362, "inconsistent-preprocessing"]], "Incremental PCA": [[97, "incremental-pca"], [415, "incremental-pca"]], "Incremental learning": [[368, "incremental-learning"]], "Independent Component Analysis: ICA": [[1028, "independent-component-analysis-ica"]], "Independent component analysis (ICA)": [[415, "independent-component-analysis-ica"]], "Independent components - FastICA": [[93, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[317, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1000, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[54, "inductive-clustering"]], "Influence of the Input Data Representation": [[366, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[366, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[366, "influence-of-the-number-of-features"]], "Information Criterion": [[982, "information-criterion"]], "Information-criteria based model selection": [[989, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1003, "infrequent-categories"]], "Input and parameter validation": [[408, "module-sklearn.utils.validation"]], "Input data": [[410, null]], "Input validation": [[382, "input-validation"]], "Inria": [[1018, "id3"]], "Inspection": [[164, "inspection"], [165, "inspection"], [396, "inspection"]], "Installing nightly builds": [[378, "installing-nightly-builds"]], "Installing scikit-learn": [[397, "installing-scikit-learn"]], "Installing the development version of scikit-learn": [[378, "installing-the-development-version-of-scikit-learn"]], "Installing the latest release": [[397, "installing-the-latest-release"]], "Instantiation": [[382, "instantiation"]], "Intel Extension for Scikit-learn": [[397, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[417, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[320, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interactive example": [[1027, null]], "Interoperability and framework enhancements": [[1013, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[417, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[167, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[167, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[201, "interpreting-the-plots"]], "Introducing the set_output API": [[240, "introducing-the-set-output-api"]], "Introduction": [[990, "introduction"]], "Invariance with respect to prevalence": [[262, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1005, "inverse-transform"]], "Iris plants dataset": [[377, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Isolation Forest": [[999, "isolation-forest"]], "IsolationForest example": [[126, "isolationforest-example"]], "Isomap": [[990, "isomap"]], "Isomap Embedding": [[218, "isomap-embedding"]], "Isotonic": [[407, "isotonic"]], "Isotonic Regression": [[229, "isotonic-regression"]], "Isotonic regression": [[984, "isotonic-regression"]], "Issue Tracker Tags": [[380, "issue-tracker-tags"]], "Issues for New Contributors": [[380, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "J.P.Morgan": [[1018, "id1"]], "Jaccard similarity coefficient score": [[993, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[191, "joint-feature-selection-with-multi-task-lasso"]], "K-D Tree": [[996, "k-d-tree"]], "K-bins discretization": [[1003, "k-bins-discretization"]], "K-fold": [[414, "k-fold"]], "K-means": [[410, "k-means"]], "K-means Clustering": [[43, "k-means-clustering"]], "K-means clustering": [[1028, "k-means-clustering"]], "K-means clustering on text features": [[352, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[286, "k-nearest-neighbors-classifier"]], "KDDCup99 - SA dataset": [[236, "kddcup99-sa-dataset"]], "KDTree and BallTree Classes": [[996, "kdtree-and-balltree-classes"]], "KNN Based Imputation": [[315, "knn-based-imputation"]], "Kddcup 99 dataset": [[375, "kddcup-99-dataset"]], "Keeping the number of features constant": [[983, "keeping-the-number-of-features-constant"]], "Kernel Approximation": [[164, "kernel-approximation"], [172, "kernel-approximation"], [985, "kernel-approximation"]], "Kernel Density Estimate of Species Distributions": [[296, "kernel-density-estimate-of-species-distributions"]], "Kernel Density Estimation": [[287, "kernel-density-estimation"], [416, "kernel-density-estimation"]], "Kernel PCA": [[98, "kernel-pca"]], "Kernel Principal Component Analysis (kPCA)": [[415, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Kernel functions": [[1008, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[420, "kernel-operators"]], "Kernel ridge": [[149, "kernel-ridge"]], "Kernel ridge regression": [[986, "kernel-ridge-regression"]], "Kernels": [[408, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[420, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[318, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1044, "known-major-bugs"], [1045, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[188, "l1-penalty-and-sparsity-in-logistic-regression"]], "L1-based feature selection": [[419, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[181, "l1-based-models-for-sparse-signals"]], "L1-penalty case": [[346, "l1-penalty-case"]], "L2-penalty case": [[346, "l2-penalty-case"]], "LARS Lasso": [[989, "lars-lasso"]], "LDA": [[987, "lda"]], "Label Propagation": [[1006, "label-propagation"]], "Label Propagation digits active learning": [[327, "label-propagation-digits-active-learning"]], "Label Propagation digits: Demonstrating performance": [[326, "label-propagation-digits-demonstrating-performance"]], "Label Propagation learning a complex structure": [[328, "label-propagation-learning-a-complex-structure"]], "Label binarization": [[1004, "label-binarization"]], "Label encoding": [[1004, "label-encoding"]], "Label ranking average precision": [[993, "label-ranking-average-precision"]], "LabelBinarizer": [[1004, "labelbinarizer"]], "Lagged features for time series forecasting": [[11, "lagged-features-for-time-series-forecasting"]], "Laplacian kernel": [[991, "laplacian-kernel"]], "Lasso": [[181, "lasso"], [989, "lasso"]], "Lasso and Elastic Net": [[182, "lasso-and-elastic-net"]], "Lasso model selection via information criteria": [[185, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[186, "lasso-model-selection-aic-bic-cross-validation"]], "Lasso on dense and sparse data": [[183, "lasso-on-dense-and-sparse-data"]], "Lasso path using LARS": [[184, "lasso-path-using-lars"]], "Lasso via coordinate descent": [[186, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[186, "lasso-via-least-angle-regression"]], "Latent Dirichlet Allocation (LDA)": [[415, "latent-dirichlet-allocation-lda"]], "Learn the PCA basis": [[3, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[96, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[48, "learn-the-dictionary-of-images"]], "Learning Curve": [[261, "learning-curve"]], "Learning a graph structure": [[10, "learning-a-graph-structure"]], "Learning an embedding": [[293, "learning-an-embedding"]], "Learning and predicting": [[1020, "learning-and-predicting"]], "Learning curve": [[988, "learning-curve"]], "Learning git:": [[380, null]], "Least Angle Regression": [[989, "least-angle-regression"]], "Leave One Group Out": [[414, "leave-one-group-out"]], "Leave One Out (LOO)": [[414, "leave-one-out-loo"]], "Leave P Groups Out": [[414, "leave-p-groups-out"]], "Leave P Out (LPO)": [[414, "leave-p-out-lpo"]], "Ledoit-Wolf shrinkage": [[412, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[77, "ledoit-wolf-vs-oas-estimation"]], "Lessons learned": [[166, "lessons-learned"], [167, "lessons-learned"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[418, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[366, "limiting-working-memory"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Linear Models": [[989, "linear-models"]], "Linear Regression Example": [[193, "linear-regression-example"]], "Linear SVMs": [[1027, "linear-svms"]], "Linear algebra libraries": [[366, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[987, "linear-and-quadratic-discriminant-analysis"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[32, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Linear classifiers": [[408, "linear-classifiers"]], "Linear kernel": [[343, "linear-kernel"], [991, "linear-kernel"], [1027, "linear-kernel"]], "Linear model: from regression to sparsity": [[1027, "linear-model-from-regression-to-sparsity"]], "Linear models with regularization": [[167, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[167, "linear-models-with-sparse-coefficients"]], "Linear regression": [[1027, "linear-regression"]], "Linear support vector classifier": [[23, "linear-support-vector-classifier"]], "Link to R\u00b2 score, the coefficient of determination": [[993, null]], "Links": [[366, "links"]], "Linnerrud dataset": [[377, "linnerrud-dataset"]], "Linux": [[378, "linux"]], "Linux compilers from conda-forge": [[378, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[378, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Load Data": [[353, "load-data"]], "Load Data and Train a SVC": [[239, "load-data-and-train-a-svc"]], "Load Data and train model": [[227, "load-data-and-train-model"]], "Load and prepare data": [[268, "load-and-prepare-data"], [269, "load-and-prepare-data"], [310, "load-and-prepare-data"]], "Load and prepare data set": [[339, "load-and-prepare-data-set"]], "Load data": [[190, "load-data"]], "Load dataset": [[115, "load-dataset"]], "Load dataset and apply GridSearchCV": [[136, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[219, "load-digits-dataset"]], "Load some data to play with": [[342, "load-some-data-to-play-with"]], "Load the data": [[5, "load-the-data"], [48, "load-the-data"], [123, "load-the-data"], [286, "load-the-data"]], "Load the dataset": [[56, "load-the-dataset"]], "Load the dataset via OpenML": [[3, "load-the-dataset-via-openml"]], "Loaders": [[408, "loaders"]], "Loading Data from OpenML": [[311, "loading-data-from-openml"]], "Loading a dataset": [[281, "loading-a-dataset"]], "Loading an example dataset": [[1020, "loading-an-example-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[351, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[215, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[418, "loading-features-from-dicts"]], "Loading from external datasets": [[374, "loading-from-external-datasets"], [1020, null]], "Loading other datasets": [[374, "loading-other-datasets"]], "Loading text data": [[352, "loading-text-data"]], "Loading the 20 newsgroups dataset": [[1029, "loading-the-20-newsgroups-dataset"]], "Loading the data": [[146, "loading-the-data"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[88, "loading-the-iris-dataset"]], "Loading the redirect files": [[15, "loading-the-redirect-files"]], "Local Outlier Factor": [[999, "local-outlier-factor"]], "Local Tangent Space Alignment": [[990, "local-tangent-space-alignment"]], "Locally Linear Embedding": [[990, "locally-linear-embedding"]], "Locally Linear Embeddings": [[218, "locally-linear-embeddings"]], "Log loss": [[993, "log-loss"]], "Logistic Regression 3-class Classifier": [[180, "logistic-regression-3-class-classifier"]], "Logistic function": [[187, "logistic-function"]], "Logistic regression": [[989, "logistic-regression"]], "LogisticRegression wrapped by OneVsRestClassifier": [[281, "logisticregression-wrapped-by-onevsrestclassifier"]], "Look at the results": [[232, "look-at-the-results"], [345, "look-at-the-results"]], "Loss Functions": [[417, "loss-functions"]], "Lovely": [[1018, "id20"]], "Low-level parallelism": [[410, "low-level-parallelism"], [417, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[367, "lower-level-parallelism-with-openmp"]], "MARS": [[1018, "id28"]], "MNIST classification using multinomial logistic + L1": [[213, "mnist-classification-using-multinomial-logistic-l1"]], "MacPorts for Mac OSX": [[397, "macports-for-mac-osx"]], "Machinalis": [[1018, "id22"]], "Machine learning: the problem setting": [[1020, "machine-learning-the-problem-setting"]], "Mailing Lists": [[1017, "mailing-lists"]], "Main": [[6, "main"]], "Main takeaways": [[197, "main-takeaways"]], "Maintainer / core-developer information": [[384, "maintainer-core-developer-information"]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[380, "maintaining-backwards-compatibility"]], "Major version release": [[384, "major-version-release"]], "Majority Class Labels (Majority/Hard Voting)": [[417, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[130, "make-pipeline-to-preprocess-the-data"]], "Making a release": [[384, "making-a-release"]], "Making predictions": [[133, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[220, "manifold-learning-methods-on-a-severed-sphere"]], "Manifold learning": [[164, "manifold-learning"], [217, "manifold-learning"], [990, "manifold-learning"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[219, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Manually setting the decision threshold": [[409, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[253, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[309, "map-data-to-a-normal-distribution"]], "Mapping to a Gaussian distribution": [[1003, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1003, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[983, "marking-imputed-values"]], "Mathematical Definition": [[1000, "mathematical-definition"]], "Mathematical Details": [[985, "mathematical-details"]], "Mathematical formulation": [[406, "mathematical-formulation"], [406, "id3"], [417, "mathematical-formulation"], [996, "mathematical-formulation"], [1007, "mathematical-formulation"], [1008, "mathematical-formulation"], [1009, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[987, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[987, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[993, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[158, "matern-kernel"], [420, "matern-kernel"]], "Max error": [[993, "max-error"]], "MaxAbsScaler": [[305, "maxabsscaler"]], "Mean Poisson, Gamma, and Tweedie deviances": [[993, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[410, "mean-shift"]], "Mean absolute error": [[993, "mean-absolute-error"]], "Mean absolute percentage error": [[993, "mean-absolute-percentage-error"]], "Mean squared error": [[993, "mean-squared-error"]], "Mean squared logarithmic error": [[993, "mean-squared-logarithmic-error"]], "Measure and plot the results": [[130, "measure-and-plot-the-results"]], "Median absolute error": [[993, "median-absolute-error"]], "Memory footprint": [[51, "memory-footprint"]], "Memory usage profiling": [[386, "memory-usage-profiling"]], "Merging Pull Requests": [[384, "merging-pull-requests"]], "Metadata Routing": [[233, "metadata-routing"], [321, "metadata-routing"], [394, "metadata-routing"], [400, "metadata-routing"], [1053, "metadata-routing"], [1053, "id1"], [1054, "metadata-routing"], [1055, "metadata-routing"]], "Metadata Routing Support": [[322, "metadata-routing-support"]], "Metadata Routing Support Status": [[400, "metadata-routing-support-status"]], "Metadata routing": [[408, "module-sklearn.utils.metadata_routing"]], "Methods": [[394, "methods"]], "Metrics": [[405, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[993, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "MinMaxScaler": [[305, "minmaxscaler"]], "Mini Batch K-Means": [[410, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[415, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[415, "mini-batch-dictionary-learning"]], "MiniBatchNMF: an online version of NMF": [[319, "minibatchnmf-an-online-version-of-nmf"]], "Minimal Cost-Complexity Pruning": [[1009, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1049, "minimal-dependencies"], [1050, "minimal-dependencies"]], "Minimum Covariance Determinant": [[412, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[79, "minimum-covariance-determinant-estimator"]], "Minor version release (also known as bug-fix release)": [[384, "minor-version-release-also-known-as-bug-fix-release"]], "Misc": [[1036, "misc"]], "Miscellaneous": [[164, "miscellaneous"], [225, "miscellaneous"], [408, "miscellaneous"], [1044, "miscellaneous"], [1044, "id40"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1047, "miscellaneous"], [1047, "id13"], [1048, "miscellaneous"], [1049, "miscellaneous"], [1052, "miscellaneous"]], "Misleading values on strongly correlated features": [[1001, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[160, "missing-value-imputation"], [164, "missing-value-imputation"]], "Missing Values Support": [[1009, "missing-values-support"]], "Missing information": [[162, "missing-information"]], "Missing value support for Random Forest": [[322, "missing-value-support-for-random-forest"]], "Missing values support": [[417, "missing-values-support"]], "Missing values support in decision trees": [[321, "missing-values-support-in-decision-trees"]], "Model Complexity Influence": [[5, "model-complexity-influence"]], "Model Compression": [[366, "model-compression"]], "Model Reshaping": [[366, "model-reshaping"]], "Model Selection": [[164, "model-selection"], [251, "model-selection"]], "Model Selection Enhancements and API Changes": [[1042, "model-selection-enhancements-and-api-changes"]], "Model Selection Interface": [[408, "model-selection-interface"]], "Model Training and Comparison": [[120, "model-training-and-comparison"]], "Model comparison": [[119, "model-comparison"]], "Model evaluation": [[393, "model-evaluation"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Model persistence": [[403, "model-persistence"]], "Model selection and evaluation": [[404, "model-selection-and-evaluation"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[100, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Model selection: choosing estimators and their parameters": [[1024, "model-selection-choosing-estimators-and-their-parameters"]], "Model selection: development and evaluation": [[982, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[982, "model-specific-cross-validation"]], "Model training and selection": [[145, "model-training-and-selection"], [248, "model-training-and-selection"]], "Model validation": [[408, "model-validation"]], "Model with metadata stripping": [[351, "model-with-metadata-stripping"]], "Model without metadata stripping": [[351, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Modeling non-linear feature interactions with kernels": [[2, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[2, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[11, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[302, "models-definition"]], "Models robustness to recover the ground truth weights": [[176, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[990, "modified-locally-linear-embedding"]], "Monitoring performance": [[380, "monitoring-performance"]], "Monotonic Constraints": [[127, "monotonic-constraints"], [417, "monotonic-constraints"]], "Monotonic constraints": [[125, "monotonic-constraints"]], "More control with warm_start": [[997, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[53, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[109, "multi-class-adaboosted-decision-trees"]], "Multi-class case": [[993, "multi-class-case"]], "Multi-class classification": [[1008, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[386, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[990, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[221, "multi-dimensional-scaling"]], "Multi-label case": [[993, "multi-label-case"]], "Multi-label confusion matrix": [[993, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[997, "multi-layer-perceptron"]], "Multi-layer perceptron": [[168, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[359, "multi-output-decision-tree-regression"]], "Multi-output problems": [[1009, "multi-output-problems"]], "Multi-task Elastic-Net": [[989, "multi-task-elastic-net"]], "Multi-task Lasso": [[989, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[408, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[1004, "multilabelbinarizer"]], "MultiOutputClassifier": [[994, "multioutputclassifier"]], "MultiOutputRegressor": [[994, "multioutputregressor"]], "Multiclass Receiver Operating Characteristic (ROC)": [[268, "multiclass-receiver-operating-characteristic-roc"]], "Multiclass and multilabel classification": [[993, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[389, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[994, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[994, "multiclass-classification"], [1027, null]], "Multiclass classification strategies": [[408, "multiclass-classification-strategies"]], "Multiclass methods": [[164, "multiclass-methods"], [277, "multiclass-methods"]], "Multiclass sparse logistic regression on 20newgroups": [[212, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Multiclass support": [[407, "multiclass-support"]], "Multiclass vs. multilabel fitting": [[1020, "multiclass-vs-multilabel-fitting"]], "Multiclass-multioutput classification": [[994, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[218, "multidimensional-scaling"]], "Multilabel": [[376, "multilabel"]], "Multilabel classification": [[234, "multilabel-classification"], [994, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[281, "multilabel-classification-using-a-classifier-chain"]], "Multilabel ranking metrics": [[408, "multilabel-ranking-metrics"], [993, "multilabel-ranking-metrics"]], "Multinomial Case": [[989, "multinomial-case"]], "Multinomial Naive Bayes": [[995, "multinomial-naive-bayes"]], "Multioutput methods": [[164, "multioutput-methods"], [280, "multioutput-methods"]], "Multioutput regression": [[994, "multioutput-regression"]], "Multiple modules": [[1044, "multiple-modules"], [1045, "multiple-modules"]], "Multiple vs. Single Imputation": [[983, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[983, "multivariate-feature-imputation"]], "Mutual Information based scores": [[410, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[410, "mutual-reachability-graph"]], "NMF with a beta-divergence": [[415, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[415, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[995, "naive-bayes"]], "Naive evaluation of the next hour bike demand regression": [[11, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[2, "naive-linear-regression"]], "Native Categorical Feature Support": [[311, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[317, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[315, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[294, "nearest-centroid-classification"]], "Nearest Centroid Classifier": [[996, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[996, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[164, "nearest-neighbors"], [284, "nearest-neighbors"], [996, "nearest-neighbors"]], "Nearest Neighbors Classification": [[286, "nearest-neighbors-classification"], [996, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[996, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[996, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[295, "nearest-neighbors-regression"]], "Nearest Shrunken Centroid": [[996, "nearest-shrunken-centroid"]], "Nearest neighbor and the curse of dimensionality": [[1027, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Nearest neighbors imputation": [[983, "nearest-neighbors-imputation"]], "Neighborhood Components Analysis": [[996, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[293, "neighborhood-components-analysis-illustration"]], "Nested cross-validation": [[1024, null]], "Nested versus non-nested cross-validation": [[264, "nested-versus-non-nested-cross-validation"]], "NetBSD": [[397, "netbsd"]], "Neural Networks": [[164, "neural-networks"], [298, "neural-networks"]], "Neural network models (supervised)": [[997, "neural-network-models-supervised"]], "Neural network models (unsupervised)": [[998, "neural-network-models-unsupervised"]], "New Estimator Classes": [[1037, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[317, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[317, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[317, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[320, "new-and-enhanced-displays"]], "New classes": [[1036, "new-classes"]], "New display model_selection.ValidationCurveDisplay": [[321, "new-display-model-selection-validationcurvedisplay"]], "New documentation improvements": [[317, "new-documentation-improvements"], [318, "new-documentation-improvements"]], "New features": [[1039, "new-features"], [1040, "new-features"], [1041, "new-features"], [1042, "new-features"], [1043, "new-features"]], "New plotting API": [[315, "new-plotting-api"]], "New self-training meta-estimator": [[317, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1012, "new-to-scientific-python"]], "Next steps": [[393, "next-steps"]], "Non-Negative Least Squares": [[989, "non-negative-least-squares"]], "Non-linear transformation": [[1003, "non-linear-transformation"]], "Non-negative components - NMF": [[93, "non-negative-components-nmf"]], "Non-negative least squares": [[192, "non-negative-least-squares"]], "Non-negative matrix factorization (NMF or NNMF)": [[415, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[31, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Normalization": [[1003, "normalization"]], "Normalized Discounted Cumulative Gain": [[993, "normalized-discounted-cumulative-gain"]], "Normalizer": [[305, "normalizer"]], "Note on MPS device support": [[405, "note-on-mps-device-support"]], "Notes": [[368, "notes"]], "Novelty Detection": [[999, "novelty-detection"]], "Novelty and Outlier Detection": [[999, "novelty-and-outlier-detection"]], "Novelty detection with Local Outlier Factor": [[999, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[289, "novelty-detection-with-local-outlier-factor-lof"]], "NumPy": [[385, "numpy"]], "Number of candidates and amount of resource at each iteration": [[271, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[382, "numerical-assertions-in-tests"]], "Nystroem Method for Kernel Approximation": [[985, "nystroem-method-for-kernel-approximation"]], "ONNX": [[403, "onnx"]], "OOB Errors for Random Forests": [[113, "oob-errors-for-random-forests"]], "OPTICS": [[410, "optics"]], "Obtaining predictions by cross-validation": [[414, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1018, "id19"]], "Older Versions": [[1036, "older-versions"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[211, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "One-class SVM with non-linear kernel (RBF)": [[338, "one-class-svm-with-non-linear-kernel-rbf"]], "One-vs-One multiclass ROC": [[268, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[268, "one-vs-rest-multiclass-roc"]], "OneVsOneClassifier": [[994, "onevsoneclassifier"]], "OneVsRestClassifier": [[994, "onevsrestclassifier"]], "Online One-Class SVM": [[318, "online-one-class-svm"], [1007, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[48, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Open problem: Stock Market Structure": [[1025, "open-problem-stock-market-structure"]], "Optical recognition of handwritten digits dataset": [[377, "optical-recognition-of-handwritten-digits-dataset"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[382, "optional-arguments"]], "Options to tune the decision threshold": [[409, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[412, "oracle-approximating-shrinkage"]], "Ordinary Least Squares": [[989, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[989, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[195, "ordinary-least-squares-and-ridge-regression-variance"]], "Original data": [[265, "original-data"], [305, "original-data"]], "Original image": [[51, "original-image"]], "Original points": [[293, "original-points"]], "Orthogonal Matching Pursuit": [[196, "orthogonal-matching-pursuit"]], "Orthogonal Matching Pursuit (OMP)": [[989, "orthogonal-matching-pursuit-omp"]], "Other changes": [[1036, "other-changes"]], "Other estimators and tasks": [[1013, "other-estimators-and-tasks"]], "Otto Group": [[1018, "id26"]], "Our community, our values": [[380, null]], "Our vanilla classifier": [[273, "our-vanilla-classifier"]], "Out of Bag Estimates": [[982, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[6, "out-of-core-classification-of-text-documents"]], "Out-of-core naive Bayes model fitting": [[995, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[999, "id1"]], "Outlier detection on a real data set": [[7, "outlier-detection-on-a-real-data-set"]], "Outlier detection with Local Outlier Factor (LOF)": [[290, "outlier-detection-with-local-outlier-factor-lof"]], "Outlier-robust regressors": [[408, "outlier-robust-regressors"]], "Outliers in the X direction": [[214, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[214, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1001, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[994, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[367, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[410, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[278, "overview-of-multiclass-training-meta-estimators"]], "Overview of outlier detection methods": [[999, "overview-of-outlier-detection-methods"]], "PCA example with Iris Data-set": [[99, "pca-example-with-iris-data-set"]], "PCA using randomized SVD": [[415, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1010, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1018, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[83, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[83, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[413, "plscanonical"]], "PLSRegression": [[413, "plsregression"]], "PLSSVD": [[413, "plssvd"]], "Packaging": [[1048, "packaging"]], "Pair Confusion Matrix": [[410, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[259, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[259, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[323, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[408, "pairwise-metrics"]], "Pairwise metrics, Affinities and Kernels": [[991, "pairwise-metrics-affinities-and-kernels"]], "Pandas": [[385, "pandas"]], "Pandas output with set_output API": [[320, "pandas-output-with-set-output-api"]], "Parallel NumPy and SciPy routines from numerical libraries": [[367, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallelism": [[367, "parallelism"], [982, "parallelism"]], "Parallelism, resource management, and configuration": [[367, "parallelism-resource-management-and-configuration"]], "Parallelization": [[417, "parallelization"]], "Parameter tuning using grid search": [[1029, "parameter-tuning-using-grid-search"]], "Parameters": [[394, "parameters"], [417, "parameters"]], "Parameters and init": [[382, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1008, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[168, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial Dependence and Individual Conditional Expectation plots": [[1000, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[1000, "partial-dependence-plots"]], "Partitioning the data": [[173, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[989, "passive-aggressive-algorithms"]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[418, "patch-extraction"]], "PeerIndex": [[1018, "id17"]], "People": [[1036, "people"], [1036, "id2"], [1036, "id5"], [1036, "id8"], [1036, "id11"], [1036, "id13"], [1036, "id15"], [1036, "id17"], [1037, "people"], [1037, "id3"], [1038, "people"], [1039, "people"]], "Perceptron": [[989, "perceptron"]], "Performance improvements": [[319, "performance-improvements"]], "Performance improvements in PCA": [[323, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[352, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[198, "periodic-splines"]], "Periodic spline features": [[2, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[169, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[170, "permutation-importance-with-multicollinear-or-correlated-features"]], "Permutation feature importance": [[1001, "permutation-feature-importance"]], "Permutation test score": [[265, "permutation-test-score"], [414, "permutation-test-score"]], "Permutation-based feature importance": [[315, "permutation-based-feature-importance"]], "Pinball loss": [[993, "pinball-loss"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Pipeline compatibility": [[382, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[260, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[411, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[67, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"], [411, "pipelines-and-composite-estimators"]], "Pipelines: chaining pre-processors and estimators": [[393, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1010, null], [1025, "pipelining"]], "Pipelining: chaining a PCA and a logistic regression": [[71, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Platform-specific instructions": [[378, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[39, "plot-hierarchical-clustering-dendrogram"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[266, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[256, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[202, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Plot a PCA representation": [[88, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[351, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[268, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[268, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[181, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[236, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[132, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot classification boundaries with different SVM Kernels": [[343, "plot-classification-boundaries-with-different-svm-kernels"]], "Plot classification probability": [[28, "plot-classification-probability"]], "Plot data and the predicted probabilities": [[22, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[336, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot discrete decision boundary": [[126, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[136, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[133, "plot-individual-and-voting-regression-predictions"]], "Plot multi-class SGD on the iris dataset": [[206, "plot-multi-class-sgd-on-the-iris-dataset"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[189, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Plot number of features VS. cross-validation scores": [[145, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[126, "plot-path-length-decision-boundary"]], "Plot randomly generated classification dataset": [[89, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[90, "plot-randomly-generated-multilabel-dataset"]], "Plot regularization path": [[190, "plot-regularization-path"]], "Plot result": [[36, "plot-result"], [61, "plot-result"], [65, "plot-result"], [65, "id2"]], "Plot results": [[6, "plot-results"], [47, "plot-results"], [76, "plot-results"], [94, "plot-results"], [95, "plot-results"], [115, "plot-results"], [281, "plot-results"], [290, "plot-results"]], "Plot results functions": [[272, "plot-results-functions"]], "Plot support and time series": [[191, "plot-support-and-time-series"]], "Plot the BIC scores": [[248, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[266, "plot-the-precision-recall-curve"]], "Plot the best model": [[248, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[342, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[131, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot the decision surface of decision trees trained on the iris dataset": [[357, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Plot the marginal log-likelihood": [[176, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[266, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[326, "plot-the-most-uncertain-predictions"]], "Plot the results": [[48, "plot-the-results"], [80, "plot-the-results"], [133, "plot-the-results"], [162, "plot-the-results"]], "Plot the results on an image": [[45, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[337, "plot-the-support-vectors-in-linearsvc"]], "Plot the true and estimated coefficients": [[176, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[177, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plotting": [[302, "plotting"], [408, "plotting"], [408, "id7"], [408, "id9"]], "Plotting API Overview": [[387, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[255, "plotting-cross-validated-predictions"]], "Plotting Functions": [[32, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[261, "plotting-learning-curves-and-checking-models-scalability"]], "Plotting Validation Curves": [[275, "plotting-validation-curves"]], "Plotting four circles": [[64, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[237, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[237, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[237, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[176, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[18, "plotting-results"]], "Plotting the ROC Curve": [[239, "plotting-the-roc-curve"]], "Plotting the Results": [[311, "plotting-the-results"]], "Plotting the result": [[263, "plotting-the-result"]], "Plotting the results": [[62, "plotting-the-results"], [110, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[201, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[64, "plotting-two-circles"]], "Plotting with Multiple Axes": [[387, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[197, "poisson-regression-and-non-normal-loss"]], "Polars output in set_output": [[322, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[985, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[198, "polynomial-and-spline-interpolation"]], "Polynomial features": [[1003, "polynomial-features"]], "Polynomial kernel": [[343, "polynomial-kernel"], [991, "polynomial-kernel"], [1027, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[989, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Possible solutions": [[55, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[356, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Post-fit model tuning": [[408, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[273, "post-hoc-tuning-the-cut-off-point-of-decision-function"]], "Post-tuning the decision threshold": [[409, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[253, "post-tuning-the-decision-threshold-for-cost-sensitive-learning"]], "PowerTransformer": [[305, "powertransformer"]], "Pre-test vs. post-test analysis": [[262, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[993, "precision-recall-and-f-measures"]], "Precision-Recall": [[266, "precision-recall"]], "Precomputed sparse nearest neighbors graph": [[315, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[414, "predefined-fold-splits-validation-sets"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Prediction Latency": [[8, "prediction-latency"], [366, "prediction-latency"]], "Prediction Throughput": [[366, "prediction-throughput"]], "Preparing a release PR": [[384, "preparing-a-release-pr"]], "Preparing the data": [[110, "preparing-the-data"], [125, "preparing-the-data"], [173, "preparing-the-data"]], "Preprocessing": [[164, "preprocessing"], [304, "preprocessing"]], "Preprocessing data": [[1003, "preprocessing-data"]], "Preprocessing numerical variables": [[167, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[168, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[168, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[168, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[84, "principal-component-regression-vs-partial-least-squares-regression"]], "Principal component analysis (PCA)": [[415, "principal-component-analysis-pca"]], "Principal component analysis: PCA": [[1028, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1053, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[420, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Probability Calibration curves": [[23, "probability-calibration-curves"]], "Probability Calibration for 3-class classification": [[24, "probability-calibration-for-3-class-classification"]], "Probability calibration": [[407, "probability-calibration"]], "Probability calibration of classifiers": [[22, "probability-calibration-of-classifiers"]], "Processing the dataset": [[167, "processing-the-dataset"]], "Productivity and sanity-preserving tips": [[388, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[386, "profiling-python-code"]], "Profiling compiled extensions": [[386, "profiling-compiled-extensions"]], "Project template:": [[382, null]], "Projecting data: PCA vs. KernelPCA": [[98, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[98, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[84, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[11, "proper-next-hour-forecasting-evaluation"]], "Pros:": [[992, null], [992, null]], "Provide a failing code example with minimal comments": [[385, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[380, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[215, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1014, "purpose-of-this-document"]], "Purpose of this example": [[201, "purpose-of-this-example"]], "Putting it all together": [[1025, "putting-it-all-together"]], "PyTorch Support": [[405, "pytorch-support"]], "Python API": [[367, "python-api"]], "Python package and dataset imports, load dataset": [[231, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[386, "python-cython-or-c-c"]], "QDA": [[987, "qda"]], "Qualitative analysis of the impact of features on linear model predictions": [[2, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[352, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[989, "quantile-regression"]], "Quantile Regressor": [[318, "quantile-regressor"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[319, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "Quantile regression": [[199, "quantile-regression"]], "QuantileTransformer (Gaussian output)": [[305, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[305, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[989, "ransac-random-sample-consensus"]], "RBF SVM parameters": [[339, "rbf-svm-parameters"]], "RBF kernel": [[343, "rbf-kernel"], [991, "rbf-kernel"]], "RBF kernel (Radial Basis Function)": [[1027, "rbf-kernel-radial-basis-function"]], "RCV1 dataset": [[375, "rcv1-dataset"]], "ROC AUC now supports multiclass classification": [[315, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[239, "roc-curve-with-visualization-api"]], "ROC curve showing a specific class": [[268, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[268, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[268, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[268, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[985, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[420, "radial-basis-function-rbf-kernel"]], "Rand index": [[410, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[170, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[417, "random-forests"]], "Random Numbers": [[382, "random-numbers"]], "Random Projection": [[1005, "random-projection"]], "Random data": [[265, "random-data"]], "Random forests and other randomized tree ensembles": [[417, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[414, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1010, "random-projections"]], "Randomized Parameter Optimization": [[982, "randomized-parameter-optimization"]], "Rangespan": [[1018, "id11"]], "Ranking loss": [[993, "ranking-loss"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Rational quadratic kernel": [[420, "rational-quadratic-kernel"]], "Reading the existing code base": [[380, "reading-the-existing-code-base"]], "Real world datasets": [[375, "real-world-datasets"]], "Real-world data set": [[73, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[269, "receiver-operating-characteristic-roc-with-cross-validation"]], "Receiver operating characteristic (ROC)": [[993, "receiver-operating-characteristic-roc"]], "Recently deprecated": [[408, "recently-deprecated"]], "Recognizing hand-written digits": [[30, "recognizing-hand-written-digits"]], "Recommendation": [[375, null]], "Recommendation Engine packages": [[1013, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[3, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[144, "recursive-feature-elimination"], [419, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "Reference": [[419, null], [419, null]], "References": [[3, null], [9, "references"], [23, "references"], [25, "references"], [79, "references"], [112, "references"], [173, "references"], [181, "references"], [185, null], [259, null], [278, "references"], [296, "references"], [375, null], [375, null], [375, null], [375, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [417, null], [418, null], [420, "references"], [983, "references"], [983, null], [1000, null], [1003, null], [1003, null], [1006, null], [1006, null]], "References:": [[78, null], [109, null], [169, null], [264, null], [265, null], [374, null], [375, null], [406, null], [406, null], [406, null], [407, null], [410, null], [410, null], [410, null], [412, null], [412, null], [412, null], [412, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [418, null], [418, null], [982, null], [982, null], [985, null], [986, null], [987, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [990, null], [990, null], [990, null], [990, null], [990, null], [990, null], [990, null], [990, null], [991, null], [991, null], [993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [994, null], [994, null], [994, null], [996, null], [998, null], [999, null], [999, null], [999, null], [999, null], [1001, null], [1005, null], [1005, null], [1005, null], [1007, null], [1007, null], [1008, null]], "Refitting and updating parameters": [[1020, "refitting-and-updating-parameters"]], "Region of Practical Equivalence": [[259, "region-of-practical-equivalence"]], "Regression": [[157, "regression"], [989, "regression"], [997, "regression"], [1007, "regression"], [1008, "regression"], [1009, "regression"]], "Regression criteria": [[1009, "regression-criteria"]], "Regression metrics": [[408, "regression-metrics"], [993, "regression-metrics"]], "RegressorChain": [[994, "regressorchain"]], "Regressors with variable selection": [[408, "regressors-with-variable-selection"]], "Regularization": [[997, "regularization"]], "Regularization path of L1- Logistic Regression": [[190, "regularization-path-of-l1-logistic-regression"]], "Related Projects": [[1013, "related-projects"]], "Related changes": [[1043, "related-changes"]], "Related links:": [[374, null]], "Relation to impurity-based importance in trees": [[1001, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[164, "release-highlights"], [314, "release-highlights"]], "Release Highlights for scikit-learn 0.22": [[315, "release-highlights-for-scikit-learn-0-22"]], "Release Highlights for scikit-learn 0.23": [[316, "release-highlights-for-scikit-learn-0-23"]], "Release Highlights for scikit-learn 0.24": [[317, "release-highlights-for-scikit-learn-0-24"]], "Release Highlights for scikit-learn 1.0": [[318, "release-highlights-for-scikit-learn-1-0"]], "Release Highlights for scikit-learn 1.1": [[319, "release-highlights-for-scikit-learn-1-1"]], "Release Highlights for scikit-learn 1.2": [[320, "release-highlights-for-scikit-learn-1-2"]], "Release Highlights for scikit-learn 1.3": [[321, "release-highlights-for-scikit-learn-1-3"]], "Release Highlights for scikit-learn 1.4": [[322, "release-highlights-for-scikit-learn-1-4"]], "Release Highlights for scikit-learn 1.5": [[323, "release-highlights-for-scikit-learn-1-5"]], "Release History": [[1034, "release-history"]], "Release checklist": [[384, "release-checklist"]], "Releasing": [[384, "releasing"]], "Remarks": [[230, "remarks"]], "Removed modules": [[1036, "removed-modules"]], "Removing features with low variance": [[419, "removing-features-with-low-variance"]], "Repeated K-Fold": [[414, "repeated-k-fold"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[403, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[302, "restricted-boltzmann-machine-features-for-digit-classification"]], "Restricted Boltzmann machines": [[998, "restricted-boltzmann-machines"]], "Results interpretation": [[281, "results-interpretation"]], "Retrieve dataframes from OpenML": [[315, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[10, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[6, "reuters-dataset-related-routines"]], "Rich HTML representation": [[228, "rich-html-representation"]], "Rich visual representation of estimators": [[316, "rich-visual-representation-of-estimators"]], "Ridge Complexity": [[989, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[201, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Ridge regression and classification": [[989, "ridge-regression-and-classification"]], "Roadmap": [[1014, "roadmap"]], "Robust Covariance Estimation": [[412, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[78, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "Robust linear estimator fitting": [[203, "robust-linear-estimator-fitting"]], "Robust linear model estimation using RANSAC": [[200, "robust-linear-model-estimation-using-ransac"]], "Robust vs Empirical covariance estimate": [[79, "robust-vs-empirical-covariance-estimate"]], "RobustScaler": [[305, "robustscaler"]], "Robustness of cross-validation results": [[362, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[989, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[982, "robustness-to-failure"]], "Roles And Responsibilities": [[395, "roles-and-responsibilities"]], "Rolling your own estimator": [[382, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[233, "routing-meta-estimator"]], "Run the benchmark": [[56, "run-the-benchmark"]], "Run the code and plot the results": [[5, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[263, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[378, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[993, "r2-score-the-coefficient-of-determination"]], "SGD": [[1007, "id5"]], "SGD: Maximum margin separating hyperplane": [[209, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Penalties": [[208, "sgd-penalties"]], "SGD: Weighted samples": [[210, "sgd-weighted-samples"]], "SGD: convex loss functions": [[207, "sgd-convex-loss-functions"]], "SKLEARN_ASSUME_FINITE": [[367, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[367, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[367, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[367, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[367, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[367, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[367, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[367, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[367, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[367, "sklearn-working-memory"]], "SVC": [[1008, "svc"]], "SVM Exercise": [[138, "svm-exercise"]], "SVM Margins Example": [[344, "svm-margins-example"]], "SVM Tie Breaking Example": [[347, "svm-tie-breaking-example"]], "SVM with custom kernel": [[335, "svm-with-custom-kernel"]], "SVM-Anova: SVM with univariate feature selection": [[342, "svm-anova-svm-with-univariate-feature-selection"]], "SVM: Maximum margin separating hyperplane": [[340, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[341, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM: Weighted samples": [[348, "svm-weighted-samples"]], "SVR": [[1008, "svr"]], "Sample images": [[374, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[260, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Sample weight support": [[417, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[316, "sample-weight-support-for-lasso-and-elasticnet"]], "Samples generator": [[408, "samples-generator"]], "Scalability and stability improvements to KMeans": [[316, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[173, "scalable-learning-with-polynomial-kernel-approximation"]], "Scale Invariance": [[53, "scale-invariance"]], "Scaling data with outliers": [[1003, "scaling-data-with-outliers"]], "Scaling features to a range": [[1003, "scaling-features-to-a-range"]], "Scaling sparse data": [[1003, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[346, "scaling-the-regularization-parameter-for-svcs"]], "Scaling up the One-Class SVM": [[999, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[368, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[88, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[83, "scatter-plot-of-scores"]], "Scikit-learn compatibility checker": [[408, "module-sklearn.utils.estimator_checks"]], "Scikit-learn governance and decision-making": [[395, "scikit-learn-governance-and-decision-making"]], "Scikit-learn object discovery": [[408, "module-sklearn.utils.discovery"]], "Score, and cross-validated scores": [[1024, "score-and-cross-validated-scores"]], "Scores and probabilities": [[1008, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[982, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[7, "second-example"]], "Second experiment: varying number of classes and clusters": [[35, "second-experiment-varying-number-of-classes-and-clusters"]], "Section contents": [[1020, null]], "Security": [[1054, "security"]], "Security & Maintainability Limitations": [[403, "security-maintainability-limitations"]], "See Also:": [[264, null], [411, null]], "Segmenting the picture of greek coins in regions": [[44, "segmenting-the-picture-of-greek-coins-in-regions"]], "Selecting Lasso via an information criterion": [[186, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[186, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[70, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[58, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Self Training": [[1006, "self-training"]], "Semi Supervised Classification": [[164, "semi-supervised-classification"], [325, "semi-supervised-classification"]], "Semi-supervised Classification on a Text Dataset": [[330, "semi-supervised-classification-on-a-text-dataset"]], "Semi-supervised learning": [[326, "semi-supervised-learning"], [1006, "semi-supervised-learning"]], "Sequence similarity matrix under the kernel": [[157, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[419, "sequential-feature-selection"]], "Serving the model artifact": [[403, "serving-the-model-artifact"]], "Setting regularization parameter": [[989, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[989, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[215, "severity-model-gamma-distribution"]], "Shape of the data arrays": [[1020, null]], "Shrinkage": [[1027, "shrinkage"]], "Shrinkage and Covariance Estimator": [[987, "shrinkage-and-covariance-estimator"]], "Shrinkage and sparsity with logistic regression": [[1027, null]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[76, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Shrinkage via learning rate": [[417, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[412, "shrunk-covariance"]], "Sigmoid": [[407, "sigmoid"]], "Sigmoid kernel": [[343, "sigmoid-kernel"], [991, "sigmoid-kernel"], [1027, "sigmoid-kernel"]], "Silhouette Coefficient": [[410, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[288, "simple-1d-kernel-density-estimation"]], "Simple Pipeline": [[233, "simple-pipeline"]], "Single estimator versus bagging: bias-variance decomposition": [[112, "single-estimator-versus-bagging-bias-variance-decomposition"]], "Single label": [[376, "single-label"]], "Skewed Chi Squared Kernel": [[985, "skewed-chi-squared-kernel"]], "Social Media": [[1017, "social-media"]], "Solvers": [[989, "solvers"]], "Sparse coding with a precomputed dictionary": [[102, "sparse-coding-with-a-precomputed-dictionary"], [415, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[93, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1003, null]], "Sparse inverse covariance": [[412, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[80, "sparse-inverse-covariance-estimation"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[415, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1005, "sparse-random-projection"]], "Sparsity": [[418, "sparsity"], [1027, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[194, "sparsity-example-fitting-only-features-1-and-2"]], "Species distribution dataset": [[375, "species-distribution-dataset"]], "Species distribution modeling": [[9, "species-distribution-modeling"]], "Specific models": [[382, "specific-models"]], "Specifying an objective metric": [[982, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[982, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[406, "spectral-biclustering"]], "Spectral Clustering Graphs": [[410, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[406, "spectral-co-clustering"]], "Spectral Embedding": [[990, "spectral-embedding"]], "Spectral clustering": [[410, "spectral-clustering"]], "Spectral clustering for image segmentation": [[64, "spectral-clustering-for-image-segmentation"]], "Spectral embedding for non-linear dimensionality reduction": [[218, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "Spline Transformers": [[318, "spline-transformers"]], "Spline transformer": [[1003, "spline-transformer"]], "Splitter Classes": [[408, "splitter-classes"]], "Splitter Functions": [[408, "splitter-functions"]], "Spotify": [[1018, "id2"]], "Sprints": [[0, "sprints"]], "Stack of predictors on a single data set": [[130, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[417, "stacked-generalization"]], "Stacking Classifier and Regressor": [[315, "stacking-classifier-and-regressor"]], "Stalled and Unclaimed Issues": [[380, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[380, "stalled-pull-requests"]], "Standard replies for reviewing": [[388, "standard-replies-for-reviewing"]], "StandardScaler": [[305, "standardscaler"]], "Standardization, or mean removal and variance scaling": [[1003, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1014, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[259, "statistical-comparison-of-models-using-grid-search"]], "Statistical learning": [[1023, null]], "Statistical learning with Python": [[1013, "statistical-learning-with-python"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1026, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Stochastic Gradient Descent": [[1007, "stochastic-gradient-descent"]], "Stochastic Gradient Descent - SGD": [[989, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1007, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[998, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1007, "stopping-criterion"]], "Strategies comparison": [[278, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[368, "strategies-to-scale-computationally-bigger-data"]], "Stratified Shuffle Split": [[414, "stratified-shuffle-split"]], "Stratified k-fold": [[414, "stratified-k-fold"]], "StratifiedGroupKFold": [[414, "stratifiedgroupkfold"]], "Streaming instances": [[368, "streaming-instances"]], "Submitting a bug report or a feature request": [[380, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1014, "subpackage-specific-goals"]], "Subsampling": [[417, "subsampling"]], "Successive Halving Iterations": [[271, "successive-halving-iterations"]], "Successive Halving estimators for tuning hyper-parameters": [[317, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Summarizing the key points": [[403, "summarizing-the-key-points"]], "Summary": [[23, "summary"], [120, "summary"], [353, "summary"]], "Summary of cross-validation approach": [[186, "summary-of-cross-validation-approach"]], "Supervised learning": [[1016, "supervised-learning"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1027, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "Support": [[1017, "support"]], "Support Vector Machines": [[164, "support-vector-machines"], [334, "support-vector-machines"], [1008, "support-vector-machines"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[345, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Support for Array API": [[1053, "support-for-array-api"], [1054, "support-for-array-api"], [1055, "support-for-array-api"]], "Support for Array API-compatible inputs": [[405, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1053, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1054, "support-for-building-with-meson"]], "Support for missing values": [[125, "support-for-missing-values"]], "Support for quantile loss": [[125, "support-for-quantile-loss"]], "Support vector machines (SVMs)": [[1027, "support-vector-machines-svms"]], "Swiss Roll": [[222, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[222, "swiss-roll-and-swiss-hole-reduction"]], "Swiss-Hole": [[222, "swiss-hole"]], "Synthetic dataset": [[385, "synthetic-dataset"]], "Synthetic example": [[73, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[218, "t-distributed-stochastic-neighbor-embedding"]], "Table Of Contents": [[369, "table-of-contents"]], "Table of Contents": [[392, "table-of-contents"]], "Take-home messages": [[259, "take-home-messages"]], "Target Encoder": [[1003, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[312, "target-encoder-s-internal-cross-fitting"]], "Target Types": [[394, "target-types"]], "Target format": [[994, "target-format"], [994, "id5"], [994, "id8"], [994, "id10"]], "TargetEncoder: a new category encoding strategy": [[321, "targetencoder-a-new-category-encoding-strategy"]], "Technical Committee": [[395, "technical-committee"]], "Test dependencies": [[378, "test-dependencies"]], "Test with permutations the significance of a classification score": [[265, "test-with-permutations-the-significance-of-a-classification-score"]], "Testing Functions": [[389, "testing-functions"]], "Testing and improving test coverage": [[380, "testing-and-improving-test-coverage"]], "Text feature extraction": [[418, "text-feature-extraction"]], "TfidfVectorizer": [[353, "tfidfvectorizer"]], "Tf\u2013idf term weighting": [[418, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[375, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[418, "the-bag-of-words-representation"]], "The Digit Dataset": [[87, "the-digit-dataset"]], "The Dirichlet Process": [[992, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[197, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[88, "the-iris-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[230, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "The Johnson-Lindenstrauss lemma": [[1005, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[375, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[388, "the-meson-build-backend"]], "The Olivetti faces dataset": [[375, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[278, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[266, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[253, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[414, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The curse of dimensionality": [[1027, "the-curse-of-dimensionality"]], "The data": [[84, "the-data"]], "The dataset": [[257, "the-dataset"]], "The dataset: simulated hourly wages": [[166, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[167, "the-dataset-wages"]], "The diabetes dataset": [[273, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[278, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[167, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[167, "the-problem-of-correlated-variables"]], "The problem solved in clustering": [[1028, null]], "The problem solved in supervised learning": [[1027, null]], "The scikit-learn.org web site": [[384, "the-scikit-learn-org-web-site"]], "The scoring parameter: defining model evaluation rules": [[993, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[214, "theil-sen-regression"]], "Theil-Sen estimator: generalized-median-based estimator": [[989, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical bounds": [[230, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[233, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[397, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[414, "time-series-split"]], "Time-based cross-validation": [[2, "time-based-cross-validation"]], "Time-related feature engineering": [[2, "time-related-feature-engineering"]], "Time-steps as categories": [[2, "time-steps-as-categories"]], "Timing and accuracy plots": [[231, "timing-and-accuracy-plots"]], "Tips and Tricks": [[366, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[381, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[982, "tips-for-parameter-search"]], "Tips for performance": [[381, "tips-for-performance"]], "Tips on Practical Use": [[997, "tips-on-practical-use"], [1007, "tips-on-practical-use"], [1008, "tips-on-practical-use"]], "Tips on practical use": [[990, "tips-on-practical-use"], [1009, "tips-on-practical-use"]], "Tips to ease development": [[381, "tips-to-ease-development"]], "Tokenizing text with scikit-learn": [[1029, "tokenizing-text-with-scikit-learn"]], "Tools": [[405, "tools"]], "Top terms per cluster": [[352, "top-terms-per-cluster"]], "Top-k accuracy score": [[993, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[13, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Total impurity of leaves vs effective alphas of pruned tree": [[356, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[417, "totally-random-trees-embedding"]], "Toy datasets": [[377, "toy-datasets"]], "Tracking feature names in a pipeline": [[411, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[989, null]], "Train and Persist the Model": [[403, "train-and-persist-the-model"]], "Train classifiers": [[339, "train-classifiers"]], "Train error vs Test error": [[272, "train-error-vs-test-error"]], "Train models on the diabetes dataset": [[237, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[360, "train-tree-classifier"]], "Training": [[302, "training"], [996, "training"]], "Training SVC model and plotting decision boundaries": [[343, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[239, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[312, "training-a-ridge-regressor"]], "Training a classifier": [[1029, "training-a-classifier"]], "Training and Evaluating Pipelines with Different Encoders": [[311, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[110, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[133, "training-classifiers"]], "Training of the model": [[126, "training-of-the-model"]], "Training set and testing set": [[1020, null], [1027, null]], "Training the AdaBoostClassifier": [[109, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[201, "training-the-ridge-regressor"]], "Transform": [[996, "transform"]], "Transform data": [[83, "transform-data"]], "Transformers and pre-processors": [[393, "transformers-and-pre-processors"]], "Transforming target in regression": [[411, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1004, "transforming-the-prediction-target-y"]], "Translations of scikit-learn documentation": [[1013, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1009, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[315, "tree-pruning"]], "Tree structure": [[360, "tree-structure"]], "Tree-based feature selection": [[419, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[169, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[379, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[2, "trigonometric-features"]], "Troubleshooting": [[397, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[415, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[323, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[257, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[253, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[253, "tuning-the-decision-threshold"], [273, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[409, "tuning-the-decision-threshold-for-class-prediction"]], "Tuning the hyper-parameters of an estimator": [[982, "tuning-the-hyper-parameters-of-an-estimator"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[135, "tutorial-exercises"], [164, "tutorial-exercises"]], "Tutorial setup": [[1029, "tutorial-setup"]], "Tweedie regression on insurance claims": [[215, "tweedie-regression-on-insurance-claims"]], "Two-class AdaBoost": [[111, "two-class-adaboost"]], "Type casting": [[1020, "type-casting"]], "Type of return values and fitted attributes": [[405, "type-of-return-values-and-fitted-attributes"]], "Types": [[381, "types"]], "T\u00e9l\u00e9com ParisTech": [[1018, "id7"]], "Unbalanced problems": [[1008, "unbalanced-problems"]], "Under Development": [[1031, "under-development"]], "Underfitting vs. Overfitting": [[274, "underfitting-vs-overfitting"]], "Understanding the decision tree structure": [[360, "understanding-the-decision-tree-structure"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Univariate feature imputation": [[983, "univariate-feature-imputation"]], "Univariate feature selection": [[142, "id1"], [419, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[983, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[382, "universal-attributes"]], "Unlabeled entries in y": [[1006, null]], "Unsupervised Nearest Neighbors": [[996, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1010, "unsupervised-dimensionality-reduction"]], "Unsupervised learning": [[1030, "unsupervised-learning"]], "Unsupervised learning: seeking representations of the data": [[1028, "unsupervised-learning-seeking-representations-of-the-data"]], "Unweighted feature selection": [[400, "unweighted-feature-selection"]], "Usage": [[407, "usage"], [411, "usage"], [411, "id1"], [417, "usage"], [417, "id24"], [417, "id25"], [417, "id27"], [417, "id35"], [989, "usage"]], "Usage Examples": [[400, "usage-examples"]], "Use markdown formatting": [[385, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[388, "useful-pytest-aliases-and-flags"]], "User Guide": [[1031, "user-guide"]], "User Questions": [[1017, "user-questions"]], "Using Cython": [[386, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[306, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Using None or RandomState instances, and repeated calls to fit and split": [[362, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[381, "using-openmp"]], "Using a debugger, gdb": [[386, "using-a-debugger-gdb"]], "Using cross-validation": [[989, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[414, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[127, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[386, "using-gprof"]], "Using kernels": [[1027, "using-kernels"]], "Using multiple metric evaluation": [[993, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[146, "using-negative-tolerance-values"]], "Using scikit-learn": [[392, "using-scikit-learn"]], "Using stop words": [[418, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[386, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[386, "using-yep-and-gperftools"]], "Utilities for Developers": [[389, "utilities-for-developers"]], "Utilities for optimal mathematical operations": [[408, "module-sklearn.utils.extmath"]], "Utilities for parallel computing": [[408, "module-sklearn.utils.parallel"]], "Utilities for random sampling": [[408, "module-sklearn.utils.random"]], "Utilities to deal with multiclass target in classifiers": [[408, "module-sklearn.utils.multiclass"]], "Utilities to handle weights based on class labels": [[408, "module-sklearn.utils.class_weight"]], "Utilities to operate on arrays": [[408, "module-sklearn.utils.arrayfuncs"]], "Utilities to work with graphs": [[408, "module-sklearn.utils.graph"]], "Utilities to work with sparse matrices and arrays": [[408, "module-sklearn.utils.sparsefuncs"]], "Utilities used in meta-estimators": [[408, "module-sklearn.utils.metaestimators"]], "Validation Tools": [[389, "validation-tools"]], "Validation curve": [[988, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[988, "validation-curves-plotting-scores-to-evaluate-models"]], "Vanilla predictive model": [[253, "vanilla-predictive-model"]], "Variational Bayesian Gaussian Mixture": [[992, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[50, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Varying regularization in Multi-layer Perceptron": [[299, "varying-regularization-in-multi-layer-perceptron"]], "Varying the metric": [[410, "varying-the-metric"]], "Vector Quantization Example": [[51, "vector-quantization-example"]], "Vectorizing a large text corpus with the hashing trick": [[418, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1036, "version-0-10"]], "Version 0.11": [[1036, "version-0-11"]], "Version 0.12": [[1036, "version-0-12"]], "Version 0.12.1": [[1036, "version-0-12-1"]], "Version 0.13": [[1037, "version-0-13"], [1037, "changes-0-13"]], "Version 0.13.1": [[1037, "version-0-13-1"]], "Version 0.14": [[1038, "version-0-14"], [1038, "changes-0-14"]], "Version 0.15": [[1039, "version-0-15"], [1039, "changes-0-15"]], "Version 0.15.1": [[1039, "version-0-15-1"]], "Version 0.15.2": [[1039, "version-0-15-2"]], "Version 0.16": [[1040, "version-0-16"], [1040, "changes-0-16"]], "Version 0.16.1": [[1040, "version-0-16-1"]], "Version 0.17": [[1041, "version-0-17"], [1041, "changes-0-17"]], "Version 0.17.1": [[1041, "version-0-17-1"]], "Version 0.18": [[1042, "version-0-18"], [1042, "changes-0-18"]], "Version 0.18.1": [[1042, "version-0-18-1"]], "Version 0.18.2": [[1042, "version-0-18-2"]], "Version 0.19": [[1043, "version-0-19"], [1043, "id1"]], "Version 0.19.1": [[1043, "version-0-19-1"]], "Version 0.19.2": [[1043, "version-0-19-2"]], "Version 0.20": [[1044, "version-0-20"]], "Version 0.20.0": [[1044, "version-0-20-0"]], "Version 0.20.1": [[1044, "version-0-20-1"]], "Version 0.20.2": [[1044, "version-0-20-2"]], "Version 0.20.3": [[1044, "version-0-20-3"]], "Version 0.20.4": [[1044, "version-0-20-4"]], "Version 0.21": [[1045, "version-0-21"]], "Version 0.21.0": [[1045, "version-0-21-0"]], "Version 0.21.1": [[1045, "version-0-21-1"]], "Version 0.21.2": [[1045, "version-0-21-2"]], "Version 0.21.3": [[1045, "version-0-21-3"]], "Version 0.22": [[1046, "version-0-22"]], "Version 0.22.0": [[1046, "version-0-22-0"]], "Version 0.22.1": [[1046, "version-0-22-1"]], "Version 0.22.2.post1": [[1046, "version-0-22-2-post1"]], "Version 0.23": [[1047, "version-0-23"]], "Version 0.23.0": [[1047, "version-0-23-0"]], "Version 0.23.1": [[1047, "version-0-23-1"]], "Version 0.23.2": [[1047, "version-0-23-2"]], "Version 0.24": [[1048, "version-0-24"]], "Version 0.24.0": [[1048, "version-0-24-0"]], "Version 0.24.1": [[1048, "version-0-24-1"]], "Version 0.24.2": [[1048, "version-0-24-2"]], "Version 0.4": [[1036, "version-0-4"]], "Version 0.5": [[1036, "version-0-5"]], "Version 0.6": [[1036, "version-0-6"]], "Version 0.7": [[1036, "version-0-7"]], "Version 0.8": [[1036, "version-0-8"]], "Version 0.9": [[1036, "version-0-9"]], "Version 1.0": [[1049, "version-1-0"]], "Version 1.0.0": [[1049, "version-1-0-0"]], "Version 1.0.1": [[1049, "version-1-0-1"]], "Version 1.0.2": [[1049, "version-1-0-2"]], "Version 1.1": [[1050, "version-1-1"]], "Version 1.1.0": [[1050, "version-1-1-0"]], "Version 1.1.1": [[1050, "version-1-1-1"]], "Version 1.1.2": [[1050, "version-1-1-2"]], "Version 1.1.3": [[1050, "version-1-1-3"]], "Version 1.2": [[1051, "version-1-2"]], "Version 1.2.0": [[1051, "version-1-2-0"]], "Version 1.2.1": [[1051, "version-1-2-1"]], "Version 1.2.2": [[1051, "version-1-2-2"]], "Version 1.3": [[1052, "version-1-3"]], "Version 1.3.0": [[1052, "version-1-3-0"]], "Version 1.3.1": [[1052, "version-1-3-1"]], "Version 1.3.2": [[1052, "version-1-3-2"]], "Version 1.4": [[1053, "version-1-4"]], "Version 1.4.0": [[1053, "version-1-4-0"]], "Version 1.4.1": [[1053, "version-1-4-1"]], "Version 1.4.2": [[1053, "version-1-4-2"]], "Version 1.5": [[1054, "version-1-5"]], "Version 1.5.0": [[1054, "version-1-5-0"]], "Version 1.6": [[1055, "version-1-6"]], "Version 1.6.0": [[1055, "version-1-6-0"]], "Video resources": [[380, "video-resources"]], "Videos": [[1012, "videos"]], "Visual evaluation of regression models": [[993, "visual-evaluation-of-regression-models"]], "Visualization": [[10, "visualization"], [339, "visualization"], [408, "visualization"]], "Visualization of MLP weights on MNIST": [[301, "visualization-of-mlp-weights-on-mnist"]], "Visualization of cluster hierarchy": [[410, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1033, "visualizations"]], "Visualizations with Display Objects": [[227, "visualizations-with-display-objects"]], "Visualize Comparison": [[120, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[254, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[254, "visualize-our-data"]], "Visualize the learning curves": [[232, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[56, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[232, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[411, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[254, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualizing the stock market structure": [[10, "visualizing-the-stock-market-structure"]], "Vocabulary: classification and regression": [[1027, null]], "Voting Classifier": [[417, "voting-classifier"]], "Voting Regressor": [[417, "voting-regressor"]], "Warnings and Exceptions": [[389, "warnings-and-exceptions"]], "Ways to contribute": [[380, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[65, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1046, "website-update"]], "Weighted Average Probabilities (Soft Voting)": [[417, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[400, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[400, "weighted-scoring-and-unweighted-fitting"]], "Welcome to scikit-learn": [[1011, "welcome-to-scikit-learn"]], "What are the inclusion criteria for new algorithms?": [[392, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[392, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[360, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[392, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "Where to from here": [[1029, "where-to-from-here"]], "Who is using scikit-learn?": [[1018, "who-is-using-scikit-learn"]], "Why are there so many different estimators for linear models?": [[392, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[392, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[392, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[392, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[392, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[392, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[392, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[392, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[392, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[417, "why-it-s-faster"]], "Why scikit?": [[392, "why-scikit"]], "Wikipedia principal eigenvector": [[15, "wikipedia-principal-eigenvector"]], "Will you add GPU support?": [[392, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[392, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[397, "winpython-for-windows"]], "Windows": [[378, "windows"]], "Wine recognition dataset": [[377, "wine-recognition-dataset"]], "Workflow Overview": [[403, "workflow-overview"]], "Working With Text Data": [[1029, "working-with-text-data"]], "Working on PRs to help review": [[379, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[379, "working-on-issues-to-improve-them"]], "Working with text documents": [[164, "working-with-text-documents"], [350, "working-with-text-documents"]], "Wrong causal interpretation": [[167, "wrong-causal-interpretation"]], "XOR dataset": [[343, "xor-dataset"]], "Yhat": [[1018, "id10"]], "Zero one loss": [[993, "zero-one-loss"]], "Zopa": [[1018, "id27"]], "__sklearn_is_fitted__ as Developer API": [[107, "sklearn-is-fitted-as-developer-api"]], "betaworks": [[1018, "id4"]], "dbscan_clustering": [[53, "dbscan-clustering"]], "get_feature_names_out Available in all Transformers": [[319, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[382, "get-params-and-set-params"]], "good first issue tag": [[380, null]], "help wanted tag": [[380, null]], "k-Nearest neighbors classifier": [[1027, "k-nearest-neighbors-classifier"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "kcachegrind": [[386, "kcachegrind"]], "macOS": [[378, "macos"]], "macOS compilers from Homebrew": [[378, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[378, "macos-compilers-from-conda-forge"]], "make_blobs": [[385, "make-blobs"]], "make_classification": [[385, "make-classification"]], "make_regression": [[385, "make-regression"]], "min_cluster_size": [[53, "min-cluster-size"]], "min_samples": [[53, "min-samples"]], "pickle, joblib, and cloudpickle": [[403, "pickle-joblib-and-cloudpickle"]], "scikit-learn Tutorials": [[1021, "scikit-learn-tutorials"]], "sklearn": [[1052, "sklearn"]], "sklearn.base": [[1045, "sklearn-base"], [1046, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1051, "sklearn-base"], [1051, "id2"], [1051, "id10"], [1052, "sklearn-base"], [1053, "sklearn-base"]], "sklearn.base.BaseEstimator": [[424, "sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[425, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[426, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[427, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[428, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[429, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[430, "sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[431, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[432, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[433, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[434, "sklearn-base-transformermixin"]], "sklearn.base.clone": [[435, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[436, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[437, "sklearn-base-is-regressor"]], "sklearn.base: Base classes and utility functions": [[408, "module-sklearn.base"]], "sklearn.calibration": [[1045, "sklearn-calibration"], [1046, "sklearn-calibration"], [1048, "sklearn-calibration"], [1049, "sklearn-calibration"], [1049, "id7"], [1050, "sklearn-calibration"], [1051, "sklearn-calibration"], [1051, "id11"], [1052, "sklearn-calibration"], [1052, "id7"], [1053, "sklearn-calibration"], [1053, "id3"], [1054, "sklearn-calibration"]], "sklearn.calibration.CalibratedClassifierCV": [[438, "sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[439, "sklearn-calibration-calibrationdisplay"]], "sklearn.calibration.calibration_curve": [[440, "sklearn-calibration-calibration-curve"]], "sklearn.calibration: Probability Calibration": [[408, "module-sklearn.calibration"]], "sklearn.cluster": [[1044, "sklearn-cluster"], [1044, "id2"], [1044, "id11"], [1044, "id24"], [1045, "sklearn-cluster"], [1045, "id8"], [1046, "sklearn-cluster"], [1046, "id5"], [1047, "sklearn-cluster"], [1047, "id2"], [1047, "id5"], [1048, "sklearn-cluster"], [1049, "sklearn-cluster"], [1049, "id1"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id8"], [1051, "sklearn-cluster"], [1051, "id12"], [1052, "sklearn-cluster"], [1052, "id8"], [1053, "sklearn-cluster"], [1053, "id4"], [1054, "sklearn-cluster"]], "sklearn.cluster.AffinityPropagation": [[441, "sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[442, "sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[443, "sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[444, "sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[445, "sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[446, "sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[447, "sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[448, "sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[449, "sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[450, "sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[451, "sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[452, "sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[453, "sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[454, "sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[455, "sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[456, "sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[457, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[458, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.dbscan": [[421, "sklearn-cluster-dbscan"]], "sklearn.cluster.estimate_bandwidth": [[459, "sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[460, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[461, "sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[462, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[463, "sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[464, "sklearn-cluster-ward-tree"]], "sklearn.cluster: Clustering": [[408, "module-sklearn.cluster"]], "sklearn.compose": [[1044, "sklearn-compose"], [1044, "id3"], [1044, "id6"], [1044, "id12"], [1044, "id25"], [1045, "sklearn-compose"], [1045, "id9"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1048, "sklearn-compose"], [1048, "id5"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1053, "sklearn-compose"], [1053, "id5"], [1054, "sklearn-compose"]], "sklearn.compose.ColumnTransformer": [[465, "sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[466, "sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[467, "sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[468, "sklearn-compose-make-column-transformer"]], "sklearn.compose: Composite Estimators": [[408, "module-sklearn.compose"]], "sklearn.config_context": [[469, "sklearn-config-context"]], "sklearn.covariance": [[1044, "sklearn-covariance"], [1044, "id26"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"], [1050, "sklearn-covariance"], [1052, "sklearn-covariance"], [1053, "sklearn-covariance"]], "sklearn.covariance.EllipticEnvelope": [[470, "sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[471, "sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[472, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[473, "sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[474, "sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[475, "sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[476, "sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[477, "sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[478, "sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[479, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[480, "sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[481, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.oas": [[423, "sklearn-covariance-oas"]], "sklearn.covariance.shrunk_covariance": [[482, "sklearn-covariance-shrunk-covariance"]], "sklearn.covariance: Covariance Estimators": [[408, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[1046, "sklearn-cross-decomposition"], [1048, "sklearn-cross-decomposition"], [1048, "id6"], [1050, "sklearn-cross-decomposition"], [1052, "sklearn-cross-decomposition"], [1054, "sklearn-cross-decomposition"]], "sklearn.cross_decomposition.CCA": [[483, "sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[484, "sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[485, "sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[486, "sklearn-cross-decomposition-plssvd"]], "sklearn.cross_decomposition: Cross decomposition": [[408, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[1044, "sklearn-datasets"], [1044, "id13"], [1044, "id27"], [1045, "sklearn-datasets"], [1045, "id10"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1050, "id9"], [1051, "sklearn-datasets"], [1051, "id13"], [1052, "sklearn-datasets"], [1052, "id9"], [1053, "sklearn-datasets"], [1054, "sklearn-datasets"]], "sklearn.datasets.clear_data_home": [[487, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[488, "sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[489, "sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[490, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[491, "sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[492, "sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[493, "sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[494, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[495, "sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[496, "sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[497, "sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[498, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[499, "sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[500, "sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[501, "sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[502, "sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[503, "sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[504, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[505, "sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[506, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[507, "sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[508, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[509, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[510, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[511, "sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[512, "sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[513, "sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[514, "sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[515, "sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[516, "sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[517, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[518, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[519, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[520, "sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[521, "sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[522, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[523, "sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[524, "sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[525, "sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[526, "sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[527, "sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[528, "sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[529, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[530, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[531, "sklearn-datasets-make-swiss-roll"]], "sklearn.datasets: Datasets": [[408, "module-sklearn.datasets"]], "sklearn.decomposition": [[1044, "sklearn-decomposition"], [1044, "id4"], [1044, "id14"], [1044, "id28"], [1045, "sklearn-decomposition"], [1045, "id11"], [1046, "sklearn-decomposition"], [1047, "sklearn-decomposition"], [1047, "id6"], [1048, "sklearn-decomposition"], [1048, "id7"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1050, "id10"], [1051, "sklearn-decomposition"], [1051, "id14"], [1052, "sklearn-decomposition"], [1052, "id10"], [1053, "sklearn-decomposition"], [1054, "sklearn-decomposition"]], "sklearn.decomposition.DictionaryLearning": [[532, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[533, "sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[534, "sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[535, "sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[536, "sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[537, "sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[538, "sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[539, "sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[540, "sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[541, "sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[542, "sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[543, "sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[544, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[545, "sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[546, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[547, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.fastica": [[422, "sklearn-decomposition-fastica"]], "sklearn.decomposition.non_negative_factorization": [[548, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[549, "sklearn-decomposition-sparse-encode"]], "sklearn.decomposition: Matrix Decomposition": [[408, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[1044, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"], [1052, "sklearn-discriminant-analysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[550, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[551, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[408, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[1044, "sklearn-dummy"], [1045, "sklearn-dummy"], [1046, "sklearn-dummy"], [1049, "sklearn-dummy"], [1050, "sklearn-dummy"], [1054, "sklearn-dummy"]], "sklearn.dummy.DummyClassifier": [[552, "sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[553, "sklearn-dummy-dummyregressor"]], "sklearn.dummy: Dummy estimators": [[408, "module-sklearn.dummy"]], "sklearn.ensemble": [[1044, "sklearn-ensemble"], [1044, "id29"], [1045, "sklearn-ensemble"], [1045, "id12"], [1046, "sklearn-ensemble"], [1047, "sklearn-ensemble"], [1047, "id7"], [1048, "sklearn-ensemble"], [1048, "id8"], [1049, "sklearn-ensemble"], [1049, "id2"], [1049, "id11"], [1050, "sklearn-ensemble"], [1051, "sklearn-ensemble"], [1051, "id3"], [1051, "id15"], [1052, "sklearn-ensemble"], [1052, "id11"], [1053, "sklearn-ensemble"], [1053, "id6"], [1054, "sklearn-ensemble"]], "sklearn.ensemble.AdaBoostClassifier": [[554, "sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[555, "sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[556, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[557, "sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[558, "sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[559, "sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[560, "sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[561, "sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[562, "sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[563, "sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[564, "sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[565, "sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[566, "sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[567, "sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[568, "sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[569, "sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[570, "sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[571, "sklearn-ensemble-votingregressor"]], "sklearn.ensemble: Ensemble Methods": [[408, "module-sklearn.ensemble"]], "sklearn.exceptions": [[1048, "sklearn-exceptions"], [1052, "sklearn-exceptions"]], "sklearn.exceptions.ConvergenceWarning": [[572, "sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[573, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[574, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[575, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[576, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[577, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[578, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[579, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.exceptions: Exceptions and warnings": [[408, "module-sklearn.exceptions"]], "sklearn.experimental.enable_halving_search_cv": [[580, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[581, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.experimental: Experimental": [[408, "module-sklearn.experimental"]], "sklearn.externals": [[1045, "sklearn-externals"]], "sklearn.feature_extraction": [[1044, "sklearn-feature-extraction"], [1044, "id15"], [1044, "id30"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1047, "id8"], [1048, "sklearn-feature-extraction"], [1048, "id9"], [1049, "sklearn-feature-extraction"], [1049, "id12"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"], [1054, "sklearn-feature-extraction"]], "sklearn.feature_extraction.DictVectorizer": [[582, "sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[583, "sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[584, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[585, "sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[586, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[587, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[588, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[589, "sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[590, "sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[591, "sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[592, "sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_extraction: Feature Extraction": [[408, "module-sklearn.feature_extraction"]], "sklearn.feature_selection": [[1044, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1049, "sklearn-feature-selection"], [1049, "id13"], [1050, "sklearn-feature-selection"], [1050, "id2"], [1050, "id11"], [1051, "sklearn-feature-selection"], [1051, "id16"], [1052, "sklearn-feature-selection"], [1052, "id12"], [1053, "sklearn-feature-selection"], [1054, "sklearn-feature-selection"]], "sklearn.feature_selection.GenericUnivariateSelect": [[593, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[594, "sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[595, "sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[596, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[597, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[598, "sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[599, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[600, "sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[601, "sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[602, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[603, "sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[604, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[605, "sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[606, "sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[607, "sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[608, "sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[609, "sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[610, "sklearn-feature-selection-r-regression"]], "sklearn.feature_selection: Feature Selection": [[408, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[1044, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1048, "sklearn-gaussian-process"], [1048, "id10"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1052, "sklearn-gaussian-process"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[611, "sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[612, "sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[613, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[614, "sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[615, "sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[616, "sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[617, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[618, "sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[619, "sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[620, "sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[621, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[622, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[623, "sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[624, "sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[625, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[626, "sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.gaussian_process: Gaussian Processes": [[408, "module-sklearn.gaussian_process"]], "sklearn.get_config": [[627, "sklearn-get-config"]], "sklearn.impute": [[1044, "sklearn-impute"], [1044, "id31"], [1045, "sklearn-impute"], [1045, "id13"], [1046, "sklearn-impute"], [1046, "id6"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1050, "sklearn-impute"], [1050, "id12"], [1051, "sklearn-impute"], [1052, "sklearn-impute"], [1052, "id13"], [1053, "sklearn-impute"], [1054, "sklearn-impute"]], "sklearn.impute.IterativeImputer": [[628, "sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[629, "sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[630, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[631, "sklearn-impute-simpleimputer"]], "sklearn.impute: Impute": [[408, "module-sklearn.impute"]], "sklearn.inspection": [[1045, "sklearn-inspection"], [1045, "id3"], [1045, "id14"], [1046, "sklearn-inspection"], [1046, "id7"], [1047, "sklearn-inspection"], [1047, "id11"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1051, "sklearn-inspection"], [1051, "id17"], [1052, "sklearn-inspection"], [1053, "sklearn-inspection"], [1053, "id7"], [1054, "sklearn-inspection"]], "sklearn.inspection.DecisionBoundaryDisplay": [[632, "sklearn-inspection-decisionboundarydisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[633, "sklearn-inspection-partialdependencedisplay"]], "sklearn.inspection.partial_dependence": [[634, "sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[635, "sklearn-inspection-permutation-importance"]], "sklearn.inspection: Inspection": [[408, "module-sklearn.inspection"]], "sklearn.isotonic": [[1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1046, "sklearn-isotonic"], [1048, "sklearn-isotonic"], [1050, "sklearn-isotonic"], [1051, "sklearn-isotonic"]], "sklearn.isotonic.IsotonicRegression": [[636, "sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[637, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[638, "sklearn-isotonic-isotonic-regression"]], "sklearn.isotonic: Isotonic regression": [[408, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[1046, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"], [1052, "sklearn-kernel-approximation"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[639, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[640, "sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[641, "sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[642, "sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[643, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_approximation: Kernel Approximation": [[408, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[1053, "sklearn-kernel-ridge"]], "sklearn.kernel_ridge.KernelRidge": [[644, "sklearn-kernel-ridge-kernelridge"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[408, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[1044, "sklearn-linear-model"], [1044, "id16"], [1044, "id32"], [1045, "sklearn-linear-model"], [1045, "id15"], [1046, "sklearn-linear-model"], [1047, "sklearn-linear-model"], [1047, "id9"], [1048, "sklearn-linear-model"], [1048, "id11"], [1049, "sklearn-linear-model"], [1049, "id3"], [1049, "id14"], [1050, "sklearn-linear-model"], [1050, "id13"], [1051, "sklearn-linear-model"], [1051, "id18"], [1052, "sklearn-linear-model"], [1053, "sklearn-linear-model"], [1053, "id8"], [1054, "sklearn-linear-model"]], "sklearn.linear_model.ARDRegression": [[645, "sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[646, "sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[647, "sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[648, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[649, "sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[650, "sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[651, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[652, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[653, "sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[654, "sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[655, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[656, "sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[657, "sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[658, "sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[659, "sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[660, "sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[661, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[662, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[663, "sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[664, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[665, "sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[666, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[667, "sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[668, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[669, "sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[670, "sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[671, "sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[672, "sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[673, "sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[674, "sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[675, "sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[676, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[677, "sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[678, "sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[679, "sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[680, "sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[681, "sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[682, "sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[683, "sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[684, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[685, "sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[686, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[687, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[688, "sklearn-linear-model-ridge-regression"]], "sklearn.linear_model: Linear Models": [[408, "module-sklearn.linear_model"]], "sklearn.manifold": [[1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"], [1049, "id15"], [1050, "sklearn-manifold"], [1050, "id14"], [1051, "sklearn-manifold"], [1051, "id19"], [1052, "sklearn-manifold"], [1054, "sklearn-manifold"]], "sklearn.manifold.Isomap": [[689, "sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[690, "sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[691, "sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[692, "sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[693, "sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[694, "sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[695, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[696, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[697, "sklearn-manifold-trustworthiness"]], "sklearn.manifold: Manifold Learning": [[408, "module-sklearn.manifold"]], "sklearn.metrics": [[1044, "sklearn-metrics"], [1044, "id17"], [1044, "id33"], [1045, "sklearn-metrics"], [1045, "id4"], [1045, "id16"], [1046, "sklearn-metrics"], [1046, "id2"], [1046, "id8"], [1047, "sklearn-metrics"], [1047, "id10"], [1048, "sklearn-metrics"], [1048, "id2"], [1048, "id12"], [1049, "sklearn-metrics"], [1049, "id16"], [1050, "sklearn-metrics"], [1050, "id3"], [1050, "id15"], [1051, "sklearn-metrics"], [1052, "sklearn-metrics"], [1052, "id2"], [1052, "id14"], [1053, "sklearn-metrics"], [1054, "sklearn-metrics"]], "sklearn.metrics.ConfusionMatrixDisplay": [[698, "sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.DetCurveDisplay": [[699, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.DistanceMetric": [[700, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[701, "sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.PredictionErrorDisplay": [[702, "sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.RocCurveDisplay": [[703, "sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.accuracy_score": [[704, "sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[705, "sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[706, "sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[707, "sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[708, "sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[709, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[710, "sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[711, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[712, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[713, "sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[714, "sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[715, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[716, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[717, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[718, "sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[719, "sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[720, "sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[721, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[722, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_log_loss_score": [[723, "sklearn-metrics-d2-log-loss-score"]], "sklearn.metrics.d2_pinball_score": [[724, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[725, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[726, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[727, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[728, "sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[729, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[730, "sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[731, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[732, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[733, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[734, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[735, "sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[736, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[737, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[738, "sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[739, "sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[740, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[741, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[742, "sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[743, "sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[744, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[745, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[746, "sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[747, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[748, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[749, "sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[750, "sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[751, "sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[752, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[753, "sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[754, "sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[755, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[756, "sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[757, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[758, "sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[759, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[760, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[761, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[762, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[763, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[764, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[765, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[766, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[767, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[768, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[769, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[770, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[771, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[772, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[773, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[774, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[775, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[776, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[777, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[778, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[779, "sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[780, "sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[781, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[782, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[783, "sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[784, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[785, "sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[786, "sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[787, "sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[788, "sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[789, "sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[790, "sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[791, "sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[792, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[793, "sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[794, "sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[795, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[796, "sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[797, "sklearn-metrics-zero-one-loss"]], "sklearn.metrics: Metrics": [[408, "sklearn-metrics-metrics"]], "sklearn.mixture": [[1044, "sklearn-mixture"], [1044, "id34"], [1045, "sklearn-mixture"], [1049, "sklearn-mixture"], [1050, "sklearn-mixture"], [1052, "sklearn-mixture"], [1052, "id15"], [1054, "sklearn-mixture"]], "sklearn.mixture.BayesianGaussianMixture": [[798, "sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[799, "sklearn-mixture-gaussianmixture"]], "sklearn.mixture: Gaussian Mixture Models": [[408, "module-sklearn.mixture"]], "sklearn.model_selection": [[1044, "sklearn-model-selection"], [1044, "id35"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1046, "id9"], [1046, "id13"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"], [1048, "id13"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1051, "id20"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1054, "sklearn-model-selection"]], "sklearn.model_selection.FixedThresholdClassifier": [[800, "sklearn-model-selection-fixedthresholdclassifier"]], "sklearn.model_selection.GridSearchCV": [[801, "sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[802, "sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[803, "sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[804, "sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[805, "sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[806, "sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[807, "sklearn-model-selection-learningcurvedisplay"]], "sklearn.model_selection.LeaveOneGroupOut": [[808, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[809, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[810, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[811, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[812, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[813, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[814, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[815, "sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[816, "sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[817, "sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[818, "sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[819, "sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[820, "sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[821, "sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[822, "sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[823, "sklearn-model-selection-tunedthresholdclassifiercv"]], "sklearn.model_selection.ValidationCurveDisplay": [[824, "sklearn-model-selection-validationcurvedisplay"]], "sklearn.model_selection.check_cv": [[825, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[826, "sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[827, "sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[828, "sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[829, "sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[830, "sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[831, "sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[832, "sklearn-model-selection-validation-curve"]], "sklearn.model_selection: Model Selection": [[408, "module-sklearn.model_selection"]], "sklearn.multiclass": [[1045, "sklearn-multiclass"], [1048, "sklearn-multiclass"], [1049, "sklearn-multiclass"], [1050, "sklearn-multiclass"]], "sklearn.multiclass.OneVsOneClassifier": [[833, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[834, "sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[835, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multiclass: Multiclass classification": [[408, "module-sklearn.multiclass"]], "sklearn.multioutput": [[1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"], [1048, "id14"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"], [1054, "sklearn-multioutput"]], "sklearn.multioutput.ClassifierChain": [[836, "sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[837, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[838, "sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[839, "sklearn-multioutput-regressorchain"]], "sklearn.multioutput: Multioutput regression and classification": [[408, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[1044, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"], [1046, "id10"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"], [1052, "sklearn-naive-bayes"]], "sklearn.naive_bayes.BernoulliNB": [[840, "sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[841, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[842, "sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[843, "sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[844, "sklearn-naive-bayes-multinomialnb"]], "sklearn.naive_bayes: Naive Bayes": [[408, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[1044, "sklearn-neighbors"], [1044, "id7"], [1044, "id18"], [1044, "id36"], [1045, "sklearn-neighbors"], [1045, "id5"], [1045, "id17"], [1046, "sklearn-neighbors"], [1046, "id11"], [1048, "sklearn-neighbors"], [1049, "sklearn-neighbors"], [1049, "id4"], [1049, "id17"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"], [1052, "sklearn-neighbors"], [1052, "id16"], [1053, "sklearn-neighbors"], [1054, "sklearn-neighbors"]], "sklearn.neighbors.BallTree": [[845, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[846, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[847, "sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[848, "sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[849, "sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[850, "sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[851, "sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[852, "sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[853, "sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[854, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[855, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[856, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[857, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[858, "sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[859, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[860, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neighbors: Nearest Neighbors": [[408, "module-sklearn.neighbors"]], "sklearn.neural_network": [[1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1051, "id21"], [1052, "sklearn-neural-network"]], "sklearn.neural_network.BernoulliRBM": [[861, "sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[862, "sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[863, "sklearn-neural-network-mlpregressor"]], "sklearn.neural_network: Neural network models": [[408, "module-sklearn.neural_network"]], "sklearn.pipeline": [[1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1049, "id18"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1054, "sklearn-pipeline"]], "sklearn.pipeline.FeatureUnion": [[864, "sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[865, "sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[866, "sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[867, "sklearn-pipeline-make-union"]], "sklearn.pipeline: Pipeline": [[408, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[1044, "sklearn-preprocessing"], [1044, "id19"], [1044, "id37"], [1045, "sklearn-preprocessing"], [1045, "id18"], [1046, "sklearn-preprocessing"], [1046, "id12"], [1047, "sklearn-preprocessing"], [1048, "sklearn-preprocessing"], [1048, "id15"], [1049, "sklearn-preprocessing"], [1049, "id19"], [1050, "sklearn-preprocessing"], [1050, "id4"], [1050, "id16"], [1051, "sklearn-preprocessing"], [1051, "id4"], [1051, "id22"], [1052, "sklearn-preprocessing"], [1052, "id17"], [1053, "sklearn-preprocessing"], [1053, "id9"], [1054, "sklearn-preprocessing"]], "sklearn.preprocessing.Binarizer": [[868, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[869, "sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[870, "sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[871, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[872, "sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[873, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[874, "sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[875, "sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[876, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[877, "sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[878, "sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[879, "sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[880, "sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[881, "sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[882, "sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[883, "sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[884, "sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[885, "sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[886, "sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[887, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[888, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[889, "sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[890, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[891, "sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[892, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[893, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[894, "sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[895, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[896, "sklearn-preprocessing-scale"]], "sklearn.preprocessing: Preprocessing and Normalization": [[408, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[1050, "sklearn-random-projection"]], "sklearn.random_projection.GaussianRandomProjection": [[897, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[898, "sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[899, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.random_projection: Random projection": [[408, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[1046, "sklearn-semi-supervised"], [1047, "sklearn-semi-supervised"], [1048, "sklearn-semi-supervised"], [1048, "id3"], [1048, "id16"], [1052, "sklearn-semi-supervised"]], "sklearn.semi_supervised.LabelPropagation": [[900, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[901, "sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[902, "sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[408, "module-sklearn.semi_supervised"]], "sklearn.set_config": [[903, "sklearn-set-config"]], "sklearn.show_versions": [[904, "sklearn-show-versions"]], "sklearn.svm": [[1044, "sklearn-svm"], [1044, "id38"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1049, "id20"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1052, "sklearn-svm"]], "sklearn.svm.LinearSVC": [[905, "sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[906, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[907, "sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[908, "sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[909, "sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[910, "sklearn-svm-svc"]], "sklearn.svm.SVR": [[911, "sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[912, "sklearn-svm-l1-min-c"]], "sklearn.svm: Support Vector Machines": [[408, "module-sklearn.svm"]], "sklearn.tree": [[1044, "sklearn-tree"], [1045, "sklearn-tree"], [1045, "id19"], [1046, "sklearn-tree"], [1047, "sklearn-tree"], [1048, "sklearn-tree"], [1048, "id17"], [1049, "sklearn-tree"], [1049, "id21"], [1050, "sklearn-tree"], [1050, "id5"], [1050, "id17"], [1051, "sklearn-tree"], [1051, "id5"], [1051, "id23"], [1052, "sklearn-tree"], [1052, "id3"], [1052, "id18"], [1053, "sklearn-tree"], [1053, "id10"], [1054, "sklearn-tree"]], "sklearn.tree.DecisionTreeClassifier": [[913, "sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[914, "sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[915, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[916, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[917, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[918, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[919, "sklearn-tree-plot-tree"]], "sklearn.tree: Decision Trees": [[408, "module-sklearn.tree"]], "sklearn.utils": [[1044, "sklearn-utils"], [1044, "id20"], [1044, "id39"], [1045, "sklearn-utils"], [1046, "sklearn-utils"], [1046, "id14"], [1047, "sklearn-utils"], [1047, "id12"], [1048, "sklearn-utils"], [1048, "id18"], [1049, "sklearn-utils"], [1049, "id5"], [1049, "id22"], [1050, "sklearn-utils"], [1050, "id18"], [1051, "sklearn-utils"], [1051, "id6"], [1051, "id24"], [1052, "sklearn-utils"], [1053, "sklearn-utils"], [1053, "id11"], [1054, "sklearn-utils"]], "sklearn.utils.Bunch": [[920, "sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[921, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[922, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[923, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[924, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[925, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[926, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[927, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[928, "sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[929, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[930, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[931, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[932, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[933, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[934, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[935, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[936, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[937, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[938, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[939, "sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[940, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[941, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[942, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[943, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[944, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[945, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[946, "sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[947, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[948, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[949, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[950, "sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[951, "sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[952, "sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[953, "sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[954, "sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[955, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[956, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[957, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[958, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[959, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[960, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[961, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[962, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[963, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[964, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[965, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[966, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[967, "sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs": [[1045, "sklearn-utils-sparsefuncs"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[968, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[969, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[970, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[971, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[972, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[973, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[974, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[975, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[976, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[977, "sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[978, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[979, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[980, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[981, "sklearn-utils-validation-has-fit-parameter"]], "sklearn.utils: Utilities": [[408, "module-sklearn.utils"]], "sklearn: Settings and information tools": [[408, "module-sklearn"]], "skops.io": [[403, "skops-io"]], "solido": [[1018, "id23"]], "t-SNE: The effect of various perplexity values on the shape": [[223, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[990, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "transform and inverse_transform methods": [[1028, null]], "\u201cStatlog\u201d German credit dataset": [[253, "statlog-german-credit-dataset"]]}, "docnames": ["about", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sg_execution_times", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sg_execution_times.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[394, "term-1d", true]], "1d array": [[394, "term-1d-array", true]], "2d": [[394, "term-2d", true]], "2d array": [[394, "term-2d-array", true]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "_estimator_type": [[394, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[921, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[950, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[951, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[950, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[455, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[441, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[442, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[933, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[934, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[935, "sklearn.utils.discovery.all_functions", false]], "api": [[394, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[645, "sklearn.linear_model.ARDRegression", false]], "array-like": [[394, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[923, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[924, "sklearn.utils.assert_all_finite", false]], "attribute": [[394, "term-attribute", true]], "attributes": [[394, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[707, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[954, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[394, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[845, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[424, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[798, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[646, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[840, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[861, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[425, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[425, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[452, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[454, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.Binarizer", false]], "binary": [[394, "term-binary", true]], "birch (class in sklearn.cluster)": [[443, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[444, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[710, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[920, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[438, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[440, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[439, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[394, "term-callable", true]], "categorical feature": [[394, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[841, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[926, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[927, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[936, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[637, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[977, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[978, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[928, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[929, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[712, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[979, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[925, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[713, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[394, "term-class_weight", true]], "classes_": [[394, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[594, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[595, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[675, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[676, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[800, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[801, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[804, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[815, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[714, "sklearn.metrics.classification_report", false]], "classifier": [[394, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[836, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[427, "sklearn.base.ClassifierMixin", false]], "classifiers": [[394, "term-classifiers", true]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[426, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[487, "sklearn.datasets.clear_data_home", false]], "clone": [[394, "term-clone", true]], "clone() (in module sklearn.base)": [[435, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[394, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[456, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[457, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[394, "term-clusterer", true]], "clusterers": [[394, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[428, "sklearn.base.ClusterMixin", false]], "coef_": [[394, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[908, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[909, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[911, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[980, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[465, "sklearn.compose.ColumnTransformer", false]], "common tests": [[394, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.completeness_score", false]], "components_": [[394, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[930, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[458, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[931, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[469, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[719, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[394, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[949, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[950, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[715, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[394, "term-continuous", true]], "continuous multi-output": [[394, "term-continuous-multi-output", true]], "continuous multioutput": [[394, "term-continuous-multioutput", true]], "convergencewarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[721, "sklearn.metrics.coverage_error", false]], "cross fitting": [[394, "term-0", true]], "cross validation": [[394, "term-1", true]], "cross-fitting": [[394, "term-cross-fitting", true]], "cross-validation": [[394, "term-cross-validation", true]], "cross-validation estimator": [[394, "term-cross-validation-estimator", true]], "cross-validation generator": [[394, "term-cross-validation-generator", true]], "cross-validation splitter": [[394, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.cross_validate", false]], "cv": [[394, "term-cv", true]], "cv splitter": [[394, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[394, "term-data-leakage", true]], "data type": [[394, "term-data-type", true]], "dataconversionwarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[445, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[421, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.dcg_score", false]], "decision_function": [[394, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[632, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[913, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[914, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[960, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[394, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[939, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[429, "sklearn.base.DensityMixin", false]], "deprecated() (in module sklearn.utils)": [[932, "sklearn.utils.deprecated", false]], "deprecation": [[394, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[728, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[699, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[532, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[582, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[394, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[959, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[959, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[700, "sklearn.metrics.DistanceMetric", false]], "docstring": [[394, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[394, "term-double-underscore", true]], "double underscore notation": [[394, "term-double-underscore-notation", true]], "dtype": [[394, "term-dtype", true]], "duck typing": [[394, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[552, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[553, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[488, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[394, "term-early-stopping", true]], "efficiencywarning (class in sklearn.exceptions)": [[575, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[470, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[394, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[478, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[471, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[459, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[394, "term-estimator", true]], "estimator instance": [[394, "term-estimator-instance", true]], "estimator tags": [[394, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[938, "sklearn.utils.estimator_html_repr", false]], "estimators": [[394, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[556, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[557, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[558, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[559, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[564, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[565, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[566, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[567, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[394, "term-evaluation-metric", true]], "evaluation metrics": [[394, "term-evaluation-metrics", true]], "examples": [[394, "term-examples", true]], "experimental": [[394, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[917, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[918, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[915, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[916, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[533, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[940, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[534, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[422, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.fbeta_score", false]], "feature": [[394, "term-feature", true]], "feature extractor": [[394, "term-feature-extractor", true]], "feature extractors": [[394, "term-feature-extractors", true]], "feature vector": [[394, "term-feature-vector", true]], "feature_importances_": [[394, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[554, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[555, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[558, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[559, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[560, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[561, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[565, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[566, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[567, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[913, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[914, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[915, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[916, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[864, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[446, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[583, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[394, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[864, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_covtype", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[394, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[394, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[446, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[428, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[432, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[394, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[434, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning (class in sklearn.exceptions)": [[576, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[394, "term-fitted", true]], "fitting": [[394, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[800, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[959, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[439, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[632, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[633, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[698, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[699, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[701, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[702, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[703, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[807, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[824, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[439, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[698, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[699, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[701, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[702, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[703, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.fromkeys", false]], "function": [[394, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[394, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[799, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[897, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[945, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[946, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[627, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[500, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[394, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[426, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[431, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[425, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[424, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[806, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[809, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[811, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[814, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[816, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[818, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[820, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[821, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[822, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[700, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[394, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[806, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[809, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[811, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[814, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[816, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[818, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[820, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[821, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[822, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[394, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[424, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[952, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[733, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[734, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[425, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[425, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[479, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[472, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[473, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[801, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[802, "sklearn.model_selection.GroupKFold", false]], "groups": [[394, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[803, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[805, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[735, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[981, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[447, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[736, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[737, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[650, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[394, "term-hyper-parameter", true]], "hyperparameter": [[394, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[394, "term-imputation", true]], "impute": [[394, "term-impute", true]], "inconsistentversionwarning (class in sklearn.exceptions)": [[577, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[968, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[394, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[948, "sklearn.utils.indexable", false]], "induction": [[394, "term-induction", true]], "inductive": [[394, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[878, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[879, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[886, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[969, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[970, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[975, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[976, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[971, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[972, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[973, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[436, "sklearn.base.is_classifier", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[955, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[437, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[564, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[689, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[638, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[636, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[628, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.jaccard_score", false]], "joblib": [[394, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[899, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[460, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[846, "sklearn.neighbors.KDTree", false]], "kernel": [[394, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[536, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[644, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[806, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[448, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[461, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[858, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[847, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[629, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[912, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[394, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[900, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[394, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[901, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[651, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[537, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[394, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[808, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[480, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[481, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[474, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[905, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[906, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[694, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[690, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[851, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[742, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_classification", false]], "make_column_selector() (in module sklearn.compose)": [[467, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[468, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[866, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[743, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[867, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[744, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.max_error", false]], "max_iter": [[394, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[691, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[462, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[974, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[449, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[394, "term-memmapping", true]], "memory": [[394, "term-memory", true]], "memory map": [[394, "term-memory-map", true]], "memory mapping": [[394, "term-memory-mapping", true]], "meta-estimator": [[394, "term-meta-estimator", true]], "meta-estimators": [[394, "term-meta-estimators", true]], "metadata": [[394, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[949, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[950, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[394, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[430, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[394, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[951, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[394, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[922, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[475, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[450, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[394, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[630, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[862, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[863, "sklearn.neural_network.MLPRegressor", false]], "module": [[408, "module-sklearn", false], [408, "module-sklearn.base", false], [408, "module-sklearn.calibration", false], [408, "module-sklearn.cluster", false], [408, "module-sklearn.compose", false], [408, "module-sklearn.covariance", false], [408, "module-sklearn.cross_decomposition", false], [408, "module-sklearn.datasets", false], [408, "module-sklearn.decomposition", false], [408, "module-sklearn.discriminant_analysis", false], [408, "module-sklearn.dummy", false], [408, "module-sklearn.ensemble", false], [408, "module-sklearn.exceptions", false], [408, "module-sklearn.experimental", false], [408, "module-sklearn.feature_extraction", false], [408, "module-sklearn.feature_extraction.image", false], [408, "module-sklearn.feature_extraction.text", false], [408, "module-sklearn.feature_selection", false], [408, "module-sklearn.gaussian_process", false], [408, "module-sklearn.gaussian_process.kernels", false], [408, "module-sklearn.impute", false], [408, "module-sklearn.inspection", false], [408, "module-sklearn.isotonic", false], [408, "module-sklearn.kernel_approximation", false], [408, "module-sklearn.kernel_ridge", false], [408, "module-sklearn.linear_model", false], [408, "module-sklearn.manifold", false], [408, "module-sklearn.metrics", false], [408, "module-sklearn.metrics.cluster", false], [408, "module-sklearn.metrics.pairwise", false], [408, "module-sklearn.mixture", false], [408, "module-sklearn.model_selection", false], [408, "module-sklearn.multiclass", false], [408, "module-sklearn.multioutput", false], [408, "module-sklearn.naive_bayes", false], [408, "module-sklearn.neighbors", false], [408, "module-sklearn.neural_network", false], [408, "module-sklearn.pipeline", false], [408, "module-sklearn.preprocessing", false], [408, "module-sklearn.random_projection", false], [408, "module-sklearn.semi_supervised", false], [408, "module-sklearn.svm", false], [408, "module-sklearn.tree", false], [408, "module-sklearn.utils", false], [408, "module-sklearn.utils.arrayfuncs", false], [408, "module-sklearn.utils.class_weight", false], [408, "module-sklearn.utils.discovery", false], [408, "module-sklearn.utils.estimator_checks", false], [408, "module-sklearn.utils.extmath", false], [408, "module-sklearn.utils.graph", false], [408, "module-sklearn.utils.metadata_routing", false], [408, "module-sklearn.utils.metaestimators", false], [408, "module-sklearn.utils.multiclass", false], [408, "module-sklearn.utils.parallel", false], [408, "module-sklearn.utils.random", false], [408, "module-sklearn.utils.sparsefuncs", false], [408, "module-sklearn.utils.sparsefuncs_fast", false], [408, "module-sklearn.utils.validation", false], [580, "module-sklearn.experimental.enable_halving_search_cv", false], [581, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[394, "term-multi-class", true]], "multi-class multi-output": [[394, "term-multi-class-multi-output", true]], "multi-label": [[394, "term-multi-label", true]], "multi-output": [[394, "term-multi-output", true]], "multi-output continuous": [[394, "term-multi-output-continuous", true]], "multi-output multi-class": [[394, "term-multi-output-multi-class", true]], "multiclass": [[394, "term-multiclass", true]], "multiclass multioutput": [[394, "term-multiclass-multioutput", true]], "multilabel": [[394, "term-multilabel", true]], "multilabel indicator matrices": [[394, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[394, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[834, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[755, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[394, "term-multioutput", true]], "multioutput continuous": [[394, "term-multioutput-continuous", true]], "multioutput multiclass": [[394, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[837, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[838, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[958, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[833, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[834, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[394, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[543, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[394, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[466, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[543, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[568, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[569, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[570, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[571, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[598, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[801, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[804, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[815, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[864, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[394, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[394, "term-n_iter_no_change", true]], "n_jobs": [[394, "term-n_jobs", true]], "n_outputs": [[394, "term-n_outputs", true]], "n_samples": [[394, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[908, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[909, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[911, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[394, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[568, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[569, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[570, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[571, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[465, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[394, "term-narrative-docs", true]], "narrative documentation": [[394, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[852, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[853, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[541, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.Normalizer", false]], "notfittederror (class in sklearn.exceptions)": [[578, "sklearn.exceptions.NotFittedError", false]], "np": [[394, "term-np", true]], "nusvc (class in sklearn.svm)": [[907, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[908, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[476, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[423, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[909, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[431, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[833, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[834, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[394, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[451, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[394, "term-out-of-core", true]], "outlier detector": [[394, "term-outlier-detector", true]], "outlier detectors": [[394, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[432, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[835, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[394, "term-outputs", true]], "pair": [[394, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[716, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[394, "term-pairwise-metric", true]], "pairwise metrics": [[394, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[780, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[959, "sklearn.utils.parallel.Parallel", false]], "parallel_backend() (in module sklearn.utils)": [[961, "sklearn.utils.parallel_backend", false]], "param": [[394, "term-param", true]], "parameter": [[394, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[394, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[813, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[937, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[394, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[634, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[394, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[633, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[647, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[648, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[653, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[654, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[663, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.PCA", false]], "pd": [[394, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[669, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[635, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[865, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[439, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[632, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[633, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[698, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[699, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[701, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[702, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[703, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[807, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[824, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[919, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[486, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[394, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[880, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[783, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[784, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[394, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[814, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[394, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[394, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[394, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[394, "term-predictor", true]], "predictors": [[394, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[959, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[953, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[859, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.rand_score", false]], "random_state": [[394, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[941, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[942, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[815, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[567, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[394, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[963, "sklearn.utils.register_parallel_backend", false]], "regressor": [[394, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[839, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[433, "sklearn.base.RegressorMixin", false]], "regressors": [[394, "term-regressors", true]], "repeatedkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[964, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[673, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[676, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[790, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[791, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[792, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[950, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[394, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[965, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[943, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[966, "sklearn.utils.safe_sqr", false]], "sample": [[394, "term-sample", true]], "sample properties": [[394, "term-sample-properties", true]], "sample property": [[394, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[394, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[962, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[394, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[394, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[394, "term-scikit-learn-contrib", true]], "score": [[394, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[427, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[429, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[433, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[394, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[394, "term-scorer", true]], "scoring": [[394, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[394, "term-semi-supervised", true]], "semi-supervised learning": [[394, "term-semi-supervised-learning", true]], "semisupervised": [[394, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[903, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[434, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[394, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[424, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[441, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[442, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[445, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[447, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[449, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[451, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[452, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[453, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[454, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[438, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[466, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[470, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[471, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[472, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[473, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[474, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[475, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[476, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[477, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[678, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[904, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[482, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[477, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[967, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[818, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[793, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[631, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[947, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[408, "module-sklearn", false]], "sklearn.base": [[408, "module-sklearn.base", false]], "sklearn.calibration": [[408, "module-sklearn.calibration", false]], "sklearn.cluster": [[408, "module-sklearn.cluster", false]], "sklearn.compose": [[408, "module-sklearn.compose", false]], "sklearn.covariance": [[408, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[408, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[408, "module-sklearn.datasets", false]], "sklearn.decomposition": [[408, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[408, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[408, "module-sklearn.dummy", false]], "sklearn.ensemble": [[408, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[408, "module-sklearn.exceptions", false]], "sklearn.experimental": [[408, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[580, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[581, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[408, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[408, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[408, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[408, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[408, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[408, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[408, "module-sklearn.impute", false]], "sklearn.inspection": [[408, "module-sklearn.inspection", false]], "sklearn.isotonic": [[408, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[408, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[408, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[408, "module-sklearn.linear_model", false]], "sklearn.manifold": [[408, "module-sklearn.manifold", false]], "sklearn.metrics": [[408, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[408, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[408, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[408, "module-sklearn.mixture", false]], "sklearn.model_selection": [[408, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[408, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[408, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[408, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[408, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[408, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[408, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[408, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[408, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[408, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[408, "module-sklearn.svm", false]], "sklearn.tree": [[408, "module-sklearn.tree", false]], "sklearn.utils": [[408, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[408, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[408, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[408, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[408, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[408, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[408, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[408, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[408, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[408, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[408, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[408, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[408, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[408, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[408, "module-sklearn.utils.validation", false]], "slep": [[394, "term-SLEP", true]], "sleps": [[394, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[695, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[860, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[394, "term-sparse-graph", true]], "sparse matrix": [[394, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[647, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[653, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[661, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[663, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[549, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[543, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[898, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[463, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[696, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[454, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[692, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.SplineTransformer", false]], "split": [[394, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[806, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[809, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[811, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[814, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[816, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[818, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[820, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[821, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[822, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[394, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[820, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[394, "term-supervised", true]], "supervised learning": [[394, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[910, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[911, "sklearn.svm.SVR", false]], "target": [[394, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[394, "term-targets", true]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[598, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[822, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.train_test_split", false]], "transduction": [[394, "term-transduction", true]], "transductive": [[394, "term-transductive", true]], "transform": [[394, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[443, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[444, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[446, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[448, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[450, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[465, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[483, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[484, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[485, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[486, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[466, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[394, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[434, "sklearn.base.TransformerMixin", false]], "transformers": [[394, "term-transformers", true]], "truncatedsvd (class in sklearn.decomposition)": [[545, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[697, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[693, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[681, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[956, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning (class in sklearn.exceptions)": [[579, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[957, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[394, "term-unlabeled", true]], "unlabeled data": [[394, "term-unlabeled-data", true]], "unsupervised": [[394, "term-unsupervised", true]], "unsupervised learning": [[394, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[796, "sklearn.metrics.v_measure_score", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[950, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[824, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[394, "term-vectorizer", true]], "vectorizers": [[394, "term-vectorizers", true]], "verbose": [[394, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[570, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[571, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[464, "sklearn.cluster.ward_tree", false]], "warm_start": [[394, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[944, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[572, "sklearn.exceptions.ConvergenceWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[573, "sklearn.exceptions.DataConversionWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[574, "sklearn.exceptions.DataDimensionalityWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[575, "sklearn.exceptions.EfficiencyWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[576, "sklearn.exceptions.FitFailedWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[577, "sklearn.exceptions.InconsistentVersionWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[578, "sklearn.exceptions.NotFittedError.with_traceback", false]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[579, "sklearn.exceptions.UndefinedMetricWarning.with_traceback", false]], "x": [[394, "term-X", true]], "xt": [[394, "term-Xt", true]], "y": [[394, "term-Y", true], [394, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[797, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[408, 0, 0, "-", "sklearn"]], "sklearn": [[408, 0, 0, "-", "base"], [408, 0, 0, "-", "calibration"], [408, 0, 0, "-", "cluster"], [408, 0, 0, "-", "compose"], [469, 4, 1, "", "config_context"], [408, 0, 0, "-", "covariance"], [408, 0, 0, "-", "cross_decomposition"], [408, 0, 0, "-", "datasets"], [408, 0, 0, "-", "decomposition"], [408, 0, 0, "-", "discriminant_analysis"], [408, 0, 0, "-", "dummy"], [408, 0, 0, "-", "ensemble"], [408, 0, 0, "-", "exceptions"], [408, 0, 0, "-", "experimental"], [408, 0, 0, "-", "feature_extraction"], [408, 0, 0, "-", "feature_selection"], [408, 0, 0, "-", "gaussian_process"], [627, 4, 1, "", "get_config"], [408, 0, 0, "-", "impute"], [408, 0, 0, "-", "inspection"], [408, 0, 0, "-", "isotonic"], [408, 0, 0, "-", "kernel_approximation"], [408, 0, 0, "-", "kernel_ridge"], [408, 0, 0, "-", "linear_model"], [408, 0, 0, "-", "manifold"], [408, 0, 0, "-", "metrics"], [408, 0, 0, "-", "mixture"], [408, 0, 0, "-", "model_selection"], [408, 0, 0, "-", "multiclass"], [408, 0, 0, "-", "multioutput"], [408, 0, 0, "-", "naive_bayes"], [408, 0, 0, "-", "neighbors"], [408, 0, 0, "-", "neural_network"], [408, 0, 0, "-", "pipeline"], [408, 0, 0, "-", "preprocessing"], [408, 0, 0, "-", "random_projection"], [408, 0, 0, "-", "semi_supervised"], [903, 4, 1, "", "set_config"], [904, 4, 1, "", "show_versions"], [408, 0, 0, "-", "svm"], [408, 0, 0, "-", "tree"], [408, 0, 0, "-", "utils"]], "sklearn.base": [[424, 1, 1, "", "BaseEstimator"], [425, 1, 1, "", "BiclusterMixin"], [426, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [427, 1, 1, "", "ClassifierMixin"], [428, 1, 1, "", "ClusterMixin"], [429, 1, 1, "", "DensityMixin"], [430, 1, 1, "", "MetaEstimatorMixin"], [431, 1, 1, "", "OneToOneFeatureMixin"], [432, 1, 1, "", "OutlierMixin"], [433, 1, 1, "", "RegressorMixin"], [434, 1, 1, "", "TransformerMixin"], [435, 4, 1, "", "clone"], [436, 4, 1, "", "is_classifier"], [437, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[424, 2, 1, "", "get_metadata_routing"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[425, 3, 1, "", "biclusters_"], [425, 2, 1, "", "get_indices"], [425, 2, 1, "", "get_shape"], [425, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[426, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[427, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[428, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[429, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[431, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[432, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[433, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "set_output"]], "sklearn.calibration": [[438, 1, 1, "", "CalibratedClassifierCV"], [439, 1, 1, "", "CalibrationDisplay"], [440, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "predict_proba"], [438, 2, 1, "", "score"], [438, 2, 1, "", "set_fit_request"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[439, 2, 1, "", "from_estimator"], [439, 2, 1, "", "from_predictions"], [439, 2, 1, "", "plot"]], "sklearn.cluster": [[441, 1, 1, "", "AffinityPropagation"], [442, 1, 1, "", "AgglomerativeClustering"], [443, 1, 1, "", "Birch"], [444, 1, 1, "", "BisectingKMeans"], [445, 1, 1, "", "DBSCAN"], [446, 1, 1, "", "FeatureAgglomeration"], [447, 1, 1, "", "HDBSCAN"], [448, 1, 1, "", "KMeans"], [449, 1, 1, "", "MeanShift"], [450, 1, 1, "", "MiniBatchKMeans"], [451, 1, 1, "", "OPTICS"], [452, 1, 1, "", "SpectralBiclustering"], [453, 1, 1, "", "SpectralClustering"], [454, 1, 1, "", "SpectralCoclustering"], [455, 4, 1, "", "affinity_propagation"], [456, 4, 1, "", "cluster_optics_dbscan"], [457, 4, 1, "", "cluster_optics_xi"], [458, 4, 1, "", "compute_optics_graph"], [421, 4, 1, "", "dbscan"], [459, 4, 1, "", "estimate_bandwidth"], [460, 4, 1, "", "k_means"], [461, 4, 1, "", "kmeans_plusplus"], [462, 4, 1, "", "mean_shift"], [463, 4, 1, "", "spectral_clustering"], [464, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "partial_fit"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "score"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "set_score_request"], [444, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[446, 2, 1, "", "fit"], [446, 3, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[447, 2, 1, "", "dbscan_clustering"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "partial_fit"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_fit_request"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "set_partial_fit_request"], [450, 2, 1, "", "set_score_request"], [450, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[452, 3, 1, "", "biclusters_"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_indices"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_shape"], [452, 2, 1, "", "get_submatrix"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[454, 3, 1, "", "biclusters_"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_indices"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_shape"], [454, 2, 1, "", "get_submatrix"], [454, 2, 1, "", "set_params"]], "sklearn.compose": [[465, 1, 1, "", "ColumnTransformer"], [466, 1, 1, "", "TransformedTargetRegressor"], [467, 4, 1, "", "make_column_selector"], [468, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_transform"], [465, 2, 1, "", "get_feature_names_out"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 3, 1, "", "named_transformers_"], [465, 2, 1, "", "set_output"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[466, 2, 1, "", "fit"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 3, 1, "", "n_features_in_"], [466, 2, 1, "", "predict"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[470, 1, 1, "", "EllipticEnvelope"], [471, 1, 1, "", "EmpiricalCovariance"], [472, 1, 1, "", "GraphicalLasso"], [473, 1, 1, "", "GraphicalLassoCV"], [474, 1, 1, "", "LedoitWolf"], [475, 1, 1, "", "MinCovDet"], [476, 1, 1, "", "OAS"], [477, 1, 1, "", "ShrunkCovariance"], [478, 4, 1, "", "empirical_covariance"], [479, 4, 1, "", "graphical_lasso"], [480, 4, 1, "", "ledoit_wolf"], [481, 4, 1, "", "ledoit_wolf_shrinkage"], [423, 4, 1, "", "oas"], [482, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[470, 2, 1, "", "correct_covariance"], [470, 2, 1, "", "decision_function"], [470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "fit_predict"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "predict"], [470, 2, 1, "", "reweight_covariance"], [470, 2, 1, "", "score"], [470, 2, 1, "", "score_samples"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[475, 2, 1, "", "correct_covariance"], [475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "reweight_covariance"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[483, 1, 1, "", "CCA"], [484, 1, 1, "", "PLSCanonical"], [485, 1, 1, "", "PLSRegression"], [486, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "inverse_transform"], [485, 2, 1, "", "predict"], [485, 2, 1, "", "score"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "set_predict_request"], [485, 2, 1, "", "set_score_request"], [485, 2, 1, "", "set_transform_request"], [485, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_metadata_routing"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "transform"]], "sklearn.datasets": [[487, 4, 1, "", "clear_data_home"], [488, 4, 1, "", "dump_svmlight_file"], [489, 4, 1, "", "fetch_20newsgroups"], [490, 4, 1, "", "fetch_20newsgroups_vectorized"], [491, 4, 1, "", "fetch_california_housing"], [492, 4, 1, "", "fetch_covtype"], [493, 4, 1, "", "fetch_kddcup99"], [494, 4, 1, "", "fetch_lfw_pairs"], [495, 4, 1, "", "fetch_lfw_people"], [496, 4, 1, "", "fetch_olivetti_faces"], [497, 4, 1, "", "fetch_openml"], [498, 4, 1, "", "fetch_rcv1"], [499, 4, 1, "", "fetch_species_distributions"], [500, 4, 1, "", "get_data_home"], [501, 4, 1, "", "load_breast_cancer"], [502, 4, 1, "", "load_diabetes"], [503, 4, 1, "", "load_digits"], [504, 4, 1, "", "load_files"], [505, 4, 1, "", "load_iris"], [506, 4, 1, "", "load_linnerud"], [507, 4, 1, "", "load_sample_image"], [508, 4, 1, "", "load_sample_images"], [509, 4, 1, "", "load_svmlight_file"], [510, 4, 1, "", "load_svmlight_files"], [511, 4, 1, "", "load_wine"], [512, 4, 1, "", "make_biclusters"], [513, 4, 1, "", "make_blobs"], [514, 4, 1, "", "make_checkerboard"], [515, 4, 1, "", "make_circles"], [516, 4, 1, "", "make_classification"], [517, 4, 1, "", "make_friedman1"], [518, 4, 1, "", "make_friedman2"], [519, 4, 1, "", "make_friedman3"], [520, 4, 1, "", "make_gaussian_quantiles"], [521, 4, 1, "", "make_hastie_10_2"], [522, 4, 1, "", "make_low_rank_matrix"], [523, 4, 1, "", "make_moons"], [524, 4, 1, "", "make_multilabel_classification"], [525, 4, 1, "", "make_regression"], [526, 4, 1, "", "make_s_curve"], [527, 4, 1, "", "make_sparse_coded_signal"], [528, 4, 1, "", "make_sparse_spd_matrix"], [529, 4, 1, "", "make_sparse_uncorrelated"], [530, 4, 1, "", "make_spd_matrix"], [531, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[532, 1, 1, "", "DictionaryLearning"], [533, 1, 1, "", "FactorAnalysis"], [534, 1, 1, "", "FastICA"], [535, 1, 1, "", "IncrementalPCA"], [536, 1, 1, "", "KernelPCA"], [537, 1, 1, "", "LatentDirichletAllocation"], [538, 1, 1, "", "MiniBatchDictionaryLearning"], [539, 1, 1, "", "MiniBatchNMF"], [540, 1, 1, "", "MiniBatchSparsePCA"], [541, 1, 1, "", "NMF"], [542, 1, 1, "", "PCA"], [543, 1, 1, "", "SparseCoder"], [544, 1, 1, "", "SparsePCA"], [545, 1, 1, "", "TruncatedSVD"], [546, 4, 1, "", "dict_learning"], [547, 4, 1, "", "dict_learning_online"], [422, 4, 1, "", "fastica"], [548, 4, 1, "", "non_negative_factorization"], [549, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_covariance"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "get_precision"], [533, 2, 1, "", "score"], [533, 2, 1, "", "score_samples"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "set_inverse_transform_request"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_transform_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_covariance"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "get_precision"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "set_partial_fit_request"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "perplexity"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_covariance"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "get_precision"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "score"], [542, 2, 1, "", "score_samples"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 3, 1, "", "n_components_"], [543, 3, 1, "", "n_features_in_"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[550, 1, 1, "", "LinearDiscriminantAnalysis"], [551, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[551, 2, 1, "", "decision_function"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[552, 1, 1, "", "DummyClassifier"], [553, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_predict_request"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[554, 1, 1, "", "AdaBoostClassifier"], [555, 1, 1, "", "AdaBoostRegressor"], [556, 1, 1, "", "BaggingClassifier"], [557, 1, 1, "", "BaggingRegressor"], [558, 1, 1, "", "ExtraTreesClassifier"], [559, 1, 1, "", "ExtraTreesRegressor"], [560, 1, 1, "", "GradientBoostingClassifier"], [561, 1, 1, "", "GradientBoostingRegressor"], [562, 1, 1, "", "HistGradientBoostingClassifier"], [563, 1, 1, "", "HistGradientBoostingRegressor"], [564, 1, 1, "", "IsolationForest"], [565, 1, 1, "", "RandomForestClassifier"], [566, 1, 1, "", "RandomForestRegressor"], [567, 1, 1, "", "RandomTreesEmbedding"], [568, 1, 1, "", "StackingClassifier"], [569, 1, 1, "", "StackingRegressor"], [570, 1, 1, "", "VotingClassifier"], [571, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[554, 2, 1, "", "decision_function"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_decision_function"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_predict_proba"], [554, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_predict"], [555, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[556, 2, 1, "", "decision_function"], [556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[557, 3, 1, "", "estimators_samples_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "estimators_samples_"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_path"], [559, 3, 1, "", "estimators_samples_"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[560, 2, 1, "", "apply"], [560, 2, 1, "", "decision_function"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_decision_function"], [560, 2, 1, "", "staged_predict"], [560, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[561, 2, 1, "", "apply"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[562, 2, 1, "", "decision_function"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_iter_"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_decision_function"], [562, 2, 1, "", "staged_predict"], [562, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_iter_"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[564, 2, 1, "", "decision_function"], [564, 3, 1, "", "estimators_samples_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_predict"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score_samples"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_log_proba"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_path"], [567, 3, 1, "", "estimators_samples_"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[568, 2, 1, "", "decision_function"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_features_in_"], [571, 3, 1, "", "named_estimators"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "transform"]], "sklearn.exceptions": [[572, 1, 1, "", "ConvergenceWarning"], [573, 1, 1, "", "DataConversionWarning"], [574, 1, 1, "", "DataDimensionalityWarning"], [575, 1, 1, "", "EfficiencyWarning"], [576, 1, 1, "", "FitFailedWarning"], [577, 1, 1, "", "InconsistentVersionWarning"], [578, 1, 1, "", "NotFittedError"], [579, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[575, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[576, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[577, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[578, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[579, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[580, 0, 0, "-", "enable_halving_search_cv"], [581, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[582, 1, 1, "", "DictVectorizer"], [583, 1, 1, "", "FeatureHasher"], [408, 0, 0, "-", "image"], [408, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "restrict"], [582, 2, 1, "", "set_inverse_transform_request"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "set_transform_request"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[584, 1, 1, "", "PatchExtractor"], [585, 4, 1, "", "extract_patches_2d"], [586, 4, 1, "", "grid_to_graph"], [587, 4, 1, "", "img_to_graph"], [588, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[589, 1, 1, "", "CountVectorizer"], [590, 1, 1, "", "HashingVectorizer"], [591, 1, 1, "", "TfidfTransformer"], [592, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_fit_request"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[590, 2, 1, "", "build_analyzer"], [590, 2, 1, "", "build_preprocessor"], [590, 2, 1, "", "build_tokenizer"], [590, 2, 1, "", "decode"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_stop_words"], [590, 2, 1, "", "partial_fit"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[592, 2, 1, "", "build_analyzer"], [592, 2, 1, "", "build_preprocessor"], [592, 2, 1, "", "build_tokenizer"], [592, 2, 1, "", "decode"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_stop_words"], [592, 3, 1, "", "idf_"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_fit_request"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "set_transform_request"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection": [[593, 1, 1, "", "GenericUnivariateSelect"], [594, 1, 1, "", "RFE"], [595, 1, 1, "", "RFECV"], [596, 1, 1, "", "SelectFdr"], [597, 1, 1, "", "SelectFpr"], [598, 1, 1, "", "SelectFromModel"], [599, 1, 1, "", "SelectFwe"], [600, 1, 1, "", "SelectKBest"], [601, 1, 1, "", "SelectPercentile"], [602, 1, 1, "", "SelectorMixin"], [603, 1, 1, "", "SequentialFeatureSelector"], [604, 1, 1, "", "VarianceThreshold"], [605, 4, 1, "", "chi2"], [606, 4, 1, "", "f_classif"], [607, 4, 1, "", "f_regression"], [608, 4, 1, "", "mutual_info_classif"], [609, 4, 1, "", "mutual_info_regression"], [610, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[594, 3, 1, "", "classes_"], [594, 2, 1, "", "decision_function"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "predict_log_proba"], [594, 2, 1, "", "predict_proba"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[595, 3, 1, "", "classes_"], [595, 2, 1, "", "decision_function"], [595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "predict"], [595, 2, 1, "", "predict_log_proba"], [595, 2, 1, "", "predict_proba"], [595, 2, 1, "", "score"], [595, 2, 1, "", "set_fit_request"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 3, 1, "", "n_features_in_"], [598, 2, 1, "", "partial_fit"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "threshold_"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[611, 1, 1, "", "GaussianProcessClassifier"], [612, 1, 1, "", "GaussianProcessRegressor"], [408, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "kernel_"], [611, 2, 1, "", "log_marginal_likelihood"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "predict_proba"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_metadata_routing"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "log_marginal_likelihood"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "sample_y"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "set_predict_request"], [612, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[613, 1, 1, "", "CompoundKernel"], [614, 1, 1, "", "ConstantKernel"], [615, 1, 1, "", "DotProduct"], [616, 1, 1, "", "ExpSineSquared"], [617, 1, 1, "", "Exponentiation"], [618, 1, 1, "", "Hyperparameter"], [619, 1, 1, "", "Kernel"], [620, 1, 1, "", "Matern"], [621, 1, 1, "", "PairwiseKernel"], [622, 1, 1, "", "Product"], [623, 1, 1, "", "RBF"], [624, 1, 1, "", "RationalQuadratic"], [625, 1, 1, "", "Sum"], [626, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameter_length_scale"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[618, 2, 1, "", "__call__"], [618, 5, 1, "", "bounds"], [618, 2, 1, "", "count"], [618, 5, 1, "", "fixed"], [618, 2, 1, "", "index"], [618, 5, 1, "", "n_elements"], [618, 5, 1, "", "name"], [618, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.impute": [[628, 1, 1, "", "IterativeImputer"], [629, 1, 1, "", "KNNImputer"], [630, 1, 1, "", "MissingIndicator"], [631, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "inverse_transform"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.inspection": [[632, 1, 1, "", "DecisionBoundaryDisplay"], [633, 1, 1, "", "PartialDependenceDisplay"], [634, 4, 1, "", "partial_dependence"], [635, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[632, 2, 1, "", "from_estimator"], [632, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[633, 2, 1, "", "from_estimator"], [633, 2, 1, "", "plot"]], "sklearn.isotonic": [[636, 1, 1, "", "IsotonicRegression"], [637, 4, 1, "", "check_increasing"], [638, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "set_predict_request"], [636, 2, 1, "", "set_score_request"], [636, 2, 1, "", "set_transform_request"], [636, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[639, 1, 1, "", "AdditiveChi2Sampler"], [640, 1, 1, "", "Nystroem"], [641, 1, 1, "", "PolynomialCountSketch"], [642, 1, 1, "", "RBFSampler"], [643, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[644, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[645, 1, 1, "", "ARDRegression"], [646, 1, 1, "", "BayesianRidge"], [647, 1, 1, "", "ElasticNet"], [648, 1, 1, "", "ElasticNetCV"], [649, 1, 1, "", "GammaRegressor"], [650, 1, 1, "", "HuberRegressor"], [651, 1, 1, "", "Lars"], [652, 1, 1, "", "LarsCV"], [653, 1, 1, "", "Lasso"], [654, 1, 1, "", "LassoCV"], [655, 1, 1, "", "LassoLars"], [656, 1, 1, "", "LassoLarsCV"], [657, 1, 1, "", "LassoLarsIC"], [658, 1, 1, "", "LinearRegression"], [659, 1, 1, "", "LogisticRegression"], [660, 1, 1, "", "LogisticRegressionCV"], [661, 1, 1, "", "MultiTaskElasticNet"], [662, 1, 1, "", "MultiTaskElasticNetCV"], [663, 1, 1, "", "MultiTaskLasso"], [664, 1, 1, "", "MultiTaskLassoCV"], [665, 1, 1, "", "OrthogonalMatchingPursuit"], [666, 1, 1, "", "OrthogonalMatchingPursuitCV"], [667, 1, 1, "", "PassiveAggressiveClassifier"], [668, 1, 1, "", "PassiveAggressiveRegressor"], [669, 1, 1, "", "Perceptron"], [670, 1, 1, "", "PoissonRegressor"], [671, 1, 1, "", "QuantileRegressor"], [672, 1, 1, "", "RANSACRegressor"], [673, 1, 1, "", "Ridge"], [674, 1, 1, "", "RidgeCV"], [675, 1, 1, "", "RidgeClassifier"], [676, 1, 1, "", "RidgeClassifierCV"], [677, 1, 1, "", "SGDClassifier"], [678, 1, 1, "", "SGDOneClassSVM"], [679, 1, 1, "", "SGDRegressor"], [680, 1, 1, "", "TheilSenRegressor"], [681, 1, 1, "", "TweedieRegressor"], [682, 4, 1, "", "enet_path"], [683, 4, 1, "", "lars_path"], [684, 4, 1, "", "lars_path_gram"], [685, 4, 1, "", "lasso_path"], [686, 4, 1, "", "orthogonal_mp"], [687, 4, 1, "", "orthogonal_mp_gram"], [688, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_predict_request"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_predict_request"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"], [647, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "path"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"], [653, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[660, 2, 1, "", "decision_function"], [660, 2, 1, "", "densify"], [660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "predict_log_proba"], [660, 2, 1, "", "predict_proba"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"], [661, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "path"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[667, 2, 1, "", "decision_function"], [667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[669, 2, 1, "", "decision_function"], [669, 2, 1, "", "densify"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "partial_fit"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_partial_fit_request"], [669, 2, 1, "", "set_score_request"], [669, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[675, 3, 1, "", "classes_"], [675, 2, 1, "", "decision_function"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[676, 3, 1, "", "classes_"], [676, 2, 1, "", "decision_function"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "predict_log_proba"], [677, 2, 1, "", "predict_proba"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "set_score_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[678, 2, 1, "", "decision_function"], [678, 2, 1, "", "densify"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "fit_predict"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "partial_fit"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score_samples"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_partial_fit_request"], [678, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[679, 2, 1, "", "densify"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "partial_fit"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_partial_fit_request"], [679, 2, 1, "", "set_score_request"], [679, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[689, 1, 1, "", "Isomap"], [690, 1, 1, "", "LocallyLinearEmbedding"], [691, 1, 1, "", "MDS"], [692, 1, 1, "", "SpectralEmbedding"], [693, 1, 1, "", "TSNE"], [694, 4, 1, "", "locally_linear_embedding"], [695, 4, 1, "", "smacof"], [696, 4, 1, "", "spectral_embedding"], [697, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "reconstruction_error"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_feature_names_out"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_output"], [690, 2, 1, "", "set_params"], [690, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_fit_request"], [691, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_feature_names_out"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "set_output"], [693, 2, 1, "", "set_params"]], "sklearn.metrics": [[698, 1, 1, "", "ConfusionMatrixDisplay"], [699, 1, 1, "", "DetCurveDisplay"], [700, 1, 1, "", "DistanceMetric"], [701, 1, 1, "", "PrecisionRecallDisplay"], [702, 1, 1, "", "PredictionErrorDisplay"], [703, 1, 1, "", "RocCurveDisplay"], [704, 4, 1, "", "accuracy_score"], [705, 4, 1, "", "adjusted_mutual_info_score"], [706, 4, 1, "", "adjusted_rand_score"], [707, 4, 1, "", "auc"], [708, 4, 1, "", "average_precision_score"], [709, 4, 1, "", "balanced_accuracy_score"], [710, 4, 1, "", "brier_score_loss"], [711, 4, 1, "", "calinski_harabasz_score"], [712, 4, 1, "", "check_scoring"], [713, 4, 1, "", "class_likelihood_ratios"], [714, 4, 1, "", "classification_report"], [408, 0, 0, "-", "cluster"], [717, 4, 1, "", "cohen_kappa_score"], [718, 4, 1, "", "completeness_score"], [719, 4, 1, "", "confusion_matrix"], [720, 4, 1, "", "consensus_score"], [721, 4, 1, "", "coverage_error"], [722, 4, 1, "", "d2_absolute_error_score"], [723, 4, 1, "", "d2_log_loss_score"], [724, 4, 1, "", "d2_pinball_score"], [725, 4, 1, "", "d2_tweedie_score"], [726, 4, 1, "", "davies_bouldin_score"], [727, 4, 1, "", "dcg_score"], [728, 4, 1, "", "det_curve"], [729, 4, 1, "", "explained_variance_score"], [730, 4, 1, "", "f1_score"], [731, 4, 1, "", "fbeta_score"], [732, 4, 1, "", "fowlkes_mallows_score"], [733, 4, 1, "", "get_scorer"], [734, 4, 1, "", "get_scorer_names"], [735, 4, 1, "", "hamming_loss"], [736, 4, 1, "", "hinge_loss"], [737, 4, 1, "", "homogeneity_completeness_v_measure"], [738, 4, 1, "", "homogeneity_score"], [739, 4, 1, "", "jaccard_score"], [740, 4, 1, "", "label_ranking_average_precision_score"], [741, 4, 1, "", "label_ranking_loss"], [742, 4, 1, "", "log_loss"], [743, 4, 1, "", "make_scorer"], [744, 4, 1, "", "matthews_corrcoef"], [745, 4, 1, "", "max_error"], [746, 4, 1, "", "mean_absolute_error"], [747, 4, 1, "", "mean_absolute_percentage_error"], [748, 4, 1, "", "mean_gamma_deviance"], [749, 4, 1, "", "mean_pinball_loss"], [750, 4, 1, "", "mean_poisson_deviance"], [751, 4, 1, "", "mean_squared_error"], [752, 4, 1, "", "mean_squared_log_error"], [753, 4, 1, "", "mean_tweedie_deviance"], [754, 4, 1, "", "median_absolute_error"], [755, 4, 1, "", "multilabel_confusion_matrix"], [756, 4, 1, "", "mutual_info_score"], [757, 4, 1, "", "ndcg_score"], [758, 4, 1, "", "normalized_mutual_info_score"], [408, 0, 0, "-", "pairwise"], [779, 4, 1, "", "pairwise_distances"], [780, 4, 1, "", "pairwise_distances_argmin"], [781, 4, 1, "", "pairwise_distances_argmin_min"], [782, 4, 1, "", "pairwise_distances_chunked"], [783, 4, 1, "", "precision_recall_curve"], [784, 4, 1, "", "precision_recall_fscore_support"], [785, 4, 1, "", "precision_score"], [786, 4, 1, "", "r2_score"], [787, 4, 1, "", "rand_score"], [788, 4, 1, "", "recall_score"], [789, 4, 1, "", "roc_auc_score"], [790, 4, 1, "", "roc_curve"], [791, 4, 1, "", "root_mean_squared_error"], [792, 4, 1, "", "root_mean_squared_log_error"], [793, 4, 1, "", "silhouette_samples"], [794, 4, 1, "", "silhouette_score"], [795, 4, 1, "", "top_k_accuracy_score"], [796, 4, 1, "", "v_measure_score"], [797, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[699, 2, 1, "", "from_estimator"], [699, 2, 1, "", "from_predictions"], [699, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[700, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[715, 4, 1, "", "contingency_matrix"], [716, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[759, 4, 1, "", "additive_chi2_kernel"], [760, 4, 1, "", "chi2_kernel"], [761, 4, 1, "", "cosine_distances"], [762, 4, 1, "", "cosine_similarity"], [763, 4, 1, "", "distance_metrics"], [764, 4, 1, "", "euclidean_distances"], [765, 4, 1, "", "haversine_distances"], [766, 4, 1, "", "kernel_metrics"], [767, 4, 1, "", "laplacian_kernel"], [768, 4, 1, "", "linear_kernel"], [769, 4, 1, "", "manhattan_distances"], [770, 4, 1, "", "nan_euclidean_distances"], [771, 4, 1, "", "paired_cosine_distances"], [772, 4, 1, "", "paired_distances"], [773, 4, 1, "", "paired_euclidean_distances"], [774, 4, 1, "", "paired_manhattan_distances"], [775, 4, 1, "", "pairwise_kernels"], [776, 4, 1, "", "polynomial_kernel"], [777, 4, 1, "", "rbf_kernel"], [778, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[798, 1, 1, "", "BayesianGaussianMixture"], [799, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[798, 2, 1, "", "fit"], [798, 2, 1, "", "fit_predict"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "sample"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[799, 2, 1, "", "aic"], [799, 2, 1, "", "bic"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "fit_predict"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "sample"], [799, 2, 1, "", "score"], [799, 2, 1, "", "score_samples"], [799, 2, 1, "", "set_params"]], "sklearn.model_selection": [[800, 1, 1, "", "FixedThresholdClassifier"], [801, 1, 1, "", "GridSearchCV"], [802, 1, 1, "", "GroupKFold"], [803, 1, 1, "", "GroupShuffleSplit"], [804, 1, 1, "", "HalvingGridSearchCV"], [805, 1, 1, "", "HalvingRandomSearchCV"], [806, 1, 1, "", "KFold"], [807, 1, 1, "", "LearningCurveDisplay"], [808, 1, 1, "", "LeaveOneGroupOut"], [809, 1, 1, "", "LeaveOneOut"], [810, 1, 1, "", "LeavePGroupsOut"], [811, 1, 1, "", "LeavePOut"], [812, 1, 1, "", "ParameterGrid"], [813, 1, 1, "", "ParameterSampler"], [814, 1, 1, "", "PredefinedSplit"], [815, 1, 1, "", "RandomizedSearchCV"], [816, 1, 1, "", "RepeatedKFold"], [817, 1, 1, "", "RepeatedStratifiedKFold"], [818, 1, 1, "", "ShuffleSplit"], [819, 1, 1, "", "StratifiedGroupKFold"], [820, 1, 1, "", "StratifiedKFold"], [821, 1, 1, "", "StratifiedShuffleSplit"], [822, 1, 1, "", "TimeSeriesSplit"], [823, 1, 1, "", "TunedThresholdClassifierCV"], [824, 1, 1, "", "ValidationCurveDisplay"], [825, 4, 1, "", "check_cv"], [826, 4, 1, "", "cross_val_predict"], [827, 4, 1, "", "cross_val_score"], [828, 4, 1, "", "cross_validate"], [829, 4, 1, "", "learning_curve"], [830, 4, 1, "", "permutation_test_score"], [831, 4, 1, "", "train_test_split"], [832, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[801, 3, 1, "", "classes_"], [801, 2, 1, "", "decision_function"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "inverse_transform"], [801, 3, 1, "", "n_features_in_"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "set_split_request"], [802, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "set_split_request"], [803, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[805, 3, 1, "", "classes_"], [805, 2, 1, "", "decision_function"], [805, 2, 1, "", "fit"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "inverse_transform"], [805, 3, 1, "", "n_features_in_"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_log_proba"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "score_samples"], [805, 2, 1, "", "set_params"], [805, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[807, 2, 1, "", "from_estimator"], [807, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "set_split_request"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[815, 3, 1, "", "classes_"], [815, 2, 1, "", "decision_function"], [815, 2, 1, "", "fit"], [815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "inverse_transform"], [815, 3, 1, "", "n_features_in_"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_log_proba"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "score_samples"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "set_split_request"], [819, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[823, 3, 1, "", "classes_"], [823, 2, 1, "", "decision_function"], [823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_log_proba"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[824, 2, 1, "", "from_estimator"], [824, 2, 1, "", "plot"]], "sklearn.multiclass": [[833, 1, 1, "", "OneVsOneClassifier"], [834, 1, 1, "", "OneVsRestClassifier"], [835, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[833, 2, 1, "", "decision_function"], [833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 3, 1, "", "n_classes_"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[834, 2, 1, "", "decision_function"], [834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 3, 1, "", "multilabel_"], [834, 3, 1, "", "n_classes_"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[836, 1, 1, "", "ClassifierChain"], [837, 1, 1, "", "MultiOutputClassifier"], [838, 1, 1, "", "MultiOutputRegressor"], [839, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[840, 1, 1, "", "BernoulliNB"], [841, 1, 1, "", "CategoricalNB"], [842, 1, 1, "", "ComplementNB"], [843, 1, 1, "", "GaussianNB"], [844, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_joint_log_proba"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_joint_log_proba"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[845, 1, 1, "", "BallTree"], [846, 1, 1, "", "KDTree"], [847, 1, 1, "", "KNeighborsClassifier"], [848, 1, 1, "", "KNeighborsRegressor"], [849, 1, 1, "", "KNeighborsTransformer"], [850, 1, 1, "", "KernelDensity"], [851, 1, 1, "", "LocalOutlierFactor"], [852, 1, 1, "", "NearestCentroid"], [853, 1, 1, "", "NearestNeighbors"], [854, 1, 1, "", "NeighborhoodComponentsAnalysis"], [855, 1, 1, "", "RadiusNeighborsClassifier"], [856, 1, 1, "", "RadiusNeighborsRegressor"], [857, 1, 1, "", "RadiusNeighborsTransformer"], [858, 4, 1, "", "kneighbors_graph"], [859, 4, 1, "", "radius_neighbors_graph"], [860, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[845, 2, 1, "", "get_arrays"], [845, 2, 1, "", "get_n_calls"], [845, 2, 1, "", "get_tree_stats"], [845, 2, 1, "", "kernel_density"], [845, 2, 1, "", "query"], [845, 2, 1, "", "query_radius"], [845, 2, 1, "", "reset_n_calls"], [845, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[846, 2, 1, "", "get_arrays"], [846, 2, 1, "", "get_n_calls"], [846, 2, 1, "", "get_tree_stats"], [846, 2, 1, "", "kernel_density"], [846, 2, 1, "", "query"], [846, 2, 1, "", "query_radius"], [846, 2, 1, "", "reset_n_calls"], [846, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "kneighbors"], [849, 2, 1, "", "kneighbors_graph"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "sample"], [850, 2, 1, "", "score"], [850, 2, 1, "", "score_samples"], [850, 2, 1, "", "set_fit_request"], [850, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[851, 2, 1, "", "decision_function"], [851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_predict"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score_samples"], [851, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "radius_neighbors"], [853, 2, 1, "", "radius_neighbors_graph"], [853, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "predict_proba"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "radius_neighbors"], [857, 2, 1, "", "radius_neighbors_graph"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.neural_network": [[861, 1, 1, "", "BernoulliRBM"], [862, 1, 1, "", "MLPClassifier"], [863, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "gibbs"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "score_samples"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "predict_log_proba"], [862, 2, 1, "", "predict_proba"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_partial_fit_request"], [862, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "predict"], [863, 2, 1, "", "score"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[864, 1, 1, "", "FeatureUnion"], [865, 1, 1, "", "Pipeline"], [866, 4, 1, "", "make_pipeline"], [867, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[864, 3, 1, "", "feature_names_in_"], [864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 3, 1, "", "n_features_in_"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[865, 3, 1, "", "classes_"], [865, 2, 1, "", "decision_function"], [865, 3, 1, "", "feature_names_in_"], [865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_predict"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 3, 1, "", "n_features_in_"], [865, 3, 1, "", "named_steps"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "predict_log_proba"], [865, 2, 1, "", "predict_proba"], [865, 2, 1, "", "score"], [865, 2, 1, "", "score_samples"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_score_request"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing": [[868, 1, 1, "", "Binarizer"], [869, 1, 1, "", "FunctionTransformer"], [870, 1, 1, "", "KBinsDiscretizer"], [871, 1, 1, "", "KernelCenterer"], [872, 1, 1, "", "LabelBinarizer"], [873, 1, 1, "", "LabelEncoder"], [874, 1, 1, "", "MaxAbsScaler"], [875, 1, 1, "", "MinMaxScaler"], [876, 1, 1, "", "MultiLabelBinarizer"], [877, 1, 1, "", "Normalizer"], [878, 1, 1, "", "OneHotEncoder"], [879, 1, 1, "", "OrdinalEncoder"], [880, 1, 1, "", "PolynomialFeatures"], [881, 1, 1, "", "PowerTransformer"], [882, 1, 1, "", "QuantileTransformer"], [883, 1, 1, "", "RobustScaler"], [884, 1, 1, "", "SplineTransformer"], [885, 1, 1, "", "StandardScaler"], [886, 1, 1, "", "TargetEncoder"], [887, 4, 1, "", "add_dummy_feature"], [888, 4, 1, "", "binarize"], [889, 4, 1, "", "label_binarize"], [890, 4, 1, "", "maxabs_scale"], [891, 4, 1, "", "minmax_scale"], [892, 4, 1, "", "normalize"], [893, 4, 1, "", "power_transform"], [894, 4, 1, "", "quantile_transform"], [895, 4, 1, "", "robust_scale"], [896, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_transform_request"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_fit_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_transform_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_inverse_transform_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "partial_fit"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "partial_fit"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "set_transform_request"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "infrequent_categories_"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "infrequent_categories_"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "powers_"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "set_fit_request"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "partial_fit"], [885, 2, 1, "", "set_fit_request"], [885, 2, 1, "", "set_inverse_transform_request"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "set_partial_fit_request"], [885, 2, 1, "", "set_transform_request"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "infrequent_categories_"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.random_projection": [[897, 1, 1, "", "GaussianRandomProjection"], [898, 1, 1, "", "SparseRandomProjection"], [899, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[897, 2, 1, "", "fit"], [897, 2, 1, "", "fit_transform"], [897, 2, 1, "", "get_feature_names_out"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "inverse_transform"], [897, 2, 1, "", "set_output"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[898, 2, 1, "", "fit"], [898, 2, 1, "", "fit_transform"], [898, 2, 1, "", "get_feature_names_out"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "inverse_transform"], [898, 2, 1, "", "set_output"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[900, 1, 1, "", "LabelPropagation"], [901, 1, 1, "", "LabelSpreading"], [902, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[902, 2, 1, "", "decision_function"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_log_proba"], [902, 2, 1, "", "predict_proba"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_params"]], "sklearn.svm": [[905, 1, 1, "", "LinearSVC"], [906, 1, 1, "", "LinearSVR"], [907, 1, 1, "", "NuSVC"], [908, 1, 1, "", "NuSVR"], [909, 1, 1, "", "OneClassSVM"], [910, 1, 1, "", "SVC"], [911, 1, 1, "", "SVR"], [912, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[905, 2, 1, "", "decision_function"], [905, 2, 1, "", "densify"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"], [905, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[907, 3, 1, "", "coef_"], [907, 2, 1, "", "decision_function"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 3, 1, "", "n_support_"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_log_proba"], [907, 2, 1, "", "predict_proba"], [907, 3, 1, "", "probA_"], [907, 3, 1, "", "probB_"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[908, 3, 1, "", "coef_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 3, 1, "", "n_support_"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "fit_predict"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score_samples"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "decision_function"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "predict_log_proba"], [910, 2, 1, "", "predict_proba"], [910, 3, 1, "", "probA_"], [910, 3, 1, "", "probB_"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.tree": [[913, 1, 1, "", "DecisionTreeClassifier"], [914, 1, 1, "", "DecisionTreeRegressor"], [915, 1, 1, "", "ExtraTreeClassifier"], [916, 1, 1, "", "ExtraTreeRegressor"], [917, 4, 1, "", "export_graphviz"], [918, 4, 1, "", "export_text"], [919, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[913, 2, 1, "", "apply"], [913, 2, 1, "", "cost_complexity_pruning_path"], [913, 2, 1, "", "decision_path"], [913, 3, 1, "", "feature_importances_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_depth"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_n_leaves"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "predict_log_proba"], [913, 2, 1, "", "predict_proba"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_predict_proba_request"], [913, 2, 1, "", "set_predict_request"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[914, 2, 1, "", "apply"], [914, 2, 1, "", "cost_complexity_pruning_path"], [914, 2, 1, "", "decision_path"], [914, 3, 1, "", "feature_importances_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_depth"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_n_leaves"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_predict_request"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "predict_log_proba"], [915, 2, 1, "", "predict_proba"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_predict_proba_request"], [915, 2, 1, "", "set_predict_request"], [915, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_predict_request"], [916, 2, 1, "", "set_score_request"]], "sklearn.utils": [[920, 1, 1, "", "Bunch"], [921, 4, 1, "", "_safe_indexing"], [408, 0, 0, "-", "arrayfuncs"], [923, 4, 1, "", "as_float_array"], [924, 4, 1, "", "assert_all_finite"], [925, 4, 1, "", "check_X_y"], [926, 4, 1, "", "check_array"], [927, 4, 1, "", "check_consistent_length"], [928, 4, 1, "", "check_random_state"], [929, 4, 1, "", "check_scalar"], [408, 0, 0, "-", "class_weight"], [932, 4, 1, "", "deprecated"], [408, 0, 0, "-", "discovery"], [408, 0, 0, "-", "estimator_checks"], [938, 4, 1, "", "estimator_html_repr"], [408, 0, 0, "-", "extmath"], [945, 4, 1, "", "gen_batches"], [946, 4, 1, "", "gen_even_slices"], [408, 0, 0, "-", "graph"], [948, 4, 1, "", "indexable"], [408, 0, 0, "-", "metadata_routing"], [408, 0, 0, "-", "metaestimators"], [408, 0, 0, "-", "multiclass"], [958, 4, 1, "", "murmurhash3_32"], [408, 0, 0, "-", "parallel"], [961, 4, 1, "", "parallel_backend"], [408, 0, 0, "-", "random"], [963, 4, 1, "", "register_parallel_backend"], [964, 4, 1, "", "resample"], [965, 4, 1, "", "safe_mask"], [966, 4, 1, "", "safe_sqr"], [967, 4, 1, "", "shuffle"], [408, 0, 0, "-", "sparsefuncs"], [408, 0, 0, "-", "sparsefuncs_fast"], [408, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[920, 2, 1, "", "clear"], [920, 2, 1, "", "copy"], [920, 2, 1, "", "fromkeys"], [920, 2, 1, "", "get"], [920, 2, 1, "", "items"], [920, 2, 1, "", "keys"], [920, 2, 1, "", "pop"], [920, 2, 1, "", "popitem"], [920, 2, 1, "", "setdefault"], [920, 2, 1, "", "update"], [920, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[922, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[930, 4, 1, "", "compute_class_weight"], [931, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[933, 4, 1, "", "all_displays"], [934, 4, 1, "", "all_estimators"], [935, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[936, 4, 1, "", "check_estimator"], [937, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[939, 4, 1, "", "density"], [940, 4, 1, "", "fast_logdet"], [941, 4, 1, "", "randomized_range_finder"], [942, 4, 1, "", "randomized_svd"], [943, 4, 1, "", "safe_sparse_dot"], [944, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[947, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[949, 1, 1, "", "MetadataRequest"], [950, 1, 1, "", "MetadataRouter"], [951, 1, 1, "", "MethodMapping"], [952, 4, 1, "", "get_routing_for_object"], [953, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[949, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[950, 2, 1, "", "add"], [950, 2, 1, "", "add_self_request"], [950, 2, 1, "", "consumes"], [950, 2, 1, "", "route_params"], [950, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[951, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[954, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[955, 4, 1, "", "is_multilabel"], [956, 4, 1, "", "type_of_target"], [957, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[959, 1, 1, "", "Parallel"], [960, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[959, 2, 1, "", "dispatch_next"], [959, 2, 1, "", "dispatch_one_batch"], [959, 2, 1, "", "format"], [959, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[962, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[968, 4, 1, "", "incr_mean_variance_axis"], [969, 4, 1, "", "inplace_column_scale"], [970, 4, 1, "", "inplace_csr_column_scale"], [971, 4, 1, "", "inplace_row_scale"], [972, 4, 1, "", "inplace_swap_column"], [973, 4, 1, "", "inplace_swap_row"], [974, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[975, 4, 1, "", "inplace_csr_row_normalize_l1"], [976, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[977, 4, 1, "", "check_is_fitted"], [978, 4, 1, "", "check_memory"], [979, 4, 1, "", "check_symmetric"], [980, 4, 1, "", "column_or_1d"], [981, 4, 1, "", "has_fit_parameter"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "terms": {"": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15, 17, 18, 22, 25, 32, 36, 37, 38, 40, 41, 42, 44, 45, 46, 50, 51, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 68, 69, 76, 77, 80, 83, 88, 89, 90, 93, 94, 95, 98, 101, 102, 103, 107, 109, 111, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 167, 168, 170, 173, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 195, 197, 199, 201, 203, 204, 206, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 226, 227, 230, 232, 233, 234, 236, 243, 245, 246, 248, 253, 254, 259, 260, 261, 262, 263, 266, 270, 272, 274, 283, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 302, 304, 305, 308, 311, 313, 315, 317, 318, 319, 320, 321, 322, 327, 328, 336, 337, 338, 339, 340, 343, 344, 345, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 367, 368, 369, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 394, 395, 396, 397, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 424, 431, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 490, 492, 497, 499, 501, 505, 511, 512, 520, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 694, 701, 702, 703, 709, 712, 717, 721, 723, 736, 742, 759, 760, 780, 781, 798, 799, 800, 801, 803, 804, 805, 810, 815, 819, 820, 823, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 923, 925, 926, 929, 942, 944, 950, 951, 953, 977, 981, 982, 984, 985, 987, 989, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1018, 1020, 1024, 1025, 1027, 1028, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 366, 367, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 926, 930, 931, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 954, 955, 956, 958, 959, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "00": [11, 14, 20, 26, 30, 33, 66, 74, 78, 81, 85, 91, 96, 104, 106, 134, 139, 147, 159, 163, 167, 168, 171, 174, 188, 215, 216, 224, 230, 241, 250, 257, 260, 276, 279, 282, 297, 302, 303, 313, 322, 324, 326, 327, 332, 333, 349, 352, 354, 361, 374, 377, 386, 410, 417, 418, 606, 607, 714, 716, 789, 801, 815, 829, 914, 989, 993, 1003, 1005, 1007, 1015, 1028], "000": [2, 3, 14, 19, 23, 25, 40, 72, 106, 150, 169, 173, 230, 253, 257, 259, 261, 297, 310, 318, 333, 351, 352, 362, 375, 386, 417, 418, 491, 562, 563, 645, 678, 1007, 1015, 1029, 1047], "0000": [2, 320], "000000": [42, 167, 186, 215, 259, 309, 738], "00000000": 152, "000000e": 215, "000024": 366, "000045": 167, "00005": 13, "0000ff": [29, 291, 299], "0001": [8, 146, 205, 257, 382, 422, 444, 448, 460, 472, 473, 479, 534, 539, 541, 548, 550, 551, 560, 561, 647, 648, 649, 650, 653, 654, 659, 660, 661, 662, 663, 664, 669, 670, 673, 675, 677, 679, 681, 688, 690, 694, 862, 863, 905, 906, 982], "000193": 5, "000198": 167, "000200": 5, "000238": 5, "0002652948464431897": 272, "000271": 5, "000272": 5, "0003": 112, "000307": 5, "000312": 5, "0004": [112, 310, 605], "000437": 5, "000554": 351, "000627": 351, "000642": 351, "000657": 351, "00066": 351, "000668": 5, "0008": 388, "000914": 5, "000977": 259, "00099547": 152, "000e": 418, "001": [5, 12, 30, 42, 60, 120, 146, 149, 167, 181, 206, 226, 236, 243, 257, 259, 261, 329, 351, 352, 377, 386, 414, 537, 538, 540, 547, 628, 645, 646, 647, 648, 653, 654, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 680, 682, 685, 690, 691, 694, 695, 798, 799, 862, 863, 900, 901, 907, 908, 909, 910, 911, 982, 1020, 1029], "0012": [2, 695], "0013": 2, "0014": 2, "0015": 2, "001540": 11, "00161": 351, "00166409": 662, "00171412": [759, 760, 991], "001727": 253, "001882": [185, 186], "00196": 351, "002": [2, 10, 146, 149, 352, 377], "002592": [185, 186], "00274": 197, "0028": 2, "002861": [185, 186], "00299": 351, "003": [2, 253, 276, 339, 349, 1015], "0032": 2, "0034189458230957995": 4, "003533": 186, "003586": 537, "00360392": 537, "0036211": 537, "00362644": 537, "00364": 319, "00368320": 11, "00375": 1024, "00393284e": 178, "003935": [185, 186], "003e": 418, "004": 2, "0044": 912, "004577621581492997": 312, "00462428": 752, "0049896314219659565": 312, "005": [2, 116, 259, 263, 288, 305, 352, 386], "005027": 262, "005335": 257, "005383": [185, 186], "005422": 259, "005670": [185, 186], "0057717": 11, "005840": 262, "005861": 262, "006": [2, 4, 267, 386], "006360": 262, "007": [243, 267, 283, 352], "0072b2": 243, "0075": [474, 542], "00755": 542, "007581": 264, "00768662e": 178, "0077": 1024, "007822": 273, "007833": 264, "008": [146, 218, 224, 352, 377, 386, 1015], "008142": [185, 186], "0083899664": 765, "008449": [185, 186], "00860051": 659, "008915": 262, "009": [2, 386], "009075": 167, "00911944e": 178, "0092": 112, "009362": [185, 186], "009747": 273, "009778": 262, "009788": 273, "0098": 112, "00ff00": 291, "01": [4, 6, 8, 11, 12, 14, 26, 33, 38, 42, 49, 60, 66, 74, 93, 95, 96, 112, 121, 123, 125, 127, 128, 134, 146, 154, 158, 159, 167, 168, 178, 181, 188, 204, 209, 210, 215, 216, 218, 219, 226, 230, 231, 232, 236, 237, 241, 245, 249, 250, 252, 258, 259, 260, 264, 266, 267, 268, 276, 288, 297, 300, 302, 305, 313, 316, 322, 324, 341, 349, 352, 358, 359, 361, 375, 377, 385, 410, 419, 450, 472, 516, 522, 533, 540, 544, 546, 596, 597, 599, 606, 643, 647, 655, 659, 679, 697, 716, 801, 815, 899, 962, 989, 993, 997, 1003, 1005, 1007, 1015, 1025, 1029], "010": [11, 352, 386, 830, 1001], "0106": 650, "010877306503748912": 267, "011": [2, 267, 283, 352, 386], "011595": [185, 186], "0116": 605, "011e": 418, "012": [11, 170, 173, 352], "012191": [185, 186], "012521": 186, "012831": 186, "0129126": 374, "013": [2, 11, 56, 143, 147, 181, 267, 352, 1015], "01327": 375, "013519": 167, "014": [2, 267, 386], "0144": 616, "015": [318, 324, 352, 356, 1001, 1015], "0152": 112, "015347e": 215, "015414e": 215, "015579": 273, "015587e": 215, "015596": [185, 186], "0157": 545, "015716e": 215, "016": 352, "01621459": 410, "016445": 259, "017": [46, 146, 386, 472, 473], "017379": 11, "017646": [185, 186], "018": [11, 259, 473], "0182": 898, "018727": 167, "0188ff": 309, "018900": 186, "019": [146, 377, 386, 472], "019023": 259, "019069": 186, "01915283": 103, "019163": [185, 186], "0193": [471, 477], "0195": [423, 476], "0196": 112, "0198e1": 90, "019907": [185, 186], "01e": 183, "02": [2, 6, 10, 11, 26, 28, 33, 42, 48, 50, 56, 60, 62, 66, 74, 80, 81, 83, 93, 96, 111, 118, 134, 146, 147, 151, 156, 159, 166, 167, 171, 178, 215, 224, 226, 234, 236, 241, 253, 254, 260, 266, 276, 282, 288, 297, 299, 302, 303, 305, 307, 313, 324, 331, 335, 352, 357, 374, 377, 385, 409, 414, 442, 446, 598, 606, 659, 677, 801, 815, 884, 900, 914, 989, 1015], "020": [2, 11, 1001], "02069427": 51, "021849": 320, "021872": [185, 186], "022": [352, 1001], "022594": 167, "0226": 650, "022688": [185, 186], "023": [11, 267, 906, 1001], "02306214": 668, "02449161": 103, "02456369": 181, "024991": [185, 186], "025": [29, 199, 236, 256, 691, 695], "025102": 167, "025118864315095794": 1027, "025422": 259, "0255": 112, "0256": 152, "02564103": 360, "025930": [185, 186], "026": [84, 228, 241, 352, 1015], "026328": [185, 186], "026711": 52, "027": [11, 146, 352, 377], "027400": 366, "028": [51, 66, 257, 1015], "02818216": 83, "0288": 351, "02891072": 994, "029": 1001, "02d": 186, "03": [6, 10, 11, 50, 65, 66, 78, 93, 104, 125, 134, 146, 154, 159, 167, 178, 215, 230, 241, 243, 249, 260, 276, 297, 303, 313, 327, 377, 418, 749, 801, 989, 993, 1015], "030": [58, 66, 125, 149, 352, 1015], "030462": 69, "030498": 69, "030585": 273, "030677e": 215, "030867": 167, "031": [46, 146, 352, 377], "031020": 69, "031025": 167, "031255": 167, "031555": 186, "03162278": 10, "031988": [185, 186], "032": [55, 66, 236, 241, 351, 1015], "0321": 836, "032179": 186, "03228": 623, "03228706": 611, "032356": [185, 186], "03237920e": 178, "032405": 167, "03260883": 994, "033": [183, 1001], "033764e": 215, "033823": 167, "034": [56, 125, 472], "034077": 186, "0341": 351, "034194": [185, 186], "034278": 262, "034309": [185, 186], "03433306456": 4, "034821": [185, 186], "03498585": 994, "035005": 167, "035301": 5, "03531816": [827, 828], "035445": 273, "0358": 5, "035914": 273, "036": [193, 216, 386, 473, 1015], "036038": [185, 186], "036385": [185, 186], "036445": 259, "036592": 273, "036656": [185, 186], "0367": 154, "0368": 620, "037": 710, "0370": 851, "037600e": 215, "038": [472, 473, 862], "038076": [185, 186], "03812219": 994, "038159": 813, "03823144": 152, "038689": 248, "0387": 605, "039": [257, 752, 782, 993], "039493": [185, 186], "039497": 240, "03f": 257, "04": [11, 28, 38, 40, 50, 52, 83, 95, 102, 134, 146, 154, 159, 167, 171, 178, 196, 215, 234, 243, 249, 259, 260, 272, 276, 296, 297, 324, 345, 352, 377, 417, 419, 472, 473, 647, 648, 653, 661, 662, 663, 682, 789, 801, 815, 989, 993, 997, 1007, 1015], "040": [37, 56, 66, 100, 104, 302, 303, 1015], "040530e": 215, "040997": 5, "041": 11, "041297": 300, "0416": 409, "042": 386, "0427": [215, 470, 475], "042898": 300, "043": [4, 220, 233, 241, 386, 1015], "043401": [185, 186], "044": [2, 257, 752, 993], "044223": [185, 186], "044451": [185, 186], "044642": [185, 186], "0448": 215, "045": 724, "04520": 136, "0453": 545, "045311": 300, "045390e": 215, "045599": [185, 186], "045934": 300, "045987": 5, "046": [311, 313, 1015], "046010e": 215, "046636": 167, "046641": [185, 186], "047": [180, 216, 351, 354, 386, 1015], "0479": 545, "048": 1001, "049": [168, 472], "049530": 300, "049540": 300, "0499": 545, "04995982": 83, "05": [5, 6, 11, 13, 14, 20, 22, 24, 35, 42, 50, 58, 60, 62, 63, 65, 66, 73, 83, 89, 98, 112, 115, 122, 125, 128, 136, 139, 142, 146, 157, 158, 163, 167, 177, 178, 196, 199, 211, 216, 222, 223, 224, 226, 236, 243, 245, 246, 249, 259, 260, 268, 270, 288, 291, 296, 305, 307, 315, 319, 327, 329, 332, 344, 349, 354, 377, 419, 451, 457, 479, 526, 531, 532, 547, 593, 596, 597, 599, 614, 615, 616, 620, 621, 623, 624, 626, 633, 634, 650, 691, 695, 757, 801, 854, 905, 906, 989, 997, 1003, 1015], "050": [11, 1001], "05063247886572012": 267, "050680": [185, 186], "051": [87, 91, 473, 1015], "0512": 545, "051474": [185, 186], "0517578125e": 5, "052": [74, 538], "05216586": 83, "052506": 320, "053": [2, 146, 220, 352, 377, 386], "05306648": 101, "05317": 154, "054045": 262, "054699": 167, "0547": 909, "055": [146, 224, 377, 993], "05518": 624, "05532": 621, "05534985": 301, "0556": 909, "056": [11, 38, 66, 756, 1001, 1015], "0561": 909, "0566": 624, "05663": 621, "0568": 748, "057": [386, 830], "057122": 186, "05752333": 103, "057711": 186, "058": [146, 257, 377], "0584": 351, "05840206": 103, "059": 352, "0595": 474, "05968": 136, "05994843": 10, "05e": 158, "06": [11, 14, 20, 26, 65, 81, 134, 139, 158, 167, 188, 196, 197, 250, 259, 260, 276, 302, 307, 332, 345, 386, 409, 483, 484, 485, 645, 646, 690, 694, 798, 799, 801, 815, 914, 989, 1003, 1005, 1015], "060": [2, 11, 352, 752], "0602": 5, "061": 257, "0614": 624, "06165": 621, "061696": [185, 186], "061953": 5, "062": 352, "0622": [471, 477], "0626": 836, "063": [57, 66, 257, 259, 438, 1015], "0631": 11, "064": [159, 386, 1001], "065": [192, 216, 257, 386, 1015], "06506307": 301, "0652": 623, "06525643": 611, "066": [257, 649], "06686804": 212, "06694199": 103, "06695631e": 78, "067": [158, 209, 216, 1015], "067109": 186, "067528": 186, "068": [2, 11, 259], "068332": [185, 186], "06880943": 83, "06896552": 450, "069": 257, "069196": 257, "0693": 620, "07": [11, 14, 33, 83, 102, 134, 167, 193, 215, 216, 253, 268, 276, 303, 354, 362, 375, 410, 562, 563, 693, 695, 993, 1007, 1015], "070": [344, 349, 1015], "0707": 624, "07073": 621, "071": [146, 377, 438], "071964": 167, "072": [438, 649], "073": [257, 472, 473], "074": 257, "074412": [185, 186], "075": [96, 137, 139, 210, 216, 1015], "07582983e": 178, "075887": 186, "076": [2, 184, 216, 893, 1015], "077": [283, 360, 361, 1015], "077846": 259, "0779": 5, "078": 2, "07846529": 301, "07880": 136, "079": [4, 93, 99, 104, 146, 272, 276, 377, 1015], "079297": 259, "07963978e": 178, "07993421": 212, "08": [2, 14, 42, 48, 96, 134, 163, 167, 168, 181, 216, 236, 250, 276, 302, 313, 377, 479, 532, 544, 546, 564, 642, 659, 801, 862, 863, 884, 999, 1015], "08022103": [827, 828], "080295": 186, "081": 1001, "0813": [470, 475], "082": 2, "0825": 310, "083": [257, 352], "08333333": 360, "08377444": 752, "084": [22, 340, 349, 1015], "085": 13, "085299": [185, 186], "08533159": 200, "085711": 52, "086": 46, "08604995": 83, "086944": 240, "08699432": 201, "0872422": 661, "088": [670, 1001], "089063": [185, 186], "08d": 15, "08t16": 374, "09": [14, 95, 96, 102, 104, 167, 230, 234, 241, 272, 410, 530, 608, 736, 843, 993, 1003, 1007, 1015], "09000": 197, "090528": 167, "090808": 167, "0909": 323, "091": [200, 216, 220, 1015], "091053": 167, "091621": 52, "092": [39, 66, 290, 297, 1015], "092204": [185, 186], "093": [472, 1041], "0932": 351, "094": [13, 185, 207, 216, 473, 1015], "09443967": 301, "09517222": 1027, "09541846": 537, "096": [322, 324, 335, 349, 1015], "09684337": 212, "096950": 300, "097": [2, 146, 238, 241, 377, 1015], "098": [179, 216, 352, 1015], "098332": 23, "0986": [418, 869], "09861229": [613, 1003], "098758": 23, "098776": 259, "098932": 23, "099": 2, "099820": 23, "09999999999999999": [232, 267, 339], "0d": 1037, "0e": [270, 550, 551], "0e4": 204, "0f": [17, 56], "0min": 52, "0rc1": [384, 1032], "0x": 928, "0x7f861abd88b0": 197, "0x7f861b21d040": 271, "0x7f861b21d340": 271, "0x7f861bbee580": 271, "0x7f861eaabd30": 114, "0x7f861ead38b0": 130, "0x7f861ead3ac0": 130, "0x7f861ebfbc70": 69, "0x7f861f132700": 114, "0x7f86305e3e40": 266, "0x7f8630630bb0": 237, "0x7f8630640a90": 326, "0x7f8630e274f0": 69, "0x7f8631409160": 248, "0x7f86314098b0": 257, "0x7f8632294c10": 271, "0x7f865b110310": 69, "0x7f865b11e820": 70, "1": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 324, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 393, 394, 395, 397, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 936, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1032, 1034, 1038], "10": [2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 18, 23, 24, 25, 28, 29, 30, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 69, 70, 72, 76, 77, 78, 79, 80, 83, 84, 90, 95, 96, 97, 98, 102, 103, 109, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 125, 127, 128, 131, 133, 138, 143, 146, 150, 151, 153, 155, 156, 158, 159, 161, 162, 166, 167, 168, 169, 170, 173, 176, 181, 187, 188, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 274, 276, 278, 281, 288, 299, 300, 301, 302, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 321, 322, 323, 326, 327, 328, 330, 337, 338, 339, 341, 342, 344, 345, 346, 348, 351, 352, 353, 362, 366, 374, 375, 376, 377, 378, 380, 382, 385, 386, 392, 393, 394, 397, 400, 401, 402, 406, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 439, 444, 448, 450, 452, 453, 454, 460, 461, 463, 476, 489, 493, 494, 497, 501, 502, 503, 505, 511, 512, 513, 514, 517, 521, 522, 525, 527, 529, 532, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 549, 553, 556, 557, 558, 559, 562, 563, 565, 566, 567, 568, 569, 571, 583, 584, 588, 594, 595, 600, 601, 606, 608, 612, 618, 620, 628, 631, 633, 635, 636, 637, 638, 641, 643, 644, 645, 647, 648, 650, 653, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 673, 674, 676, 677, 678, 679, 682, 686, 687, 692, 693, 696, 697, 700, 706, 716, 727, 743, 757, 770, 798, 799, 801, 802, 803, 804, 805, 812, 815, 816, 817, 818, 819, 821, 822, 824, 829, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 852, 861, 862, 863, 865, 871, 875, 878, 879, 882, 894, 902, 908, 911, 913, 914, 918, 929, 939, 942, 946, 957, 961, 962, 963, 969, 970, 979, 982, 983, 988, 989, 990, 991, 993, 994, 996, 997, 999, 1000, 1003, 1007, 1008, 1015, 1020, 1024, 1025, 1027, 1028, 1029, 1033, 1034, 1037, 1038, 1039, 1044, 1046, 1047, 1048, 1050, 1051], "100": [2, 3, 5, 8, 10, 11, 15, 17, 23, 25, 35, 40, 48, 51, 55, 59, 64, 69, 70, 73, 77, 78, 93, 95, 96, 102, 110, 115, 125, 126, 129, 132, 150, 154, 157, 158, 167, 168, 170, 173, 176, 177, 179, 181, 183, 187, 188, 189, 191, 196, 197, 198, 199, 201, 206, 207, 208, 210, 212, 213, 215, 220, 221, 223, 229, 230, 231, 232, 233, 237, 243, 245, 249, 253, 254, 255, 257, 259, 262, 263, 264, 269, 270, 274, 276, 288, 289, 290, 302, 306, 307, 309, 311, 312, 318, 322, 323, 330, 331, 337, 338, 340, 341, 342, 345, 346, 348, 351, 352, 356, 359, 360, 366, 368, 375, 377, 380, 382, 385, 386, 400, 406, 410, 411, 414, 415, 416, 417, 418, 438, 442, 446, 450, 472, 473, 479, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 531, 535, 537, 540, 545, 546, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 606, 608, 611, 632, 633, 634, 640, 641, 642, 643, 647, 648, 649, 650, 653, 654, 659, 660, 661, 662, 663, 664, 666, 668, 670, 672, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 747, 798, 799, 803, 823, 829, 830, 835, 840, 841, 842, 844, 845, 846, 850, 862, 863, 881, 883, 886, 895, 912, 982, 983, 986, 990, 993, 994, 1000, 1003, 1005, 1015, 1020, 1024, 1028, 1029, 1044, 1045, 1046, 1049, 1050], "1000": [2, 5, 6, 13, 24, 29, 35, 48, 70, 73, 83, 102, 112, 114, 116, 120, 121, 122, 127, 132, 137, 141, 155, 173, 183, 189, 200, 220, 229, 230, 232, 243, 247, 253, 257, 259, 265, 268, 270, 288, 290, 306, 309, 316, 317, 319, 321, 322, 340, 341, 347, 351, 352, 385, 386, 393, 407, 418, 438, 474, 480, 481, 532, 533, 538, 540, 542, 543, 544, 546, 547, 549, 554, 565, 633, 647, 648, 652, 653, 654, 656, 661, 662, 663, 664, 667, 668, 669, 673, 677, 678, 679, 688, 693, 699, 702, 765, 882, 894, 900, 905, 906, 982, 986, 1008, 1024, 1027, 1043, 1045, 1054], "10000": [2, 9, 11, 28, 41, 61, 70, 71, 123, 136, 183, 190, 197, 205, 213, 230, 232, 272, 317, 323, 336, 338, 362, 368, 417, 418, 562, 563, 645, 680, 882, 911, 1005, 1025, 1029], "100000": [153, 232, 243, 380, 614, 615, 616, 620, 621, 623, 624, 626, 894, 986, 1027, 1029], "1000000": [15, 537], "10005": 1044, "1000x": 1042, "1001": [208, 240], "10027": 1049, "10045": 1044, "1005": 1008, "10058": 1045, "10059": 1044, "10065": 236, "1007": 706, "10070308464041304": 197, "10071": 1044, "10093": 1044, "10095": 1044, "10096": 1049, "100_000": [23, 25, 167], "100k": 230, "100x": [1036, 1039, 1053], "101": [25, 146, 278, 358, 361, 377, 851, 1015, 1037], "10101": 1044, "10112": 1044, "1013": 1001, "10142": 1044, "10153": 1044, "10168": 1051, "10181": 1044, "10192": 1044, "10195": 1044, "101alexmartin": 1053, "102": [258, 276, 386, 1015, 1027, 1038], "10210": 1044, "10229": 1044, "1024": [51, 102, 450, 469, 539, 903, 1049], "10280": 1044, "10297": 1044, "103": [117, 125, 281, 283, 375, 417, 498, 556, 557, 1036], "10306": 1044, "10325": 1044, "10336": 1044, "10346": 1044, "10377": 1044, "1038": 410, "10397": 1044, "104": [2, 22], "10403": 215, "10412": 1044, "10428": 1044, "10437": 1044, "10440": 1045, "10441": 1044, "1045": 69, "10452": 1044, "10458": 1044, "1046": [69, 248], "10463": 1014, "10468": 1051, "10469096": 152, "1047": 69, "10471": 1044, "10474": 1044, "10478008": 410, "10482": 1046, "1048576": [583, 590], "10493": 1048, "105": 309, "10500": 1044, "10521": 1044, "10526": 410, "10536": 1044, "10580": 1045, "10581": 1044, "10584743": 152, "10587": 1044, "10591": 1048, "10593": 1044, "106": [29, 33, 146, 240, 324, 377, 881, 987, 1015, 1037], "10606655": 212, "10610": 1044, "10655": 1044, "10663": 1044, "10677": 1044, "10687": 1044, "107": [125, 320, 410, 900, 994, 1038], "10708": 1048, "10711": 1048, "10723": [1043, 1044], "10727": 1045, "1073": [375, 489], "10733": 1014, "10740": 1044, "1076": 330, "10774": 1044, "10795": 1044, "108": [0, 6, 187, 216, 1015, 1037], "1080": [374, 410], "10805": 1050, "10811": 1044, "10815": 1046, "10827": 1044, "10829": 1044, "10834": 215, "10836": 1044, "1084": 248, "10845": 1044, "10869": 1044, "1088": 240, "10881": 1044, "108843": 262, "10887": 1044, "108880": 23, "10898": 1044, "10899": 1044, "109": [22, 51, 994, 1038], "10908": 1044, "10913": 1044, "10914094": 212, "10928": 1044, "10933": 1044, "10982": 1044, "10992": 1044, "10998": 1044, "10999": 1044, "10_000": [5, 23, 73, 114, 122, 166, 173, 230, 262, 283, 323, 560, 561, 565, 566, 882], "10_fold": [375, 494], "10e": [176, 181], "10k": [316, 448], "10x": 1036, "10x10": 202, "10\u2079": 1044, "11": [2, 17, 33, 72, 79, 95, 104, 146, 152, 167, 168, 181, 197, 198, 199, 202, 212, 230, 236, 241, 253, 256, 264, 265, 267, 271, 286, 287, 289, 309, 317, 320, 321, 324, 338, 342, 346, 353, 374, 377, 378, 386, 393, 410, 413, 414, 417, 451, 458, 483, 484, 485, 486, 497, 502, 518, 519, 613, 651, 657, 671, 716, 722, 724, 725, 779, 780, 781, 802, 805, 819, 822, 830, 857, 914, 943, 957, 985, 989, 991, 1003, 1007, 1008, 1015, 1020, 1027, 1029, 1034, 1038, 1042, 1044, 1045, 1047, 1050, 1051], "110": [88, 176, 190, 194, 204, 216, 229, 311, 322, 438, 987, 988, 1015], "1100": 48, "11000": 1045, "11005": 1044, "11006": 1044, "11010": 1044, "11011": 1044, "11021": 125, "11042": 1044, "11047": [1014, 1046], "11064": 1048, "11082": 1044, "110923": 186, "11099": 765, "111": [2, 5, 6, 65, 66, 88, 99, 194, 212, 222, 259, 283, 857, 1028, 1039], "1111": [651, 657], "1111111111111111": 267, "11124": 1044, "1112658": [899, 1005], "11135": 1044, "11136": 1044, "1114": 248, "11144": [1044, 1045], "11144673": 212, "11160": 1044, "11166": 1044, "1117": 620, "11176": 1044, "11179": 1045, "1118": 69, "112": [52, 146, 206, 216, 375, 377, 1015, 1038], "11206": 1044, "11211": 1044, "112141": 386, "11232": 1046, "11235": 1044, "112589990684262": 747, "11272": 1044, "11293": 1044, "11295": 1044, "11296": 1047, "113": [70, 74, 183, 216, 278, 386, 1015, 1039], "11306": 1044, "11308": 1044, "11310": 1044, "11314": 375, "11315": 1044, "11327": 1044, "113516": 262, "11353": 1044, "11354": 1045, "11364": 1045, "11364637": 10, "113781": 320, "11378556": 301, "114": [320, 711, 1036], "1140": 375, "11413": 2, "11420": 1044, "1145": [173, 410, 677], "11452112": 212, "11458": 1045, "11464": 1044, "11466": 1044, "11467": 1044, "1148": 248, "115": [168, 292, 297, 1001, 1015], "11505": 1044, "11514": 1047, "11520": 1044, "11526": 1045, "11528972": 212, "11542": 1044, "11553": 1044, "11556": 1044, "11557": 1044, "11558": 1044, "11576": 1044, "11585": 1044, "11596": 1044, "116": [168, 232, 1036], "1162": 410, "11635": 1046, "11646": 1045, "11650": 1045, "11679": 1044, "11680": 6, "11682": 1048, "11682692": 212, "11693539": 83, "11699": 1045, "117": 1037, "11705": 1045, "117154": 167, "11724": 1044, "11727": 1045, "11741": 1044, "11754": 1045, "11756": [1044, 1045], "117608": 23, "11774": 1044, "1179": 248, "118": [309, 313, 591, 1015], "11805": 1014, "11841": [899, 1005], "1185": 386, "11860": 1051, "1189": 417, "119": [987, 1039], "11901": 1044, "11905": 1044, "11912": 1044, "11915045": 362, "11924": 1044, "11931": 197, "11932": 197, "11933": 197, "11935": 197, "11950": 1047, "11951": 1044, "11958": 154, "11973": 1045, "11977": 1014, "12": [0, 2, 4, 17, 18, 32, 38, 40, 41, 51, 53, 54, 55, 71, 72, 83, 118, 119, 120, 123, 125, 146, 152, 153, 154, 162, 167, 168, 170, 171, 177, 181, 183, 197, 205, 215, 218, 221, 222, 223, 224, 226, 227, 229, 237, 240, 245, 246, 253, 258, 259, 261, 262, 265, 271, 273, 286, 309, 310, 311, 320, 346, 353, 377, 378, 385, 393, 395, 397, 401, 402, 403, 410, 414, 418, 444, 448, 450, 458, 483, 484, 485, 486, 497, 533, 535, 542, 571, 647, 648, 653, 661, 662, 663, 665, 670, 672, 682, 686, 687, 690, 693, 694, 726, 731, 798, 799, 802, 819, 822, 836, 857, 873, 974, 982, 983, 985, 989, 991, 994, 1003, 1007, 1008, 1015, 1020, 1025, 1034, 1037, 1039, 1043, 1044, 1046, 1047, 1052, 1053], "120": [126, 219, 247, 250, 322, 419, 591, 1015, 1036], "1200": [48, 121, 305, 417], "12000": 521, "12068": 1046, "12069": 1049, "121": [65, 111, 162, 231, 243, 250, 619, 670, 1003, 1015], "12105": 1044, "1211": 254, "12116": 1045, "1212": 499, "12122": 1044, "121351": 186, "12143": 1045, "12145": 1046, "12147": 1014, "12159": 1044, "12165": 1044, "12165031": 994, "1217": 197, "12171": 1044, "12174": 1045, "12177": 1045, "12190903": 83, "12196": 197, "12197": 1045, "122": [0, 111, 154, 162, 168, 231, 386, 994], "1220": 620, "12211": 1044, "12222": 1045, "12232": 1045, "12234": 1044, "12246": 1044, "12251": 1045, "12258": 1046, "12274212": 994, "12279": 1045, "12285": 1051, "1229": 518, "123": [113, 132, 362, 417, 517, 518, 519, 556, 557, 838, 994, 1001], "12300": 1045, "12303": 1046, "12304": 1044, "12317": [154, 1044], "1232": 417, "12326": 2, "12327": 2, "12328": [2, 1045], "12329": 2, "12330": [2, 1044], "12334": 1045, "12338": 1044, "12339": 1044, "1234": [177, 246, 262, 380], "12344": 1045, "12345": 1044, "12350": 1044, "1236": 311, "12360": 1044, "12365": 1044, "12379": 2, "12380": 2, "12381": 2, "12382": 2, "123828": 262, "12383": 2, "12388": 1044, "12393": 1044, "124": [5, 417, 1038], "124225": 186, "12436": 1045, "12441": 1044, "12451": 1044, "12462": 1044, "12467": 1044, "12471": 1044, "12481": 1044, "125": [2, 51, 78, 96, 318, 352, 535, 982, 993, 1003], "12513": 1045, "12514": 1044, "125140": 262, "12517": 1044, "12518": 1044, "12522": 1044, "125247168": 11, "12543": 1045, "12557": 1046, "12568": 1045, "12569": 1046, "12582": 1045, "12583": 1045, "1259": 17, "12599": 1045, "126": 417, "12612": 1044, "12613": 1045, "12625": 1044, "1263": 386, "12638": 1048, "12650": 1046, "126502": 186, "12669": 1045, "1268187": 212, "12685": 1044, "12699": 1044, "127": [121, 1036], "12701": 1044, "12704": 1044, "127128": 122, "12715": 1045, "12732": 1045, "1276": 6, "12789": 1046, "128": [12, 13, 197, 240, 241, 366, 537, 1015], "12800": 1014, "12807": 1045, "12821": 1045, "12834": 1045, "12852": [1014, 1046], "12855": 1045, "12860": [215, 1045], "12861": 1045, "12866": 1014, "1288": [4, 375], "12881": 1044, "12883823": 414, "12887": 1046, "129": [199, 1025, 1036], "12908": 1045, "12914884": 994, "12916": 1045, "12927": 1046, "12946": 1044, "12949": 1044, "12955": 1045, "12972": 1045, "12983": 1045, "12988": 1045, "1299": [871, 1003], "12th": 1005, "13": [2, 4, 8, 9, 11, 14, 42, 53, 66, 72, 98, 102, 118, 121, 123, 161, 167, 173, 183, 206, 252, 253, 260, 263, 265, 297, 302, 305, 309, 339, 375, 377, 380, 386, 393, 414, 422, 497, 511, 514, 533, 534, 552, 553, 583, 607, 636, 640, 735, 760, 819, 849, 864, 871, 897, 898, 989, 993, 994, 999, 1000, 1003, 1008, 1011, 1015, 1020, 1034, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1048], "130": [49, 66, 386, 1015], "1300": 48, "13003": 1048, "13005": 1044, "13007": 1045, "130107": [212, 230, 490], "13013": 1046, "13042": 1051, "13046": 1044, "13077794": 362, "13086": 1045, "131": [2, 12, 54, 386, 993, 1037], "13124": [1044, 1045], "13134": 1044, "13142": 1045, "13146": [1014, 1046], "13151": 1045, "13157": 1045, "13164": 1045, "13165": 1044, "13170937": 1027, "13174": 1045, "1319": [871, 1003], "131900": 68, "13193": 1045, "132": [2, 6, 12, 54, 417], "13204": 1048, "13213": 1046, "1322": 623, "13221": 1044, "13222543": 611, "13227": 1014, "1323": 197, "13231": 1046, "13233": [375, 494, 495], "13240": 1045, "13241": 1045, "13250": 1045, "13251": 1045, "13253": 1045, "13260": 1045, "13266": 1045, "13276": 1044, "13279": 1045, "13283": 1045, "13286": 983, "13290": 1046, "133": [12, 54], "13312": 1044, "13317": 1045, "13328": 1045, "13333": 1045, "13336": 1045, "13350": 1045, "13363": 1045, "13366": 1045, "13374": 2, "13375": 2, "13376": 2, "13377": 2, "13378": 2, "1338": 254, "13382": 1045, "13389": 1045, "13392": 1046, "13393": 1046, "13397": 1045, "134": [43, 51, 99, 121, 253, 259, 1039], "13422": 1045, "13427": 1045, "13439": 1045, "13447": 1045, "13459": 1045, "13467": 1046, "13485": 1045, "13486": 1045, "13496": 1045, "135": [146, 320, 377], "13511": 1047, "13524": 1045, "1353": 351, "13531": 1045, "13545": 1045, "13549": 1045, "13554": 1045, "13562": 1045, "13575": 1046, "136": [13, 264, 276, 1015], "13601": 1045, "13607": 1045, "13609": 1046, "13618": 1046, "13620": 1045, "13628": 1045, "13636": [989, 1045], "13641": 1045, "13649": 1053, "13651": 1045, "137": [236, 386, 1037], "13704": 1046, "13707": 1046, "1371": 535, "13726": 1046, "1373": 990, "1374": 535, "13741": 1045, "13769": 1046, "13772": [1044, 1045], "13773": 1046, "13779": 1045, "1378": 215, "13780": 1045, "1379": 215, "138": [386, 417, 993], "13806": 1046, "1382": 525, "13822072286080167": 267, "13835": 1045, "1385": 475, "13864": 1045, "13875": 1046, "13877": 1045, "13894": 1045, "13896": 1046, "139": [215, 283, 386, 417, 453, 463, 692, 696, 994], "13900": 1048, "13902": [1014, 1046], "13903": [1044, 1045], "13910": 1045, "13911": [1014, 1046], "13925": 1046, "13933": 1046, "13938": 1046, "13947": 1045, "1396": 990, "13960": 1046, "1397": 386, "13974": 1045, "13983521": 301, "13987": 1046, "13988486": 212, "13995": 1046, "13th": 25, "14": [2, 9, 11, 36, 47, 58, 60, 61, 64, 72, 79, 98, 141, 163, 168, 181, 186, 188, 215, 220, 226, 231, 253, 258, 264, 265, 274, 276, 281, 283, 302, 308, 309, 320, 332, 345, 348, 349, 367, 375, 377, 378, 393, 397, 401, 402, 410, 414, 497, 499, 511, 554, 555, 636, 644, 693, 815, 819, 871, 986, 989, 993, 1003, 1008, 1011, 1015, 1020, 1034, 1036, 1037, 1039, 1040, 1044, 1049], "140": [51, 150, 159, 322, 338, 349, 417, 511, 517, 518, 519, 556, 557, 994, 1015], "1400": [48, 475], "14012": 1046, "14024": 1045, "14028": 1046, "14035": 1046, "14048": 1047, "14053": 1045, "14067": 1045, "14075": 1047, "14087": 1045, "14092": 1045, "141": [54, 66, 278, 502, 535, 905, 994, 1015], "14108": 1046, "1411": 6, "14114": 1046, "14156": 215, "14170": 1046, "1418": 6, "14180": [1014, 1047], "1419": 2, "14194": 1046, "14197": 1045, "142": [2, 90, 91, 417, 1015], "1422": 2, "14228": 367, "14237": [1044, 1045], "14259": 1046, "14264": 1047, "142857": 215, "14286": 1046, "14287": 1046, "14294": 1046, "14296": 1046, "143": [48, 66, 146, 229, 241, 377, 472, 473, 1005, 1015, 1036, 1037], "14300": 1047, "14302": 236, "14305": 1046, "14309": 1045, "14336": 1046, "14338": 983, "14356": 1046, "14357": 1046, "14378": 1046, "14381": 1046, "14393": 1045, "144": [259, 386, 1036], "1440": [2, 6], "14406": 1046, "1441": 623, "14410151": 611, "14417": 1046, "144204": 122, "1443": 999, "14430": 1046, "14446": 1048, "14458": 1046, "14464": 1046, "14475": 1046, "144943": 23, "14496": [386, 1045], "145": [11, 112, 134, 410, 1015], "1451": 6, "14510": 1046, "14516": 1047, "14520": 1046, "14538": 1046, "14544": 1046, "14549": 1046, "1456": 215, "14582": 1014, "14591": 1046, "14593": 1046, "14595": 1046, "145957": 122, "146": [4, 232, 241, 417, 1015], "1460": [119, 130], "14602": 1046, "14603365": 212, "14623": 1046, "14625": 6, "14629": 1046, "1464": 227, "14646": 1046, "14647": 1046, "14680": 1046, "14682": 1046, "14696": 1047, "147": [152, 159, 994, 1015], "14702": 1046, "147022": 186, "14704": 1046, "14706": 1046, "1471": 999, "14710": 1046, "14732": 1046, "14736": 1051, "1474": 386, "14740": 1046, "14764": 1046, "148": 1039, "14800": 1048, "14810": 311, "14848": 1047, "14849": 1046, "14862": 1051, "14864": 1046, "14865": 1046, "14869": 1046, "14872": 1046, "14884": 1046, "14890": 1046, "14894": 1046, "14898": 1046, "149": [994, 1036], "14900": 1046, "14902": 1046, "14907": 1046, "14908": 1046, "14933": 1046, "14936": 1046, "14971": 1046, "14975": 1050, "14982": 1048, "1499": 6, "15": [2, 4, 5, 10, 11, 12, 13, 28, 29, 32, 38, 42, 51, 52, 59, 60, 64, 71, 72, 78, 80, 90, 96, 102, 113, 115, 118, 119, 122, 125, 141, 143, 145, 149, 153, 161, 166, 167, 168, 186, 194, 199, 211, 215, 219, 220, 223, 224, 226, 241, 245, 246, 253, 254, 262, 264, 267, 270, 271, 274, 287, 291, 297, 299, 300, 302, 305, 307, 309, 321, 327, 337, 339, 342, 345, 348, 357, 374, 375, 378, 380, 393, 397, 401, 402, 414, 417, 418, 441, 455, 491, 497, 498, 499, 532, 538, 546, 547, 556, 557, 599, 605, 610, 645, 653, 662, 664, 669, 677, 679, 693, 819, 834, 857, 886, 982, 988, 989, 990, 993, 996, 997, 1003, 1008, 1011, 1015, 1020, 1025, 1032, 1034, 1038, 1048, 1050, 1051], "150": [2, 4, 88, 90, 113, 122, 136, 219, 223, 226, 272, 322, 343, 346, 377, 414, 419, 505, 602, 603, 826, 827, 828, 993, 1024, 1025, 1026], "1500": [37, 48, 55, 60, 65, 90, 218, 222, 243], "15000": [673, 688, 862, 863], "15005": [1047, 1049], "15007": 1048, "15010": 1046, "1502": 1029, "15028": 1046, "15038": 1046, "150407": 386, "15044": 1046, "15049": 1046, "150527": 300, "15053": 1046, "15057": 1046, "1506": 388, "15080": 1046, "15082": 1046, "15083": 1046, "15084": 1046, "15086": 1046, "15094": 1046, "15096": 1046, "15099": 1046, "150x4": 88, "151": [239, 241, 320, 386, 417, 502, 1005, 1015], "15100": 1046, "1511007": 240, "151101": 240, "15119": 1046, "15120": 1046, "15126": 1048, "15138": 1046, "15160": 1046, "1517": 302, "15179": 1047, "152": [56, 386], "15257": 1046, "1527": 861, "15274": 1046, "15297572": 537, "153": [328, 332, 664, 1015], "15304": 1046, "15319": 1014, "153244303321897735": 410, "15361": 1048, "15375": 1046, "15380": 1047, "15382": 1046, "15393": 1046, "154": [302, 315, 324, 652, 994, 1015], "1542": 386, "15427": 1048, "15429": 1046, "15436": 1047, "154453": 300, "15463": 1046, "15488": 1046, "15490": 1046, "15503": 1047, "15521": 136, "15524": 1046, "1553374": 410, "1553511": 410, "1554": 861, "15550": 1014, "15557": 1046, "15558": 1047, "15582": 1047, "156": [146, 167, 377], "15611": 983, "15622": 1047, "15625": 1046, "156252": 186, "15636": 1048, "15652": 1047, "15655": 1047, "15661": 1046, "15669": 1047, "15699552": 994, "157": 386, "15707": 1047, "15709": 1047, "15730": 1047, "157334": 300, "15751": 1046, "15760": 1046, "15762": 1047, "15763": 1048, "15773": 1047, "15782": 1047, "15785": 1047, "15797": 1046, "158": [40, 417, 670], "15806": 1047, "15810": 1046, "15834": 1047, "15863": 1046, "15864": 1047, "15868": 1046, "15879": 1046, "15888": 1046, "15898": 1046, "159": [47, 51, 66, 375, 1015, 1036], "15918": 1047, "1592": 499, "15926": 1047, "15930": 1046, "15933": 1046, "15936": 1046, "15937": 1046, "159419": 240, "15946": 1047, "15947": 1046, "15948": 1050, "15950": 1047, "15953": 1047, "15959": 1047, "15963": 1047, "1597": 253, "15980": 1047, "15984": 1050, "15996": 1046, "15e": 93, "16": [2, 3, 8, 11, 14, 17, 25, 41, 48, 49, 52, 64, 72, 78, 93, 96, 141, 168, 190, 196, 197, 198, 215, 218, 219, 222, 223, 224, 231, 235, 236, 253, 261, 262, 263, 287, 302, 303, 305, 309, 315, 343, 352, 358, 375, 377, 386, 393, 414, 415, 418, 443, 458, 460, 472, 473, 479, 480, 498, 499, 503, 517, 535, 536, 571, 590, 596, 597, 608, 609, 640, 651, 652, 655, 656, 657, 658, 683, 684, 814, 819, 831, 880, 906, 914, 969, 970, 971, 982, 989, 993, 1003, 1008, 1011, 1015, 1020, 1029, 1032, 1034, 1036, 1037, 1041, 1042, 1044, 1045], "160": [234, 982, 1027], "1600": 48, "160030": 186, "16006": 1047, "1600x1600": 52, "16018": 1050, "16021": 1047, "16052385": 103, "16061": 1050, "16066": 1048, "16069": 1047, "16075": 1047, "16076": 1046, "16084": 1047, "16090": 1047, "16103": 1047, "16111": 1047, "16112": 1047, "16117": 1047, "161245": 52, "16132": 1047, "16144": 386, "16147": 377, "16149": 1047, "16159": [386, 1047], "1616": 474, "16182": 1047, "16183": 1047, "162": [56, 115, 134, 377, 1015], "16224": 1047, "1623": 17, "1624": 499, "16245": 1047, "16257": 1047, "1626": 1014, "16261": 1047, "16266": 1047, "16280": 1047, "16289": 1048, "163": [146, 278, 377, 1001], "163224": 186, "16323": 1047, "16326": [2, 1048], "16327": 2, "16328": 2, "16329": 2, "16330": 2, "16331": 1047, "16335": 1048, "16352": 1048, "16362": 1047, "16379": 2, "1638": 352, "16380": 2, "16381": 2, "16382": 2, "16383": 2, "16392": 1048, "16397": [1046, 1047], "164": 417, "164009": 262, "16401": 1047, "16403": 1047, "16431": 1047, "16437": 1047, "16442": 1047, "16443186": 994, "16449": 1049, "16451": 1047, "16466": 1047, "16484": 1047, "16493": 1048, "165": 994, "16500": 1046, "16505": 1046, "16508": 1047, "16530": 1048, "16531": 125, "16539": 1047, "16585": 1047, "166": [2, 56, 66, 302, 386, 993, 1015, 1036], "16605": 1050, "16619": 1048, "16622": 1047, "16625": 1048, "16632": 1047, "16655": 1047, "16663": 1047, "166667315173": 11, "16692": 1047, "16695": 1051, "167": [386, 1036], "16718": 1047, "16726": 1047, "16728": 1047, "16747": 1051, "16748": 1050, "168": [117, 134, 194, 216, 1015, 1036], "1680": 377, "16801": 1047, "16837": 1047, "16841": 1047, "16849": 1047, "1689": 352, "169": [56, 302], "16906": 1048, "1691": 989, "169106": 259, "1693": 905, "16935": 1048, "16948": 1050, "16950": 1047, "169504": 215, "16979946": 994, "1698": 650, "16981": 1047, "16985": 1048, "16993": 1047, "17": [6, 11, 17, 37, 50, 72, 78, 125, 150, 167, 196, 223, 230, 253, 262, 299, 309, 375, 378, 385, 397, 401, 402, 410, 414, 445, 462, 488, 498, 499, 501, 524, 532, 537, 541, 548, 550, 551, 556, 560, 561, 570, 571, 598, 629, 650, 658, 659, 660, 667, 670, 673, 675, 688, 693, 730, 731, 741, 762, 767, 785, 788, 790, 819, 843, 854, 869, 874, 875, 883, 885, 891, 907, 910, 913, 914, 915, 916, 943, 982, 983, 994, 996, 1003, 1011, 1032, 1034, 1036, 1037, 1038, 1039, 1042, 1045, 1050], "170": [42, 55, 56, 60, 230, 386], "1700": 48, "170087": 300, "17021": 1047, "17032": 1047, "17036": 1049, "17038": 1048, "170388": 994, "1706": 330, "17061": 1047, "17090": 1048, "17095": 1048, "171": [51, 146, 293, 297, 377, 386, 789, 993, 1015], "17107": 1048, "1714": 989, "17148": 1048, "17159": 1048, "17169": 1049, "17187": 1048, "17192": 1048, "17193": 1048, "172": [386, 494, 495, 650, 989], "17204": 1047, "17205": 1047, "17210": [11, 1047], "17225": 1048, "17226834": 51, "1723": 5, "17233": 1048, "17235": 1047, "17236387": 200, "17266": 1050, "17289014": 152, "1729": 168, "173": [62, 66, 386, 585, 1015], "17309": 1047, "17317": 1048, "17357": 1047, "17360": [6, 1047], "17367": 1048, "17370318": 212, "17374": 2, "17375": 2, "17376": 2, "17377": 2, "17378": 2, "17379": [2, 11, 1048], "1738": 993, "17386": 1048, "17388": 1052, "17396": 1048, "17397165": 322, "174": [121, 302, 386, 585], "17406": 1048, "17412": 1048, "17414": 1048, "17427": 1048, "17433": 1047, "17443": 1049, "17448": 1048, "1747": 168, "17474": 215, "17478": 1048, "17491": 1048, "17499": 1048, "175": [386, 1003], "17526": 1048, "175298": 262, "17546": 1048, "17569": 1048, "17578": 1048, "17598": 1048, "176": [252, 269, 276, 386, 838, 994, 1001, 1015], "17603": 1048, "17604": 1048, "17606": 1048, "17608": 1048, "17609": 1048, "17610": 1048, "17612": 1048, "17614": 1048, "17616": 1048, "17622": 1049, "17633": 1048, "17644": 1048, "17651": 1048, "17661": 1048, "17662": 1048, "17679": 1048, "17694": 1047, "177": [183, 386], "17702": 1048, "1771": 352, "17742": 1047, "17743": 1049, "17746": 1049, "17750": 1049, "17759": 1048, "17769": 1049, "17772": 1049, "17777": 1048, "17785": 1049, "178": [5, 337, 349, 377, 386, 511, 849, 1015], "178000": 307, "17804": 1048, "17812": 1047, "17819": 1050, "17826": 1048, "17833": 1048, "17848": 1047, "17856": 1048, "17864": 1048, "17876": 1048, "17878": 1048, "179": [377, 386, 417, 1036], "17914": 1047, "17928620": 374, "17932": 1048, "17935": 1048, "17937": 1048, "17959": 1047, "1797": [56, 87, 257, 302, 326, 377, 422, 446, 503, 533, 534, 535, 536, 600, 601, 689, 690, 691, 692, 694, 996, 1026], "17984": 1048, "17985": 1047, "17985197": 212, "17987": 1048, "17992": 1048, "17995": 1047, "17997": 1048, "17_760": 125, "17t14": 374, "18": [2, 5, 6, 17, 38, 42, 47, 51, 58, 60, 72, 100, 122, 158, 167, 208, 226, 231, 253, 259, 302, 309, 311, 323, 327, 346, 349, 351, 352, 353, 380, 386, 414, 415, 418, 448, 460, 493, 501, 502, 503, 505, 506, 511, 536, 537, 539, 541, 542, 558, 559, 560, 561, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 578, 579, 590, 595, 600, 601, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 647, 650, 659, 660, 672, 715, 719, 732, 735, 736, 742, 744, 761, 771, 798, 799, 822, 838, 861, 862, 863, 869, 875, 883, 884, 895, 905, 906, 913, 914, 915, 916, 917, 941, 942, 982, 991, 993, 1003, 1011, 1015, 1032, 1034, 1036, 1037, 1040, 1041, 1043, 1044, 1046, 1047], "180": [32, 45, 243, 244, 245, 248, 249, 292, 294, 296, 297, 341, 349, 386, 503, 1015], "1800": 48, "18000": [353, 375], "18010": 1049, "18016": 1047, "18020": 1051, "1804243": 374, "18052": 1048, "18094": 1051, "181": [4, 88, 91, 278, 302, 351, 386, 1015], "18114": 1048, "18121": 1048, "18124": 1048, "18149": 1048, "18167": 1048, "18170": 1050, "18176": 1048, "18197458": 362, "182": [149, 302, 386, 417], "18222": 1048, "18256": 1048, "18266": 1048, "18269": 1048, "18278": 1048, "18280": 1048, "18293": 1048, "18298": 1051, "183": [327, 386, 994, 1036], "18302": 1048, "18310": 1050, "18326": 1048, "18328": 1049, "18334": 1048, "18341": 1048, "18343": 1048, "18368": 1049, "18370": 1048, "18393": 1049, "18394": 1048, "184": [2, 197, 302, 386, 800, 1027], "18405": 1048, "18406": 1048, "18410": 1048, "18429": 1048, "18433": 1049, "18444": 1049, "18447": 1048, "18459": 1049, "1847": 5, "18482": 1050, "18488": 1052, "185": [51, 146, 158, 234, 241, 377, 386, 862, 863, 1015], "1850": [4, 375], "18508": 1048, "18510": 1048, "18525": 1048, "18527": 1048, "18528": 1048, "18543": 1049, "18545": 1048, "18555": 1054, "185654": 262, "18565811e": 1028, "185659": 186, "18595": 1048, "186": [146, 197, 302, 353, 386, 789, 993], "18607": 1048, "18612": 1048, "18622": 1048, "18639": 1048, "18649": 1049, "1865": 6, "18682": 1048, "18689": 1053, "18691": 1048, "187": [189, 216, 221, 224, 256, 259, 276, 386, 585, 994, 1015, 1027, 1038], "1871": 1008, "18723": 1052, "18736": 1049, "1874": 1008, "18746": 1048, "1875": 974, "18768": 1048, "188": [146, 154, 255, 276, 377, 386, 585, 1015], "1880": 386, "18805": 1051, "18815268": 240, "188153": 240, "18818427": 668, "18832": 1050, "18842": 1049, "18843": 1054, "18846": [375, 489, 490], "1887": 352, "18898": 1049, "189": [197, 386, 902, 1006], "18925": 1049, "189267": 262, "18959": 1049, "189631": 186, "18964": 1049, "18975": 1050, "189830": 320, "18987": 1048, "19": [2, 6, 11, 125, 134, 154, 167, 173, 174, 197, 201, 216, 220, 223, 248, 253, 309, 310, 327, 377, 378, 384, 394, 397, 401, 402, 410, 418, 421, 445, 493, 517, 518, 519, 537, 541, 542, 548, 550, 551, 558, 559, 560, 561, 565, 566, 567, 583, 590, 608, 649, 659, 660, 667, 668, 669, 672, 673, 675, 677, 679, 688, 708, 782, 786, 800, 801, 815, 828, 833, 834, 836, 837, 851, 852, 871, 882, 903, 907, 910, 913, 914, 915, 916, 982, 993, 1003, 1011, 1015, 1032, 1034, 1036, 1037, 1038, 1039, 1041, 1044, 1053], "190": [9, 101, 104, 121, 215, 268, 296, 375, 386, 499, 1015], "1900": 48, "19002": 1049, "19004": 1049, "19011": 1049, "19024": 1049, "19035": 1049, "1903908407869": 200, "19041": 1049, "19046": 1049, "19047631514961908949361222113": 11, "1905": [146, 377], "19052": 1049, "19055": 1049, "19069": 1049, "19075": 1051, "19085": 1050, "191": [109, 134, 386, 994, 1015], "19112072e": 178, "19126": 1048, "19145": 353, "19158": 1050, "19159": 1049, "19162": 1049, "19172": 1049, "19174891": 301, "19179": 1048, "19182": 1048, "19198": 1049, "192": [121, 386, 1036], "19210": 1049, "19211": 1048, "19234": 1048, "19244": 1049, "19263": 1049, "19271": 1048, "19278": 1049, "192913": 262, "192938": 11, "19296": 1049, "19297": 1049, "193": [386, 417, 716, 787, 1006], "19308": 1048, "1931": 78, "19310": 1049, "19317": 154, "19336": 1049, "19346747e": 1028, "193548": 215, "19356": 1049, "1936": 377, "19365": 1049, "19390": 1049, "19391": 1049, "193949": 262, "194": [142, 147, 244, 245, 250, 302, 1015], "1940": 215, "19401": 1049, "19407": 1048, "19411": 1049, "19415": 1049, "19417": 1048, "194239": 386, "19426": 1049, "19428": 1049, "19438": 1050, "19459": 1049, "19472": 1049, "19473": 1049, "1948": 17, "19483": 1049, "19490": 1050, "19491": 1049, "19499": 1049, "195": [494, 495], "1950": [377, 993], "1951": 215, "195133": 386, "19520": 1049, "19522393": 212, "19527": 1049, "19564": 1049, "19568": 1049, "19571": 1049, "19579": 1048, "1958": [154, 415, 417, 533], "19580": 1048, "196": [902, 1006], "1960": [628, 717], "19616": 1049, "19631": 1049, "1964": [691, 695, 881, 893, 990], "19641": 1049, "19643": 1049, "19646": 1048, "19659": 1048, "19662693": [845, 846], "19664": 1052, "19669": 1049, "196795181": 11, "19680": 1050, "196861": 186, "19689": 1050, "197": [336, 349, 1015], "19703": 1048, "1972": 377, "19721": 1048, "19727": 1048, "1973": [377, 407], "19732": 1048, "19733": 1049, "19734": 1049, "1974": [410, 418, 711], "19747": 1050, "1975": 996, "19752": 1049, "19766": 1049, "197666": 262, "1977": 636, "1978": [215, 989], "19784": 1049, "19788": 1049, "1979": [410, 726, 770], "19790": 1049, "19794": 1050, "19799": 1049, "198": 1036, "1980": 377, "19803308": 83, "1981": [215, 989], "19829832": 212, "1983": [410, 732, 885], "19836": 1049, "1984": [78, 79, 412, 475, 913, 914, 1009], "19847": 1048, "1985": [167, 410, 706, 716, 787], "1986": [983, 1009], "19869": 1049, "1987": [410, 608, 609, 793, 794], "198766": 262, "19879": 1049, "1988": 377, "19883": 1049, "19888": 1048, "1989": [268, 636, 789, 862, 863, 989, 996], "199": [648, 792, 1008], "1990": 375, "19906": 1049, "19908": 1049, "1990a": 407, "1991": [517, 518, 519], "19916": 1050, "1992": [146, 375, 377, 414, 417, 568, 569, 646, 989], "19922": 1048, "19924": 1048, "1993": [146, 377, 475, 665, 686, 687, 1009], "19934": 1049, "19939": 1048, "1993apr6": 68, "1994": [146, 375, 377, 645], "19948": 1049, "1995": [146, 259, 377, 407, 417, 554, 555, 835, 902, 994], "1996": [25, 125, 410, 417, 421, 445, 517, 518, 519, 556, 557, 1003], "1997": [110, 375, 415, 417, 536, 555, 691, 695, 989, 990, 993], "1998": [125, 259, 375, 377, 415, 417, 556, 557, 835, 840, 871, 994, 995, 997, 1003, 1007], "19982": 1048, "1999": [157, 375, 407, 410, 412, 415, 417, 438, 451, 458, 470, 475, 535, 542, 556, 557, 560, 561, 724, 899, 907, 908, 910, 911, 999, 1005], "19th": 410, "1_": 1003, "1_000": [3, 25, 32, 46, 70, 98, 125, 149, 154, 156, 168, 230, 256, 323, 346, 409, 538, 540, 702, 800, 823, 824, 832], "1d": [110, 112, 164, 168, 198, 230, 284, 287, 296, 297, 310, 323, 345, 358, 380, 387, 389, 393, 394, 411, 416, 465, 468, 618, 631, 634, 654, 658, 661, 664, 685, 704, 713, 714, 720, 730, 731, 735, 739, 743, 784, 785, 788, 797, 847, 848, 849, 850, 851, 853, 855, 856, 857, 870, 921, 925, 926, 956, 980, 994, 1015, 1020, 1027, 1036, 1041, 1042, 1043, 1045, 1049, 1050, 1054], "1dlabel": 382, "1e": [3, 4, 5, 8, 15, 24, 44, 93, 146, 149, 152, 154, 155, 156, 157, 158, 161, 167, 177, 190, 197, 198, 204, 211, 215, 221, 226, 232, 237, 243, 246, 249, 257, 267, 270, 301, 312, 318, 321, 330, 337, 339, 346, 351, 386, 422, 444, 448, 453, 460, 463, 472, 473, 479, 483, 484, 485, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 560, 561, 562, 563, 593, 598, 607, 609, 610, 612, 614, 615, 616, 620, 621, 623, 624, 626, 628, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 690, 691, 692, 693, 694, 695, 696, 729, 786, 798, 799, 815, 840, 841, 842, 843, 844, 845, 846, 854, 862, 863, 870, 900, 901, 905, 906, 907, 908, 909, 910, 911, 979, 982, 993, 997, 1001, 1003, 1007, 1025, 1029, 1044, 1049, 1050, 1051], "1e0": [149, 232, 249, 267, 982], "1e1": [149, 155, 197, 232, 339], "1e15": 158, "1e2": [8, 149, 156, 232, 249, 339, 747], "1e3": [4, 5, 8, 149, 155, 161, 232, 270, 321, 982, 1025], "1e4": [270, 660, 680, 899, 1005], "1e5": [4, 154, 178, 180, 187, 270, 614, 615, 616, 620, 621, 623, 624, 626, 894, 899, 1005, 1025, 1027], "1e6": [6, 8, 190, 230, 351, 353, 366, 537, 899, 993, 1005], "1e7": 386, "1er": 418, "1f": [11, 18, 48, 51, 96, 177, 197, 230, 243, 245, 266, 315, 322, 352, 353], "1gb": 366, "1kastner": 1043, "1m": 959, "1mb": [367, 1041], "1mo": 154, "1nn": 377, "1or": 418, "1px": 302, "1qlettinn8oi": 351, "1st": [0, 2, 58, 88, 157, 198, 310, 883, 884], "1x4": 418, "1x5": 418, "1x6": 418, "1z": 418, "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 136, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 167, 168, 169, 170, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 377, 378, 380, 382, 384, 385, 386, 387, 389, 392, 393, 394, 397, 400, 401, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 483, 484, 485, 486, 494, 497, 501, 502, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 585, 586, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 704, 705, 706, 707, 708, 709, 712, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 764, 765, 768, 769, 770, 772, 774, 775, 776, 777, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 920, 921, 922, 923, 925, 926, 927, 931, 934, 940, 941, 942, 943, 944, 945, 946, 947, 948, 954, 955, 956, 957, 958, 959, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1054], "20": [2, 5, 6, 9, 11, 13, 17, 23, 24, 25, 31, 32, 37, 38, 40, 41, 44, 45, 48, 52, 53, 59, 65, 76, 80, 90, 93, 100, 102, 111, 115, 118, 119, 122, 126, 130, 131, 133, 138, 141, 142, 143, 146, 155, 159, 166, 168, 169, 179, 186, 187, 189, 193, 194, 196, 197, 198, 201, 206, 209, 210, 211, 212, 214, 221, 230, 236, 245, 247, 248, 253, 259, 260, 262, 263, 265, 270, 271, 274, 278, 283, 287, 288, 289, 290, 291, 294, 302, 309, 310, 311, 316, 317, 318, 319, 321, 326, 327, 330, 336, 338, 342, 344, 348, 352, 353, 354, 358, 359, 373, 377, 378, 380, 382, 384, 385, 386, 397, 401, 402, 410, 417, 418, 442, 447, 448, 450, 465, 466, 470, 472, 473, 479, 489, 490, 491, 492, 493, 495, 497, 498, 501, 503, 505, 506, 512, 513, 516, 517, 524, 532, 537, 538, 543, 546, 547, 549, 553, 556, 557, 560, 561, 562, 563, 564, 570, 571, 583, 590, 591, 593, 595, 598, 600, 630, 631, 646, 650, 659, 667, 668, 669, 677, 679, 697, 705, 709, 714, 717, 726, 727, 740, 757, 758, 768, 793, 794, 798, 799, 800, 801, 815, 827, 828, 829, 832, 834, 837, 838, 839, 842, 843, 850, 851, 862, 863, 864, 865, 867, 869, 870, 878, 879, 880, 881, 886, 900, 901, 903, 904, 909, 912, 917, 923, 925, 926, 929, 971, 982, 989, 993, 996, 999, 1000, 1003, 1006, 1011, 1015, 1017, 1018, 1021, 1027, 1031, 1032, 1034, 1036, 1042, 1045, 1048, 1050, 1051], "200": [31, 32, 42, 48, 52, 58, 73, 96, 111, 122, 129, 153, 183, 192, 196, 198, 201, 202, 203, 209, 214, 216, 219, 232, 238, 243, 260, 266, 268, 269, 305, 308, 328, 338, 339, 359, 362, 375, 382, 392, 415, 417, 422, 441, 455, 469, 472, 473, 523, 534, 535, 536, 539, 540, 541, 544, 548, 585, 650, 652, 672, 680, 693, 815, 862, 863, 903, 907, 908, 909, 910, 911, 1008, 1015], "2000": [13, 24, 38, 48, 73, 94, 100, 173, 246, 249, 259, 278, 299, 319, 352, 375, 377, 410, 411, 417, 422, 453, 463, 534, 535, 560, 690, 692, 694, 744, 789, 798, 851, 881, 893, 990, 993, 999, 1005, 1020, 1028], "20000": [17, 95], "200000": [215, 870], "20002": 1049, "2001": [25, 154, 169, 253, 258, 406, 410, 417, 438, 452, 453, 454, 463, 512, 560, 561, 565, 566, 629, 635, 640, 646, 692, 697, 736, 789, 886, 898, 930, 983, 985, 989, 993, 999, 1001, 1003, 1005, 1008], "2002": [61, 407, 410, 417, 438, 449, 594, 595, 727, 757, 852, 900, 985, 993], "20023": 1049, "2003": [10, 406, 410, 415, 418, 452, 453, 463, 514, 516, 690, 694, 840, 842, 989, 990, 995, 1005, 1044], "20030": 1049, "20031": 1050, "2004": [3, 146, 259, 278, 375, 377, 410, 412, 415, 474, 536, 608, 609, 690, 694, 706, 744, 784, 901, 987, 989, 990, 995, 1008, 1027], "2005": [23, 25, 79, 377, 407, 438, 440, 854, 989, 996, 1006], "20056": 1049, "2006": [9, 296, 375, 417, 420, 463, 499, 558, 559, 566, 567, 611, 612, 615, 620, 623, 650, 667, 668, 742, 789, 790, 798, 840, 898, 915, 916, 989, 993, 995, 998, 1005, 1006], "2007": [0, 36, 185, 375, 410, 419, 441, 453, 455, 461, 463, 567, 657, 692, 718, 735, 738, 759, 760, 796, 985, 989, 991, 993], "20072": 1049, "2008": [10, 412, 414, 415, 479, 535, 564, 591, 646, 665, 686, 687, 693, 717, 727, 757, 835, 840, 844, 861, 987, 990, 991, 993, 994, 995, 998, 999, 1008], "20087": 1049, "2009": [109, 112, 113, 124, 181, 410, 414, 415, 417, 418, 520, 521, 529, 532, 538, 539, 541, 542, 545, 548, 554, 560, 561, 636, 672, 680, 697, 836, 913, 914, 941, 942, 989, 993, 994, 1000, 1009], "200_000": [870, 1052], "200j": 138, "200m": 375, "200x": 1036, "201": [121, 146, 377, 585], "2010": [0, 45, 65, 77, 168, 264, 265, 406, 410, 412, 414, 415, 423, 476, 537, 705, 709, 720, 721, 741, 830, 862, 863, 985, 989, 993, 997, 1007, 1012, 1036], "2011": [0, 45, 168, 219, 386, 415, 418, 536, 539, 541, 542, 548, 591, 628, 639, 659, 731, 983, 997, 1007, 1012, 1036], "20117": 1049, "2012": [0, 79, 407, 417, 556, 557, 564, 640, 744, 982, 986, 993, 1012, 1036], "2013": [0, 173, 377, 410, 414, 415, 537, 727, 757, 985, 993, 1012, 1037, 1038], "2014": [0, 50, 374, 403, 415, 417, 420, 531, 608, 609, 623, 624, 659, 693, 862, 863, 941, 942, 990, 997, 1018, 1039], "20145": 1050, "2015": [0, 168, 374, 709, 722, 724, 725, 862, 863, 993, 1000, 1018, 1040, 1041], "201520": 186, "20155": 1049, "20159": 1049, "2016": [0, 223, 374, 410, 982, 1041, 1042], "20161": 1049, "20165": 1049, "2017": [0, 259, 374, 407, 410, 421, 445, 993, 1042, 1043], "2018": [0, 197, 215, 418, 451, 982, 993, 1011, 1018, 1043, 1044], "2019": [0, 168, 378, 410, 453, 463, 693, 990, 993, 1000, 1003, 1044, 1045, 1046], "2020": [0, 375, 1046, 1047, 1048, 1049], "20200": 1049, "20207": 1049, "20209": 1049, "2021": [0, 378, 380, 672, 1048, 1049], "2022": [0, 367, 417, 706, 1003, 1050, 1051], "2023": [0, 392, 403, 407, 1051, 1052], "20231": 1049, "2024": 1053, "20240": 1049, "20250": 1049, "20272": 1049, "20297": 1049, "203": 51, "20312": 1049, "203174": 186, "20326": 1049, "20331": 1051, "2034": [351, 375], "20380": 1049, "20385": 1049, "2039": 262, "204": [1001, 1006], "20408": 1050, "20415": 1051, "20416": 1049, "20431": 1049, "20477": 1049, "20512": 1049, "20515": 1049, "20521": 1049, "20524": 1052, "20526": 1049, "20528": 1049, "20531": 1049, "20534": 1049, "20552": 1049, "20554": 1049, "20560": 1049, "20567": 1050, "20583": 1049, "20597": 1049, "206": [83, 85, 1015], "20617": 1051, "20619": 1049, "20638": 1049, "20640": [115, 162, 375, 491], "20652": 1049, "20653": 1050, "20657": 1049, "20673": 1049, "20683": 1049, "207": [302, 1036], "2071716": [845, 846], "20727": 1049, "20729": 1049, "20752": 1049, "2075215": 212, "20753": 1050, "20761": 1049, "207667": 262, "2079": 264, "208": [146, 283, 377], "20802": 1051, "20803": 1050, "20811": 1050, "20842": 1049, "20843": 1049, "20860": 1050, "20880": 1049, "208864": 186, "20899": 1049, "209": [742, 881], "20904": 1049, "20959": 1049, "20960": 1049, "20961": 1049, "20_000": 283, "20new": [375, 1029], "20newgroup": [28, 164, 175, 189, 213, 216, 302, 490, 572, 659, 831, 834, 989, 1015], "20news_hom": 375, "20newsgroup": [212, 373, 1036], "20th": 709, "21": [2, 11, 71, 146, 167, 186, 198, 215, 223, 248, 253, 283, 302, 307, 309, 321, 352, 377, 378, 382, 384, 397, 406, 417, 418, 442, 446, 475, 479, 530, 533, 562, 563, 564, 570, 571, 589, 590, 592, 628, 670, 688, 755, 801, 803, 815, 828, 871, 878, 880, 886, 903, 919, 941, 985, 989, 994, 1003, 1011, 1032, 1034, 1036, 1037, 1039, 1043, 1044, 1046], "210": [71, 74, 1015], "2100": [48, 318], "2102": 545, "21020": 1051, "21026": 1050, "21032": 1050, "21038": 1050, "2107": [6, 264], "21078": 1050, "21079": 1050, "21080": 1049, "21086": 1050, "21093": 1049, "211": [264, 320, 329, 352, 881, 893], "2110": 6, "21109": 1050, "21114": 1050, "211217613": 1044, "21130": 1049, "21145": 1049, "21148": 1050, "2117": 330, "21177": 1050, "21179": 1049, "2119": 6, "21194": [44, 1049], "21195": 1049, "21199": 1049, "212": [121, 146, 168, 264, 329, 377, 470, 501, 999, 1027], "21219": 1050, "212197e": 215, "2123": 6, "21243": 44, "21251": 1049, "2126": 236, "21271": 1049, "21278": 1050, "21295": 1049, "21298": 1050, "21301203": 152, "213056e": 215, "21310": 1050, "21316": 1050, "21330": 1050, "21334": 1050, "21336": 1049, "21340": 1049, "21341": 1050, "21351": 1049, "21389": 1049, "2139": [197, 215], "214": [150, 585], "21408": 1050, "21425": 1050, "21430": 1050, "21432": 1050, "21434": 1050, "21436": 1050, "21443888": 212, "21445": 1050, "21448": 1050, "21469": 1051, "21481": [1049, 1050], "21482": 1050, "21493": 1049, "215": [274, 276, 585, 1015], "21517": 1049, "21534": 1050, "21542": 1050, "21544347": 10, "21552": 1049, "21565": 1050, "2156660": 322, "21567": 1050, "21569": 1050, "21573": 1050, "21576": 1050, "21578": [6, 1049], "2159048": [654, 664, 685], "216": 1006, "21606": 1050, "21616": 742, "21617": 1050, "21632": 1050, "21694": 1049, "217": [536, 542, 800], "21701": 1050, "21705": 1050, "2171": 5, "21713": 1050, "21724": 1050, "2173": [185, 657, 989], "21735": 1050, "21741": 1049, "21762": 1050, "21767": 1050, "2179": 6, "218": [377, 472, 716, 787], "2180": 17, "21800": 1050, "21805": 1050, "21807": 1053, "21808": 1050, "21809": 1052, "21814": 1050, "21832": 1050, "21833": 1049, "21837": 1050, "21845": 1049, "21871": 1049, "21873": 1050, "21880": 1050, "21881": 1050, "21888": 1050, "218997": 186, "219": [258, 261, 276, 1015], "21901": 1050, "21915": 1049, "21917": 1049, "2192": [185, 657, 989], "21938": 1051, "21954": 1050, "21987": 1050, "21988": 1050, "21991": 1049, "21998": 1050, "22": [2, 6, 11, 40, 90, 113, 114, 116, 130, 134, 161, 162, 164, 167, 168, 169, 171, 214, 236, 239, 248, 253, 256, 268, 276, 278, 279, 285, 302, 305, 309, 314, 317, 320, 321, 322, 323, 324, 327, 330, 353, 380, 384, 385, 397, 406, 438, 449, 473, 479, 489, 490, 496, 497, 505, 516, 525, 532, 538, 543, 546, 547, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 595, 610, 628, 629, 633, 635, 646, 648, 652, 654, 656, 659, 660, 662, 664, 666, 670, 689, 693, 703, 705, 714, 758, 770, 779, 784, 785, 789, 801, 802, 806, 815, 820, 822, 825, 826, 827, 828, 829, 830, 831, 832, 849, 851, 853, 855, 856, 857, 862, 863, 864, 866, 869, 885, 896, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 936, 937, 985, 993, 1003, 1011, 1015, 1032, 1034, 1036, 1039, 1044, 1047, 1049], "220": [42, 253, 1036], "2200": [48, 375, 494], "22002": 1050, "22014": 1051, "22015": 1050, "22016": 1050, "22027": 1050, "220446049250313e": [472, 473, 479, 651, 652, 655, 656, 657, 683, 684], "22050": 1049, "22054": 1051, "22058": 1050, "22059": 1050, "22062": 1050, "22063": 1050, "22064": 1050, "22065": 1050, "221": [83, 97, 104, 128, 141, 147, 253, 306, 313, 1015, 1039], "22106": 1050, "22108": 1050, "2211": 635, "22111": 1050, "22114": 1050, "22118": 1050, "22119": 1050, "22120": 1050, "22137": 1050, "22148": 1050, "22149": 1050, "22150": 1050, "22154": 1050, "22159": 1050, "22181": 1050, "22188": 1050, "22191": 1050, "22199": 1050, "222": [83, 128, 330, 1008], "22203": 1050, "22206": 1050, "22212": 1050, "22215": 1050, "22217": 1050, "22218": 1050, "2222": 657, "22223": 1050, "22235": 1050, "22237": 1050, "2224": 1038, "22240": 1050, "22248": 1050, "22249": 1050, "22254": 1050, "22255": 1050, "22268": 1051, "22269": 1051, "22284": 1050, "22288": 1050, "223": [83, 128, 146, 377], "2230": 6, "22300": 1050, "2231": 6, "22314355": 591, "22318": 1050, "22320": 1050, "2234": 6, "2235": 6, "22356": 1050, "22361": 377, "22370": 1050, "223745": 197, "224": [51, 59, 66, 83, 128, 410, 726, 823, 1015], "22409": 1052, "22410": 1050, "22412": 1050, "22438": 392, "2246": 215, "22476": 1050, "22486": 1050, "22493": 1050, "22498": 1050, "225": 417, "2250": 6, "22504": 410, "22506": 1052, "22508": 1050, "22518": 1051, "2252": 6, "22525": 1050, "22526": 1050, "22527": 1051, "22537": 1050, "22548": 1050, "22553": 1050, "22554": 1051, "22562": 1051, "22566": 1050, "2257": [6, 1029], "22578": 1050, "225806": 215, "2259": 6, "22595": 1050, "226": [349, 410, 421, 445], "2260": 6, "22604": 1050, "22629": 1051, "2263": 6, "22635": 1050, "2264": 6, "22665": 1051, "22685": 1050, "22687": 1050, "22692": 96, "22694": 1050, "22695": 1050, "22696": 1050, "22697": 1050, "227": [157, 159, 259, 410, 726, 1015], "22710": 1051, "22735": 1050, "22747343e": 78, "22775": 1050, "22784907": 828, "22806": 1050, "22808": 1050, "22830": 1050, "2284": 168, "22856": 1050, "2286": [6, 375], "22866": 1050, "22868": 1050, "2287": [6, 375], "2288": 375, "2289": 6, "22891": 1050, "22898": 1051, "22899": 1050, "229": 993, "22908": 1050, "2291": 6, "22913": 1050, "22950": 1050, "22953": 1050, "22965": 1051, "22968": 1051, "22982": 1050, "22993": 1051, "22nd": 440, "22publish": 384, "22wheel": 384, "23": [2, 6, 17, 24, 32, 48, 96, 125, 127, 146, 164, 178, 197, 205, 216, 223, 228, 238, 240, 248, 253, 302, 309, 314, 317, 318, 319, 321, 322, 324, 327, 377, 378, 386, 397, 401, 402, 417, 423, 433, 441, 448, 453, 455, 463, 466, 468, 469, 476, 479, 480, 481, 483, 484, 485, 491, 493, 501, 502, 503, 505, 506, 511, 513, 515, 523, 525, 539, 540, 541, 544, 548, 555, 557, 559, 561, 562, 563, 566, 569, 570, 571, 608, 609, 612, 628, 631, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 676, 679, 680, 681, 682, 718, 731, 779, 831, 837, 838, 839, 848, 856, 863, 866, 878, 885, 893, 894, 903, 906, 908, 911, 914, 916, 923, 925, 926, 936, 937, 942, 993, 1011, 1015, 1032, 1034, 1036, 1037, 1043, 1044, 1045, 1048], "230": 585, "2300": [48, 186], "23023": 1050, "23033": 1050, "23034": 1050, "23036": 1050, "23038": 1051, "23040": 1050, "23046": 1050, "23047": 1050, "23077": 1050, "23079": 1050, "23095": 1050, "23097": 1050, "23098": 1050, "23099": 1052, "231": [9, 296, 375, 410, 421, 445, 499, 585], "23101": 1051, "23113": 1050, "23115": 1050, "23127": 1051, "23139": 1051, "23149": [375, 498, 1050], "23194": 1050, "23197": 1051, "23198": 1050, "232": [253, 993], "23210": 1051, "23214": 1050, "23226524": 322, "2323": [690, 694, 990], "23252": 1051, "23256": 1050, "23264": 1050, "23271": 1050, "23273": 1050, "23275": 1051, "2328": 254, "23299": 1050, "2331": [2, 6], "23317": 1053, "2332": 2, "2333": [2, 6], "2334": 2, "2335": 2, "23358": 1050, "2336": 386, "23370": 1050, "2339": 6, "23395": 1050, "233mb": [4, 1025], "234": [51, 191, 216, 220, 224, 840, 844, 862, 863, 995, 1015], "2340": 6, "2341": 525, "23410": 1050, "234137": 186, "23442": 1051, "23446": 1051, "23461": 1051, "23470": 1051, "23471": 1050, "23480": 1051, "235": 311, "235430": 262, "23548": 1050, "2357juan": [1050, 1051, 1052], "23585": 1051, "23595": 1052, "23604": 1051, "23608": 1050, "23619": 1051, "23636": 1050, "23637": 1051, "23668876": [654, 664, 685], "236720": 186, "23683": 1051, "23689075": [654, 664, 685], "237": 1027, "23726": 1051, "23731": 1052, "23734": 1051, "237703": 186, "23773583": 78, "23786125": 193, "23798": 1051, "238": [230, 359, 361, 1015], "23819": [1051, 1052], "23833": 1050, "23834": 1051, "23865": 1051, "23874": 1051, "238744": 186, "23877": 1051, "238955": 262, "239": 1036, "23905": 1051, "23935": 1051, "23977": 1051, "23990": 1050, "23993": 1051, "24": [2, 3, 6, 11, 64, 125, 143, 146, 164, 168, 173, 181, 216, 237, 253, 271, 276, 283, 314, 315, 316, 318, 320, 321, 322, 324, 326, 327, 378, 380, 384, 397, 401, 402, 410, 417, 418, 438, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 461, 463, 465, 470, 471, 472, 473, 474, 475, 476, 477, 490, 491, 492, 493, 497, 505, 516, 517, 518, 519, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 614, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 699, 700, 701, 703, 709, 715, 728, 747, 754, 798, 799, 801, 804, 805, 815, 822, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 866, 868, 869, 870, 871, 874, 875, 877, 879, 880, 881, 882, 883, 885, 895, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 936, 937, 941, 968, 974, 982, 1000, 1003, 1011, 1015, 1032, 1034, 1036, 1044, 1045, 1046, 1047, 1049], "240": [2, 11, 42, 1001, 1036], "2400": 48, "24000": 521, "24015": 1050, "24017": 1050, "24027": 1052, "24051": 1051, "24058": 1051, "24075": 1051, "24076": 1052, "24083": 1052, "24084": 1051, "24087": 1050, "241": [13, 295, 297, 417, 568, 569, 1015], "2410": 545, "24140": 1052, "24141": 1051, "24145": 1052, "24146": 1051, "24160": 320, "242": [885, 1036], "24218": 1051, "24230": 1052, "24245": 1051, "24258": 1051, "24264": 1051, "24283": 1051, "243": 585, "2431": 476, "24317": 1051, "24338": 1051, "24350": 1051, "24354": 1051, "24365": 1051, "243802": 300, "244": [278, 585], "24404831511191221642141021252626109": 11, "24405": 1051, "2441": 215, "24412": 1051, "24421": 1051, "24433": 1051, "24446": 1050, "244466": 240, "24465": 1051, "2449": 386, "245": [1005, 1038], "24512": 1051, "24523": 1051, "24528": 1051, "24538": 1051, "24539": 1051, "24543": 1051, "24556": 1051, "24568": 1052, "245961": 122, "245mb": 353, "246": [181, 1001, 1036], "24617": 1051, "2463": 989, "24630": 1051, "24631": 1050, "24637": 1051, "24640578": 78, "24645": 1051, "24667": 1051, "24668": 1052, "24677": 1052, "24683": 1051, "24688": 1051, "24699": 1051, "247": [23, 26, 885, 1015], "24714": 1051, "24747": 1051, "24750": 1051, "24755": 1051, "24767": 1051, "24769": 1052, "24838": 1053, "24849": 1051, "24855": 1051, "24856": 1051, "24871": 1052, "24873": 1051, "2487575": 173, "2487591": 173, "24882": 1052, "24889": 1051, "24894": 1051, "249": [232, 354], "24935": 1052, "24951": 1051, "25": [2, 3, 4, 5, 7, 8, 9, 11, 17, 22, 24, 40, 43, 52, 53, 78, 83, 89, 100, 102, 113, 122, 134, 142, 143, 150, 161, 167, 177, 187, 201, 223, 226, 245, 253, 259, 261, 276, 296, 299, 302, 305, 307, 320, 326, 327, 351, 359, 362, 366, 386, 414, 417, 418, 421, 445, 478, 482, 502, 505, 522, 571, 598, 619, 679, 735, 797, 818, 831, 857, 875, 880, 882, 883, 886, 894, 895, 897, 898, 939, 943, 974, 989, 993, 994, 996, 1003, 1015, 1025, 1036, 1038, 1044, 1047], "250": [8, 63, 122, 173, 218, 494, 693, 823, 982, 1005, 1043], "2500": 993, "25000": 40, "2501": [146, 377], "25044": 1052, "250639": 186, "25067": 1051, "25077": 1051, "25080": 1051, "25089": 1051, "25093": 1052, "25094": 1051, "251": [146, 220, 377], "25102": 1052, "25120": 1052, "25129": 1051, "25147": 1051, "25163598": 388, "25172": 1051, "25174": 1051, "25177": 1052, "25183501383331797": 267, "25186": 1052, "25188": 1051, "25190": 1052, "25193977": 994, "25196": 1052, "252": [146, 220, 377, 535, 881, 893], "25209": 1052, "25214": 1052, "25220": 1052, "25232": 1052, "25250": 1051, "25251": 1052, "25257": 1052, "25274": 1051, "25275": 1053, "25291": 1052, "25291366": 362, "25294": 1052, "25295": 1051, "25296": 1051, "25297": 1052, "25299": 1052, "253": [121, 535], "25308": 1052, "25312": 1051, "25334": 1052, "25341": 1051, "253445": 122, "25349312e": 178, "2535": [470, 475], "25354": 1051, "2536": 477, "25363": 1051, "25367": 1052, "25370": 1051, "25387": 1052, "25402": 1052, "25417": 1052, "25432": 1052, "25438": 1052, "25443": 1052, "25477": 1051, "2548": 193, "25490": 1052, "25499205": 537, "255": [46, 96, 120, 134, 283, 301, 311, 318, 375, 417, 494, 495, 562, 563, 1015], "25500": 1051, "25506": 1052, "25511": 1051, "25531": 1052, "25563": 1051, "25570": 1051, "25587": 1052, "25589": 1051, "256": [40, 46, 51, 121, 311, 367, 375, 410, 417, 450, 469, 538, 547, 564, 861, 893, 903, 1029, 1050], "25601": 1052, "25619": 1051, "25629": 1052, "25638": 1051, "25659": 1052, "25664": 1051, "25672": 1052, "25677": 1052, "2568": 1045, "25694": 1051, "25697": 1052, "257": [220, 257], "25704": 1051, "25713": 1052, "25719016": 994, "25732": 1052, "25733": 1052, "25744": 1051, "25747": 1051, "25752": 1052, "25774": 1051, "25784": 1052, "2579": 693, "258": 220, "25805": 1052, "25813": 1052, "25814": 1052, "25815": 1052, "259": [9, 195, 216, 220, 296, 375, 417, 499, 568, 569, 1015], "259031": 186, "259297": 186, "25931": 1052, "25956": 1052, "25973": 1052, "25987": 1052, "25991": 1054, "25th": [2, 236, 883], "26": [2, 44, 52, 78, 95, 154, 167, 235, 241, 253, 272, 311, 313, 327, 386, 571, 649, 730, 784, 823, 881, 893, 942, 993, 1003, 1015, 1036, 1039, 1040, 1048, 1054], "260": [253, 258, 1049], "26019": 1052, "26021": 1052, "26033": 1052, "2605": 693, "26082": 1052, "26093": 1052, "26106": 1052, "26108": 1052, "26113448": 143, "26120": 1054, "26121": 1052, "26163": 1053, "26194": 1052, "262": [102, 104, 1015, 1036], "26207": 1052, "26242": 1052, "26243": 1053, "26253567e": 78, "26264": 1052, "26267": 1053, "26278": 1053, "26286": 1052, "26286057": 212, "26289": 1052, "26299": 1053, "26315": 1053, "26316": 154, "26318": 1052, "26323": 1052, "263234": 240, "26323428": 240, "26325": 1052, "26333": 1052, "26337": 1052, "26362917": 212, "26366": 1053, "263758": [584, 588], "26376": 1052, "26385": 1052, "26386": 1052, "26386883": 152, "26391": 1053, "2640": 836, "26400": 1052, "26410": 1053, "26411": 1053, "26416": 1052, "26424": 1052, "26433": 1052, "26454": 1052, "26459": 1053, "26464": 1053, "26466": 1052, "265": [736, 840, 844, 995], "26503": 1052, "26506": 1053, "26521": 1052, "2652124": 816, "26525": 1053, "26551": 1052, "26566": 1052, "26579": 1052, "26593496": 212, "26600": 1052, "26602": 1052, "26616": 1053, "26634": 1053, "26642044": 667, "26644": 1052, "26648": 1053, "26653": 1052, "26657": 1052, "2666": 993, "2667": 499, "26674": 1053, "26683": 1053, "267": [208, 216, 1015, 1036], "2671": 1003, "26721": 1053, "26734": 1053, "26736": 1053, "26744": 1053, "26748": 1052, "2675": 5, "26754": 1052, "26760": 1052, "26765": 1053, "267703": 52, "26772": 1052, "26786": 1053, "26789": 1053, "268": [230, 253, 273], "26814": 1052, "268147": 262, "26828": 1053, "26830": 1053, "26831": 1053, "26837": 1054, "26840": 1053, "26855": 1053, "26862": 1053, "26893": 1052, "26896": 1053, "269": 512, "26903": 1052, "26909": 1053, "26913": 1052, "2692": 1003, "26931": 1052, "26934744": 103, "26940": 1052, "26944": 1053, "26957": 1053, "26th": [410, 727, 757, 993], "27": [2, 4, 11, 17, 29, 45, 52, 96, 104, 236, 253, 326, 327, 347, 377, 410, 418, 518, 525, 606, 714, 789, 790, 886, 906, 993, 1003, 1015, 1028, 1036, 1038], "270": [181, 244, 327], "27000": 215, "27002": 1052, "27005": 1053, "27006": 1053, "27017": 1053, "27018": 1053, "27044": 1052, "27054655": 212, "27058": 1053, "27098": 1053, "27100": 1053, "27104": 1053, "27110": 1053, "27137": 1053, "27139": 1053, "2714": 236, "271411": 240, "27161": 1053, "27161955": 143, "27166": 1053, "27167": 1052, "27179": 1053, "27185": 1053, "27204": 1053, "27219": 1053, "272214": 585, "27239": 1053, "27240": 1053, "27243": 1052, "27250": 1053, "27252": 1053, "2727": 559, "27274": 1053, "27277": 1053, "27291": 1053, "27292": 1052, "273": [281, 282, 300, 303, 1015], "27301": 1053, "27308": 1053, "27309": 1053, "27311": 1052, "27314": 1053, "27315": 1053, "27328": 1053, "27336": 1053, "2734": 386, "27344": 1054, "27372": 1053, "27381": 1055, "27389": 1053, "274": 512, "27417": 1053, "27431": 1053, "27438": 1053, "27456": 1054, "27468": 1052, "27478": 1053, "27490": 1053, "27491": 1054, "27499706": 10, "275": [2, 13, 327, 1039], "27500": 1053, "27526": 1054, "27538": 1053, "27544": 1053, "27556": 1053, "27558": 1053, "27560": 1054, "27566": 1054, "275706": 52, "27573": 1052, "27576": 1054, "27577": 1053, "27580": 1052, "27583": 1052, "27584": 1054, "275851": 240, "2759": [897, 898], "27597342": 83, "276": [259, 351], "27601": 1053, "27614": 1053, "27624": 1053, "2763": [423, 476], "27636": 1054, "27645": 1053, "27650": 1053, "27651": 1053, "27657": 1054, "27668": 1053, "27670": 1053, "27675": 1053, "27678": 1053, "277": [177, 216, 1001, 1015, 1038], "27700": 1054, "27702": 1053, "27710": 1053, "27718": 1053, "27720": 1053, "27721": 1053, "27734": 1053, "27736": 1055, "27757": 1053, "27760": 1053, "27772182": 11, "278": [170, 171, 377, 845, 846, 1015], "2780": 386, "27800": 1054, "27801": 1053, "27817": 1053, "27821": 1053, "27828": 1053, "27834": 1053, "27835": 1053, "27841": 1053, "27844": 1054, "27865": 1053, "27898": 1053, "27899": 1053, "279": [158, 989], "27904": 1054, "27937": 1054, "27979": 1053, "27990": 1054, "28": [2, 64, 122, 146, 167, 213, 253, 260, 268, 301, 326, 327, 349, 377, 386, 410, 414, 451, 458, 1003, 1025, 1036, 1039, 1042], "280": [43, 66, 327, 1015], "28009951": 828, "2802": 17, "28040": 1054, "28048": 1053, "28051": 1054, "28053": 1054, "28074": 1053, "28085": 1054, "28090": 1053, "28092": 1054, "28095": 1053, "28102": 1054, "28106": 1055, "28111": 1053, "28121": 1053, "28136": 1054, "28160": 1054, "28165": 1053, "28167": 1053, "2818": 471, "28184": 1053, "28187": 1054, "28188": 1053, "28191": 1053, "28195": 1053, "28198": 1053, "282": [1025, 1036], "28205": 1054, "28207552": 212, "28210": 1054, "28222": 1053, "28225276": 51, "2823": 330, "28233": 1053, "28235": 1053, "28240": 1053, "28241": 1053, "28247": 1053, "2825": 0, "28256": 1053, "28261": 1054, "28262": 1053, "28263": 1053, "28295": 1053, "2830": 0, "28306": 1054, "28327": 1053, "2833": 386, "28351": 1054, "28352": 1054, "28360": 1054, "28365": 1053, "28377": 1053, "28385": 1053, "28399": 1054, "284": 650, "28407": 1054, "28425": 1054, "284315": 253, "28432": 1054, "28435": 1054, "28471": 1054, "284806": 253, "284807": 253, "28483": 1054, "28491": 1054, "28498": 1054, "285": [13, 240, 327, 725], "28521": 1054, "28552": 1054, "28557": 1054, "28582": 1054, "286": [146, 417], "28604": 1054, "28612": 1054, "28651": 1054, "28664": 1054, "28670": 1054, "28692": 1054, "287": [168, 1005], "28701": 1055, "28703": 1054, "28712": 1054, "28718": 1054, "28722": 1054, "28756": 1054, "28763": 1054, "28768": 1054, "2879": 1043, "288": [536, 542], "28808734": 201, "28822": 1054, "28823": 1054, "28843": 1054, "28847": 1054, "289": [167, 182, 216, 1015], "28915": 1054, "28925": 1054, "28951": 1054, "28975": [1049, 1055], "28988": 1054, "28x28": 301, "29": [79, 90, 150, 154, 188, 197, 201, 214, 223, 253, 320, 327, 377, 417, 560, 561, 691, 695, 782, 798, 857, 989, 990, 1007], "290": [327, 352, 689, 690, 694, 990], "290075": 186, "29014": 1055, "290584": 300, "291": [36, 66, 146, 352, 375, 377, 1015], "2914": 495, "292": [226, 241, 397, 417, 736, 1015], "2928359": 212, "293": [10, 14, 168, 171, 230, 1015], "29316": 154, "2939931": 322, "294": [204, 216, 1015], "29473397": [845, 846], "295040e": 215, "295505e": 215, "29566758": 322, "296": 1005, "2961": 652, "296575": 186, "297": 375, "298": 1001, "298688": 259, "29898468": 212, "299": [110, 312, 313, 681, 1015], "299546e": 215, "2_": 985, "2_000": 109, "2_2": [647, 648, 653, 654, 655, 656, 657, 661, 662, 663, 664, 673, 682, 683, 684, 685], "2_f": 653, "2_fro": [654, 663, 664, 685], "2_poli": 259, "2_y": 995, "2c": [644, 653, 673, 674, 675, 676, 688, 985], "2d": [2, 31, 34, 37, 39, 42, 45, 46, 47, 51, 59, 60, 66, 87, 88, 92, 94, 97, 99, 103, 104, 128, 164, 191, 198, 203, 218, 219, 220, 223, 226, 229, 230, 292, 326, 327, 336, 339, 360, 374, 376, 380, 382, 389, 394, 410, 411, 415, 418, 420, 442, 453, 463, 465, 468, 482, 489, 491, 492, 493, 494, 495, 501, 502, 503, 505, 511, 515, 534, 542, 550, 585, 587, 636, 644, 658, 673, 692, 739, 780, 826, 830, 834, 872, 921, 925, 926, 941, 956, 979, 980, 987, 989, 990, 993, 1000, 1004, 1009, 1015, 1020, 1026, 1036, 1040, 1043, 1044, 1045, 1048, 1050, 1054], "2darrai": 382, "2dlabel": 382, "2e": [183, 274], "2e6": 993, "2ec5ac": 309, "2f": [3, 6, 9, 11, 17, 29, 37, 40, 42, 44, 48, 50, 60, 62, 65, 83, 90, 96, 102, 122, 125, 129, 130, 141, 167, 168, 173, 177, 186, 188, 193, 197, 212, 213, 214, 215, 226, 230, 236, 253, 258, 262, 263, 265, 267, 268, 269, 273, 291, 292, 299, 307, 310, 319, 323, 339, 351, 352, 362, 411, 414, 417, 697, 829, 832], "2fbf01908075": 706, "2fx": 246, "2g": [220, 223, 698, 1047], "2h": 416, "2k": 161, "2l": [420, 623], "2n": [697, 985, 997], "2n_": 989, "2nd": [58, 88, 157, 310, 410, 421, 445, 531, 1003, 1051], "2t_p": 266, "2x": 1036, "2x2": [336, 410, 755], "2x_iy_im": 375, "31": [2, 66, 68, 77, 215, 253, 273, 276, 288, 318, 326, 327, 406, 418, 501, 562, 563, 598, 650, 672, 680, 958, 994, 1015, 1036], "310": [248, 250, 1015], "3109306": 152, "311": [134, 352], "312": [125, 1039], "3121": 709, "313": 1027, "313276e": 215, "314483": 322, "315": [283, 377], "316": [154, 158, 326, 332, 612, 615, 626, 881, 1015], "31622776601683794": 136, "3164764": [197, 215], "317": 154, "31760": 989, "318": [352, 451], "318387": 300, "319": [150, 1029], "31958": 154, "31973683": 212, "31bit": 1047, "31st": [198, 884], "32": [2, 3, 11, 49, 90, 134, 146, 147, 166, 169, 235, 273, 319, 327, 374, 378, 385, 394, 406, 417, 418, 446, 565, 566, 583, 590, 635, 677, 884, 886, 925, 926, 958, 1001, 1003, 1015, 1028, 1036, 1039, 1042, 1044, 1045, 1048, 1049, 1050, 1053], "320": [352, 375, 982, 1007, 1036], "3204": 1042, "321": [89, 132, 134, 1015], "321301": 23, "322": [4, 89, 472, 473], "3221": [693, 990], "323": [89, 230], "323200": 23, "324": [89, 375], "324084": 186, "3245": [693, 990], "325": 89, "325198e": 215, "3252": 598, "326": 89, "32634568": 201, "3264": 5, "327": [24, 89, 91, 731, 1015, 1027], "3272984419327777": 356, "3273": 747, "327407": 240, "327605": 240, "32767": 1047, "32782448": 152, "3279": 5, "328": 731, "3288": 545, "329": 451, "329616": 186, "32987858": 566, "32bit": [366, 958], "32x32": 377, "33": [2, 78, 197, 320, 327, 375, 377, 384, 385, 386, 410, 418, 462, 533, 638, 649, 713, 714, 730, 731, 739, 744, 784, 785, 788, 807, 829, 831, 833, 892, 916, 975, 989, 993, 1003, 1025, 1036, 1044], "330": 327, "33035714": 360, "331263": 186, "3315057": [827, 828], "3317": 197, "332": [22, 26, 352, 893, 1015], "333": 847, "3333": 499, "333333": 215, "33333333": [855, 1003], "334": 152, "334795": 262, "335": 2, "335919": 300, "336": [119, 125, 134, 303, 386, 1003, 1015], "336188": 300, "3367": 1043, "337": [65, 66, 128, 134, 386, 1015], "3375": 320, "338": 236, "3383": 5, "3384": 352, "3387": 352, "3397": [665, 686, 687], "33rd": [902, 1006], "34": [2, 122, 146, 149, 212, 288, 302, 326, 327, 360, 377, 414, 521, 530, 571, 598, 650, 668, 717, 765, 1025, 1036], "340": [123, 134, 232, 326, 352, 1015], "34118": 375, "34125758": 212, "3415": [665, 686, 687], "341523": 300, "3419": 262, "341949": 186, "342": [227, 241, 352, 823, 1015], "34279478": 212, "3433": 5, "34346583": 51, "3445": 5, "345": [146, 377], "34545455": 989, "3456": 5, "34586917": 212, "346": [313, 417, 502, 556, 557], "3467": 616, "347717": 122, "34867495": 994, "349": [31, 33, 109, 386, 554, 1015], "34990341": 83, "35": [2, 4, 5, 7, 9, 53, 69, 111, 132, 167, 168, 176, 185, 226, 278, 310, 326, 327, 545, 649, 650, 657, 703, 707, 708, 728, 742, 757, 783, 790, 838, 982, 989, 993, 999, 1000, 1003, 1025, 1029, 1036, 1038], "350": [167, 299, 303, 352, 1015], "351": 332, "351390": 259, "352": [259, 352, 386], "352124": 186, "35278655": 212, "353": [169, 171, 1015, 1029], "3534": 17, "3539": 68, "354": 352, "354394": 122, "3551": 5, "355440": 259, "355445": 122, "356": [202, 216, 320, 324, 1001, 1015], "356497": 122, "3565178": 958, "357": [146, 377, 501, 906], "3573": 828, "3577618906572577": 316, "35788": 1029, "3582": 5, "358295": 186, "358990": 186, "359": [9, 14, 116, 1015], "3591": 1045, "36": [2, 4, 5, 11, 12, 95, 146, 147, 155, 167, 215, 236, 342, 377, 386, 417, 418, 556, 557, 571, 736, 760, 993, 1029, 1036], "360": [109, 554], "360000": 300, "36047253": 212, "361": [95, 104, 375, 417, 556, 557, 1015], "362176": 320, "363": 11, "3635": 828, "364": [352, 472, 473, 1037], "365": [412, 474], "3659": 1041, "36607143": 360, "367": [118, 134, 352, 417, 1015, 1036], "36787944": 991, "3680": [612, 615, 626], "3684": 836, "36851234": 817, "368896": 23, "369": [343, 349, 1015], "3690483151908911912247722318110": 11, "3696": 614, "3697": 851, "3697178": 11, "37": [2, 181, 262, 273, 326, 360, 375, 417, 525, 717, 885, 896, 1003, 1036], "370": 139, "370000e": 215, "370039": 186, "370738": 23, "372": [266, 276, 1015], "37257991": 83, "373": [45, 66, 96, 104, 1015], "373333": 262, "375": [51, 450, 751, 993], "375mb": 351, "376": 1001, "37647423": 11, "376999": 23, "377": 352, "37741762": 103, "377eb8": [38, 42, 60, 61, 226], "378": [167, 417, 1029, 1036], "37815029": 212, "37845099": 362, "379": [321, 324, 1015], "37967282": 994, "379710": 167, "379763": 122, "38": [90, 168, 188, 196, 201, 252, 268, 288, 321, 417, 633, 886, 941, 993, 1003, 1036, 1037, 1038], "380": [352, 1029], "3800": 186, "3803": 353, "381": [7, 14, 1015], "381327": 375, "382005": 122, "382120e": 215, "38353048": 212, "383973": 262, "384": [270, 276, 697, 906, 1015], "3840": 1044, "384338": 186, "384616559": 389, "385000e": 215, "3854": [665, 666], "3855": 1014, "386": 881, "3862": 869, "38629436": 1003, "38690531511642143152471231333333107": 11, "387": 1036, "387580e": 215, "387599": 11, "387830e": 215, "3889": 476, "3889873516666431": 11, "389": [594, 595, 1029], "3894": 616, "39": [2, 11, 146, 240, 323, 375, 377, 378, 384, 410, 418, 496, 896, 914, 943], "3908844": 828, "391": [305, 313, 697, 1015], "3910350737": 389, "3911": 6, "392": [19, 20, 1015], "3928": 471, "393297": 240, "39329747": 240, "394": [68, 158], "3947": 1005, "395": [2, 352], "39568399": 537, "396": [68, 146, 377, 1029], "3964": [423, 476], "397": [342, 349, 375, 1015], "3972": 656, "398": [32, 33, 648, 1015, 1029], "3986": 215, "399": [262, 276, 1015], "3996": 652, "3_": 985, "3_poli": 259, "3a": 384, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 6, "3c479a6885bfa0438971388283a1ce32": 374, "3d": [43, 46, 65, 88, 99, 194, 218, 220, 222, 360, 418, 507, 587, 956, 1028, 1043, 1044, 1046], "3f": [2, 4, 6, 9, 11, 13, 15, 19, 22, 24, 36, 38, 45, 46, 47, 56, 69, 71, 73, 84, 109, 116, 117, 125, 142, 146, 149, 150, 151, 153, 158, 166, 168, 169, 177, 181, 183, 189, 197, 199, 203, 212, 213, 215, 219, 230, 232, 253, 257, 259, 260, 262, 265, 267, 270, 283, 299, 330, 351, 352, 353, 823, 830, 1001, 1025], "3k": 697, "3l": 420, "3llobo": 1051, "3m": 10, "3rd": [88, 157, 840, 883, 995, 1003], "3ssnporch": 119, "3x1": 948, "3x2": [964, 967], "3x3": 979, "4": [2, 3, 4, 5, 6, 7, 8, 10, 11, 15, 17, 18, 23, 24, 25, 26, 29, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 62, 63, 64, 68, 69, 70, 71, 72, 79, 80, 83, 84, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 109, 110, 112, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 142, 146, 149, 152, 154, 155, 157, 158, 161, 162, 164, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 201, 203, 204, 205, 207, 210, 211, 215, 218, 220, 226, 230, 231, 232, 233, 234, 235, 236, 238, 240, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 270, 271, 273, 274, 281, 283, 285, 287, 288, 289, 290, 293, 299, 301, 302, 303, 305, 306, 308, 309, 311, 314, 315, 316, 317, 318, 320, 321, 323, 324, 326, 327, 328, 329, 330, 336, 338, 342, 343, 344, 346, 347, 348, 351, 352, 353, 360, 362, 367, 374, 375, 377, 378, 380, 385, 386, 389, 392, 393, 394, 397, 400, 401, 402, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 492, 497, 505, 513, 514, 517, 518, 519, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 584, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 615, 618, 619, 620, 623, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 677, 678, 680, 681, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 699, 700, 703, 707, 708, 716, 717, 726, 727, 728, 733, 735, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 757, 769, 770, 782, 783, 789, 790, 791, 792, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 831, 833, 834, 835, 836, 839, 840, 841, 842, 844, 849, 853, 854, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 892, 893, 897, 898, 899, 903, 905, 906, 909, 913, 914, 915, 916, 921, 922, 924, 925, 926, 927, 931, 941, 942, 943, 944, 946, 947, 948, 949, 950, 957, 961, 964, 965, 966, 968, 969, 970, 971, 974, 975, 976, 982, 983, 986, 987, 988, 989, 991, 993, 994, 995, 996, 1003, 1004, 1007, 1008, 1011, 1015, 1020, 1024, 1025, 1026, 1027, 1029, 1032, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1050, 1051, 1054], "40": [2, 13, 52, 64, 76, 88, 93, 126, 132, 149, 181, 188, 189, 191, 214, 216, 220, 222, 234, 236, 247, 260, 289, 295, 301, 307, 326, 327, 337, 338, 340, 342, 344, 345, 360, 367, 375, 414, 447, 496, 518, 519, 800, 845, 846, 850, 862, 863, 982, 994, 1003, 1036, 1037], "400": [3, 24, 48, 93, 124, 129, 149, 162, 203, 223, 271, 300, 352, 375, 415, 496, 1029], "4000": [57, 124, 246], "400000e": 215, "4017": 525, "4018260": 322, "402": 263, "402344": 386, "4025": 1041, "403": [181, 216, 263, 351, 352, 1015], "404": 215, "405": [260, 276, 1015], "40597": 281, "406": [690, 694, 990], "4066": 5, "407": [146, 377], "40842387": 10, "40887718": 55, "409": [50, 66, 147, 352, 1015], "40945": 69, "4096": [93, 375, 415, 496], "40966": 374, "409717": 262, "41": [11, 104, 146, 197, 236, 360, 375, 377, 458, 470, 482, 493, 622, 625, 636, 647, 648, 653, 659, 661, 662, 663, 665, 682, 686, 687, 700, 782, 840, 995, 999], "41075698": 416, "41076071": 416, "41082": 3, "411": [167, 330, 412, 422, 474, 534], "4110": 477, "41187": 154, "412": [285, 297, 497, 989, 1015], "412021": 122, "41214": [197, 215], "41215": 215, "412304": 186, "414": [5, 14, 211, 215, 216, 411, 727, 757, 881, 893, 993, 1015], "41421356": [764, 770, 996], "4143": 392, "414810": 240, "414912": 125, "415": [353, 354, 1015], "416": [73, 74, 94, 104, 740, 993, 1015], "416010": 320, "41666667": 751, "41691605": 103, "417": [249, 250, 281, 1015], "41726413": 103, "41888636": 663, "419": [352, 617], "4194": 377, "42": [2, 3, 4, 11, 14, 18, 22, 23, 24, 25, 29, 42, 44, 54, 76, 83, 95, 100, 109, 116, 117, 119, 120, 122, 123, 125, 126, 130, 142, 143, 162, 167, 169, 170, 173, 176, 186, 189, 191, 192, 199, 203, 204, 205, 211, 212, 214, 218, 219, 220, 226, 231, 232, 233, 236, 239, 253, 258, 260, 263, 273, 283, 289, 290, 291, 299, 305, 306, 307, 308, 310, 312, 315, 317, 319, 329, 337, 339, 351, 352, 362, 367, 382, 385, 386, 394, 400, 410, 414, 417, 418, 421, 438, 445, 479, 489, 493, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 528, 530, 532, 538, 545, 546, 547, 558, 559, 566, 567, 568, 569, 571, 606, 607, 608, 609, 610, 678, 695, 696, 697, 761, 793, 794, 798, 800, 803, 823, 829, 831, 845, 846, 850, 854, 857, 897, 898, 900, 901, 902, 912, 915, 916, 928, 941, 958, 962, 996, 1003, 1025, 1029, 1032, 1033, 1036], "420": [103, 104, 188, 216, 1015], "42074": 311, "421": [727, 757, 993], "421087": 262, "42165": 119, "422": [594, 595, 727, 757, 993], "4226193151": 11, "423": [125, 126, 134, 1015], "4232": [2, 11], "423641": 186, "424": 215, "4242": [2, 11], "42425183539869404": 316, "425": [219, 352, 616], "4254": [146, 377], "426": [61, 66, 1015], "4260": [750, 753], "427": [146, 377, 507, 508, 584, 585, 588], "427329": 240, "428": [13, 297], "4285714285714286": 993, "429": 278, "4294": 1042, "43": [146, 156, 194, 230, 253, 259, 276, 283, 313, 377, 385, 801, 815, 886, 1015], "430": [422, 534], "43026679e": 1028, "431": [198, 216, 377, 1015], "4310090": 770, "432": [76, 81, 259, 412, 1015], "4325": 17, "433": [352, 377], "43348936": 212, "4337": 989, "43475": 879, "435": [14, 345, 349, 1015], "436": 230, "4362": 1041, "437362": 186, "438": [167, 1001], "43847489": 103, "43873": 353, "4387766": 11, "439": 168, "4394": 1044, "44": [2, 70, 74, 154, 167, 168, 181, 278, 287, 480, 782, 886, 906, 909, 976, 993, 1000, 1015, 1036], "440": [110, 134, 167, 260, 1015], "440409": 186, "4406": 474, "4409": [2, 11], "441": 146, "44139186": 301, "4415": 17, "442": [146, 162, 377, 502, 1027], "4425765": [654, 664, 685], "443": [30, 33, 1015], "44300751539296973": 11, "44300752": 11, "443238": 262, "44373091": 994, "44381023": 201, "444": [72, 74, 149, 159, 1015], "44412786": 537, "445": [154, 157, 159, 253, 1001, 1015], "445978": 186, "446": [352, 727, 757, 993], "447": 352, "447268": 52, "4472869": 103, "4474": 386, "4478": 1041, "448": 283, "4486": 545, "449": [3, 28, 33, 415, 536, 1015], "4496": [2, 11], "4497": 1014, "45": [38, 62, 71, 83, 125, 142, 154, 169, 171, 186, 197, 215, 266, 270, 271, 327, 339, 414, 417, 418, 565, 566, 628, 635, 647, 648, 653, 661, 662, 663, 682, 683, 684, 789, 798, 909, 983, 993, 1001, 1012, 1025, 1032, 1036, 1039], "4500": 212, "45070924": 667, "451": 647, "45192": 136, "451933": 52, "45333333": 360, "454": [52, 66, 1015], "4544": 2, "455": [153, 155, 311], "4550": 374, "456": [3, 415, 536], "45612256": 661, "45663524": 661, "457": 616, "4576": 836, "458": [145, 147, 1015], "458333315172": 11, "459": [410, 443], "459074": 240, "46": [2, 6, 11, 51, 90, 197, 236, 362, 386, 594, 595, 683, 684, 717, 823, 909, 914, 1003, 1032], "46033": 497, "46043": 497, "46081961": 994, "461": [166, 171, 386, 1015], "462234": 240, "463": [215, 278], "463088": 11, "464": [64, 66, 1015], "46428631511221642143151251232633109": 11, "465660": 23, "465730": 186, "466": 1000, "4666": 635, "46779927": 10, "468": 56, "46858513287221654": 321, "46874778": [654, 664, 685], "469": 56, "4690": 1029, "46915237": [654, 664, 685], "4694": 525, "469474": 186, "46958558": 662, "4697": 45, "47": [2, 6, 158, 193, 375, 494, 495, 536, 542], "471": 377, "47140": 410, "47236": [375, 498], "4733": 123, "47330339": 418, "4738": 1041, "474": [24, 26, 1015], "475": [2, 14, 109, 1015], "47668": 353, "477": 158, "478522": 186, "47885": 353, "4792": 215, "47922861": 240, "479229": 240, "47928": 353, "4794": 186, "4795": 186, "4796": 186, "4798": 186, "47985": 497, "47987268e": 178, "4799": 186, "48": [2, 6, 11, 43, 83, 99, 125, 154, 240, 311, 377, 386, 410, 511, 598, 700, 747, 829, 840, 982, 995, 1003, 1032], "480": [181, 352], "4801": 186, "4802": 186, "4803": 186, "4804": 186, "4805": 186, "4806": 186, "4807": 186, "4809": [186, 262], "481": 158, "4810": 186, "4812": 5, "4815": 186, "482": [215, 216, 1015], "48204257": 994, "4828": 186, "483": [356, 361, 649, 1015], "4830": 186, "4831": [186, 656], "4832": 186, "4836": 186, "484": 158, "4841": 186, "484109": 186, "4846": 186, "485": [153, 156, 159, 697, 1015], "4852": 186, "4855": 186, "4857596147013469": 58, "486": [18, 20, 199, 1015], "4860": 186, "4866": 186, "4867": 186, "4869": 186, "487": [11, 725], "4872": 186, "48736655": 668, "4874": 186, "4876": 186, "4880": 186, "4881": [186, 1041], "48841": 497, "48842": 497, "4885": 186, "48858": 386, "4888": 186, "4891": 186, "48938813e": 178, "4894": 186, "48979592": 450, "4898431": [375, 493], "49": [2, 40, 146, 189, 201, 236, 374, 375, 377, 385, 410, 451, 458, 714, 727, 757, 765, 794, 798, 801, 886, 993, 1003, 1039], "490": [327, 332, 1015], "491": 697, "492": [253, 644, 986, 1027], "4923": 650, "4928": 186, "493": [644, 905, 986], "4936": 186, "4939": 1043, "494021": 493, "4948": 5, "4951": 654, "495761": 386, "496": [257, 276, 1015], "49665188": 201, "4967": 525, "4976": 598, "498": [80, 81, 1015], "499": [46, 66, 146, 377, 386, 1015], "4995": 1042, "49999993": 989, "4daf4a": [42, 60], "4dbd33": 90, "4e": 219, "4e9a06": [57, 62], "4eacc5": [57, 62], "4f": [5, 6, 17, 112, 121, 123, 212, 213, 215, 310, 323, 912], "4gb": 1029, "4i": 48, "4th": [146, 157, 377], "4x": [386, 1051], "4x10": 418, "4x1048576": 418, "4x11": 287, "4x4": [377, 415, 418], "4x9": 418, "5": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 19, 22, 23, 24, 25, 29, 30, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 68, 69, 71, 72, 73, 77, 78, 79, 80, 81, 83, 84, 90, 93, 94, 95, 96, 97, 99, 100, 102, 107, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136, 138, 141, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 203, 205, 208, 209, 210, 211, 212, 213, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 329, 330, 331, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 375, 377, 378, 380, 382, 385, 386, 388, 392, 393, 394, 397, 401, 402, 403, 407, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 425, 438, 439, 440, 441, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 470, 473, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 505, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 593, 594, 595, 598, 603, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 642, 644, 647, 648, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 689, 690, 692, 693, 694, 696, 697, 700, 704, 706, 708, 709, 710, 713, 714, 719, 721, 722, 723, 724, 725, 727, 728, 729, 731, 733, 736, 739, 740, 741, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 770, 771, 779, 782, 783, 785, 786, 788, 789, 790, 791, 792, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 863, 864, 865, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 899, 905, 906, 907, 908, 909, 910, 911, 913, 915, 921, 922, 925, 926, 930, 931, 940, 941, 942, 943, 944, 946, 947, 948, 956, 957, 961, 962, 964, 965, 968, 969, 970, 971, 972, 973, 974, 982, 983, 985, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1011, 1015, 1016, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1034, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1050, 1051, 1052, 1055], "50": [0, 2, 5, 8, 11, 13, 22, 30, 31, 36, 40, 48, 50, 57, 58, 63, 64, 68, 69, 83, 90, 93, 96, 102, 109, 112, 115, 122, 125, 128, 129, 146, 150, 152, 153, 154, 155, 166, 167, 168, 177, 181, 192, 197, 200, 204, 205, 209, 211, 213, 215, 218, 222, 223, 229, 230, 232, 240, 253, 254, 259, 261, 262, 272, 283, 302, 305, 309, 317, 319, 327, 329, 331, 337, 345, 352, 375, 377, 380, 385, 414, 417, 418, 419, 422, 443, 474, 480, 481, 501, 505, 522, 524, 527, 534, 540, 545, 554, 555, 570, 594, 595, 607, 609, 610, 616, 618, 659, 660, 667, 668, 669, 671, 677, 678, 679, 693, 714, 793, 801, 815, 834, 854, 905, 914, 988, 989, 993, 994, 996, 999, 1003, 1017, 1036, 1053], "500": [8, 42, 48, 55, 58, 59, 61, 83, 84, 100, 102, 113, 115, 123, 145, 149, 173, 210, 211, 219, 237, 238, 243, 244, 248, 253, 259, 262, 272, 273, 283, 289, 295, 309, 316, 321, 322, 343, 348, 366, 417, 423, 470, 471, 475, 476, 477, 482, 483, 484, 485, 612, 614, 615, 617, 622, 625, 626, 651, 652, 655, 656, 657, 681, 683, 684, 863, 982, 1008], "5000": [54, 183, 212, 213, 215, 317, 886], "50000": 22, "500000": 300, "5000000": 15, "50000000": 152, "50000013": 989, "5000083": 11, "500526": 125, "500x500": 542, "5012": 1042, "5016": [412, 423, 476], "5025616": 11, "5029": [412, 423, 476], "503": [151, 159, 1015], "503452": 300, "5036": 1043, "504": [129, 134, 1015], "504185": 300, "50447799": 994, "505": 830, "507": [353, 411], "50755672": 467, "507943": 262, "508": 1027, "5082": 1014, "50941682": 994, "50_000": [312, 352], "51": [22, 74, 154, 215, 278, 283, 410, 411, 767, 777, 782, 989, 1032], "510": [40, 66, 1015, 1027], "51082562": 591, "512": 196, "512281": 248, "512595": 300, "51292546": 613, "513": [854, 996], "513034": 300, "5131": [5, 1041], "51341712": 991, "5141": 1042, "51462041": 850, "5149": 5, "515": [2, 232], "515390": 386, "5166": 674, "5166646": 765, "517": [6, 453, 463, 1027], "517272": 248, "5182": 1041, "5186": 1041, "5193": 5, "51958": 154, "51961675": 1027, "51963999": 78, "52": [2, 115, 134, 154, 197, 532, 634, 798, 941, 1015, 1036], "520": [629, 854, 983, 996], "52003279": 994, "5208": 186, "52106591": 103, "5211": 1043, "5212": 186, "522": 906, "5224167": 11, "5229": 1043, "523": 525, "524": [11, 130, 134, 1015], "5243": 418, "52433293": 418, "5244": 186, "525": [440, 629, 983], "5251": 1042, "526": 905, "526599": 186, "5279": 1043, "5282": 1041, "52875032": 662, "5289": 5, "5291": 1042, "5295": 1043, "52955942": 850, "5299": 1042, "53": [2, 51, 66, 224, 236, 410, 417, 536, 542, 547, 793, 794], "53060544": 1027, "531": [214, 216, 1015], "5315170": 11, "5316": 351, "53284267": 240, "532843": 240, "533": [146, 167], "5337": 1041, "534": 167, "535": [167, 171, 329, 332, 1015], "5355": 1041, "5359": 1043, "536": [98, 104, 154, 283, 1015], "5360": 1041, "537": [273, 276, 1015], "53777511": 11, "53844117956": 765, "539": 168, "5395559": 212, "53959628e": 178, "54": [90, 96, 146, 173, 181, 197, 200, 236, 375, 377, 410, 492, 1037, 1038], "54035582": 765, "541": [453, 463], "5415": 990, "5417": 215, "542": [146, 377], "5420": 545, "542052": 186, "54209": 136, "5425": 525, "543": 181, "5431": 1041, "543841": 186, "54434690031882": 71, "54488318": 389, "545": [12, 14, 1015], "5460": 1042, "546068": 240, "54606834": 240, "54666667": 360, "5467523": 11, "5469": 377, "5488135": 389, "549": [24, 346, 349, 1015], "5495": 1041, "54962692": 322, "54980": 542, "55": [96, 167, 173, 192, 197, 215, 220, 236, 241, 327, 385, 410, 414, 492, 598, 801, 807, 815, 829, 993, 1015, 1036], "550": [348, 349, 1015], "5500": [320, 689, 990], "550213": 186, "551": 353, "55102041": 450, "5515": 747, "552": [197, 216, 993, 1015], "55212743": 362, "5523": 1014, "55249": 598, "55390036": 103, "554": [205, 213, 301, 316, 324, 1015], "5540": 1042, "55422893": 418, "555": 717, "5555555555555556": 267, "5557": 262, "5558": 5, "55800226": 212, "559": [127, 134, 146, 147, 617, 1015], "5591": [690, 694, 990], "55968825": 647, "56": [2, 206, 215, 230, 330, 386, 647, 648, 653, 661, 662, 663, 682, 714, 736, 993, 1003, 1032, 1036], "560": [68, 74, 197, 518, 519, 1015], "561": [199, 216, 410, 1015], "561464362648773": 58, "564": 197, "56479934": 362, "56485654": 103, "565": 259, "566": 197, "569": [146, 212, 329, 377, 501, 593, 596, 597, 599], "5697": 1043, "56b4e9": 243, "57": [149, 167, 213, 268, 302, 377, 378, 397, 401, 402, 411, 706, 762, 782, 838, 993, 1003, 1036], "570": [146, 377, 1027], "570655": 186, "5713": 664, "57142857": 722, "573": 418, "5732": 1043, "57320793": 418, "573491": 186, "574": [56, 535, 542], "5748": 495, "5749": [375, 494, 495], "575": [68, 197], "5762": 1042, "576989": 240, "577": [146, 377], "579": 525, "58": [6, 11, 64, 77, 377, 412, 423, 476, 608, 765, 1003, 1025], "580": [352, 845, 846], "5804131": 103, "5805": 1042, "5807": 996, "581": 173, "581012": [375, 492], "5814": 1043, "58149261": 418, "58195950e": 178, "582": 906, "5828": [375, 494, 495], "583": [410, 1027], "5833": [739, 993], "583333315172": 11, "58364548": 991, "585": 1027, "5853": 1014, "5854": 1027, "5855": 1027, "5857": 1041, "5863": 386, "58667835e": 178, "586798": 186, "5871": 680, "5874": 1042, "588": [158, 159, 1015], "5882004012129721": 58, "589715": 186, "59": [2, 6, 173, 181, 215, 344, 377, 386, 410, 411, 511, 823, 993, 1032, 1036], "590": [205, 216, 1015], "59122734": 668, "592": [612, 615, 626, 1000], "592373": 320, "5925110": 11, "5929": 1042, "593": 113, "594": [136, 139, 158, 197, 1015], "594754": 186, "59489497": 212, "595": 197, "5956": 1044, "596": [77, 81, 246, 250, 717, 1015], "5960": 212, "5963": 1046, "597": [44, 66, 197, 1015], "598": [56, 100, 150, 542], "5981": 545, "598533": 186, "599": [155, 159, 681, 1015], "5991": 1043, "5_000": 173, "5a": 885, "5d": 6, "5e": [3, 93, 182, 596, 597, 599], "5e5": 197, "5f": [136, 319], "5m": 15, "5n_": 79, "5th": [11, 122, 125, 157, 410], "5x": 1053, "6": [2, 6, 7, 8, 9, 10, 11, 17, 24, 25, 29, 30, 38, 42, 44, 47, 48, 50, 54, 55, 58, 59, 60, 61, 62, 63, 65, 71, 72, 73, 74, 76, 77, 78, 80, 83, 88, 93, 95, 102, 110, 118, 122, 123, 125, 127, 129, 136, 141, 146, 147, 149, 152, 154, 156, 157, 161, 162, 167, 168, 170, 173, 176, 177, 178, 181, 186, 190, 195, 197, 198, 199, 201, 211, 215, 218, 219, 222, 224, 226, 229, 230, 234, 237, 238, 243, 244, 245, 246, 248, 249, 252, 253, 254, 257, 258, 259, 260, 261, 262, 264, 268, 269, 270, 271, 275, 281, 285, 288, 296, 299, 301, 302, 305, 307, 309, 310, 312, 315, 318, 319, 320, 321, 322, 323, 326, 327, 330, 331, 332, 339, 340, 342, 344, 346, 348, 352, 353, 359, 362, 374, 375, 377, 378, 380, 385, 386, 393, 397, 401, 402, 407, 410, 411, 414, 415, 417, 418, 419, 425, 442, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 483, 484, 485, 486, 491, 497, 506, 518, 525, 528, 531, 538, 539, 540, 541, 542, 546, 547, 548, 554, 562, 563, 564, 568, 569, 570, 571, 594, 595, 605, 606, 607, 609, 612, 615, 616, 626, 628, 629, 631, 637, 638, 645, 646, 671, 677, 678, 690, 694, 700, 722, 729, 739, 743, 746, 747, 751, 752, 754, 770, 786, 789, 791, 798, 799, 800, 802, 803, 808, 810, 811, 813, 818, 819, 822, 826, 827, 828, 829, 831, 840, 841, 842, 844, 845, 846, 853, 855, 856, 857, 872, 873, 875, 878, 880, 883, 884, 888, 889, 920, 921, 925, 926, 941, 942, 943, 945, 947, 948, 956, 968, 971, 979, 982, 983, 987, 989, 990, 993, 1003, 1004, 1007, 1008, 1009, 1011, 1017, 1020, 1024, 1025, 1027, 1032, 1034, 1037, 1038, 1039, 1042, 1044, 1049, 1053, 1054], "60": [2, 4, 57, 71, 80, 197, 209, 215, 218, 219, 240, 246, 267, 272, 327, 342, 351, 374, 410, 414, 451, 458, 714, 801, 993, 1003, 1025, 1036, 1039], "600": [24, 48, 56, 120, 129, 130, 375, 681], "6000": [302, 628], "601052": 300, "601707": 186, "602": [6, 14, 353, 1015], "60244657": 850, "60276338": 389, "603": [61, 449], "604": [100, 542], "606": [614, 835, 994], "60648906": 1027, "607": [296, 297, 1015], "607275806426107": 149, "607752": 122, "608013148566445": 316, "60809415": 663, "60834549": 55, "60836363e": 178, "609": [158, 386], "61": [79, 168, 215, 374, 377, 386, 411, 459, 542, 561, 647, 648, 653, 661, 662, 663, 682, 714, 823, 943], "6101": 1043, "611": [257, 259, 542], "6114": 828, "6114326": 197, "6114327": 197, "6114328": 197, "6114329": 197, "6114330": 197, "611676": 186, "612": 791, "6121": 1042, "6126": 1043, "613": [286, 297, 1015], "614": [113, 134, 1015], "6147": 1041, "615": 46, "615373": 167, "616": [168, 842, 995, 1003], "61611719": 152, "617": [56, 262, 410, 770], "617050e": 215, "6173": 1042, "617715": 122, "6178": 1042, "618": [56, 257], "6181": 1043, "6182": 1042, "618263": 186, "619": [61, 449], "619052": 375, "61958": 154, "6196": [262, 1041], "6198": 747, "62": [11, 168, 173, 215, 252, 320, 327, 362, 375, 494, 495, 845, 846, 1032, 1039], "620": 499, "621": [56, 770], "621645": 186, "622": [56, 542], "62241605": 181, "622811": 122, "623": [842, 995], "6231": 1014, "6237": 215, "624": 1000, "625": [51, 197, 353, 619, 709], "6250": 1043, "6258": 1041, "626": [47, 183], "6261": 1045, "626286": 186, "62717609": 212, "62722912": 11, "62745778": 994, "628": 352, "6282": 1042, "6284": 1014, "6288": 1043, "6291456": 51, "63": [4, 253, 377, 417, 558, 559, 566, 567, 647, 648, 653, 661, 662, 663, 682, 700, 727, 801, 815, 823, 915, 916, 993], "630": 725, "63035731": 418, "630382": 320, "631": [131, 134, 1015], "6312": 11, "632": 311, "6323": 1014, "6331": 2, "6332": 2, "63327171": 181, "6333": 2, "6334": 2, "6335": 2, "6338211367102258": 312, "63394388": 181, "635": [2, 617], "636": [63, 66, 181, 386, 1015], "63667341": 55, "637": [176, 216, 1015], "6371000": 765, "6374": 1044, "6375861597263857": 940, "638": [352, 386], "638768": 52, "638843": 300, "63931533": 1027, "63bit": 1047, "64": [2, 11, 30, 46, 51, 56, 87, 93, 154, 167, 219, 220, 230, 231, 235, 257, 267, 268, 287, 292, 357, 366, 367, 377, 378, 386, 394, 411, 415, 422, 496, 499, 503, 600, 601, 647, 659, 689, 690, 691, 692, 694, 906, 996, 1026, 1032, 1036, 1038, 1044, 1045, 1048, 1049, 1050, 1053], "640": [212, 216, 407, 491, 507, 508, 584, 585, 588, 982, 1015], "640000e": 215, "640770e": 215, "640880e": 215, "64185414": 667, "64236448": 537, "6424": 1014, "6425": 1014, "643": 257, "644": [84, 85, 330, 1015], "6440": 212, "64447187": 51, "645": 56, "6451": 1014, "6452": 1044, "646": 157, "6463": 1045, "647": 56, "6472": 1042, "6476": 525, "647689": 186, "648026": 122, "6497": 1042, "64bit": [397, 1036], "64x64": [93, 375, 415], "65": [2, 31, 168, 197, 268, 311, 410, 440, 503, 518, 598, 700, 742, 793, 794, 823, 1000, 1025, 1036, 1037, 1038], "650": [114, 134, 407, 1015], "6505186632729437": 58, "6507": 1043, "651": 386, "652": 352, "652739": 186, "653": [275, 276, 386, 612, 615, 626, 1015], "6545": 1048, "655": [111, 134, 1015], "656": 375, "6567": 852, "657": [240, 259], "6572": 852, "6573": 1043, "65799352e": 178, "658": [84, 268, 276, 1015], "6586": 1042, "659": 158, "6599": 1014, "65e": 183, "66": [2, 6, 11, 222, 311, 377, 410, 427, 462, 533, 633, 713, 784, 785, 796, 884, 892, 975, 993, 1005], "660": 240, "660797": 240, "661": [11, 14, 1015], "661086": 262, "6624": 1048, "662409": 186, "663": [899, 1001, 1005], "664": [146, 168, 377], "665": 2, "6650": 11, "6651": 1042, "666": [152, 410, 847, 983], "6660": 1042, "6666": [739, 993, 1042], "66666667": [730, 783, 855, 1003], "666667315174": 11, "6667": 1042, "66670169e": 178, "667": [721, 741, 993], "667219": 122, "668": 253, "6689": 1044, "669": [237, 241, 1015], "6691": 1042, "6697": 1042, "669930e": 215, "67": [6, 64, 167, 215, 377, 499, 517, 518, 519, 628, 668, 714, 815, 983, 993, 1007, 1032, 1036], "670": [199, 253], "671": 1005, "6715": 1014, "67251877": 667, "673": [84, 352, 386], "674": [201, 216, 301, 303, 1015], "67443065": 103, "67451144e": 178, "675": 149, "675318": 52, "676": [25, 26, 670, 1015], "6764": 1042, "678008": 197, "678009": 197, "678010": 197, "678011": 197, "678012": 197, "678013": [197, 215], "678359": 186, "679": [199, 905], "68": [2, 6, 158, 188, 302, 326, 410, 479, 536, 542, 591, 686, 687, 1036], "681": [56, 386], "6817": 1042, "682": 386, "6821": 6, "682880e": 215, "683980e": 215, "684": [69, 78], "6846": 1042, "6848": 1045, "685": [721, 741, 993], "6852": 259, "6860": 121, "687": [259, 276, 1005, 1015], "6875": 717, "688": [78, 163], "689015": 300, "689143": 300, "689751": 300, "69": [4, 188, 253, 310, 327, 410, 472, 473, 608, 609, 757, 993, 1003, 1027], "690": 199, "6902": 1042, "691": 722, "6913": 1042, "692": 109, "692270e": 215, "692470": 300, "6929": 1014, "692901": 122, "693": [287, 297, 993, 1015], "6931": 869, "69314718": [420, 613, 1003], "695": 257, "69513": 56, "6954": 1042, "69545": 56, "695740e": 215, "697": [124, 134, 1015], "69735": 56, "698": [56, 324, 1015], "6984743": 152, "69892343": 201, "699": 323, "699691": 375, "6d": 6, "6f": [15, 97, 264, 738, 796], "6ppm": 154, "6th": 157, "6x3": 418, "7": [2, 3, 4, 6, 9, 10, 11, 12, 13, 17, 24, 28, 30, 31, 32, 37, 40, 42, 44, 51, 52, 53, 54, 58, 62, 63, 65, 69, 70, 72, 78, 80, 96, 109, 112, 122, 124, 125, 126, 130, 131, 146, 158, 166, 167, 168, 170, 173, 178, 179, 196, 197, 198, 199, 213, 215, 218, 226, 231, 232, 238, 240, 243, 244, 247, 248, 250, 253, 254, 259, 263, 265, 266, 270, 272, 278, 281, 283, 285, 288, 289, 291, 301, 302, 305, 309, 315, 318, 319, 320, 322, 326, 327, 329, 330, 336, 343, 346, 347, 351, 352, 353, 362, 375, 377, 378, 384, 385, 386, 397, 401, 402, 407, 414, 415, 417, 418, 419, 421, 422, 425, 440, 445, 446, 449, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 468, 472, 473, 483, 484, 485, 486, 492, 497, 499, 533, 534, 535, 536, 537, 539, 541, 545, 562, 563, 589, 592, 601, 606, 607, 628, 629, 631, 638, 647, 648, 650, 653, 659, 660, 661, 662, 663, 674, 676, 682, 683, 684, 693, 700, 708, 710, 722, 724, 725, 727, 729, 745, 746, 747, 751, 752, 754, 783, 786, 791, 792, 795, 798, 800, 801, 802, 803, 804, 805, 808, 811, 815, 818, 819, 822, 828, 831, 835, 845, 846, 854, 863, 864, 865, 870, 877, 878, 900, 901, 941, 942, 945, 946, 948, 957, 962, 982, 983, 988, 989, 991, 993, 994, 996, 997, 999, 1003, 1007, 1008, 1020, 1024, 1027, 1032, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1049, 1054], "70": [2, 4, 9, 44, 64, 69, 71, 109, 168, 236, 243, 259, 327, 375, 377, 414, 494, 495, 683, 684, 714, 727, 757, 801, 815, 892, 982, 1003, 1025], "700": [48, 253, 317], "7000": 215, "701": [56, 91, 138, 139, 1015], "702266": 186, "703": [407, 514], "70359377": 181, "704": 351, "70432034": 83, "7049": 1042, "7049787496083262": 58, "706": [53, 66, 1015], "706026": 186, "707": [881, 893], "7071": 1044, "70763101": 51, "708": [539, 541, 548, 751], "70814003": 362, "7083": 993, "708333315174": 11, "7089": 1043, "709": 260, "70x": 1053, "71": [2, 90, 146, 201, 215, 377, 511, 731, 737, 767, 777, 993, 1027, 1032, 1038], "710": 407, "7101": 1042, "711": [308, 313, 1015], "714": 317, "715": 353, "71518937": 389, "7152": 1042, "7154": 1042, "715413": 122, "7159": 1042, "716": [353, 514], "7187": 1042, "718747": 186, "7194": 1042, "72": [2, 4, 5, 11, 115, 152, 385, 823, 829], "7200": 650, "721": [539, 541, 548], "722128e": 215, "72295655": 83, "723": [56, 232], "723665": 273, "7239": 1042, "7242": 1014, "724702": 262, "7248": 1042, "7256": 636, "726": 1001, "7260": 1042, "7261": 1042, "726573": 167, "72667194": 994, "7271482064048191": 267, "728": 26, "72850319": 994, "7295": 1042, "7298221281347033": 2, "73": [90, 111, 263, 327, 393, 482, 737, 801, 815, 851, 914, 1003, 1025, 1036, 1038], "7301": 1042, "730119e": 215, "731": [307, 313, 1015], "731249e": 215, "7313": 5, "73153": 386, "732": 199, "7321432711315247203224138160467097": 11, "7323": 1042, "7325": 1042, "732913": 273, "733": 283, "7331": 1043, "7332": 909, "7337046907": 158, "7350": 1042, "7353": 1042, "7356": 1043, "736": 361, "7365": 1043, "73654189": 11, "73698041": 1027, "737": [232, 317, 525], "7376": 1043, "738": 183, "7382": 1014, "7387": 477, "7388": 1043, "739865e": 215, "739950": 273, "74": [2, 213, 326, 327, 377, 591, 695, 801, 815, 884, 1032], "7411": [470, 475, 1042], "7419": 1042, "743": [257, 1027], "74310541": 152, "7436926291700353": 192, "744": [257, 283], "744029": 273, "744042e": 215, "7441": 1043, "744497e": 215, "74495357": 181, "7459": 1043, "746": [33, 377], "7464": 1043, "746492": 259, "747": 20, "748": [288, 297, 351, 386, 1015], "7490": [1042, 1043], "75": [2, 4, 5, 8, 11, 31, 42, 53, 80, 112, 143, 156, 157, 162, 167, 173, 176, 179, 188, 204, 215, 240, 245, 246, 253, 259, 268, 272, 288, 305, 318, 348, 351, 362, 450, 502, 552, 638, 659, 695, 707, 713, 735, 740, 741, 746, 754, 757, 795, 801, 883, 891, 895, 902, 918, 930, 931, 974, 993, 995, 1003, 1009, 1012, 1025, 1038], "750": [47, 53, 117, 259], "75000": 197, "7501": 1043, "750348": 122, "750389": 186, "7506": 1043, "752": 351, "752470": 273, "752867": 186, "753": [36, 222, 224, 351, 1015], "7532": 490, "7533": [423, 476, 1043], "75474165": 994, "7548": 1043, "7548291": 322, "7553": 1042, "7565": 1043, "756687e": 215, "7567": 1043, "756746e": 215, "7569": 471, "757": [146, 257, 283, 377], "7573": 1043, "75747153": 201, "7578": [262, 1043], "75788833": 143, "757915": 273, "759": 283, "7593": 1042, "7594": 1042, "75949622": 201, "75th": [236, 883], "76": [2, 173, 197, 327, 351, 362, 377, 386, 778, 782, 865, 1027, 1032], "760": [2, 125], "7608": 1014, "76195467e": 178, "762": [267, 276, 351, 1015], "7621951219512195": 240, "7632": 1042, "7638": 989, "764": [722, 993], "7646": 1014, "764779": 186, "765012": 320, "7655": 1043, "765671": 186, "7660": 1042, "7661": 1043, "7668": 1044, "7674": [525, 1043], "767498": 122, "7676": 1042, "768": 51, "7680": 1042, "76823": 4, "7685": 1043, "769": [3, 14, 283, 1015], "76995": 375, "77": [2, 4, 42, 146, 173, 268, 327, 351, 374, 377, 535, 708, 737, 776, 823, 1032], "77000": 197, "7702": 1043, "770926": 273, "772": [351, 724], "7721": 1043, "7723": 1043, "7724": 1042, "773": [259, 330, 649, 843], "77310": 375, "7732": 1042, "77322639": 83, "7738": 1044, "7739": 1043, "77426368": 10, "775": 17, "7750": 1042, "775047": 677, "775151": 677, "7756": 1042, "776": [289, 297, 1015], "77630514": 418, "7768366": 991, "777": 386, "7771": 1043, "77764": 405, "77777215": 83, "7786": 1042, "779": [81, 203, 216, 351, 1015], "7794": 1043, "779751": 273, "7798": 909, "7799": 1042, "78": [2, 51, 90, 173, 215, 268, 307, 327, 494, 495, 647, 648, 653, 654, 656, 661, 662, 663, 665, 666, 682, 686, 687, 801, 807, 823, 829, 993, 1014, 1025], "780": [257, 291, 297, 1015], "7812": 1043, "781265": [375, 498], "7814": 1043, "7816": 11, "7819": [410, 1043], "7823": [1043, 1044], "7825": 1043, "7825594": 10, "7826": 377, "782755": 23, "7831": 351, "783149": 69, "7833": 476, "783392": 259, "7838": 1043, "784": 301, "7840": 52, "7849": 1043, "785063": 69, "78571427112143152472031331383346104": 11, "786": [51, 69], "786015": 69, "7863": 1043, "786432": 51, "78681467": 51, "787": 253, "7872": 1043, "788": [352, 354, 1015], "7880": 1043, "7887550": 11, "788808": 320, "789": [142, 417], "7894": [899, 1005], "79": [2, 4, 28, 30, 78, 79, 96, 146, 173, 302, 327, 377, 385, 412, 475, 525, 598, 695, 823, 843, 1036, 1038], "790": [2, 68, 230], "7906": [623, 650], "79064206": 611, "79084103": 362, "791": 158, "7914": 1043, "791667315161908911936472223112": 11, "79269019073225": 287, "7927845601690917": 312, "7929": [352, 1043], "794": [173, 174, 178, 216, 1015], "7943": 1046, "7944": 1043, "7946": 1042, "795": 649, "7954": 1043, "796": 122, "7970": 1043, "7971": 664, "7972": 555, "79769376": 83, "798": [69, 417], "7983": 1043, "798301": 240, "7986": 1043, "7986499491396727": 149, "798982054": 993, "799": [158, 352], "7990": 1043, "7998": 1043, "7_qbz5n2kfra8p0": 397, "8": [2, 3, 4, 5, 6, 7, 10, 11, 12, 17, 23, 24, 25, 29, 30, 32, 35, 41, 42, 43, 46, 48, 51, 53, 58, 60, 62, 63, 68, 70, 72, 73, 79, 83, 88, 89, 90, 93, 94, 96, 97, 98, 101, 103, 109, 112, 114, 115, 119, 121, 122, 124, 128, 131, 132, 136, 145, 146, 150, 152, 154, 155, 157, 158, 162, 166, 167, 168, 170, 173, 176, 177, 182, 183, 188, 191, 197, 198, 201, 204, 205, 207, 213, 215, 218, 219, 220, 222, 223, 227, 230, 231, 232, 234, 238, 239, 240, 243, 244, 245, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 269, 270, 278, 281, 285, 287, 291, 295, 299, 301, 302, 305, 307, 308, 309, 310, 311, 313, 315, 320, 326, 327, 328, 330, 331, 336, 339, 343, 344, 345, 346, 347, 351, 352, 353, 359, 362, 367, 374, 375, 377, 378, 380, 385, 386, 397, 403, 407, 410, 414, 415, 417, 418, 419, 421, 423, 440, 444, 445, 448, 450, 451, 453, 456, 457, 458, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 488, 491, 497, 499, 503, 504, 515, 517, 532, 535, 539, 541, 544, 546, 548, 550, 551, 556, 557, 566, 571, 583, 589, 590, 591, 592, 605, 606, 629, 630, 637, 638, 649, 659, 671, 677, 690, 693, 694, 695, 696, 700, 703, 707, 708, 710, 711, 716, 722, 728, 729, 730, 742, 746, 747, 751, 752, 754, 783, 784, 786, 789, 790, 791, 792, 796, 798, 800, 802, 803, 808, 811, 818, 819, 822, 823, 824, 831, 832, 834, 843, 845, 846, 852, 862, 863, 864, 870, 877, 884, 886, 907, 910, 940, 941, 942, 946, 962, 968, 969, 970, 971, 972, 973, 974, 982, 983, 989, 990, 991, 993, 996, 1001, 1003, 1007, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1037, 1038, 1039, 1043, 1044, 1049, 1050, 1052], "80": [2, 4, 9, 25, 65, 79, 130, 138, 143, 168, 176, 234, 307, 311, 326, 342, 344, 351, 358, 362, 375, 377, 380, 407, 414, 419, 421, 445, 480, 511, 542, 714, 801, 815, 823, 886, 899, 918, 982, 988, 989, 993, 1000, 1006, 1009, 1029], "800": [48, 318, 375, 585, 693], "8000": [215, 262, 263], "800000011920929": 360, "8000184677460305": 312, "8002": 1043, "8003": 1044, "8005": 1043, "8006": 1043, "8010": 1043, "801770e": 215, "802": [5, 146, 377], "8022": [5, 394, 474, 1045], "802601": 186, "8028": 1043, "803483": 122, "803882e": 215, "8040": 1042, "804414": [375, 498], "805": 199, "8053": 1043, "8059798": 181, "806": 650, "8061": 1043, "8065": 1043, "8066": 1044, "8068": 1043, "807": [257, 259], "8075": 1044, "8086": [620, 1043], "8087": 1043, "8093": 1043, "8094": 1043, "80956739": 994, "80_000": 114, "81": [2, 48, 240, 326, 327, 410, 700, 762, 789, 801, 815, 832, 993, 994, 996, 1003], "810": [60, 66, 169, 830, 1015], "8100": 1014, "8102": 1044, "810596": 375, "8117": 1043, "8120": 1043, "8125": 722, "812526": 186, "8129": 1044, "8133333333333334": 294, "81355169": 418, "8137": 1043, "8139": 1043, "814": [169, 1027], "81458798": 1027, "815": 253, "815476315189119122164721021826110": 11, "8157": 1014, "8159": 1043, "816": [260, 472, 473], "8160": 1043, "817": 149, "8174": 1043, "817724": 186, "818": [265, 276, 1015], "8181": 1043, "819": 418, "8190": 1044, "81940995": 418, "8198": 1043, "82": [2, 28, 51, 56, 118, 143, 200, 294, 326, 789, 801, 815, 941, 993, 996, 1025, 1036], "820": [2, 11, 845, 846], "820705": 186, "8216": 1045, "822": [241, 791], "822097": 167, "8224": 1043, "8225220806196525": 192, "823": 283, "8243": 1014, "825": 751, "8251": 1043, "8253": 213, "8259": 1043, "827917": 122, "828": 283, "8282": 1043, "829": [310, 313, 352, 1015], "829429": 248, "8295": 1043, "83": [4, 28, 32, 37, 326, 377, 382, 695, 708, 787, 988, 993, 1025, 1029, 1039], "830000": 300, "8306": 1043, "8316": 1043, "832": [169, 417, 556, 557], "83236428": 418, "83281226": [845, 846], "8333": 499, "83333": 765, "833333": 167, "8335": 1043, "834": 330, "834310": 186, "8344": 1043, "8345": 598, "8348": 1029, "8353": 5, "8354": [623, 1043], "83548752": 611, "8355": 1042, "8361": 1044, "836224": 23, "8363": 1043, "8370": 1014, "8377": 1043, "838": [162, 163, 357, 361, 1015], "83816048": 647, "83822343": 991, "83833": 386, "8387": 836, "839": 681, "84": [2, 4, 6, 44, 68, 143, 188, 215, 307, 326, 362, 377, 417, 418, 789, 815, 993, 1003, 1025], "840": 386, "84000": 197, "840000": 300, "8407": 68, "84077985": 181, "841": 69, "84127814": 667, "842": [116, 134, 1015], "84253": 994, "844": [417, 556, 557], "8446": 1043, "8449": 1043, "847": [231, 241, 253, 1015], "847222222222214": 192, "8473": 418, "8478": 1045, "848": [254, 1015], "8480": 1014, "8481": 1043, "8484": 1044, "84845219": 1027, "848743": 23, "849835": 52, "85": [4, 6, 15, 30, 48, 53, 68, 96, 143, 212, 215, 270, 302, 323, 327, 362, 417, 440, 499, 501, 556, 557, 598, 653, 659, 746, 754, 789, 801, 829, 993, 994, 1025, 1036], "850": [161, 163, 1015], "850000": 300, "850031": 186, "8508": 1045, "851": [85, 259], "8512": 1043, "8513": 620, "851348": 23, "8515": [418, 1043], "85151335": 418, "851792": 23, "85253229": 55, "852774": 122, "853174": 23, "853846": 186, "854": 257, "85418642": 362, "8549": 1043, "855": 6, "8554": 1044, "855465": 300, "857": [260, 352], "857400": 23, "858": [235, 241, 323, 1015], "858486250088675": 312, "85857475": 103, "8586": 1043, "859007": 23, "8591": 1043, "86": [6, 11, 30, 68, 143, 188, 307, 326, 327, 409, 789, 913, 993, 1025], "860": 213, "860000": 300, "861": [146, 377, 789, 790, 993], "861053": 23, "861106": 23, "8614": 1014, "861533": 23, "8617": 1044, "861868": 23, "8626621": 322, "8628": 636, "864": [230, 241, 1015], "8640": 168, "865400": 23, "866": 1001, "866161": 23, "866571": 23, "867": 72, "8672": 1043, "8676": [621, 1043], "8678": 624, "868": [17, 20, 122, 142, 1015], "868443": 9, "8698": 1043, "87": [4, 30, 68, 158, 257, 327, 598, 668, 778, 789, 801, 823, 881, 893, 993, 1029], "870": [146, 377], "871": [36, 78, 79, 271, 276, 412, 475, 1015], "871277": 23, "871965": 23, "872": [36, 1001], "8720": [557, 1044], "872186": 23, "873": [146, 377], "873724": 23, "87382323": 663, "874": [71, 789, 790, 993], "87421f": 90, "874771": 122, "875": [51, 121, 134, 150, 670, 1015], "875315171": 11, "875315173": 11, "875941": 23, "87600388": 152, "8768": 1043, "8769": 1045, "876mb": 351, "877": [6, 257], "877206": 257, "8773": 1045, "877981": 23, "878": 6, "878051": 186, "878964": 813, "87mb": 351, "88": [2, 4, 30, 188, 201, 258, 302, 323, 326, 327, 356, 375, 377, 380, 409, 412, 474, 647, 648, 653, 661, 662, 663, 682, 865, 941, 1025, 1036], "880": 2, "880191": 186, "880298": 186, "88089948": 418, "88096009": 103, "882": 259, "88213": 375, "882561": 259, "883": 47, "883065": 23, "8833": 499, "8835": 1043, "884": 283, "8845": 1043, "885": [6, 146, 186, 216, 330, 377, 1015], "8854": 1043, "8874": 1043, "8878": 836, "8880": 621, "8881": 624, "889": [257, 438], "88978285": 994, "89": [2, 30, 154, 188, 326, 327, 976, 988, 993, 1003, 1029, 1036, 1039, 1047], "890": 257, "891": [6, 323], "8922": 1043, "893055": 186, "8931": 1043, "8936": 1043, "894264": 240, "8947": 915, "8948018": 11, "89483932": 991, "8948621": 994, "896": 649, "8963": 262, "8965": 417, "8973": 1043, "898": [253, 319, 324, 1015], "89856": 813, "899": [30, 257], "8992": 1043, "8995": 1043, "8pt": 1003, "8x": 322, "8x8": [30, 87, 188, 230, 292, 302, 377, 503, 1026], "9": [2, 5, 7, 10, 11, 12, 22, 24, 25, 29, 30, 32, 40, 42, 48, 53, 56, 60, 62, 72, 80, 83, 89, 93, 118, 119, 121, 122, 128, 130, 136, 137, 138, 146, 152, 156, 162, 166, 167, 168, 178, 179, 188, 197, 210, 211, 214, 215, 218, 221, 230, 231, 232, 240, 243, 244, 245, 246, 252, 253, 262, 266, 268, 281, 285, 287, 288, 291, 292, 293, 299, 300, 302, 305, 307, 308, 309, 311, 312, 320, 321, 323, 324, 326, 327, 329, 330, 331, 339, 343, 348, 351, 362, 377, 378, 386, 393, 397, 401, 402, 407, 409, 411, 412, 414, 417, 418, 440, 444, 451, 458, 464, 483, 484, 485, 486, 491, 497, 499, 517, 519, 521, 528, 535, 539, 540, 541, 548, 561, 568, 571, 584, 592, 605, 606, 608, 609, 628, 631, 635, 638, 640, 647, 648, 653, 659, 661, 662, 663, 682, 683, 684, 688, 693, 700, 710, 724, 727, 742, 749, 770, 779, 780, 781, 798, 800, 802, 804, 805, 819, 822, 823, 829, 831, 834, 842, 843, 847, 848, 853, 856, 862, 863, 871, 877, 880, 941, 942, 946, 966, 982, 988, 989, 993, 997, 1003, 1007, 1008, 1020, 1024, 1029, 1032, 1034, 1037, 1038, 1039, 1041, 1050, 1052], "90": [4, 8, 11, 13, 30, 72, 96, 102, 103, 121, 122, 123, 125, 143, 154, 170, 177, 188, 194, 196, 199, 204, 215, 243, 268, 270, 307, 311, 321, 326, 327, 362, 366, 380, 386, 414, 564, 782, 801, 829, 834, 886, 988, 993, 1025, 1029, 1051, 1052], "900": [6, 48, 72, 73], "9000": 215, "900000e": 215, "9010": 1042, "9012": 1044, "9015": [664, 1044], "9019": 1043, "9022": 1043, "9024": 1043, "9026666666666666": 122, "903": [6, 253], "904": [168, 257, 411], "9041": 1044, "9043": 1044, "9044": [259, 1043], "90453403": 467, "904556e": 215, "904558e": 215, "904747e": 215, "904751e": 215, "905": 257, "905206": 52, "9067": 1043, "9069": 1045, "9078": 1043, "908": 993, "90809432": 103, "9085": 1044, "9087": 1050, "90885631": 51, "909": 6, "909293": 300, "909909": 122, "91": [4, 30, 49, 154, 254, 302, 323, 326, 327, 417, 988, 1025, 1029], "910": [2, 330, 332, 1015], "9100": 1043, "9101": [1029, 1044], "9105": 1043, "9108": 1043, "911": [42, 66, 1015], "912": 36, "912632": 300, "913": [417, 560], "914370e": 215, "914387e": 215, "9144052": 11, "9145": 1043, "914538e": 215, "914573e": 215, "9147": 1044, "9149": 1042, "915": [6, 122, 134, 1015], "9151": 1044, "9157": 1044, "916": 47, "91629073": 591, "916555e": 215, "91666667": 360, "9167": 320, "917": 47, "917281": 122, "9173": 1014, "917618e": 215, "92": [11, 30, 48, 96, 143, 173, 236, 257, 302, 326, 327, 339, 375, 377, 539, 541, 548, 563, 598, 697, 801, 815, 823, 988, 1029], "9206": 1043, "921": 171, "9219": 1043, "922": 1024, "9221": 650, "9222": 1044, "92222222": 1024, "9226260871125187": 267, "923": [213, 216, 1015], "923223": 813, "92329566": 103, "9234": 1044, "9239": 1043, "924": [6, 278, 279, 1015], "92461872": 101, "925": [219, 224, 993, 1015, 1024], "9250": 1046, "92529176": 994, "9257": 1044, "9259": 1043, "9266666666666666": 118, "927": 438, "92708922": 1024, "9274": 1046, "9277": 1043, "9278": 1043, "928": [79, 438], "9281173403067398": 322, "9284": 1043, "928571": 215, "9288": 1046, "9289": 1043, "93": [4, 30, 146, 197, 240, 257, 327, 351, 377, 647, 648, 653, 661, 662, 663, 682, 778, 789, 801, 823, 829, 913, 988, 993, 1025, 1029], "930": 1024, "9300": 259, "930000": 300, "9302": 1043, "93036212": 1024, "9304": 1044, "931": 276, "93192644": 1024, "932": 6, "9326": 1014, "93271427": 152, "933": [6, 72, 414], "933197": 240, "933253": 122, "9333": 414, "933333": [137, 854], "934": 1024, "935": 1043, "9354": 1044, "936": [6, 438, 993], "936480": 23, "9372": 1044, "937443": 23, "937532": 23, "937597": 23, "9378": 1044, "938": [6, 133, 134, 193, 786, 993, 1015, 1024], "938613": 23, "939": [669, 1024], "9399": 1044, "93fletcher": 989, "93goldfarb": 989, "93lindenstrauss_lemma": 899, "93shanno_algorithm": 989, "94": [2, 30, 32, 52, 95, 118, 196, 234, 272, 307, 326, 327, 409, 417, 664, 789, 823, 988, 993, 994, 1003, 1029, 1036], "940": 2, "9400": 259, "940000": 300, "940184": 122, "940201": 23, "940374": 23, "9403917": 83, "941": 6, "94114649": [845, 846], "9416": 11, "9417": 672, "943": 1024, "9431": 836, "944": [6, 1024], "9456": 1044, "94592424": 663, "946": 79, "947": [331, 332, 1015], "94731329": 668, "9473684210526315": 315, "947958": 982, "948": [223, 224, 786, 993, 1015], "9484": 1044, "949": 6, "9490": 377, "9492": 1044, "9497": 1044, "9499": 639, "95": [4, 11, 13, 30, 42, 50, 55, 65, 89, 99, 118, 122, 125, 156, 167, 176, 197, 199, 204, 215, 245, 246, 249, 259, 260, 288, 296, 307, 311, 319, 327, 339, 362, 417, 528, 633, 634, 637, 648, 662, 749, 823, 902, 989, 993, 994, 1006, 1029, 1039], "950": [6, 79, 81, 1015], "950000047683716": 360, "9502547": 181, "9507": 1043, "9515": 1044, "951751e": 215, "951958": 982, "952": [6, 47], "9521": 1044, "952289": 186, "9524": 1044, "953": [6, 47, 250], "953061": 301, "95373": 375, "954": [317, 324, 881, 893, 1015], "95433992": 83, "955": [283, 414, 655], "9558": 1043, "955989": 982, "956": [6, 13, 1024], "956038": 300, "9565": 377, "9569": 1044, "957": [6, 310, 729, 993], "9579": 1044, "958": [6, 41, 66, 1015], "9583": 409, "9584": [628, 1043], "959": [881, 893], "9593": 1043, "9595": 675, "9597": 1046, "9599": 1044, "95th": [11, 122, 125, 749], "96": [2, 11, 30, 46, 60, 156, 226, 236, 257, 302, 307, 310, 311, 323, 326, 327, 377, 414, 554, 683, 684, 712, 823, 982, 988, 993, 1003, 1036], "9600": 1043, "9604": 1043, "961": 862, "961009": 982, "961111": 137, "9612": 1044, "961904": 854, "96190476": 996, "962": 6, "96228895": 103, "9623": 1043, "963": 1024, "9630": 676, "96362897": 1024, "9637883": 1024, "96388889": 1024, "9641": 1043, "9647": 1044, "965": [6, 144, 147, 993, 1015], "9655": 1044, "9656": 1044, "96578289": 1024, "966": 4, "9666": 544, "96681476": 1024, "966981": 186, "967": [72, 993, 997], "9677": 1043, "968": [154, 166, 168, 257], "9681": 1044, "9686": 1044, "969": 374, "9693": 1043, "9694149248180188": 321, "9697": 1043, "97": [30, 102, 146, 170, 234, 249, 327, 339, 377, 386, 393, 414, 647, 648, 653, 659, 661, 662, 663, 682, 683, 684, 988, 994, 1003, 1036], "9701": 1044, "9707": 1044, "9711": 1043, "9717": 1043, "972": [35, 66, 1015], "9723": 1044, "9726": 1044, "973": [352, 414], "9731": 1044, "9733": [621, 624], "973554": 320, "973770": 186, "97435897": 360, "974e": 418, "975": [146, 166, 1008], "9750": 1043, "97545464": 240, "975455": 240, "9759": 6, "976": [189, 267], "976158": 375, "977": [2, 8, 14, 414, 1015], "9771": 555, "9772": 1044, "9775": 1044, "977890": 248, "978": 104, "9781605585161": 410, "978444": 300, "9786": 1044, "9788": 1043, "979": [4, 14, 1015], "98": [30, 40, 42, 52, 60, 62, 80, 96, 146, 226, 236, 257, 299, 307, 323, 327, 377, 384, 414, 417, 660, 840, 896, 988, 993, 995, 1024, 1029], "980": [13, 14, 347, 349, 1015], "980000": 300, "9802": 1043, "981": [146, 377, 993], "9815": 1043, "9816": 1044, "9821": 851, "983": 729, "9830": 1043, "9832": 1044, "9833": 499, "98350372e": 178, "983667": 982, "9837": 1044, "9843": 1049, "9847": 1043, "984ea3": [42, 60], "9850": 197, "9851": 1044, "9858": 1044, "98633022": 103, "986429": 301, "9865": 1043, "9866": [611, 620, 623], "9866666666666667": 118, "9868": [899, 1005], "986989": 262, "987": [267, 352], "9875": 1044, "98809919e": 178, "9884": 680, "9885": 672, "9886": 1044, "989341": 186, "9899465811965812": 315, "98mb": 351, "99": [4, 11, 23, 30, 42, 49, 60, 93, 215, 226, 230, 236, 243, 245, 257, 260, 305, 327, 367, 373, 377, 384, 414, 417, 418, 493, 648, 662, 672, 683, 684, 789, 823, 852, 962, 988, 993, 1003, 1007, 1025, 1031, 1038], "990": [670, 993], "9900": 215, "9907": 1045, "9908": 1044, "991": [267, 993], "9915849773450223": 149, "991653": 300, "9922": 1043, "9924": 542, "99244": 542, "992766": 300, "993": [267, 352], "9933333333333333": 118, "9935": 836, "993879": 300, "9939": 1044, "993919": 9, "994": 283, "9945": 1043, "995": 189, "9951": 1046, "9969977": 11, "997": [5, 38, 146], "9978": 1049, "9979": 2, "9979281": 11, "998": [146, 997], "9980": [2, 1044], "9981": 2, "998142": 11, "998273": 253, "9987": 640, "99891212e": 178, "999": [215, 253, 259, 384, 417, 718, 862, 863], "9990": 215, "9991": [665, 666, 1044], "99918858": 103, "9993": [2, 654, 656, 1044], "9994": 664, "9995": 2, "9996": 652, "999791942438998": 316, "9998": [9, 296], "9999": [9, 215, 296, 329, 499, 628, 1044], "99999": 329, "999999": [42, 60], "999999999999999e": 136, "A": [0, 12, 15, 16, 17, 20, 23, 25, 29, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 51, 52, 55, 57, 58, 59, 60, 62, 65, 66, 73, 76, 79, 84, 90, 94, 95, 96, 100, 110, 111, 116, 117, 119, 129, 133, 136, 137, 138, 143, 145, 149, 152, 154, 156, 157, 158, 164, 167, 168, 181, 185, 198, 201, 207, 211, 212, 215, 219, 233, 236, 246, 253, 259, 260, 262, 266, 274, 278, 299, 305, 307, 310, 315, 317, 320, 327, 328, 329, 331, 333, 339, 343, 344, 351, 352, 353, 358, 360, 362, 366, 368, 369, 374, 375, 377, 378, 380, 382, 383, 385, 388, 392, 393, 394, 395, 396, 400, 404, 406, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 491, 492, 493, 495, 498, 501, 502, 503, 504, 505, 509, 511, 512, 513, 514, 515, 521, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 618, 621, 628, 629, 630, 631, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 711, 712, 713, 717, 718, 720, 722, 723, 724, 725, 726, 727, 732, 737, 738, 741, 743, 744, 745, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 765, 767, 768, 775, 776, 777, 778, 779, 782, 789, 791, 792, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 940, 941, 942, 949, 950, 952, 953, 978, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1020, 1021, 1027, 1028, 1029, 1031, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "AND": 736, "AS": 422, "AT": [375, 496], "And": [11, 164, 217, 218, 219, 220, 223, 224, 233, 259, 351, 388, 403, 410, 414, 418, 531, 589, 590, 592, 693, 694, 989, 993, 1011, 1015, 1043], "As": [0, 2, 5, 18, 23, 28, 38, 41, 51, 53, 55, 56, 64, 80, 84, 98, 109, 110, 116, 119, 120, 121, 123, 125, 129, 141, 144, 149, 154, 162, 167, 169, 170, 173, 176, 179, 181, 186, 188, 197, 201, 205, 215, 223, 233, 246, 253, 254, 256, 257, 259, 260, 262, 272, 281, 288, 306, 318, 329, 339, 343, 352, 353, 356, 358, 359, 362, 366, 367, 375, 379, 380, 382, 384, 385, 392, 393, 394, 403, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 447, 494, 555, 563, 567, 620, 633, 656, 657, 673, 675, 688, 736, 759, 765, 847, 848, 849, 851, 853, 884, 982, 987, 989, 990, 992, 993, 994, 996, 1000, 1003, 1007, 1008, 1009, 1013, 1014, 1018, 1020, 1024, 1027, 1029, 1036, 1042, 1047, 1052, 1054], "At": [11, 73, 109, 202, 233, 253, 271, 278, 281, 326, 329, 366, 367, 384, 395, 400, 405, 413, 417, 438, 441, 466, 589, 590, 592, 603, 833, 835, 872, 957, 982, 989, 992, 994, 998, 1007, 1018], "Be": [143, 158, 351, 380, 412, 568, 569, 649, 655, 656, 657, 659, 660, 670, 681, 705, 819, 820, 880, 1003, 1033, 1037], "Being": [380, 394, 395, 989, 996], "But": [2, 7, 51, 166, 198, 199, 259, 283, 305, 380, 392, 410, 413, 416, 417, 463, 747, 913, 914, 982, 993, 1008, 1014], "By": [17, 43, 93, 125, 126, 127, 176, 201, 233, 253, 268, 278, 305, 315, 321, 322, 343, 351, 367, 380, 382, 386, 387, 394, 400, 409, 410, 411, 413, 414, 415, 416, 417, 419, 439, 442, 446, 447, 451, 465, 468, 469, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 525, 550, 551, 558, 559, 560, 561, 565, 566, 586, 587, 589, 590, 592, 607, 610, 633, 634, 672, 674, 676, 678, 691, 693, 695, 698, 700, 701, 703, 704, 719, 730, 731, 735, 739, 784, 785, 788, 795, 797, 804, 805, 851, 865, 866, 878, 879, 881, 883, 893, 895, 903, 908, 909, 913, 914, 915, 916, 925, 926, 961, 982, 983, 985, 989, 993, 1000, 1001, 1003, 1005, 1009, 1020, 1024, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054], "For": [2, 6, 7, 10, 11, 12, 17, 25, 30, 35, 38, 42, 44, 46, 47, 51, 53, 55, 56, 58, 65, 71, 78, 84, 89, 94, 112, 114, 117, 122, 123, 125, 126, 128, 142, 143, 146, 149, 151, 156, 161, 162, 167, 168, 181, 185, 186, 197, 198, 201, 202, 205, 214, 215, 218, 220, 223, 226, 227, 229, 230, 231, 233, 240, 248, 253, 256, 259, 260, 266, 273, 275, 281, 283, 293, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 331, 339, 341, 343, 346, 351, 352, 353, 356, 357, 360, 362, 366, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 400, 405, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 426, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 473, 475, 483, 484, 485, 486, 490, 495, 497, 499, 504, 513, 515, 516, 520, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 582, 583, 584, 585, 589, 590, 592, 593, 594, 595, 598, 603, 608, 609, 610, 611, 612, 615, 620, 623, 624, 628, 629, 630, 631, 632, 633, 634, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 691, 693, 694, 696, 702, 705, 707, 708, 730, 731, 739, 742, 743, 764, 770, 779, 784, 785, 788, 789, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 925, 931, 956, 977, 982, 983, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1012, 1017, 1018, 1020, 1027, 1028, 1029, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "If": [0, 2, 9, 11, 25, 30, 40, 47, 53, 69, 80, 96, 107, 117, 122, 125, 130, 158, 162, 167, 178, 197, 212, 214, 215, 233, 236, 253, 259, 266, 273, 275, 288, 296, 305, 310, 311, 339, 343, 346, 347, 351, 352, 353, 360, 362, 366, 367, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 397, 400, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 431, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 516, 520, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 712, 713, 714, 715, 717, 718, 719, 723, 727, 728, 729, 730, 731, 732, 733, 737, 739, 742, 743, 746, 747, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 813, 815, 818, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 934, 940, 942, 944, 946, 950, 952, 956, 959, 961, 962, 964, 967, 968, 974, 977, 978, 979, 980, 982, 983, 985, 987, 988, 989, 990, 991, 993, 996, 997, 999, 1000, 1003, 1005, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1020, 1021, 1027, 1028, 1029, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1052, 1054], "In": [0, 2, 3, 5, 7, 9, 10, 11, 12, 13, 23, 24, 25, 32, 35, 37, 46, 47, 51, 53, 55, 56, 58, 64, 65, 69, 70, 72, 73, 76, 78, 79, 80, 84, 87, 88, 93, 95, 98, 100, 101, 107, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 130, 133, 142, 143, 145, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 181, 185, 186, 188, 192, 197, 198, 199, 200, 201, 202, 205, 214, 215, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 248, 252, 253, 256, 257, 259, 260, 261, 262, 264, 265, 268, 269, 271, 273, 274, 275, 278, 283, 286, 289, 290, 292, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 319, 320, 322, 328, 330, 339, 343, 346, 351, 352, 353, 356, 360, 362, 366, 367, 368, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 438, 441, 442, 443, 444, 445, 448, 449, 450, 453, 463, 464, 465, 470, 473, 476, 494, 497, 504, 509, 510, 512, 524, 535, 537, 539, 541, 542, 543, 545, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 592, 603, 607, 610, 611, 612, 631, 633, 634, 635, 637, 644, 645, 646, 648, 649, 650, 652, 654, 656, 659, 660, 662, 664, 666, 667, 669, 670, 675, 676, 677, 680, 681, 685, 686, 687, 697, 700, 704, 713, 719, 721, 727, 729, 730, 735, 736, 739, 741, 743, 755, 757, 758, 782, 784, 786, 789, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 870, 872, 878, 879, 883, 884, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 910, 913, 915, 920, 924, 926, 942, 982, 983, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1018, 1020, 1027, 1028, 1029, 1033, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "Ines": 1053, "It": [0, 2, 5, 6, 7, 11, 18, 23, 32, 35, 38, 51, 53, 56, 70, 76, 78, 80, 93, 96, 97, 102, 109, 112, 114, 115, 118, 120, 122, 130, 146, 154, 155, 156, 161, 162, 167, 168, 169, 177, 181, 185, 186, 194, 197, 201, 211, 214, 215, 218, 219, 226, 231, 233, 236, 253, 254, 255, 257, 259, 260, 262, 265, 266, 273, 278, 283, 289, 290, 291, 293, 294, 296, 305, 309, 310, 312, 315, 321, 335, 339, 343, 346, 351, 352, 353, 362, 366, 367, 368, 373, 375, 377, 378, 380, 382, 384, 385, 386, 388, 389, 392, 393, 394, 397, 400, 403, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 438, 439, 442, 443, 444, 445, 446, 448, 449, 450, 453, 460, 463, 468, 469, 470, 475, 479, 486, 488, 497, 509, 516, 525, 534, 536, 537, 539, 541, 542, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 590, 597, 603, 607, 608, 609, 612, 615, 616, 620, 621, 623, 624, 628, 631, 632, 633, 634, 642, 643, 644, 647, 648, 651, 653, 654, 655, 656, 659, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 675, 677, 678, 679, 682, 683, 684, 685, 688, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 705, 709, 710, 711, 717, 724, 735, 743, 744, 748, 759, 760, 763, 766, 782, 784, 789, 800, 801, 803, 804, 805, 807, 813, 814, 815, 823, 824, 826, 829, 832, 841, 842, 847, 848, 849, 851, 854, 855, 856, 857, 861, 862, 863, 867, 868, 869, 873, 874, 875, 879, 882, 884, 894, 897, 898, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 929, 942, 950, 951, 961, 964, 967, 969, 970, 971, 972, 973, 974, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1013, 1018, 1020, 1026, 1027, 1028, 1029, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "Its": [76, 257, 261, 376, 382, 394, 415, 420, 539, 988, 989, 998, 1001, 1007, 1013, 1018, 1039, 1053], "NOT": [233, 289, 377, 383, 811, 845, 846], "Nearness": 628, "No": [22, 111, 124, 181, 189, 203, 205, 206, 233, 253, 327, 344, 346, 357, 377, 388, 397, 410, 475, 560, 561, 591, 592, 636, 646, 665, 677, 679, 686, 687, 798, 989, 1053], "Not": [53, 136, 168, 366, 392, 410, 428, 429, 432, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 473, 474, 475, 476, 477, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 564, 567, 570, 571, 582, 583, 584, 589, 590, 592, 628, 629, 630, 631, 678, 689, 690, 691, 692, 694, 795, 798, 799, 801, 804, 805, 815, 842, 845, 846, 849, 850, 851, 853, 857, 869, 877, 880, 881, 883, 886, 897, 898, 909, 993, 999, 1013, 1045], "OF": 377, "ON": 320, "ONE": [374, 608, 609], "OR": [305, 410, 421, 445, 1047], "Of": [7, 23, 25, 161, 273, 366, 382, 410, 418, 983], "On": [2, 10, 11, 15, 24, 65, 69, 70, 83, 84, 98, 109, 112, 114, 116, 117, 122, 126, 127, 130, 133, 141, 143, 153, 154, 167, 168, 169, 178, 185, 186, 199, 201, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 243, 245, 248, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 271, 273, 302, 305, 307, 309, 310, 311, 316, 317, 319, 320, 322, 328, 339, 346, 360, 366, 378, 381, 382, 384, 392, 394, 405, 407, 410, 414, 415, 417, 419, 420, 644, 657, 692, 736, 762, 870, 886, 982, 986, 989, 992, 993, 995, 999, 1001, 1006, 1008, 1024, 1027], "One": [2, 7, 10, 22, 28, 47, 53, 89, 98, 100, 117, 119, 122, 125, 126, 164, 167, 170, 175, 201, 206, 212, 216, 226, 237, 248, 253, 259, 266, 269, 278, 281, 289, 290, 292, 306, 322, 334, 336, 337, 347, 349, 352, 366, 377, 380, 393, 394, 403, 409, 410, 413, 415, 416, 417, 418, 419, 421, 445, 450, 473, 475, 479, 513, 567, 632, 640, 659, 667, 669, 674, 676, 677, 678, 789, 808, 809, 833, 834, 835, 866, 867, 878, 909, 956, 983, 985, 989, 990, 991, 992, 993, 994, 996, 997, 1000, 1001, 1003, 1008, 1015, 1016, 1031, 1040, 1042, 1049, 1051], "Or": [351, 360, 414, 415, 878, 993, 999, 1007], "Such": [12, 126, 149, 154, 166, 176, 181, 186, 198, 253, 262, 351, 394, 395, 403, 414, 415, 417, 556, 557, 657, 983, 993, 996, 1003, 1009, 1027, 1046, 1051, 1053], "THE": 377, "That": [11, 25, 93, 109, 125, 146, 167, 186, 226, 259, 263, 352, 353, 367, 374, 388, 394, 409, 414, 419, 420, 444, 447, 448, 558, 565, 594, 819, 913, 914, 982, 990, 991, 999, 1009, 1045, 1046], "The": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 24, 25, 28, 29, 30, 32, 35, 37, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 63, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 86, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 218, 220, 221, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 248, 249, 252, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 336, 337, 339, 343, 344, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 753, 754, 755, 756, 757, 758, 759, 760, 763, 765, 766, 767, 768, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 936, 937, 938, 939, 940, 941, 942, 944, 945, 949, 950, 953, 956, 958, 959, 960, 961, 962, 963, 964, 967, 975, 976, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "Their": [167, 375, 377, 395, 410, 645, 1036], "Then": [69, 110, 114, 117, 125, 130, 133, 143, 167, 173, 181, 185, 197, 201, 222, 227, 233, 239, 253, 261, 262, 278, 351, 374, 384, 386, 388, 397, 406, 407, 410, 413, 415, 418, 419, 571, 594, 720, 757, 801, 815, 905, 906, 983, 992, 993, 999, 1008, 1029, 1045], "There": [37, 44, 115, 149, 215, 222, 233, 249, 254, 256, 259, 281, 351, 373, 375, 377, 380, 381, 382, 385, 392, 394, 395, 397, 406, 408, 410, 415, 417, 418, 419, 447, 453, 463, 535, 554, 555, 560, 561, 589, 590, 592, 607, 646, 983, 989, 990, 991, 992, 993, 996, 1000, 1003, 1007, 1008, 1009, 1012, 1017, 1028, 1036, 1044], "These": [2, 3, 5, 25, 49, 93, 95, 114, 118, 164, 168, 186, 197, 198, 199, 227, 253, 266, 278, 283, 287, 302, 305, 312, 314, 319, 327, 329, 362, 366, 367, 373, 376, 377, 380, 382, 384, 387, 389, 392, 394, 397, 400, 403, 406, 407, 408, 409, 410, 413, 415, 417, 418, 419, 420, 443, 447, 449, 499, 509, 510, 516, 539, 568, 569, 603, 604, 669, 677, 678, 700, 707, 734, 779, 795, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 830, 832, 850, 851, 870, 982, 984, 987, 989, 990, 993, 994, 1004, 1006, 1008, 1013, 1020, 1024, 1029, 1036, 1042, 1044, 1045, 1046, 1049, 1053], "To": [2, 6, 24, 25, 30, 44, 53, 55, 76, 78, 80, 84, 98, 109, 119, 122, 123, 132, 136, 146, 154, 155, 158, 161, 162, 166, 167, 173, 178, 181, 185, 197, 198, 199, 201, 205, 215, 230, 231, 233, 236, 238, 240, 248, 253, 254, 256, 257, 259, 261, 262, 264, 266, 273, 278, 281, 301, 305, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 348, 352, 356, 362, 366, 367, 373, 374, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 403, 405, 406, 410, 411, 412, 413, 414, 415, 417, 418, 447, 449, 450, 451, 462, 465, 468, 493, 497, 503, 504, 508, 509, 510, 532, 538, 539, 540, 542, 544, 545, 546, 547, 558, 559, 560, 561, 565, 566, 570, 598, 612, 628, 633, 647, 648, 653, 654, 657, 659, 660, 661, 662, 663, 664, 685, 701, 713, 729, 764, 786, 794, 804, 805, 827, 834, 865, 876, 881, 895, 896, 905, 906, 910, 913, 914, 915, 916, 932, 942, 961, 980, 982, 983, 985, 988, 989, 990, 991, 993, 994, 995, 996, 999, 1000, 1003, 1007, 1008, 1009, 1018, 1020, 1024, 1026, 1027, 1029, 1036, 1039, 1041, 1042, 1043, 1045, 1047], "Will": [380, 498, 535, 628, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 674, 676, 708, 715, 789, 870, 874, 884, 885, 1039, 1040, 1042, 1044, 1054], "Willing": [1042, 1043], "With": [22, 32, 42, 65, 73, 88, 98, 125, 127, 142, 164, 168, 197, 199, 225, 227, 232, 234, 240, 241, 259, 287, 366, 369, 375, 378, 380, 382, 394, 400, 410, 411, 414, 417, 419, 438, 440, 502, 542, 583, 633, 634, 659, 863, 866, 868, 879, 885, 886, 912, 914, 986, 989, 990, 993, 994, 996, 997, 1000, 1007, 1009, 1015, 1020, 1021, 1028, 1033, 1039, 1043, 1044, 1046, 1048, 1050], "_": [2, 3, 5, 6, 7, 9, 10, 11, 13, 18, 23, 24, 25, 28, 30, 31, 38, 41, 48, 51, 53, 56, 61, 65, 68, 80, 88, 90, 93, 98, 100, 102, 112, 113, 114, 125, 141, 149, 154, 155, 156, 166, 167, 168, 170, 173, 176, 180, 181, 182, 184, 185, 186, 189, 194, 195, 197, 199, 201, 210, 211, 214, 219, 222, 227, 232, 236, 240, 253, 254, 259, 261, 262, 263, 265, 266, 268, 273, 278, 286, 291, 294, 302, 307, 310, 311, 312, 316, 319, 320, 321, 327, 328, 338, 343, 346, 351, 353, 357, 382, 386, 394, 415, 417, 418, 422, 447, 479, 533, 534, 535, 536, 537, 539, 540, 541, 544, 546, 547, 548, 567, 598, 647, 648, 653, 654, 661, 662, 663, 664, 682, 683, 684, 685, 689, 690, 691, 692, 694, 696, 697, 699, 701, 711, 765, 801, 807, 815, 824, 849, 857, 878, 879, 886, 983, 989, 990, 993, 995, 996, 997, 1000, 1001, 1003, 1008, 1009, 1027, 1028, 1043], "_0": [196, 686, 989, 993, 1008], "_1": [318, 343, 412, 415, 418, 532, 538, 539, 541, 546, 547, 548, 647, 648, 653, 654, 655, 656, 657, 661, 662, 663, 664, 682, 683, 684, 685, 767, 989, 991, 993, 1008], "_11": 653, "_2": [79, 154, 343, 415, 418, 532, 538, 546, 547, 647, 653, 989, 997, 1007, 1008], "_21": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "__": [71, 260, 394, 411, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 1025, 1044, 1045], "______________________________________________________________________": 327, "________________________________________________________________________________": [9, 52, 351], "__________________________________________________________________________________": 56, "________________________________________________________ward_tre": 52, "_____________________________________________________f_regress": 52, "__add__": [420, 625], "__array__": [1039, 1046], "__array_function__": [1014, 1046], "__c": 382, "__call__": [157, 339, 394, 418, 420, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 1043], "__class__": [161, 197, 199, 233, 236, 261, 307, 351, 352, 353, 387], "__class_weight": 382, "__dataframe__": [562, 563], "__doc__": [41, 73, 154, 246, 394], "__file__": [6, 8, 1049], "__getattr__": 382, "__getitem__": 1054, "__getstate__": [1043, 1051], "__init__": [6, 54, 107, 157, 233, 283, 339, 380, 382, 384, 385, 386, 387, 394, 418, 424, 427, 430, 433, 434, 619, 954, 1037, 1042, 1044, 1049, 1050, 1051, 1052], "__init_subclass__": 382, "__len__": 1045, "__main__": [330, 392], "__metadata_request__fit": 233, "__mul__": 622, "__mul___": 420, "__name__": [5, 23, 59, 161, 197, 199, 233, 236, 240, 254, 261, 307, 330, 351, 352, 353, 387, 392, 878], "__pow__": [420, 617], "__repr__": [382, 1014, 1045], "__sklearn_clone__": [382, 435, 1052], "__sklearn_is_fitted__": [6, 25, 54, 105, 106, 157, 164, 233, 283, 382, 424, 427, 977, 1015, 1049, 1050], "__traceback__": [572, 573, 574, 575, 576, 577, 578, 579], "__version__": 384, "_agglom": 52, "_array_api": 405, "_bag": 934, "_base": [244, 382], "_basehmm": 1036, "_bay": 934, "_birch": 1046, "_breast_cancer_dataset": 146, "_build": 380, "_c_step": 1043, "_cfnode": 443, "_check_bounds_param": 1048, "_check_param_grid": 1042, "_check_sample_weight": 1049, "_check_stop_list": 592, "_check_target": 1043, "_check_x": 1046, "_class": 993, "_class_cov": 1044, "_class_mean": 1044, "_classif": 302, "_classifier_ha": 54, "_column_transform": [69, 130], "_compon": [230, 537], "_coo": [586, 587], "_count_nonzero_coeffici": 5, "_criterion": 1044, "_csr": 878, "_cython_bla": 381, "_devianc": 993, "_diabetes_dataset": 146, "_distn_infrastructur": 271, "_doc_link_modul": 382, "_doc_link_templ": 382, "_doc_link_url_param_gener": 382, "_dotbla": 386, "_encod": 1044, "_error": 993, "_estimator_html_repr": 938, "_estimator_typ": [382, 394, 427, 428, 429, 432, 433, 1041], "_estimator_with_converted_arrai": 405, "_f": [157, 989], "_featur": [415, 539, 541, 548], "_fit_and_scor": 1044, "_fit_stag": [560, 561], "_fro": [532, 538, 546, 547, 647, 648, 653, 661, 662, 663, 682], "_g": 157, "_gb": 1046, "_generate_center_coordin": 12, "_get_support_mask": 602, "_get_tag": [382, 1047], "_get_warnings_filters_info_list": 367, "_gpr": 158, "_h": [539, 541, 548], "_hist_gradient_boost": 384, "_i": [407, 417, 984, 989, 993, 997, 1008], "_idx": 394, "_init": 177, "_init_t": 1007, "_initialize_nmf": 386, "_is_fit": 107, "_iter": 384, "_j": [407, 984], "_k": [412, 987, 989], "_l": 993, "_learntselectormixin": 1041, "_level": [420, 626], "_lfw": 1025, "_logist": 380, "_loss": [394, 993], "_m": 1009, "_mean": 311, "_mean_frequency_by_risk_group": 197, "_method": 953, "_more_tag": 382, "_my": 380, "_n": [418, 993], "_n_cluster": 380, "_n_compon": 548, "_n_features_out": 426, "_name_estim": 1046, "_neg": 386, "_newton_cg": 1047, "_nls_subproblem": 386, "_nmf": 386, "_not_in_sphinx": [6, 8], "_num_thread": 367, "_obj": 953, "_openmp_help": 381, "_pairwis": [1046, 1048], "_pairwise_cal": 629, "_plain_sgd": 1051, "_plot": 326, "_po": 386, "_posterior_mod": 611, "_preprocess_data": 688, "_pvalu": 1036, "_rand": 362, "_ratio": [539, 541, 548], "_request": [233, 400, 1054], "_required_paramet": [382, 430], "_reset": 6, "_run_search": 1044, "_safe_index": [1049, 1053, 1054], "_safe_split": 382, "_safe_tag": 1047, "_sag": 1045, "_sampl": [230, 415, 539, 541, 548], "_samples_gener": 246, "_score": [394, 801, 815, 828, 993, 1036, 1049], "_search": 1042, "_serial": 233, "_sgd_fast": 1051, "_skip_test": 382, "_spars": 386, "_sparse_fit": 1046, "_split": 254, "_std": 311, "_t": 1007, "_test": [205, 307, 367, 382, 1049], "_test_scor": [259, 473, 595, 1049], "_transform_select": 1042, "_tree": [913, 914, 915, 916, 1037, 1039], "_typedef": 381, "_univariate_select": 52, "_valu": [420, 614], "_w": [539, 541, 548], "_weight": [12, 215], "_weight_boost": 934, "_weighted_percentil": 1049, "_x_is_even": 954, "_xfail_check": 382, "a16": [1046, 1047], "a65628": [42, 60], "a674e682c281": 385, "a_": [94, 406, 410, 539, 541, 548, 989, 1028], "a_column": 720, "a_i": 410, "a_mask": 268, "a_n": 406, "a_row": 720, "a_tru": 268, "aaa": 157, "aaaaff": [288, 291], "aaai": [410, 421, 445, 840, 995], "aact": 157, "aaffaa": 291, "aagaard": 1040, "aakanksha": 1044, "aapl": 10, "aarch64": 388, "aaron": [495, 989, 1039, 1040, 1041, 1046], "aarshai": [1043, 1044], "aashil": 1043, "ab": [10, 15, 38, 73, 97, 103, 111, 119, 130, 142, 146, 170, 184, 188, 208, 210, 213, 215, 221, 259, 305, 323, 337, 348, 410, 539, 541, 548, 628, 747, 845, 846, 880, 993], "ab_mask": 268, "abadi": [1042, 1043], "abandon": 380, "abati": [1051, 1053, 1055], "abbi": [1046, 1047], "abbrevi": 700, "abdela": 1045, "abdulelah": 1049, "abdur": 1046, "abenbihi": 1046, "abhijeet": 1038, "abhinav": [1046, 1049], "abhishek": [1039, 1040, 1046, 1050, 1052, 1053], "abhyudai": 1043, "abi": 384, "abid": 380, "abil": [7, 11, 59, 78, 94, 122, 148, 149, 150, 154, 156, 158, 159, 161, 164, 166, 167, 169, 197, 201, 215, 226, 351, 368, 397, 417, 418, 420, 612, 623, 626, 783, 784, 785, 788, 789, 990, 993, 996, 999, 1009, 1014, 1015, 1036, 1038, 1043, 1045, 1049, 1050], "abirami": 410, "abl": [2, 3, 7, 22, 45, 53, 59, 80, 84, 97, 98, 125, 127, 155, 167, 170, 181, 186, 197, 213, 215, 222, 265, 270, 322, 323, 339, 362, 366, 367, 368, 374, 378, 380, 382, 384, 385, 392, 403, 410, 412, 414, 418, 486, 504, 535, 830, 877, 982, 983, 989, 992, 993, 994, 999, 1003, 1006, 1009, 1010, 1014, 1020, 1028, 1029, 1042, 1043, 1047, 1054], "ablin": 1051, "abnorm": [211, 226, 289, 338, 375, 493, 564, 851, 999, 1044], "abnormal_termination_in_lnsrch": 158, "abo7atm": 1048, "abort": 693, "about": [5, 9, 27, 42, 51, 55, 60, 68, 84, 87, 118, 143, 158, 164, 166, 170, 201, 214, 226, 233, 253, 256, 257, 259, 261, 266, 281, 288, 310, 315, 317, 318, 319, 320, 321, 327, 351, 353, 360, 362, 366, 367, 369, 373, 375, 379, 380, 384, 385, 386, 388, 393, 394, 395, 403, 408, 409, 414, 415, 418, 420, 439, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 516, 562, 563, 594, 595, 608, 609, 615, 641, 677, 679, 744, 801, 807, 815, 824, 834, 884, 926, 983, 989, 990, 992, 994, 996, 999, 1000, 1003, 1004, 1006, 1008, 1009, 1011, 1013, 1017, 1018, 1020, 1021, 1027, 1029, 1041, 1042, 1052, 1054], "abov": [2, 23, 24, 25, 35, 42, 64, 68, 111, 114, 115, 122, 125, 133, 145, 146, 167, 168, 183, 197, 199, 203, 208, 230, 233, 234, 253, 259, 265, 278, 288, 307, 310, 311, 316, 318, 322, 343, 352, 353, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 382, 384, 386, 392, 394, 395, 407, 410, 411, 412, 414, 415, 416, 417, 418, 420, 442, 446, 465, 468, 490, 496, 497, 498, 524, 591, 635, 705, 756, 801, 805, 813, 815, 826, 868, 869, 882, 888, 894, 902, 956, 982, 983, 985, 987, 989, 990, 993, 996, 998, 1000, 1003, 1007, 1008, 1009, 1014, 1020, 1021, 1027, 1028, 1029, 1042, 1054], "abraham": [1036, 1037, 1042, 1046], "abrahamowicz": 1003, "absenc": [226, 262, 394, 713, 868, 992, 993], "absent": [394, 418, 730, 755, 826], "absgrad": 1047, "absher": 1038, "absolut": [2, 11, 73, 97, 119, 146, 167, 197, 199, 203, 215, 323, 382, 403, 410, 412, 414, 415, 417, 418, 419, 420, 421, 445, 451, 457, 458, 532, 538, 543, 546, 547, 549, 550, 551, 559, 561, 562, 563, 566, 589, 591, 592, 594, 598, 603, 620, 628, 633, 647, 650, 651, 653, 655, 657, 672, 673, 675, 677, 679, 683, 684, 705, 718, 722, 737, 738, 746, 747, 749, 754, 756, 758, 796, 803, 807, 818, 821, 829, 831, 843, 845, 846, 850, 869, 874, 877, 890, 914, 916, 979, 989, 990, 1003, 1007, 1009, 1027, 1028, 1037, 1042, 1047, 1048, 1049, 1050, 1053], "absolute_error": [11, 417, 559, 561, 563, 566, 672, 914, 916, 1049], "absolute_loss": 1049, "absolutelynowarranti": 1044, "absp": 861, "abstain": 535, "abstract": [394, 415, 420, 619, 770, 1013, 1036], "abstractmethod": 1046, "absurd": 1000, "abund": 375, "ac": [236, 531, 665, 686, 687, 989, 1006, 1029], "acad": [690, 694, 990], "academ": [414, 1018], "academi": [78, 852], "acc": 121, "acc_clf1": 31, "acc_clf2": 31, "acc_clf3": 31, "acc_histori": 6, "acc_knn": 292, "acceler": [231, 320, 366, 392, 405, 410, 469, 693, 903, 990, 1013, 1018, 1045, 1049, 1051, 1053], "accent": [347, 589, 590, 592, 1046], "accept": [146, 149, 233, 253, 256, 315, 339, 351, 353, 362, 366, 367, 374, 380, 382, 389, 392, 393, 394, 395, 400, 405, 410, 418, 438, 442, 445, 446, 449, 462, 465, 468, 509, 510, 556, 557, 562, 563, 570, 571, 582, 583, 594, 595, 598, 629, 636, 640, 644, 647, 648, 653, 654, 680, 728, 743, 779, 798, 799, 800, 804, 805, 823, 847, 848, 855, 856, 865, 869, 923, 925, 926, 929, 989, 991, 993, 996, 1001, 1003, 1008, 1013, 1014, 1024, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "accept_large_spars": [925, 926, 1044], "accept_spars": [869, 925, 926, 1043, 1053], "access": [2, 47, 76, 120, 236, 244, 249, 322, 323, 351, 360, 366, 367, 380, 381, 382, 388, 392, 394, 395, 405, 410, 412, 413, 417, 418, 420, 451, 458, 465, 468, 537, 568, 569, 570, 571, 618, 863, 864, 865, 920, 982, 989, 992, 993, 999, 1000, 1001, 1007, 1008, 1014, 1018, 1020, 1028, 1029, 1036, 1038, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052], "accid": [197, 215], "accident": [1036, 1040, 1045], "accommod": [154, 1044], "accompani": [259, 1044], "accomplish": [233, 382, 407, 547, 990, 994, 996, 1018, 1053], "accord": [15, 22, 24, 35, 47, 76, 115, 121, 146, 150, 180, 197, 215, 230, 315, 343, 352, 362, 380, 382, 392, 393, 394, 395, 403, 406, 407, 410, 412, 414, 415, 417, 418, 420, 438, 451, 453, 457, 461, 463, 466, 470, 505, 517, 518, 519, 526, 531, 533, 536, 537, 539, 541, 551, 554, 555, 562, 563, 564, 567, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 642, 643, 645, 646, 650, 659, 660, 671, 681, 692, 696, 736, 780, 781, 801, 802, 803, 804, 805, 808, 809, 810, 815, 826, 840, 841, 842, 843, 844, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 868, 875, 883, 895, 897, 898, 905, 906, 907, 908, 910, 911, 987, 989, 993, 995, 996, 1003, 1006, 1007, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "accordingli": [125, 168, 236, 343, 380, 384, 385, 1043, 1044, 1051], "account": [11, 12, 53, 95, 101, 109, 125, 154, 161, 167, 215, 233, 253, 259, 286, 292, 346, 348, 352, 366, 376, 380, 394, 395, 400, 410, 413, 414, 415, 417, 418, 464, 562, 563, 568, 569, 628, 629, 631, 633, 634, 650, 674, 680, 705, 708, 729, 730, 731, 739, 744, 757, 784, 785, 788, 789, 802, 806, 819, 879, 985, 987, 991, 993, 994, 995, 996, 1003, 1007, 1009, 1041, 1043, 1044, 1045, 1048, 1049, 1051, 1053, 1054], "acctactagaagtt": 392, "acctcctagaag": 392, "accumul": [6, 48, 116, 117, 186, 384, 386, 410, 418, 993, 1037, 1044], "accur": [2, 7, 11, 19, 23, 24, 78, 93, 124, 149, 156, 167, 168, 201, 212, 215, 259, 266, 270, 278, 319, 351, 352, 362, 379, 394, 407, 410, 412, 415, 417, 418, 419, 438, 444, 448, 452, 454, 460, 532, 539, 541, 543, 544, 546, 547, 548, 608, 609, 635, 804, 805, 845, 846, 941, 942, 985, 990, 993, 1009, 1050], "accuraci": [2, 4, 5, 6, 23, 28, 29, 30, 31, 68, 69, 70, 71, 109, 115, 116, 120, 121, 128, 142, 143, 145, 150, 170, 173, 197, 201, 205, 212, 213, 245, 253, 257, 258, 259, 260, 261, 263, 265, 273, 275, 278, 285, 291, 292, 293, 302, 307, 310, 321, 323, 326, 327, 329, 339, 342, 343, 346, 362, 366, 382, 393, 394, 408, 409, 410, 414, 417, 418, 419, 427, 438, 450, 470, 472, 473, 479, 533, 535, 542, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 611, 635, 659, 660, 667, 669, 672, 675, 676, 677, 693, 698, 704, 709, 712, 714, 719, 733, 734, 735, 739, 744, 755, 764, 788, 795, 797, 800, 823, 829, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 852, 854, 855, 862, 900, 901, 905, 907, 910, 913, 915, 941, 942, 982, 987, 988, 989, 990, 994, 996, 997, 1001, 1005, 1007, 1009, 1024, 1029, 1044, 1045, 1054], "accuracy_histori": 6, "accuracy_scor": [28, 109, 150, 263, 310, 329, 351, 362, 393, 400, 405, 427, 558, 565, 709, 730, 731, 735, 739, 784, 785, 788, 795, 797, 935, 982, 993, 1037, 1038, 1039, 1048, 1053], "acf": 119, "achar": [1043, 1044, 1045, 1046], "achiev": [2, 10, 15, 17, 25, 29, 96, 109, 118, 120, 125, 128, 157, 173, 197, 205, 256, 259, 266, 310, 329, 339, 342, 343, 346, 351, 362, 366, 368, 374, 375, 377, 382, 386, 392, 394, 406, 407, 409, 410, 414, 415, 417, 418, 554, 559, 566, 641, 650, 677, 679, 708, 730, 731, 739, 741, 764, 784, 785, 788, 804, 805, 841, 885, 982, 983, 985, 989, 993, 1003, 1006, 1008, 1029, 1049], "achin": 1018, "achliopta": [230, 898, 899, 1005], "acid": [310, 377], "acknowledg": [379, 610, 1053], "acl": [902, 1006, 1007], "acm": [374, 375, 410, 421, 445, 451, 458, 461, 512, 564, 677, 727, 757, 851, 993, 996, 999, 1005], "acoust": 993, "acq": 6, "acquaint": 380, "acquir": [12, 117, 261, 1048], "acquisit": [406, 720], "acronym": 384, "across": [0, 2, 11, 53, 59, 65, 83, 88, 115, 136, 167, 186, 191, 219, 254, 256, 259, 273, 283, 305, 310, 343, 381, 382, 389, 394, 403, 408, 410, 414, 417, 418, 419, 422, 438, 441, 451, 453, 455, 458, 461, 463, 470, 473, 475, 489, 492, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 568, 569, 589, 592, 595, 603, 608, 609, 611, 612, 633, 634, 635, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 677, 679, 680, 686, 687, 690, 691, 692, 693, 694, 695, 696, 705, 706, 718, 732, 758, 789, 794, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 850, 854, 861, 862, 863, 870, 874, 875, 882, 883, 885, 886, 894, 897, 898, 900, 901, 905, 906, 907, 910, 913, 914, 941, 942, 961, 964, 967, 982, 989, 991, 993, 1003, 1007, 1009, 1014, 1018, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1054], "act": [339, 351, 380, 393, 416, 417, 714, 730, 731, 739, 784, 785, 788, 880, 884, 990, 993, 996, 1008, 1044], "action": [318, 351, 379, 383, 384, 397, 409, 1003, 1046], "activ": [0, 30, 87, 164, 205, 235, 243, 249, 260, 325, 326, 328, 332, 353, 374, 375, 378, 380, 381, 386, 388, 392, 394, 395, 397, 400, 411, 497, 503, 527, 633, 636, 638, 651, 652, 654, 655, 656, 664, 665, 666, 683, 684, 685, 686, 687, 714, 719, 798, 861, 862, 863, 901, 959, 989, 990, 991, 992, 996, 997, 998, 1006, 1015, 1017, 1047], "active_": [651, 652, 655, 656], "active_features_": 1044, "actual": [2, 11, 25, 44, 58, 73, 84, 115, 125, 146, 167, 173, 186, 197, 201, 205, 245, 255, 262, 353, 362, 366, 368, 377, 380, 382, 385, 386, 392, 393, 394, 407, 410, 415, 417, 418, 419, 435, 510, 516, 517, 528, 536, 539, 541, 548, 563, 564, 645, 646, 649, 659, 660, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 681, 688, 692, 696, 702, 705, 710, 716, 722, 723, 724, 725, 786, 798, 804, 805, 820, 821, 851, 882, 905, 911, 933, 934, 935, 968, 985, 992, 993, 996, 1000, 1001, 1017, 1043, 1044, 1050, 1051, 1052], "actual_vs_predict": [2, 73, 130, 167, 255, 320, 702], "actuari": 407, "ad": [2, 12, 18, 73, 100, 102, 109, 115, 125, 142, 149, 155, 156, 176, 181, 199, 201, 222, 232, 233, 259, 260, 261, 305, 316, 317, 318, 319, 320, 321, 322, 323, 330, 343, 352, 379, 380, 382, 384, 386, 392, 394, 395, 415, 417, 418, 419, 420, 421, 422, 428, 432, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 511, 513, 515, 523, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 705, 709, 714, 715, 719, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 735, 740, 741, 742, 743, 744, 747, 754, 755, 758, 762, 767, 768, 770, 776, 778, 779, 783, 784, 785, 786, 788, 790, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 814, 815, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 923, 925, 926, 932, 936, 937, 941, 942, 949, 950, 951, 952, 953, 956, 959, 961, 963, 968, 974, 980, 982, 986, 988, 989, 990, 994, 996, 997, 999, 1014, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "adaboost": [29, 89, 108, 112, 113, 118, 120, 126, 129, 130, 133, 134, 152, 164, 306, 343, 357, 358, 359, 520, 552, 554, 555, 560, 632, 704, 831, 913, 914, 1015, 1016, 1031, 1038], "adaboost_clf": 109, "adaboostclassifi": [29, 111, 118, 400, 417, 555, 560, 562, 934, 1038, 1039, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1053], "adaboostregressor": [110, 400, 417, 554, 563, 934, 1038, 1039, 1042, 1045, 1046, 1049, 1051, 1052], "adagrad": 1013, "adam": [281, 300, 862, 863, 997, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "adamgonzo": 1050, "adamson": 1048, "adanhawth": [1044, 1045], "adapt": [51, 53, 109, 121, 122, 152, 243, 244, 253, 307, 343, 367, 378, 379, 380, 389, 410, 417, 420, 516, 517, 518, 519, 677, 678, 679, 862, 863, 989, 995, 997, 1003, 1007, 1013, 1014, 1044, 1045, 1052, 1053], "adarsh": 1053, "add": [3, 10, 11, 15, 18, 23, 24, 25, 30, 31, 38, 42, 52, 73, 78, 79, 84, 94, 118, 121, 142, 144, 146, 149, 154, 155, 156, 161, 162, 179, 186, 192, 198, 200, 201, 212, 221, 226, 230, 232, 233, 266, 268, 269, 283, 295, 307, 309, 315, 317, 318, 342, 343, 345, 346, 352, 366, 378, 379, 380, 381, 382, 384, 386, 388, 394, 397, 405, 407, 414, 417, 418, 419, 516, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 603, 628, 629, 631, 633, 659, 660, 695, 698, 822, 845, 846, 902, 932, 950, 951, 961, 982, 983, 992, 999, 1003, 1006, 1007, 1014, 1027, 1028, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "add_2d_scatt": 218, "add_artist": [32, 219, 243, 244, 245, 248, 249], "add_ax": [168, 222, 270], "add_categori": 236, "add_collect": [10, 221, 229], "add_ind": [130, 162, 628, 629, 631, 983, 1045, 1048, 1052], "add_missing_valu": 162, "add_nois": 155, "add_self_request": [233, 950], "add_subplot": [5, 23, 25, 40, 43, 62, 65, 88, 99, 168, 194, 212, 220, 222, 326, 327, 387, 1028], "add_trac": 115, "adddatapointbatch": 283, "addep": 1047, "addison": [591, 731], "addit": [2, 3, 5, 10, 12, 13, 64, 69, 80, 88, 93, 96, 109, 113, 115, 116, 119, 120, 145, 154, 155, 156, 162, 167, 168, 176, 181, 186, 198, 199, 201, 222, 237, 253, 261, 268, 274, 281, 305, 316, 317, 322, 328, 343, 353, 358, 362, 366, 367, 372, 373, 374, 375, 376, 378, 379, 380, 382, 385, 386, 388, 392, 393, 394, 395, 397, 403, 408, 409, 410, 412, 414, 415, 418, 419, 420, 421, 434, 442, 443, 445, 446, 447, 451, 458, 470, 475, 497, 504, 533, 535, 537, 538, 540, 542, 543, 544, 550, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 613, 620, 629, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 671, 688, 689, 693, 699, 700, 703, 743, 759, 760, 789, 793, 798, 799, 807, 824, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 887, 897, 898, 905, 906, 936, 942, 982, 987, 989, 993, 994, 996, 997, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1020, 1031, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "addition": [51, 70, 111, 125, 167, 197, 215, 233, 316, 318, 352, 380, 392, 407, 418, 611, 612, 647, 653, 672, 882, 982, 983, 993, 1001, 1013, 1042, 1053], "additional_nois": 38, "additive_chi2": [621, 639, 766, 775], "additive_chi2_kernel": [639, 760, 766, 985], "additivechi2sampl": [640, 641, 642, 643, 759, 760, 985, 1050, 1052], "address": [2, 46, 201, 233, 351, 375, 380, 409, 410, 418, 448, 658, 989, 990, 995, 996, 997, 998, 999, 1003, 1018, 1027, 1044], "adelr": 1044, "adequ": [367, 386, 568, 1020, 1049], "adher": [366, 382, 394, 936, 937, 1036, 1037], "adien": 1052, "adijohar": 1050, "adil": 1051, "adimension": 167, "adithya": 1041, "aditya": [1042, 1044, 1045, 1046, 1050, 1051], "adityadaflapurkar": 1044, "adjac": [410, 415, 453, 463, 586, 587, 636, 692, 696, 947, 990, 996, 1028], "adjacency_matrix": 410, "adjust": [2, 7, 15, 34, 36, 47, 56, 66, 76, 109, 122, 141, 164, 201, 226, 231, 239, 260, 278, 315, 330, 346, 352, 387, 410, 411, 415, 417, 418, 525, 554, 555, 558, 560, 562, 563, 565, 659, 660, 667, 669, 675, 676, 677, 705, 706, 709, 715, 716, 756, 758, 787, 796, 840, 841, 843, 844, 875, 897, 898, 905, 906, 907, 910, 913, 915, 931, 992, 993, 997, 1003, 1015, 1027, 1033, 1036, 1042, 1052], "adjusted_mutual_info_scor": [35, 36, 47, 56, 410, 706, 716, 734, 756, 758, 787, 993, 1036, 1044, 1048, 1052], "adjusted_rand_index": 706, "adjusted_rand_scor": [35, 36, 47, 56, 352, 410, 705, 716, 734, 758, 787, 993, 1049], "administr": 397, "admir": [1051, 1052], "admiss": [230, 367], "adopt": [382, 392, 394, 901, 993, 1007, 1044, 1051, 1053], "adoublet": [1051, 1052], "adpot": 321, "adrian": [1049, 1050, 1051], "adrien": 1036, "adrin": [0, 63, 347, 395, 398, 403, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "adrinjalali": [1039, 1048], "adult": [322, 497, 1003], "advanc": [3, 127, 164, 168, 225, 227, 241, 259, 281, 368, 410, 415, 490, 502, 536, 633, 640, 784, 798, 854, 863, 866, 885, 914, 985, 993, 996, 1003, 1015, 1018, 1033, 1038], "advani": 1048, "advantag": [2, 3, 37, 53, 55, 93, 98, 123, 197, 198, 226, 244, 260, 281, 319, 323, 362, 394, 407, 414, 415, 418, 420, 442, 446, 461, 535, 590, 650, 675, 676, 764, 833, 834, 835, 865, 866, 905, 906, 907, 908, 909, 910, 911, 982, 985, 988, 989, 990, 993, 994, 996, 997, 1001, 1003, 1007, 1008, 1009, 1039], "advic": [388, 420, 623, 624], "advik": 1053, "advis": [11, 198, 233, 362, 378, 380, 410, 418, 438, 647, 653, 655, 661, 663, 673, 688, 961, 985, 989, 995, 997, 1008, 1050], "advoc": 994, "aeberhard": 377, "aesthet": [305, 1009, 1041], "af": 36, "affan": 1042, "affanv14": 1043, "affect": [5, 23, 78, 125, 156, 166, 167, 201, 222, 236, 237, 262, 269, 310, 321, 362, 366, 367, 368, 376, 394, 396, 407, 410, 413, 414, 416, 418, 421, 423, 445, 451, 458, 474, 476, 480, 550, 551, 570, 700, 713, 789, 801, 804, 805, 806, 815, 819, 820, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 885, 886, 896, 910, 992, 996, 1008, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054], "affili": 375, "affin": [34, 35, 42, 47, 53, 61, 62, 66, 164, 305, 328, 372, 382, 394, 408, 415, 441, 442, 453, 455, 463, 513, 536, 692, 696, 705, 706, 718, 738, 794, 796, 901, 987, 990, 993, 1015, 1030, 1031, 1036, 1037, 1040, 1046, 1047, 1049, 1051], "affinity_matrix": [692, 696], "affinity_matrix_": [441, 453, 692], "affinity_propag": [10, 42], "affinitypropag": [36, 42, 319, 410, 1036, 1039, 1040, 1044, 1047, 1049, 1050, 1051, 1052, 1053], "affirm": 2, "afnlp": 1007, "afor": [897, 898], "aforement": [367, 994], "afraid": 397, "africa": 1003, "afroj": 1053, "aft": [311, 1039], "aftab": 1045, "after": [2, 15, 18, 19, 24, 44, 51, 53, 68, 69, 73, 79, 95, 109, 120, 125, 128, 130, 133, 142, 146, 154, 156, 158, 161, 167, 173, 190, 197, 236, 237, 240, 246, 259, 268, 281, 283, 291, 293, 305, 306, 309, 310, 351, 352, 368, 375, 377, 379, 380, 382, 384, 386, 387, 388, 392, 394, 403, 405, 406, 407, 410, 411, 414, 415, 418, 419, 422, 443, 448, 451, 452, 453, 454, 457, 463, 516, 533, 537, 554, 555, 560, 561, 562, 563, 598, 628, 631, 659, 660, 667, 668, 669, 674, 676, 677, 678, 679, 693, 713, 727, 757, 795, 798, 799, 804, 805, 854, 861, 865, 878, 884, 905, 910, 911, 982, 983, 987, 989, 993, 997, 998, 1003, 1005, 1007, 1008, 1009, 1014, 1020, 1027, 1029, 1036, 1039, 1043, 1044, 1047, 1048, 1051, 1054], "afterward": [18, 384, 536, 542, 829], "ag": [69, 146, 167, 169, 185, 186, 197, 215, 237, 238, 240, 253, 305, 318, 319, 320, 322, 375, 377, 497, 1018, 1020, 1027], "again": [2, 18, 65, 70, 122, 153, 155, 157, 167, 222, 260, 351, 362, 384, 389, 394, 395, 410, 411, 412, 417, 418, 473, 568, 569, 635, 648, 652, 654, 656, 662, 664, 666, 693, 982, 989, 993, 1007, 1033, 1036, 1044, 1053], "against": [25, 35, 84, 102, 112, 123, 141, 173, 188, 189, 206, 214, 233, 268, 311, 315, 339, 375, 380, 395, 403, 407, 410, 414, 418, 439, 510, 543, 549, 552, 677, 679, 756, 758, 789, 803, 808, 810, 830, 834, 959, 985, 989, 993, 994, 996, 1008, 1012, 1020], "agamemnon": [1043, 1044, 1045, 1046, 1048, 1049], "agarw": [1043, 1044, 1046], "agath": 1050, "agc": 157, "agct": 157, "agent": 1018, "agg": 154, "aggfunc": 270, "agglo": [49, 446, 1028], "agglom": [10, 18, 34, 35, 39, 40, 42, 45, 58, 60, 64, 65, 66, 87, 164, 219, 221, 326, 327, 410, 442, 446, 503, 692, 779, 858, 1015, 1039], "agglomer": [3, 30, 34, 45, 48, 66, 70, 87, 142, 144, 164, 179, 196, 235, 272, 287, 326, 327, 372, 410, 418, 446, 503, 601, 607, 646, 801, 806, 865, 1015, 1031], "agglomerativeclust": [37, 38, 39, 42, 45, 50, 54, 60, 65, 394, 410, 441, 443, 446, 1028, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "aggreg": [58, 113, 215, 262, 268, 273, 319, 321, 410, 417, 419, 535, 556, 557, 595, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 994, 996, 1003, 1052], "aggress": [6, 204, 667, 668, 804, 805, 1016, 1031, 1037], "aggressive_elimin": [804, 805, 982], "agnost": [992, 1001], "ago": [10, 1014], "agraw": [1039, 1044, 1050, 1051], "agre": [141, 388, 395, 408, 410, 787, 1020], "agreement": [0, 410, 705, 717, 756, 758, 796, 993], "agricultur": 989, "aguiar": 419, "agundez": 1044, "ahead": 889, "ahmadi": 1047, "ahmadjubair33": 1050, "ahmedbgh": [1051, 1052], "ahn": 1048, "ahuja": [1043, 1050, 1051], "ai": [72, 113, 188, 231, 328, 346, 414], "ai8rahim": 1039, "aic": [136, 164, 175, 181, 183, 184, 185, 191, 205, 216, 248, 502, 652, 654, 655, 656, 657, 799, 866, 885, 982, 1015, 1036, 1043, 1049, 1050], "aic_criterion": 185, "aid": [256, 410, 793, 794, 990, 1018, 1036, 1048], "aidan": 1044, "aidar": 1050, "aig": 10, "aiko": 1051, "aim": [11, 18, 79, 125, 162, 201, 253, 291, 328, 343, 368, 375, 378, 380, 394, 403, 410, 412, 418, 449, 989, 993, 996, 1003, 1008, 1013, 1020, 1028, 1050], "air": [154, 765], "airport": 765, "airspe": 380, "aishgrt1": 1044, "aishwarya": 1044, "aishwaryark": 1043, "aistat": 1006, "aivision2020": 1043, "aj": [495, 1050], "ak": [407, 1050, 1051], "aka": [4, 299, 351, 392, 418, 453, 537, 539, 541, 545, 548, 582, 583, 616, 623, 652, 653, 655, 656, 657, 659, 660, 663, 667, 668, 669, 671, 677, 678, 679, 742, 872, 876, 878, 989, 997, 1007, 1020, 1025, 1038, 1050], "akai": 1049, "akaik": [185, 186, 248, 657, 799, 982, 989], "akash": 1044, "aki": [1050, 1051, 1052], "akihiro": 1054, "akin": [2, 198, 394], "akinkunl": 1046, "akitti": 1041, "akshai": [1040, 1043, 1048], "akshay0724": 1043, "akshayah3": 1040, "akshita": 1051, "al": [0, 9, 76, 77, 109, 124, 185, 296, 375, 377, 406, 410, 412, 415, 417, 418, 419, 452, 499, 520, 521, 529, 536, 542, 545, 564, 683, 684, 720, 721, 840, 842, 862, 863, 898, 941, 942, 989, 990, 993, 999, 1003, 1005, 1008, 1009, 1044, 1049, 1052, 1053], "ala": [1051, 1052], "aladago": 1046, "alam": [1051, 1052], "alan": [1043, 1044, 1047, 1049, 1050], "alastuei": 1039, "albeit": 23, "albert": [0, 226, 370, 1043, 1044, 1045, 1048, 1049], "alberto": [1045, 1049, 1050], "alcalin": 377, "alcohol": [310, 377], "alcorn": 1044, "aldrian": 1040, "aleator": 11, "alec": 1046, "alejandro": [1037, 1042, 1053], "alek": [1049, 1050], "aleksandr": 1043, "aleksandra": 1047, "alemagnani": 1039, "alert": 1043, "alessandro": [1046, 1048, 1051], "alessia": 1049, "alex": [403, 418, 1008, 1036, 1039, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "alexand": [0, 399, 410, 415, 536, 871, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1049, 1050, 1053], "alexandercbooth": 1043, "alexandr": [0, 22, 23, 28, 40, 45, 52, 65, 93, 95, 100, 182, 184, 185, 186, 188, 190, 191, 226, 229, 265, 272, 295, 395, 398, 399, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "alexandracraciun": 1048, "alexandru": 440, "alexanmv": 1050, "alexei": 1041, "alexfield": 1042, "alexgoryainov": 1046, "alexi": [1036, 1039, 1040, 1043, 1053], "alexl": [1052, 1053], "alexryndin": 1044, "alexshack": [1046, 1047, 1048], "alfalfa": 17, "alfano": 1043, "alfaro": [0, 370, 1047, 1048, 1049, 1050, 1051], "alfr": 0, "algebra": [367, 378, 383, 392, 415, 418, 463, 871, 1003], "algesheim": 410, "algo": [41, 102], "algo_param": [42, 60], "algorithm": [7, 12, 15, 16, 20, 27, 29, 34, 35, 37, 40, 41, 43, 44, 48, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 68, 77, 78, 83, 93, 95, 109, 110, 111, 115, 118, 126, 164, 173, 184, 186, 200, 211, 213, 220, 222, 225, 229, 230, 236, 241, 244, 245, 246, 249, 256, 259, 268, 283, 289, 290, 292, 296, 305, 307, 310, 315, 316, 317, 320, 322, 328, 329, 330, 338, 351, 352, 353, 362, 366, 368, 373, 374, 375, 376, 377, 380, 381, 382, 383, 388, 389, 393, 394, 396, 405, 406, 408, 410, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 470, 475, 476, 479, 483, 484, 485, 489, 504, 512, 513, 514, 515, 516, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 564, 592, 604, 605, 611, 612, 636, 638, 640, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 709, 718, 720, 736, 738, 744, 775, 779, 780, 794, 796, 798, 799, 833, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 861, 866, 870, 872, 885, 889, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 925, 941, 942, 944, 958, 962, 968, 983, 985, 988, 990, 991, 992, 993, 995, 998, 999, 1003, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1023, 1024, 1026, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "algorithm_nam": 41, "ali": [1041, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "alia": [11, 233, 381, 384, 388, 394, 400, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 611, 612, 618, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 967, 999, 1014, 1036, 1050], "alias": [44, 45, 233, 378, 380, 383, 400, 598, 1036, 1040, 1050], "aliased_sample_weight": 233, "align": [32, 123, 125, 162, 218, 243, 270, 353, 394, 690, 694, 985, 996, 1007, 1030, 1031, 1052, 1053], "alihan": 1049, "alik": [415, 991], "alin": 1049, "alison": 1043, "all": [0, 2, 3, 5, 6, 9, 12, 17, 22, 23, 25, 32, 36, 37, 38, 40, 41, 46, 50, 51, 52, 53, 58, 62, 73, 80, 89, 93, 95, 96, 107, 114, 115, 117, 118, 122, 125, 132, 133, 146, 154, 155, 157, 164, 166, 167, 168, 170, 176, 181, 183, 189, 190, 191, 197, 198, 199, 200, 201, 206, 208, 212, 214, 215, 218, 219, 226, 232, 233, 236, 237, 240, 244, 246, 248, 253, 257, 260, 261, 262, 263, 265, 266, 267, 269, 271, 278, 283, 286, 288, 301, 305, 306, 310, 315, 316, 317, 318, 320, 321, 322, 323, 326, 328, 329, 330, 336, 339, 343, 344, 346, 347, 351, 352, 353, 357, 360, 362, 366, 367, 368, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 392, 393, 394, 395, 400, 403, 405, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 430, 432, 433, 434, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 509, 510, 516, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 706, 710, 714, 715, 716, 717, 718, 719, 721, 722, 724, 727, 729, 730, 731, 733, 734, 736, 737, 738, 739, 743, 746, 747, 749, 751, 752, 754, 757, 762, 770, 775, 779, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 798, 799, 801, 802, 803, 804, 805, 807, 808, 810, 811, 813, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 931, 933, 934, 935, 936, 947, 950, 956, 961, 968, 977, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055], "all_class": 6, "all_displai": [389, 1051], "all_estim": [389, 1046, 1047, 1051], "all_funct": [389, 1051], "all_label": 902, "all_model": 122, "all_or_ani": [977, 1046], "all_scor": 734, "all_split": [2, 11], "all_uppercas": 418, "allan": [351, 407, 1048], "allclos": [94, 127, 1005, 1028], "allefeld": 1049, "allen": [320, 1039, 1041, 1043, 1046], "allend": [1047, 1049], "allevi": [55, 125, 176, 181, 410, 995], "allison": 320, "alloc": [1, 4, 14, 23, 59, 164, 223, 271, 317, 319, 376, 380, 381, 410, 418, 444, 448, 460, 489, 537, 539, 541, 585, 589, 592, 647, 653, 661, 663, 804, 805, 807, 824, 829, 832, 982, 1003, 1013, 1015, 1030, 1031, 1040, 1041, 1046, 1047, 1053], "allow": [2, 18, 54, 56, 72, 73, 88, 97, 98, 112, 113, 120, 128, 149, 154, 156, 158, 191, 197, 201, 215, 219, 227, 230, 237, 239, 240, 243, 253, 259, 273, 281, 315, 316, 317, 318, 320, 323, 343, 344, 351, 360, 362, 366, 374, 375, 380, 381, 382, 384, 387, 389, 392, 394, 395, 400, 403, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 438, 444, 445, 447, 448, 450, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 497, 524, 525, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 594, 595, 598, 604, 611, 612, 616, 628, 629, 631, 635, 636, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 691, 693, 700, 743, 763, 766, 775, 779, 782, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 812, 815, 819, 822, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 855, 856, 860, 862, 863, 865, 867, 868, 870, 871, 872, 877, 884, 885, 889, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 923, 925, 926, 936, 937, 957, 961, 982, 983, 985, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1020, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "allow_nan": [382, 924, 926, 1052], "allow_nd": [925, 926], "allow_non": 712, "allow_single_clust": [42, 447], "allow_unlabel": [90, 234, 524], "allowed_extens": 504, "allwein": 278, "almeida": [1037, 1038, 1049], "almeidayoel": 1050, "almer": 1043, "almost": [2, 32, 115, 121, 199, 205, 233, 236, 253, 274, 310, 323, 329, 362, 373, 375, 384, 386, 392, 393, 394, 400, 410, 414, 415, 471, 472, 473, 474, 476, 477, 478, 798, 982, 988, 989, 992, 993, 1008, 1028, 1029, 1044, 1049], "almubarak": [1049, 1050], "alon": [167, 201, 265, 339, 394, 407, 649, 670, 681, 743, 1043, 1045], "along": [10, 12, 54, 57, 64, 84, 116, 122, 125, 154, 184, 197, 231, 233, 263, 315, 352, 353, 362, 375, 380, 384, 386, 388, 389, 394, 397, 400, 403, 406, 415, 417, 418, 419, 422, 534, 551, 588, 612, 613, 631, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 677, 679, 682, 683, 684, 685, 686, 687, 780, 781, 793, 801, 815, 874, 875, 878, 879, 882, 883, 884, 885, 890, 891, 892, 894, 895, 896, 921, 944, 968, 974, 982, 989, 996, 1003, 1006, 1018, 1036, 1041, 1042, 1044, 1048, 1049], "alongsid": [46, 380, 386, 394, 397, 419, 826, 827, 828, 829, 993, 1000, 1013, 1014], "alonso": [1047, 1049], "alpaydin": 377, "alpha": [2, 3, 5, 6, 8, 10, 11, 12, 15, 22, 24, 29, 32, 35, 38, 40, 43, 50, 54, 58, 63, 73, 80, 84, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 118, 122, 125, 126, 127, 129, 130, 131, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 167, 176, 177, 178, 179, 181, 182, 183, 185, 186, 191, 192, 194, 195, 197, 198, 199, 201, 202, 206, 209, 210, 215, 218, 219, 222, 231, 232, 239, 243, 259, 260, 261, 262, 263, 266, 267, 269, 271, 272, 281, 283, 286, 288, 291, 293, 299, 301, 305, 306, 307, 308, 310, 312, 316, 318, 319, 322, 328, 330, 336, 337, 340, 341, 343, 344, 346, 347, 348, 351, 366, 375, 382, 386, 392, 412, 413, 415, 417, 419, 420, 422, 447, 472, 473, 479, 528, 532, 534, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 561, 596, 597, 599, 612, 614, 616, 617, 624, 632, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 688, 724, 749, 840, 841, 842, 844, 862, 863, 901, 913, 914, 915, 916, 982, 989, 993, 995, 997, 1001, 1006, 1007, 1008, 1009, 1024, 1027, 1029, 1033, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1054], "alpha_": [2, 80, 136, 167, 177, 185, 186, 473, 612, 645, 646, 648, 652, 654, 656, 657, 662, 664, 674, 676, 989, 1009, 1024, 1036, 1043], "alpha_1": [645, 646, 989], "alpha_2": [645, 646, 989], "alpha_a": 186, "alpha_b": 186, "alpha_bound": [158, 624], "alpha_h": [13, 415, 539, 541, 548, 1049], "alpha_i": [995, 1008], "alpha_init": [177, 646, 989, 1046], "alpha_max": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "alpha_min": [647, 648, 651, 653, 654, 655, 657, 661, 662, 663, 664, 682, 683, 684, 685], "alpha_optim": 272, "alpha_per_target": [674, 1048], "alpha_w": [13, 415, 539, 541, 548, 1049], "alphabet": [70, 394, 723, 742], "alphalpha": 17, "alphanumer": [394, 589, 590, 592], "alphas_": [185, 186, 648, 651, 652, 654, 655, 656, 657, 662, 664, 683, 684, 1036, 1039, 1049], "alphas_enet": 182, "alphas_lasso": 182, "alphas_positive_enet": 182, "alphas_positive_lasso": 182, "alphavantag": 10, "alphonsu": 1046, "alreadi": [2, 4, 8, 53, 56, 88, 98, 109, 125, 130, 146, 167, 227, 234, 236, 239, 253, 260, 266, 283, 318, 321, 380, 381, 385, 392, 394, 407, 409, 412, 414, 416, 417, 422, 438, 500, 524, 534, 568, 569, 635, 647, 650, 665, 666, 667, 668, 669, 675, 677, 678, 679, 686, 687, 769, 779, 840, 860, 868, 874, 875, 877, 882, 902, 905, 906, 928, 952, 982, 985, 999, 1003, 1004, 1014, 1020, 1025, 1029, 1033, 1037, 1041, 1044, 1048, 1049, 1050, 1051], "alsadi": 1044, "alsaedi": 1049, "alsalhi": [0, 1039, 1040], "alsawadi": 1049, "also": [0, 2, 5, 9, 11, 15, 17, 18, 22, 23, 24, 25, 30, 44, 46, 51, 55, 56, 58, 62, 68, 69, 76, 78, 83, 84, 93, 100, 102, 109, 112, 115, 117, 119, 120, 121, 122, 123, 125, 128, 130, 142, 143, 144, 146, 149, 151, 154, 162, 167, 168, 169, 170, 173, 177, 178, 180, 186, 189, 190, 193, 197, 198, 199, 201, 202, 206, 214, 215, 218, 229, 231, 233, 236, 237, 249, 253, 257, 259, 260, 261, 262, 265, 266, 268, 269, 270, 273, 278, 281, 283, 291, 294, 296, 299, 305, 306, 307, 309, 310, 315, 316, 317, 318, 322, 323, 331, 335, 336, 337, 339, 341, 343, 351, 352, 353, 356, 357, 360, 362, 366, 367, 368, 373, 374, 375, 377, 378, 379, 380, 382, 383, 386, 388, 389, 392, 393, 394, 395, 397, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 438, 439, 440, 442, 443, 446, 447, 448, 449, 451, 453, 463, 464, 466, 468, 483, 485, 493, 497, 499, 504, 509, 533, 534, 536, 537, 542, 547, 550, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 623, 633, 634, 636, 644, 645, 646, 647, 648, 651, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 673, 677, 679, 682, 685, 688, 692, 695, 696, 700, 711, 714, 724, 730, 731, 739, 744, 764, 780, 781, 784, 785, 788, 798, 799, 801, 804, 805, 815, 818, 821, 827, 828, 829, 830, 831, 832, 834, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 861, 862, 863, 865, 867, 868, 873, 874, 878, 882, 885, 890, 894, 907, 910, 913, 914, 915, 916, 925, 944, 950, 957, 961, 982, 983, 985, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1020, 1025, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "alt": [17, 260, 330, 351, 352, 353, 375, 388, 489, 1029], "altai": 1046, "alter": [23, 162, 382, 394, 730, 731, 739, 784, 785, 788, 1041, 1045, 1048], "altern": [2, 24, 69, 84, 116, 117, 123, 125, 130, 169, 181, 197, 215, 227, 246, 249, 253, 268, 315, 343, 351, 352, 353, 362, 375, 383, 384, 386, 392, 394, 395, 397, 403, 404, 406, 407, 410, 411, 412, 414, 415, 417, 418, 420, 442, 443, 446, 447, 448, 453, 459, 464, 500, 539, 541, 542, 548, 554, 555, 558, 559, 560, 561, 565, 566, 567, 583, 589, 590, 592, 618, 621, 644, 693, 707, 709, 772, 775, 779, 782, 803, 834, 869, 875, 878, 891, 898, 900, 913, 914, 915, 916, 960, 961, 987, 989, 990, 992, 993, 996, 997, 1001, 1003, 1005, 1006, 1008, 1009, 1014, 1024, 1029, 1031, 1041, 1043, 1049, 1050, 1054], "alternate_sign": [6, 418, 583, 590, 1043], "although": [2, 7, 23, 116, 130, 166, 194, 215, 226, 245, 281, 343, 362, 368, 382, 394, 410, 411, 415, 418, 497, 818, 821, 876, 992, 994, 995, 996, 999, 1009, 1020, 1027, 1028, 1029, 1036, 1044, 1051], "altman": [629, 983], "altogeth": [119, 386, 1044], "alva": 1046, "alvaro": [1042, 1044], "alvin": 1044, "alwai": [115, 119, 122, 167, 176, 197, 215, 223, 230, 253, 262, 265, 269, 312, 336, 343, 346, 352, 362, 366, 367, 374, 378, 380, 381, 382, 386, 393, 394, 397, 403, 407, 410, 411, 414, 417, 418, 419, 420, 427, 433, 444, 450, 465, 466, 468, 470, 483, 484, 485, 489, 497, 509, 510, 545, 550, 552, 553, 555, 557, 559, 560, 561, 562, 563, 565, 566, 569, 571, 582, 589, 590, 592, 595, 612, 628, 629, 631, 633, 634, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 677, 679, 680, 696, 706, 710, 716, 722, 723, 724, 725, 733, 735, 736, 740, 783, 786, 787, 798, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 838, 839, 848, 849, 856, 857, 863, 870, 878, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 898, 906, 907, 908, 910, 911, 913, 914, 916, 943, 952, 953, 982, 983, 985, 987, 989, 992, 993, 996, 999, 1001, 1005, 1006, 1008, 1009, 1018, 1020, 1027, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "alyssa": [1039, 1043], "alyssaq": 1042, "am": [68, 73, 78, 130, 168, 351, 385, 412, 475, 494, 1043], "amai": 1052, "aman": [1042, 1043, 1044, 1050, 1051], "amanda": [1044, 1047, 1048, 1049, 1050], "amar": [1050, 1051, 1052, 1054], "amax": 76, "amazon": 10, "amber": 394, "ambient": 222, "ambigu": [260, 385, 418, 573, 713, 942, 996, 1045, 1047, 1049], "ambival": 58, "ambrosio": 1043, "ambroz": [1046, 1047], "amelia": 983, "amen": [386, 392, 420, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 982], "america": [9, 10, 78, 296, 375, 852, 1003], "american": [9, 10, 68, 79, 375, 410, 412, 416, 417, 418, 470, 475, 732, 885], "ames_h": 236, "amg": [44, 64, 410, 453, 463, 692, 696, 1046, 1050, 1051], "amherst": 375, "ami": [35, 47, 56, 410, 705], "amicel": [1036, 1039], "amin": 76, "aminaka": 1040, "amit": [1036, 1050, 1051], "amlan": 1042, "amo": 1039, "amol": 1049, "among": [25, 157, 168, 170, 173, 197, 248, 281, 360, 368, 375, 382, 394, 395, 407, 408, 413, 448, 450, 513, 520, 795, 830, 848, 853, 855, 907, 910, 913, 914, 915, 916, 982, 985, 993, 994, 1000, 1003, 1008, 1036, 1042, 1043, 1046, 1053], "amongst": [10, 1009], "amor": [0, 35, 55, 115, 125, 176, 181, 236, 260, 262, 310, 351, 352, 353, 391, 1050, 1051, 1052, 1053], "amormachin": 1039, "amort": 996, "amount": [6, 10, 43, 51, 64, 76, 79, 93, 97, 110, 112, 155, 167, 181, 201, 215, 231, 253, 317, 326, 329, 331, 339, 346, 353, 366, 367, 368, 392, 408, 410, 412, 415, 417, 418, 419, 444, 455, 470, 539, 540, 542, 544, 564, 597, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 666, 682, 685, 693, 804, 805, 845, 846, 851, 886, 901, 902, 915, 916, 988, 989, 992, 995, 997, 1003, 1005, 1006, 1007, 1008, 1027, 1028, 1049, 1053], "amount_fraud": 253, "amount_iter": 329, "amount_label": 329, "amount_test": 253, "amount_train": 253, "amourav": 1045, "amplitud": [122, 154, 156, 191, 989], "amplitude_nois": 38, "amput": 1014, "amrcod": 1050, "amsterdam": [403, 873, 1004], "amuel": [72, 113, 188, 231, 328, 346], "amy12xx": 1048, "amzn": 10, "an": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 19, 23, 24, 25, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 71, 73, 76, 77, 78, 79, 87, 93, 94, 95, 96, 97, 98, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 158, 160, 161, 163, 164, 166, 167, 168, 169, 173, 175, 176, 177, 180, 181, 185, 192, 197, 198, 199, 201, 202, 204, 205, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 229, 230, 231, 232, 233, 234, 236, 240, 243, 244, 246, 248, 249, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 272, 275, 281, 283, 286, 289, 290, 291, 294, 295, 296, 305, 310, 311, 312, 316, 317, 318, 320, 321, 322, 323, 327, 331, 335, 336, 338, 339, 341, 342, 343, 351, 352, 353, 356, 359, 360, 362, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 431, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 576, 577, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 620, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 712, 713, 719, 721, 722, 728, 730, 731, 735, 736, 738, 743, 744, 746, 747, 749, 751, 752, 754, 757, 759, 760, 764, 765, 767, 768, 769, 770, 771, 774, 776, 777, 778, 779, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 920, 922, 923, 925, 926, 928, 929, 932, 936, 937, 938, 940, 941, 942, 944, 946, 949, 950, 951, 952, 953, 954, 956, 957, 958, 961, 963, 964, 967, 968, 974, 977, 979, 980, 981, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "ana": [1047, 1049], "anaconda": [0, 367, 378, 384], "anak": 1048, "analog": [2, 17, 124, 386, 417, 993, 994, 1008, 1045], "analogi": [992, 993], "analys": [218, 360, 415, 804, 805, 990, 1013, 1018], "analysen": 451, "analysi": [3, 5, 7, 8, 13, 18, 23, 27, 33, 34, 35, 55, 61, 63, 66, 76, 77, 78, 79, 80, 83, 84, 88, 90, 92, 94, 95, 97, 98, 99, 101, 102, 104, 119, 137, 162, 164, 167, 186, 219, 242, 244, 248, 249, 250, 253, 256, 259, 260, 264, 270, 284, 285, 286, 294, 295, 297, 305, 310, 346, 352, 369, 372, 375, 377, 380, 382, 395, 406, 410, 412, 417, 418, 422, 440, 448, 449, 474, 476, 477, 483, 484, 486, 503, 505, 513, 516, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 556, 557, 632, 639, 689, 691, 692, 693, 694, 711, 720, 726, 727, 757, 789, 790, 793, 794, 798, 801, 827, 831, 847, 854, 865, 866, 871, 881, 885, 893, 941, 942, 983, 989, 990, 992, 993, 1003, 1012, 1013, 1015, 1016, 1018, 1021, 1030, 1031, 1036, 1037, 1038, 1040, 1045], "analyst": 868, "analyt": [98, 415, 420, 533, 621, 709, 983, 987, 993, 1012, 1018], "analyz": [2, 5, 15, 181, 261, 268, 320, 351, 353, 385, 386, 410, 418, 504, 589, 590, 592, 789, 990, 993, 1000, 1001, 1009, 1029, 1036, 1045], "anam": 1053, "anand": [1044, 1048], "ananiad": 1007, "anantharam": 1050, "anavelyz": 1049, "ana\u00ebl": 1046, "anbari": 529, "anchor": 270, "ander": [1040, 1046], "andersen": [744, 1050], "anderson": [9, 296, 375, 499, 1042, 1048], "andi": [1036, 1043], "ando": 1041, "andr": [1043, 1050], "andrea": [0, 29, 72, 98, 113, 188, 231, 306, 307, 328, 346, 347, 395, 398, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "andreh7": 1043, "andrei": [1051, 1053, 1054], "andrew": [44, 410, 463, 692, 696, 718, 738, 796, 880, 997, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "andrewww": 1044, "andrii": 1050, "andriushchenko": [1042, 1043], "androutsopoulo": [840, 995], "andrzej": [539, 541, 548], "andr\u00e1": [1049, 1050, 1051, 1052], "andr\u00e9": [1049, 1050, 1052], "ands": 876, "andyscanzio": 1053, "ang": 1043, "angel": [0, 399], "angela": [1046, 1047, 1051], "angelaambroz": 1047, "angermuel": [1040, 1041], "angl": [12, 32, 96, 146, 243, 244, 245, 248, 249, 377, 415, 532, 538, 540, 543, 544, 546, 547, 549, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 679, 683, 684, 685, 686, 687, 693, 990, 991, 1016, 1031, 1036], "angmar": 17, "angu": [1043, 1044, 1050], "angular": [416, 693, 765], "anh": [539, 541, 548], "ani": [2, 6, 7, 11, 12, 17, 42, 44, 53, 55, 65, 127, 141, 146, 155, 156, 166, 167, 168, 169, 170, 186, 197, 201, 215, 226, 229, 230, 233, 244, 248, 249, 253, 259, 260, 262, 265, 268, 278, 296, 305, 306, 309, 315, 317, 318, 320, 323, 339, 343, 353, 362, 366, 367, 368, 374, 375, 377, 378, 380, 382, 384, 385, 386, 388, 393, 394, 395, 397, 400, 403, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 435, 441, 447, 449, 450, 451, 453, 455, 457, 458, 462, 465, 468, 489, 490, 509, 510, 524, 535, 538, 540, 547, 552, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 580, 581, 583, 589, 590, 592, 594, 604, 611, 612, 621, 628, 633, 634, 646, 649, 659, 660, 667, 668, 669, 670, 677, 678, 679, 680, 681, 693, 697, 700, 701, 705, 717, 718, 720, 725, 737, 738, 753, 756, 758, 775, 779, 780, 781, 782, 793, 794, 796, 801, 804, 805, 813, 814, 834, 837, 845, 846, 851, 855, 864, 865, 869, 870, 874, 876, 878, 879, 886, 895, 896, 899, 902, 905, 906, 913, 914, 915, 916, 917, 919, 921, 925, 926, 963, 977, 982, 983, 985, 988, 989, 990, 993, 994, 995, 996, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1017, 1020, 1022, 1026, 1027, 1029, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "aniket": [1051, 1053], "anil": [410, 453, 463], "anim": [351, 418], "anirban": 418, "aniruddha": 1044, "anish": [1041, 1042], "anisha": 1046, "aniso": [42, 60], "anisotrop": [55, 151, 420, 618, 620, 623], "anisotropicli": [42, 60], "anjirbag": 1044, "ankan": 1041, "ankerst": [410, 451, 458], "ankit": [1039, 1046, 1048, 1050], "ankit810": 1047, "ankita": 1044, "ankur": [1041, 1052], "ann": [1036, 1048, 1050], "anna": 1044, "annaayzenshtat": 1044, "annal": [146, 181, 185, 377, 417, 475, 517, 518, 519, 560, 561, 657, 989], "annau": 1049, "annegnx": 1052, "anno": [693, 990], "annoi": 367, "annot": [2, 7, 24, 132, 144, 173, 219, 263, 266, 351, 380, 381, 382, 410, 717, 919, 993, 1009, 1045], "annotationbbox": 219, "announc": [315, 316, 317, 318, 319, 320, 321, 322, 323, 384], "annual": [377, 410, 727, 757, 902, 993, 1006], "anomali": [7, 78, 126, 164, 211, 225, 236, 241, 289, 290, 375, 408, 470, 513, 523, 564, 640, 678, 851, 866, 909, 999, 1013, 1015, 1042, 1043], "anomaly_algorithm": 226, "anomaly_frac": 236, "anoth": [2, 35, 93, 98, 109, 120, 124, 146, 149, 157, 162, 167, 186, 201, 205, 223, 226, 233, 237, 244, 253, 259, 261, 262, 265, 269, 273, 293, 351, 353, 356, 362, 366, 368, 374, 375, 378, 380, 382, 386, 392, 394, 403, 406, 410, 414, 415, 417, 418, 419, 421, 443, 445, 453, 456, 463, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 509, 539, 541, 548, 674, 677, 693, 710, 720, 807, 823, 824, 864, 865, 886, 982, 983, 988, 989, 990, 993, 994, 996, 999, 1003, 1007, 1008, 1020, 1027, 1028, 1029, 1045, 1046, 1053], "anova": [8, 52, 72, 140, 142, 145, 146, 147, 164, 257, 334, 349, 411, 505, 516, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 714, 827, 831, 865, 866, 885, 905, 910, 1008, 1015], "anova__percentil": [52, 342], "anova_filt": 143, "anova_svm": 143, "ansam": 1052, "answer": [136, 166, 259, 380, 392, 403, 409, 727, 757, 993, 1018], "ant": [719, 755, 993], "anthoni": [1041, 1043, 1044], "anthony22": [1051, 1052], "anti": [181, 362, 607, 840, 995], "anti_alias": [44, 45, 1028], "anticip": 11, "antoin": [1036, 1038, 1039, 1040, 1043], "antoni": [1040, 1042, 1048, 1051], "antonin": 1043, "antonio": [1044, 1046], "anubhav": 1044, "anuja": 1046, "anulekh": 1051, "anupam": [899, 1005, 1051], "any_method": 953, "anymor": [125, 169, 197, 261, 315, 316, 339, 362, 384, 411, 671, 1042, 1045, 1048, 1049, 1050, 1052, 1053], "anyon": [380, 395, 409, 1017, 1018], "anyth": [353, 384, 386, 394, 400, 411, 414, 953, 957, 1050], "anywai": [7, 351, 382, 666, 686, 687], "anywher": 306, "anz": 1037, "aoif": [709, 993], "ap": [266, 708, 709, 993], "apart": [167, 318, 339, 392, 394, 400, 411, 413, 419, 726, 1008, 1018, 1044], "api": [0, 6, 10, 25, 48, 54, 69, 105, 106, 114, 157, 164, 225, 227, 233, 237, 238, 241, 256, 261, 268, 269, 283, 322, 352, 353, 368, 369, 373, 374, 380, 381, 383, 384, 389, 390, 392, 393, 395, 397, 403, 409, 415, 417, 418, 420, 424, 427, 428, 429, 432, 434, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 497, 505, 509, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 564, 565, 567, 568, 569, 570, 571, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 672, 678, 689, 690, 691, 692, 693, 703, 798, 799, 804, 805, 807, 824, 831, 849, 851, 853, 854, 857, 861, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 909, 910, 959, 961, 977, 982, 991, 992, 993, 996, 1003, 1007, 1013, 1014, 1015, 1018, 1020, 1024, 1026, 1031, 1033, 1034, 1035, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "apk": 397, "apostolo": 1051, "appar": [83, 995, 1018], "appdata": 397, "appeal": 395, "appear": [0, 6, 44, 46, 112, 167, 170, 254, 256, 257, 289, 290, 299, 301, 306, 327, 343, 351, 352, 353, 375, 378, 380, 385, 394, 412, 415, 489, 490, 556, 568, 569, 580, 611, 628, 629, 631, 698, 701, 703, 713, 717, 719, 783, 790, 802, 819, 840, 841, 842, 843, 844, 907, 910, 944, 989, 995, 999, 1036, 1044, 1048, 1049], "append": [5, 6, 7, 10, 11, 15, 23, 31, 35, 38, 42, 48, 59, 69, 100, 112, 113, 115, 120, 122, 125, 162, 170, 190, 201, 202, 204, 205, 212, 215, 231, 232, 259, 262, 268, 269, 272, 299, 300, 311, 329, 339, 342, 351, 352, 353, 356, 360, 386, 394, 411, 418, 659, 660, 905, 906, 912, 932, 1003, 1024], "appendix": [646, 677, 989, 1003], "appl": [10, 366, 378, 392, 994], "appli": [7, 13, 17, 23, 25, 30, 38, 42, 44, 45, 53, 54, 56, 60, 69, 73, 84, 88, 93, 94, 99, 101, 103, 114, 115, 120, 122, 142, 149, 167, 169, 181, 186, 201, 202, 211, 218, 219, 220, 226, 231, 233, 259, 260, 262, 271, 273, 281, 292, 305, 309, 310, 316, 339, 343, 353, 360, 362, 366, 372, 380, 382, 388, 392, 393, 394, 400, 406, 407, 408, 410, 411, 412, 414, 415, 417, 418, 419, 420, 422, 441, 447, 453, 463, 465, 466, 468, 470, 475, 483, 484, 485, 486, 509, 510, 517, 518, 519, 525, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 549, 550, 551, 554, 555, 558, 559, 560, 561, 565, 566, 567, 589, 590, 591, 592, 628, 633, 634, 639, 640, 642, 643, 659, 660, 669, 677, 678, 679, 692, 700, 702, 708, 727, 757, 759, 760, 782, 789, 793, 794, 801, 815, 831, 834, 840, 841, 842, 843, 844, 854, 864, 865, 874, 881, 882, 885, 890, 891, 893, 894, 895, 896, 901, 912, 913, 914, 915, 916, 925, 931, 934, 941, 942, 965, 983, 985, 989, 990, 991, 992, 993, 995, 997, 999, 1001, 1003, 1007, 1008, 1009, 1010, 1012, 1018, 1037, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050], "applic": [1, 3, 14, 17, 47, 53, 78, 164, 173, 197, 214, 220, 252, 253, 262, 305, 366, 368, 375, 377, 380, 382, 386, 388, 389, 392, 394, 407, 409, 410, 414, 415, 416, 417, 420, 422, 445, 447, 453, 497, 499, 533, 534, 535, 554, 555, 630, 689, 690, 691, 695, 713, 730, 731, 739, 784, 785, 788, 831, 982, 989, 990, 991, 992, 993, 997, 999, 1005, 1009, 1013, 1014, 1015, 1017, 1018, 1027, 1029, 1036, 1037, 1042, 1044, 1047], "apply_along_axi": 302, "appr": 620, "appreci": [0, 380, 392], "approach": [3, 6, 56, 61, 64, 97, 146, 149, 161, 167, 170, 179, 185, 197, 199, 205, 215, 218, 253, 278, 311, 343, 351, 352, 353, 368, 379, 380, 386, 389, 394, 397, 403, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 438, 444, 447, 449, 453, 463, 521, 533, 583, 590, 612, 636, 659, 660, 675, 676, 834, 850, 942, 982, 983, 989, 990, 993, 994, 996, 997, 1003, 1007, 1008, 1012, 1013, 1018, 1022, 1027, 1028, 1040, 1052], "appropri": [53, 55, 100, 154, 167, 201, 233, 268, 273, 323, 356, 362, 378, 380, 382, 388, 394, 403, 407, 408, 410, 414, 416, 417, 421, 445, 451, 458, 490, 491, 492, 497, 501, 502, 503, 505, 506, 511, 578, 583, 592, 593, 596, 597, 599, 600, 601, 673, 675, 688, 710, 847, 848, 849, 851, 853, 855, 856, 857, 977, 989, 992, 993, 1003, 1040, 1043, 1049, 1052, 1054], "approv": [380, 395, 417], "approx": [25, 93, 231, 415, 417, 418, 993, 1000, 1007], "approxim": [2, 3, 25, 31, 44, 51, 78, 97, 98, 102, 113, 121, 122, 146, 150, 167, 174, 177, 193, 197, 198, 211, 215, 220, 223, 225, 226, 229, 232, 241, 249, 259, 264, 274, 275, 284, 285, 292, 297, 305, 307, 308, 310, 315, 318, 351, 353, 358, 359, 362, 369, 372, 377, 389, 392, 394, 406, 407, 411, 413, 414, 415, 417, 420, 422, 423, 424, 434, 450, 470, 471, 474, 475, 476, 477, 483, 484, 485, 492, 497, 503, 522, 525, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 560, 561, 583, 590, 611, 612, 620, 639, 640, 641, 642, 643, 646, 658, 659, 660, 673, 675, 677, 678, 680, 688, 693, 759, 760, 765, 798, 802, 819, 826, 830, 831, 845, 846, 849, 853, 855, 856, 857, 861, 865, 866, 871, 875, 877, 878, 882, 894, 905, 910, 911, 941, 942, 967, 986, 987, 988, 989, 990, 992, 996, 997, 998, 999, 1000, 1001, 1005, 1007, 1008, 1009, 1013, 1014, 1015, 1029, 1031, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "approximate_nearest_neighbor": [283, 297, 1015], "approximateident": 1037, "april": [375, 665, 686, 687, 1040, 1048, 1053], "apriori": 215, "apt": [378, 388, 397], "aptitud": 167, "aqua": 268, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 30, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 64, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 83, 84, 88, 90, 93, 95, 98, 100, 103, 107, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 142, 143, 145, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 206, 208, 215, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 244, 245, 246, 248, 252, 254, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 281, 283, 285, 288, 289, 293, 296, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 323, 326, 328, 329, 330, 331, 337, 339, 341, 343, 346, 347, 351, 352, 353, 356, 360, 362, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 431, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 509, 510, 511, 513, 516, 517, 518, 519, 520, 521, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 749, 751, 752, 754, 755, 757, 758, 762, 763, 764, 766, 768, 769, 770, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 813, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 929, 930, 931, 934, 936, 941, 942, 943, 946, 947, 949, 950, 953, 956, 957, 959, 961, 964, 967, 968, 972, 973, 974, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "arab": 628, "arabi": [410, 706, 716, 787], "aradwad": 1047, "arafat": 1042, "arai": 1046, "arang": [2, 9, 11, 12, 38, 56, 58, 63, 71, 77, 78, 100, 103, 118, 119, 121, 123, 124, 128, 132, 142, 149, 151, 156, 157, 161, 162, 170, 181, 197, 200, 202, 206, 221, 229, 231, 254, 259, 262, 267, 270, 281, 283, 296, 299, 307, 318, 326, 327, 329, 331, 339, 345, 351, 353, 358, 359, 360, 362, 392, 406, 414, 418, 466, 545, 831, 880, 884, 988, 989, 997, 1003, 1007, 1025], "aravindh": 1051, "arbitarili": 351, "arbitrari": [2, 53, 84, 93, 94, 95, 114, 156, 176, 197, 214, 215, 257, 305, 309, 311, 317, 351, 360, 367, 380, 392, 394, 403, 411, 414, 415, 417, 418, 422, 447, 451, 456, 458, 466, 533, 534, 560, 561, 582, 640, 649, 670, 681, 689, 743, 790, 802, 803, 808, 810, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 869, 871, 884, 982, 984, 985, 989, 990, 993, 996, 1003, 1014, 1029, 1036, 1037, 1040, 1042, 1043, 1044, 1046, 1050, 1052], "arbitrarili": [150, 244, 249, 351, 394, 420, 433, 466, 483, 484, 485, 553, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 681, 722, 723, 724, 725, 747, 786, 790, 838, 839, 848, 856, 863, 886, 906, 908, 911, 914, 916, 993, 996, 1003, 1009], "arc": [377, 417], "archana": [1046, 1048], "archit": 1042, "architectur": [378, 382, 388, 392, 397, 403, 469, 903, 997, 1011, 1018, 1036, 1053], "archiv": [6, 278, 374, 375, 377, 378, 410, 443, 501, 503, 511, 759, 760, 991, 1008, 1029], "archive_filenam": 6, "archive_path": 6, "archive_sha256": 6, "arci": [709, 993], "arcidiacono": [1050, 1051, 1053], "arcsin": [700, 765], "arctan": [32, 244, 249, 376, 519], "arctan2": [243, 245, 248], "ard": [176, 645, 646], "ard_poli": 176, "ard_scor": 176, "ardregress": [176, 181, 646, 934, 989, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "area": [9, 11, 126, 146, 197, 215, 236, 256, 259, 266, 268, 269, 339, 343, 344, 347, 377, 380, 384, 392, 410, 418, 703, 707, 708, 709, 743, 789, 790, 990, 993, 996, 1012, 1038], "aren": [233, 351, 375, 384, 397, 408, 727, 757, 998, 1046, 1048], "arezki": 1036, "arfa": 1042, "arff": [320, 380, 497, 1048, 1051, 1052], "arg": [233, 300, 343, 381, 394, 415, 417, 424, 572, 573, 574, 575, 576, 577, 578, 579, 618, 700, 869, 961, 989, 995, 996], "arg1": 1029, "arg2": 1029, "arg3": 1029, "arg_sort_bi": 11, "argentina": 765, "argmax": [24, 100, 258, 272, 382, 417, 570, 833, 913, 1008, 1049], "argmin": [10, 121, 258, 382, 412, 532, 538, 546, 547, 686, 780, 781, 1009], "argpartit": 1043, "argsort": [13, 15, 17, 18, 19, 121, 123, 169, 170, 197, 215, 315, 326, 327, 351, 352, 375, 1001], "argument": [70, 198, 227, 230, 233, 367, 374, 375, 380, 381, 383, 385, 386, 388, 389, 392, 394, 410, 411, 414, 415, 417, 419, 421, 422, 424, 428, 432, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 458, 460, 462, 464, 469, 470, 494, 497, 504, 509, 534, 536, 537, 539, 541, 552, 560, 561, 564, 568, 569, 570, 571, 578, 582, 583, 589, 590, 592, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 632, 640, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 667, 669, 677, 678, 682, 685, 689, 693, 697, 699, 700, 701, 702, 703, 715, 720, 736, 743, 764, 780, 781, 807, 824, 826, 827, 828, 829, 833, 834, 837, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 862, 865, 869, 903, 909, 919, 923, 932, 937, 960, 961, 962, 963, 977, 982, 985, 989, 990, 991, 993, 996, 1000, 1001, 1008, 1009, 1020, 1024, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054], "argv": 230, "ari": [35, 56, 352, 410, 706, 1041, 1047], "aria": [1044, 1045, 1051], "aric": 15, "arida": [54, 1045, 1046, 1048, 1050, 1053], "ariel": [4, 375, 1036, 1042], "ariga": 1042, "arik": 1044, "arima": 1013, "aris": [167, 262, 346, 367, 385, 410, 716, 989, 990, 1048], "arisa": [1050, 1051], "arithmet": [232, 386, 388, 410, 552, 649, 670, 681, 705, 718, 737, 738, 758, 796, 852, 993, 1044], "ari\u00f1o": 1039, "arjona": 1045, "arka204": [1049, 1051], "arm": [378, 380, 388, 982], "arm64": [378, 383], "arm64v8": 388, "armstrong": 1048, "arnaud": [0, 399, 1037, 1038, 1039, 1040, 1041, 1042], "arnaudov": [1048, 1050], "arnaudstiegl": 1046, "arnold": [1036, 1037], "arnoldi": [689, 690, 694], "aroma": 311, "arora": [1044, 1051], "around": [0, 2, 24, 35, 50, 83, 109, 112, 122, 155, 168, 173, 233, 236, 253, 262, 273, 302, 326, 328, 329, 339, 342, 343, 351, 352, 353, 362, 375, 377, 380, 386, 392, 409, 410, 414, 415, 418, 472, 473, 516, 545, 621, 641, 650, 669, 705, 743, 798, 807, 824, 851, 853, 855, 856, 857, 885, 989, 990, 992, 993, 999, 1003, 1007, 1013, 1014, 1017, 1018, 1027, 1029, 1040, 1041], "arpack": [10, 17, 42, 44, 64, 68, 219, 322, 415, 452, 453, 454, 463, 536, 542, 545, 689, 690, 692, 694, 696, 990, 1042, 1043, 1048, 1052, 1053, 1054], "arpanchowdhri": 1046, "arr": 323, "arrai": [4, 5, 6, 8, 9, 10, 11, 12, 17, 30, 31, 32, 38, 42, 44, 46, 51, 52, 59, 60, 62, 68, 70, 79, 83, 90, 94, 95, 121, 123, 125, 126, 129, 132, 143, 146, 150, 151, 152, 157, 167, 176, 178, 181, 190, 191, 194, 197, 198, 204, 214, 219, 220, 226, 230, 233, 236, 237, 240, 243, 244, 245, 247, 248, 253, 254, 255, 257, 259, 260, 263, 264, 268, 281, 296, 308, 315, 318, 319, 321, 322, 327, 335, 342, 343, 351, 359, 362, 366, 367, 373, 374, 375, 380, 381, 382, 383, 385, 386, 388, 390, 392, 393, 394, 403, 406, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 516, 520, 524, 525, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 584, 585, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 930, 931, 940, 941, 942, 943, 944, 946, 947, 948, 955, 956, 957, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 980, 983, 988, 989, 991, 993, 994, 996, 997, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1018, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "arrang": [18, 281, 633, 836, 837, 838, 839, 993], "array_api": 405, "array_api_compat": 405, "array_api_dispatch": [405, 469, 903], "array_api_support": [382, 405], "array_convert": 926, "array_equ": [570, 1043], "array_lik": 940, "array_paramet": 380, "array_split": 1024, "array_sym": 979, "arrayfunc": [389, 408], "arrow": [24, 1050], "arrow_arg": 7, "arrowprop": [7, 24], "arrowstyl": 7, "arroyo": 1050, "art": [317, 386, 650, 693, 1013, 1018], "artem": [1040, 1043, 1053], "arth": 1050, "arthur": [212, 213, 410, 448, 461, 1041, 1042, 1043, 1044, 1045, 1048, 1050], "arthurmello": 1050, "articl": [0, 15, 68, 351, 375, 379, 380, 388, 414, 423, 476, 706, 989, 993, 1029, 1049], "artiem": 1044, "artifact": [2, 12, 44, 45, 305, 368, 384, 1031], "artifici": [116, 119, 127, 146, 162, 201, 218, 232, 253, 302, 351, 375, 376, 377, 385, 406, 408, 410, 414, 415, 536, 697, 835, 862, 863, 986, 990, 992, 994, 1000, 1005, 1009, 1014, 1018, 1036], "artist": [387, 439, 633, 699, 701, 702, 703, 807, 824, 919], "artsiom": 1043, "artsion": 1042, "artstein": 717, "artur": [1051, 1052], "arturo": [0, 35, 55, 115, 125, 176, 181, 236, 260, 262, 310, 351, 352, 353, 391, 1050, 1051, 1052, 1053], "arturoamor": 1050, "artwork": 1011, "aruku": [1044, 1045], "arunav": 1047, "arunava": 1044, "arxiv": [380, 463], "arya": 1044, "as_float_arrai": 389, "as_fram": [2, 3, 11, 69, 73, 115, 119, 125, 130, 154, 167, 168, 169, 170, 185, 186, 197, 205, 213, 215, 236, 240, 253, 273, 278, 283, 286, 301, 310, 311, 315, 317, 319, 320, 374, 375, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 1046, 1047, 1048, 1049, 1052], "asanyarrai": 382, "asarrai": [6, 15, 197, 215, 302, 328, 351, 352, 382, 394, 405, 727, 757, 853, 855, 856, 857, 1003, 1008, 1053], "ascend": [18, 69, 169, 311, 417, 451, 457, 595, 628, 636, 917, 918, 919, 1007, 1046, 1052], "ascent": [154, 420], "ascii": [9, 296, 418, 488, 589, 590, 592], "ascontiguousarrai": 542, "asctim": 93, "aseem": 1043, "asgd": [204, 1007], "ash": [7, 377, 1039, 1042], "ashah002": [1051, 1052, 1053], "ashim": 1046, "ashimb9": 1046, "ashimin": 1049, "ashish": [1049, 1052], "ashra": 645, "ashutosh": [1043, 1044, 1046, 1048], "ashvith": 1049, "ashwin": [1051, 1052], "asia": [259, 1003], "asian": 418, "asid": [120, 205, 403, 560, 561, 562, 563, 667, 668, 669, 677, 679, 862, 863], "asish": [1042, 1043], "ask": [0, 161, 162, 259, 369, 379, 380, 384, 385, 388, 394, 395, 403, 419, 847, 848, 849, 851, 853, 855, 856, 857, 1011, 1017, 1052], "asnt": 1042, "aspect": [5, 56, 84, 93, 153, 168, 218, 226, 268, 273, 292, 366, 367, 368, 380, 394, 395, 410, 492, 659, 660, 1009, 1018, 1053], "aspir": [146, 377, 380], "ass": [78, 79, 412, 475], "assembl": [281, 312, 353, 865], "assert": [6, 15, 46, 94, 230, 259, 268, 367, 383, 1014], "assert_all_finit": [366, 389, 469], "assert_allclos": 382, "assert_array_equ": 418, "assert_warn": 1049, "assert_warns_messag": 1049, "assertionerror": 1043, "assess": [3, 11, 35, 58, 109, 120, 122, 167, 197, 215, 236, 255, 256, 258, 262, 407, 417, 702, 744, 992, 993, 999, 1014, 1051], "assia": 1045, "assiaben": 1045, "assign": [6, 15, 18, 32, 35, 44, 47, 55, 56, 58, 109, 114, 126, 128, 142, 144, 151, 210, 215, 226, 231, 234, 253, 299, 307, 312, 331, 346, 352, 375, 380, 382, 394, 406, 414, 415, 417, 418, 419, 420, 441, 442, 443, 444, 446, 447, 448, 449, 450, 453, 455, 457, 460, 461, 462, 463, 516, 537, 562, 563, 594, 595, 608, 609, 611, 659, 660, 667, 668, 669, 677, 678, 679, 705, 706, 716, 717, 718, 721, 730, 731, 732, 739, 740, 744, 756, 758, 784, 785, 787, 788, 794, 795, 796, 801, 804, 805, 807, 810, 815, 824, 826, 827, 828, 829, 832, 849, 855, 857, 858, 859, 872, 900, 901, 905, 906, 907, 908, 909, 910, 911, 987, 989, 992, 993, 994, 995, 996, 997, 998, 1003, 1006, 1018, 1020, 1029, 1036, 1041, 1043, 1044, 1053, 1054], "assign_label": [44, 410, 453, 463], "assist": [0, 380, 392, 409, 1003, 1017, 1018], "associ": [0, 9, 22, 23, 78, 109, 149, 166, 167, 201, 246, 253, 311, 326, 328, 351, 388, 410, 412, 414, 415, 417, 418, 428, 447, 450, 470, 471, 472, 473, 474, 475, 476, 477, 494, 495, 496, 525, 558, 562, 565, 606, 607, 631, 646, 659, 660, 667, 669, 675, 676, 677, 690, 696, 700, 732, 740, 823, 828, 848, 856, 870, 882, 894, 902, 911, 913, 915, 931, 992, 993, 996, 1003, 1006, 1018, 1028, 1036, 1048, 1052], "assum": [7, 32, 53, 55, 156, 162, 166, 167, 186, 197, 215, 226, 229, 236, 249, 259, 268, 305, 346, 353, 367, 379, 380, 382, 384, 386, 392, 393, 394, 396, 403, 406, 407, 410, 412, 414, 415, 417, 418, 420, 421, 426, 431, 438, 440, 445, 447, 451, 458, 464, 470, 471, 472, 473, 474, 475, 476, 477, 504, 509, 510, 533, 543, 549, 550, 562, 563, 568, 569, 588, 589, 590, 592, 621, 633, 644, 645, 647, 648, 653, 659, 660, 661, 662, 663, 667, 668, 669, 672, 673, 677, 678, 679, 682, 686, 688, 689, 693, 710, 723, 727, 736, 742, 757, 765, 770, 775, 779, 782, 801, 804, 805, 815, 841, 847, 848, 851, 853, 855, 856, 861, 872, 885, 953, 969, 970, 971, 983, 987, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1003, 1007, 1009, 1042, 1048], "assume_cent": [31, 77, 412, 423, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "assume_finit": [366, 367, 469, 903], "assumpt": [2, 7, 11, 23, 25, 34, 41, 66, 76, 77, 96, 154, 158, 164, 166, 197, 199, 226, 255, 281, 305, 386, 392, 393, 396, 407, 408, 410, 412, 414, 415, 418, 420, 448, 452, 454, 489, 504, 513, 533, 535, 542, 651, 655, 799, 801, 804, 805, 815, 842, 897, 898, 987, 989, 993, 994, 995, 996, 998, 999, 1000, 1003, 1006, 1009, 1015, 1043, 1049], "assur": [0, 394, 798, 799, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "astel": 1044, "astolfi": 1036, "astrai": 394, "astro": [9, 156, 218, 246], "astroml": 1013, "astronom": 1012, "astronomi": 1013, "astropi": 380, "astyp": [2, 12, 35, 39, 42, 43, 51, 58, 60, 64, 79, 99, 119, 121, 138, 166, 168, 187, 188, 215, 221, 232, 236, 253, 270, 283, 312, 403, 418, 983, 989, 1043], "asv": 380, "asv_benchmark": 380, "asymmetr": [122, 199, 394, 1041], "asymmetri": [199, 351], "asymptot": [76, 77, 186, 366, 412, 475, 537, 731, 989, 992, 1046], "atag": 157, "atariah": 1045, "ateif": 1049, "atharva": 1050, "atheism": [17, 260, 330, 351, 352, 353, 375, 489, 1029], "atheist": 351, "athena": 1018, "ation": 418, "atla": [366, 378], "atleast_2d": [122, 382], "atmospher": 154, "atol": [382, 673, 675, 845, 846, 850], "atom": [96, 102, 415, 532, 538, 540, 543, 544, 546, 547, 654, 664, 685, 989, 1036, 1049], "atomic_benchmark": 8, "atomic_benchmark_estim": 8, "atomic_runtim": 8, "atsushi": [1048, 1049], "attach": [6, 351, 435, 850, 1037, 1047], "attack": [236, 375], "attalla": 1050, "attard": 1049, "attempt": [2, 52, 168, 193, 203, 254, 351, 366, 379, 394, 410, 422, 447, 451, 458, 465, 469, 632, 689, 690, 694, 819, 847, 848, 849, 851, 853, 855, 856, 857, 883, 885, 903, 925, 926, 989, 990, 996, 1009, 1020, 1043, 1048, 1053], "attenberg": 418, "attend": 0, "attent": [388, 608, 609, 1007], "attenu": 149, "attia": 798, "attr": [6, 54], "attract": [421, 445, 987, 996, 1013], "attractador": [1043, 1044], "attrgett": [594, 598], "attribut": [6, 23, 30, 47, 69, 101, 107, 109, 116, 117, 120, 142, 146, 197, 205, 233, 248, 257, 258, 263, 271, 292, 296, 318, 343, 353, 360, 368, 369, 373, 374, 375, 377, 380, 383, 387, 392, 403, 406, 407, 410, 411, 412, 413, 415, 417, 418, 419, 420, 425, 426, 427, 428, 429, 432, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 737, 796, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 954, 977, 985, 987, 989, 994, 996, 997, 999, 1003, 1006, 1007, 1008, 1009, 1018, 1020, 1026, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "attributeerror": [411, 560, 578, 954, 1028, 1045, 1046, 1048, 1052, 1053], "attrselect": 1036, "atukorala": 1051, "atuo": [1052, 1053], "aubert": 1043, "auc": [9, 23, 146, 197, 215, 236, 256, 259, 263, 266, 268, 269, 322, 407, 703, 709, 789, 993, 1041, 1044, 1048], "auc_scor": [1036, 1038], "audio": [374, 504], "aufarkari": 1050, "aug": 1008, "augment": [329, 631, 887, 1001, 1018], "augspurg": [1044, 1046], "august": [146, 377, 410, 512, 535, 1008, 1036, 1038, 1039, 1043, 1050], "aura": 1048, "auroc": 993, "aur\u00e9lien": [1043, 1044, 1045, 1049, 1050], "austin": 1043, "australian": [125, 397], "author": [0, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 30, 35, 37, 38, 40, 44, 45, 46, 50, 51, 52, 54, 55, 59, 63, 64, 65, 68, 69, 70, 72, 73, 80, 93, 95, 97, 98, 100, 103, 107, 110, 111, 112, 113, 114, 115, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 198, 199, 201, 202, 204, 205, 212, 213, 214, 218, 219, 220, 221, 223, 226, 229, 231, 232, 234, 236, 243, 245, 246, 253, 258, 260, 262, 263, 265, 272, 281, 283, 285, 288, 295, 296, 299, 302, 305, 306, 308, 309, 310, 326, 327, 328, 329, 331, 346, 351, 352, 353, 374, 380, 384, 388, 392, 394, 395, 414, 452, 535, 872, 985, 1013, 1039], "authorit": 395, "authorship": 384, "auto": [17, 31, 55, 56, 90, 146, 153, 180, 218, 223, 238, 283, 286, 291, 315, 316, 317, 318, 319, 320, 323, 335, 336, 342, 345, 353, 374, 375, 382, 417, 420, 421, 442, 445, 446, 447, 448, 450, 451, 453, 456, 457, 458, 460, 463, 497, 509, 510, 536, 539, 541, 542, 545, 548, 550, 558, 559, 562, 563, 564, 565, 566, 568, 594, 595, 598, 603, 608, 609, 630, 632, 633, 634, 636, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 703, 800, 804, 805, 823, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 862, 863, 878, 879, 886, 897, 898, 902, 905, 906, 907, 908, 909, 910, 911, 915, 916, 941, 942, 959, 962, 984, 987, 989, 990, 996, 1003, 1013, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "auto_exampl": [14, 20, 26, 33, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 241, 250, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 354, 361], "auto_examples_jupyt": 164, "auto_examples_python": 164, "auto_viml": 1048, "auto_wrap_output_kei": 382, "autoclass": 377, "autocorrel": 414, "autolabel": 6, "autom": [260, 384, 397, 693, 982, 989, 990, 993, 1013, 1018], "automat": [2, 6, 10, 11, 25, 44, 61, 63, 69, 100, 125, 136, 145, 176, 200, 243, 244, 253, 257, 260, 305, 312, 316, 320, 330, 341, 343, 367, 369, 375, 378, 380, 382, 384, 388, 394, 397, 403, 405, 410, 411, 412, 415, 417, 418, 419, 434, 451, 453, 457, 463, 465, 466, 468, 497, 500, 516, 539, 541, 542, 548, 550, 552, 558, 562, 565, 584, 589, 592, 595, 603, 644, 646, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 673, 675, 676, 677, 679, 682, 685, 688, 689, 692, 696, 803, 818, 821, 831, 841, 862, 863, 866, 867, 869, 878, 879, 886, 897, 898, 905, 906, 907, 910, 913, 915, 919, 931, 964, 967, 982, 984, 987, 992, 997, 1003, 1007, 1009, 1013, 1014, 1024, 1036, 1039, 1040, 1041, 1047, 1050, 1051, 1052, 1053, 1054], "automl": [993, 1013], "automobil": 1018, "autoregress": 375, "autoviml": 1013, "autoviz": 1048, "auxiliari": [162, 378, 408, 1018, 1051], "av": 1044, "avail": [0, 3, 9, 10, 12, 39, 54, 55, 96, 117, 121, 125, 146, 149, 154, 158, 166, 167, 168, 186, 197, 205, 215, 219, 233, 236, 253, 256, 257, 262, 263, 266, 273, 288, 289, 290, 296, 310, 315, 316, 317, 318, 320, 321, 329, 331, 362, 366, 374, 375, 377, 378, 379, 380, 381, 385, 389, 393, 394, 397, 403, 406, 408, 410, 411, 414, 415, 416, 417, 418, 419, 421, 448, 451, 452, 453, 454, 470, 471, 472, 473, 474, 475, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 509, 536, 550, 556, 557, 558, 559, 560, 561, 565, 566, 568, 569, 570, 571, 594, 595, 611, 612, 628, 633, 634, 648, 652, 654, 656, 658, 662, 664, 666, 669, 671, 672, 673, 674, 675, 676, 677, 690, 697, 700, 733, 734, 801, 804, 805, 815, 827, 828, 833, 834, 835, 836, 837, 838, 839, 851, 862, 863, 865, 872, 881, 884, 889, 893, 898, 949, 954, 961, 983, 987, 990, 992, 993, 994, 995, 996, 999, 1003, 1006, 1007, 1008, 1012, 1013, 1014, 1017, 1018, 1020, 1024, 1029, 1031, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "available_if": [54, 394, 1049, 1050, 1053], "avebedrm": [305, 375, 491], "aventi": 10, "aveoccup": [305, 317, 375, 491], "averag": [2, 11, 23, 25, 35, 37, 38, 42, 50, 58, 60, 112, 113, 118, 122, 125, 126, 131, 132, 133, 146, 154, 168, 178, 186, 197, 204, 215, 236, 253, 262, 264, 267, 269, 273, 281, 305, 315, 321, 330, 351, 362, 366, 375, 377, 382, 392, 406, 407, 412, 414, 418, 419, 421, 422, 438, 439, 442, 445, 446, 447, 448, 450, 491, 494, 495, 524, 532, 533, 534, 538, 539, 541, 542, 546, 547, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 588, 595, 633, 634, 649, 659, 660, 667, 668, 670, 673, 675, 677, 678, 679, 681, 688, 701, 704, 705, 707, 708, 709, 714, 721, 722, 724, 726, 727, 729, 730, 731, 735, 736, 737, 739, 740, 741, 744, 746, 747, 749, 751, 752, 754, 757, 765, 782, 783, 784, 785, 786, 788, 789, 791, 792, 796, 797, 798, 799, 829, 832, 851, 871, 886, 979, 983, 988, 989, 994, 997, 999, 1000, 1007, 1008, 1009, 1027, 1029, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054], "average_bike_rent": 168, "average_coef_": 1047, "average_feature_effect": 351, "average_intercept_": 1047, "average_linkag": 42, "average_method": [410, 705, 758, 1044], "average_pr": 125, "average_precis": [266, 701, 708, 743, 993], "average_precision_scor": [266, 701, 707, 709, 783, 789, 993, 1036, 1039, 1043, 1044, 1050, 1052], "average_week_demand": [2, 125], "averoom": [305, 317, 375, 491], "avg": [4, 30, 68, 143, 257, 302, 326, 327, 570, 705, 714, 823, 993, 1025, 1029, 1052], "avg_dist": [38, 782], "avgclaim": 215, "avgclaimamount": 215, "avi": [1048, 1049], "avidar": 1052, "avinash": 1048, "avm19": [1050, 1051, 1053], "avoid": [2, 5, 10, 11, 42, 55, 60, 70, 114, 115, 120, 125, 167, 168, 199, 201, 206, 215, 221, 233, 236, 253, 254, 260, 264, 291, 293, 294, 309, 310, 322, 335, 336, 352, 367, 378, 380, 381, 382, 384, 385, 386, 392, 394, 395, 397, 403, 407, 410, 412, 414, 417, 418, 421, 441, 443, 445, 453, 463, 469, 494, 495, 496, 500, 509, 510, 535, 540, 544, 635, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 690, 692, 694, 696, 713, 793, 801, 802, 806, 812, 815, 826, 827, 828, 865, 868, 874, 875, 877, 882, 883, 884, 885, 888, 890, 891, 892, 893, 894, 895, 896, 898, 903, 942, 987, 990, 992, 993, 996, 997, 999, 1001, 1003, 1008, 1009, 1014, 1017, 1029, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "aw": 388, "awai": [23, 24, 25, 58, 76, 118, 149, 150, 154, 200, 343, 344, 375, 407, 420, 629, 847, 848, 855, 856, 992, 993, 1008, 1027], "await": 316, "awalei": 1044, "awar": [7, 13, 143, 158, 253, 336, 351, 378, 380, 382, 392, 395, 409, 414, 418, 568, 569, 649, 655, 656, 657, 659, 660, 670, 681, 851, 880, 999, 1003, 1009, 1033, 1036, 1037, 1050], "aweb": 1011, "awesom": 1018, "ax": [2, 3, 5, 6, 7, 8, 10, 11, 13, 23, 25, 28, 29, 30, 32, 38, 40, 41, 43, 51, 53, 54, 55, 62, 64, 70, 73, 78, 80, 84, 88, 90, 93, 99, 103, 109, 111, 114, 116, 119, 120, 125, 127, 128, 130, 131, 132, 152, 153, 158, 161, 166, 167, 168, 169, 170, 173, 176, 177, 180, 181, 186, 188, 189, 192, 194, 195, 197, 198, 199, 201, 202, 205, 206, 208, 210, 211, 212, 215, 218, 219, 220, 221, 222, 223, 227, 232, 236, 237, 239, 243, 245, 248, 253, 254, 255, 256, 259, 261, 262, 263, 265, 266, 268, 269, 270, 271, 273, 274, 278, 281, 283, 285, 286, 287, 288, 291, 293, 294, 299, 300, 301, 305, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 351, 352, 353, 356, 357, 382, 383, 415, 420, 439, 535, 542, 551, 632, 633, 698, 699, 701, 702, 703, 719, 807, 824, 919, 993, 996, 1000, 1028, 1033, 1046, 1052], "ax0": [71, 73, 197, 229, 352, 1025], "ax1": [5, 8, 55, 58, 63, 65, 71, 73, 78, 90, 119, 162, 170, 197, 227, 229, 237, 243, 262, 270, 306, 310, 311, 329, 351, 352, 1025], "ax2": [5, 55, 58, 63, 65, 78, 90, 119, 162, 170, 197, 227, 237, 243, 262, 270, 293, 306, 310, 311, 329, 351], "ax3": [63, 329], "ax4": 63, "ax_": [126, 252, 262, 266, 268, 275, 286, 310, 315, 387, 439, 632, 698, 699, 701, 702, 703, 807, 824], "ax_bc": 309, "ax_bottom": 387, "ax_calibration_curv": [23, 25], "ax_colorbar": 305, "ax_det": 256, "ax_histi": 305, "ax_histx": 305, "ax_histx_zoom": 305, "ax_histy_zoom": 305, "ax_idx": 261, "ax_origin": 309, "ax_qt": 309, "ax_roc": 256, "ax_row": 32, "ax_scatt": 305, "ax_scatter_zoom": 305, "ax_top_left": 387, "ax_top_right": 387, "ax_yj": 309, "ax_zoom_in": 305, "ax_zoom_out": 305, "axa": 0, "axarr": [131, 305], "axes_": [125, 127, 237, 316, 322, 387, 633], "axes_idx": 309, "axes_list": 309, "axes_row": 188, "axesimag": 698, "axhlin": [100, 136, 187, 258, 262], "axi": [2, 3, 5, 9, 10, 12, 13, 15, 17, 23, 24, 35, 37, 38, 45, 46, 48, 50, 51, 52, 53, 59, 69, 70, 73, 80, 84, 89, 90, 93, 94, 95, 96, 97, 102, 111, 112, 116, 118, 126, 129, 133, 138, 142, 153, 158, 161, 166, 167, 178, 182, 184, 186, 189, 190, 191, 197, 202, 206, 209, 211, 212, 214, 215, 219, 220, 223, 226, 230, 231, 235, 243, 245, 247, 248, 255, 256, 260, 261, 266, 268, 269, 281, 283, 288, 289, 290, 293, 294, 295, 302, 305, 309, 312, 322, 327, 329, 331, 335, 338, 339, 342, 344, 345, 346, 348, 351, 352, 357, 358, 359, 360, 375, 382, 389, 394, 407, 410, 418, 422, 439, 446, 465, 468, 532, 534, 537, 538, 540, 542, 544, 546, 547, 551, 586, 613, 632, 633, 686, 687, 702, 764, 780, 781, 782, 783, 807, 824, 833, 874, 875, 882, 883, 885, 890, 891, 892, 894, 895, 896, 919, 921, 925, 926, 944, 968, 974, 983, 993, 1000, 1003, 1008, 1026, 1028, 1044, 1046, 1048, 1053, 1054], "axis_idx": 2, "axis_list": 95, "axp": 10, "axvlin": [51, 58, 71, 80, 100, 121, 132, 167, 169, 170, 186, 265, 273, 346, 1025], "ayako": 1048, "ayan": 1050, "aydor": [1043, 1044, 1047], "ayerdi": 1040, "aymer": 1037, "aymericbasset": 1052, "ayomid": 1046, "ayush": [1044, 1049], "ayzenshtat": [1018, 1044], "azaria": [1051, 1052], "azencott": 1050, "azim": [43, 65, 88, 99, 168, 194, 218, 222], "azur": [0, 380], "b": [0, 6, 8, 22, 24, 57, 63, 78, 100, 111, 112, 118, 122, 123, 133, 136, 150, 151, 152, 157, 162, 179, 181, 182, 197, 198, 203, 215, 234, 236, 253, 258, 262, 264, 269, 274, 281, 318, 329, 362, 375, 377, 380, 384, 385, 386, 406, 407, 410, 413, 414, 415, 418, 438, 483, 499, 501, 542, 567, 589, 590, 591, 592, 608, 609, 611, 612, 629, 647, 648, 649, 650, 659, 670, 673, 675, 677, 681, 688, 689, 706, 720, 731, 732, 793, 794, 812, 813, 852, 878, 879, 880, 881, 884, 885, 893, 920, 927, 942, 943, 956, 958, 983, 985, 989, 990, 991, 993, 996, 998, 1003, 1007, 1008, 1024, 1036, 1044, 1047, 1049, 1050, 1051], "b0noi": 1042, "b0rxington": 1051, "b1": [211, 289, 338], "b12": [197, 215], "b1996": 417, "b1998": 417, "b1999": 417, "b2": [211, 289, 338], "b2001": 417, "b2011": 410, "b2c": 1018, "b30065": 307, "b5": 320, "b7a2ff": 309, "b_1": 997, "b_2": 997, "b_column": 720, "b_i": 998, "b_iv_i": 998, "b_j": 410, "b_k": 410, "b_mask": 268, "b_row": 720, "b_true": 268, "ba": [10, 862, 863, 997], "baak": 1050, "baam": [1049, 1050], "babino": [1049, 1050], "bac": 10, "bach": [415, 532, 537, 538, 539, 659, 989], "bachant": 1043, "back": [2, 98, 238, 367, 378, 380, 382, 394, 395, 403, 411, 418, 435, 444, 447, 448, 460, 483, 484, 485, 509, 510, 534, 535, 536, 539, 541, 542, 545, 582, 631, 659, 660, 667, 668, 669, 677, 678, 679, 729, 870, 872, 873, 874, 878, 879, 880, 882, 883, 885, 897, 898, 905, 989, 993, 997, 1014, 1020, 1029, 1039, 1044, 1046, 1047, 1050], "backend": [367, 383, 394, 469, 903, 959, 961, 963, 993, 1039, 1044, 1045, 1046, 1047], "backend_nam": 961, "background": [3, 9, 45, 64, 126, 302, 307, 375, 380, 388, 410, 494, 495, 990, 998, 1007, 1046], "background_point": 9, "backlink": 1041, "backport": [384, 389, 1043], "backprop": [997, 1007], "backpropag": 997, "backslash": 1051, "backtick": [380, 385], "backup": [509, 1036], "backward": [146, 233, 317, 383, 394, 419, 497, 578, 603, 615, 616, 619, 620, 621, 623, 624, 918, 921, 997, 1014, 1036, 1039, 1044, 1045, 1046, 1048, 1050, 1052], "bad": [43, 58, 59, 150, 167, 253, 351, 362, 380, 410, 420, 693, 747, 982, 989, 990, 995, 1001, 1028, 1036], "badaracco": 1049, "badli": [186, 197, 351, 368, 885, 989, 1003], "badr": 1051, "baeza": [591, 731, 1039], "bag": [8, 25, 68, 95, 108, 113, 115, 123, 124, 134, 164, 169, 278, 352, 353, 376, 407, 408, 517, 518, 519, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 742, 806, 831, 914, 991, 994, 1015, 1016, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1049, 1050, 1052], "bagai": 1049, "baggingclassifi": [394, 400, 417, 557, 915, 934, 983, 1039, 1042, 1043, 1044, 1047, 1051, 1052, 1054], "baggingregressor": [112, 400, 417, 556, 916, 983, 1039, 1042, 1044, 1047, 1051, 1052, 1054], "baharev": 1041, "bahavior": 351, "bahaviour": 351, "baibak": [1044, 1045], "bail": 1047, "bailei": [410, 705], "bajic": 1051, "baji\u0107": 1051, "bakir2003": 415, "bakiri": [835, 994], "bak\u0131r": [3, 415, 536], "bala": [1036, 1039], "balakumaran": [1043, 1044], "balanc": [2, 4, 11, 25, 51, 64, 70, 109, 115, 120, 145, 164, 201, 202, 251, 253, 257, 260, 262, 263, 273, 276, 305, 323, 368, 392, 394, 407, 409, 414, 415, 417, 503, 516, 535, 541, 542, 548, 558, 562, 565, 641, 659, 660, 667, 669, 675, 676, 677, 704, 709, 730, 744, 783, 788, 801, 802, 819, 865, 905, 907, 910, 913, 915, 930, 931, 982, 1008, 1009, 1015, 1025, 1036, 1038, 1041, 1042, 1045, 1046, 1050], "balanced_accuraci": [253, 273, 323, 709, 823, 993, 1044], "balanced_accuracy_scor": [253, 323, 704, 788, 993, 1044], "balanced_subsampl": [558, 565, 1044], "balaz": [22, 1040], "baldi": 744, "ball": [68, 288, 296, 410, 416, 449, 693, 845, 846, 850, 853, 855, 856, 857, 1036, 1038, 1041, 1047], "ball_tre": [296, 421, 445, 447, 451, 458, 689, 690, 847, 848, 849, 850, 851, 853, 855, 856, 857, 996, 1036, 1053], "balltre": [421, 445, 447, 451, 458, 689, 690, 700, 847, 848, 849, 850, 851, 853, 855, 856, 857, 990, 1036, 1038, 1040, 1044, 1049, 1052, 1053], "baloo": 990, "baluyot": 1045, "bamidel": 1046, "banana": [7, 993], "band": [11, 262, 307, 1003], "bandit": 982, "bandol": 311, "bandwidth": [7, 42, 61, 232, 287, 288, 296, 392, 394, 410, 416, 449, 459, 462, 845, 846, 850, 986, 999, 1047, 1051], "bandwidth_": 850, "bangda": 1044, "banilo": [1040, 1041], "bank": [10, 17, 1018], "bannerje": [1052, 1053], "bansal": 1043, "bansod": [1041, 1042, 1043], "bao": [1042, 1050], "baod": 410, "baptbillard": 1049, "baptist": [1039, 1047], "bar": [6, 8, 13, 70, 115, 116, 119, 120, 123, 132, 142, 146, 157, 161, 168, 176, 243, 248, 258, 260, 264, 281, 310, 311, 319, 320, 352, 382, 413, 582, 633, 649, 670, 681, 993, 1000, 1007, 1009, 1042, 1043, 1044, 1045], "bar_color": 6, "bar_kw": 633, "bar_siz": 351, "baran": 1046, "barang": 1052, "baraniuk": 419, "barankaraku": 1048, "barata": 1052, "barber": 533, "barberogaston": 1048, "bardiya": [1050, 1051], "bare": [375, 990, 1029], "barh": [13, 123, 161, 162, 166, 167, 169, 170, 240, 312, 351, 352, 353], "barikbin": 1052, "barkhorn": 1044, "barklei": 1046, "barmalei": [1040, 1041], "barn": [693, 990, 1041, 1043, 1046], "barnes_hut": [283, 693, 1043, 1044], "barnett": 1044, "barnhil": [594, 595], "barnowski": [1050, 1051], "barreca": [886, 1003], "barreto": 1050, "barri": [375, 1044], "barrier": 418, "barrycg": 1046, "bars_": 633, "bartelheim": 1047, "barth\u00e9lemi": [1052, 1053], "bartosz": 1045, "bart\u0142omiej": 1051, "barycent": [295, 1036], "basbug": 1043, "base": [3, 10, 11, 12, 13, 15, 18, 23, 24, 25, 32, 47, 54, 55, 56, 65, 68, 69, 73, 78, 88, 93, 94, 107, 109, 110, 115, 120, 121, 122, 123, 125, 128, 130, 133, 140, 143, 144, 147, 149, 154, 155, 157, 166, 168, 169, 170, 175, 176, 182, 183, 185, 186, 191, 192, 197, 198, 205, 214, 215, 216, 218, 226, 233, 234, 236, 256, 257, 262, 273, 278, 281, 283, 296, 302, 305, 306, 308, 310, 317, 319, 331, 337, 343, 352, 356, 366, 367, 369, 374, 375, 376, 377, 378, 381, 382, 383, 388, 392, 394, 395, 396, 403, 407, 409, 411, 415, 416, 418, 420, 421, 422, 438, 445, 447, 448, 449, 450, 451, 453, 457, 458, 462, 464, 465, 466, 467, 468, 488, 501, 502, 509, 510, 533, 534, 536, 537, 538, 539, 540, 542, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 617, 618, 619, 622, 625, 633, 634, 636, 637, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 665, 670, 672, 673, 674, 675, 676, 681, 683, 684, 686, 687, 688, 691, 693, 705, 718, 727, 736, 737, 738, 740, 742, 756, 757, 758, 786, 789, 796, 800, 801, 803, 804, 805, 807, 808, 810, 815, 819, 820, 821, 822, 829, 831, 835, 836, 839, 847, 848, 849, 851, 853, 855, 856, 857, 862, 863, 866, 867, 870, 877, 878, 880, 884, 885, 886, 894, 897, 898, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 928, 936, 961, 962, 982, 984, 985, 987, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1024, 1029, 1031, 1032, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1054], "base_classifi": [329, 331, 1006], "base_clf": 438, "base_estim": [317, 382, 407, 554, 555, 556, 557, 836, 839, 902, 982, 1047, 1049, 1050, 1051, 1052], "base_estimator_": [554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 611, 902, 1051], "base_estimator__": 1051, "base_lr": [281, 836], "base_model": 409, "base_x_test": 76, "base_x_train": 76, "basebag": [1042, 1044], "basebal": [17, 375], "basedecisiontre": [1044, 1045, 1048], "basedictionarylearn": 1036, "baseensembl": [1043, 1046], "baseestim": [54, 107, 233, 283, 380, 393, 394, 420, 425, 427, 428, 432, 433, 434, 602, 633, 634, 934, 1036, 1043, 1046, 1048, 1050, 1051], "basegradientboost": 1037, "baselabelpropag": 1043, "baselibsvm": 1046, "baselin": [23, 109, 119, 122, 133, 146, 170, 176, 215, 253, 269, 281, 317, 352, 377, 410, 419, 552, 553, 635, 993, 996, 1029, 1052], "baseline_similar": 157, "baseline_similarity_bound": 157, "basemap": [9, 296], "basemixtur": [1044, 1045], "basemultilayerperceptron": [1044, 1046], "basenb": 1046, "baserandomproject": [897, 898], "basesearchcv": [1043, 1044], "basesgd": 1007, "basesgdclassifi": 1045, "baseshufflesplit": 1049, "bash": [367, 388], "bashrc": 388, "basi": [2, 4, 12, 98, 149, 154, 156, 198, 301, 318, 339, 343, 372, 378, 381, 410, 415, 417, 453, 535, 623, 633, 640, 692, 884, 991, 1003, 1008, 1016, 1024, 1025, 1028, 1031, 1044, 1046, 1049], "basic": [122, 148, 149, 154, 155, 158, 159, 162, 164, 195, 273, 312, 344, 366, 368, 369, 380, 382, 384, 392, 394, 410, 414, 415, 417, 612, 623, 901, 913, 914, 915, 916, 982, 983, 996, 1007, 1012, 1013, 1014, 1015, 1018, 1027], "basicconfig": 93, "basil": 1043, "basis_1": 198, "basis_2": 198, "basri": 514, "bassett": 989, "bastiaan": [1037, 1038], "bastian": 1044, "bat": 378, "batch": [6, 9, 62, 93, 97, 296, 319, 368, 389, 394, 418, 441, 443, 448, 450, 452, 454, 532, 534, 535, 537, 538, 539, 540, 541, 543, 544, 546, 547, 665, 686, 687, 806, 819, 820, 840, 841, 842, 843, 844, 862, 863, 874, 875, 885, 898, 945, 959, 997, 998, 1007, 1036, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1052], "batch_dict_estim": 93, "batch_pca_estim": 93, "batch_siz": [13, 17, 40, 62, 93, 96, 97, 352, 415, 450, 535, 537, 538, 539, 540, 547, 861, 862, 863, 945, 946, 959, 1037, 1044, 1047, 1049, 1050], "batch_size_": 535, "batchkarov": [1037, 1041], "batiss": 1047, "batista": [1044, 1045, 1049], "batistaki": 410, "batoul": 1049, "battista": 1047, "batula": 1043, "bauk": [1044, 1045], "baum": 447, "baumgartn": 1043, "baxlei": 1043, "bay": [25, 29, 112, 128, 149, 186, 248, 261, 351, 369, 375, 407, 415, 417, 418, 537, 550, 551, 657, 840, 841, 842, 843, 844, 886, 987, 988, 989, 1003, 1016, 1029, 1031, 1036, 1037, 1038, 1039, 1044, 1046, 1049, 1051], "bayer": [0, 1036, 1037, 1041], "bayesian": [5, 25, 52, 63, 90, 162, 164, 175, 181, 185, 198, 201, 203, 216, 242, 244, 248, 249, 250, 262, 270, 274, 288, 293, 306, 309, 310, 415, 438, 525, 529, 533, 612, 645, 646, 657, 658, 798, 799, 866, 868, 880, 885, 982, 1013, 1015, 1016, 1030, 1031, 1042, 1049], "bayesiangaussianmixtur": [243, 244, 249, 799, 992, 1042, 1044, 1045, 1049, 1050, 1054], "bayesianridg": [52, 161, 176, 177, 181, 317, 628, 645, 989, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053], "baz": [382, 582], "baze": 1045, "bbbbbb": 62, "bbox": [7, 10, 32, 43, 99, 243, 244, 245, 248, 249, 307], "bbox_arg": 7, "bbox_to_anchor": [2, 35, 158, 264, 345], "bc": 309, "bcde": 119, "bcross_val": 1036, "bde": 119, "bdegraaff": 1051, "bdt": 111, "beach": 1044, "beam": [112, 1036], "bear": [417, 1013], "bearer": 1044, "beat": 253, "beatrizsmg": 1048, "beauchamp": [1037, 1040], "beaugnon": 1046, "becam": [130, 395, 1044], "becaus": [2, 3, 11, 17, 23, 25, 38, 45, 48, 69, 80, 84, 109, 114, 117, 122, 125, 146, 150, 153, 156, 167, 168, 170, 177, 183, 190, 197, 201, 203, 205, 215, 232, 233, 244, 253, 256, 259, 260, 265, 281, 283, 300, 301, 302, 305, 309, 310, 311, 312, 328, 339, 343, 351, 352, 353, 356, 360, 362, 366, 367, 375, 382, 385, 388, 392, 393, 394, 400, 403, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 420, 423, 433, 448, 449, 462, 466, 476, 483, 484, 485, 535, 537, 553, 555, 557, 559, 561, 563, 566, 569, 571, 608, 609, 612, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 677, 678, 679, 680, 681, 690, 700, 710, 713, 714, 722, 723, 724, 725, 747, 764, 786, 789, 795, 801, 815, 829, 833, 838, 839, 848, 851, 853, 855, 856, 857, 863, 874, 875, 883, 885, 886, 890, 891, 893, 894, 895, 896, 906, 908, 911, 914, 916, 957, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 998, 1000, 1003, 1008, 1009, 1018, 1028, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1052], "becker": [410, 1018, 1039, 1048], "becom": [48, 53, 55, 70, 78, 120, 167, 199, 201, 233, 236, 261, 283, 306, 310, 339, 343, 351, 362, 374, 380, 382, 384, 388, 394, 395, 410, 412, 417, 418, 420, 441, 451, 455, 456, 458, 554, 582, 589, 590, 592, 620, 628, 659, 660, 677, 679, 879, 905, 906, 912, 988, 989, 990, 992, 996, 1003, 1008, 1027, 1029, 1037, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "bednar": 1043, "bedroom": [305, 375], "been": [0, 2, 7, 24, 42, 51, 58, 79, 98, 107, 109, 146, 149, 154, 156, 167, 222, 226, 228, 233, 234, 257, 259, 265, 315, 316, 317, 318, 319, 321, 322, 323, 328, 351, 362, 367, 374, 375, 377, 378, 379, 380, 382, 384, 386, 388, 389, 392, 393, 394, 395, 400, 403, 406, 407, 409, 410, 412, 414, 415, 417, 420, 435, 438, 470, 472, 473, 475, 479, 488, 524, 535, 537, 550, 551, 568, 569, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 634, 635, 659, 660, 667, 668, 669, 674, 676, 677, 678, 679, 721, 779, 780, 781, 794, 801, 804, 805, 807, 815, 823, 824, 829, 830, 854, 902, 905, 983, 985, 986, 988, 989, 990, 993, 994, 996, 999, 1003, 1005, 1007, 1008, 1014, 1018, 1020, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "befor": [6, 10, 23, 40, 68, 70, 73, 84, 120, 125, 130, 142, 156, 158, 160, 161, 163, 164, 167, 168, 170, 178, 181, 185, 186, 190, 233, 253, 259, 266, 285, 286, 306, 309, 310, 312, 318, 342, 362, 366, 367, 375, 378, 380, 382, 383, 385, 386, 388, 389, 392, 394, 395, 396, 403, 405, 407, 410, 411, 412, 414, 415, 417, 419, 422, 423, 444, 448, 449, 450, 460, 462, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 491, 502, 535, 538, 539, 540, 541, 542, 545, 547, 548, 562, 563, 566, 568, 570, 571, 578, 589, 590, 592, 612, 628, 629, 631, 646, 667, 668, 669, 672, 677, 679, 688, 693, 695, 798, 799, 806, 807, 819, 820, 822, 827, 829, 831, 845, 846, 853, 854, 855, 856, 857, 860, 865, 866, 869, 872, 879, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 902, 913, 914, 942, 977, 983, 989, 990, 993, 999, 1003, 1007, 1008, 1009, 1014, 1015, 1029, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "beforehand": [286, 1009], "begin": [17, 107, 146, 149, 254, 261, 281, 318, 351, 362, 380, 385, 386, 394, 406, 410, 417, 554, 555, 560, 562, 563, 667, 668, 677, 678, 679, 982, 985, 989, 993, 1003, 1005, 1007, 1044, 1050, 1051], "beginn": 1014, "behav": [2, 10, 50, 55, 201, 253, 254, 305, 317, 339, 362, 380, 386, 392, 393, 410, 411, 414, 885, 989, 1003, 1008, 1010, 1014, 1029, 1036, 1043, 1045, 1049, 1050], "behavior": [23, 35, 37, 50, 161, 164, 167, 168, 197, 215, 233, 249, 251, 253, 262, 264, 269, 276, 301, 302, 305, 307, 312, 339, 362, 367, 374, 377, 380, 382, 384, 388, 389, 394, 407, 409, 410, 414, 417, 418, 537, 552, 567, 667, 668, 669, 677, 678, 679, 700, 702, 730, 731, 784, 785, 788, 802, 803, 806, 818, 819, 820, 821, 822, 842, 878, 905, 906, 982, 989, 993, 994, 999, 1003, 1008, 1015, 1018, 1020, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "behaviour": [37, 98, 125, 198, 199, 215, 341, 380, 394, 403, 410, 417, 560, 561, 565, 566, 603, 743, 802, 803, 806, 818, 819, 820, 821, 822, 903, 913, 914, 966, 982, 983, 993, 1003, 1044, 1047, 1048, 1051, 1052], "behind": [51, 78, 109, 278, 382, 384, 388, 408, 412, 417, 992, 996, 1005, 1011, 1052], "behrend": 1046, "behrouz": 1050, "behzad": 1042, "beier": 1047, "being": [22, 25, 32, 43, 50, 53, 80, 84, 88, 98, 109, 113, 125, 127, 149, 154, 169, 173, 191, 233, 236, 252, 259, 302, 309, 310, 339, 343, 351, 353, 378, 379, 380, 382, 384, 385, 392, 394, 395, 409, 410, 412, 414, 417, 418, 419, 420, 421, 423, 442, 443, 445, 446, 451, 457, 470, 476, 494, 524, 570, 641, 650, 657, 673, 675, 688, 691, 695, 713, 719, 735, 737, 784, 790, 798, 845, 846, 851, 853, 855, 856, 857, 880, 898, 943, 982, 983, 989, 992, 993, 996, 999, 1000, 1003, 1005, 1007, 1008, 1009, 1036, 1037, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "beings": 351, "beirouti": 1043, "belatedli": 1043, "belief": [17, 259, 861, 998], "believ": [351, 352, 388, 392, 1018], "belkin": 990, "belkina": [693, 990], "bell": [522, 1044, 1046, 1048, 1049], "bella": 993, "bella2012": 993, "bellet": [1043, 1044, 1045], "belmont": [913, 914, 1009], "belong": [22, 25, 28, 53, 58, 236, 259, 315, 321, 328, 374, 375, 406, 407, 410, 411, 413, 414, 417, 425, 441, 444, 448, 449, 450, 452, 454, 524, 713, 732, 808, 814, 826, 872, 886, 949, 950, 989, 992, 993, 995, 996, 997, 999, 1008, 1013, 1020, 1027], "below": [0, 7, 11, 23, 24, 25, 30, 32, 53, 58, 68, 73, 78, 87, 88, 93, 107, 113, 116, 117, 122, 141, 166, 168, 180, 193, 194, 197, 199, 213, 214, 219, 223, 228, 233, 236, 238, 240, 254, 257, 262, 264, 265, 266, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 323, 344, 351, 360, 362, 367, 373, 374, 378, 380, 382, 384, 385, 389, 394, 395, 397, 410, 412, 413, 414, 415, 417, 418, 419, 420, 445, 447, 449, 472, 473, 479, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 511, 532, 538, 543, 549, 583, 596, 597, 598, 599, 600, 601, 634, 647, 653, 659, 660, 668, 669, 674, 676, 693, 700, 706, 744, 764, 798, 799, 801, 812, 815, 834, 865, 868, 878, 879, 882, 888, 894, 982, 983, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1013, 1022, 1029, 1032, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054], "ben": [1038, 1039, 1040, 1043, 1044, 1045, 1048, 1053], "ben3940": 1050, "benavoli": 259, "benbihi": 1045, "bench_k_mean": 56, "benchmark": [283, 317, 352, 353, 366, 373, 375, 380, 392, 397, 402, 407, 469, 516, 903], "benchmark_estim": 8, "benchmark_influ": 5, "benchmark_throughput": 8, "bend": 343, "benedek": 1052, "benedikt": 1040, "benediktsson": [1036, 1037, 1038], "benefici": [70, 72, 76, 93, 128, 253, 305, 306, 403, 409, 990], "benefit": [2, 44, 54, 72, 73, 109, 110, 120, 125, 167, 211, 222, 229, 231, 253, 285, 319, 323, 366, 380, 389, 394, 407, 410, 449, 462, 469, 509, 568, 569, 659, 660, 667, 668, 669, 677, 678, 679, 836, 903, 905, 982, 988, 996, 1003, 1014, 1018, 1036, 1039, 1040, 1041, 1048, 1049, 1050, 1051], "benefit_cost": 253, "benfield": 1043, "bengio": [259, 862, 863, 982, 1006], "bengtsson": 1040, "benhel": 381, "benhur": 1049, "benign": [146, 377, 501], "benjamin": [642, 1038, 1039, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "benjamini": [596, 1042, 1043], "benjaminirv": 1041, "benjastudio": [1044, 1045], "benn": 1044, "bennett": [146, 377, 993], "benni": 1050, "benoit": 1053, "beno\u00eet": 1049, "benson": 17, "bentlei": 996, "bera": 1051, "berei": 1050, "beren": 693, "berenbaum": 1052, "bereng": 1049, "berg": [375, 1037, 1038, 1048, 1053], "bergman": 1053, "bergstra": [982, 1036, 1037], "berk": 1036, "berkecanrizai": 1051, "berkelei": [642, 913, 914], "berlin": [410, 415, 536, 697, 727, 757, 993], "bernardo": 1042, "bernd": 1051, "bernhard": [3, 415, 536, 836, 871, 901, 994, 999, 1008, 1042], "bernhardsson": 1018, "berni": 1047, "bernoulli": [302, 418, 419, 840, 841, 842, 843, 844, 861, 862, 863, 868, 989, 1003, 1016, 1031, 1036], "bernoullinb": [128, 368, 841, 842, 843, 844, 994, 995, 1037, 1038, 1040, 1043, 1048, 1049, 1051], "bernoullirbm": [302, 862, 863, 998, 1003, 1038, 1039, 1048, 1050, 1053], "bertin": 1018, "bertoncelj": 1047, "bertrand": [0, 398, 1036, 1042, 1043, 1048, 1049], "bertrandhaut": [1044, 1045], "besid": [130, 229, 273, 380, 385, 590, 982, 1044], "bessel": [420, 620], "bessi": 320, "besson": [1041, 1042], "best": [0, 2, 4, 6, 10, 11, 12, 17, 22, 24, 25, 38, 44, 52, 53, 59, 68, 69, 70, 71, 76, 83, 93, 97, 100, 101, 102, 112, 115, 119, 121, 122, 123, 125, 130, 133, 146, 149, 150, 155, 161, 167, 176, 181, 185, 186, 193, 211, 212, 213, 218, 221, 226, 231, 232, 236, 244, 245, 249, 252, 253, 257, 258, 259, 260, 263, 266, 267, 270, 271, 274, 281, 287, 292, 306, 311, 317, 318, 339, 342, 343, 351, 352, 353, 359, 366, 367, 369, 374, 377, 379, 380, 383, 386, 393, 394, 397, 400, 403, 406, 407, 409, 410, 414, 415, 417, 418, 419, 420, 433, 444, 447, 448, 450, 452, 453, 454, 460, 463, 466, 473, 483, 484, 485, 539, 546, 547, 553, 555, 557, 558, 559, 560, 561, 563, 565, 566, 567, 569, 571, 594, 595, 598, 603, 611, 612, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 689, 690, 691, 694, 695, 704, 709, 720, 721, 722, 723, 724, 725, 729, 730, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 784, 785, 786, 788, 791, 792, 793, 794, 795, 797, 798, 799, 801, 804, 805, 815, 828, 830, 833, 838, 839, 848, 856, 862, 863, 906, 908, 911, 913, 914, 915, 916, 982, 987, 988, 989, 990, 993, 996, 997, 999, 1007, 1009, 1013, 1014, 1018, 1020, 1025, 1029, 1036, 1039, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1054], "best_alpha": [1027, 1036], "best_c": 346, "best_c_scal": 346, "best_clf": 71, "best_estim": [801, 804, 805, 815], "best_estimator_": [4, 52, 70, 71, 72, 76, 100, 232, 248, 253, 257, 259, 260, 263, 271, 287, 801, 804, 805, 815, 982, 1024, 1025, 1043], "best_idx": [17, 258], "best_index": [257, 263], "best_index_": [258, 263, 801, 804, 805, 815], "best_loss": [677, 679], "best_loss_": [862, 863, 1051], "best_low_complex": 258, "best_n_it": 460, "best_paramet": 260, "best_parameters_": 248, "best_params_": [69, 71, 122, 149, 232, 248, 257, 263, 317, 339, 393, 801, 804, 805, 815, 982, 1025, 1029], "best_recal": 257, "best_recall_std": 257, "best_recall_threshold": 257, "best_scor": 263, "best_score_": [69, 71, 232, 253, 260, 263, 264, 339, 409, 674, 676, 801, 804, 805, 815, 823, 1024, 1025, 1029, 1047], "best_score_idx": 258, "best_threshold_": [253, 273, 323, 823], "best_validation_score_": [862, 863, 1051], "bestofmedia": 1011, "beta": [44, 83, 166, 201, 386, 407, 410, 413, 537, 539, 541, 548, 645, 730, 731, 737, 743, 784, 796, 798, 993, 1027, 1038, 1041, 1043, 1045, 1046], "beta_": [201, 415], "beta_1": [862, 863], "beta_2": [862, 863], "beta_k": 415, "beta_loss": [13, 539, 541, 548, 1043], "betatim": [114, 129, 1051, 1054], "betawork": 1011, "better": [2, 3, 7, 11, 17, 18, 22, 29, 48, 53, 72, 73, 76, 77, 78, 79, 84, 88, 93, 96, 112, 115, 120, 121, 122, 125, 130, 141, 153, 154, 155, 157, 161, 167, 169, 177, 181, 183, 186, 197, 198, 199, 205, 212, 214, 215, 222, 231, 232, 233, 236, 248, 252, 253, 259, 261, 262, 265, 268, 269, 278, 281, 302, 309, 310, 319, 320, 339, 346, 351, 352, 353, 356, 362, 366, 375, 379, 380, 381, 382, 384, 385, 386, 388, 394, 396, 405, 407, 410, 412, 414, 415, 416, 417, 418, 420, 450, 451, 539, 541, 548, 560, 561, 562, 563, 608, 609, 631, 672, 678, 693, 710, 726, 735, 740, 743, 764, 799, 830, 840, 841, 842, 843, 844, 845, 846, 851, 862, 863, 882, 883, 886, 894, 897, 898, 905, 906, 982, 983, 985, 986, 987, 989, 990, 992, 993, 995, 996, 997, 1001, 1003, 1006, 1007, 1009, 1014, 1018, 1022, 1024, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "better_prob": 259, "between": [2, 3, 6, 7, 9, 10, 11, 18, 32, 35, 36, 37, 38, 40, 41, 51, 58, 59, 64, 83, 88, 96, 98, 101, 109, 112, 115, 119, 120, 122, 125, 141, 149, 154, 155, 157, 164, 166, 167, 168, 169, 176, 181, 183, 188, 192, 193, 197, 198, 199, 201, 202, 205, 215, 218, 226, 231, 233, 236, 251, 253, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 273, 276, 278, 281, 285, 289, 290, 292, 293, 305, 310, 312, 318, 323, 329, 339, 343, 345, 346, 351, 352, 353, 360, 362, 366, 367, 375, 380, 382, 389, 392, 393, 394, 395, 400, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 441, 442, 445, 446, 447, 448, 451, 453, 454, 455, 457, 458, 459, 464, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 515, 516, 522, 525, 528, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 550, 551, 554, 555, 560, 561, 563, 564, 565, 566, 585, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 612, 621, 628, 633, 634, 635, 640, 643, 646, 647, 648, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 677, 679, 680, 682, 685, 689, 691, 693, 695, 696, 697, 700, 702, 704, 705, 706, 708, 710, 711, 715, 716, 717, 718, 720, 725, 726, 727, 730, 731, 732, 735, 737, 738, 744, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 787, 788, 793, 794, 796, 797, 798, 799, 801, 802, 803, 804, 806, 810, 818, 819, 820, 821, 822, 830, 831, 833, 835, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 869, 872, 873, 875, 876, 878, 879, 882, 883, 884, 886, 891, 894, 895, 899, 905, 906, 910, 913, 914, 915, 916, 918, 939, 950, 951, 962, 982, 985, 987, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1015, 1027, 1028, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bewar": 419, "beyond": [2, 25, 198, 199, 253, 366, 368, 379, 380, 392, 407, 417, 730, 731, 739, 784, 785, 788, 910, 990, 994, 1003, 1008, 1014, 1044], "beyst": 1050, "bezuidenhout": 1049, "bf5fff": 90, "bfg": [300, 611, 612, 649, 650, 659, 670, 673, 675, 681, 688, 996, 997, 1051], "bgm": 798, "bharat": [414, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "bharathi": 1047, "bhardwaj": [1043, 1044], "bhargav": 1042, "bhaskaran": [1043, 1044], "bhat": [1049, 1051, 1052, 1053], "bhattacharya": 1044, "bhattarai": 1046, "bhavika": 1048, "bhoomika": 1051, "bhsu": 1040, "bhtsne": [693, 1043], "bi": [53, 418], "bia": [2, 8, 25, 76, 95, 108, 116, 117, 122, 125, 134, 164, 167, 169, 176, 177, 179, 264, 299, 343, 346, 362, 375, 382, 394, 407, 412, 416, 417, 420, 525, 557, 560, 561, 608, 609, 615, 643, 649, 650, 659, 660, 670, 671, 681, 862, 863, 878, 880, 884, 890, 891, 893, 894, 895, 896, 914, 988, 989, 992, 993, 997, 998, 1001, 1007, 1015, 1027], "bianca": 25, "bianp": 386, "bias": [7, 80, 96, 122, 129, 166, 167, 169, 264, 375, 396, 407, 417, 525, 550, 861, 885, 896, 988, 992, 1001, 1007, 1009], "bibhash": [1046, 1047], "bibl": 352, "bibliograph": 380, "bibtex": 0, "bic": [136, 164, 175, 181, 183, 184, 185, 191, 205, 216, 419, 502, 652, 654, 655, 656, 657, 799, 866, 885, 982, 992, 1015, 1036, 1043, 1049, 1050], "bic_criterion": 185, "bicker": 1046, "biclust": [19, 20, 68, 328, 330, 351, 352, 353, 369, 418, 425, 450, 452, 454, 489, 512, 514, 592, 720, 796, 993, 1015, 1030, 1031, 1038, 1042], "bicluster_ncut": 17, "biclusters_": [18, 19, 425, 452, 454], "bidu": [1049, 1050], "biernat": 1048, "big": [2, 42, 58, 60, 202, 219, 236, 249, 367, 380, 386, 395, 412, 418, 422, 539, 562, 563, 565, 566, 807, 829, 840, 841, 842, 843, 844, 1014, 1018, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "bigg": [420, 620], "bigger": [6, 38, 58, 210, 259, 302, 343, 348, 352, 365, 367, 418, 439, 440, 509, 539, 851, 1024, 1031], "biggest": [410, 413, 415, 444], "biggest_inertia": [410, 444], "biggio": 1047, "bigram": [260, 418, 589, 590, 592, 1029], "bigram_vector": 418, "bijil": 1050, "bike": 1000, "bike_shar": [2, 11], "bike_sharing_demand": [2, 11, 168], "bilbro": 1043, "bill": [1046, 1047], "billaud": 1044, "billi": 1040, "billing": [1039, 1040, 1041], "billion": 1018, "bimod": [309, 416], "bin": [2, 22, 23, 25, 51, 73, 111, 115, 197, 230, 236, 253, 265, 288, 305, 306, 307, 308, 309, 311, 312, 378, 388, 397, 407, 416, 417, 439, 440, 449, 462, 562, 563, 868, 870, 884, 944, 1028, 1044, 1045, 1046, 1050, 1054], "bin_cent": [51, 197], "bin_edg": 51, "bin_edges_": [51, 306, 870], "bin_seed": [42, 61, 449, 462, 1047], "binar": [266, 268, 269, 372, 374, 408, 755, 840, 869, 870, 872, 876, 878, 886, 889, 993, 995, 1020, 1031, 1050, 1052], "binari": [6, 12, 23, 25, 113, 115, 126, 128, 143, 157, 167, 173, 188, 190, 197, 205, 219, 227, 236, 239, 253, 256, 257, 262, 268, 273, 275, 278, 287, 339, 343, 360, 362, 374, 375, 376, 382, 384, 385, 394, 397, 403, 406, 407, 408, 409, 410, 417, 418, 420, 438, 439, 440, 453, 488, 501, 509, 510, 521, 524, 550, 551, 554, 556, 560, 562, 567, 568, 569, 582, 589, 590, 592, 594, 595, 603, 611, 628, 629, 630, 631, 632, 633, 634, 659, 660, 667, 669, 674, 675, 676, 677, 701, 704, 708, 709, 710, 713, 714, 716, 719, 721, 723, 728, 730, 731, 735, 736, 739, 740, 741, 742, 743, 744, 783, 784, 785, 788, 789, 790, 795, 797, 800, 801, 802, 804, 805, 806, 807, 815, 819, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 840, 851, 861, 872, 876, 878, 886, 889, 905, 907, 910, 956, 983, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1020, 1033, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051, 1053, 1054], "binary_crossentropi": 1050, "binary_eros": 12, "binary_onli": [382, 1046, 1047], "binarytre": [850, 1040, 1044, 1048], "bincount": [394, 414, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 905, 907, 910, 913, 915, 930, 931, 1043], "bind": [397, 1013, 1036, 1043, 1044], "binder": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "binesh": [1052, 1053], "binet": [1046, 1051], "bing": [1042, 1043], "bingham": 1005, "binned_numer": [197, 215], "binom": 989, "binomi": [121, 124, 417, 554, 560, 562, 989, 1050, 1053], "bio": 262, "bioinformat": [629, 983], "biologi": 9, "biometrika": [881, 893], "biostatist": [412, 479], "bipartit": [406, 454, 512, 998], "biprateep": 1048, "birch": [34, 38, 42, 59, 62, 66, 89, 164, 319, 368, 394, 447, 450, 513, 1015, 1030, 1031, 1040, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "birch_model": 40, "birchbox": 1011, "bird": [583, 719, 755, 993], "birodkar": [1041, 1042, 1044], "bischl": 374, "bisect": [34, 38, 55, 56, 57, 58, 59, 66, 158, 164, 255, 444, 448, 513, 1015, 1050], "bisect_km": 319, "bisect_mean": 444, "bisecting_strategi": [410, 444], "bisectingkmean": [41, 410, 1050, 1051, 1052], "bisector": 32, "bishop": [533, 535, 542, 742, 798, 989, 994, 1008], "bistochast": [406, 452], "biswadip": 1046, "biswaroop": 1051, "bit": [2, 11, 25, 46, 51, 76, 96, 195, 199, 278, 305, 339, 352, 362, 366, 375, 378, 394, 417, 418, 583, 590, 659, 835, 925, 926, 990, 994, 1012, 1022, 1029, 1036, 1039, 1042, 1044, 1045, 1048, 1049, 1050, 1053, 1054], "bithash": 641, "bithash_": 641, "bitli": 1018, "bitmap": 377, "bittarello": 1049, "bjerr": 1044, "bla": [366, 367, 378, 381, 386, 779, 1036, 1044, 1045, 1047, 1048, 1054], "black": [2, 7, 8, 9, 11, 24, 32, 42, 47, 53, 54, 78, 79, 90, 93, 118, 141, 144, 149, 150, 154, 155, 158, 162, 167, 168, 176, 185, 186, 187, 189, 193, 197, 198, 199, 203, 206, 209, 210, 215, 226, 236, 243, 246, 288, 299, 300, 302, 331, 348, 357, 358, 359, 380, 397, 402, 410, 417, 420, 556, 557, 632, 999, 1000, 1009, 1013, 1020], "blackberri": 311, "blackburn": [1039, 1042], "blackd0t": 1046, "blair": [4, 375], "blakeflei": 1042, "blame": 380, "blanc": 311, "blanchard": [1040, 1041], "blank": [58, 385, 983, 1009], "bldgtype": 119, "bleed": 1018, "blei": [415, 537, 798], "bleich": [168, 1000], "bleki": 1048, "blend": [118, 130, 311, 394, 414, 1013], "bli": [367, 378, 392], "blind": [92, 95, 104, 164, 196, 351, 415, 534, 542, 1015], "blindli": 384, "blink": 339, "blis_num_thread": 367, "blob": [22, 31, 32, 40, 42, 55, 60, 62, 89, 410, 449, 513, 1041], "blobs_param": 226, "block": [288, 305, 319, 375, 377, 380, 385, 388, 394, 406, 410, 413, 416, 453, 454, 463, 474, 480, 481, 489, 490, 512, 514, 696, 961, 996, 998], "block_siz": [474, 480, 481, 1040], "blocker": [384, 1054], "blocknum": 6, "blockwis": [406, 989], "blog": [319, 366, 380, 386, 388, 395, 1047], "blogpost": 385, "blondel": [0, 22, 46, 98, 188, 198, 219, 234, 260, 351, 399, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049], "blood": [146, 227, 377, 1027], "bloom": [389, 958], "blown": 342, "blue": [5, 7, 11, 18, 19, 24, 32, 78, 90, 93, 109, 112, 116, 124, 125, 127, 130, 132, 144, 154, 156, 173, 177, 185, 186, 193, 195, 221, 230, 252, 253, 254, 259, 300, 310, 316, 322, 328, 377, 410, 415, 1053], "blueviolet": [211, 289, 338], "blum": 1043, "blyston": [1046, 1047], "bmaisonn": 1048, "bmalezieux": 1049, "bmatrix": [406, 985], "bmc": 1003, "bmi": [146, 185, 186, 237, 377, 1001], "bmreinig": 1050, "bmug": 17, "bmva": 672, "bmvc": [672, 989], "bnp": 1011, "bo": [24, 1048], "board": 0, "boat": 320, "bob": [1037, 1043], "bobyrev": 1043, "boca": 989, "bodega": 311, "bodenhof": [406, 720], "bodi": [6, 68, 146, 237, 320, 377], "body_bow": 68, "body_stat": 68, "boe": 10, "boechat": 1043, "boenisch": 1047, "boerner": 1050, "boersma": 1042, "bogazici": 377, "bogdan": 1036, "boggavarapu": 1048, "bohl": [1048, 1050], "bohn\u00e9": 1049, "boil": [109, 383, 394, 412], "boilerpl": [233, 382, 1018, 1029], "boisberrang": [0, 398, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "bold": [58, 122, 186, 192, 380], "boll": 989, "bolmier": [1047, 1048, 1052], "boltzmann": [71, 83, 137, 164, 187, 212, 298, 303, 503, 659, 714, 831, 861, 862, 863, 865, 891, 1015, 1030, 1031, 1038], "bommarito": [1039, 1040], "bonald": 1051, "bone": [210, 348], "bonferroni": 259, "bonn": [72, 113, 188, 231, 328, 346], "bonu": [215, 378, 380, 1024, 1029], "bonusmalu": [197, 215], "boo": [146, 377], "book": [46, 68, 444, 448, 450, 835, 840, 844, 989, 990, 991, 994, 1011, 1048], "booktitl": 0, "bool": [47, 64, 79, 162, 215, 360, 380, 422, 423, 424, 425, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 703, 704, 708, 709, 710, 712, 713, 714, 715, 727, 728, 729, 730, 731, 732, 739, 742, 743, 751, 752, 755, 757, 762, 764, 768, 770, 775, 779, 783, 784, 785, 786, 788, 790, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 819, 820, 823, 824, 825, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 936, 942, 943, 955, 958, 964, 966, 974, 979, 980, 981, 983, 1045, 1048, 1049], "bool_": 199, "boolean": [107, 233, 360, 375, 380, 382, 389, 411, 417, 418, 419, 465, 562, 563, 582, 583, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 630, 633, 634, 637, 650, 672, 700, 779, 834, 840, 861, 868, 888, 921, 977, 983, 989, 995, 1000, 1003, 1009, 1036, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1054], "boom": 1054, "boost": [5, 11, 69, 108, 109, 110, 113, 114, 116, 117, 127, 130, 133, 134, 156, 164, 169, 170, 177, 199, 205, 221, 258, 260, 300, 309, 311, 319, 322, 345, 381, 386, 394, 408, 409, 419, 449, 467, 468, 491, 497, 502, 521, 554, 555, 560, 561, 562, 563, 565, 566, 633, 634, 635, 636, 742, 743, 749, 751, 791, 801, 804, 805, 806, 822, 828, 831, 866, 878, 879, 989, 993, 1013, 1015, 1016, 1031, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1049], "booster": 1041, "boosting_error": 109, "boostingdecis": 417, "booth": 1043, "bootstrap": [112, 113, 121, 161, 262, 271, 317, 414, 417, 555, 556, 557, 558, 559, 564, 565, 566, 931, 964, 989, 1036, 1037, 1039, 1041, 1044, 1046, 1049], "bootstrap_featur": [417, 556, 557], "bootstrap_indic": 262, "borchmann": 1051, "border": [447, 1046], "borderaxespad": 78, "borderpad": 357, "borderwidth": 115, "borg": [691, 695, 990], "borgn": 1049, "bori": [1040, 1048, 1052], "borja": 1040, "born": 1042, "borovec": 1050, "borovikova": 1047, "bosch": 1049, "bossan": [1048, 1050, 1051, 1052, 1054], "bossch": [0, 398, 1043, 1044, 1045, 1049], "boston": 1018, "bot": [384, 998, 1050, 1053], "botelho": 1048, "both": [2, 3, 5, 7, 8, 11, 13, 18, 23, 24, 25, 32, 40, 52, 53, 62, 69, 76, 78, 83, 84, 98, 100, 107, 112, 115, 116, 119, 120, 125, 129, 130, 133, 141, 142, 144, 146, 149, 156, 158, 166, 167, 168, 169, 176, 181, 183, 185, 186, 197, 198, 199, 201, 202, 203, 205, 215, 222, 232, 233, 234, 243, 244, 245, 246, 247, 248, 253, 259, 260, 261, 262, 266, 268, 270, 275, 283, 295, 305, 309, 310, 315, 317, 321, 328, 329, 336, 341, 343, 351, 352, 353, 360, 362, 366, 367, 368, 373, 374, 375, 376, 378, 380, 382, 386, 387, 389, 392, 393, 394, 395, 397, 400, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 423, 438, 447, 453, 463, 469, 476, 483, 484, 485, 486, 489, 490, 497, 498, 501, 503, 506, 508, 509, 510, 535, 539, 541, 548, 552, 556, 557, 558, 564, 565, 566, 567, 568, 578, 589, 590, 592, 598, 608, 609, 628, 633, 634, 644, 658, 659, 660, 673, 675, 677, 679, 688, 700, 705, 713, 717, 730, 731, 732, 737, 739, 758, 762, 768, 775, 779, 784, 785, 788, 789, 790, 796, 804, 805, 807, 824, 834, 862, 863, 877, 879, 881, 893, 898, 903, 905, 906, 913, 915, 929, 934, 943, 956, 968, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1024, 1027, 1028, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "botstein": [629, 983], "bottleneck": [366, 386, 417, 449, 862, 863], "bottom": [4, 6, 10, 12, 13, 32, 35, 37, 40, 42, 43, 49, 51, 60, 62, 89, 90, 120, 128, 133, 197, 208, 226, 243, 245, 246, 249, 256, 259, 270, 288, 305, 327, 329, 339, 380, 407, 410, 416, 588, 917, 987, 989, 993, 1001, 1014, 1025, 1028], "bottom_h": 305, "bottou": [677, 678, 679, 997, 1007], "bou": [1051, 1052], "boucaud": 1044, "boucher": 1043, "bouckaert": 259, "boulard": 1053, "bould": 410, "bouldin": 726, "boulogn": 1039, "boun": 377, "bound": [25, 53, 153, 155, 157, 164, 199, 215, 225, 241, 258, 387, 410, 415, 418, 420, 421, 445, 490, 503, 513, 524, 537, 596, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 633, 636, 638, 651, 655, 659, 678, 706, 736, 789, 798, 799, 845, 846, 882, 894, 897, 898, 899, 907, 908, 909, 912, 929, 961, 989, 992, 993, 996, 1005, 1007, 1008, 1010, 1015, 1044, 1047, 1048, 1050], "bound_": 537, "boundari": [6, 9, 12, 23, 24, 25, 29, 32, 54, 56, 58, 107, 108, 111, 118, 128, 132, 134, 138, 150, 151, 153, 157, 164, 168, 180, 198, 206, 226, 231, 234, 262, 274, 275, 291, 293, 294, 296, 299, 305, 307, 310, 325, 330, 332, 334, 336, 337, 338, 339, 341, 342, 347, 348, 349, 357, 376, 407, 417, 418, 420, 451, 457, 505, 537, 550, 551, 570, 589, 590, 592, 632, 736, 762, 801, 834, 847, 853, 855, 856, 857, 880, 884, 901, 902, 907, 909, 910, 913, 929, 987, 996, 999, 1003, 1006, 1007, 1008, 1015, 1036, 1038, 1040, 1049, 1050, 1051, 1053], "bounding_ax_": [387, 633], "boundscheck": [367, 381], "bourassa": 417, "bourbeau": [1043, 1044, 1045], "bourboux": 1047, "bourguignat": 1041, "bournhonesqu": 1046, "bousquet": 901, "boutili": 1005, "boutsidi": 415, "bow": 411, "bown": 1042, "box": [2, 8, 28, 53, 168, 169, 219, 278, 305, 309, 387, 415, 417, 513, 556, 557, 881, 893, 917, 919, 993, 994, 1000, 1003, 1009, 1013, 1020, 1044, 1052], "boxplot": [8, 78, 123, 167, 170, 273, 315], "boxplot_runtim": 8, "boxstyl": [7, 307], "boy": 1050, "boyd": 989, "boyl": 1053, "boyuan": [1040, 1041, 1042], "bp": [8, 123, 146, 185, 186, 377, 1001], "bpo": 879, "br": 111, "br_estim": 161, "bracket": [380, 989], "bradi": 1043, "bradlei": [146, 377, 989], "bradshaw": [1039, 1040, 1043], "bradypu": [9, 296, 375, 499], "bradypus_variegatus_0": 9, "brain": 374, "branch": [366, 378, 380, 383, 384, 410, 417, 443, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 913, 914, 915, 916, 918, 996, 1000, 1009], "branching_factor": 443, "brand": [395, 397], "brandon": [1042, 1043, 1050, 1051], "brandt": 1047, "brandyn": 1036, "brault": 1043, "braun": 1044, "bravi": 1042, "braycurti": [451, 458, 700, 779, 780, 781, 996], "braycurtisdist": 700, "brc": [410, 443], "bre": [635, 1009], "bread": 1018, "breadth": [845, 846, 850, 1018, 1038], "breadth_first": [845, 846, 850], "break": [15, 37, 44, 68, 79, 164, 186, 189, 203, 233, 245, 278, 318, 327, 334, 349, 351, 353, 380, 382, 384, 386, 393, 410, 470, 513, 640, 775, 779, 782, 798, 878, 885, 890, 907, 910, 989, 992, 1001, 1003, 1008, 1014, 1015, 1036, 1037, 1043, 1044, 1046, 1048, 1052], "break_ti": [347, 907, 910, 1008, 1046], "breakdown": [78, 79, 214, 680, 989], "breakdown_": 680, "breast": [146, 373, 501, 1001, 1031, 1041], "breast_canc": 329, "breast_cancer_data": 146, "brecht": 642, "bredin": 1040, "breiman": [169, 414, 417, 517, 518, 519, 556, 557, 565, 566, 635, 913, 914, 1001, 1009], "brekk": 1051, "bremen": [22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232], "brendan": [36, 441, 455, 1052, 1053, 1054], "brenden": 1050, "brenner": 993, "breno": [1043, 1044], "brent": [1040, 1044, 1045], "brentfagan": 1045, "brett": [1039, 1041, 1042, 1043, 1044, 1051], "brettingen": 1042, "breuer": 1047, "breunig": [410, 451, 458, 851, 999], "breve": 1052, "brevin": [1052, 1053], "brew": [121, 378, 397], "brian": [0, 44, 399, 709, 993, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050], "brice": [1048, 1049], "bridg": [392, 990, 1013], "brief": 991, "briefli": [268, 379, 393, 417, 982, 1046], "brier": [22, 23, 25, 407, 710], "brier1950": 993, "brier_scor": 22, "brier_score_loss": [22, 23, 407, 993, 1044, 1045, 1046, 1054], "brigata": 377, "bright": 339, "brighter": 157, "brigi": [1047, 1048], "brigitta": [1046, 1047, 1048, 1052], "bring": [167, 305, 415, 677, 679, 990, 1013, 1018], "british": 418, "brittl": [37, 410], "broad": [380, 394, 1013], "broadcast": 628, "broader": [307, 989, 1017], "broadli": [394, 410], "brocchini": 1048, "brochart": 1053, "brockherd": 1038, "brodersen": 709, "broke": 1043, "broken": [397, 414, 600, 601, 636, 721, 921, 993, 1009, 1039, 1043, 1044, 1045, 1047, 1050], "brook": [1039, 1040, 1048], "brought": [166, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "brown": [9, 90, 296, 375, 499, 629, 983, 1041, 1043, 1044, 1045, 1048], "brows": 384, "browser": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 380, 388, 1003, 1053], "broyden": 989, "brr": 176, "brr_poli": 176, "brr_score": 176, "bruce": [1046, 1047], "brucher": [0, 399, 1036], "brummitt": [1043, 1044], "brunak": 744, "brunner": 1040, "bruno": [1047, 1048, 1049], "brutal": 339, "brute": [283, 392, 404, 414, 421, 445, 447, 451, 458, 633, 634, 689, 690, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 1000, 1031, 1040, 1044, 1048, 1051, 1052, 1053, 1054], "bry": [189, 206], "bryan": [1036, 1039, 1045, 1046, 1049], "br\u00f6mmel": [1050, 1051], "br\u00fblade": 311, "bsa": 765, "bsas_in_radian": 765, "bscikit": 1036, "bsd": [3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 35, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 68, 69, 71, 72, 73, 80, 87, 88, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 202, 204, 205, 213, 214, 219, 220, 221, 223, 226, 229, 231, 232, 234, 236, 243, 245, 260, 263, 265, 272, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 326, 327, 328, 329, 331, 343, 344, 346, 347, 351, 352, 353, 386, 392], "bsh": 1051, "bsmtfinsf1": [119, 130], "bsmtfinsf2": 119, "bsmthalfbath": 119, "bsmtunfsf": 130, "bspline": 884, "bsplines_": [198, 884], "bsr": [925, 926, 1049], "bt": 418, "btol": [673, 675], "buck": 628, "budarz": 1049, "buddha": 1041, "budget": [0, 119, 840, 841, 842, 843, 844, 982], "bueno": 765, "buffer": [48, 1049], "buffer_mb": 1036, "bug": [233, 315, 316, 317, 318, 319, 320, 321, 322, 323, 369, 378, 382, 383, 385, 388, 392, 394, 1011, 1014, 1036, 1037, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "bugfix": [384, 1036, 1050], "buguen": 1036, "buhmann": 709, "build": [0, 2, 5, 15, 30, 41, 53, 65, 72, 97, 109, 118, 120, 127, 133, 143, 145, 160, 161, 163, 164, 167, 205, 264, 267, 278, 281, 283, 301, 302, 306, 311, 312, 353, 362, 366, 367, 368, 376, 382, 383, 384, 385, 386, 394, 397, 402, 408, 410, 414, 417, 418, 443, 491, 502, 504, 525, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 586, 587, 589, 590, 592, 628, 629, 631, 692, 714, 715, 802, 806, 810, 819, 825, 827, 866, 883, 885, 913, 914, 915, 916, 918, 938, 982, 983, 990, 993, 997, 999, 1003, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1027, 1028, 1036, 1039, 1041, 1042, 1043, 1045, 1048], "build_analyz": [418, 589, 590, 592, 1046], "build_clib": 378, "build_ext": [378, 386], "build_numb": 367, "build_preprocessor": [418, 589, 590, 592, 1046], "build_projection_oper": 12, "build_token": [17, 418, 589, 590, 592], "build_tool": 384, "builder": [6, 8, 346, 384], "buildtool": 378, "built": [28, 84, 107, 109, 110, 118, 120, 169, 205, 262, 278, 296, 315, 357, 360, 366, 375, 378, 380, 381, 382, 384, 386, 388, 389, 392, 393, 394, 397, 403, 408, 410, 411, 414, 417, 419, 446, 504, 554, 555, 556, 557, 560, 561, 562, 563, 589, 590, 594, 598, 640, 641, 642, 643, 644, 647, 648, 653, 659, 661, 662, 663, 664, 673, 674, 675, 676, 682, 804, 805, 812, 836, 839, 845, 846, 915, 916, 977, 989, 993, 994, 1006, 1007, 1009, 1013, 1018, 1029, 1036, 1039, 1040, 1042, 1048], "builtin": 1008, "buitinck": [0, 13, 351, 352, 353, 399, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "bulk": [268, 421, 445], "bulk_benchmark": 8, "bulk_benchmark_estim": 8, "bulk_runtim": 8, "bull": 1043, "buluttekin": 1046, "bumblebe": 1049, "bunch": [9, 233, 373, 374, 375, 465, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 568, 569, 570, 571, 633, 634, 635, 864, 865, 913, 914, 915, 916, 950, 953, 1018, 1029, 1041, 1043, 1046, 1048, 1052], "bundl": [1044, 1045], "bupu": 168, "burden": [380, 877, 1014], "bureau": 375, "buri": 380, "burjek": 1036, "burk": [0, 363, 1051], "burn": [1043, 1044], "burst": 993, "busch": [1044, 1045, 1047], "bush": [4, 375], "busi": [2, 197, 259, 323, 388, 392, 409, 789, 989, 993, 1018], "business_metr": 253, "business_scor": 253, "bussonni": [1036, 1048], "butler": [475, 1039, 1047, 1048], "butlerdavi": 475, "butter": 1018, "button": [380, 388, 1027], "butyugina": 1052, "buuren": [628, 983], "buzenet": [1051, 1052], "bv_bunch": 9, "bwignal": 1039, "bydat": 1029, "bypass": [409, 411, 600, 647, 653, 823, 913, 914, 915, 916, 1052], "byproduct": 222, "byrd": 659, "byron": 1048, "byte": [46, 51, 418, 488, 504, 509, 510, 583, 589, 590, 592, 958, 1027, 1029, 1036, 1043, 1044, 1051, 1054], "bz2": [15, 509, 510], "bz2file": 15, "bzip2": 1036, "b\u00e9gude": 311, "c": [2, 4, 5, 6, 9, 10, 11, 17, 22, 23, 25, 28, 29, 32, 37, 38, 40, 41, 43, 50, 54, 55, 57, 58, 59, 63, 69, 70, 72, 84, 88, 89, 90, 98, 99, 109, 111, 112, 118, 119, 126, 128, 129, 131, 132, 138, 146, 150, 151, 152, 153, 157, 173, 180, 182, 187, 188, 189, 190, 192, 194, 195, 204, 206, 208, 209, 210, 211, 213, 214, 218, 219, 220, 222, 223, 231, 232, 234, 238, 244, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 262, 264, 268, 270, 283, 286, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 351, 357, 358, 359, 366, 367, 374, 375, 377, 378, 380, 381, 382, 383, 385, 388, 389, 392, 397, 400, 406, 407, 410, 411, 412, 413, 414, 415, 417, 419, 423, 438, 443, 444, 447, 448, 450, 460, 469, 476, 524, 529, 535, 539, 541, 542, 548, 550, 551, 591, 608, 609, 611, 632, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 674, 680, 686, 687, 689, 690, 693, 694, 709, 715, 716, 719, 732, 736, 742, 743, 759, 760, 801, 815, 824, 830, 832, 840, 841, 842, 843, 844, 845, 846, 852, 854, 861, 876, 878, 879, 880, 884, 886, 900, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 920, 925, 926, 956, 982, 985, 986, 988, 989, 990, 991, 993, 995, 996, 998, 1000, 1003, 1005, 1007, 1008, 1009, 1013, 1018, 1020, 1024, 1025, 1027, 1028, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1052], "c0": [119, 229, 311], "c1": [63, 119, 157, 229, 311], "c2": [63, 119, 157, 229, 311], "c22": 320, "c26": 320, "c3": [63, 119, 311], "c4": [63, 311, 1016, 1031], "c5": [63, 1016, 1031], "c56poni": 1046, "c6": 63, "c99": 1013, "c_": [9, 23, 24, 25, 56, 78, 94, 118, 121, 127, 128, 138, 151, 195, 210, 213, 226, 289, 308, 310, 331, 339, 347, 348, 410, 660, 715, 716, 719, 993, 1024, 1027, 1028], "c_0": [985, 991], "c_1": 990, "c_2": [410, 990], "c_2d_rang": 339, "c_e": 410, "c_i": [410, 996], "c_j": [410, 998], "c_jh_j": 998, "c_k": 550, "c_option": 70, "c_p": 989, "c_q": 410, "c_rang": 339, "c_scale": 346, "ca": [146, 377, 410, 443, 913, 914, 1005, 1009], "cabernet": 311, "cabin": 320, "cablevis": 10, "cabrera": 1046, "cach": [11, 52, 64, 164, 260, 283, 284, 286, 291, 295, 297, 366, 367, 375, 394, 442, 446, 451, 469, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 509, 510, 801, 847, 849, 865, 866, 903, 907, 908, 909, 910, 911, 978, 996, 1008, 1015, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1054], "cache_path": 996, "cache_s": [469, 903, 907, 908, 909, 910, 911, 1008], "cached_pip": [70, 411], "cachedir": [52, 70, 389, 411], "caching_dir": 978, "caherrera": 1049, "cai": 1049, "caicedo": 1036, "caio": [1042, 1044, 1046], "caj": 10, "caje": 1037, "cal_clf": 24, "cal_clf_prob": 24, "cal_hous": 375, "cal_scor": 24, "calcot": 1049, "calcsiz": 378, "calcul": [5, 22, 24, 31, 44, 57, 78, 107, 108, 109, 113, 131, 134, 162, 164, 170, 193, 201, 202, 214, 231, 233, 258, 259, 265, 269, 274, 281, 337, 343, 344, 362, 366, 387, 394, 400, 406, 407, 410, 414, 415, 417, 421, 439, 444, 445, 447, 449, 451, 452, 454, 456, 457, 472, 473, 479, 482, 537, 548, 554, 565, 570, 598, 612, 621, 633, 634, 635, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 680, 682, 685, 689, 691, 693, 695, 708, 717, 730, 731, 736, 737, 739, 745, 751, 752, 755, 765, 770, 772, 773, 774, 775, 779, 782, 784, 785, 788, 789, 790, 793, 794, 796, 808, 810, 826, 830, 843, 845, 846, 883, 884, 885, 891, 895, 905, 906, 931, 944, 985, 987, 989, 990, 991, 993, 995, 996, 997, 1001, 1003, 1006, 1008, 1015, 1024, 1027, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "cald": 900, "caleb": 1048, "calibr": [11, 26, 28, 112, 125, 132, 215, 229, 253, 259, 261, 369, 394, 400, 513, 516, 565, 570, 659, 660, 677, 710, 730, 742, 785, 788, 789, 800, 823, 831, 843, 902, 905, 933, 982, 989, 993, 1006, 1008, 1015, 1016, 1031, 1033, 1040, 1042], "calibrated_classifi": 24, "calibrated_classifiers_": [24, 407, 438], "calibrated_clf": 438, "calibrated_df": [23, 25], "calibrated_forest": 982, "calibratedclassifiercv": [22, 23, 24, 362, 394, 400, 407, 677, 800, 823, 982, 1008, 1014, 1040, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "calibratedclassifiercvifittedcalibratedclassifiercv": 24, "calibration_curv": [22, 407, 438, 439, 1045, 1050, 1054], "calibration_displai": [23, 25], "calibrationdisplai": [23, 25, 407, 933, 1049, 1050, 1054], "california": [120, 157, 161, 162, 305, 311, 317, 373, 377, 491, 1031], "calinski": [711, 1042], "calinski_harabasz_scor": [410, 1044], "calinski_harabaz_scor": [1042, 1044], "cali\u0144ski": 410, "call": [11, 12, 15, 44, 46, 48, 52, 69, 90, 107, 114, 121, 143, 149, 153, 155, 157, 166, 168, 185, 197, 198, 201, 215, 233, 237, 239, 240, 253, 259, 260, 268, 274, 275, 278, 283, 285, 310, 312, 317, 318, 351, 352, 353, 360, 366, 367, 368, 375, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 400, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 422, 433, 441, 444, 447, 448, 450, 451, 452, 453, 454, 455, 458, 461, 463, 465, 466, 469, 470, 475, 483, 484, 485, 489, 492, 493, 496, 498, 504, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 578, 583, 584, 589, 590, 592, 598, 603, 608, 609, 611, 612, 615, 618, 621, 628, 629, 630, 631, 632, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 705, 733, 743, 756, 772, 775, 779, 780, 781, 782, 794, 798, 799, 801, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 854, 856, 861, 862, 863, 864, 865, 868, 869, 870, 872, 874, 875, 877, 882, 885, 886, 889, 894, 895, 896, 897, 898, 902, 905, 906, 907, 908, 910, 911, 914, 916, 932, 936, 941, 942, 950, 951, 953, 959, 960, 961, 964, 967, 977, 982, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1013, 1018, 1020, 1024, 1027, 1028, 1029, 1031, 1033, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "callabl": [248, 263, 323, 394, 414, 417, 418, 419, 421, 422, 442, 444, 445, 446, 447, 448, 450, 451, 453, 458, 460, 461, 465, 466, 467, 468, 532, 534, 536, 538, 540, 546, 547, 558, 559, 560, 561, 562, 563, 565, 566, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 611, 612, 621, 629, 631, 635, 640, 644, 660, 667, 672, 674, 676, 689, 692, 693, 697, 712, 720, 733, 743, 772, 775, 779, 780, 781, 782, 793, 794, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 830, 832, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 869, 878, 900, 901, 907, 908, 909, 910, 911, 954, 960, 963, 977, 982, 993, 1003, 1036, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1052], "callback": [532, 538, 540, 546, 547, 854, 959, 1014, 1052], "callbl": 847, "calle": [233, 951], "caller": [233, 411, 647, 648, 653, 661, 662, 663, 682, 895, 896, 950, 951, 961, 969, 970, 971, 1045], "callgrin": 386, "callgrind": 383, "calm": 10, "caltech": 351, "calvin": [1039, 1040], "calvo": [1044, 1045], "cambridg": [375, 415, 591, 840, 844, 989, 991, 995], "came": 992, "camera_ind": 12, "camil": [1044, 1052, 1053], "camila": 1046, "camilaagw": 1046, "camilo": 1042, "campello": [410, 447], "campustrampu": 1043, "can": [0, 2, 3, 5, 6, 7, 8, 10, 11, 13, 17, 18, 22, 23, 24, 25, 29, 30, 31, 35, 38, 40, 41, 44, 46, 47, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 68, 69, 70, 71, 76, 77, 78, 79, 80, 84, 88, 94, 96, 97, 98, 100, 102, 103, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 141, 142, 143, 144, 145, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 181, 182, 185, 186, 188, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 213, 214, 215, 218, 219, 220, 226, 227, 228, 229, 230, 232, 233, 236, 237, 240, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 270, 271, 273, 274, 275, 278, 281, 283, 285, 287, 288, 289, 290, 292, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 328, 330, 331, 336, 337, 339, 342, 343, 346, 351, 352, 353, 358, 359, 360, 362, 366, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 433, 435, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 473, 483, 484, 485, 488, 497, 500, 504, 509, 510, 513, 522, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 580, 581, 582, 583, 584, 585, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 633, 635, 636, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 690, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 705, 708, 710, 712, 713, 719, 721, 722, 723, 724, 725, 727, 728, 730, 731, 733, 734, 738, 739, 740, 741, 743, 744, 747, 753, 756, 757, 758, 759, 760, 764, 780, 781, 783, 784, 785, 786, 788, 789, 790, 795, 796, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 862, 863, 864, 865, 868, 869, 870, 872, 873, 874, 878, 879, 880, 883, 884, 885, 890, 897, 898, 903, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 917, 918, 921, 923, 925, 929, 931, 936, 939, 941, 942, 948, 950, 953, 956, 959, 961, 963, 964, 967, 974, 977, 978, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "canberra": [451, 458, 700, 779, 780, 781, 996], "canberradist": 700, "cancel": [417, 418, 764], "cancer": [146, 373, 409, 501, 594, 595, 852, 1001, 1031, 1041], "candela": 377, "candid": [72, 248, 257, 260, 267, 317, 368, 380, 384, 410, 417, 449, 451, 801, 804, 805, 813, 815, 989, 996, 1009, 1042], "candidate_idx": 258, "cannon": 1051, "cannot": [2, 11, 38, 54, 73, 80, 93, 98, 117, 167, 168, 181, 197, 215, 233, 305, 339, 346, 368, 379, 381, 386, 392, 394, 395, 403, 410, 411, 412, 414, 415, 417, 418, 420, 466, 522, 539, 540, 541, 544, 548, 611, 614, 615, 616, 618, 620, 621, 623, 624, 626, 652, 656, 683, 693, 712, 718, 779, 804, 805, 852, 853, 855, 856, 857, 865, 866, 870, 875, 876, 887, 923, 925, 926, 982, 983, 987, 989, 990, 993, 994, 999, 1003, 1008, 1009, 1014, 1018, 1024, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "canon": [10, 394, 407, 417, 483, 484, 486, 769, 1014, 1016, 1031], "canonic": 394, "cant": 1053, "cantor": [629, 983], "canuma": 1049, "canva": 10, "cao": 410, "cap": [406, 410, 756, 993, 1045], "capabl": [53, 54, 84, 125, 154, 201, 222, 382, 394, 397, 994, 997, 1008, 1009, 1018, 1036, 1045, 1053], "capac": [125, 149, 169], "capit": [8, 23, 322, 497, 807, 824], "cappion": [693, 990], "cappuzzo": 1053, "capsiz": 329, "caption": 68, "captur": [2, 7, 10, 11, 35, 37, 84, 122, 127, 141, 154, 167, 176, 181, 197, 201, 249, 281, 316, 339, 343, 388, 410, 417, 418, 419, 572, 589, 590, 592, 851, 960, 993, 998, 1006, 1010, 1027, 1048], "car": 197, "carbal": 1053, "card": 1044, "cardif": 1011, "cardin": [35, 116, 117, 123, 169, 170, 311, 312, 321, 410, 417, 464, 554, 555, 558, 559, 560, 561, 565, 566, 567, 680, 878, 879, 886, 913, 914, 915, 916, 993, 994, 1001, 1003, 1050, 1051], "cardiotocogram": 236, "care": [6, 53, 123, 167, 253, 278, 343, 366, 368, 384, 386, 392, 394, 395, 403, 409, 410, 412, 418, 438, 461, 470, 641, 659, 660, 667, 668, 669, 677, 678, 679, 696, 905, 990, 1008, 1018, 1052], "carefulli": [273, 366, 415, 1008], "carei": [1039, 1040, 1041, 1042, 1043], "carett": 1043, "cari": 1048, "carl": [420, 611, 612, 615, 620, 623], "carla": 1052, "carlo": [0, 231, 370, 417, 420, 612, 642, 643, 985, 998, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "carlson": 1043, "carlsson": 1039, "carmen": 311, "carnegi": 900, "caro": 1041, "carodorum": 311, "carol": [1042, 1043], "carolin": 997, "carrascosa": [1018, 1040], "carre\u00f1o": 1051, "carri": [10, 29, 109, 162, 253, 259, 262, 267, 300, 307, 353, 395, 418, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1018, 1028], "carrillo": 1041, "carsten": 1049, "cart": [1016, 1031], "carter": [1042, 1043, 1051], "cartesian": [69, 406, 634, 996, 1051], "cartman_nabana": 1046, "cartograph": 173, "cartographi": 989, "caruana": [23, 25, 407, 438, 440], "carvaj": 1036, "casado": 1047, "casagrand": [1044, 1045], "casalegno": 1048, "cascad": 377, "case": [2, 5, 6, 11, 23, 25, 32, 35, 47, 50, 53, 55, 59, 64, 69, 70, 79, 84, 98, 100, 112, 114, 115, 122, 123, 130, 143, 145, 146, 149, 156, 167, 168, 170, 181, 183, 186, 188, 197, 198, 199, 201, 202, 205, 211, 213, 214, 215, 226, 230, 231, 232, 233, 236, 237, 248, 252, 253, 256, 258, 259, 260, 262, 265, 266, 268, 278, 283, 286, 290, 301, 305, 307, 310, 312, 315, 318, 343, 351, 352, 353, 360, 362, 366, 367, 368, 374, 375, 380, 381, 382, 384, 385, 386, 387, 389, 392, 393, 394, 395, 397, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 438, 441, 444, 445, 447, 448, 452, 454, 464, 465, 466, 468, 475, 497, 509, 510, 516, 540, 542, 543, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 589, 592, 594, 595, 598, 603, 607, 610, 611, 612, 626, 628, 629, 631, 633, 648, 649, 654, 657, 658, 659, 660, 662, 664, 667, 669, 670, 673, 675, 676, 677, 681, 683, 684, 685, 686, 687, 688, 700, 704, 709, 710, 713, 719, 721, 722, 724, 727, 729, 730, 731, 735, 736, 739, 743, 744, 746, 747, 749, 751, 754, 755, 757, 764, 779, 782, 784, 785, 786, 788, 789, 790, 791, 795, 797, 799, 801, 804, 805, 807, 815, 819, 824, 825, 826, 827, 828, 829, 830, 832, 834, 842, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 865, 872, 874, 875, 878, 879, 880, 883, 884, 885, 886, 889, 895, 896, 897, 898, 905, 907, 910, 913, 914, 920, 921, 931, 942, 943, 961, 982, 983, 985, 987, 988, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1003, 1007, 1008, 1009, 1013, 1014, 1018, 1020, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "caselli": [1044, 1045], "cash": 989, "cashman": 1046, "casino": [1050, 1051], "cass": 1042, "cassi": 311, "cast": [9, 11, 51, 197, 219, 374, 395, 418, 497, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 674, 676, 958, 1043, 1044, 1045, 1046, 1049, 1051, 1053], "castachick": 1047, "castello": 1040, "castor": 1047, "caswel": [1049, 1052], "cat": [10, 69, 168, 169, 236, 318, 319, 320, 321, 322, 323, 375, 418, 489, 583, 713, 719, 755, 784, 886, 993, 1003, 1045, 1046, 1048], "cat_column": 236, "cat_linear_processor": 130, "cat_proc": [228, 316], "cat_selector": 130, "cat_str": 17, "cat_tree_processor": 130, "catajara": 1046, "catalfo": 1044, "catalin": 643, "catastroph": [312, 764, 1014], "catch": [42, 60, 301, 367, 388, 389], "catch_warn": [42, 60, 233, 300, 301], "categor": [2, 69, 108, 114, 125, 130, 134, 164, 167, 168, 169, 197, 215, 236, 238, 240, 253, 312, 318, 320, 321, 368, 372, 374, 375, 382, 385, 394, 411, 418, 467, 468, 490, 491, 497, 506, 562, 563, 582, 583, 608, 609, 633, 634, 649, 659, 660, 670, 681, 710, 828, 840, 841, 842, 843, 844, 866, 868, 872, 873, 876, 878, 879, 886, 900, 901, 983, 989, 1000, 1001, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1029, 1031, 1036, 1037, 1040, 1041, 1044, 1046, 1048, 1051, 1052, 1053, 1054], "categori": [17, 42, 60, 68, 69, 119, 130, 167, 168, 197, 205, 212, 236, 253, 260, 300, 301, 307, 311, 312, 317, 320, 322, 330, 351, 352, 353, 374, 375, 389, 408, 410, 411, 417, 418, 420, 489, 497, 498, 504, 562, 563, 649, 659, 660, 670, 681, 744, 759, 760, 841, 878, 879, 886, 983, 989, 990, 991, 995, 1001, 1020, 1029, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "categorical_column": [2, 119, 167, 169, 236, 468], "categorical_columns_selector": 236, "categorical_columns_subset": 119, "categorical_crossentropi": [1046, 1050], "categorical_encod": 169, "categorical_featur": [2, 69, 119, 125, 168, 253, 311, 317, 318, 319, 320, 322, 385, 417, 562, 563, 633, 634, 1000, 1044, 1048, 1051, 1053], "categorical_preprocessor": [238, 311], "categorical_transform": 69, "categoricalnb": [840, 842, 843, 844, 995, 1046, 1047, 1048, 1049, 1051], "categories_": [878, 879, 886, 1003, 1044, 1051], "category_1_fold": 504, "category_2_fold": 504, "category_count_": 841, "category_s": 352, "categr": 1001, "caterpillar": 10, "cathi": [1040, 1046], "catindex": 168, "catplot": 248, "caught": [380, 388, 403], "caus": [2, 23, 25, 122, 150, 167, 195, 197, 201, 202, 215, 281, 312, 343, 353, 362, 378, 385, 407, 410, 415, 416, 418, 420, 444, 448, 450, 460, 510, 533, 583, 590, 611, 612, 779, 840, 841, 842, 844, 869, 878, 880, 883, 884, 925, 926, 982, 983, 989, 993, 1001, 1003, 1006, 1014, 1020, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "causal": [164, 165, 171, 192, 658, 786, 831, 1015], "causat": 167, "caution": [167, 253, 384, 441, 455, 1044], "cautiou": 1043, "caveat": [414, 420], "cawlei": [264, 993], "cax": [28, 152, 270], "ca\u00f1ardo": 1039, "cb": [152, 230, 247], "cbar_ax": 270, "cbar_kw": [176, 181], "cc": [38, 378], "cc18": 374, "cc_home": [913, 914], "cca": [234, 413, 484, 486, 994, 1040, 1044, 1045, 1046, 1048, 1050, 1054], "ccat": 375, "ccf2002": 985, "cclauss": 1044, "cco": 351, "ccp_alpha": [315, 356, 558, 559, 560, 561, 565, 566, 913, 914, 915, 916, 1009, 1046], "ccp_path": [913, 914, 915, 916], "cd": [93, 146, 377, 378, 380, 384, 386, 415, 472, 473, 479, 532, 538, 540, 541, 544, 546, 547, 548, 989, 1029, 1041, 1051], "cdef": 381, "cdf": 259, "cdist": 1049, "cdivis": 381, "cdot": [259, 343, 406, 410, 415, 416, 420, 615, 616, 620, 623, 624, 871, 985, 987, 993, 997, 1003], "cdrig": 1050, "cdt": 17, "cea": [840, 995], "ceballo": 1050, "ceder": [789, 993], "ceethinwa": [1048, 1049], "ceh": 1051, "ceil": [125, 236, 558, 559, 560, 561, 564, 565, 566, 567, 595, 672, 804, 805, 913, 914, 915, 916, 1007], "celelibi": 1045, "celeo": 1040, "celeux": 529, "cell": [9, 10, 18, 24, 30, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 146, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 296, 302, 311, 316, 317, 319, 320, 322, 328, 360, 377, 385, 693, 993, 994, 1042, 1050], "cellular": 12, "celsiu": [168, 1000], "cen": 744, "censor": 1013, "censu": 375, "center": [0, 2, 5, 6, 7, 12, 22, 24, 31, 32, 35, 36, 38, 40, 41, 43, 46, 47, 48, 51, 53, 54, 57, 58, 59, 61, 62, 79, 89, 98, 99, 102, 120, 121, 122, 123, 144, 146, 162, 168, 178, 189, 191, 197, 198, 208, 209, 221, 222, 226, 227, 236, 243, 246, 247, 254, 260, 270, 288, 291, 293, 300, 305, 307, 308, 319, 328, 337, 339, 340, 341, 345, 352, 353, 375, 376, 377, 385, 408, 410, 412, 413, 415, 416, 417, 423, 441, 443, 444, 447, 448, 449, 450, 453, 455, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 502, 513, 525, 535, 536, 542, 545, 551, 607, 610, 611, 612, 633, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 679, 691, 695, 697, 798, 870, 871, 874, 883, 885, 895, 896, 905, 906, 987, 989, 990, 992, 1000, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1053], "center1": 64, "center2": 64, "center3": 64, "center4": 64, "center_": 883, "center_box": [58, 513], "centers_0": 308, "centers_1": 308, "centers_init": 57, "cento": 378, "centr": 129, "central": [0, 12, 199, 375, 381, 410, 999, 1013], "centrality_scor": 15, "centroid": [40, 43, 55, 56, 76, 124, 164, 284, 291, 297, 308, 319, 335, 352, 376, 400, 410, 443, 444, 447, 448, 449, 450, 453, 460, 461, 463, 505, 550, 632, 852, 1015, 1016, 1031, 1036, 1040, 1043, 1048, 1052], "centroids_": [443, 447, 852], "ceo": 1018, "cerda": 1050, "certain": [11, 53, 120, 125, 167, 202, 214, 233, 259, 283, 309, 343, 362, 375, 376, 384, 394, 396, 403, 410, 415, 419, 639, 650, 654, 659, 664, 685, 865, 870, 905, 982, 985, 989, 990, 993, 994, 997, 1003, 1008, 1013, 1020, 1024, 1041, 1045, 1048, 1051], "certainli": [51, 68, 167, 352, 409], "certainti": [259, 382, 743, 993], "ceshin": 1042, "cetina": 1048, "cf": [312, 409, 410, 413, 443, 701, 989, 1003, 1014], "cflag": 378, "cft": 410, "cftree": 443, "cg": [302, 659, 660, 673, 675, 688, 989, 1040, 1041, 1043, 1047, 1049, 1050, 1053, 1054], "cga": 157, "cgi": 898, "cgohlk": [1039, 1040], "cgroup": [1049, 1050], "cgsavard": [1046, 1047], "ch": [199, 329, 331], "ch6": 531, "chacon": 706, "chac\u00f3n": 706, "chad": 1053, "chadi": 1044, "chai": [1048, 1051, 1052], "chain": [67, 73, 74, 109, 137, 164, 229, 267, 270, 278, 280, 282, 283, 286, 302, 362, 369, 372, 392, 394, 408, 420, 497, 503, 542, 612, 628, 659, 739, 801, 831, 834, 836, 837, 838, 839, 865, 866, 885, 982, 983, 994, 998, 1010, 1013, 1015, 1018, 1029, 1031], "chain_jaccard_scor": 281, "chain_method": [836, 1054], "chain_method_": 836, "chaitanya": 1047, "chaitanyamog": 1048, "chakhchoukh": 79, "chakravarti": [636, 638], "chalearn": 993, "challeng": [10, 130, 149, 168, 176, 215, 226, 368, 375, 376, 403, 410, 412, 463, 473, 993, 999, 1018, 1020], "chalmer": 1050, "chalmerlow": 1039, "chalulu": 1051, "chan": [0, 843, 885], "chanc": [15, 34, 36, 47, 66, 109, 141, 164, 170, 197, 205, 212, 215, 259, 265, 268, 269, 311, 346, 352, 362, 379, 409, 410, 414, 701, 703, 705, 706, 709, 717, 756, 758, 787, 796, 830, 993, 1001, 1009, 1015, 1052], "chance_level_": [701, 703, 1052], "chance_level_kw": [236, 701, 703, 1052], "chandra": [1046, 1047, 1050], "chang": [5, 23, 24, 25, 93, 97, 98, 112, 115, 123, 150, 161, 166, 167, 170, 198, 199, 201, 202, 237, 238, 253, 254, 259, 266, 269, 273, 309, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 339, 343, 353, 360, 362, 366, 367, 368, 375, 382, 383, 384, 385, 388, 392, 394, 400, 410, 414, 417, 418, 420, 422, 435, 438, 441, 444, 445, 448, 450, 453, 455, 460, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 494, 495, 497, 505, 509, 510, 513, 514, 515, 523, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 589, 590, 591, 592, 594, 595, 598, 603, 611, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 693, 695, 701, 705, 708, 713, 717, 718, 730, 731, 737, 738, 756, 758, 779, 785, 786, 788, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 815, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 855, 856, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 877, 878, 884, 885, 886, 893, 894, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 923, 925, 926, 937, 942, 952, 959, 960, 961, 963, 982, 983, 984, 992, 993, 994, 996, 1003, 1006, 1007, 1008, 1009, 1011, 1014, 1020, 1027, 1029, 1034, 1035, 1055], "changed_onli": 1047, "changedbehaviorwarn": 1048, "changedbehaviourwarn": 1045, "changelog": [320, 384, 394, 1034], "changing_param": 5, "changing_param_valu": 5, "changyao": [1051, 1052], "channel": [367, 375, 378, 397, 418, 494, 495, 584, 585, 587, 588, 1017], "channel_prior": 378, "chapman": 989, "chapter": [93, 362, 382, 410, 415, 417, 420, 531, 533, 535, 615, 620, 623, 644, 983, 986, 989, 1008, 1009], "char": [418, 589, 590, 592, 1036], "char_wb": [418, 589, 590, 592], "charact": [353, 380, 385, 394, 418, 504, 509, 510, 589, 590, 592, 917, 998, 1029, 1036, 1049, 1051], "character": [38, 215, 356, 410, 414, 990], "characteris": 996, "characterist": [42, 60, 146, 154, 164, 226, 227, 239, 251, 253, 254, 256, 261, 266, 276, 305, 329, 362, 375, 377, 385, 407, 409, 414, 417, 420, 504, 505, 624, 639, 659, 703, 707, 709, 728, 783, 789, 790, 820, 831, 834, 872, 910, 989, 1015], "chardet": 418, "chardetect": 418, "charg": [0, 253, 380], "charikar": 985, "charl": [25, 253, 765, 1036, 1039, 1042, 1046, 1048, 1051], "charli": [1043, 1044, 1052], "charlton": 1043, "charra": [1051, 1053, 1054], "charron": [1018, 1039, 1040, 1047, 1048, 1049], "charset": [1036, 1038], "charset_error": 1038, "chart": [35, 120, 264, 994, 1022, 1039], "chartbeat": 1018, "chase": [10, 1036], "chasnovski": 1047, "chat": 1018, "chatterje": 1047, "chaudhuri": 447, "chauhan": [1044, 1045, 1051, 1052], "chaumond": [1018, 1044], "chauvin": 744, "chavez": [4, 375], "chawla": 1046, "chayant": 1043, "chazalon": 1050, "cheaper": [168, 410, 420, 674, 985, 989], "cheat": [11, 339, 997, 1007, 1038], "chebee7i": 1040, "chebyshev": [451, 458, 700, 779, 780, 781, 996], "chebyshevdist": 700, "check": [2, 3, 6, 15, 44, 51, 54, 97, 107, 115, 130, 149, 164, 166, 168, 169, 183, 185, 186, 197, 219, 233, 244, 251, 253, 268, 276, 278, 318, 328, 360, 366, 367, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 392, 394, 397, 400, 403, 408, 411, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 492, 503, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 688, 689, 690, 691, 692, 693, 694, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 925, 926, 927, 936, 937, 948, 949, 950, 954, 955, 977, 978, 979, 981, 988, 989, 990, 993, 1008, 1009, 1014, 1015, 1018, 1031, 1036, 1037, 1039, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "check_arrai": [382, 389, 469, 535, 903, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "check_classifier_multioutput": 1046, "check_cv": [394, 1041], "check_decision_proba_consist": 1043, "check_estim": [315, 382, 394, 937, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "check_estimator_sparse_arrai": 1054, "check_estimator_sparse_data": 1054, "check_estimator_sparse_matrix": 1054, "check_estimators_fit_returns_self": 937, "check_estimators_pickl": 1053, "check_fit_idempot": 1045, "check_input": [535, 549, 647, 648, 653, 661, 662, 663, 682, 688, 913, 914, 915, 916, 1044], "check_invers": [411, 466, 869, 1003, 1044, 1050, 1051], "check_is_fit": [54, 107, 233, 383, 389, 394, 1046, 1049, 1050], "check_memori": [389, 394, 1043], "check_metadata": 233, "check_methods_sample_order_invari": [1048, 1050], "check_methods_subset_invari": [1044, 1050], "check_nam": 382, "check_pairwise_arrai": 1045, "check_random_st": [59, 213, 220, 229, 235, 382, 389, 394], "check_regressor_multioutput": 1046, "check_requires_y_non": 1050, "check_sample_weights_pandas_seri": 1044, "check_scalar": 1050, "check_scor": [394, 1054], "check_set_param": 1044, "check_transformer_data_not_an_arrai": 1046, "check_transformers_unfitted_stateless": 1052, "check_x_i": [382, 389, 1040, 1044, 1045, 1050], "checked_cv": 825, "checker": [384, 825], "checkerboard": [18, 406, 452, 454, 512, 514], "checking_statu": 253, "checkingclassifi": 1046, "checklist": 383, "checkout": [378, 380, 384, 388], "checkpoint": 1013, "checks_gener": 936, "checksum": 1048, "cheeseman": 377, "chege": 1050, "chemic": 377, "chemometr": 377, "chen": [76, 77, 412, 417, 423, 476, 727, 757, 985, 993, 1039, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052], "chenal": [1045, 1046, 1048], "cherkasski": 989, "chernyi": 1050, "cherri": 384, "cherti": 1040, "cherubin": 1042, "chestervil": 320, "cheuk": [1044, 1045], "cheung": [44, 1037], "chevali": 1048, "chevalli": 1053, "chevron": 10, "chi": [69, 78, 109, 309, 372, 419, 520, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 639, 640, 641, 642, 643, 759, 760, 1031, 1036, 1041, 1042], "chi2": [69, 418, 419, 453, 582, 593, 596, 597, 599, 600, 601, 606, 607, 610, 621, 639, 640, 641, 642, 643, 644, 760, 766, 775, 1036, 1043, 1050], "chi2_featur": 643, "chi2_kernel": [639, 643, 759, 766, 991, 1037], "chi2_stat": 605, "chi2sampl": 639, "chiang": 1044, "chiara": [0, 371, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "chibuik": 1049, "chief": 1018, "chieh": [1043, 1044], "chigurupati": 1048, "chih": [659, 1041], "chilamkurthi": 1042, "child": [125, 233, 351, 360, 367, 392, 394, 400, 410, 417, 443, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 913, 914, 915, 916, 950, 951, 953, 961, 1009, 1043], "child_idx": 39, "children": [360, 410, 417, 442, 446, 464, 567, 1040, 1053], "children_": [39, 442, 446, 464], "children_left": 360, "children_right": 360, "chime": 379, "chin": [377, 1040], "china": [46, 410, 507, 508, 585, 588], "chines": 1013, "chinmaya": 1043, "chinthala": 1043, "chiotelli": 1045, "chip": [405, 1018], "chirag": 54, "chisquar": 309, "chitteti": 1050, "chkoar": 1043, "chloe": 1050, "cho": 1047, "choe": 1045, "choi": 989, "choic": [2, 5, 25, 38, 44, 53, 63, 68, 76, 100, 125, 149, 150, 156, 161, 186, 198, 236, 252, 257, 259, 262, 273, 288, 312, 317, 351, 352, 362, 366, 378, 382, 385, 394, 397, 410, 412, 414, 416, 417, 419, 420, 453, 463, 472, 473, 474, 475, 476, 477, 479, 539, 541, 542, 548, 560, 639, 648, 649, 657, 659, 660, 662, 670, 681, 693, 706, 743, 834, 847, 848, 853, 855, 856, 882, 885, 894, 896, 905, 906, 929, 982, 987, 989, 990, 991, 992, 993, 994, 996, 999, 1001, 1006, 1007, 1008, 1009, 1043, 1046, 1047, 1051, 1052], "choleski": [77, 197, 215, 389, 472, 473, 479, 528, 612, 649, 651, 652, 655, 656, 657, 659, 660, 670, 673, 675, 681, 683, 684, 688, 798, 799, 989, 1039, 1043, 1045, 1048, 1051, 1052], "cholesky_delet": 389, "cholesterol": [146, 377], "chong": 537, "choo": [1051, 1052], "choos": [2, 9, 10, 42, 44, 48, 51, 58, 60, 64, 76, 99, 118, 130, 136, 146, 167, 170, 190, 234, 253, 254, 264, 271, 356, 362, 366, 367, 368, 369, 382, 385, 388, 394, 403, 409, 410, 412, 414, 417, 418, 421, 444, 445, 448, 450, 460, 524, 533, 539, 560, 561, 583, 603, 659, 660, 673, 675, 680, 688, 689, 690, 694, 727, 757, 801, 804, 805, 815, 872, 905, 906, 913, 914, 915, 916, 983, 984, 988, 989, 990, 991, 992, 996, 1003, 1006, 1007, 1008, 1021, 1023, 1027, 1028, 1038, 1039, 1043, 1045, 1047], "choose_check_classifiers_label": 1046, "choose_random_sampl": 382, "choraria": 1048, "chose": [40, 167, 1024], "chosen": [6, 18, 44, 71, 130, 150, 167, 168, 186, 198, 214, 234, 252, 253, 254, 256, 262, 273, 352, 362, 366, 392, 409, 410, 412, 413, 417, 420, 441, 447, 450, 452, 454, 455, 461, 497, 524, 536, 558, 559, 560, 561, 562, 563, 565, 566, 648, 654, 657, 659, 660, 662, 664, 672, 677, 678, 679, 680, 681, 691, 695, 795, 798, 799, 801, 804, 805, 815, 835, 854, 905, 906, 913, 914, 915, 916, 942, 982, 985, 987, 989, 990, 992, 994, 999, 1000, 1007, 1024, 1025, 1027, 1028, 1044, 1052, 1053], "chou": [1043, 1044], "choudhari": [1040, 1041, 1050, 1052], "chowdhuri": [1044, 1050], "choyal": [1043, 1044], "chri": [0, 399, 1036, 1039, 1044, 1045, 1046, 1047, 1050], "chrissobel": 1049, "christ": 17, "christian": [0, 17, 198, 199, 351, 352, 375, 398, 1018, 1029, 1036, 1037, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "christianwaldmann": 1051, "christin": [1051, 1052], "christo": [54, 1045, 1046, 1048, 1050, 1053], "christof": [1040, 1041], "christoph": [168, 415, 420, 533, 611, 612, 615, 620, 623, 798, 989, 994, 1037, 1041, 1044, 1047, 1048, 1049, 1050, 1051], "christopherlim98": 1050, "chrome": 1003, "chronolog": [375, 498], "chu": [852, 1052], "chuan": 997, "chugh": 1048, "chuliang": 1049, "chun": [1047, 1048, 1050, 1051, 1052], "chung": [1043, 1044], "chunk": [6, 48, 366, 367, 410, 415, 421, 445, 450, 469, 539, 779, 782, 833, 834, 840, 841, 842, 843, 844, 903, 995, 1043, 1044, 1045, 1046, 1047], "chunk_siz": 1037, "chunker": 418, "church": [898, 1005], "chyi": [13, 1039, 1040, 1041, 1042, 1043], "chyikwei": 13, "ci": [53, 367, 383, 384, 388, 995, 1042, 1044], "ciccolella": [693, 990], "cice": [1000, 1050], "cichocki": [415, 539, 541, 548], "cimport": [381, 389, 1044], "cindi": [1041, 1049, 1053], "cio": 374, "cipri\u00e1n": 1050, "circl": [32, 58, 98, 128, 129, 138, 223, 234, 290, 293, 300, 305, 307, 328, 343, 359, 376, 384, 388, 410, 453, 463, 515, 523, 765, 1008], "circle1": 64, "circle2": 64, "circle3": 64, "circle4": 64, "circleci": [111, 153, 155, 157, 158, 189, 206, 244, 254, 302, 344, 357, 380], "circlecl": 0, "circuit": [17, 990], "circular": 12, "circumst": [100, 215, 996, 1013], "circumstanti": 197, "cirru": [0, 380], "cisco": 10, "citat": [0, 374, 377, 392], "cite": [374, 392, 410, 1011], "citi": [411, 418, 467, 1029], "citizen": 1003, "city_categori": 411, "city_london": 411, "city_pari": 411, "city_sallisaw": 411, "cityblock": [38, 42, 410, 451, 458, 763, 779, 780, 781, 996], "cividi": 38, "ciyou": 659, "cj": [995, 1039, 1040, 1041, 1042, 1043], "cjlin": [173, 374, 488, 509, 510, 659, 1039], "ckdtree": [421, 445, 1038], "cl": [0, 6, 10, 387, 394, 915], "cla": 99, "clabel": [152, 208], "clae": 1044, "clai": [326, 327, 328, 331, 1036], "claim": [164, 175, 216, 380, 465, 497, 553, 649, 670, 681, 707, 746, 751, 753, 831, 866, 869, 870, 878, 885, 989, 1015], "claimamount": 215, "claimnb": [197, 215], "clair": 1036, "clamp": [901, 1006], "clang": [378, 381], "clara": [374, 1048], "clare": 1046, "clarifi": [388, 395, 794], "clariti": [144, 380, 388], "clark": 10, "class": [2, 6, 7, 8, 9, 12, 17, 21, 22, 23, 25, 26, 28, 32, 38, 43, 52, 53, 54, 56, 69, 70, 88, 89, 90, 98, 101, 103, 107, 108, 113, 115, 117, 120, 125, 126, 131, 134, 146, 149, 150, 152, 153, 157, 158, 161, 164, 167, 168, 173, 175, 187, 188, 189, 205, 209, 212, 213, 216, 219, 226, 233, 234, 236, 243, 244, 245, 251, 252, 253, 254, 259, 261, 265, 269, 270, 273, 276, 278, 281, 283, 286, 288, 289, 290, 291, 292, 293, 294, 300, 302, 310, 315, 319, 321, 322, 323, 326, 328, 329, 334, 335, 336, 337, 339, 340, 343, 347, 349, 351, 352, 353, 357, 360, 368, 369, 372, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 389, 392, 393, 397, 400, 403, 404, 405, 407, 410, 411, 413, 415, 419, 420, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 501, 503, 504, 505, 509, 510, 511, 513, 515, 516, 520, 523, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 721, 723, 728, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 755, 756, 758, 783, 784, 785, 787, 788, 789, 790, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 930, 931, 932, 933, 934, 936, 937, 949, 950, 951, 954, 959, 961, 963, 964, 977, 979, 982, 983, 984, 985, 987, 988, 989, 990, 992, 994, 995, 997, 1000, 1001, 1003, 1004, 1006, 1009, 1014, 1015, 1016, 1018, 1020, 1024, 1027, 1029, 1031, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "class1_1": 132, "class2_1": 132, "class_0": [205, 377, 511], "class_1": [205, 377, 511], "class_2": [377, 511], "class_count_": [840, 841, 842, 843, 844], "class_id": [268, 269], "class_index": 53, "class_label": [394, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 800, 823, 913, 915, 931, 1008], "class_likelihood_ratio": [262, 993, 1051], "class_log_prior_": [840, 841, 842, 844], "class_memb": 36, "class_member_mask": 47, "class_nam": [111, 252, 886, 917, 918, 919, 1009, 1052], "class_name0": [426, 443, 444, 446, 448, 450, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 871, 897, 898], "class_name1": [426, 443, 444, 446, 448, 450, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 871, 897, 898], "class_name2": [426, 443, 444, 446, 448, 450, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 871, 897, 898], "class_of_interest": [28, 268, 632, 1053], "class_prior": [375, 840, 841, 842, 844, 1037, 1040], "class_prior_": [552, 843], "class_protein_loc": 278, "class_sep": [145, 293, 516, 800, 823], "class_weight": [4, 341, 394, 408, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 678, 905, 907, 910, 912, 913, 915, 982, 1007, 1008, 1025, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1050, 1051], "class_weight_": [907, 910, 1051], "class_weight_vect": 930, "classes_": [107, 189, 206, 227, 233, 268, 326, 327, 380, 382, 394, 435, 438, 439, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 594, 595, 611, 632, 659, 660, 667, 669, 675, 676, 677, 698, 701, 703, 789, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 852, 855, 862, 865, 872, 873, 876, 886, 900, 901, 902, 905, 907, 910, 913, 915, 918, 993, 1004, 1007, 1037, 1040, 1041, 1043, 1046, 1048], "classic": [15, 192, 222, 243, 249, 343, 377, 384, 412, 414, 415, 444, 448, 450, 460, 493, 501, 505, 511, 542, 633, 634, 915, 916, 987, 989, 992, 995, 1003, 1013, 1023, 1036, 1037, 1041, 1050], "classif": [1, 4, 5, 8, 13, 14, 17, 21, 22, 23, 25, 26, 29, 32, 33, 43, 54, 69, 70, 71, 76, 77, 83, 86, 90, 91, 96, 107, 109, 111, 113, 115, 116, 117, 118, 123, 124, 125, 126, 128, 131, 132, 135, 138, 139, 141, 142, 143, 145, 146, 148, 154, 155, 156, 159, 167, 168, 173, 175, 187, 188, 189, 190, 197, 205, 207, 208, 209, 210, 212, 216, 225, 227, 231, 232, 233, 236, 239, 241, 246, 247, 251, 252, 256, 257, 258, 259, 260, 268, 273, 274, 275, 276, 278, 280, 282, 284, 285, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 307, 308, 309, 310, 326, 331, 332, 334, 335, 339, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 362, 366, 368, 369, 373, 374, 375, 377, 382, 385, 389, 393, 394, 404, 407, 409, 410, 411, 414, 415, 417, 418, 419, 427, 438, 470, 476, 483, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 511, 513, 515, 516, 520, 521, 523, 524, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 570, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 610, 611, 612, 614, 615, 623, 632, 633, 634, 644, 659, 660, 667, 669, 675, 676, 677, 698, 704, 706, 709, 713, 714, 716, 717, 719, 727, 728, 730, 731, 735, 736, 739, 742, 743, 744, 755, 757, 759, 760, 762, 783, 784, 785, 787, 788, 789, 790, 795, 797, 800, 801, 802, 804, 805, 806, 807, 815, 819, 820, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 847, 852, 854, 855, 861, 862, 863, 865, 869, 872, 877, 878, 879, 880, 885, 886, 889, 891, 900, 901, 902, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 928, 931, 939, 982, 983, 985, 986, 987, 990, 991, 995, 998, 1000, 1001, 1003, 1004, 1006, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1025, 1026, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "classifi": [4, 5, 6, 7, 21, 24, 26, 27, 28, 30, 32, 33, 43, 54, 68, 69, 70, 71, 72, 88, 98, 101, 103, 109, 110, 111, 112, 113, 116, 117, 118, 121, 122, 128, 131, 132, 138, 142, 143, 144, 145, 151, 157, 164, 169, 170, 173, 175, 187, 188, 189, 195, 197, 204, 206, 209, 212, 215, 216, 226, 229, 231, 233, 234, 239, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 275, 278, 280, 282, 285, 291, 292, 294, 299, 302, 307, 317, 318, 322, 325, 326, 327, 329, 330, 332, 334, 335, 337, 338, 340, 341, 342, 343, 347, 348, 349, 353, 375, 377, 380, 382, 385, 392, 394, 400, 409, 410, 411, 414, 418, 419, 420, 427, 435, 436, 437, 438, 439, 440, 489, 490, 497, 505, 513, 515, 516, 523, 532, 537, 538, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 567, 568, 569, 570, 571, 594, 595, 603, 607, 611, 623, 630, 632, 633, 634, 650, 659, 660, 667, 669, 672, 673, 674, 675, 676, 677, 698, 699, 701, 703, 704, 708, 709, 710, 712, 713, 714, 719, 721, 723, 727, 728, 730, 731, 733, 735, 736, 739, 740, 741, 742, 743, 744, 755, 757, 783, 784, 785, 788, 789, 790, 795, 797, 800, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 853, 855, 856, 861, 862, 863, 865, 866, 872, 885, 886, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 934, 936, 982, 983, 985, 988, 989, 990, 993, 994, 995, 998, 1001, 1003, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1023, 1024, 1025, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054], "classification_data": 5, "classification_report": [4, 30, 68, 143, 257, 302, 326, 327, 823, 993, 1025, 1029, 1038, 1040, 1044, 1045, 1046, 1048, 1052, 1054], "classificationcriterion": 1044, "classifier_": [54, 233], "classifier__c": 69, "classifier__criterion": 238, "classifier__max_depth": 238, "classifier__max_featur": 238, "classifier__min_samples_leaf": 169, "classifier__n_estim": 238, "classifier__n_neighbor": 285, "classifier_idx": 28, "classifier_model": 285, "classifier_other_threshold": 800, "classifier_tun": 823, "classifierchain": [281, 394, 400, 837, 839, 1043, 1048, 1051, 1053, 1054], "classifiermixin": [107, 233, 380, 382, 394, 414, 1047], "classify__c": 70, "classmethod": [387, 439, 632, 633, 698, 699, 700, 701, 702, 703, 807, 824], "classnameprefixfeaturesoutmixin": [382, 434, 1051], "claudio": [377, 1050, 1051, 1053], "claus": [3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 23, 25, 28, 29, 30, 35, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 68, 69, 71, 72, 73, 80, 87, 88, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 202, 204, 205, 213, 214, 219, 220, 226, 231, 232, 234, 236, 243, 245, 260, 265, 272, 281, 283, 285, 291, 292, 293, 295, 296, 299, 305, 306, 307, 308, 309, 310, 343, 344, 346, 347, 351, 352, 353, 392], "clauss": 1053, "clb": 168, "clean": [50, 69, 196, 362, 372, 378, 416, 999, 1003, 1046], "cleaner": 64, "cleanli": [60, 1036], "cleanup": [380, 1036], "clear": [2, 53, 58, 70, 167, 168, 310, 375, 379, 380, 382, 392, 393, 394, 407, 411, 416, 919, 920, 982, 987, 1047, 1048, 1049, 1054], "clearer": [223, 1008], "clearli": [2, 58, 96, 168, 231, 343, 379, 380, 392, 394, 415, 417, 994, 1000], "clegg": 1039, "clemen": 1040, "clement": [1043, 1044, 1048], "clenaghan": [1041, 1042], "cleveland": 375, "cleverless": 1038, "clf": [4, 8, 9, 10, 22, 23, 24, 25, 29, 30, 36, 46, 49, 52, 56, 61, 69, 99, 113, 121, 124, 126, 131, 136, 138, 142, 143, 145, 151, 153, 170, 187, 189, 190, 194, 195, 201, 204, 206, 209, 210, 211, 212, 213, 221, 227, 228, 231, 234, 240, 247, 256, 260, 264, 265, 267, 270, 271, 286, 289, 290, 291, 294, 299, 307, 310, 315, 316, 317, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 351, 356, 357, 360, 366, 375, 393, 394, 403, 411, 414, 417, 419, 439, 550, 551, 554, 556, 558, 560, 562, 564, 565, 568, 594, 595, 598, 633, 635, 639, 640, 641, 642, 643, 645, 646, 649, 653, 659, 660, 661, 662, 663, 667, 669, 670, 673, 674, 675, 676, 677, 678, 681, 698, 699, 701, 703, 789, 801, 804, 805, 815, 833, 834, 835, 837, 840, 841, 842, 843, 844, 851, 852, 862, 905, 907, 909, 910, 913, 917, 919, 983, 985, 989, 993, 994, 996, 997, 999, 1000, 1007, 1008, 1009, 1020, 1024, 1025, 1029], "clf1": [31, 131, 132, 417, 570], "clf2": [31, 131, 132, 382, 417, 570], "clf3": [31, 131, 132, 382, 417, 570], "clf__": 260, "clf__alpha": [260, 1029], "clf__c": 411, "clf_descr": 351, "clf_en_lr": 188, "clf_err": 113, "clf_isoton": 22, "clf_isotonic_scor": 22, "clf_l1_lr": 188, "clf_l2_lr": 188, "clf_list": [23, 25], "clf_name": [8, 351], "clf_no_weight": 348, "clf_pf": 843, "clf_prob": 24, "clf_sample_weight": 233, "clf_score": 22, "clf_sel": 170, "clf_select": 142, "clf_sgd": 211, "clf_sigmoid": 22, "clf_sigmoid_scor": 22, "clf_weight": 348, "cli": 1021, "click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "clickabl": 1050, "client": [382, 961], "clifford": 1049, "cliffordemmanuel": 1049, "clim": 152, "climatologi": 407, "climb": [410, 449, 462], "clinton": 17, "clip": [23, 25, 215, 229, 305, 339, 636, 677, 742, 875, 1003, 1040, 1047, 1048], "clmbst": 1048, "clock": 2, "clone": [54, 122, 157, 168, 233, 302, 322, 362, 378, 380, 383, 384, 386, 388, 394, 407, 411, 420, 438, 466, 570, 571, 598, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 807, 824, 829, 832, 836, 839, 865, 866, 902, 1014, 1036, 1042, 1044, 1048, 1052, 1053], "clone_kernel": [611, 612, 1046], "clone_with_theta": [157, 420, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "cloned_classifi": 435, "close": [6, 10, 15, 22, 23, 25, 36, 37, 44, 52, 58, 64, 76, 77, 80, 98, 112, 119, 122, 126, 130, 149, 150, 153, 154, 155, 156, 157, 167, 169, 181, 201, 203, 219, 226, 232, 236, 243, 249, 259, 260, 273, 289, 290, 305, 315, 339, 343, 344, 352, 362, 375, 380, 382, 388, 392, 394, 395, 407, 408, 410, 413, 414, 417, 420, 451, 456, 473, 509, 510, 533, 564, 629, 644, 648, 662, 673, 675, 688, 706, 747, 798, 819, 820, 840, 841, 842, 844, 851, 926, 982, 986, 987, 989, 990, 992, 993, 994, 996, 999, 1000, 1003, 1008, 1013, 1018, 1027, 1039, 1043, 1044, 1045], "close_pric": 10, "closer": [2, 35, 96, 98, 129, 146, 149, 168, 176, 201, 343, 353, 407, 410, 415, 450, 554, 629, 713, 847, 848, 853, 855, 856, 857, 1008, 1043], "closest": [25, 44, 62, 201, 382, 410, 441, 443, 444, 448, 449, 450, 460, 654, 780, 781, 835, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 984, 987, 994, 996, 1027], "closur": 15, "cloud": [41, 83, 92, 94, 104, 164, 388, 415, 534, 542, 693, 993, 1012, 1013, 1015, 1028], "cloudpickl": 1031, "clouldpickl": 403, "cls_info": 8, "cls_name": [6, 8], "cls_runtim": 6, "cls_stat": 6, "cls_valu": 8, "club": 377, "clue": [375, 388, 990], "clump": 222, "clust": [63, 451, 458], "cluster": [6, 7, 12, 13, 15, 16, 18, 20, 22, 25, 40, 41, 44, 46, 48, 49, 51, 52, 55, 57, 59, 60, 66, 68, 78, 87, 88, 89, 99, 107, 111, 118, 126, 141, 157, 170, 194, 219, 221, 222, 223, 230, 233, 236, 243, 244, 245, 246, 260, 283, 289, 290, 292, 308, 316, 320, 326, 327, 328, 329, 330, 341, 350, 351, 353, 354, 360, 368, 369, 373, 375, 377, 380, 382, 385, 392, 394, 404, 411, 416, 418, 424, 425, 428, 489, 503, 504, 505, 512, 513, 514, 515, 516, 523, 531, 542, 545, 554, 565, 567, 590, 591, 592, 632, 692, 693, 696, 705, 706, 711, 718, 720, 726, 732, 737, 738, 756, 758, 779, 780, 787, 793, 794, 796, 798, 799, 857, 858, 866, 870, 877, 885, 934, 936, 954, 961, 977, 983, 990, 992, 996, 999, 1001, 1003, 1006, 1010, 1013, 1014, 1015, 1018, 1020, 1023, 1026, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "cluster_1": 126, "cluster_2": 126, "cluster_al": [449, 462], "cluster_cent": [36, 59, 61, 62, 462], "cluster_center_indic": [441, 455], "cluster_centers_": [40, 41, 46, 48, 56, 58, 59, 61, 62, 93, 319, 352, 441, 444, 448, 449, 450, 1028], "cluster_centers_indic": [36, 455], "cluster_centers_indices_": [36, 441], "cluster_data": 57, "cluster_doc": 17, "cluster_hierarchy_": [410, 451], "cluster_id": [170, 352], "cluster_id_to_feature_id": 170, "cluster_label": [54, 58], "cluster_method": 451, "cluster_optics_dbscan": [63, 410], "cluster_qr": [44, 410, 453, 463, 1050], "cluster_s": 352, "cluster_selection_epsilon": 447, "cluster_selection_method": 447, "cluster_std": [24, 36, 42, 47, 53, 54, 55, 57, 58, 60, 61, 62, 209, 226, 246, 308, 341, 513], "cluster_word": 17, "clusterer_": 54, "clustering_algorithm": [41, 42, 60], "clustering_metr": 56, "clustermixin": [382, 1053], "clusters_std": 341, "clyde": 1041, "cl\u00e9ment": [1045, 1049, 1051], "cm": [2, 4, 9, 10, 12, 18, 19, 22, 28, 29, 30, 36, 37, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 58, 59, 65, 78, 80, 87, 93, 96, 99, 111, 117, 118, 138, 144, 152, 153, 168, 180, 189, 206, 209, 210, 213, 219, 220, 221, 227, 230, 231, 235, 240, 252, 253, 254, 283, 286, 287, 289, 293, 296, 299, 301, 302, 305, 307, 317, 320, 326, 327, 331, 335, 336, 337, 339, 340, 341, 347, 348, 357, 377, 411, 698, 918, 993, 1003, 1009, 1025, 1026], "cm2013": 410, "cm_bright": [29, 299, 307], "cm_displai": 227, "cm_piyg": 307, "cmap": [2, 3, 4, 9, 10, 12, 18, 19, 28, 29, 30, 32, 37, 38, 44, 45, 48, 49, 51, 52, 56, 78, 80, 87, 93, 96, 99, 103, 111, 117, 118, 138, 144, 152, 153, 168, 176, 180, 181, 188, 189, 206, 209, 210, 211, 213, 219, 220, 221, 230, 231, 235, 252, 254, 283, 287, 289, 291, 292, 294, 296, 299, 301, 302, 305, 307, 326, 327, 331, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 357, 698, 1025, 1026], "cmap_bold": [291, 294], "cmap_cv": 254, "cmap_data": 254, "cmap_light": [291, 294], "cmcsa": 10, "cmd": 378, "cmu": 900, "cname": 40, "cnb": 995, "cnp": 381, "cnx": 1044, "co": [2, 10, 12, 16, 18, 20, 37, 38, 68, 127, 129, 154, 164, 167, 198, 220, 259, 274, 319, 330, 351, 352, 353, 359, 384, 416, 418, 450, 452, 454, 489, 512, 592, 700, 720, 765, 796, 988, 1003, 1015, 1018, 1030, 1031], "co2": [148, 149, 156, 159, 164, 420, 497, 612, 616, 623, 624, 626, 1015, 1043], "co2_data": 154, "co2_kernel": 154, "coars": [2, 118, 386, 449, 462], "coarser": [118, 122], "coast": [9, 296], "coastlin": [9, 146, 296, 377], "coca": 10, "cock": [130, 1045], "cockburn": 1038, "coclust": [17, 406, 452, 514], "cocoa": 1018, "code": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 374, 378, 379, 381, 383, 384, 389, 392, 394, 395, 397, 400, 403, 405, 408, 409, 410, 417, 418, 443, 444, 448, 450, 460, 497, 527, 531, 532, 538, 539, 543, 544, 546, 547, 549, 567, 573, 582, 583, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 683, 684, 686, 687, 833, 834, 835, 872, 879, 961, 990, 994, 1003, 1005, 1007, 1008, 1013, 1014, 1015, 1017, 1018, 1021, 1029, 1036, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "code_book_": 835, "code_init": [532, 546], "code_s": [278, 835, 994], "codebas": [321, 362, 380, 381, 382, 418, 1036, 1042], "codebook": [46, 278, 567, 835], "codebook_random": 46, "codecov": 388, "codeofconduct": 380, "coder": [102, 543, 717], "codevig": 1042, "coef": [8, 52, 102, 166, 167, 176, 181, 184, 188, 189, 191, 196, 200, 201, 202, 206, 212, 213, 240, 272, 301, 321, 347, 525, 647, 648, 650, 653, 654, 660, 661, 662, 663, 664, 670, 673, 675, 681, 682, 683, 684, 685, 686, 687, 688, 997], "coef0": [173, 343, 345, 453, 536, 640, 641, 644, 776, 778, 907, 908, 909, 910, 911, 991, 1008], "coef_": [5, 8, 12, 52, 83, 142, 143, 146, 166, 167, 176, 179, 181, 182, 183, 187, 188, 189, 190, 191, 192, 193, 196, 200, 201, 202, 206, 212, 213, 234, 240, 272, 273, 312, 319, 337, 344, 347, 351, 362, 375, 382, 394, 413, 419, 466, 483, 484, 485, 550, 594, 595, 598, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 905, 906, 907, 908, 909, 910, 911, 977, 987, 989, 1007, 1008, 1027, 1036, 1038, 1041, 1043, 1048, 1050, 1053, 1054], "coef_agglomeration_": 52, "coef_en_lr": 188, "coef_i": 167, "coef_init": [647, 648, 653, 654, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 682, 685], "coef_l": 182, "coef_l1_lr": 188, "coef_l2_lr": 188, "coef_lasso_": 191, "coef_multi_task_lasso_": 191, "coef_p": 182, "coef_path": [654, 664, 685], "coef_path_": [651, 652, 655, 656, 989], "coef_path_continu": [654, 664, 685], "coef_path_lar": [654, 664, 685], "coef_pl": 182, "coef_ridg": 179, "coef_selection_": 52, "coeff": 681, "coeff_diff": 183, "coeffeci": 1045, "coeffici": [5, 8, 36, 47, 56, 58, 76, 77, 80, 93, 96, 136, 143, 149, 164, 165, 166, 171, 175, 179, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 199, 200, 212, 215, 216, 240, 259, 272, 273, 301, 312, 317, 318, 319, 343, 346, 351, 352, 353, 366, 376, 380, 382, 394, 396, 408, 412, 413, 415, 419, 420, 423, 433, 453, 466, 468, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485, 497, 525, 527, 528, 532, 536, 538, 540, 543, 544, 549, 553, 555, 557, 559, 561, 563, 566, 569, 571, 583, 590, 594, 598, 610, 612, 615, 628, 636, 637, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 702, 704, 717, 720, 730, 735, 739, 744, 751, 754, 776, 778, 786, 787, 789, 793, 794, 797, 816, 828, 831, 838, 839, 848, 856, 863, 866, 878, 885, 905, 906, 907, 908, 909, 910, 911, 914, 916, 984, 987, 989, 1007, 1008, 1015, 1027, 1036, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1053], "coefs_": [190, 301, 862, 863, 997, 1041], "coefs_cf": 312, "coefs_enet": 182, "coefs_lasso": 182, "coefs_no_cf": 312, "coefs_path": 660, "coefs_paths_": [660, 1046], "coefs_positive_enet": 182, "coefs_positive_lasso": 182, "coelho": [1037, 1039, 1040, 1044], "coelhudo": 1048, "cognit": [146, 377], "cohen": [717, 1044], "cohen_kappa_scor": [993, 1041, 1043], "coher": 410, "cohort": 133, "coin": [10, 12, 15, 19, 34, 37, 38, 39, 40, 42, 46, 51, 52, 60, 64, 65, 66, 96, 164, 410, 418, 442, 463, 1005, 1015, 1028], "coincid": [153, 199, 420], "col": [11, 17, 23, 25, 36, 40, 47, 53, 57, 61, 62, 68, 71, 115, 131, 154, 218, 236, 347, 512, 514], "col_compl": 17, "col_idx": 19, "col_idx_shuffl": 18, "col_ind": [425, 452, 454], "col_indic": 125, "col_nam": 11, "col_split": 11, "cola": 10, "cold": 283, "cole": 1045, "coleman": [1037, 1038], "colgat": [10, 15], "colin": [4, 375, 1042], "colin_powel": 1025, "colinear": 551, "collabor": 380, "collaps": [2, 168, 236, 305, 339, 392], "colleagu": 259, "collect": [5, 8, 10, 11, 17, 23, 71, 113, 125, 126, 133, 146, 154, 162, 170, 185, 190, 221, 229, 262, 266, 352, 353, 366, 375, 377, 384, 397, 408, 414, 415, 417, 418, 447, 465, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 570, 571, 582, 584, 585, 589, 590, 591, 592, 633, 730, 731, 739, 779, 784, 785, 788, 803, 807, 808, 810, 824, 951, 964, 967, 982, 988, 989, 993, 999, 1004, 1014, 1018, 1024, 1029, 1038, 1048], "colleg": [0, 166], "college_degre": 166, "collid": 418, "collier": 1029, "collin": 1039, "collinear": [167, 170, 202, 215, 417, 568, 649, 670, 681, 878, 989, 1036], "collis": [352, 353, 418, 583, 590], "collot": [1050, 1051], "colombia": [9, 296, 375, 499], "colon": 380, "coloni": 375, "color": [2, 4, 5, 6, 7, 8, 9, 10, 11, 18, 22, 23, 24, 25, 29, 31, 32, 34, 36, 38, 40, 42, 44, 45, 47, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 76, 77, 78, 79, 80, 84, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 109, 110, 115, 118, 119, 121, 124, 125, 126, 127, 128, 130, 132, 136, 138, 144, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 167, 169, 170, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 214, 215, 219, 220, 221, 223, 226, 230, 231, 232, 234, 237, 243, 244, 245, 246, 247, 248, 249, 253, 254, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 281, 285, 288, 289, 290, 291, 294, 295, 296, 299, 305, 306, 307, 309, 310, 311, 316, 322, 328, 329, 331, 337, 338, 339, 340, 341, 343, 345, 346, 347, 357, 358, 374, 375, 377, 388, 410, 417, 418, 448, 494, 495, 507, 584, 585, 780, 967, 1007, 1009, 1015, 1041, 1046, 1048, 1053], "color_continuous_scal": 260, "color_intens": 7, "color_it": [244, 248, 249], "color_map": 331, "color_palett": [35, 110, 125, 248], "colorbar": [2, 9, 28, 38, 93, 103, 117, 126, 144, 150, 152, 153, 155, 168, 218, 230, 247, 270, 305, 339, 698, 1048], "colorbarbas": 305, "colorblind": [35, 110, 125], "coloring_matrix": [76, 77], "colormap": [93, 111, 157, 189, 206, 339, 344, 357, 698, 1049], "colors_": 40, "colors_list": 115, "colour": [246, 377, 418, 588, 994], "colt": [727, 757, 993], "colton": 985, "columbia": 0, "column": [2, 11, 18, 19, 58, 67, 70, 73, 74, 88, 116, 118, 119, 122, 125, 127, 130, 146, 154, 161, 164, 166, 167, 168, 169, 170, 186, 197, 198, 201, 205, 215, 228, 235, 236, 237, 240, 248, 253, 259, 260, 270, 271, 273, 281, 301, 310, 311, 312, 317, 318, 319, 320, 322, 323, 351, 352, 353, 366, 374, 375, 377, 380, 382, 386, 389, 392, 393, 394, 406, 410, 411, 413, 415, 417, 418, 419, 422, 425, 452, 454, 465, 467, 468, 472, 473, 479, 488, 489, 490, 491, 492, 493, 495, 497, 501, 502, 503, 505, 506, 509, 510, 511, 512, 514, 516, 527, 532, 535, 538, 542, 543, 549, 556, 558, 559, 562, 563, 565, 566, 567, 568, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 628, 631, 633, 634, 635, 647, 649, 653, 659, 661, 663, 665, 666, 670, 681, 686, 687, 698, 714, 719, 720, 730, 731, 739, 755, 764, 769, 770, 771, 774, 784, 785, 788, 789, 801, 804, 805, 815, 826, 831, 836, 839, 840, 841, 842, 843, 844, 845, 846, 865, 869, 870, 871, 872, 878, 879, 880, 884, 885, 886, 887, 889, 890, 891, 895, 896, 905, 907, 910, 913, 915, 921, 925, 926, 931, 942, 956, 969, 970, 972, 980, 982, 983, 985, 989, 991, 993, 994, 1001, 1003, 1008, 1014, 1015, 1036, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "column_labels_": [18, 19, 406, 452, 454], "column_nam": 215, "column_or_1d": [389, 1047, 1051], "column_result": 260, "column_stack": [39, 299, 307], "column_to_drop": 167, "column_tran": [215, 411], "column_transform": 323, "columnar": [374, 465, 1013], "columns_": [17, 406, 425, 452, 454], "columns_to_drop": 253, "columntransform": [2, 68, 69, 130, 167, 168, 169, 197, 215, 228, 236, 238, 240, 311, 316, 318, 319, 320, 322, 372, 374, 392, 393, 400, 467, 468, 630, 870, 982, 983, 1014, 1031, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "columntransformercolumntransform": [69, 130, 167, 169, 228, 238, 311, 316, 319], "columntransformerinot": [130, 168], "columnwis": 415, "com": [5, 6, 9, 10, 13, 18, 19, 22, 40, 46, 55, 63, 68, 69, 107, 109, 110, 111, 112, 113, 114, 121, 123, 124, 129, 130, 149, 152, 154, 156, 158, 162, 177, 199, 204, 214, 219, 221, 223, 229, 243, 245, 246, 260, 263, 283, 305, 306, 309, 310, 351, 352, 374, 375, 378, 380, 384, 385, 386, 388, 392, 397, 405, 410, 443, 453, 463, 509, 535, 537, 542, 672, 692, 696, 706, 996, 1011, 1041, 1043, 1046], "coma": 1018, "comaniciu": [61, 410, 449], "comapar": 410, "comb": 1050, "combat": [299, 415], "combin": [2, 10, 11, 18, 23, 25, 59, 68, 69, 71, 72, 73, 88, 93, 101, 102, 108, 110, 119, 120, 124, 125, 133, 134, 149, 155, 161, 162, 164, 167, 181, 197, 201, 214, 215, 222, 226, 228, 231, 236, 255, 259, 260, 268, 270, 271, 292, 300, 311, 317, 318, 320, 342, 343, 353, 357, 366, 372, 376, 377, 380, 385, 393, 394, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 420, 422, 423, 446, 465, 467, 468, 474, 476, 477, 480, 481, 482, 490, 497, 509, 510, 516, 522, 525, 527, 532, 538, 539, 541, 543, 548, 550, 561, 563, 566, 568, 569, 611, 615, 617, 622, 625, 631, 635, 644, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 667, 669, 673, 674, 675, 676, 677, 679, 680, 682, 685, 693, 702, 731, 789, 801, 804, 805, 812, 813, 826, 828, 832, 849, 864, 865, 866, 870, 878, 879, 880, 885, 905, 967, 982, 985, 986, 989, 993, 994, 996, 999, 1003, 1006, 1007, 1009, 1010, 1015, 1018, 1025, 1027, 1029, 1036, 1041, 1044, 1047, 1048, 1049, 1051, 1052], "combinator": 811, "combined_featur": 72, "combsccod": 1050, "comcast": 10, "come": [47, 65, 68, 78, 84, 98, 146, 149, 231, 273, 315, 351, 352, 366, 368, 373, 377, 380, 381, 384, 388, 392, 394, 397, 403, 409, 410, 414, 417, 418, 440, 451, 457, 473, 551, 706, 796, 822, 907, 910, 982, 983, 987, 990, 992, 996, 999, 1008, 1020, 1036, 1047, 1050, 1052], "comedi": 876, "comfort": [53, 417], "command": [230, 366, 367, 378, 380, 384, 386, 388, 397, 418, 509, 1013, 1029, 1038], "comment": [44, 351, 378, 379, 380, 381, 383, 384, 388, 488, 580, 993], "commerc": 1018, "commerci": [414, 1018], "commit": [380, 384, 388, 1017, 1036, 1037, 1038, 1039], "committ": [380, 1036], "commod": 993, "common": [11, 13, 15, 17, 96, 143, 146, 164, 165, 166, 171, 193, 201, 202, 254, 259, 266, 278, 317, 343, 351, 353, 360, 366, 369, 374, 380, 382, 388, 390, 392, 393, 396, 400, 406, 407, 408, 410, 411, 414, 416, 419, 420, 448, 466, 468, 497, 591, 633, 654, 673, 674, 702, 747, 754, 770, 802, 803, 806, 816, 818, 819, 820, 821, 822, 828, 831, 866, 868, 876, 877, 878, 883, 885, 890, 891, 893, 894, 895, 896, 944, 982, 983, 989, 996, 999, 1003, 1008, 1009, 1013, 1014, 1015, 1018, 1020, 1031, 1036, 1044, 1046, 1047, 1051], "common_nod": 360, "common_node_id": 360, "common_param": [55, 122, 125, 168, 232, 261, 262, 343], "commonli": [197, 256, 343, 373, 394, 410, 411, 420, 615, 759, 760, 798, 834, 877, 990, 991, 993, 994, 996, 1052], "commun": [233, 373, 379, 385, 388, 394, 395, 410, 417, 539, 541, 548, 693, 711, 877, 983, 990, 996, 1003, 1007, 1011, 1013, 1017, 1018, 1044, 1045], "commut": [2, 11], "comp": [17, 83, 84, 96, 103, 302, 330, 351, 352, 353, 375, 1029], "comp_cov": [470, 471, 472, 473, 474, 475, 476, 477], "compact": [146, 173, 305, 366, 377, 845, 846, 1009, 1038], "compani": [197, 215, 409, 410, 1018], "companion": [380, 1003], "companioni": 1036, "compar": [2, 3, 7, 11, 17, 18, 19, 22, 23, 25, 32, 34, 35, 37, 38, 39, 41, 45, 47, 50, 52, 53, 55, 56, 59, 62, 65, 66, 69, 70, 71, 72, 78, 79, 82, 84, 85, 89, 90, 96, 100, 102, 108, 109, 110, 112, 114, 118, 119, 120, 122, 124, 125, 126, 128, 130, 133, 134, 137, 146, 153, 161, 162, 164, 167, 168, 169, 170, 175, 177, 179, 181, 185, 186, 192, 194, 197, 198, 200, 201, 203, 205, 207, 211, 214, 215, 216, 218, 219, 222, 225, 228, 231, 234, 236, 237, 238, 239, 241, 245, 246, 251, 253, 254, 256, 257, 258, 260, 262, 264, 266, 268, 270, 271, 274, 276, 278, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 297, 298, 301, 303, 304, 306, 309, 310, 312, 313, 317, 343, 351, 352, 353, 359, 360, 362, 368, 375, 377, 380, 382, 403, 406, 407, 409, 410, 412, 413, 414, 415, 417, 419, 420, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 459, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 491, 497, 503, 505, 513, 515, 523, 525, 529, 532, 538, 540, 542, 546, 547, 552, 553, 562, 563, 564, 565, 566, 572, 632, 640, 645, 646, 654, 656, 658, 659, 664, 667, 669, 677, 678, 685, 696, 706, 713, 716, 732, 739, 744, 787, 799, 801, 806, 815, 828, 831, 838, 847, 851, 854, 858, 862, 863, 865, 866, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 905, 906, 907, 909, 910, 982, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1003, 1004, 1007, 1008, 1009, 1012, 1013, 1015, 1027, 1028, 1036, 1038, 1043, 1044, 1049], "comparison": [10, 12, 17, 21, 22, 23, 24, 26, 27, 31, 33, 34, 36, 38, 40, 46, 48, 55, 56, 57, 58, 59, 61, 66, 68, 77, 88, 92, 94, 95, 97, 99, 103, 104, 109, 112, 115, 122, 125, 128, 132, 133, 140, 142, 147, 148, 154, 155, 156, 158, 159, 164, 169, 179, 181, 183, 185, 188, 195, 197, 201, 212, 215, 217, 220, 221, 222, 223, 224, 225, 229, 230, 241, 245, 251, 253, 254, 255, 256, 263, 267, 271, 273, 276, 281, 292, 299, 307, 309, 310, 312, 315, 317, 330, 331, 336, 345, 350, 351, 352, 354, 362, 375, 377, 394, 407, 410, 412, 413, 415, 419, 420, 438, 439, 444, 447, 448, 450, 483, 484, 485, 489, 505, 513, 515, 516, 523, 526, 536, 542, 550, 551, 554, 565, 566, 582, 583, 589, 590, 591, 592, 607, 609, 611, 612, 616, 623, 626, 632, 640, 644, 660, 673, 689, 690, 691, 692, 693, 705, 739, 744, 780, 789, 801, 802, 803, 804, 806, 807, 815, 817, 818, 819, 820, 821, 822, 831, 840, 843, 847, 862, 863, 866, 878, 879, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 905, 907, 908, 910, 911, 913, 982, 986, 987, 990, 993, 995, 996, 999, 1008, 1015, 1033], "compat": [233, 262, 283, 316, 374, 383, 389, 390, 392, 394, 397, 400, 403, 418, 464, 470, 509, 567, 578, 590, 604, 615, 616, 619, 620, 621, 623, 624, 633, 634, 635, 659, 660, 674, 676, 775, 779, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 849, 850, 865, 870, 878, 879, 917, 918, 921, 956, 990, 996, 998, 1013, 1014, 1018, 1031, 1036, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "compens": [79, 166, 168, 173, 197, 215, 260, 412, 415], "compet": [2, 167], "competit": [2, 122, 351, 417, 645, 996], "compil": [130, 283, 353, 366, 367, 381, 382, 383, 388, 389, 392, 1013, 1036], "compl": 56, "complement": [168, 269, 351, 633, 634, 803, 818, 821, 831, 840, 841, 842, 843, 844, 1000, 1016, 1031, 1044], "complementari": [2, 418], "complementnb": [260, 351, 840, 841, 843, 844, 995, 1044, 1048, 1049, 1051], "complementnbcomplementnb": 260, "complet": [0, 2, 35, 36, 37, 42, 47, 48, 50, 56, 60, 84, 125, 128, 141, 143, 146, 164, 169, 170, 203, 225, 226, 233, 236, 241, 253, 257, 310, 312, 315, 352, 362, 375, 380, 384, 385, 388, 392, 411, 414, 415, 417, 418, 442, 446, 450, 453, 463, 464, 465, 468, 496, 537, 538, 539, 540, 545, 547, 559, 570, 571, 582, 588, 589, 590, 592, 628, 629, 630, 631, 646, 650, 658, 672, 674, 705, 706, 716, 717, 718, 730, 732, 737, 738, 758, 787, 796, 833, 836, 839, 848, 864, 865, 866, 867, 928, 978, 982, 987, 989, 993, 994, 996, 1008, 1009, 1015, 1020, 1029, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "completed_fac": 235, "completeness_scor": [36, 47, 56, 316, 352, 410, 737, 738, 796, 993], "complex": [1, 7, 8, 13, 14, 18, 70, 115, 130, 145, 149, 154, 161, 164, 201, 211, 214, 225, 232, 233, 236, 241, 251, 257, 260, 263, 268, 276, 306, 315, 318, 319, 323, 325, 332, 339, 343, 353, 355, 360, 361, 376, 380, 385, 392, 410, 411, 415, 417, 421, 441, 445, 448, 449, 451, 468, 490, 501, 502, 503, 515, 535, 542, 552, 558, 559, 560, 561, 563, 565, 566, 605, 631, 639, 657, 659, 677, 678, 735, 751, 801, 831, 833, 861, 865, 866, 870, 878, 885, 901, 905, 908, 911, 913, 914, 915, 916, 982, 983, 985, 986, 988, 990, 992, 994, 999, 1003, 1006, 1014, 1015, 1016, 1018, 1031, 1037, 1039, 1045, 1046, 1049], "complexity_comput": [5, 8], "complexity_label": [5, 8], "compli": [380, 394, 936, 1014], "complianc": [0, 125], "compliant": [320, 380, 1054, 1055], "complic": [25, 233, 299, 386, 420, 695, 996], "compon": [2, 3, 15, 31, 42, 56, 60, 68, 71, 82, 83, 85, 88, 94, 95, 97, 98, 99, 100, 101, 103, 128, 137, 154, 162, 164, 166, 181, 218, 230, 231, 234, 243, 244, 247, 248, 249, 258, 260, 284, 285, 286, 294, 295, 297, 302, 310, 317, 366, 372, 375, 380, 382, 386, 389, 392, 403, 405, 408, 410, 411, 413, 418, 420, 422, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 503, 505, 516, 522, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 798, 799, 800, 801, 804, 805, 815, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 941, 942, 985, 990, 992, 1003, 1005, 1008, 1013, 1014, 1015, 1016, 1018, 1023, 1029, 1030, 1031, 1036, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "component_1": 248, "component_2": 248, "component_indices_": [640, 1049], "components_": [4, 13, 56, 84, 93, 95, 96, 103, 230, 231, 302, 310, 319, 394, 411, 415, 445, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 640, 854, 861, 897, 898, 985, 1005, 1025, 1040, 1042, 1048, 1051, 1054], "components_col": 71, "compos": [2, 3, 23, 67, 68, 69, 73, 74, 84, 111, 119, 130, 164, 167, 168, 169, 197, 199, 215, 228, 236, 238, 240, 273, 278, 311, 316, 318, 319, 320, 322, 323, 369, 393, 400, 410, 411, 414, 516, 554, 613, 992, 994, 1015, 1036], "composit": [228, 316, 369, 372, 414, 659, 789, 983, 989, 1002, 1031, 1037], "compound": [2, 215, 418, 611, 613, 681, 725, 753, 989, 1029], "compoundkernel": [611, 1050], "comprehens": [343, 418, 759, 760, 991, 1018, 1044], "compress": [1, 9, 14, 15, 46, 64, 164, 278, 305, 375, 403, 410, 415, 418, 419, 653, 673, 693, 835, 878, 964, 967, 979, 989, 1003, 1015, 1028, 1036, 1045], "compressed_raccoon_kmean": 51, "compressed_raccoon_uniform": 51, "compris": [68, 122, 257, 351, 352, 353, 375, 392, 415, 417, 516, 808, 990], "compromis": [7, 25, 168, 366, 380, 648, 680, 996, 1039], "comput": [0, 2, 4, 5, 9, 11, 12, 18, 24, 35, 37, 39, 40, 44, 50, 52, 55, 56, 58, 59, 68, 70, 77, 78, 79, 80, 94, 102, 112, 116, 117, 120, 121, 122, 123, 124, 125, 145, 146, 149, 154, 156, 157, 161, 167, 168, 169, 170, 173, 177, 178, 181, 182, 183, 184, 185, 186, 197, 199, 201, 205, 211, 214, 215, 219, 222, 227, 229, 230, 232, 236, 237, 239, 253, 255, 257, 259, 260, 261, 262, 266, 268, 270, 283, 285, 287, 289, 290, 292, 293, 296, 305, 315, 319, 320, 323, 327, 329, 339, 343, 346, 351, 352, 353, 360, 367, 368, 369, 374, 375, 377, 380, 385, 386, 387, 389, 392, 393, 394, 396, 397, 403, 404, 405, 406, 407, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 458, 460, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 517, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 583, 586, 587, 590, 591, 592, 594, 595, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 726, 727, 728, 730, 731, 732, 735, 737, 739, 740, 741, 743, 744, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 870, 871, 874, 875, 880, 881, 882, 883, 884, 885, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 907, 910, 912, 913, 914, 915, 916, 939, 940, 941, 942, 958, 959, 966, 968, 974, 982, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1024, 1025, 1028, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "computation": [12, 76, 93, 115, 121, 130, 149, 283, 343, 351, 365, 381, 392, 408, 410, 411, 414, 415, 417, 420, 539, 633, 634, 672, 764, 801, 803, 804, 805, 815, 828, 989, 990, 992, 1000, 1001, 1005, 1028, 1031, 1040], "compute_class_weight": [394, 1039, 1050], "compute_corrected_ttest": 259, "compute_dist": [442, 446, 1048], "compute_full_tre": [442, 446, 1040], "compute_import": 1038, "compute_inverse_compon": [897, 898, 1005], "compute_inverse_transform": 1050, "compute_label": [443, 450], "compute_node_depth": 360, "compute_optics_graph": [456, 457, 1053], "compute_sample_weight": 1050, "compute_scor": [73, 100, 176, 177, 645, 646, 1045], "compute_sourc": 422, "computed_scor": 646, "con": 590, "concat": [2, 161, 166, 186, 215, 878], "concaten": [24, 32, 37, 48, 59, 67, 70, 74, 79, 111, 126, 142, 157, 164, 173, 176, 179, 189, 211, 212, 219, 226, 243, 247, 248, 255, 264, 265, 266, 267, 268, 269, 288, 302, 309, 312, 327, 338, 342, 351, 411, 465, 468, 505, 510, 532, 538, 542, 543, 600, 782, 801, 864, 865, 867, 870, 878, 910, 994, 1015, 1024, 1028, 1037], "concav": [146, 323, 377], "concentr": [5, 7, 63, 90, 98, 109, 128, 154, 162, 164, 223, 242, 244, 249, 250, 270, 293, 307, 328, 376, 380, 417, 444, 520, 798, 992, 999, 1015], "concentrations_prior": 243, "concept": [79, 115, 120, 233, 268, 369, 380, 392, 408, 410, 416, 418, 985, 993, 996, 1009, 1018], "conceptu": [377, 417, 991], "concern": [16, 34, 75, 82, 86, 92, 105, 108, 140, 148, 160, 164, 172, 175, 217, 242, 248, 253, 277, 280, 284, 298, 304, 325, 334, 350, 355, 366, 382, 403, 408, 990, 1005], "concis": [25, 197, 380, 385, 1047, 1049], "conclud": [109, 167, 177, 215, 259, 353, 362, 395, 865], "conclus": [2, 98, 167, 169, 197, 199, 259, 261, 362, 417, 1023], "concomit": [650, 989], "concret": [201, 381, 395, 409, 419, 669, 675, 676, 677, 678, 897, 898, 989, 1007, 1013], "concurr": [394, 418, 959, 1048, 1050], "conda": [315, 316, 317, 318, 319, 320, 321, 322, 323, 367, 380, 381, 383, 384, 386, 388, 397, 402, 403, 1009], "conda_prefix": 386, "condarc": 378, "condens": [173, 447], "condit": [2, 10, 11, 23, 25, 80, 117, 122, 127, 164, 165, 167, 171, 186, 199, 202, 215, 233, 237, 262, 318, 360, 386, 392, 396, 406, 407, 409, 410, 412, 415, 417, 419, 452, 465, 472, 473, 474, 479, 497, 514, 524, 525, 537, 540, 541, 542, 544, 546, 548, 550, 551, 563, 628, 633, 634, 644, 651, 652, 653, 655, 656, 657, 671, 673, 674, 675, 676, 683, 684, 688, 698, 713, 718, 719, 737, 738, 796, 840, 841, 842, 843, 844, 863, 866, 869, 878, 879, 882, 886, 942, 965, 987, 989, 990, 991, 993, 995, 996, 998, 1003, 1009, 1013, 1015, 1027, 1031, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1054], "condition": [10, 25, 197, 407, 412, 759, 987], "condition2": 130, "conduct": [166, 259, 420, 1017, 1050], "conf": [5, 25, 384, 407, 414, 840, 995, 1050], "confer": [253, 259, 375, 410, 415, 421, 440, 445, 451, 512, 536, 564, 697, 709, 727, 757, 861, 862, 863, 993, 999, 1005, 1009], "confid": [11, 22, 23, 24, 25, 125, 154, 156, 244, 259, 262, 329, 395, 407, 420, 637, 659, 660, 667, 669, 672, 675, 676, 677, 699, 703, 708, 721, 727, 728, 740, 741, 757, 790, 833, 872, 905, 907, 910, 989, 992, 993, 994, 999, 1006, 1007, 1008, 1018, 1029, 1046], "config": [11, 367, 378, 380, 381, 388, 627, 1044], "config_context": [240, 366, 367, 405, 627, 903, 1043, 1049, 1052], "configur": [5, 8, 25, 69, 70, 168, 233, 238, 240, 273, 312, 351, 365, 378, 380, 382, 386, 388, 392, 394, 397, 400, 405, 408, 411, 418, 419, 434, 443, 444, 446, 448, 450, 453, 463, 465, 469, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 627, 628, 629, 630, 631, 633, 636, 639, 640, 641, 642, 643, 689, 690, 691, 692, 693, 695, 696, 789, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 959, 960, 961, 990, 993, 1003, 1008, 1013, 1029, 1031, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "confirm": [2, 11, 84, 112, 119, 122, 125, 169, 197, 199, 253, 262, 265, 268, 310, 353, 384, 982, 1003, 1044], "conflict": [378, 380, 384, 388, 397, 1043, 1044], "conform": [11, 582, 629, 833, 834, 993, 1013, 1014, 1043, 1049], "confound": [166, 167], "confus": [30, 164, 227, 251, 253, 268, 276, 323, 326, 327, 351, 394, 469, 505, 632, 653, 698, 714, 716, 719, 730, 731, 739, 755, 785, 788, 831, 903, 910, 1015, 1029, 1036, 1037, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "confusingli": 378, "confusion_matrix": [30, 227, 252, 253, 323, 326, 327, 698, 714, 755, 800, 828, 993, 1029, 1037, 1042, 1043, 1046, 1047, 1049, 1053], "confusion_matrix_scor": 993, "confusionmatrixdisplai": [4, 30, 252, 318, 326, 351, 632, 719, 993, 1025, 1046, 1047, 1049, 1050, 1051], "congruenc": [655, 656, 657, 683, 684], "conjug": [259, 453, 463, 673, 675, 688, 696, 989], "conjunct": [400, 410, 595, 807, 823, 824, 826, 827, 828, 829, 832, 960, 983, 989, 1051], "connect": [10, 37, 42, 45, 49, 52, 60, 64, 65, 378, 380, 389, 394, 412, 442, 446, 453, 463, 464, 586, 587, 696, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 991, 996, 998, 1006, 1017, 1040, 1049, 1053], "connected_compon": 1043, "connectionist": [862, 863], "conner": 1049, "connor": [1044, 1049, 1053], "connossor": [1044, 1045], "conocophillip": 10, "conort": 1018, "conquer": 942, "conrad": [1036, 1037, 1051], "conroi": 1051, "consecut": [109, 120, 198, 392, 407, 414, 418, 444, 448, 450, 451, 453, 457, 460, 463, 538, 539, 540, 547, 603, 646, 667, 668, 669, 677, 678, 679, 798, 799, 806, 840, 841, 842, 843, 844, 862, 863, 982, 1003, 1029, 1044], "consensu": [18, 19, 35, 379, 380, 395, 406, 410, 650, 672, 679, 680, 720, 993], "consensus_scor": [18, 19, 406, 1038], "consequ": [55, 100, 215, 259, 260, 305, 336, 362, 407, 409, 415, 417, 562, 563, 567, 656, 657, 983, 989, 993, 1001, 1009, 1045, 1047, 1052, 1054], "conserv": [9, 394, 583, 590, 897, 898, 992, 1005], "consid": [0, 2, 10, 11, 12, 18, 23, 37, 53, 64, 69, 79, 88, 93, 97, 119, 122, 141, 145, 146, 162, 168, 197, 199, 233, 253, 259, 262, 266, 270, 273, 283, 286, 289, 290, 305, 317, 336, 343, 344, 346, 351, 362, 366, 367, 368, 372, 379, 380, 382, 386, 388, 392, 394, 395, 400, 403, 405, 409, 410, 415, 416, 417, 418, 419, 420, 421, 422, 439, 445, 447, 451, 458, 475, 509, 510, 522, 534, 542, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 586, 587, 589, 590, 592, 594, 608, 609, 621, 632, 633, 634, 647, 653, 659, 660, 661, 663, 672, 680, 689, 690, 691, 693, 694, 695, 697, 701, 703, 706, 708, 710, 716, 727, 731, 735, 757, 787, 789, 795, 847, 848, 849, 851, 853, 855, 856, 857, 860, 862, 863, 868, 878, 879, 886, 900, 901, 910, 911, 913, 914, 915, 916, 977, 982, 988, 989, 990, 991, 993, 994, 996, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1014, 1020, 1027, 1039, 1040, 1044, 1048, 1049, 1051, 1052, 1053], "consider": [124, 125, 150, 153, 236, 254, 260, 266, 380, 409, 420, 620, 801, 815, 823, 982, 989, 995, 999, 1007, 1018, 1053], "consist": [2, 5, 24, 30, 35, 54, 55, 68, 78, 88, 90, 93, 115, 119, 125, 126, 133, 146, 152, 154, 157, 162, 170, 197, 215, 232, 236, 265, 268, 301, 310, 315, 318, 346, 352, 362, 366, 373, 375, 377, 380, 382, 386, 387, 388, 389, 393, 394, 395, 407, 410, 412, 416, 417, 418, 428, 429, 432, 433, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 491, 498, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 592, 612, 628, 629, 630, 631, 636, 639, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 678, 679, 680, 688, 689, 690, 691, 692, 701, 736, 798, 799, 808, 833, 834, 835, 837, 838, 839, 840, 848, 849, 851, 853, 856, 857, 863, 868, 869, 870, 872, 876, 877, 880, 881, 883, 884, 886, 897, 898, 901, 905, 906, 908, 909, 911, 914, 916, 925, 927, 948, 964, 967, 982, 985, 986, 987, 989, 990, 992, 993, 994, 996, 997, 1003, 1006, 1008, 1009, 1012, 1014, 1018, 1020, 1027, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "consol": [118, 378, 1021], "consolid": [0, 394, 395, 1036], "consolidate_scor": 11, "consortium": [0, 1018], "constant": [2, 102, 112, 125, 152, 156, 162, 167, 185, 198, 199, 201, 215, 228, 233, 238, 262, 295, 300, 302, 306, 308, 316, 346, 348, 362, 372, 382, 389, 394, 406, 417, 420, 433, 447, 466, 483, 484, 485, 512, 514, 535, 539, 541, 548, 550, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 591, 607, 610, 612, 614, 628, 631, 633, 634, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 688, 690, 694, 696, 722, 724, 725, 729, 733, 776, 778, 786, 800, 823, 838, 839, 848, 856, 862, 863, 870, 881, 884, 893, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 985, 987, 989, 990, 993, 995, 996, 1003, 1007, 1009, 1031, 1039, 1044, 1046, 1048, 1049, 1050, 1052, 1054], "constant_": 553, "constant_valu": [420, 614, 618], "constant_value_bound": [420, 612, 614, 618], "constantini": 1052, "constantkernel": [152, 158, 420, 612, 618, 622, 625], "constantli": [35, 197, 1018], "constitu": 377, "constitut": [48, 394, 414, 417, 451, 457, 589, 590, 592, 997], "constrain": [45, 93, 119, 125, 127, 168, 188, 299, 316, 322, 337, 339, 373, 394, 408, 410, 415, 417, 510, 562, 563, 636, 659, 660, 691, 695, 823, 830, 989, 992, 1040], "constrained_layout": [93, 168, 218, 311, 312, 320], "constraint": [53, 55, 65, 93, 108, 134, 164, 192, 201, 236, 237, 254, 300, 301, 302, 316, 380, 392, 415, 418, 488, 509, 510, 558, 559, 562, 563, 565, 566, 633, 636, 819, 820, 913, 914, 915, 916, 962, 982, 984, 989, 990, 1007, 1015, 1040, 1043, 1044, 1047, 1049, 1051, 1053], "constru": 418, "construct": [2, 9, 68, 70, 109, 111, 113, 117, 130, 146, 215, 227, 233, 238, 240, 296, 306, 308, 316, 319, 374, 377, 382, 389, 394, 410, 411, 414, 415, 417, 418, 421, 435, 442, 443, 445, 446, 451, 453, 458, 464, 466, 468, 520, 536, 542, 545, 556, 557, 582, 588, 640, 689, 691, 692, 815, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 864, 865, 866, 867, 869, 910, 924, 926, 941, 942, 952, 956, 982, 983, 985, 989, 990, 993, 994, 996, 1003, 1006, 1008, 1009, 1014, 1020, 1024, 1041, 1043, 1044, 1047, 1050], "construct_grid": [9, 296], "constructor": [70, 229, 367, 382, 394, 408, 411, 418, 465, 468, 550, 551, 556, 568, 569, 570, 571, 582, 583, 589, 590, 598, 669, 677, 678, 847, 848, 849, 851, 853, 855, 856, 857, 864, 865, 866, 867, 961, 982, 994, 1003, 1008, 1014, 1020, 1036, 1037, 1039, 1040, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "consult": 993, "consum": [93, 362, 374, 382, 394, 400, 410, 414, 417, 450, 804, 805, 865, 866, 949, 950, 989, 1018, 1041, 1053], "consumpt": [6, 366, 394, 410, 535, 558, 559, 565, 566, 801, 815, 826, 827, 828, 913, 914, 915, 916, 959, 1020, 1036, 1038, 1042, 1044, 1045, 1050], "contact": [309, 392, 1013], "contain": [8, 17, 22, 25, 31, 38, 47, 54, 56, 68, 69, 111, 113, 117, 125, 126, 155, 167, 168, 170, 173, 188, 201, 215, 226, 233, 236, 237, 240, 248, 253, 257, 259, 265, 268, 269, 281, 289, 290, 292, 305, 318, 327, 330, 351, 352, 373, 374, 375, 377, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 403, 405, 407, 408, 410, 411, 413, 414, 415, 417, 418, 419, 420, 422, 424, 434, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 501, 503, 504, 505, 509, 510, 511, 515, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 697, 698, 699, 701, 702, 703, 710, 713, 736, 737, 738, 773, 780, 781, 789, 795, 798, 799, 800, 801, 804, 805, 807, 815, 819, 820, 823, 824, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925, 926, 945, 946, 948, 949, 956, 960, 962, 982, 983, 985, 991, 994, 997, 999, 1001, 1003, 1004, 1006, 1009, 1013, 1017, 1020, 1029, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "container": 403, "container_fold": 504, "container_path": 504, "contamin": [7, 78, 79, 226, 236, 289, 290, 470, 564, 851, 999, 1044, 1052, 1053], "content": [15, 310, 351, 353, 375, 380, 384, 386, 403, 408, 418, 487, 504, 509, 510, 589, 590, 592, 672, 919, 1002, 1018, 1029, 1037, 1046], "context": [56, 240, 253, 283, 366, 367, 374, 379, 381, 393, 394, 410, 411, 416, 417, 418, 420, 421, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 469, 473, 532, 536, 537, 538, 540, 543, 544, 545, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 627, 628, 631, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 864, 867, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 961, 983, 989, 993, 999, 1003, 1007, 1014, 1017, 1018, 1027, 1036, 1043, 1044, 1049, 1052], "contigu": [2, 19, 382, 392, 406, 414, 418, 444, 448, 450, 460, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 782, 820, 845, 846, 905, 907, 908, 909, 910, 911, 1008, 1039, 1046, 1050, 1054], "contin": [416, 715, 1003], "conting": [715, 716, 732, 756, 1042], "contingency_matrix": [410, 756, 1044], "continu": [0, 11, 15, 17, 40, 73, 90, 119, 149, 164, 168, 177, 198, 205, 215, 219, 222, 236, 237, 239, 244, 248, 249, 293, 301, 304, 310, 311, 313, 317, 318, 358, 360, 367, 375, 378, 382, 383, 384, 385, 388, 392, 394, 395, 397, 410, 415, 417, 469, 493, 593, 596, 597, 600, 601, 608, 609, 610, 633, 647, 648, 653, 654, 658, 661, 662, 663, 664, 727, 743, 757, 813, 815, 868, 870, 872, 874, 875, 884, 885, 886, 902, 903, 914, 956, 982, 989, 990, 993, 994, 996, 997, 1003, 1009, 1014, 1015, 1018, 1020, 1027, 1033, 1036, 1038, 1039, 1044, 1049, 1050, 1051, 1053], "continuous_featur": 385, "contour": [7, 9, 32, 44, 45, 78, 118, 138, 146, 152, 153, 155, 208, 209, 210, 211, 226, 231, 247, 289, 296, 337, 338, 340, 341, 343, 344, 377, 387, 632, 633, 999, 1007], "contour_kw": 633, "contourf": [9, 118, 211, 231, 289, 296, 299, 307, 308, 331, 338, 344, 348, 632, 633], "contours_": [387, 633], "contract": [197, 215, 343, 367, 394, 1014], "contradict": [170, 1014], "contrari": [2, 12, 167, 219, 223, 236, 243, 262, 305, 351, 374, 410, 497, 545, 607, 818, 886, 989, 995, 999], "contrast": [101, 168, 199, 232, 236, 259, 261, 292, 310, 352, 394, 407, 410, 413, 417, 420, 450, 453, 463, 620, 644, 815, 861, 983, 986, 988, 989, 993, 996, 998, 1001, 1003, 1006, 1007, 1009, 1046], "contrib": [321, 380, 382, 388, 392, 394, 410, 447, 1013, 1014, 1052], "contribut": [0, 12, 18, 123, 154, 181, 201, 268, 310, 369, 377, 378, 382, 383, 384, 388, 394, 395, 397, 415, 416, 417, 448, 450, 554, 555, 560, 561, 727, 730, 757, 987, 993, 996, 1001, 1008, 1011, 1013, 1014, 1017, 1018, 1027, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "contributor": [367, 383, 384, 385, 388, 392, 394, 993, 1011, 1014, 1037, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "control": [10, 32, 59, 97, 98, 115, 136, 154, 156, 181, 198, 201, 205, 229, 230, 260, 262, 278, 285, 302, 316, 318, 343, 356, 358, 359, 366, 367, 373, 376, 380, 382, 385, 388, 392, 394, 397, 408, 409, 410, 413, 414, 415, 416, 419, 420, 435, 441, 450, 455, 472, 473, 479, 532, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 594, 595, 597, 615, 620, 626, 628, 633, 635, 640, 642, 643, 647, 648, 650, 651, 652, 653, 655, 656, 657, 673, 675, 677, 678, 683, 684, 688, 693, 702, 710, 798, 799, 801, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 831, 832, 835, 836, 839, 862, 863, 884, 886, 897, 898, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 919, 959, 961, 980, 982, 989, 990, 992, 993, 994, 996, 999, 1000, 1003, 1005, 1007, 1008, 1009, 1013, 1014, 1016, 1027, 1031, 1036, 1038, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "convei": [29, 223, 307, 1027], "conveni": [53, 201, 236, 372, 388, 392, 411, 414, 418, 420, 425, 444, 448, 450, 452, 454, 465, 490, 612, 677, 679, 700, 729, 786, 864, 865, 967, 983, 985, 989, 990, 1000, 1018, 1029, 1036], "convent": [107, 125, 253, 259, 369, 380, 382, 383, 384, 386, 394, 405, 428, 429, 432, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 473, 474, 475, 476, 477, 509, 510, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 548, 564, 567, 570, 571, 582, 583, 584, 589, 590, 592, 628, 629, 630, 631, 678, 689, 690, 691, 692, 719, 798, 799, 833, 834, 849, 851, 853, 857, 869, 877, 880, 881, 883, 886, 897, 898, 909, 936, 937, 993, 1021, 1036, 1043, 1044, 1047, 1049, 1050, 1052, 1053], "convention": [337, 394, 901], "converg": [15, 55, 59, 76, 77, 120, 122, 125, 149, 155, 158, 190, 199, 205, 213, 244, 246, 300, 301, 305, 310, 327, 368, 389, 394, 406, 410, 415, 418, 420, 422, 441, 444, 447, 448, 449, 450, 453, 455, 460, 461, 462, 463, 472, 473, 479, 483, 484, 485, 534, 536, 537, 538, 539, 540, 547, 554, 572, 611, 645, 646, 647, 648, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 673, 675, 677, 679, 683, 684, 688, 689, 691, 692, 695, 696, 798, 799, 854, 862, 863, 900, 901, 907, 983, 988, 989, 990, 992, 997, 1007, 1036, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "converged_": [798, 799, 1054], "convergence_it": [441, 455], "convergencewarn": [153, 155, 157, 158, 205, 212, 244, 300, 301, 307, 389, 394, 798, 799, 1044, 1045, 1048], "convers": [15, 122, 188, 351, 362, 368, 374, 380, 382, 388, 392, 394, 403, 418, 573, 860, 869, 877, 925, 926, 979, 990, 1014, 1018, 1044, 1045, 1046, 1049, 1052], "convert": [11, 15, 32, 44, 46, 64, 69, 96, 154, 170, 197, 218, 236, 239, 244, 245, 248, 249, 273, 296, 323, 366, 374, 375, 389, 392, 394, 403, 418, 441, 444, 445, 448, 450, 451, 452, 453, 460, 465, 466, 497, 535, 542, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 582, 583, 589, 590, 591, 592, 594, 595, 607, 628, 629, 630, 631, 647, 653, 659, 660, 661, 663, 667, 668, 669, 671, 675, 677, 678, 679, 693, 779, 800, 823, 860, 869, 870, 872, 876, 878, 879, 880, 882, 905, 913, 914, 915, 916, 923, 925, 926, 948, 978, 979, 982, 989, 990, 991, 993, 1003, 1004, 1008, 1009, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1051, 1052, 1053], "convex": [77, 102, 121, 122, 164, 175, 204, 216, 218, 347, 352, 410, 412, 415, 423, 447, 453, 463, 474, 476, 477, 480, 481, 482, 659, 677, 693, 989, 990, 996, 997, 1007, 1015, 1049], "convinc": 167, "convolut": [4, 157, 1025], "convolv": 302, "coo": [394, 554, 555, 693, 872, 921, 925, 926, 996, 1037, 1053], "coo_matrix": [12, 183, 453, 586, 587, 964, 967], "cook": [377, 495, 1036, 1042], "cookbook": [420, 623, 624], "cool": [418, 1036], "coolwarm": [254, 336], "cooman": 377, "coordin": [9, 10, 12, 52, 98, 129, 153, 182, 218, 260, 296, 366, 375, 415, 420, 444, 448, 449, 450, 462, 472, 473, 479, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 551, 615, 647, 648, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 682, 683, 684, 685, 689, 690, 691, 694, 695, 707, 765, 770, 905, 989, 990, 1008, 1027, 1036, 1039, 1040, 1041, 1045, 1047, 1049, 1050, 1051], "cop": 10, "cope": [226, 368, 375, 989], "copeland": [1044, 1045], "copi": [3, 10, 15, 42, 60, 73, 96, 112, 125, 146, 161, 162, 167, 168, 169, 183, 190, 203, 213, 215, 219, 233, 283, 326, 327, 329, 331, 352, 357, 367, 377, 380, 382, 384, 385, 386, 392, 394, 435, 438, 441, 443, 444, 445, 447, 448, 450, 455, 460, 483, 484, 485, 486, 501, 503, 511, 533, 534, 535, 536, 542, 549, 554, 555, 560, 562, 563, 573, 591, 598, 608, 609, 611, 612, 629, 631, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 672, 673, 675, 680, 682, 685, 686, 687, 733, 770, 793, 801, 815, 845, 846, 860, 868, 871, 874, 875, 876, 877, 881, 882, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 900, 901, 905, 907, 908, 909, 910, 911, 920, 923, 925, 926, 952, 964, 966, 967, 1003, 1008, 1009, 1014, 1021, 1024, 1029, 1036, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "copy_": 1036, "copy_cov": 549, "copy_gram": [683, 684, 687], "copy_x": [444, 448, 460, 536, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 673, 675, 680, 682, 683, 684, 685, 686, 1038, 1044, 1045], "copy_x_train": [611, 612], "copy_xi": 687, "copybutton": [380, 397, 402], "copyright": [15, 80], "corani": 259, "cordier": 1043, "core": [1, 8, 14, 47, 53, 54, 63, 69, 107, 109, 115, 117, 118, 157, 164, 167, 168, 233, 253, 320, 365, 367, 369, 380, 383, 388, 394, 397, 403, 410, 415, 417, 418, 421, 445, 447, 450, 451, 456, 458, 497, 500, 539, 590, 595, 659, 660, 667, 669, 677, 840, 841, 842, 843, 844, 849, 857, 989, 996, 999, 1008, 1011, 1014, 1015, 1016, 1018, 1027, 1029, 1031, 1038, 1040, 1041, 1043, 1046, 1050, 1051, 1052], "core_dist": [63, 456, 457, 458], "core_distances_": [63, 451, 456, 458], "core_sampl": 421, "core_sample_indices_": [47, 445], "core_samples_mask": 47, "corei": [1037, 1044, 1045], "corentin": 1050, "cori": 1041, "corneil": 1049, "corner": [9, 12, 24, 51, 166, 256, 260, 268, 269, 296, 322, 375, 380, 499, 917, 919, 993, 1050], "cornerston": 1018, "cornflowerblu": [129, 191, 200, 207, 244, 246, 249, 266, 268, 288, 294, 358, 359], "corollari": 382, "corona": 1049, "corpora": 415, "corpu": [13, 352, 353, 375, 415, 589, 590, 591, 592, 1029, 1037], "corr": [83, 170, 259], "corrcoef": [83, 103], "correct": [11, 24, 25, 55, 79, 109, 120, 157, 167, 181, 186, 197, 215, 243, 252, 253, 259, 266, 268, 278, 281, 339, 341, 351, 362, 377, 380, 382, 384, 395, 407, 408, 410, 414, 415, 417, 418, 427, 433, 451, 457, 470, 475, 489, 502, 504, 636, 668, 677, 679, 704, 705, 709, 713, 714, 719, 722, 724, 725, 729, 730, 731, 735, 739, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 784, 785, 786, 788, 791, 792, 795, 797, 833, 834, 835, 842, 850, 876, 978, 989, 993, 994, 1008, 1020, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "correct_covari": [470, 475], "corrected_std": 259, "corrected_var": 259, "correctli": [141, 145, 197, 215, 233, 266, 268, 274, 293, 312, 328, 339, 380, 389, 415, 417, 427, 438, 470, 494, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 659, 667, 669, 675, 676, 677, 704, 795, 797, 800, 823, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 885, 900, 901, 905, 907, 908, 909, 910, 911, 913, 915, 943, 990, 993, 996, 997, 1003, 1008, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "correl": [10, 25, 80, 83, 84, 103, 116, 117, 125, 127, 142, 145, 154, 164, 165, 166, 168, 169, 171, 181, 186, 192, 215, 259, 265, 281, 311, 316, 317, 329, 373, 376, 377, 385, 394, 396, 406, 412, 414, 419, 451, 458, 483, 484, 486, 494, 495, 501, 525, 565, 607, 610, 628, 635, 636, 637, 683, 684, 744, 758, 779, 780, 781, 831, 845, 846, 882, 883, 885, 894, 984, 989, 994, 1000, 1003, 1007, 1009, 1014, 1015, 1016, 1031, 1036, 1037, 1038, 1049, 1050], "correlation_coeffici": 610, "correlation_model": 1043, "correspond": [9, 11, 12, 18, 24, 25, 30, 39, 51, 63, 76, 80, 95, 109, 112, 115, 116, 118, 126, 142, 145, 146, 150, 155, 158, 167, 186, 189, 197, 198, 201, 206, 215, 227, 232, 233, 240, 248, 253, 258, 260, 262, 263, 268, 269, 273, 296, 310, 317, 318, 319, 352, 356, 357, 362, 367, 374, 375, 376, 379, 380, 382, 384, 387, 388, 393, 394, 395, 406, 407, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 425, 431, 438, 440, 442, 446, 449, 452, 454, 460, 462, 464, 465, 468, 473, 483, 484, 485, 491, 492, 493, 494, 495, 496, 497, 535, 542, 545, 546, 547, 550, 551, 553, 556, 558, 560, 561, 562, 565, 583, 585, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 618, 631, 633, 634, 636, 644, 647, 648, 649, 653, 659, 660, 661, 662, 663, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 688, 691, 692, 693, 695, 704, 711, 714, 725, 726, 735, 739, 743, 753, 755, 775, 779, 783, 789, 790, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 834, 836, 837, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 854, 862, 863, 872, 875, 876, 878, 879, 882, 886, 894, 905, 906, 907, 910, 913, 914, 915, 916, 930, 936, 950, 953, 968, 982, 983, 985, 986, 987, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1012, 1020, 1026, 1029, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "correspondingli": 1053, "corri": 1047, "corrobor": 392, "corrupt": [3, 100, 181, 203, 214, 392, 861, 989, 1001], "cort": [1047, 1048, 1051, 1052], "cortex": 415, "cos_transform": 2, "cosin": [2, 38, 274, 283, 288, 372, 375, 394, 410, 415, 416, 442, 446, 451, 458, 536, 591, 592, 621, 697, 761, 762, 763, 766, 771, 772, 775, 779, 780, 781, 845, 846, 850, 877, 996, 1009, 1031, 1046], "cosine_dist": [697, 763, 996, 1042], "cosine_similar": [343, 405, 761, 766, 991, 1041, 1055], "cosinesimil": 283, "cosmo": 17, "cost": [2, 37, 96, 115, 125, 149, 164, 173, 218, 227, 231, 251, 261, 263, 266, 268, 273, 276, 315, 323, 339, 352, 353, 355, 360, 361, 380, 386, 388, 392, 409, 410, 417, 479, 497, 501, 538, 539, 540, 547, 552, 558, 559, 560, 561, 562, 565, 566, 603, 611, 620, 628, 647, 648, 653, 654, 659, 661, 662, 663, 664, 669, 673, 675, 677, 679, 688, 689, 693, 701, 703, 719, 733, 743, 785, 788, 800, 801, 823, 831, 866, 885, 903, 905, 906, 907, 910, 913, 914, 915, 916, 942, 985, 989, 990, 993, 996, 1006, 1007, 1008, 1015, 1016, 1031, 1042, 1045, 1046], "cost_complexity_pruning_path": [356, 913, 914, 915, 916], "cost_gain": 253, "costa": [1044, 1049], "costin": 1036, "costli": [70, 76, 116, 161, 253, 260, 347, 367, 381, 386, 410, 444, 628, 809, 811, 897, 898, 942, 993, 996, 1005, 1014], "costlier": 672, "costs_": [472, 473, 1052], "could": [0, 2, 7, 11, 12, 25, 35, 40, 51, 69, 70, 93, 96, 110, 111, 119, 122, 125, 143, 149, 154, 162, 166, 167, 168, 197, 198, 201, 206, 215, 222, 231, 232, 233, 252, 253, 259, 281, 291, 294, 318, 335, 336, 351, 356, 368, 380, 386, 388, 394, 397, 403, 407, 414, 417, 418, 422, 475, 534, 539, 608, 609, 630, 672, 803, 808, 810, 982, 983, 989, 990, 1000, 1001, 1003, 1008, 1014, 1028, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "couldn": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "count": [2, 11, 13, 23, 25, 39, 47, 51, 68, 69, 90, 131, 132, 167, 168, 197, 199, 215, 230, 240, 253, 268, 273, 278, 283, 316, 317, 352, 353, 360, 375, 377, 384, 389, 394, 395, 407, 408, 410, 415, 417, 418, 447, 450, 490, 497, 537, 545, 582, 589, 590, 591, 592, 595, 605, 618, 641, 698, 706, 716, 719, 730, 731, 739, 755, 784, 785, 787, 788, 840, 844, 845, 846, 854, 857, 868, 917, 919, 944, 958, 982, 985, 989, 993, 995, 996, 1003, 1009, 1018, 1029, 1036, 1039, 1041, 1044, 1045, 1047, 1048], "count_nonzero": [5, 8, 366], "count_onli": [845, 846], "count_vect": 1029, "counter": [17, 109, 266, 410, 677, 678, 679, 1049], "counterpart": [378, 982, 990, 1008, 1024], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 11, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 11, "countri": [311, 322, 497, 990], "counts_": 1048, "countvector": [13, 330, 353, 375, 385, 411, 415, 418, 465, 490, 537, 583, 590, 591, 592, 1029, 1036, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1054], "coupl": [13, 50, 51, 53, 219, 374, 375, 406, 407, 410, 419, 590, 911, 982, 1008], "cournapeau": [0, 399, 1036, 1039], "cours": [6, 7, 173, 273, 366, 380, 382, 409, 415, 418, 419, 983, 988, 989, 1018], "coursecentr": [410, 443], "courtesi": 380, "couvreur": [1045, 1046], "cov": [32, 80, 84, 111, 248, 380, 394, 397, 402, 413, 423, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 520, 533, 535, 542, 549], "cov_": [9, 80], "cov_class_1": 32, "cov_class_2": 32, "cov_init": 1052, "cov_test": 9, "cov_train": 9, "cov_typ": [245, 492], "covar": [243, 244, 249], "covari": [7, 10, 27, 31, 33, 77, 81, 83, 100, 103, 124, 126, 149, 156, 200, 226, 242, 244, 246, 247, 248, 249, 250, 266, 294, 322, 369, 389, 394, 400, 410, 413, 415, 420, 483, 484, 485, 486, 505, 516, 520, 528, 533, 535, 542, 549, 550, 551, 564, 611, 612, 614, 623, 624, 632, 645, 646, 651, 655, 657, 683, 684, 687, 690, 694, 798, 799, 801, 820, 992, 999, 1003, 1015, 1016, 1030, 1031, 1036, 1038, 1039, 1040, 1041, 1043, 1045], "covariance_": [10, 32, 78, 80, 470, 471, 472, 473, 474, 475, 476, 477, 550, 551, 987, 1043], "covariance_correct": [470, 475], "covariance_eigh": [323, 542, 1054], "covariance_estim": [31, 550, 987, 1048], "covariance_prior": [249, 798], "covariance_prior_": 798, "covariance_reweight": [470, 475], "covariance_typ": [42, 244, 245, 247, 248, 249, 798, 799, 1052], "covariances_": [243, 244, 245, 248, 249, 798, 799, 1043], "cover": [0, 50, 173, 197, 215, 362, 372, 375, 380, 393, 636, 721, 795, 993, 994, 1012], "coverag": [9, 11, 122, 125, 197, 215, 296, 375, 383, 405, 499, 628, 721], "coverage_error": [993, 1040, 1050], "coverage_fract": 122, "coverages_land": 9, "covertyp": [373, 492, 1031], "covtyp": 173, "cow": 1037, "cowlei": 1046, "cowton": 1050, "cox": [305, 309, 881, 893, 1003, 1044, 1052], "cp": 1029, "cpickl": 1029, "cpo": [146, 377], "cpp": 386, "cppflag": 378, "cpu": [0, 59, 260, 283, 320, 366, 367, 386, 394, 397, 405, 418, 497, 633, 648, 652, 654, 656, 659, 660, 662, 664, 666, 667, 669, 677, 680, 801, 815, 826, 827, 828, 849, 857, 898, 961, 993, 1020, 1024, 1029, 1041, 1050, 1051, 1053], "cpu_count": [40, 115, 283, 961], "cpuexecutionprovid": 403, "cpython": [380, 381, 386, 1051], "craft": [369, 383], "craig": [1005, 1039, 1044], "crall": [1043, 1049], "crammer": [667, 668, 736, 989, 993, 1008], "crammer06a": [667, 668], "crammer_sing": [905, 994, 1008, 1036], "cranenburgh": 1040, "crash": [10, 380, 403, 469, 895, 896, 903, 1003, 1040, 1044, 1052, 1053], "crawl": [522, 934], "craze": 1043, "crc": 989, "creat": [2, 3, 6, 9, 18, 19, 24, 25, 28, 30, 32, 35, 37, 39, 41, 42, 44, 47, 50, 56, 58, 60, 69, 70, 78, 84, 88, 95, 98, 111, 114, 118, 119, 120, 122, 126, 129, 145, 149, 151, 154, 155, 156, 158, 162, 166, 168, 176, 178, 180, 183, 193, 198, 199, 209, 210, 220, 231, 233, 236, 237, 239, 248, 253, 254, 255, 257, 259, 269, 273, 291, 293, 294, 307, 309, 310, 315, 318, 319, 331, 335, 336, 340, 341, 344, 346, 347, 348, 353, 356, 358, 359, 362, 367, 375, 376, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 393, 394, 397, 403, 407, 410, 411, 414, 416, 417, 418, 420, 439, 452, 454, 466, 467, 500, 516, 517, 518, 519, 547, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 589, 590, 592, 598, 629, 631, 632, 633, 634, 698, 699, 701, 702, 703, 783, 790, 801, 803, 807, 811, 815, 819, 823, 824, 826, 827, 835, 866, 878, 907, 910, 913, 914, 915, 916, 920, 923, 945, 946, 952, 961, 966, 978, 983, 989, 992, 993, 994, 996, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1013, 1014, 1018, 1025, 1027, 1028, 1033, 1036, 1037, 1039, 1042, 1046, 1049, 1050, 1051, 1052, 1053, 1054], "create_ax": 305, "create_species_bunch": 9, "createindex": 283, "creation": [382, 512, 513, 514, 516, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 657, 845, 846, 1018, 1043, 1044, 1045, 1049], "creativ": 374, "creator": [146, 374, 377], "cred_int_df": 259, "cred_interv": 259, "credibl": 259, "credit": [375, 388, 417, 989, 1018], "credit_amount": 253, "credit_card": 253, "credit_gain_scor": 253, "credit_histori": 253, "creighton": 320, "crfsuit": 1013, "crispinlogan": [1048, 1051, 1052], "cristian": 643, "cristina": 1048, "criteria": [55, 115, 164, 175, 186, 205, 216, 248, 259, 388, 410, 419, 442, 467, 483, 484, 485, 502, 558, 559, 560, 561, 565, 566, 647, 653, 657, 659, 660, 672, 693, 866, 885, 905, 906, 913, 914, 915, 916, 983, 992, 997, 1007, 1015, 1028, 1039, 1044, 1047], "criterion": [25, 76, 77, 170, 185, 205, 248, 271, 316, 382, 389, 394, 410, 415, 442, 446, 450, 453, 460, 463, 533, 538, 540, 547, 554, 555, 558, 559, 560, 561, 565, 566, 567, 607, 628, 645, 646, 649, 657, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 681, 692, 696, 711, 799, 902, 907, 908, 909, 910, 911, 913, 914, 915, 916, 989, 992, 993, 1001, 1006, 1009, 1016, 1028, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "criterion_": [185, 186, 657], "critic": [374, 380, 393, 417, 693, 990, 993, 1001, 1008, 1018, 1047], "crockett": 1051, "crombach": 1038, "crop": [388, 1051], "cross": [11, 12, 25, 32, 52, 55, 56, 69, 70, 72, 73, 76, 80, 84, 85, 89, 90, 100, 115, 118, 119, 121, 122, 125, 135, 139, 140, 143, 144, 146, 147, 167, 168, 175, 179, 181, 183, 184, 185, 191, 197, 199, 205, 215, 216, 227, 234, 239, 245, 246, 248, 251, 256, 259, 260, 261, 263, 265, 266, 267, 268, 271, 272, 273, 274, 276, 278, 287, 302, 304, 306, 311, 313, 315, 317, 322, 329, 339, 346, 369, 375, 380, 382, 389, 392, 393, 394, 403, 404, 407, 411, 412, 415, 417, 418, 419, 420, 438, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 494, 502, 503, 505, 516, 542, 568, 569, 576, 594, 595, 598, 603, 607, 610, 643, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 702, 703, 707, 714, 729, 742, 786, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 865, 866, 870, 885, 886, 903, 905, 907, 910, 948, 992, 993, 996, 997, 1001, 1003, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1020, 1023, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "cross_decomposit": [82, 83, 84, 85, 164, 234, 369, 994, 1015, 1040, 1041, 1043, 1044, 1045], "cross_val": 1036, "cross_val_predict": [130, 255, 315, 400, 407, 414, 417, 438, 568, 569, 827, 828, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1053], "cross_val_scor": [11, 100, 161, 162, 164, 251, 255, 264, 270, 274, 276, 321, 342, 362, 380, 382, 392, 400, 414, 417, 473, 521, 576, 704, 743, 801, 826, 828, 913, 914, 982, 993, 1015, 1024, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1052, 1053], "cross_valid": [2, 11, 119, 125, 130, 167, 199, 233, 255, 262, 273, 278, 311, 322, 380, 393, 400, 576, 826, 827, 993, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "crossentropi": 562, "crossvalid": [259, 274], "crowd": [388, 395, 990, 1014], "crucial": [10, 125, 166, 201, 254, 366, 379, 380, 394, 395, 410, 420, 1008], "crude": 1047, "crunch": 386, "cruz": 157, "crypt": [17, 375], "cryptograph": 389, "cs_": 660, "cs_note": 419, "cs_point": 118, "csail": [410, 667, 668, 677, 842], "csc": [366, 392, 394, 418, 528, 552, 554, 555, 671, 693, 872, 874, 880, 885, 888, 890, 896, 921, 925, 926, 956, 968, 969, 971, 972, 973, 974, 996, 1003, 1044, 1045, 1047, 1050], "csc_matrix": [453, 558, 559, 564, 565, 566, 567, 882, 913, 914, 915, 916, 983, 1003, 1009, 1041], "csco": 10, "csgraph": [394, 1049], "csie": [173, 374, 488, 509, 510, 659], "csizsek": 1043, "csr": [15, 323, 353, 366, 374, 375, 389, 392, 394, 418, 421, 444, 447, 448, 450, 451, 460, 498, 509, 524, 528, 554, 555, 558, 559, 565, 566, 567, 591, 631, 659, 693, 715, 769, 793, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 868, 872, 874, 876, 877, 878, 880, 883, 884, 885, 888, 889, 890, 892, 895, 898, 913, 914, 915, 916, 921, 925, 926, 948, 956, 968, 969, 970, 971, 972, 973, 974, 975, 976, 996, 1003, 1007, 1036, 1037, 1042, 1044, 1045, 1051, 1052, 1053], "csr_arrai": 975, "csr_matrix": [283, 316, 441, 445, 453, 497, 535, 545, 558, 559, 560, 561, 564, 565, 566, 567, 589, 594, 595, 715, 831, 860, 878, 880, 907, 908, 910, 911, 913, 914, 915, 916, 943, 948, 965, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 994, 1003, 1007, 1008, 1009, 1051], "css": 1048, "cst": 987, "cstr": 843, "cstride": 168, "csv": [10, 374, 377, 385, 1044, 1049], "csytraci": 1039, "ct": [12, 157, 240, 411, 465, 467, 468], "ctc": 157, "cttt": 157, "cube": [422, 534], "cubic": [78, 420], "cuda": [392, 405], "cue": 992, "culprit": 392, "cultiv": 377, "cultur": 375, "cum_claim": [197, 215], "cum_exposur": 197, "cumsum": [121, 197, 215, 1043], "cumtim": 386, "cumul": [121, 197, 215, 410, 727, 736, 757, 882, 894, 1003, 1007, 1043, 1045, 1046], "cumulated_claim": 197, "cumulated_claim_amount": 215, "cumulated_exposur": 197, "cumulated_sampl": 215, "cunha": [1037, 1038], "cup": [375, 993], "cupi": [320, 392, 405, 1053, 1054], "cupy_to_ndarrai": 405, "curat": [369, 380, 383, 384], "cure": 989, "curic": [1044, 1045], "current": [0, 6, 44, 109, 154, 167, 215, 305, 315, 367, 368, 375, 378, 380, 381, 382, 385, 389, 392, 394, 395, 405, 406, 408, 410, 414, 417, 418, 419, 420, 441, 447, 451, 469, 470, 471, 472, 473, 474, 475, 476, 477, 533, 536, 542, 554, 555, 558, 559, 560, 561, 563, 565, 566, 567, 577, 592, 594, 611, 618, 627, 628, 647, 659, 668, 672, 676, 677, 678, 679, 789, 798, 799, 850, 854, 862, 863, 881, 893, 903, 913, 914, 915, 916, 919, 960, 968, 982, 987, 989, 993, 996, 997, 1003, 1014, 1017, 1027, 1044, 1048, 1050, 1051, 1052], "current_count": 39, "current_month": 154, "current_sklearn_vers": 577, "current_sz_mb": 6, "currentcontrolset": 397, "currentmodul": 380, "curs": [351, 352, 410, 416, 995, 996, 1023, 1028], "cursor": [115, 260], "curv": [6, 9, 21, 22, 24, 26, 35, 73, 76, 112, 114, 115, 121, 126, 164, 175, 176, 187, 197, 215, 216, 218, 220, 223, 225, 227, 229, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 259, 269, 276, 300, 306, 309, 315, 323, 339, 343, 358, 387, 404, 408, 409, 414, 416, 438, 439, 440, 503, 511, 516, 522, 526, 565, 633, 646, 659, 699, 701, 703, 707, 708, 709, 710, 728, 730, 742, 743, 783, 785, 788, 789, 790, 798, 799, 807, 818, 824, 829, 831, 832, 843, 866, 885, 905, 910, 989, 990, 992, 993, 999, 1009, 1015, 1016, 1018, 1031, 1033, 1038, 1039, 1042, 1046, 1048, 1049, 1050, 1051, 1052], "curvatur": 299, "cusick": 1046, "custom": [105, 143, 145, 164, 180, 206, 231, 237, 251, 253, 258, 260, 263, 266, 267, 271, 276, 285, 290, 294, 315, 334, 336, 337, 339, 340, 342, 349, 351, 353, 372, 375, 378, 382, 387, 388, 389, 392, 393, 394, 400, 403, 408, 410, 411, 414, 420, 469, 490, 494, 495, 503, 505, 539, 541, 548, 550, 558, 559, 565, 566, 572, 574, 603, 631, 632, 691, 700, 714, 779, 801, 831, 869, 903, 910, 977, 982, 987, 993, 996, 1013, 1014, 1015, 1018, 1029, 1031, 1036, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1054], "custom_combin": 878, "custom_cv": 414, "custom_cv_2fold": 414, "custom_fnames_enc": 878, "custom_nam": 351, "custom_scorer_modul": 993, "custom_scoring_funct": 993, "customestim": 107, "customkernel": 619, "customvector": 418, "cut": [17, 41, 44, 63, 64, 145, 146, 164, 220, 251, 262, 276, 278, 323, 329, 384, 392, 406, 409, 410, 447, 453, 454, 463, 497, 589, 592, 659, 692, 696, 817, 823, 828, 866, 885, 1003, 1015], "cut_dist": [53, 447], "cutler": [913, 914], "cutoff": [176, 947, 1003, 1045], "cutoffs_x0": 305, "cutoffs_x1": 305, "cv": [2, 10, 11, 22, 23, 24, 25, 52, 69, 70, 71, 72, 76, 100, 115, 119, 121, 125, 136, 145, 161, 162, 167, 186, 196, 199, 233, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 269, 273, 274, 278, 311, 320, 322, 323, 339, 346, 393, 394, 400, 407, 409, 414, 417, 419, 438, 473, 568, 569, 595, 603, 648, 652, 654, 656, 660, 662, 664, 666, 674, 676, 801, 803, 804, 805, 806, 807, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 886, 913, 914, 982, 985, 988, 989, 993, 1003, 1014, 1024, 1025, 1029, 1038, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052, 1053, 1054, 1055], "cv_alpha": [652, 656], "cv_alphas_": [186, 652, 656, 1048], "cv_best_it": 121, "cv_clf": 121, "cv_color": 121, "cv_estim": 121, "cv_line": 121, "cv_mape_scor": 11, "cv_model": 167, "cv_result": [2, 11, 69, 115, 125, 145, 257, 258, 260, 262, 400, 815, 828, 993], "cv_results_": [69, 70, 71, 80, 115, 136, 145, 248, 253, 257, 258, 259, 260, 263, 267, 270, 271, 285, 339, 473, 595, 674, 676, 801, 804, 805, 815, 823, 1029, 1042, 1046, 1048, 1049, 1054], "cv_results_ecoc": 278, "cv_results_lr": 199, "cv_results_ovo": 278, "cv_results_ovr": 278, "cv_results_qr": 199, "cv_results_tre": 278, "cv_results_tuned_model": 273, "cv_results_vanilla_model": 273, "cv_score": [121, 273], "cv_test_scor": 829, "cv_train_scor": 829, "cv_valu": 1044, "cv_values_": [674, 676, 1054], "cvc": 10, "cve": 1049, "cvx": 10, "cwitt": 1044, "cxx": 378, "cxxflag": 378, "cyan": [76, 112, 167, 294], "cybernet": 770, "cycl": [0, 2, 40, 42, 48, 60, 93, 182, 244, 249, 266, 268, 318, 319, 380, 384, 400, 408, 415, 580, 581, 628, 804, 805, 921, 982, 983, 1044, 1045, 1046, 1048, 1049, 1050, 1051], "cycler": 36, "cyclic": [2, 647, 648, 653, 654, 661, 662, 663, 664, 1048], "cyclic_cossin_linear_pipelin": 2, "cyclic_cossin_linear_predict": 2, "cyclic_cossin_transform": 2, "cyclic_hour": 2, "cyclic_month": 2, "cyclic_spline_interactions_pipelin": 2, "cyclic_spline_linear_pipelin": 2, "cyclic_spline_linear_predict": 2, "cyclic_spline_poly_pipelin": 2, "cyclic_spline_poly_predict": 2, "cyclic_spline_transform": 2, "cyclic_weekdai": 2, "cyl": [9, 296], "cynthias13w": 1053, "cyt": 278, "cython": [319, 366, 367, 369, 378, 380, 383, 389, 392, 397, 402, 405, 408, 410, 417, 509, 1003, 1004, 1007, 1008, 1013, 1014, 1036, 1039, 1040, 1042, 1048, 1051, 1052, 1053], "cython3": 378, "cythonx": 381, "c\u00e8sar": 993, "d": [0, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 29, 30, 35, 36, 40, 46, 47, 48, 58, 59, 61, 68, 69, 80, 87, 90, 93, 96, 100, 102, 149, 157, 167, 197, 205, 213, 215, 223, 227, 229, 230, 231, 232, 246, 258, 259, 267, 273, 281, 289, 290, 296, 301, 326, 327, 330, 339, 343, 344, 353, 374, 375, 377, 382, 386, 392, 407, 410, 412, 413, 415, 417, 418, 420, 421, 445, 447, 448, 453, 461, 464, 489, 494, 504, 527, 535, 537, 558, 559, 566, 567, 582, 583, 591, 615, 616, 620, 623, 624, 645, 646, 649, 670, 671, 672, 681, 689, 690, 693, 694, 698, 700, 706, 709, 722, 723, 724, 725, 727, 757, 765, 779, 782, 789, 813, 840, 842, 844, 845, 846, 861, 872, 876, 878, 879, 881, 893, 898, 915, 916, 920, 985, 987, 989, 990, 991, 992, 993, 995, 1001, 1003, 1005, 1008, 1009, 1025, 1026, 1027, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "d1997": 417, "d2": [723, 724, 993], "d2_absolute_error_scor": [724, 993, 1050], "d2_log_loss_scor": [993, 1054], "d2_pinball_scor": [993, 1050], "d2_pinball_score_08": 993, "d2_tweedie_scor": [993, 1049], "d2_tweedie_score_15": 993, "d55e00": 243, "d81b60": 309, "d83": 377, "d_": [78, 410, 415, 649, 670, 681, 779, 990, 995], "d_c": 410, "d_chunk": 782, "d_fit": 689, "d_fix": 102, "d_m": 410, "d_multi": 102, "da": [375, 1051, 1052, 1054], "dae": 989, "dagm": 985, "dagstuhl": 993, "dai": [2, 10, 11, 125, 154, 168, 198, 367, 377, 380, 884, 1018, 1042, 1043, 1050, 1051], "daiki": 1040, "daili": [10, 125, 1018], "dakota": 1046, "dale": [199, 1049], "dalla": 1044, "dalmia": [1042, 1043, 1044], "damag": 418, "damicelli": 1051, "damink": 1053, "daml": [410, 453, 463], "damp": [42, 410, 441, 455], "dan": [15, 1036, 1040, 1041, 1042, 1044, 1045], "danfrankj": 1040, "dang": [680, 989, 1054], "danger": [198, 414], "dangi": 1053, "dangl": 15, "dangonite57": [1051, 1052], "daniel": [173, 320, 366, 886, 1003, 1018, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1053], "daniela": [1050, 1051], "danielgaerb": 1051, "danielsen": 1043, "danielweitzenfeld": 1039, "daniil": 1043, "danil": 1044, "dani\u00ebl": 1047, "danna": 1046, "danni": [1039, 1040, 1041], "dantzig": 346, "danylo": 1045, "dao": 1044, "daphn": 1047, "dare": 1046, "darioka": [1048, 1050, 1051], "dariu": [1043, 1044], "dark": [112, 167, 339, 375, 1053], "dark2": [23, 25, 219], "darkblu": 294, "darkorang": [77, 97, 101, 102, 198, 208, 221, 244, 245, 246, 249, 266, 268, 288, 294, 295, 328, 358], "darkorchid": 207, "darkr": [211, 289, 338], "darpa": 375, "darren": [1050, 1051], "darshan": 1048, "dart": 1013, "dartmouth": 0, "dasarathi": 377, "dasgupta": [418, 447, 899, 1005], "dash": [31, 78, 109, 121, 132, 149, 152, 154, 167, 184, 189, 192, 198, 199, 206, 209, 210, 236, 253, 259, 269, 341, 1007], "dashdot": [121, 149, 152, 236], "dask": [961, 1014, 1044], "data": [0, 1, 4, 6, 9, 11, 12, 13, 14, 17, 19, 23, 25, 28, 29, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 60, 63, 66, 67, 69, 70, 72, 74, 77, 79, 88, 90, 92, 93, 96, 97, 101, 103, 104, 107, 109, 111, 112, 114, 115, 118, 119, 121, 122, 127, 128, 129, 131, 133, 136, 137, 138, 143, 148, 149, 150, 151, 153, 154, 156, 158, 159, 161, 164, 167, 168, 175, 176, 179, 180, 181, 182, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 229, 230, 231, 233, 235, 236, 237, 240, 243, 244, 245, 246, 247, 249, 252, 253, 257, 259, 261, 262, 263, 264, 267, 273, 274, 278, 281, 283, 287, 289, 291, 292, 293, 294, 296, 300, 301, 304, 306, 307, 308, 312, 313, 315, 317, 319, 320, 321, 327, 328, 330, 331, 335, 336, 338, 343, 344, 351, 357, 358, 359, 360, 365, 367, 369, 372, 373, 374, 376, 377, 380, 382, 383, 386, 387, 388, 389, 393, 397, 400, 403, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 618, 619, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 719, 721, 726, 728, 729, 730, 731, 732, 735, 737, 738, 739, 741, 742, 755, 756, 758, 762, 764, 765, 770, 779, 784, 785, 786, 788, 789, 790, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 929, 930, 931, 939, 941, 942, 956, 959, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1024, 1025, 1027, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "data1010": 1041, "data_filenam": [502, 506], "data_hom": [487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 1043, 1052], "data_home_path": 500, "data_id": [3, 119, 154, 167, 197, 215, 227, 253, 273, 278, 311, 374, 497], "data_ind": 12, "data_max": 1041, "data_max_": [875, 1041], "data_min": 1041, "data_min_": [875, 1041], "data_nam": 397, "data_path": 6, "data_rang": 1041, "data_range_": [875, 1041], "data_sampl": 13, "data_set": 300, "data_size_mb": 353, "data_stream": 6, "data_test": [231, 253, 260, 351, 510], "data_test_size_mb": 351, "data_train": [231, 253, 260, 351, 510], "data_train_size_mb": 351, "data_transform": 640, "data_transpos": [1050, 1052], "data_unravel_indic": 12, "data_vers": 397, "databas": [6, 146, 310, 366, 368, 375, 377, 410, 415, 417, 418, 421, 443, 445, 511, 556, 557, 898, 1005], "datafram": [2, 11, 23, 68, 69, 70, 109, 115, 119, 122, 127, 145, 154, 161, 166, 167, 168, 169, 176, 181, 186, 201, 205, 215, 237, 240, 248, 253, 257, 259, 260, 262, 270, 271, 273, 278, 310, 311, 312, 318, 319, 320, 346, 351, 352, 374, 375, 380, 382, 385, 394, 411, 417, 434, 443, 444, 446, 448, 450, 465, 467, 468, 469, 483, 484, 485, 486, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 689, 690, 693, 801, 804, 805, 815, 831, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 921, 948, 964, 967, 982, 983, 1014, 1029, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "dataia": 0, "dataiku": 1011, "datalim": 245, "datapoint": [2, 40, 50, 54, 153, 156, 180, 231, 232, 236, 254, 259, 281, 420, 447, 503, 558, 559, 560, 561, 565, 566, 567, 612, 913, 914, 915, 916, 986], "datarobot": 1011, "dataset": [4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 24, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 65, 66, 69, 70, 71, 72, 73, 78, 79, 80, 84, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 146, 148, 150, 152, 155, 157, 159, 161, 162, 169, 170, 173, 175, 177, 178, 180, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 220, 222, 223, 225, 227, 230, 232, 234, 235, 239, 240, 241, 243, 245, 246, 247, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 275, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 332, 334, 335, 337, 339, 340, 341, 342, 344, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 362, 367, 368, 369, 382, 383, 384, 386, 393, 394, 396, 397, 403, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 425, 430, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 470, 471, 474, 475, 476, 477, 479, 482, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 584, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 632, 633, 634, 635, 636, 639, 640, 641, 644, 646, 647, 648, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 711, 712, 730, 756, 758, 788, 789, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 869, 870, 878, 879, 883, 885, 887, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 926, 930, 931, 982, 983, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1028, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dataset_nam": [236, 283], "datasets_nam": 236, "datastructur": [405, 1044, 1048], "datastuctur": 1053, "datatyp": [465, 467, 1043, 1046], "date": [2, 68, 125, 146, 154, 168, 375, 377, 380, 384, 395, 411, 1014], "dateco2datef641958": 154, "daten": [451, 1044, 1045], "datenbergwerk": 1046, "datetim": [2, 15, 154, 168], "dauphin": [302, 1038], "dave": [1036, 1043, 1044, 1050, 1052], "davi": [475, 726, 993, 1040], "david": [0, 35, 55, 79, 115, 125, 176, 181, 199, 236, 260, 262, 310, 351, 352, 353, 375, 399, 410, 417, 420, 463, 533, 537, 568, 569, 623, 624, 629, 726, 798, 902, 983, 989, 997, 1006, 1018, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "davidblnc": [1051, 1052], "davies_bouldin_scor": [410, 1044], "davis2006": 993, "daw": [0, 109, 110, 111, 399, 1036, 1037, 1038, 1039, 1040], "dawson": 1040, "dayn": [1051, 1052], "db": [47, 53, 410], "dbauer9": 1047, "dberenbaum": 1052, "dbg": 386, "dbpedia": 15, "dbpedia_resource_prefix_len": 15, "dbscan": [34, 35, 36, 42, 53, 58, 61, 63, 66, 164, 321, 328, 392, 394, 447, 451, 453, 456, 513, 705, 706, 718, 738, 794, 796, 857, 885, 996, 1015, 1030, 1031, 1036, 1038, 1040, 1041, 1043, 1044, 1045, 1052, 1053], "dbscan_clust": 447, "dcc": 375, "dcg": [727, 757, 993, 1043], "dcg_score": [757, 993, 1043, 1046], "dd": [9, 10, 128, 296, 499], "ddof": [259, 885, 896], "de": [0, 10, 22, 23, 24, 25, 72, 113, 130, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 311, 328, 346, 377, 636, 689, 765, 989, 990, 1014, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "dea": [1050, 1051, 1052], "deactiv": [238, 374, 381, 386, 397, 411, 804, 805, 1050], "dead": 1054, "deadlock": 395, "deal": [23, 55, 69, 125, 161, 167, 181, 222, 273, 278, 343, 353, 380, 385, 411, 418, 419, 420, 475, 497, 704, 709, 764, 788, 871, 942, 989, 1018, 1026, 1039, 1051, 1052], "dealloc": 1053, "dean": [130, 1044, 1050, 1052, 1054], "deap": 1013, "death": 375, "debian": [0, 366, 378, 386], "debias": 102, "deborah": [1042, 1043, 1053], "debug": [362, 367, 381, 383, 386, 394, 396, 628, 904, 959, 1013, 1029, 1044, 1048], "debugg": [383, 388], "dec": [198, 278, 678, 884, 909, 1008], "decad": [167, 1014], "decai": [154, 545, 862, 863, 942, 993, 1007, 1040], "decal": 1048, "decemb": [79, 125, 154, 375, 665, 686, 687, 1036, 1044, 1046, 1048, 1049, 1051], "decent": [226, 253, 258, 375, 995], "deci": 268, "decid": [2, 9, 55, 58, 69, 120, 125, 249, 256, 259, 266, 375, 380, 395, 403, 409, 418, 420, 451, 458, 560, 561, 612, 636, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 672, 682, 685, 798, 847, 848, 849, 851, 853, 855, 856, 857, 868, 992, 999, 1018, 1049, 1052], "decil": [633, 1047], "deciles_hlines_": 633, "deciles_vlines_": 633, "decim": [23, 155, 472, 473, 918, 1043, 1044], "decis": [0, 2, 6, 23, 25, 29, 32, 39, 54, 56, 58, 88, 97, 107, 108, 111, 112, 113, 114, 120, 128, 129, 130, 132, 133, 134, 138, 141, 145, 146, 151, 153, 157, 167, 179, 180, 189, 206, 207, 210, 226, 227, 229, 234, 237, 251, 262, 263, 265, 266, 276, 278, 291, 294, 299, 305, 306, 307, 310, 325, 329, 330, 332, 335, 336, 337, 338, 339, 340, 341, 342, 347, 348, 351, 361, 366, 369, 376, 377, 380, 394, 403, 404, 407, 410, 417, 438, 470, 497, 501, 505, 520, 537, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 594, 595, 632, 633, 634, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 699, 701, 703, 704, 708, 719, 721, 727, 728, 733, 736, 740, 741, 743, 757, 783, 785, 788, 789, 790, 795, 800, 801, 804, 805, 815, 817, 823, 828, 831, 833, 834, 836, 847, 866, 885, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1018, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "decision_funct": [7, 9, 23, 25, 54, 111, 126, 138, 209, 210, 211, 227, 236, 266, 273, 289, 290, 299, 307, 322, 337, 338, 339, 343, 344, 348, 382, 394, 407, 409, 417, 438, 470, 550, 551, 554, 556, 560, 562, 564, 568, 594, 595, 632, 633, 634, 659, 660, 667, 669, 675, 676, 677, 678, 699, 701, 703, 708, 721, 727, 728, 736, 740, 741, 743, 757, 783, 789, 790, 795, 800, 801, 804, 805, 815, 823, 826, 833, 834, 835, 836, 851, 865, 872, 902, 905, 907, 909, 910, 989, 993, 999, 1000, 1007, 1008, 1027, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1053], "decision_function_shap": [315, 347, 907, 910, 1008, 1041, 1042, 1045, 1046], "decision_path": [360, 558, 559, 565, 566, 567, 913, 914, 915, 916, 1042, 1047], "decision_threshold": [253, 273], "decision_tre": [917, 918, 919, 1009], "decision_tree_learn": [913, 914, 1009], "decisionboundarydisplai": [7, 28, 29, 32, 54, 111, 126, 131, 180, 189, 206, 211, 262, 286, 291, 294, 310, 335, 336, 337, 338, 340, 341, 343, 357, 1050, 1051, 1053, 1054], "decisiontre": [118, 554, 1041], "decisiontreeclassifi": [29, 109, 111, 118, 131, 263, 278, 321, 356, 357, 360, 394, 409, 417, 554, 556, 558, 560, 562, 565, 632, 712, 807, 829, 914, 915, 917, 918, 919, 983, 994, 1009, 1037, 1038, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decisiontreeclassifierifitteddecisiontreeclassifi": 360, "decisiontreeregressor": [110, 112, 237, 306, 315, 321, 358, 359, 385, 555, 557, 559, 560, 561, 563, 565, 566, 633, 634, 913, 916, 918, 937, 983, 994, 1009, 1037, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decisiontreeregressorifitteddecisiontreeregressor": 317, "declan": 1048, "declar": [54, 219, 233, 362, 380, 381, 382, 386, 394, 444, 447, 448, 460, 472, 473, 479, 691, 695, 1043, 1047], "decod": [6, 296, 375, 394, 504, 570, 589, 590, 592, 1036, 1037], "decode_error": [6, 418, 504, 589, 590, 592, 1038], "decompos": [93, 97, 112, 307, 408, 535, 539, 710, 826, 942, 988, 989, 993, 1010, 1030, 1031], "decomposit": [3, 4, 8, 13, 15, 48, 56, 68, 70, 71, 72, 84, 85, 88, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 128, 134, 173, 218, 219, 221, 230, 231, 234, 235, 238, 258, 287, 292, 310, 319, 322, 323, 352, 368, 369, 373, 386, 389, 394, 405, 406, 407, 411, 417, 450, 452, 453, 454, 463, 483, 484, 485, 496, 550, 557, 612, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 673, 674, 675, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 798, 799, 854, 861, 864, 867, 883, 914, 941, 942, 989, 990, 993, 1010, 1013, 1015, 1016, 1023, 1025, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "decompress": [403, 1036], "decor": [168, 315, 380, 381, 382, 389, 807, 824, 932, 936, 937, 954, 960, 1046, 1049, 1052, 1054], "decoupl": [417, 995], "decreas": [24, 37, 44, 53, 56, 64, 73, 125, 127, 145, 146, 157, 167, 168, 170, 205, 229, 230, 261, 266, 272, 299, 307, 310, 315, 356, 366, 368, 380, 407, 410, 417, 442, 446, 464, 522, 535, 536, 542, 558, 559, 560, 561, 562, 563, 565, 566, 567, 603, 636, 637, 638, 677, 678, 679, 707, 713, 728, 783, 790, 862, 863, 913, 914, 915, 916, 982, 984, 985, 989, 990, 993, 996, 997, 1000, 1001, 1007, 1008, 1018, 1027, 1038, 1043, 1046, 1049], "dede00": [42, 60, 61], "dedic": [2, 257, 348, 378, 384, 386, 392, 395, 405, 410, 585, 673, 675, 688, 982, 989, 1013, 1020, 1044, 1053], "deduc": 5, "deduct": 997, "dedupl": 1040, "deeksha": 1048, "deem": [267, 268, 535, 1001, 1049], "deep": [197, 382, 394, 403, 417, 424, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 770, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 997, 998, 1013, 1014, 1018, 1041, 1047, 1048, 1050], "deepcopi": 382, "deeper": [351, 1009], "deepest": [562, 563, 1047], "deeplook": 1046, "deeppink": 268, "def": [2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 17, 23, 25, 31, 32, 35, 38, 39, 46, 50, 53, 54, 56, 59, 68, 73, 90, 93, 95, 96, 100, 102, 107, 109, 112, 114, 119, 121, 122, 125, 130, 152, 155, 157, 158, 162, 170, 177, 185, 186, 189, 194, 197, 198, 205, 206, 207, 215, 218, 219, 233, 234, 236, 243, 244, 245, 246, 248, 249, 253, 254, 257, 258, 259, 260, 262, 267, 270, 274, 283, 288, 290, 293, 296, 300, 302, 305, 307, 310, 311, 315, 323, 330, 335, 339, 343, 348, 351, 352, 353, 366, 375, 380, 382, 386, 387, 392, 411, 414, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 509, 510, 534, 598, 602, 611, 612, 619, 782, 878, 932, 937, 954, 993, 1000, 1008, 1025], "default": [2, 11, 13, 23, 28, 40, 43, 44, 46, 53, 57, 93, 115, 142, 149, 161, 168, 176, 177, 186, 197, 198, 215, 228, 230, 236, 238, 240, 246, 253, 254, 262, 268, 273, 281, 283, 305, 309, 312, 315, 316, 320, 322, 323, 343, 346, 347, 351, 352, 353, 356, 362, 366, 367, 374, 375, 378, 382, 383, 384, 385, 386, 387, 389, 392, 393, 394, 397, 400, 403, 407, 409, 410, 411, 414, 415, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 737, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 929, 931, 932, 934, 936, 941, 942, 943, 944, 945, 946, 947, 956, 958, 959, 961, 962, 963, 964, 966, 967, 968, 974, 977, 979, 980, 982, 983, 985, 987, 989, 992, 993, 994, 996, 997, 999, 1000, 1003, 1005, 1007, 1008, 1009, 1020, 1024, 1027, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "default_bas": [42, 60], "default_rng": 262, "default_scor": 385, "default_target_attribut": 374, "default_tim": [212, 246], "defaultdict": [8, 11, 17, 23, 170, 262, 352, 353], "defazio": [659, 989], "defens": 278, "defer": 380, "defici": [990, 1007], "defin": [5, 10, 25, 32, 51, 53, 55, 64, 68, 69, 71, 84, 93, 98, 107, 109, 110, 130, 146, 149, 156, 157, 158, 168, 169, 170, 176, 198, 205, 214, 215, 226, 230, 233, 237, 239, 243, 248, 253, 259, 260, 262, 266, 268, 269, 270, 271, 273, 278, 283, 302, 305, 316, 322, 339, 343, 346, 351, 352, 366, 376, 379, 380, 381, 382, 386, 387, 389, 392, 393, 394, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 425, 426, 427, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 460, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 490, 520, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 628, 629, 630, 631, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 697, 698, 700, 709, 711, 712, 717, 722, 723, 724, 725, 726, 729, 732, 739, 742, 746, 747, 749, 751, 752, 754, 755, 758, 761, 767, 782, 786, 791, 792, 793, 794, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 929, 931, 934, 940, 951, 953, 977, 982, 983, 989, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1014, 1025, 1028, 1031, 1033, 1038, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "definit": [56, 79, 185, 197, 266, 283, 352, 380, 381, 382, 394, 396, 410, 412, 413, 415, 528, 530, 536, 612, 629, 693, 709, 719, 729, 759, 798, 799, 982, 985, 987, 989, 991, 993, 996, 1007, 1012, 1031, 1040, 1044, 1051], "definitelyuncertain": 1042, "deflat": [167, 413, 422, 534], "defoi": 1049, "deform": [126, 248, 348], "degener": [90, 244, 422, 441, 455, 534, 721, 989, 993, 1045, 1049, 1050], "degrad": [125, 168, 226, 305, 346, 352, 416, 779, 1001], "degre": [2, 32, 95, 111, 154, 161, 166, 167, 168, 173, 176, 181, 185, 186, 198, 201, 232, 238, 243, 244, 245, 248, 249, 259, 274, 302, 317, 318, 336, 343, 345, 415, 419, 447, 453, 499, 536, 542, 640, 641, 644, 657, 776, 798, 801, 851, 880, 884, 907, 908, 909, 910, 911, 985, 986, 988, 989, 990, 991, 993, 994, 996, 999, 1000, 1003, 1006, 1008, 1027, 1039, 1045, 1049, 1050, 1053], "degrees_of_freedom_": 798, "degrees_of_freedom_prior": 798, "degrees_of_freedom_prior_": 798, "dei": 1048, "deil": [1037, 1047, 1048], "dein": 418, "dekel": [667, 668, 989], "del": [15, 386, 1048, 1049], "delai": [380, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 801, 815, 826, 827, 961, 1050, 1051, 1054], "delalleau": 1006, "delanou": 1047, "delattr": 1048, "delbert": [36, 441, 455], "deleg": [54, 386, 434, 435, 918, 1040, 1042, 1048], "delet": [70, 327, 329, 384, 385, 470, 475, 487], "delete_index": 327, "delete_indic": 327, "deleteri": 1043, "deli": 403, "deliber": 989, "delimit": [380, 999, 1051], "deliv": [43, 366, 1018], "deliveri": 384, "dell": 10, "delong": [1048, 1049], "delta": [413, 453], "delta_": 990, "delta_k": 413, "delteil": 1040, "delv": [862, 863], "demand": [121, 125, 394, 418, 801, 815, 826, 827], "demarc": 58, "demiraj": [1051, 1052], "demo": [11, 12, 16, 17, 20, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 62, 65, 66, 126, 164, 170, 181, 203, 230, 246, 248, 260, 268, 310, 328, 329, 351, 352, 382, 406, 410, 418, 441, 442, 445, 447, 448, 449, 451, 452, 454, 456, 459, 503, 512, 513, 514, 542, 705, 706, 718, 720, 738, 794, 796, 866, 885, 886, 1015], "demo_param": 382, "demonstr": [5, 11, 17, 18, 19, 23, 30, 34, 38, 41, 53, 59, 66, 68, 70, 87, 109, 113, 120, 123, 143, 144, 157, 158, 164, 170, 198, 199, 233, 239, 240, 245, 249, 251, 255, 262, 265, 268, 270, 274, 276, 285, 288, 295, 304, 306, 307, 309, 312, 313, 317, 325, 327, 328, 331, 332, 337, 343, 351, 352, 353, 362, 368, 375, 376, 380, 385, 392, 400, 405, 410, 414, 417, 448, 503, 513, 521, 698, 704, 714, 743, 799, 801, 870, 901, 913, 982, 983, 987, 993, 994, 995, 996, 1003, 1006, 1009, 1012, 1015], "dem\u0161ar": 259, "den": [0, 398, 1037, 1038, 1043, 1044, 1045, 1048, 1049], "dendrit": [410, 711], "dendro": 170, "dendro_idx": 170, "dendrogram": [34, 65, 66, 164, 170, 360, 410, 442, 446, 505, 1015, 1048], "denero": 736, "deng": [1040, 1041, 1042], "dengemann": 1037, "dengyong": 901, "deni": [100, 1038, 1039, 1043, 1044, 1045, 1051, 1052], "denni": 1050, "denois": [1, 14, 30, 46, 48, 49, 51, 92, 98, 102, 104, 164, 415, 497, 536, 538, 542, 585, 588, 831, 875, 1015], "denomin": [266, 417, 418, 423, 476, 591, 705, 758, 987], "denot": [144, 389, 394, 397, 407, 410, 414, 417, 589, 590, 592, 801, 807, 815, 824, 878, 879, 978, 982, 985, 989, 991, 993, 994, 1003, 1006, 1020, 1053], "dens": [10, 12, 53, 164, 175, 181, 191, 216, 319, 320, 330, 366, 389, 394, 410, 415, 417, 419, 444, 447, 448, 450, 465, 468, 497, 524, 525, 528, 535, 536, 545, 567, 608, 609, 630, 631, 653, 658, 659, 660, 667, 668, 669, 673, 674, 677, 678, 679, 688, 689, 690, 693, 694, 761, 762, 768, 780, 793, 862, 863, 870, 877, 878, 880, 882, 883, 884, 885, 894, 895, 896, 897, 898, 905, 906, 907, 908, 910, 911, 943, 964, 967, 983, 986, 989, 990, 993, 994, 996, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1015, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "dense_lasso": 183, "dense_output": [762, 768, 898, 943, 1044], "denser": 445, "densif": 1045, "densifi": [394, 659, 660, 667, 668, 669, 677, 678, 679, 905, 983, 1038], "densiti": [9, 47, 53, 58, 63, 73, 102, 144, 146, 152, 164, 183, 197, 198, 212, 215, 222, 226, 230, 242, 243, 244, 249, 250, 259, 265, 278, 284, 289, 290, 297, 305, 310, 339, 351, 375, 377, 389, 394, 410, 417, 421, 429, 445, 447, 449, 451, 453, 465, 468, 499, 503, 537, 542, 550, 551, 798, 799, 801, 845, 846, 850, 851, 898, 987, 989, 992, 996, 998, 999, 1005, 1013, 1015, 1016, 1020, 1030, 1031, 1038, 1040, 1044, 1045, 1051, 1052], "density_": 898, "densityestim": 429, "denton": 1038, "deodhar": 1048, "deoli": 1049, "depart": [157, 410], "depedend": 1053, "depend": [2, 3, 5, 11, 25, 35, 51, 73, 97, 115, 119, 122, 123, 125, 127, 130, 141, 145, 155, 161, 164, 165, 167, 170, 171, 173, 177, 181, 215, 219, 225, 226, 232, 236, 241, 248, 253, 259, 260, 264, 265, 266, 273, 283, 300, 305, 310, 317, 320, 336, 343, 346, 352, 353, 362, 366, 367, 368, 373, 380, 382, 383, 388, 389, 392, 393, 394, 395, 396, 397, 402, 403, 405, 408, 410, 412, 414, 415, 417, 418, 419, 420, 421, 439, 440, 441, 445, 447, 448, 450, 451, 453, 455, 458, 460, 461, 463, 465, 470, 485, 490, 491, 492, 494, 497, 501, 502, 503, 505, 506, 511, 535, 536, 542, 545, 552, 560, 561, 563, 589, 590, 591, 592, 603, 605, 608, 609, 612, 628, 633, 634, 639, 641, 649, 659, 660, 670, 672, 674, 677, 678, 679, 681, 688, 691, 692, 695, 696, 712, 730, 731, 739, 779, 782, 784, 785, 788, 793, 794, 798, 799, 820, 830, 847, 848, 849, 851, 853, 854, 855, 856, 857, 863, 864, 866, 878, 879, 882, 885, 899, 906, 907, 910, 914, 923, 982, 983, 985, 986, 987, 989, 990, 992, 993, 995, 996, 997, 998, 1001, 1005, 1007, 1008, 1009, 1015, 1020, 1027, 1029, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "dependen": 346, "depict": [109, 261, 417, 992], "deploi": [253, 366, 396, 403, 409, 1014, 1018], "deploy": [388, 403, 1013, 1014, 1018], "depot": 10, "deprec": [318, 367, 369, 382, 383, 384, 389, 394, 400, 442, 446, 447, 448, 451, 458, 460, 483, 484, 485, 486, 528, 537, 538, 539, 540, 541, 547, 554, 570, 571, 580, 581, 583, 628, 659, 660, 674, 676, 677, 678, 693, 710, 743, 751, 752, 779, 780, 781, 783, 801, 804, 805, 815, 826, 827, 828, 829, 852, 864, 865, 870, 907, 910, 921, 936, 937, 982, 983, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "deprecationwarn": 1046, "dept": 377, "depth": [2, 114, 119, 123, 126, 131, 278, 356, 358, 359, 360, 366, 378, 380, 384, 393, 417, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 845, 846, 850, 913, 914, 915, 916, 917, 919, 947, 998, 999, 1009, 1038, 1039, 1047], "der": [693, 697, 990, 1039, 1040, 1044], "derek": 1044, "deriv": [2, 17, 102, 103, 121, 154, 157, 169, 185, 186, 190, 198, 367, 375, 382, 412, 414, 416, 417, 418, 420, 422, 442, 446, 447, 466, 534, 607, 618, 623, 649, 670, 677, 681, 862, 863, 878, 884, 905, 906, 987, 989, 990, 993, 997, 999, 1008, 1036, 1037, 1038, 1043, 1044, 1045, 1051], "deros": 1047, "derouich": 1036, "desai": [1043, 1045, 1048, 1049, 1051, 1052], "desalvo": 982, "descamp": 1044, "descend": [118, 628, 1046], "descent": [5, 12, 120, 164, 175, 182, 185, 204, 216, 226, 231, 289, 318, 337, 338, 415, 417, 472, 473, 479, 489, 497, 504, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 572, 632, 640, 647, 648, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 673, 675, 677, 678, 679, 682, 683, 684, 685, 688, 695, 831, 862, 863, 866, 905, 909, 967, 990, 997, 999, 1008, 1015, 1016, 1027, 1031, 1036, 1039, 1040, 1041, 1043, 1045, 1047, 1049, 1050, 1051], "descr": [146, 373, 374, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 1026, 1044], "describ": [2, 11, 54, 130, 146, 167, 215, 231, 259, 268, 362, 366, 367, 373, 375, 377, 379, 380, 382, 385, 388, 394, 395, 406, 410, 412, 413, 414, 415, 417, 418, 463, 470, 474, 475, 492, 494, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 517, 518, 519, 529, 608, 609, 646, 660, 669, 715, 798, 799, 840, 842, 880, 942, 982, 985, 988, 989, 992, 993, 995, 999, 1007, 1008, 1009, 1017, 1020, 1026, 1027, 1044, 1046], "descript": [11, 146, 167, 311, 373, 374, 379, 380, 384, 385, 388, 394, 410, 418, 453, 463, 465, 468, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 545, 631, 677, 763, 766, 779, 993, 1007, 1008, 1014, 1017, 1029, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "descriptor": [394, 509, 510], "deseri": 403, "deserv": [380, 386], "deshmukh": 1049, "deshpand": [1041, 1042], "design": [0, 12, 18, 78, 109, 130, 152, 166, 167, 178, 233, 248, 253, 305, 311, 360, 368, 374, 380, 385, 392, 393, 394, 395, 396, 403, 410, 417, 419, 516, 529, 633, 634, 649, 666, 670, 677, 681, 686, 801, 819, 820, 840, 842, 983, 989, 990, 993, 994, 1003, 1013, 1014, 1018, 1022, 1038, 1045, 1054], "desir": [9, 22, 111, 146, 162, 197, 199, 305, 309, 323, 373, 380, 382, 384, 388, 403, 406, 410, 413, 414, 415, 419, 504, 539, 541, 545, 548, 568, 594, 603, 604, 665, 671, 686, 687, 700, 709, 737, 845, 846, 850, 865, 870, 872, 875, 876, 878, 879, 881, 882, 886, 889, 891, 893, 894, 929, 962, 985, 987, 990, 996, 1003, 1007, 1008, 1009, 1020, 1036, 1044, 1045, 1046, 1049], "desislava": 1050, "desktop": 378, "despit": [25, 84, 195, 197, 215, 232, 292, 394, 400, 412, 628, 629, 631, 989, 996, 1018, 1044, 1045], "dessyvv": 1050, "dest": 320, "destin": 1018, "destroi": [265, 418, 796, 874, 1003], "det": [164, 239, 251, 268, 269, 276, 380, 412, 516, 565, 699, 703, 728, 790, 831, 866, 885, 905, 940, 1015, 1048], "det_curv": [256, 699, 783, 790, 993, 1048, 1049, 1054], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "detcurvedisplai": [256, 318, 728, 1048, 1049, 1053, 1054], "detect": [1, 6, 8, 14, 18, 32, 61, 63, 78, 79, 80, 116, 119, 126, 164, 178, 201, 211, 225, 239, 241, 251, 253, 259, 262, 268, 269, 276, 284, 297, 305, 311, 338, 375, 378, 380, 384, 392, 394, 407, 408, 409, 410, 412, 414, 418, 432, 447, 450, 465, 467, 470, 471, 474, 475, 476, 477, 489, 490, 492, 493, 497, 511, 513, 516, 523, 538, 539, 540, 547, 564, 565, 589, 592, 597, 632, 640, 678, 699, 703, 728, 790, 831, 851, 855, 866, 875, 878, 879, 883, 884, 885, 905, 909, 985, 989, 1013, 1014, 1015, 1016, 1018, 1024, 1029, 1030, 1031, 1036, 1039, 1042, 1043, 1044, 1046, 1048, 1049, 1051, 1052], "detection_error_tradeoff": 993, "detector": [375, 394, 851], "determin": [7, 9, 12, 17, 44, 53, 78, 109, 111, 115, 125, 144, 154, 167, 176, 177, 193, 200, 259, 305, 310, 343, 353, 360, 362, 379, 380, 382, 389, 393, 394, 406, 407, 410, 414, 415, 417, 418, 419, 420, 433, 438, 442, 443, 444, 446, 448, 450, 451, 457, 460, 461, 462, 466, 470, 471, 473, 474, 475, 476, 477, 483, 484, 485, 489, 492, 493, 496, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 538, 540, 543, 544, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 583, 584, 585, 589, 592, 595, 603, 608, 609, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 636, 637, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 688, 690, 691, 693, 694, 695, 708, 712, 724, 730, 731, 739, 784, 785, 786, 788, 789, 794, 801, 803, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 838, 839, 841, 848, 850, 851, 856, 861, 862, 863, 869, 870, 878, 879, 880, 882, 886, 894, 905, 906, 908, 911, 914, 916, 919, 940, 956, 962, 964, 967, 982, 985, 987, 992, 996, 998, 999, 1001, 1003, 1006, 1007, 1009, 1020, 1036, 1041, 1044, 1045, 1047, 1048, 1049], "determinist": [56, 122, 367, 376, 382, 394, 410, 444, 448, 450, 452, 453, 454, 459, 460, 463, 552, 560, 561, 565, 566, 584, 585, 692, 696, 812, 813, 861, 913, 914, 985, 989, 1037, 1040, 1042, 1044, 1045, 1048, 1051, 1052], "detlefsen": 1050, "detomaso": 1043, "detriment": [5, 145, 273, 367, 419, 989], "dev": [158, 167, 215, 264, 269, 378, 380, 384, 386, 388, 993, 1018, 1032, 1043, 1048, 1051, 1052], "dev0": [378, 384, 1017, 1032], "dev514": 1050, "devansh": [1043, 1044], "devanshkyada27": 1053, "devashish": 1042, "devel": 378, "develop": [6, 25, 54, 106, 157, 215, 253, 257, 259, 278, 283, 315, 321, 351, 366, 369, 375, 379, 380, 386, 392, 394, 395, 396, 400, 403, 406, 408, 412, 413, 417, 418, 424, 427, 434, 494, 801, 977, 989, 993, 996, 1009, 1011, 1013, 1014, 1015, 1017, 1018, 1027, 1036, 1044, 1045, 1046, 1051, 1054, 1055], "developing_estim": [106, 1015], "devi": 1048, "devianc": [121, 124, 197, 215, 321, 417, 554, 559, 560, 562, 563, 566, 649, 670, 681, 722, 724, 725, 748, 750, 753, 914, 916, 989, 1009, 1037, 1046, 1047, 1049, 1050, 1052], "deviant": [203, 999], "deviat": [11, 18, 32, 59, 78, 112, 115, 116, 117, 118, 120, 146, 149, 154, 156, 158, 167, 176, 203, 236, 256, 257, 258, 259, 260, 262, 289, 290, 305, 310, 372, 376, 377, 385, 389, 394, 414, 417, 420, 451, 473, 502, 512, 513, 514, 515, 517, 518, 519, 523, 525, 526, 531, 553, 595, 612, 635, 645, 646, 672, 725, 753, 807, 824, 851, 874, 875, 885, 894, 895, 896, 989, 993, 999, 1003, 1027, 1042, 1043, 1044, 1047, 1048, 1049], "devic": [414, 583, 1013], "devnani": 1048, "deweight": 944, "dexter": 1046, "dezub": 1043, "df": [2, 11, 23, 25, 125, 130, 166, 168, 176, 181, 197, 215, 248, 259, 309, 311, 322, 352, 385, 418, 591, 592, 982, 983, 1053], "df_": 215, "df_freq": 215, "df_max_": [23, 25], "df_min_": [23, 25], "df_out": 322, "df_sev": 215, "df_std": 352, "df_test": [197, 215], "df_train": [197, 215], "dfrac": [997, 1003], "dgemm": 366, "dgesdd": 386, "dhanshre": 1051, "dhillon": [17, 406, 452, 454, 512], "dhingra": [1044, 1045, 1048, 1053], "di": [394, 410, 415, 532, 538, 665, 686, 687, 898, 1040, 1049], "dia": 1053, "diabet": [5, 123, 133, 135, 139, 145, 146, 162, 164, 184, 185, 186, 193, 194, 254, 255, 264, 272, 373, 417, 502, 653, 654, 801, 806, 826, 827, 828, 1001, 1015, 1020, 1024, 1031], "diabetes_i": [193, 1027], "diabetes_x": [193, 1027], "diabetes_x_test": [193, 1027], "diabetes_x_train": [193, 1027], "diabetes_y_pr": 193, "diabetes_y_test": [193, 1027], "diabetes_y_train": [193, 1027], "diadochokinet": 1051, "diag": [10, 80, 157, 245, 248, 415, 420, 533, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 798, 799, 989, 1051], "diag_kind": [166, 167], "diagnos": [146, 262, 377, 388, 396, 411], "diagnosi": [146, 262, 377, 852], "diagnost": [146, 170, 262, 373, 394, 409, 501, 713, 827, 828, 993, 1001, 1013, 1014, 1031], "diagon": [2, 23, 25, 38, 80, 83, 215, 236, 245, 248, 249, 252, 339, 406, 410, 412, 420, 454, 472, 473, 479, 482, 512, 514, 528, 533, 551, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 651, 652, 655, 656, 657, 683, 684, 702, 716, 793, 798, 799, 849, 857, 985, 987, 989, 992, 993, 996, 1003, 1042, 1044, 1045, 1046], "diagram": [23, 25, 69, 238, 316, 322, 382, 407, 410, 439, 440, 469, 903, 1003, 1047, 1048, 1053, 1054], "diamet": 410, "diamond": 246, "diaz": 1044, "dice": [451, 458, 700, 779, 780, 781, 996], "dicedist": 700, "dichotomis": 1009, "dickerson": 1037, "dickson": 1043, "dico": 96, "dict": [7, 8, 9, 10, 15, 24, 37, 43, 68, 71, 72, 99, 115, 120, 122, 124, 195, 203, 226, 235, 245, 257, 258, 260, 263, 266, 268, 283, 287, 307, 311, 319, 330, 339, 343, 352, 353, 368, 372, 374, 382, 392, 394, 411, 414, 421, 422, 424, 428, 432, 434, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 712, 714, 763, 766, 772, 780, 781, 798, 799, 800, 801, 804, 805, 807, 812, 813, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 930, 931, 947, 950, 953, 982, 993, 1003, 1024, 1025, 1029, 1031, 1036, 1042, 1043, 1052, 1053, 1054], "dict_count_vector": 353, "dict_init": [532, 538, 546, 547], "dict_kei": 627, "dict_learn": [389, 532, 538, 547, 1037, 1044, 1046, 1049, 1050, 1052], "dict_learning_onlin": [546, 1037, 1046, 1049, 1050, 1053], "dict_pos_code_estim": 93, "dict_pos_dict_estim": 93, "dict_pos_estim": 93, "dict_typ": 582, "dictat": 410, "dictionari": [3, 4, 5, 6, 34, 46, 49, 51, 66, 92, 94, 104, 117, 125, 127, 164, 196, 233, 235, 253, 352, 353, 373, 374, 375, 382, 392, 394, 418, 450, 465, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 527, 532, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 568, 569, 570, 571, 582, 583, 585, 588, 589, 590, 595, 633, 634, 635, 665, 686, 687, 702, 712, 714, 801, 804, 805, 812, 813, 815, 823, 828, 864, 869, 878, 913, 914, 915, 916, 920, 930, 950, 953, 982, 989, 993, 1008, 1015, 1020, 1029, 1030, 1031, 1036, 1044, 1047, 1048, 1049, 1050, 1051], "dictionarylearn": [415, 538, 540, 541, 543, 544, 545, 546, 547, 1037, 1041, 1043, 1046, 1049, 1050, 1051, 1052], "dictlearn": 1041, "dictvector": [17, 68, 164, 330, 350, 351, 352, 354, 375, 418, 489, 583, 589, 590, 591, 592, 878, 1015, 1036, 1037, 1040, 1046, 1048, 1049, 1052, 1053], "did": [122, 149, 167, 170, 197, 205, 215, 244, 253, 312, 375, 403, 628, 713, 820, 907, 1028, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051], "didact": [380, 1014], "didi": [1042, 1043, 1044, 1045], "didn": [233, 362, 394, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "die": 990, "diebold": 259, "diederik": [862, 863, 997, 1051], "diederikwp": 1051, "diego": [1037, 1038], "diegodlh": [1043, 1044], "diemert": [5, 6, 8, 1018, 1038, 1039], "diesel": [197, 215], "dietterich": [259, 835, 994], "diff": [383, 993], "diff_embed": 293, "differ": [2, 3, 5, 8, 10, 12, 13, 18, 19, 22, 25, 28, 29, 32, 34, 35, 37, 39, 40, 41, 43, 44, 45, 47, 50, 51, 53, 55, 56, 58, 62, 63, 64, 65, 66, 68, 69, 70, 72, 78, 83, 84, 88, 89, 90, 93, 95, 96, 98, 100, 101, 102, 109, 112, 114, 115, 118, 119, 120, 122, 124, 125, 126, 130, 131, 132, 133, 136, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 167, 169, 173, 176, 177, 180, 183, 184, 185, 186, 188, 194, 197, 198, 199, 201, 202, 203, 204, 205, 214, 215, 218, 219, 220, 221, 223, 226, 228, 231, 232, 233, 236, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 273, 274, 275, 278, 281, 283, 286, 289, 290, 292, 299, 300, 304, 306, 307, 309, 310, 313, 315, 331, 334, 335, 337, 338, 339, 341, 342, 346, 347, 349, 351, 352, 353, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 383, 385, 387, 389, 393, 394, 397, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 435, 438, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 463, 465, 476, 479, 491, 494, 495, 497, 504, 505, 509, 510, 513, 515, 523, 538, 539, 540, 541, 547, 548, 550, 551, 556, 557, 564, 582, 583, 589, 590, 591, 592, 595, 612, 614, 615, 616, 620, 623, 624, 628, 632, 633, 634, 635, 639, 644, 645, 646, 648, 650, 652, 654, 656, 659, 662, 667, 668, 669, 673, 675, 677, 678, 679, 681, 691, 693, 695, 699, 701, 702, 705, 706, 707, 708, 710, 716, 718, 719, 728, 729, 730, 731, 732, 735, 736, 738, 744, 758, 759, 760, 762, 779, 783, 784, 785, 787, 788, 790, 793, 794, 796, 799, 801, 803, 804, 805, 806, 807, 810, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 828, 829, 832, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 855, 858, 861, 865, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 905, 906, 907, 910, 913, 914, 915, 916, 950, 957, 982, 983, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1028, 1029, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "difference_plot": 264, "differenti": [88, 266, 417, 420, 560, 561, 620, 623], "difficult": [53, 109, 167, 205, 236, 380, 388, 407, 415, 417, 554, 555, 560, 562, 563, 988, 990, 992, 996, 998, 1000, 1009, 1018, 1036, 1050], "difficulti": [7, 25, 215, 305, 368, 380, 407, 862, 863, 992, 996], "diffus": 154, "digest": [380, 1051], "digg": [1018, 1043], "digicosm": 0, "digit": [3, 10, 11, 27, 33, 34, 37, 39, 41, 43, 44, 46, 49, 51, 55, 57, 58, 59, 60, 62, 66, 70, 71, 83, 86, 91, 96, 114, 135, 139, 144, 146, 164, 187, 188, 204, 212, 213, 217, 218, 220, 222, 224, 230, 231, 235, 246, 252, 257, 258, 261, 287, 292, 293, 298, 300, 301, 303, 321, 325, 328, 332, 352, 373, 380, 386, 410, 416, 417, 419, 442, 446, 448, 503, 542, 545, 550, 567, 659, 689, 690, 691, 692, 693, 698, 705, 706, 714, 718, 719, 738, 794, 796, 831, 847, 854, 861, 865, 866, 875, 885, 891, 898, 901, 910, 917, 918, 919, 982, 988, 990, 993, 996, 998, 1006, 1015, 1020, 1024, 1027, 1028, 1031, 1040], "digraph": 917, "dijkstra": [389, 689, 990], "dilemma": 988, "dillon": [1044, 1045, 1046], "dilut": [170, 377], "dilutedsauc": 1044, "dim": [206, 230, 291, 292, 294, 335, 336, 528, 700, 1053], "dim_reduction_method": 292, "dimens": [7, 10, 11, 13, 35, 38, 51, 80, 83, 88, 93, 146, 151, 153, 155, 157, 168, 180, 181, 195, 220, 222, 226, 230, 231, 237, 244, 245, 287, 288, 292, 308, 343, 351, 352, 353, 375, 377, 381, 394, 408, 410, 415, 416, 420, 422, 443, 444, 446, 448, 449, 450, 453, 465, 466, 483, 484, 485, 494, 495, 516, 525, 526, 530, 531, 534, 542, 550, 583, 584, 585, 586, 588, 590, 598, 612, 620, 623, 642, 645, 660, 691, 692, 693, 695, 696, 700, 765, 826, 845, 846, 850, 864, 897, 898, 899, 907, 908, 909, 910, 911, 925, 926, 927, 956, 964, 967, 983, 985, 987, 989, 990, 991, 994, 996, 997, 999, 1005, 1008, 1020, 1027, 1028, 1043, 1045, 1046, 1048], "dimension": [4, 7, 8, 17, 29, 31, 38, 42, 52, 53, 55, 56, 60, 67, 69, 71, 72, 74, 83, 84, 90, 93, 97, 100, 101, 109, 114, 128, 137, 138, 146, 149, 151, 152, 156, 164, 181, 193, 198, 214, 217, 219, 220, 222, 224, 226, 230, 231, 234, 244, 245, 258, 284, 287, 291, 293, 297, 307, 336, 343, 351, 362, 366, 372, 375, 376, 377, 380, 389, 394, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 446, 448, 450, 466, 470, 474, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 498, 501, 502, 503, 505, 506, 511, 516, 520, 533, 535, 536, 539, 540, 541, 542, 545, 548, 550, 564, 567, 574, 600, 608, 632, 641, 642, 643, 653, 689, 690, 691, 692, 693, 694, 695, 697, 700, 711, 726, 798, 799, 801, 831, 845, 846, 847, 850, 853, 854, 861, 865, 866, 869, 875, 880, 885, 897, 898, 899, 905, 909, 942, 979, 984, 985, 988, 989, 994, 995, 999, 1005, 1006, 1007, 1008, 1009, 1015, 1016, 1018, 1020, 1021, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1048, 1051, 1052], "dimensionalityreduct": 377, "diminish": 418, "dimitri": [1049, 1050, 1051, 1052, 1053], "dimmick": 377, "dingwal": 1043, "dionisi": 1050, "diop": 1046, "direct": [10, 83, 84, 93, 95, 101, 146, 203, 243, 249, 256, 292, 302, 310, 339, 344, 378, 380, 381, 384, 388, 395, 397, 410, 413, 415, 418, 419, 453, 463, 472, 473, 479, 535, 542, 550, 589, 590, 592, 603, 642, 689, 854, 987, 988, 989, 994, 996, 998, 1014, 1028, 1036, 1039], "direction": 1054, "direction_vector": 302, "directli": [0, 4, 17, 25, 43, 44, 54, 69, 114, 119, 146, 157, 181, 185, 197, 203, 215, 227, 264, 302, 305, 319, 322, 323, 353, 362, 366, 378, 380, 381, 382, 384, 386, 393, 394, 395, 405, 406, 407, 410, 411, 412, 413, 414, 418, 420, 443, 453, 463, 465, 470, 475, 528, 568, 569, 570, 571, 598, 612, 621, 633, 644, 647, 648, 653, 654, 661, 662, 663, 664, 665, 678, 682, 685, 691, 775, 779, 782, 793, 794, 801, 804, 805, 815, 829, 848, 850, 864, 865, 866, 872, 882, 884, 887, 894, 961, 982, 989, 991, 996, 998, 1000, 1003, 1008, 1009, 1014, 1021, 1024, 1025, 1036, 1044, 1045, 1047, 1048, 1049, 1052, 1053], "director": 1018, "directori": [0, 6, 285, 374, 378, 380, 382, 386, 388, 394, 397, 411, 442, 446, 451, 487, 500, 865, 866, 1050], "direr": [1039, 1040, 1043, 1044], "dirichlet": [1, 4, 14, 164, 223, 243, 244, 249, 254, 319, 418, 489, 537, 539, 541, 589, 592, 798, 1013, 1015, 1030, 1031, 1036, 1041, 1042], "dirichlet_distribut": [243, 798, 992, 1042], "dirichlet_process": [243, 249, 798, 992, 1042], "disabl": [113, 233, 253, 312, 322, 351, 378, 380, 400, 418, 450, 461, 469, 538, 539, 540, 547, 560, 561, 562, 563, 864, 882, 894, 903, 925, 926, 1003, 1042, 1045, 1049, 1051, 1054], "disadvantag": [415, 420, 989, 990, 997, 1007, 1008, 1009], "disagre": [736, 1000], "disambigu": [380, 833, 902, 1006, 1051], "disappear": [989, 1036], "disappoint": 2, "discard": [6, 53, 178, 262, 366, 406, 412, 419, 509, 510, 550, 598, 628, 631, 645, 878, 882, 894, 983, 989, 1044, 1048, 1054], "disclaim": 1013, "disclos": 393, "disconnect": 1049, "discontinu": [2, 392], "discord": [706, 1017], "discount": [375, 410, 727, 757, 1043, 1046], "discounted_cumulative_gain": 727, "discourag": [201, 392, 397, 690], "discov": [352, 408, 410, 415, 418, 421, 445, 449, 1020, 1051, 1054], "discoveri": [259, 375, 386, 389, 410, 417, 419, 421, 445, 512, 556, 557, 564, 593, 596, 597, 599, 600, 601, 607, 721, 741, 784, 993, 1005, 1018, 1050, 1051], "discrep": [418, 1029, 1040], "discret": [2, 6, 29, 44, 54, 73, 90, 102, 107, 109, 128, 148, 159, 164, 168, 177, 197, 215, 233, 237, 278, 293, 299, 304, 308, 313, 331, 358, 368, 372, 375, 376, 384, 393, 394, 410, 415, 418, 420, 439, 440, 449, 453, 461, 462, 463, 493, 515, 516, 523, 554, 560, 572, 589, 590, 593, 596, 597, 600, 601, 608, 609, 611, 612, 613, 617, 618, 619, 658, 659, 743, 801, 812, 823, 831, 840, 841, 844, 866, 870, 878, 879, 882, 885, 894, 905, 910, 914, 956, 982, 989, 990, 991, 993, 994, 996, 1009, 1013, 1015, 1020, 1031, 1038, 1041, 1049, 1050, 1051], "discrete_featur": [608, 609], "discrim": 197, "discrimin": [7, 8, 13, 27, 33, 76, 77, 78, 79, 80, 101, 141, 143, 146, 164, 173, 212, 219, 234, 248, 292, 369, 377, 407, 417, 476, 513, 550, 551, 567, 632, 784, 854, 982, 990, 993, 996, 1007, 1009, 1015, 1016, 1027, 1031, 1039], "discriminant_analysi": [29, 31, 32, 101, 219, 292, 362, 369, 405, 537, 854, 987, 994, 1036, 1039, 1040, 1041, 1042, 1043], "discriminatori": 407, "discuss": [2, 51, 56, 146, 167, 186, 218, 223, 253, 262, 278, 351, 362, 368, 375, 377, 380, 385, 386, 388, 392, 394, 395, 409, 410, 412, 416, 417, 420, 499, 683, 684, 847, 848, 853, 855, 856, 983, 987, 989, 990, 993, 996, 1003, 1010, 1014, 1017, 1039], "diseas": [5, 133, 146, 162, 262, 377, 713, 993, 1027], "disentangl": 990, "disjoint": [407, 410, 411, 438, 705, 732, 756, 758, 990], "disk": [4, 12, 375, 380, 385, 394, 403, 1025], "disp": [2, 28, 30, 111, 125, 126, 127, 252, 262, 275, 286, 310, 316, 322, 336, 341, 439, 632, 698, 701, 702, 854], "disp1": 633, "disp2": 633, "dispar": [691, 695, 990], "dispatch": [69, 253, 369, 394, 405, 469, 801, 815, 826, 827, 828, 903, 959, 960, 1024, 1031, 1051], "dispatch_next": 959, "dispatch_one_batch": 959, "dispers": [32, 273, 410, 711, 726, 989], "displai": [10, 23, 25, 32, 35, 44, 46, 58, 69, 79, 80, 83, 84, 87, 93, 115, 126, 127, 130, 161, 164, 167, 168, 182, 184, 215, 225, 226, 236, 239, 240, 241, 247, 253, 256, 260, 261, 266, 268, 269, 274, 293, 311, 316, 317, 338, 357, 366, 380, 382, 383, 387, 389, 397, 408, 411, 415, 418, 419, 424, 439, 465, 468, 469, 497, 542, 565, 631, 632, 633, 659, 688, 698, 699, 701, 702, 703, 714, 719, 783, 790, 801, 807, 815, 824, 831, 865, 866, 878, 880, 885, 903, 910, 917, 918, 919, 933, 959, 980, 993, 997, 1013, 1015, 1031, 1045, 1047, 1048, 1050, 1051], "display_label": [4, 252, 698, 1025, 1048], "dispos": [982, 1029], "disproportion": 416, "disput": 115, "disregard": [351, 394, 418, 433, 466, 483, 484, 485, 553, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 722, 723, 724, 725, 786, 838, 839, 848, 856, 863, 874, 875, 881, 882, 885, 890, 893, 894, 896, 906, 908, 911, 914, 916, 993, 1044], "disrupt": [367, 378], "dissemin": 1013, "dissimilar": [221, 343, 394, 406, 453, 691, 695, 990, 1042, 1052], "dissimilarity_matrix_": 691, "dist": [78, 219, 230, 384, 470, 471, 472, 473, 474, 475, 476, 477, 700, 764, 770, 845, 846], "dist_": [470, 475], "dist_embed": 293, "dist_linkag": 170, "dist_matrix": 453, "dist_matrix_": 689, "distanc": [7, 37, 38, 53, 55, 58, 59, 63, 65, 75, 79, 81, 98, 100, 146, 161, 164, 170, 183, 198, 200, 218, 220, 223, 230, 236, 283, 285, 286, 291, 293, 295, 296, 305, 310, 315, 319, 320, 343, 351, 352, 366, 377, 389, 392, 394, 406, 410, 412, 415, 416, 420, 421, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 456, 457, 458, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 539, 541, 548, 608, 609, 616, 620, 621, 623, 624, 629, 659, 660, 667, 669, 675, 676, 677, 678, 679, 689, 690, 691, 693, 694, 695, 696, 697, 700, 704, 726, 735, 759, 761, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 779, 780, 781, 782, 793, 794, 797, 834, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 884, 899, 903, 905, 907, 909, 910, 911, 913, 914, 915, 916, 983, 987, 990, 991, 993, 996, 999, 1003, 1005, 1007, 1008, 1014, 1015, 1027, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "distance_matrix": 170, "distance_metr": [779, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859], "distance_threshold": [39, 442, 446, 1045, 1048], "distancemetr": [394, 416, 848, 996, 1044, 1048, 1049, 1050, 1053], "distancemetric64": [845, 846], "distances_": [39, 442, 446, 1048], "distant": [410, 693, 710, 996], "distil": 223, "distinct": [58, 259, 328, 351, 353, 375, 382, 385, 394, 395, 414, 417, 418, 590, 802, 811, 819, 879, 880, 900, 901, 982, 989, 996, 999, 1029, 1044], "distinguish": [2, 18, 38, 78, 90, 98, 199, 256, 278, 375, 382, 394, 395, 420, 982, 993, 996, 999], "distort": [196, 230, 377, 407, 408, 882, 894, 899, 990, 1003, 1005], "distribut": [1, 2, 6, 7, 8, 11, 14, 18, 25, 32, 35, 37, 42, 50, 51, 53, 55, 60, 73, 77, 78, 79, 84, 90, 109, 111, 122, 126, 141, 146, 149, 158, 164, 166, 167, 170, 173, 176, 197, 199, 201, 220, 222, 226, 230, 236, 243, 248, 249, 253, 255, 259, 265, 267, 273, 278, 284, 288, 297, 304, 305, 307, 310, 313, 321, 326, 327, 344, 346, 351, 366, 367, 373, 376, 377, 378, 380, 381, 384, 385, 386, 394, 407, 408, 410, 412, 414, 415, 416, 422, 448, 450, 470, 471, 472, 473, 474, 475, 476, 477, 489, 499, 504, 516, 517, 518, 519, 520, 524, 533, 534, 537, 551, 552, 553, 564, 612, 626, 641, 643, 645, 646, 649, 659, 660, 670, 680, 681, 689, 690, 691, 693, 707, 709, 725, 753, 790, 798, 799, 805, 806, 813, 815, 819, 820, 831, 841, 844, 850, 854, 861, 868, 881, 882, 883, 884, 885, 893, 894, 895, 900, 901, 909, 920, 944, 961, 982, 987, 989, 991, 992, 993, 995, 996, 998, 999, 1005, 1006, 1011, 1013, 1014, 1015, 1020, 1024, 1028, 1030, 1031, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "district": [162, 375], "distutils_use_sdk": 378, "ditenberg": 1043, "div": [236, 938], "dive": [84, 380, 386], "diverg": [13, 121, 218, 223, 288, 539, 541, 548, 693, 861, 990, 992, 993, 998, 1000, 1043, 1044, 1049], "divers": [394, 417], "divid": [35, 41, 46, 89, 93, 143, 154, 197, 236, 243, 352, 362, 376, 377, 406, 409, 410, 414, 415, 417, 470, 471, 472, 473, 474, 475, 476, 477, 513, 520, 535, 542, 677, 678, 679, 720, 727, 735, 739, 757, 795, 797, 862, 863, 907, 910, 942, 945, 946, 982, 990, 992, 993, 996, 1003, 1007, 1029, 1036, 1043, 1044, 1047], "dividend": 993, "divis": [319, 410, 418, 591, 592, 595, 713, 714, 730, 731, 739, 747, 784, 785, 788, 993, 1028, 1040, 1044, 1045, 1048, 1052, 1053], "divisor": 993, "divo": 1046, "divyanshu": 1049, "divyaprabha": 1047, "diwakar": 1050, "dixon": [770, 1046, 1047], "dizietasahi": 1046, "di\u1ec5n": 1051, "djipei": [1041, 1042], "dl": 677, "dlabal": 1040, "dll": 1050, "dlovel": 1044, "dmallia17": 1049, "dmitri": [1041, 1043, 1044, 1045, 1049, 1052, 1053], "dmitrij": 1040, "dmytro": 1049, "dn": [0, 996], "dna": [392, 629, 983], "dnf": 397, "do": [0, 2, 8, 11, 23, 25, 40, 53, 59, 65, 72, 88, 97, 99, 102, 113, 116, 118, 122, 123, 125, 130, 143, 154, 161, 167, 168, 169, 194, 197, 201, 215, 218, 220, 233, 234, 236, 249, 253, 254, 257, 260, 262, 281, 283, 285, 289, 318, 322, 331, 336, 339, 343, 344, 346, 351, 352, 353, 360, 362, 366, 367, 368, 375, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 394, 395, 403, 407, 408, 410, 411, 412, 413, 414, 417, 418, 419, 429, 451, 462, 465, 468, 504, 537, 539, 543, 545, 553, 556, 582, 583, 589, 590, 592, 633, 634, 646, 647, 653, 656, 657, 659, 660, 667, 669, 677, 738, 764, 779, 783, 818, 821, 837, 838, 842, 869, 870, 872, 879, 883, 885, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 924, 967, 982, 985, 987, 989, 990, 993, 994, 996, 997, 1001, 1003, 1008, 1009, 1013, 1014, 1017, 1018, 1020, 1027, 1028, 1029, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "do_early_stopping_": [562, 563], "doc": [0, 2, 6, 11, 17, 351, 353, 367, 380, 384, 385, 388, 394, 397, 402, 418, 589, 590, 592, 779, 782, 793, 794, 828, 1029, 1036, 1040, 1050], "doc_it": 6, "doc_topic_distr": [537, 1043], "doc_topic_prior": [415, 537], "doc_topic_prior_": 537, "docker": [388, 403, 1049, 1050], "dock\u00e8": [1045, 1046, 1047, 1053, 1054], "docs_new": 1029, "docs_test": 1029, "docstr": [380, 382, 386, 394, 449, 462, 473, 700, 702, 932, 982, 993, 996, 997, 1007, 1036, 1043, 1044, 1049, 1050, 1053], "doctest": [380, 394, 1021, 1036], "doctest_mod": 1021, "document": [1, 4, 5, 8, 10, 13, 14, 15, 16, 19, 20, 24, 29, 35, 43, 47, 49, 54, 55, 56, 58, 59, 68, 69, 70, 71, 87, 88, 90, 93, 107, 114, 116, 117, 126, 127, 130, 133, 143, 154, 157, 167, 168, 169, 178, 180, 194, 195, 212, 227, 228, 229, 230, 233, 234, 236, 237, 238, 239, 240, 248, 252, 253, 257, 259, 260, 266, 271, 273, 301, 302, 311, 316, 319, 320, 322, 328, 330, 344, 346, 353, 354, 360, 366, 367, 368, 369, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 392, 394, 395, 397, 400, 403, 406, 408, 410, 415, 418, 421, 445, 448, 449, 450, 451, 454, 458, 465, 489, 490, 500, 502, 512, 522, 524, 537, 545, 565, 589, 590, 591, 592, 595, 605, 632, 640, 644, 659, 660, 667, 669, 675, 677, 697, 698, 700, 704, 706, 718, 738, 759, 760, 770, 779, 780, 781, 794, 796, 801, 804, 805, 807, 815, 823, 824, 835, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 866, 877, 905, 910, 921, 924, 926, 939, 959, 982, 989, 991, 993, 994, 995, 996, 997, 1001, 1007, 1010, 1011, 1012, 1015, 1018, 1022, 1027, 1029, 1037, 1038, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "document_clust": 1042, "document_nam": 17, "doddington": 993, "doe": [2, 5, 6, 7, 10, 11, 22, 23, 29, 32, 38, 44, 51, 53, 55, 68, 70, 71, 84, 103, 109, 114, 115, 118, 119, 120, 124, 125, 130, 146, 155, 167, 168, 181, 194, 197, 203, 215, 218, 219, 220, 223, 226, 229, 230, 231, 233, 234, 236, 245, 246, 253, 254, 259, 261, 262, 266, 268, 269, 281, 283, 296, 305, 307, 309, 311, 312, 318, 319, 329, 330, 337, 339, 346, 348, 351, 352, 353, 366, 367, 374, 378, 380, 381, 382, 384, 388, 393, 394, 400, 403, 407, 408, 410, 411, 414, 415, 417, 418, 419, 420, 435, 441, 443, 447, 448, 450, 451, 455, 457, 466, 468, 474, 480, 488, 500, 504, 509, 528, 536, 538, 539, 540, 545, 547, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 582, 583, 584, 589, 590, 592, 594, 595, 598, 603, 607, 611, 633, 639, 650, 651, 652, 655, 656, 657, 660, 672, 683, 684, 699, 701, 703, 708, 729, 730, 731, 735, 737, 739, 744, 747, 779, 784, 785, 788, 789, 795, 801, 804, 805, 815, 862, 866, 867, 868, 870, 872, 874, 877, 878, 879, 882, 885, 886, 894, 897, 898, 902, 905, 906, 913, 914, 915, 916, 920, 925, 929, 942, 945, 946, 959, 961, 977, 982, 983, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1001, 1003, 1007, 1008, 1009, 1029, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "doepk": 1043, "doesn": [6, 167, 197, 233, 244, 281, 301, 339, 388, 394, 397, 403, 410, 418, 419, 423, 435, 476, 633, 634, 667, 669, 677, 717, 829, 832, 837, 847, 848, 862, 874, 875, 992, 993, 1009, 1040, 1053], "dog": [318, 319, 321, 322, 323, 583, 784, 886, 1003], "dohmatob": [1041, 1042, 1043], "dohri": 1053, "doi": [173, 197, 215, 380, 410, 677], "dok": [554, 555, 872, 1049], "dokato": 1043, "dolan": 375, "dollar": [167, 375], "dolmatov": 1046, "dolphin": 351, "domain": [125, 197, 273, 311, 394, 396, 414, 636, 722, 724, 725, 802, 803, 808, 809, 810, 989, 1014], "domin": [115, 162, 170, 197, 202, 236, 268, 310, 375, 386, 407, 885, 995, 1003, 1009, 1052], "domingo": [25, 789, 993], "dominik": [1043, 1052], "don": [10, 25, 52, 68, 125, 167, 219, 233, 234, 253, 259, 283, 329, 336, 340, 351, 352, 366, 374, 380, 382, 384, 386, 388, 393, 400, 411, 418, 647, 653, 833, 913, 914, 915, 916, 957, 982, 989, 992, 994, 997, 999, 1007, 1029, 1040, 1045, 1052, 1053, 1054], "don86": 1043, "donald": [4, 375, 410, 726, 983], "donald_rumsfeld": 1025, "donat": 227, "done": [4, 6, 7, 9, 11, 13, 15, 17, 46, 48, 50, 51, 96, 125, 143, 146, 154, 167, 168, 173, 176, 181, 183, 201, 214, 232, 233, 248, 257, 260, 263, 268, 283, 308, 317, 351, 352, 353, 362, 367, 374, 378, 380, 382, 384, 387, 388, 389, 392, 394, 400, 410, 412, 414, 415, 417, 442, 443, 446, 451, 453, 473, 483, 484, 485, 486, 490, 536, 562, 563, 583, 607, 608, 609, 629, 631, 633, 635, 644, 645, 646, 660, 723, 742, 798, 799, 801, 815, 820, 821, 823, 869, 883, 978, 982, 983, 986, 989, 990, 993, 995, 996, 997, 1003, 1006, 1007, 1008, 1009, 1014, 1020, 1024, 1025, 1027, 1029, 1036, 1038, 1043, 1046, 1048, 1052], "dong": 1046, "donn": 1041, "donoho": [690, 694, 990], "donor": [146, 377], "donovan": 1042, "dor": 1044, "dorin": [61, 449], "dormagen": 1046, "dot": [15, 30, 31, 42, 47, 52, 55, 60, 76, 77, 78, 80, 83, 84, 94, 95, 96, 100, 102, 109, 112, 149, 150, 156, 157, 167, 178, 181, 189, 191, 192, 204, 231, 244, 245, 247, 248, 253, 263, 335, 337, 343, 366, 382, 386, 389, 394, 406, 415, 418, 534, 539, 541, 548, 591, 592, 615, 647, 648, 651, 653, 654, 655, 658, 661, 662, 663, 664, 682, 685, 688, 762, 764, 877, 917, 943, 991, 995, 1003, 1007, 1008, 1028, 1045], "dot_data": [917, 1009], "dot_product": 943, "dotproduct": [152, 153, 158, 420, 612, 626], "dotson": 1041, "doubl": [32, 115, 271, 380, 394, 415, 539, 541, 542, 548, 845, 846, 856, 977, 983, 1008, 1009, 1036, 1046, 1047], "doubt": [380, 381, 384, 989, 999, 1013], "doucet": 1050, "douetteau": 1018, "doug": [1037, 1038, 1048], "dougal": [1038, 1040, 1041, 1043, 1044, 1045, 1046], "dougla": 1044, "douillard": 1043, "doumouro": 1045, "douriez": [1046, 1047], "dowl": 1042, "down": [44, 45, 79, 109, 212, 213, 220, 230, 231, 233, 262, 278, 302, 305, 343, 362, 374, 383, 388, 394, 412, 415, 444, 451, 457, 591, 594, 595, 640, 650, 775, 779, 782, 874, 875, 880, 883, 884, 895, 907, 910, 917, 989, 1020, 1028, 1044], "downarrow": 995, "download": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 373, 375, 377, 378, 384, 385, 388, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 511, 1009, 1025, 1027, 1029, 1031, 1040, 1041, 1044, 1048, 1049, 1050], "download_20newsgroup": 1040, "download_if_miss": [489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 1043], "download_url": 6, "downsampl": 96, "downscal": 1029, "downsid": 353, "downstream": [2, 78, 312, 353, 418, 532, 535, 538, 542, 543, 607, 878, 1003, 1046], "downweight": [412, 537], "dowon": [1044, 1045], "dozen": [393, 420], "do\u0161ilovi\u0107": [1053, 1054], "dp": [244, 249], "dpgmm": [244, 249, 1036, 1040, 1042], "dpi": [208, 919, 1049], "dpy_debug": 386, "dqd": 386, "dr": [0, 146, 377, 410, 1050], "draft": [384, 395], "dragon": 1003, "drama": 418, "dramat": 368, "dramsch": 1046, "drastic": [149, 230, 267, 410, 414, 996, 1006], "draw": [2, 5, 58, 158, 167, 193, 237, 261, 266, 339, 387, 413, 415, 416, 417, 556, 557, 558, 559, 564, 565, 566, 567, 612, 635, 702, 807, 824, 917, 919, 992, 1013, 1023, 1049, 1050], "drawback": [117, 214, 985, 988], "drawcoastlin": [9, 296], "drawcountri": [9, 296], "drawn": [5, 50, 78, 112, 145, 149, 158, 166, 237, 266, 287, 351, 376, 410, 416, 417, 420, 422, 470, 471, 472, 473, 474, 475, 476, 477, 516, 524, 534, 556, 557, 558, 559, 564, 565, 566, 567, 612, 628, 633, 642, 841, 897, 898, 915, 916, 989, 1003, 1005, 1039], "drawstyl": [356, 701], "draxu": 1036, "drew": 1045, "drewhogg": 1051, "drewmjohnston": 1045, "drgfreeman": 1046, "driessen": [412, 470, 475, 999], "drift": 1014, "drivag": [197, 215], "drive": [368, 415, 416, 550, 1007, 1018, 1029], "driven": [0, 170, 1018], "driver": [197, 215, 1051], "drop": [2, 3, 11, 69, 73, 84, 125, 154, 166, 167, 168, 170, 197, 201, 215, 236, 240, 253, 269, 311, 317, 320, 322, 352, 384, 388, 411, 415, 417, 465, 468, 568, 569, 570, 571, 696, 701, 703, 783, 790, 864, 878, 884, 983, 989, 993, 1003, 1013, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "drop_binary_enc": 878, "drop_dupl": 271, "drop_enc": [878, 1003], "drop_first": 696, "drop_idx": 878, "drop_idx_": [878, 1047, 1051], "drop_intermedi": [701, 703, 783, 790, 1052], "drop_nul": [11, 154], "dropdown": 380, "dropped_result": 119, "dropper": 119, "dror": 1045, "dross": 535, "dro\u017cd\u017c": 1039, "drskd": 1050, "druck": 1050, "drucker": [110, 417, 555], "drug": 989, "dry": 168, "dryden": 68, "ds_ana": 1049, "ds_cnt": [29, 307, 308], "dschult": 15, "dscullei": 450, "dseg": 68, "dsouza": [1047, 1048, 1049, 1050], "dsquareindia": 1042, "dss": 1018, "dt": [48, 96, 131, 154, 417, 418, 1009], "dtreeviz": 1013, "dtype": [2, 6, 8, 9, 15, 46, 47, 51, 63, 68, 69, 119, 121, 123, 124, 126, 150, 151, 152, 162, 167, 168, 199, 215, 240, 243, 253, 257, 263, 267, 273, 278, 290, 296, 311, 318, 319, 321, 327, 360, 374, 375, 380, 382, 392, 394, 405, 411, 414, 417, 425, 426, 428, 431, 443, 444, 448, 449, 450, 451, 452, 454, 460, 465, 467, 468, 470, 473, 475, 489, 490, 491, 492, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 523, 543, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 586, 587, 589, 590, 592, 594, 595, 602, 603, 607, 628, 629, 630, 631, 633, 634, 641, 642, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 672, 674, 676, 698, 700, 706, 715, 716, 732, 739, 742, 756, 787, 807, 826, 828, 829, 841, 845, 846, 848, 856, 870, 876, 878, 879, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 899, 907, 908, 909, 910, 911, 913, 914, 915, 916, 922, 923, 925, 926, 958, 968, 969, 970, 971, 974, 980, 983, 1003, 1006, 1008, 1020, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "dtype_exclud": [69, 467], "dtype_includ": [69, 119, 130, 236, 411, 467], "du": [0, 398, 399, 1036, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "dua": 1045, "dual": [68, 70, 315, 346, 351, 418, 419, 472, 473, 479, 612, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 682, 685, 845, 846, 905, 906, 907, 910, 1008, 1038, 1047, 1050, 1052], "dual_coef_": [536, 644, 907, 908, 909, 910, 911, 1008, 1040], "dual_gap": [472, 473, 479, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "dual_gap_": [647, 648, 653, 654, 661, 662, 663, 664, 1049], "dualiti": [473, 989], "dualtre": [845, 846], "duan": [1045, 1047], "duart": [1041, 1049, 1051], "dubai": 418, "duboi": [1042, 1044], "dubou": 1046, "dubourg": [0, 152, 156, 399, 1018, 1036, 1040], "duchesnai": [0, 399, 1036], "duck": [382, 394, 1046], "ducktyp": [1040, 1053], "duckworth": 1036, "ducout": 1050, "duda": [377, 987], "due": [7, 11, 24, 25, 51, 53, 58, 73, 109, 112, 149, 167, 168, 176, 181, 188, 195, 197, 199, 214, 215, 230, 236, 244, 267, 268, 273, 281, 283, 310, 311, 323, 343, 346, 351, 352, 353, 380, 386, 394, 397, 407, 409, 410, 414, 415, 417, 420, 444, 447, 448, 460, 536, 540, 544, 545, 575, 672, 801, 804, 805, 809, 811, 815, 826, 827, 830, 833, 837, 838, 870, 874, 875, 885, 983, 989, 990, 992, 993, 994, 996, 1000, 1007, 1008, 1014, 1028, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dueck": [36, 441, 455], "dugnat": 1050, "duhaim": 1044, "dummi": [109, 110, 197, 215, 233, 253, 262, 369, 382, 385, 404, 733, 878, 887, 994, 1003, 1009, 1031, 1037, 1039, 1040, 1041, 1043], "dummy_classifiers_misclassification_error": 109, "dummy_clf": [109, 552], "dummy_leaf_": 443, "dummy_regr": 553, "dummy_sev": 215, "dummybiclust": 425, "dummyclassifi": [109, 253, 262, 553, 733, 993, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1054], "dummyestim": [560, 561], "dummyregressor": [197, 215, 552, 993, 994, 1037, 1039, 1040, 1043, 1044, 1046, 1049, 1050, 1054], "dumont": 1009, "dump": [15, 403, 488, 845, 846], "dump_svmlight_fil": [1036, 1037, 1041, 1051, 1053], "duong": 1053, "duplic": [367, 379, 380, 381, 394, 410, 421, 445, 449, 450, 516, 636, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 829, 876, 979, 996, 1036, 1039, 1048, 1050, 1052, 1053], "dupont": 10, "dupr": [189, 205, 283, 285, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "dupr\u00e9": [0, 307, 308, 398, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "duqu": 1049, "durat": [2, 6, 197, 215, 236, 253, 285, 353, 367, 959, 960, 989], "duration_sec": 8, "duration_test": 351, "duration_train": 351, "dure": [0, 2, 3, 10, 11, 48, 53, 56, 70, 73, 84, 98, 113, 119, 120, 125, 127, 143, 149, 154, 167, 168, 170, 186, 198, 205, 253, 257, 261, 273, 283, 317, 318, 343, 366, 368, 378, 380, 382, 385, 394, 395, 410, 411, 415, 417, 418, 420, 421, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 460, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 629, 630, 631, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 701, 790, 798, 799, 800, 801, 804, 805, 815, 823, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 983, 985, 989, 990, 996, 1003, 1005, 1009, 1024, 1029, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "duron": 1050, "duti": 395, "dutt": 1052, "dutta": 1053, "duv2014": 420, "duvenaud": [420, 623, 624], "dwight": 1051, "dx": [10, 12, 700], "dx_c": 1000, "dy": [10, 700], "dye": 1049, "dylan": [1043, 1046], "dynam": [10, 11, 168, 556, 557, 558, 559, 564, 565, 566, 567, 580, 581, 677, 678, 679, 1009, 1018, 1042, 1048, 1053], "dziki": 1039, "d\u00b2": 215, "d\u00f6pfert": 1044, "e": [0, 2, 6, 8, 9, 11, 23, 24, 25, 30, 32, 51, 53, 55, 59, 68, 76, 78, 79, 80, 83, 84, 88, 96, 98, 109, 112, 119, 121, 122, 125, 126, 136, 142, 145, 146, 157, 166, 167, 168, 173, 177, 181, 186, 187, 197, 198, 199, 201, 215, 218, 219, 232, 233, 253, 255, 259, 260, 262, 264, 265, 274, 275, 278, 281, 289, 296, 307, 310, 315, 317, 323, 346, 353, 358, 359, 360, 362, 366, 367, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 392, 393, 394, 397, 400, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 438, 440, 442, 444, 445, 446, 448, 450, 451, 455, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 497, 499, 501, 502, 503, 504, 525, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 589, 590, 591, 592, 594, 595, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 623, 624, 631, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 691, 693, 695, 698, 700, 702, 705, 706, 709, 710, 729, 730, 731, 732, 739, 742, 743, 756, 764, 768, 779, 786, 789, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 814, 815, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 861, 862, 863, 865, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 900, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 936, 941, 942, 944, 947, 948, 950, 953, 961, 968, 979, 982, 983, 985, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1014, 1017, 1018, 1027, 1028, 1029, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "e0129126": 374, "e11": 375, "e2": [899, 989], "e41a1c": [42, 60], "e501": [146, 351], "e_": 415, "each": [2, 5, 6, 8, 9, 10, 11, 13, 15, 18, 23, 24, 25, 30, 32, 35, 39, 41, 42, 45, 47, 51, 53, 56, 58, 59, 68, 69, 71, 72, 73, 83, 84, 87, 88, 89, 90, 93, 94, 98, 100, 101, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 132, 133, 142, 146, 151, 153, 158, 161, 162, 166, 167, 168, 170, 173, 176, 183, 184, 186, 191, 195, 197, 198, 199, 201, 202, 205, 212, 215, 219, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 243, 246, 248, 252, 253, 254, 255, 257, 259, 260, 262, 264, 265, 268, 269, 273, 278, 281, 283, 286, 288, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 310, 311, 312, 315, 317, 318, 319, 321, 322, 326, 327, 328, 331, 339, 343, 346, 352, 353, 356, 357, 360, 362, 366, 367, 368, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 400, 403, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 428, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 708, 709, 711, 714, 720, 726, 729, 730, 731, 739, 740, 746, 747, 749, 751, 752, 754, 755, 759, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 777, 779, 780, 781, 782, 784, 785, 786, 788, 789, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 931, 936, 937, 942, 944, 945, 949, 950, 961, 969, 970, 971, 974, 983, 985, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1020, 1024, 1026, 1027, 1028, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "eager": 253, "eargl": 1050, "earl": 1039, "earli": [2, 5, 13, 42, 60, 108, 109, 115, 118, 123, 134, 164, 175, 185, 186, 204, 216, 309, 316, 345, 394, 417, 442, 446, 450, 464, 491, 497, 537, 538, 539, 540, 547, 554, 555, 560, 561, 562, 563, 572, 628, 646, 657, 667, 668, 669, 677, 679, 693, 751, 831, 862, 863, 967, 990, 996, 1003, 1012, 1014, 1015, 1018, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053], "earlier": [115, 168, 201, 374, 380, 413, 836, 839, 1003, 1034, 1037, 1049, 1051], "earliest": [374, 990], "early_exager": 1043, "early_exagger": 693, "early_stop": [115, 125, 168, 205, 299, 318, 351, 394, 417, 562, 563, 667, 668, 669, 677, 678, 679, 862, 863, 1007, 1044, 1047, 1050, 1051], "earn": [166, 167, 395], "earth": [220, 352, 765, 1013], "eas": [70, 170, 248, 310, 380, 383, 386, 989, 1007, 1013, 1014, 1018, 1047, 1048, 1050], "easi": [89, 168, 205, 215, 246, 253, 257, 259, 339, 351, 362, 375, 386, 388, 392, 393, 403, 410, 417, 501, 505, 511, 872, 982, 988, 992, 1000, 1003, 1013, 1014, 1018, 1029, 1046, 1051, 1052], "easier": [42, 60, 64, 80, 119, 176, 182, 228, 236, 256, 257, 305, 339, 351, 362, 375, 380, 382, 385, 388, 392, 397, 412, 414, 469, 516, 903, 936, 988, 993, 1000, 1009, 1014, 1018, 1029, 1045, 1050], "easiest": [382, 388, 411, 990], "easili": [2, 7, 29, 88, 143, 170, 200, 213, 231, 233, 237, 240, 259, 261, 268, 288, 307, 380, 382, 394, 395, 403, 411, 417, 418, 420, 450, 987, 989, 990, 1003, 1007, 1008, 1009, 1017, 1021, 1024, 1029, 1042], "easlii": 227, "easy_going_classifi": 253, "ec": [305, 531], "ecat": 375, "echo": [378, 384], "eckert": 1041, "eckhart": 495, "eclf": [131, 132, 417], "eclf1": 570, "eclf2": 570, "eclf3": 570, "ecml": 0, "ecoc": 278, "ecolog": [9, 296, 375, 499], "econom": [166, 167, 259], "econometr": 989, "econometrica": 989, "ecosystem": [380, 388, 983, 1012, 1018], "ecuador": [9, 296, 375, 499], "ed": [113, 124, 410, 417, 521, 560, 561, 1005, 1036, 1043], "eddi": [1039, 1053], "eden": 1051, "edern": [1051, 1052], "edg": [10, 24, 44, 64, 96, 119, 144, 221, 266, 388, 394, 406, 410, 412, 454, 562, 563, 586, 587, 589, 590, 592, 798, 842, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 870, 918, 1003, 1006, 1018, 1042, 1044, 1047, 1050], "edge_model": 10, "edgecolor": [10, 22, 28, 29, 32, 40, 43, 54, 58, 65, 89, 90, 99, 111, 118, 126, 128, 129, 131, 132, 138, 141, 150, 151, 153, 157, 168, 180, 189, 199, 206, 209, 210, 211, 230, 231, 232, 234, 236, 243, 246, 259, 262, 274, 286, 289, 290, 291, 294, 299, 307, 308, 310, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 357, 358, 359, 632], "edit": [40, 377, 378, 379, 380, 384, 388, 392, 397, 531, 535, 835, 987, 989, 994, 1000, 1029], "editor": [380, 388, 392], "edm": 989, "edoardo": [1051, 1053, 1055], "edouard": [0, 399, 1036], "edson": [993, 1041], "edu": [4, 6, 9, 15, 44, 146, 156, 173, 179, 218, 246, 258, 278, 288, 296, 309, 351, 374, 375, 377, 410, 450, 488, 501, 503, 509, 510, 511, 535, 642, 645, 650, 659, 667, 668, 677, 680, 683, 684, 840, 842, 843, 844, 854, 861, 898, 900, 913, 914, 989, 991, 1025], "eduardo": [1039, 1041, 1049, 1050], "educ": [166, 167, 322, 380, 497, 717, 994], "edvardlindelof": 1046, "edward": [615, 620, 623, 1039, 1044, 1045, 1046, 1047, 1051], "edwinensa": 1042, "edwinwenink": 1049, "eec": [450, 642], "ef": 1051, "eff": 1009, "effect": [2, 4, 25, 35, 37, 38, 43, 44, 51, 55, 60, 63, 67, 71, 74, 84, 90, 96, 98, 109, 120, 122, 124, 126, 127, 130, 145, 149, 150, 154, 156, 164, 165, 167, 168, 170, 171, 181, 192, 197, 198, 199, 201, 202, 203, 214, 217, 218, 220, 222, 224, 229, 236, 240, 244, 248, 253, 255, 259, 260, 261, 264, 267, 268, 271, 273, 283, 302, 304, 306, 309, 313, 316, 325, 332, 339, 343, 344, 346, 347, 348, 351, 352, 353, 362, 367, 380, 382, 385, 392, 394, 407, 410, 411, 415, 416, 417, 418, 420, 421, 438, 444, 445, 447, 448, 450, 451, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 491, 497, 501, 515, 525, 526, 534, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 595, 607, 610, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 692, 693, 702, 704, 754, 786, 798, 800, 802, 803, 806, 808, 810, 812, 819, 820, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 855, 856, 862, 863, 865, 868, 869, 870, 871, 872, 874, 875, 877, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 925, 926, 942, 959, 967, 982, 987, 989, 990, 992, 993, 994, 996, 1000, 1001, 1003, 1006, 1008, 1009, 1015, 1025, 1027, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "effective_learning_r": [862, 863], "effective_metric_": [847, 848, 849, 851, 853, 855, 856, 857, 996], "effective_metric_params_": [847, 848, 849, 851, 853, 855, 856, 857], "effective_n_job": 961, "effective_rank": [522, 525], "efficaci": 186, "effici": [2, 3, 10, 12, 40, 44, 51, 53, 93, 110, 115, 120, 128, 173, 186, 190, 199, 205, 288, 323, 351, 366, 372, 374, 380, 382, 383, 385, 386, 392, 394, 403, 406, 408, 410, 415, 416, 417, 420, 422, 443, 444, 447, 448, 450, 451, 453, 455, 458, 460, 462, 463, 497, 534, 535, 536, 539, 541, 542, 545, 564, 567, 575, 582, 583, 589, 590, 592, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 633, 634, 635, 639, 641, 656, 659, 660, 665, 667, 668, 669, 674, 676, 677, 678, 679, 680, 686, 687, 689, 727, 757, 764, 780, 781, 798, 799, 801, 815, 834, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 870, 882, 894, 898, 905, 914, 916, 942, 961, 982, 985, 987, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1013, 1018, 1020, 1024, 1027, 1028, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "efficiencywarn": [860, 1051], "effort": [317, 380, 386, 1013, 1018, 1047, 1049], "efron": [146, 377, 683, 684, 989], "eg": 977, "egashira": 1051, "egg": 1044, "egger": 1054, "egin": 410, "egli": [1043, 1053], "egor": 1048, "ehrenheim": [1043, 1044], "eib": [836, 994], "eickenberg": [1036, 1038, 1039, 1040, 1041], "eig": 1043, "eig_tol": 1037, "eig_val": 243, "eig_vec": 243, "eigen": [453, 550, 674, 692, 696, 987, 1042, 1045], "eigen_solv": [10, 42, 44, 64, 218, 219, 415, 453, 463, 536, 689, 690, 692, 694, 696, 990, 1037, 1046, 1049, 1050, 1051], "eigen_tol": [44, 453, 463, 692, 696, 1037, 1050, 1051], "eigendecompos": 415, "eigendecomposit": [463, 674, 692, 696, 871, 985], "eigenfac": [1, 13, 14, 46, 164, 232, 235, 351, 375, 415, 495, 542, 698, 714, 815, 831, 885, 910, 1010, 1015, 1023, 1036], "eigenface_titl": [4, 1025], "eigenmap": [218, 690, 692, 694, 696, 1030, 1031, 1037], "eigensolv": [415, 453, 463, 536, 545, 696, 990], "eigenvalu": [88, 248, 322, 406, 410, 412, 453, 463, 470, 471, 472, 473, 474, 475, 476, 477, 536, 542, 550, 674, 689, 690, 692, 694, 696, 871, 985, 990, 1003, 1038, 1042, 1045, 1046, 1047, 1048], "eigenvalues_": [536, 1049], "eigenvector": [1, 14, 44, 84, 88, 164, 243, 410, 453, 463, 535, 536, 542, 551, 689, 690, 692, 696, 990, 1015, 1036, 1040, 1050], "eigenvector_centr": 15, "eigenvectors_": [536, 1049], "eigh": [32, 243, 244, 245, 248, 249, 415, 422, 534, 536, 1051], "eight": 1029, "eighteenth": 410, "eighth": [564, 999], "eigsh": [415, 536, 1042, 1043], "eiler": 1003, "einsum": 293, "eitan": 1053, "either": [2, 8, 25, 69, 115, 118, 119, 167, 185, 187, 227, 236, 253, 254, 263, 268, 273, 288, 346, 351, 360, 366, 367, 372, 375, 378, 380, 381, 382, 386, 394, 400, 403, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 443, 448, 453, 488, 497, 513, 525, 534, 535, 537, 545, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 583, 584, 585, 589, 590, 591, 592, 594, 595, 598, 603, 608, 609, 611, 612, 623, 628, 631, 633, 634, 651, 655, 657, 665, 677, 679, 683, 684, 691, 698, 699, 703, 707, 708, 712, 713, 721, 725, 727, 728, 729, 730, 731, 736, 739, 740, 741, 743, 753, 757, 770, 775, 779, 783, 784, 785, 786, 788, 789, 790, 795, 801, 804, 805, 807, 815, 824, 825, 826, 827, 828, 829, 830, 832, 835, 865, 895, 896, 902, 905, 906, 913, 914, 915, 916, 920, 950, 954, 982, 989, 993, 994, 995, 996, 997, 998, 1001, 1003, 1007, 1008, 1020, 1028, 1029, 1036, 1039, 1045, 1046, 1047, 1050, 1054], "ekaterina": [1042, 1043, 1044, 1045, 1047, 1052], "ekman": [1038, 1042], "el": [529, 1049, 1051, 1052], "elabonga": [1052, 1053], "elabor": 994, "elad": [665, 686, 687], "elaps": [9, 45, 65, 115, 116, 117, 366, 465, 468, 570, 571, 864, 865, 866, 867], "elapsed_tim": [5, 37, 65, 116, 117, 130, 214], "elast": [164, 175, 181, 183, 184, 188, 190, 191, 208, 216, 230, 233, 272, 295, 408, 472, 473, 479, 502, 525, 647, 648, 653, 658, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 685, 982, 993, 1007, 1015, 1016, 1031, 1036, 1041, 1045, 1046], "elastic_net": 208, "elastic_net_color": 208, "elastic_net_contour": 208, "elasticnet": [5, 8, 178, 188, 267, 272, 366, 386, 392, 415, 648, 653, 658, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 989, 994, 1007, 1036, 1037, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1054], "elasticnetcv": [181, 394, 400, 647, 653, 661, 662, 663, 664, 682, 989, 1036, 1039, 1047, 1049, 1050, 1053, 1054], "elasticnetifittedelasticnet": 178, "elbo": 415, "eldar": [412, 423, 476], "eleanor": 1051, "elec2": 125, "electr": [10, 125, 377, 410], "electron": [17, 146, 375, 377, 539, 541, 548, 628], "element": [52, 93, 112, 113, 124, 228, 252, 258, 266, 268, 316, 352, 356, 360, 369, 377, 379, 380, 382, 389, 395, 406, 408, 410, 414, 415, 417, 418, 421, 445, 447, 453, 465, 488, 509, 513, 515, 521, 523, 527, 528, 532, 538, 539, 541, 551, 558, 559, 560, 561, 565, 566, 567, 568, 569, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 618, 633, 659, 660, 667, 668, 669, 677, 678, 679, 708, 718, 728, 735, 737, 747, 764, 770, 779, 783, 789, 790, 835, 845, 846, 847, 848, 849, 851, 853, 855, 856, 860, 862, 863, 868, 884, 885, 888, 892, 905, 910, 913, 914, 915, 916, 944, 945, 946, 964, 966, 967, 979, 987, 989, 993, 994, 997, 1000, 1003, 1004, 1005, 1009, 1018, 1020, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1052], "elementari": [899, 1005], "elementwis": [415, 539, 541, 548], "elena": 1043, "eleni": 1049, "eleph": 583, "elev": [43, 65, 88, 99, 168, 194, 218, 222, 492], "eleven": 1014, "elfner": 1050, "eli5": 1013, "elia": 1042, "eliaschiavon": 1051, "eliasi": [1051, 1052, 1053], "elicit": 993, "elif": [5, 6, 177, 199, 234, 245, 288, 881], "elimin": [49, 89, 136, 140, 143, 146, 147, 164, 254, 257, 258, 262, 264, 273, 287, 408, 410, 414, 449, 503, 516, 594, 595, 598, 603, 659, 804, 805, 820, 865, 875, 979, 993, 1015, 1016, 1018, 1031, 1036], "elisabeth": [320, 1053], "elizabeth": [1043, 1045, 1048], "elkan": [25, 253, 316, 407, 438, 444, 448, 460, 677, 1042, 1046, 1047, 1049, 1050], "ell": [32, 243, 244, 245, 249, 406], "ell_": 989, "ell_0": [989, 993], "ell_1": [415, 989], "ell_2": 989, "ella": 1005, "ellen": 1043, "elli": [1042, 1045], "elliot": [1053, 1054], "elliott": 1043, "ellips": [32, 226, 243, 244, 245, 248, 249, 999], "ellipsoid": [7, 27, 31, 33, 78, 79, 80, 164, 242, 243, 245, 246, 247, 248, 249, 250, 550, 551, 632, 798, 799, 987, 992, 1015], "ellipt": [55, 989], "ellipticenvelop": [7, 226, 471, 474, 475, 476, 477, 564, 999, 1036, 1039, 1043, 1044, 1049], "eln": 1047, "elong": 410, "els": [2, 6, 9, 10, 11, 17, 32, 39, 42, 47, 53, 54, 60, 80, 97, 112, 118, 119, 122, 157, 167, 168, 186, 189, 199, 212, 215, 219, 226, 230, 232, 233, 234, 235, 236, 259, 260, 263, 270, 283, 288, 296, 299, 300, 307, 343, 351, 352, 360, 380, 384, 386, 417, 418, 420, 422, 430, 438, 450, 509, 521, 534, 570, 619, 626, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 673, 674, 675, 677, 680, 682, 683, 684, 685, 704, 710, 789, 795, 797, 804, 805, 831, 869, 881, 884, 892, 905, 906, 920, 955, 957, 959, 980, 1009], "elsewher": [394, 463, 464, 472, 473, 479], "eltermann": 1039, "elucid": 985, "elvezio": [650, 989], "elvi": [1041, 1042, 1043], "em": [244, 245, 249, 444, 448, 460, 537, 798, 799, 992, 1050], "email": [0, 351, 380, 392, 418, 840, 995, 1018], "emami": 1050, "emanuel": 1037, "emb": [149, 219, 230, 292, 373, 374, 463, 696, 990], "embark": [69, 169, 240, 315, 319, 320], "embed": [34, 37, 39, 42, 44, 53, 60, 66, 87, 114, 149, 164, 217, 220, 222, 224, 225, 241, 283, 292, 326, 327, 386, 394, 408, 410, 442, 453, 463, 490, 503, 545, 550, 567, 583, 640, 689, 690, 691, 692, 693, 694, 695, 696, 697, 854, 866, 875, 897, 898, 899, 985, 996, 999, 1005, 1010, 1013, 1015, 1030, 1031, 1036, 1037, 1047, 1048, 1050], "embedding_": [221, 394, 689, 690, 691, 692, 693], "emerg": [410, 1018], "emeritu": [395, 1011], "emiko": 1050, "emil": 1050, "emili": [1047, 1048], "emipr": 798, "emir": [1051, 1052], "emit": [1047, 1054], "emlearn": 1013, "emma": 1053, "emmanouil": 1050, "emmanuel": [12, 64, 1036, 1043, 1044, 1045, 1053], "emp_cov": [76, 78, 80, 479, 482], "emp_cov_contour": 78, "emp_mah": 78, "emphas": [167, 348, 386, 415, 993], "emphasi": [348, 409, 413, 907, 908, 909, 910, 911, 1000, 1013], "empir": [7, 11, 22, 23, 32, 34, 40, 41, 57, 61, 62, 66, 75, 77, 78, 80, 81, 125, 164, 177, 215, 265, 305, 407, 414, 417, 420, 448, 450, 461, 470, 471, 472, 475, 478, 479, 533, 535, 540, 542, 544, 550, 552, 566, 591, 604, 640, 650, 668, 672, 679, 680, 717, 722, 724, 725, 830, 840, 841, 842, 844, 863, 886, 928, 967, 985, 987, 993, 995, 997, 1003, 1005, 1007, 1015, 1030, 1031], "empirical_covari": [76, 412, 479, 480, 482, 1052], "empiricalcovari": [76, 78, 79, 412, 470, 474, 475, 476, 477, 999], "emploi": [10, 149, 232, 394, 412, 418, 451, 479, 583, 590, 1018, 1028, 1042], "employ": [167, 253], "empti": [59, 68, 102, 209, 329, 366, 375, 382, 384, 410, 422, 484, 534, 562, 563, 632, 812, 870, 910, 912, 920, 925, 926, 932, 952, 953, 983, 1008, 1027, 1038, 1040, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "emptyset": 993, "emul": [167, 388], "en": [15, 22, 388, 532, 538, 596, 637, 665, 669, 672, 686, 687, 696, 706, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 989, 993, 1008, 1009], "enabl": [11, 28, 48, 70, 125, 168, 205, 220, 233, 307, 316, 318, 319, 321, 322, 347, 378, 380, 385, 388, 392, 394, 397, 400, 405, 408, 410, 411, 415, 417, 418, 450, 465, 469, 535, 536, 542, 560, 561, 562, 563, 564, 580, 581, 591, 592, 603, 611, 798, 799, 801, 804, 826, 827, 828, 829, 865, 866, 878, 879, 902, 903, 905, 906, 907, 908, 909, 910, 911, 920, 953, 960, 983, 985, 990, 992, 993, 996, 1003, 1004, 1007, 1008, 1014, 1018, 1036, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "enable_cython_pairwise_dist": [469, 903], "enable_halving_search_cv": [122, 270, 271, 317, 384, 804, 805, 982], "enable_hist_gradient_boost": [384, 1045], "enable_iterative_imput": [161, 162, 384, 628, 983, 1045], "enable_metadata_rout": [233, 253, 322, 400, 438, 444, 445, 448, 450, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 598, 611, 612, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 864, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1052], "enable_my_experimental_featur": 384, "enc": [306, 308, 319, 321, 878, 879, 1003], "enc_auto": 886, "enc_high_smooth": 886, "enc_low_smooth": 886, "encapsul": [387, 411, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "enclos": 982, "encod": [2, 6, 9, 46, 53, 69, 93, 114, 125, 130, 164, 167, 168, 169, 179, 196, 197, 236, 238, 253, 268, 273, 304, 306, 307, 308, 313, 317, 319, 320, 339, 351, 353, 372, 374, 376, 382, 385, 392, 394, 411, 414, 415, 417, 418, 420, 465, 488, 497, 504, 527, 532, 538, 540, 541, 543, 545, 546, 547, 549, 552, 562, 563, 567, 568, 570, 582, 589, 590, 592, 631, 649, 659, 660, 670, 673, 681, 736, 803, 808, 810, 828, 831, 865, 866, 868, 870, 872, 873, 876, 878, 879, 886, 889, 903, 982, 983, 989, 990, 993, 995, 996, 998, 1007, 1013, 1014, 1015, 1031, 1037, 1038, 1044, 1048, 1050, 1051, 1052, 1053, 1054], "encoded_missing_valu": [130, 169, 879, 1003, 1050, 1051], "encodings_": [321, 886, 1003], "encompass": [394, 451, 457, 556, 557, 990], "encount": [367, 378, 403, 410, 417, 418, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 562, 563, 582, 840, 841, 842, 844, 878, 968, 1003, 1007, 1013, 1017, 1018, 1029, 1044, 1047], "encourag": [167, 201, 299, 339, 379, 380, 392, 1008, 1013, 1054], "encrypt": 1013, "encyclopedia": 993, "end": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 378, 380, 382, 384, 392, 394, 395, 397, 400, 406, 410, 411, 413, 417, 451, 457, 469, 489, 490, 509, 510, 538, 547, 558, 559, 560, 561, 565, 566, 567, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 682, 683, 684, 685, 801, 804, 805, 815, 822, 826, 863, 865, 903, 913, 914, 915, 916, 946, 947, 977, 982, 985, 989, 990, 992, 993, 1003, 1005, 1007, 1013, 1018, 1026, 1029, 1041, 1043, 1046, 1049, 1050], "end_": 6, "end_bodi": 6, "end_d": 6, "end_idx": [10, 221], "end_reut": 6, "end_titl": 6, "end_top": 6, "endian": 1048, "endo": 1049, "endpoint": [12, 306, 342, 636], "enemi": 380, "energi": [10, 125, 388, 861, 998, 1027], "enet": [181, 272], "enet_path": [182, 394, 647, 648, 653, 661, 662, 663, 1038, 1040, 1049], "enet_tol": [472, 473, 479, 1041], "enforc": [2, 10, 32, 51, 93, 125, 154, 191, 292, 366, 380, 412, 415, 417, 427, 433, 509, 528, 532, 538, 540, 543, 544, 546, 547, 549, 558, 559, 562, 563, 565, 566, 869, 884, 913, 914, 915, 916, 925, 926, 983, 990, 1038, 1044, 1046, 1048, 1052], "enforce_estimator_tags_i": 1046, "eng": 1044, "engag": [386, 395], "engemann": [100, 1038, 1039, 1043], "engin": [1, 14, 38, 114, 119, 125, 154, 164, 167, 168, 198, 311, 366, 374, 377, 410, 416, 418, 465, 497, 563, 640, 674, 702, 822, 828, 863, 864, 866, 869, 870, 875, 878, 880, 884, 983, 985, 993, 1003, 1011, 1015, 1042], "english": [13, 17, 68, 351, 352, 353, 385, 418, 589, 590, 592, 1013, 1014, 1029, 1049], "enh": 384, "enhanc": [93, 201, 379, 380, 384, 392, 394, 410, 993, 1011, 1034, 1035, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "enjoi": [40, 253], "enough": [2, 11, 25, 35, 42, 60, 115, 118, 125, 149, 161, 168, 169, 186, 197, 231, 234, 236, 253, 309, 351, 353, 362, 378, 380, 384, 395, 407, 408, 410, 412, 414, 417, 568, 569, 590, 801, 804, 805, 807, 815, 829, 942, 982, 987, 990, 992, 999, 1003, 1008, 1013, 1018, 1042, 1052, 1053], "enrich": 343, "ensembl": [2, 5, 8, 10, 11, 24, 25, 29, 54, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 161, 162, 168, 169, 170, 197, 219, 226, 235, 236, 238, 239, 253, 256, 271, 278, 281, 307, 311, 315, 316, 317, 318, 320, 321, 322, 351, 357, 358, 359, 362, 366, 369, 384, 385, 393, 394, 400, 403, 407, 410, 414, 419, 438, 505, 516, 633, 634, 636, 659, 703, 804, 805, 823, 831, 835, 836, 866, 869, 878, 909, 913, 915, 916, 934, 982, 993, 994, 999, 1000, 1009, 1013, 1014, 1015, 1016, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1055], "ensemble_clf": 113, "ensemble_jaccard_scor": 281, "ensta": [13, 15, 35, 46, 59, 219, 260, 262, 351, 352, 353], "ensur": [0, 18, 39, 55, 80, 90, 109, 115, 116, 125, 170, 197, 219, 254, 262, 301, 360, 362, 366, 367, 380, 382, 384, 385, 386, 395, 397, 400, 407, 410, 411, 414, 422, 470, 534, 535, 542, 612, 628, 697, 706, 783, 789, 790, 826, 898, 925, 926, 942, 948, 959, 989, 990, 993, 1003, 1009, 1024, 1038, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "ensure_2d": [925, 926], "ensure_min_featur": [925, 926], "ensure_min_sampl": [925, 926], "entail": [393, 883, 885, 1007], "enter": [381, 384, 410, 443, 1000], "entertain": 989, "entic": 167, "entir": [30, 161, 197, 205, 253, 302, 305, 316, 343, 360, 362, 374, 381, 382, 394, 403, 410, 414, 416, 418, 473, 493, 535, 589, 590, 591, 592, 648, 652, 654, 656, 659, 660, 662, 664, 666, 667, 669, 677, 683, 684, 735, 797, 823, 833, 834, 837, 862, 864, 865, 878, 890, 891, 893, 894, 895, 896, 962, 982, 983, 993, 1003, 1007, 1009, 1027, 1045, 1046], "entireti": 394, "entiti": [395, 727, 757], "entitl": [273, 286, 409, 448, 612, 847, 985], "entri": [0, 69, 73, 125, 130, 162, 167, 168, 253, 255, 315, 352, 362, 384, 386, 388, 393, 394, 406, 407, 410, 415, 417, 420, 464, 465, 468, 473, 497, 532, 533, 538, 546, 547, 562, 563, 589, 592, 595, 612, 621, 633, 639, 641, 648, 652, 654, 656, 657, 660, 662, 664, 665, 666, 674, 676, 683, 684, 686, 687, 700, 705, 708, 710, 713, 716, 717, 719, 727, 730, 731, 732, 735, 736, 739, 744, 757, 759, 760, 784, 786, 789, 790, 793, 794, 814, 829, 845, 846, 853, 854, 855, 856, 857, 876, 882, 894, 979, 982, 983, 989, 993, 996, 1003, 1008, 1014, 1020, 1043, 1046, 1047, 1049, 1053], "entropi": [9, 25, 238, 271, 296, 317, 326, 327, 362, 375, 410, 417, 422, 499, 534, 558, 565, 608, 609, 659, 718, 737, 738, 742, 796, 913, 915, 989, 990, 993, 997, 1009, 1038, 1040, 1044, 1045, 1050, 1052, 1053], "entrypoint_to_bug_reproduc": 381, "enumer": [2, 6, 8, 9, 10, 12, 13, 15, 17, 23, 25, 28, 29, 35, 37, 38, 39, 40, 41, 42, 43, 48, 53, 57, 58, 59, 60, 63, 68, 77, 79, 80, 84, 94, 96, 102, 112, 115, 120, 121, 123, 124, 125, 136, 151, 153, 158, 170, 177, 179, 188, 197, 219, 220, 223, 226, 231, 235, 236, 243, 244, 245, 246, 248, 249, 253, 254, 261, 262, 268, 269, 288, 292, 293, 295, 302, 307, 308, 326, 327, 329, 331, 337, 339, 345, 346, 351, 357, 375, 560, 561, 565, 566, 782, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "env": [378, 388, 397], "environ": [0, 10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 366, 375, 377, 378, 380, 382, 386, 388, 392, 397, 405, 408, 411, 500, 1014, 1018, 1031, 1043, 1044, 1053], "environment": [9, 181, 215], "environmenterror": 1052, "eom": 447, "ep": [29, 42, 44, 47, 53, 63, 180, 182, 221, 230, 392, 410, 421, 445, 451, 456, 472, 473, 479, 632, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 682, 683, 684, 685, 691, 695, 715, 742, 857, 897, 898, 899, 1005, 1051, 1052], "epanechnikov": [288, 416, 845, 846, 850], "ephemer": 388, "ephrem": 1051, "epimorph": 1053, "epistem": 11, "epoch": [212, 394, 537, 667, 668, 669, 677, 678, 679, 862, 863, 1007, 1043, 1044, 1049], "epp": [410, 705], "eps_": [661, 663], "eps_rang": 230, "epsilon": [53, 63, 179, 221, 232, 321, 345, 415, 447, 456, 644, 650, 668, 677, 679, 747, 862, 863, 906, 908, 911, 986, 989, 993, 997, 1007, 1008, 1027, 1036], "epsilon_": 843, "epsilon_i": 993, "epsilon_insensit": [668, 677, 679, 906, 989, 1007], "epsilon_valu": 179, "eq": [253, 423, 476, 722, 724, 725], "equal": [2, 9, 10, 24, 32, 35, 37, 51, 58, 78, 84, 109, 122, 152, 167, 198, 199, 208, 214, 237, 245, 248, 252, 257, 259, 268, 293, 307, 311, 339, 341, 347, 352, 375, 376, 380, 382, 394, 406, 407, 410, 414, 415, 417, 418, 423, 438, 441, 442, 443, 444, 446, 448, 450, 455, 460, 461, 464, 470, 475, 480, 481, 504, 513, 516, 520, 533, 534, 535, 540, 542, 544, 545, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 589, 594, 595, 598, 600, 601, 608, 609, 626, 629, 630, 633, 634, 635, 636, 638, 642, 643, 650, 659, 660, 672, 700, 719, 721, 730, 784, 788, 789, 795, 797, 801, 802, 804, 805, 814, 815, 819, 826, 833, 837, 838, 845, 846, 847, 848, 853, 854, 855, 856, 857, 862, 863, 868, 869, 870, 877, 880, 883, 884, 885, 886, 888, 895, 902, 905, 906, 912, 913, 914, 915, 916, 931, 942, 968, 974, 987, 989, 993, 994, 996, 997, 999, 1003, 1007, 1008, 1009, 1028, 1029, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "equat": [25, 346, 380, 410, 415, 417, 558, 559, 560, 561, 565, 566, 567, 591, 628, 659, 660, 683, 684, 688, 764, 885, 913, 914, 915, 916, 983, 990, 993, 998, 1044], "equi": 992, "equiangular": 989, "equidist": [119, 693], "equip": 1018, "equiv": [985, 1008], "equival": [2, 13, 32, 53, 55, 119, 126, 145, 149, 154, 167, 181, 215, 248, 268, 283, 310, 343, 353, 362, 366, 386, 389, 393, 394, 403, 410, 411, 412, 413, 414, 415, 417, 419, 420, 442, 444, 445, 446, 447, 448, 450, 451, 458, 465, 470, 475, 510, 535, 542, 559, 562, 563, 564, 565, 566, 589, 592, 614, 617, 620, 622, 625, 647, 648, 649, 653, 655, 659, 660, 667, 668, 669, 670, 673, 677, 678, 681, 684, 688, 689, 694, 709, 710, 724, 735, 743, 748, 749, 750, 762, 771, 780, 781, 798, 799, 804, 805, 809, 811, 836, 839, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 868, 874, 875, 877, 880, 881, 882, 883, 885, 893, 895, 896, 929, 940, 979, 982, 987, 989, 990, 991, 993, 999, 1003, 1007, 1008, 1009, 1044, 1045, 1046, 1047, 1049, 1050, 1053], "er": 571, "era": 1014, "eras": [560, 561, 647, 653, 659, 661, 663, 667, 668, 669, 677, 678, 679, 862, 863], "ereg": [133, 417], "eren": [0, 18, 19, 1038, 1039], "eric": [309, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "ericchang2017": 309, "ericellwang": [1049, 1050], "erich": [451, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050], "erick": 1041, "erik": [375, 1018, 1039], "eriksson": 1043, "erin": [278, 1048], "erl": 278, "erlbaum": 253, "erling": 1041, "ermolaevpa": [1050, 1051], "ernst": [417, 558, 559, 566, 567, 915, 916], "err": [15, 83, 97, 109], "err_cov_emp_ful": 79, "err_cov_emp_pur": 79, "err_cov_mcd": 79, "err_loc_emp_ful": 79, "err_loc_emp_pur": 79, "err_loc_mcd": 79, "errno": 397, "erron": [78, 79, 415, 989, 1037, 1044, 1048], "error": [2, 3, 5, 11, 12, 15, 25, 52, 73, 76, 77, 79, 97, 102, 108, 112, 115, 116, 119, 121, 123, 125, 134, 146, 149, 161, 164, 167, 181, 186, 193, 196, 197, 199, 200, 203, 204, 211, 215, 229, 232, 233, 239, 249, 251, 253, 255, 259, 260, 264, 268, 269, 274, 276, 278, 289, 290, 319, 322, 338, 346, 351, 352, 367, 377, 378, 380, 382, 383, 384, 385, 389, 392, 394, 400, 403, 407, 408, 410, 411, 412, 414, 415, 417, 418, 419, 438, 444, 445, 448, 450, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 516, 525, 532, 534, 535, 538, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 582, 583, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 607, 611, 612, 630, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 689, 690, 691, 693, 694, 697, 699, 702, 703, 710, 712, 713, 721, 722, 724, 728, 741, 744, 745, 746, 747, 748, 749, 751, 752, 754, 765, 779, 783, 789, 790, 791, 792, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 819, 823, 824, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 853, 855, 856, 857, 860, 862, 863, 864, 865, 866, 868, 870, 871, 872, 877, 878, 879, 884, 885, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 923, 924, 925, 926, 929, 956, 977, 980, 982, 983, 984, 986, 987, 988, 990, 994, 997, 1001, 1003, 1007, 1008, 1009, 1015, 1016, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "error_": [532, 544], "error_i": [115, 260], "error_norm": [77, 79, 470, 471, 472, 473, 474, 475, 476, 477], "error_on_new": 630, "error_r": 113, "error_scor": [801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 982, 1040, 1044, 1048, 1051], "error_x": [115, 260], "errorbar": [35, 59, 71, 77, 79, 145, 155, 156, 285, 329, 342, 807, 824], "errorbar_": [807, 824], "errorbar_kw": [807, 824], "errorbarcontain": [807, 824], "errors_coef": 201, "errors_lines_": 702, "erwan": 1053, "erwin": 1039, "escal": 395, "escalant": 993, "escalera": 993, "escap": [1049, 1051], "eschibli": 1048, "eschlbeck": 1050, "esdi": 17, "esp": [410, 1036], "especi": [2, 6, 11, 53, 54, 119, 122, 125, 167, 197, 233, 311, 320, 352, 362, 367, 374, 380, 388, 392, 394, 407, 410, 418, 444, 450, 502, 539, 558, 559, 560, 561, 565, 566, 567, 647, 648, 649, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 670, 681, 696, 706, 747, 840, 841, 842, 843, 844, 913, 914, 915, 916, 989, 995, 996, 1003, 1018, 1039, 1044, 1048, 1049, 1050], "espinoza": [1037, 1038], "essenc": [608, 609, 744, 990, 993], "essenti": [259, 320, 378, 382, 410, 414, 415, 510, 993, 996, 1014, 1018, 1044], "est": [43, 130, 167, 189, 212, 233, 235, 253, 273, 307, 317, 362, 403, 417, 563, 736, 870, 982, 993, 1003, 1007, 1047, 1048], "est1": [394, 633], "est2": [394, 633], "est_freq": 215, "est_idx": 307, "est_sev": 215, "establish": [388, 392, 395, 983], "estefania": 1050, "ester": [410, 421, 445], "estev": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "estim": [2, 4, 5, 6, 7, 8, 9, 10, 11, 22, 24, 25, 28, 31, 32, 35, 36, 42, 43, 47, 48, 52, 53, 54, 55, 56, 59, 61, 69, 70, 71, 72, 81, 83, 84, 93, 94, 95, 100, 102, 108, 109, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 127, 130, 131, 132, 133, 134, 136, 144, 145, 146, 148, 149, 150, 152, 154, 156, 158, 159, 160, 161, 163, 166, 167, 175, 178, 181, 185, 186, 187, 192, 197, 198, 199, 201, 202, 204, 205, 214, 215, 216, 225, 226, 227, 232, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 281, 283, 284, 290, 294, 297, 305, 307, 310, 318, 319, 321, 323, 342, 343, 346, 352, 353, 356, 357, 359, 366, 367, 368, 369, 372, 378, 380, 383, 384, 387, 388, 389, 390, 397, 400, 403, 404, 407, 409, 410, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 491, 492, 493, 496, 497, 499, 502, 503, 525, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 577, 578, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 688, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 708, 709, 712, 713, 714, 717, 719, 721, 722, 724, 725, 727, 728, 729, 730, 731, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 817, 819, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 924, 925, 926, 928, 930, 931, 934, 936, 937, 938, 949, 950, 951, 953, 961, 977, 981, 988, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "estimate_bandwidth": [42, 61, 410, 449, 462], "estimated_coef": [647, 648, 653, 661, 662, 663, 682, 683, 684], "estimated_param_": 1026, "estimator_": [200, 233, 273, 430, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 594, 595, 598, 672, 800, 823, 977, 1051], "estimator__alpha": 122, "estimator__max_depth": [394, 982], "estimator_alpha": 118, "estimator_check": [315, 382, 394, 408, 1043, 1044, 1046, 1047, 1050, 1051, 1052, 1054], "estimator_conf": 8, "estimator_config": 8, "estimator_dict": 205, "estimator_errors_": [109, 554, 555], "estimator_html_repr": [382, 411, 1047, 1048, 1049, 1050, 1053], "estimator_modul": 382, "estimator_nam": [8, 205, 382, 387, 439, 577, 699, 701, 703, 924], "estimator_samples_": 1047, "estimator_weights_": [109, 554, 555], "estimatorcv": [394, 1014], "estimators_": [116, 118, 189, 212, 234, 315, 394, 417, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 833, 834, 835, 836, 837, 838, 839, 1037, 1043, 1050], "estimators_early_stop": 120, "estimators_features_": [556, 557, 564], "estimators_samples_": [556, 557, 558, 559, 564, 565, 566, 567, 1042, 1044, 1047, 1053], "est\u00e8v": [0, 398, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "esuli": [1043, 1048], "esvhd": 1045, "et": [0, 9, 76, 77, 109, 124, 185, 296, 375, 377, 406, 410, 412, 415, 417, 418, 419, 452, 499, 520, 521, 529, 536, 542, 545, 564, 683, 684, 720, 721, 840, 842, 862, 863, 898, 941, 942, 989, 990, 993, 999, 1003, 1005, 1008, 1009, 1044, 1052], "eta": [415, 537, 677, 678, 679, 997, 1007, 1041], "eta0": [669, 677, 678, 679, 1007], "eta_0": 1007, "etc": [119, 197, 215, 254, 263, 264, 362, 366, 368, 380, 382, 384, 385, 392, 393, 394, 400, 403, 406, 411, 414, 418, 490, 504, 528, 558, 559, 565, 566, 669, 677, 693, 719, 772, 801, 815, 836, 839, 869, 880, 913, 914, 915, 916, 917, 919, 925, 926, 936, 982, 983, 987, 993, 996, 1013, 1014, 1018, 1036, 1043, 1045, 1046], "eth": 1046, "ethan": [1039, 1042], "ethic": 125, "ethz": [329, 331], "etiquett": 380, "etl": [1014, 1018], "euclidean": [38, 55, 56, 183, 230, 236, 283, 286, 291, 315, 320, 343, 352, 406, 408, 410, 415, 416, 417, 418, 420, 441, 442, 445, 446, 447, 451, 453, 458, 461, 464, 532, 538, 546, 547, 590, 616, 620, 623, 624, 677, 679, 691, 693, 696, 697, 700, 763, 764, 770, 771, 772, 773, 779, 780, 781, 782, 793, 794, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 899, 983, 987, 991, 994, 996, 1005, 1014, 1040, 1043, 1044, 1045, 1046, 1052, 1053], "euclidean_dist": [221, 230, 382, 451, 455, 458, 689, 695, 763, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 1036, 1041, 1044, 1045, 1053], "euclideandist": 700, "eugen": [377, 1037, 1042], "eunji": 1044, "eunseop": 1046, "europ": [418, 1003], "european": [727, 757, 993], "eustach": [5, 6, 8, 1018, 1038, 1039], "eval_and_print_metr": 330, "eval_gradi": [157, 420, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "evalml": 1013, "evalu": [2, 3, 4, 8, 9, 15, 22, 30, 34, 36, 40, 41, 47, 53, 57, 61, 62, 66, 69, 70, 96, 109, 115, 116, 117, 119, 120, 122, 125, 141, 142, 152, 164, 170, 173, 177, 186, 199, 204, 215, 225, 226, 241, 251, 252, 256, 257, 258, 259, 262, 264, 265, 266, 268, 270, 271, 273, 274, 276, 281, 290, 292, 296, 305, 310, 312, 317, 321, 322, 330, 339, 343, 351, 362, 369, 373, 375, 382, 386, 394, 396, 408, 411, 418, 419, 420, 448, 450, 465, 467, 489, 492, 493, 494, 497, 510, 521, 537, 552, 562, 563, 564, 568, 569, 592, 595, 603, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 634, 635, 648, 654, 660, 674, 676, 698, 700, 702, 703, 704, 705, 706, 712, 714, 715, 716, 718, 719, 727, 728, 737, 738, 743, 755, 756, 757, 758, 787, 796, 798, 799, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 831, 832, 836, 842, 845, 846, 851, 863, 865, 866, 872, 875, 878, 879, 883, 884, 885, 890, 891, 893, 894, 895, 896, 907, 910, 913, 928, 936, 967, 985, 989, 991, 995, 996, 999, 1000, 1001, 1004, 1007, 1009, 1013, 1015, 1018, 1020, 1021, 1024, 1025, 1027, 1030, 1031, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "evaluate_everi": 537, "evaluate_model_and_stor": 311, "evaluation_std": 352, "evaluations_std": 352, "even": [2, 11, 12, 25, 38, 40, 50, 73, 84, 96, 115, 122, 155, 167, 168, 169, 186, 197, 198, 205, 215, 222, 223, 232, 233, 244, 265, 278, 305, 307, 309, 310, 331, 346, 351, 352, 353, 362, 368, 375, 379, 380, 381, 382, 384, 385, 388, 392, 394, 403, 407, 408, 410, 411, 412, 414, 415, 417, 418, 420, 442, 444, 446, 447, 448, 449, 450, 460, 462, 533, 536, 558, 559, 560, 561, 565, 566, 583, 590, 595, 628, 629, 631, 640, 659, 660, 696, 701, 706, 713, 744, 762, 768, 775, 779, 782, 787, 789, 828, 865, 866, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 913, 914, 915, 916, 942, 962, 982, 983, 985, 987, 989, 992, 993, 996, 998, 999, 1001, 1003, 1005, 1007, 1008, 1009, 1018, 1029, 1043, 1044, 1045, 1048, 1050, 1053], "evenli": [6, 37, 50, 122, 170, 201, 254, 418, 946, 1029], "event": [0, 2, 197, 215, 262, 407, 410, 589, 590, 637, 840, 930, 989, 994, 995, 1013, 1018, 1042], "eventu": [246, 253, 408, 410, 419, 594, 1018], "ever": [115, 129, 389, 417, 1018], "everi": [2, 93, 125, 154, 161, 195, 198, 219, 232, 244, 249, 268, 318, 322, 362, 375, 380, 382, 384, 388, 394, 410, 412, 414, 415, 418, 441, 455, 509, 532, 537, 540, 546, 558, 560, 561, 562, 563, 565, 591, 592, 604, 647, 648, 650, 653, 654, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 686, 687, 688, 693, 697, 755, 772, 780, 781, 814, 854, 913, 915, 917, 919, 931, 986, 988, 993, 994, 995, 1003, 1009, 1018, 1024, 1036, 1040, 1042, 1045, 1049, 1053], "everingham": 993, "everingham2010": 993, "evernot": 1011, "everybodi": [374, 380], "everyon": [380, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "everyth": [326, 362, 384, 386, 392, 403, 465, 948, 1013, 1014, 1036], "everywher": 394, "evgeni": 1047, "evid": [265, 351, 388, 410, 414, 415, 417, 645, 798, 992], "evol": 993, "evolut": [6, 8, 271, 366, 368], "evolutionari": 1013, "evolv": [389, 1051], "ex": [68, 378, 381, 397, 1040, 1041], "exabyt": 1027, "exact": [3, 5, 80, 98, 115, 154, 201, 231, 253, 283, 322, 362, 366, 367, 374, 380, 382, 389, 392, 393, 394, 410, 417, 419, 435, 483, 484, 485, 489, 497, 535, 536, 542, 562, 563, 639, 643, 647, 693, 801, 815, 826, 827, 828, 907, 910, 982, 985, 989, 990, 999, 1003, 1007, 1008, 1043, 1044, 1046], "exactli": [69, 109, 166, 176, 181, 190, 197, 201, 249, 253, 267, 306, 346, 351, 380, 382, 406, 410, 414, 415, 418, 423, 447, 454, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 516, 527, 591, 592, 616, 677, 679, 704, 706, 764, 802, 819, 826, 985, 989, 990, 991, 993, 994, 1009, 1028, 1029, 1036, 1042, 1043, 1049], "exagger": [37, 167, 693, 990], "examin": [142, 386, 388, 410, 854], "exampl": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 369, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 393, 394, 397, 402, 403, 408, 421, 422, 423, 425, 426, 428, 429, 431, 432, 435, 436, 437, 440, 457, 458, 460, 462, 464, 472, 479, 481, 482, 486, 487, 488, 494, 498, 504, 506, 508, 509, 510, 517, 518, 519, 529, 530, 532, 546, 547, 548, 549, 556, 573, 574, 578, 584, 586, 587, 593, 596, 597, 599, 602, 604, 610, 613, 617, 621, 622, 625, 627, 630, 637, 638, 639, 643, 651, 652, 655, 661, 662, 664, 668, 676, 684, 686, 687, 688, 695, 696, 697, 700, 711, 712, 715, 716, 717, 721, 722, 724, 725, 726, 727, 729, 731, 732, 734, 737, 740, 741, 744, 745, 748, 752, 755, 757, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 784, 792, 795, 797, 808, 809, 810, 811, 812, 813, 814, 825, 837, 839, 841, 845, 846, 855, 856, 857, 859, 860, 867, 868, 871, 873, 876, 887, 888, 890, 892, 893, 895, 896, 897, 900, 904, 906, 907, 915, 916, 917, 918, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 941, 942, 943, 944, 945, 947, 948, 955, 956, 957, 958, 961, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 983, 991, 1014, 1015, 1016, 1018, 1021, 1024, 1025, 1029, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1049, 1051, 1052, 1053], "example_funct": 380, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1036, "example_gaussian_process_plot_gp_regress": 1036, "exampleclassifi": 233, "exampleclassifierexampleclassifi": 233, "exampleestim": 380, "exampleregressor": 233, "examples_pattern": 380, "exampletransform": 233, "exc": [278, 977], "exce": [83, 281, 316, 420, 443, 516, 603, 650, 659, 1045, 1048, 1050], "exceed": [804, 805, 1042], "excel": [128, 374, 380, 417, 691, 695, 989, 1018], "except": [9, 42, 51, 96, 107, 115, 125, 205, 212, 226, 233, 267, 283, 296, 300, 301, 305, 307, 320, 369, 373, 380, 382, 383, 384, 385, 392, 394, 400, 403, 406, 411, 414, 415, 417, 418, 420, 433, 461, 466, 469, 483, 484, 485, 510, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 612, 628, 631, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 688, 712, 779, 808, 838, 839, 845, 846, 848, 851, 856, 862, 863, 869, 883, 885, 903, 906, 908, 911, 914, 916, 924, 946, 977, 979, 989, 993, 1008, 1020, 1028, 1029, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1053, 1054], "exception": 215, "excerpt": [4, 1005, 1025], "excess": [201, 447, 1003, 1043], "exchang": [403, 1017], "excit": 1043, "exclud": [6, 17, 166, 305, 380, 384, 394, 447, 465, 467, 730, 731, 739, 784, 785, 788, 814, 822, 880, 968, 993, 996, 1045, 1052], "exclus": [367, 392, 394, 415, 417, 628, 629, 631, 982, 989, 993, 994, 1018, 1043, 1047], "exec": 392, "execut": [14, 20, 25, 26, 33, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 161, 163, 171, 174, 181, 186, 216, 224, 232, 241, 250, 264, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 354, 361, 367, 378, 380, 386, 403, 405, 410, 415, 421, 444, 462, 801, 807, 815, 824, 826, 827, 828, 829, 832, 850, 959, 960, 1003, 1006, 1015, 1021, 1029, 1038, 1041, 1044], "exemplar": [410, 441, 455, 1028], "exemplari": [131, 132], "exemplifi": 394, "exercis": [9, 71, 118, 128, 139, 145, 151, 153, 207, 210, 247, 254, 264, 272, 299, 300, 331, 344, 347, 348, 368, 369, 377, 380, 502, 503, 505, 506, 653, 654, 659, 801, 806, 847, 910, 1015, 1021, 1039], "exercise_01_language_train_model": 1029, "exercise_02_senti": 1029, "exercise_xx_script": 1029, "exhaust": [146, 260, 315, 316, 317, 318, 319, 320, 321, 322, 323, 366, 377, 385, 393, 404, 410, 417, 801, 804, 805, 815, 895, 896, 898, 989, 1029, 1031], "exhibit": [150, 202, 343, 351, 396, 414, 415, 417, 420, 1001], "exist": [6, 7, 11, 15, 17, 51, 215, 259, 301, 305, 343, 374, 379, 382, 383, 386, 392, 394, 395, 397, 403, 410, 414, 415, 417, 418, 425, 435, 438, 444, 445, 448, 450, 452, 454, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 500, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 586, 589, 590, 591, 592, 595, 598, 604, 611, 612, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 699, 701, 703, 763, 766, 770, 800, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 878, 879, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 977, 985, 990, 992, 993, 997, 999, 1000, 1003, 1018, 1028, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "exist_ok": 6, "existing_credit": 253, "exit": [70, 283, 384, 388, 469], "exp": [44, 52, 64, 102, 112, 122, 150, 181, 207, 288, 293, 296, 316, 317, 321, 343, 407, 410, 411, 416, 422, 453, 466, 522, 534, 537, 616, 617, 623, 642, 760, 767, 777, 862, 863, 881, 987, 989, 991, 995, 996, 997, 1006, 1007, 1008, 1027], "exp10": 167, "exp_dirichlet_component_": 537, "exp_dist_embed": 293, "expand": [2, 47, 63, 228, 311, 316, 362, 372, 417, 445, 451, 500, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 993, 1037, 1044, 1045, 1052], "expand_frame_repr": 215, "expans": [2, 161, 317, 451, 880, 1045], "expect": [2, 3, 8, 11, 22, 35, 42, 51, 84, 90, 98, 109, 112, 114, 116, 119, 122, 125, 127, 143, 144, 149, 155, 164, 165, 169, 171, 183, 188, 197, 198, 199, 201, 205, 215, 230, 233, 236, 237, 244, 245, 248, 249, 253, 266, 283, 310, 346, 351, 352, 362, 366, 367, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 400, 405, 407, 410, 411, 412, 414, 417, 418, 419, 433, 465, 466, 468, 469, 470, 483, 484, 485, 497, 524, 533, 537, 539, 542, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 571, 573, 589, 590, 592, 596, 598, 607, 612, 628, 633, 634, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 676, 679, 680, 696, 705, 706, 717, 736, 789, 795, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 855, 856, 857, 858, 863, 866, 871, 878, 879, 882, 885, 886, 895, 896, 903, 905, 906, 907, 908, 909, 910, 911, 914, 916, 956, 982, 989, 992, 993, 995, 999, 1003, 1007, 1008, 1009, 1015, 1017, 1025, 1028, 1029, 1031, 1036, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "expected_anomaly_fract": 236, "expected_i": 122, "expected_n_anomali": 236, "expected_ri": 706, "expectedli": 351, "expens": [0, 54, 115, 130, 149, 166, 168, 227, 256, 268, 339, 343, 351, 352, 353, 368, 386, 394, 410, 411, 414, 417, 418, 450, 469, 509, 801, 804, 805, 815, 828, 903, 905, 990, 992, 1003, 1008, 1013, 1018, 1029, 1040], "experi": [109, 152, 156, 166, 167, 168, 169, 173, 199, 253, 278, 310, 346, 352, 353, 367, 374, 380, 383, 395, 408, 414, 516, 729, 786, 989, 994, 1005, 1011, 1012, 1013, 1018, 1027, 1029], "experienc": 380, "experiment": [122, 161, 162, 197, 270, 271, 317, 318, 369, 380, 382, 383, 390, 392, 394, 400, 414, 497, 550, 628, 697, 804, 805, 963, 982, 983, 989, 992, 993, 1013, 1014, 1023, 1031, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "expert_r": 411, "expertis": [379, 380, 392], "expit": [121, 187, 417, 562, 989, 1043], "explain": [2, 3, 10, 25, 54, 71, 83, 84, 101, 122, 149, 154, 155, 168, 169, 197, 215, 226, 233, 249, 269, 272, 311, 323, 351, 352, 367, 378, 380, 384, 392, 403, 405, 413, 415, 420, 494, 522, 525, 535, 542, 545, 550, 626, 649, 657, 670, 681, 722, 723, 724, 725, 729, 786, 989, 996, 1009, 1012, 1013, 1025, 1027, 1028, 1047, 1049, 1050], "explained_vari": [352, 993], "explained_variance_": [84, 535, 542, 545, 1028, 1043], "explained_variance_ratio": 1042, "explained_variance_ratio_": [71, 101, 323, 352, 415, 535, 542, 545, 550, 1025, 1039, 1042], "explained_variance_scor": [993, 1039, 1043, 1050], "explan": [25, 84, 233, 366, 379, 380, 407, 418, 982, 992, 994, 1009, 1018, 1039], "explic": 1005, "explicit": [2, 125, 164, 168, 173, 225, 233, 241, 273, 275, 343, 366, 367, 368, 379, 381, 392, 394, 395, 400, 411, 418, 424, 473, 500, 502, 503, 542, 552, 553, 632, 639, 640, 642, 677, 801, 802, 809, 849, 857, 865, 905, 910, 957, 961, 985, 987, 989, 993, 1003, 1009, 1013, 1015, 1036, 1040, 1045, 1046, 1049, 1053], "explicitli": [2, 44, 116, 149, 156, 161, 162, 198, 229, 233, 322, 343, 353, 362, 367, 374, 376, 380, 381, 382, 384, 392, 394, 400, 403, 405, 414, 418, 420, 536, 550, 551, 580, 581, 598, 628, 649, 659, 660, 670, 681, 710, 728, 783, 789, 790, 804, 805, 836, 839, 845, 846, 871, 895, 896, 961, 982, 983, 985, 987, 989, 990, 993, 995, 996, 1003, 1018, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1054], "explod": 311, "exploit": [23, 281, 403, 994, 1014, 1039], "exploit_incremental_learn": [807, 829], "explor": [11, 35, 112, 113, 125, 170, 222, 223, 236, 253, 260, 261, 267, 268, 278, 312, 317, 339, 352, 362, 374, 377, 379, 386, 410, 417, 473, 801, 804, 812, 886, 982, 989, 990, 992, 998, 1000, 1003, 1018, 1023, 1029, 1042], "exploratori": [167, 1018], "explos": [801, 815, 826, 827, 828], "expm1": 73, "expon": [420, 617, 677, 678, 679, 813, 862, 863, 880, 982], "exponenti": [44, 73, 149, 154, 288, 293, 416, 417, 420, 450, 537, 555, 560, 615, 620, 623, 640, 644, 759, 760, 845, 846, 850, 862, 863, 880, 985, 989, 993, 1008, 1027, 1043, 1049], "export": [378, 381, 382, 397, 917, 918, 1009, 1013, 1045], "export_graphviz": [1009, 1041, 1043, 1049, 1051, 1052], "export_text": [1009, 1045, 1052], "expos": [146, 233, 278, 318, 320, 367, 373, 377, 394, 400, 407, 411, 417, 419, 420, 438, 465, 554, 555, 562, 563, 568, 569, 570, 571, 594, 595, 603, 612, 800, 801, 804, 805, 815, 823, 834, 835, 836, 837, 838, 839, 920, 961, 989, 993, 995, 1024, 1026, 1028, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "exposur": [197, 215, 989], "express": [2, 5, 10, 11, 109, 115, 149, 154, 167, 259, 260, 311, 317, 336, 343, 353, 374, 375, 380, 381, 386, 392, 403, 410, 415, 416, 417, 418, 451, 457, 458, 589, 590, 592, 717, 789, 801, 807, 815, 824, 826, 827, 828, 829, 832, 852, 985, 989, 993, 997, 1003, 1004, 1009, 1044], "expsinesquar": [149, 154, 158, 420], "exstrac": 993, "ext": 647, "extend": [11, 53, 54, 65, 107, 198, 247, 253, 266, 339, 377, 378, 392, 394, 407, 408, 410, 415, 417, 632, 721, 822, 834, 837, 838, 870, 872, 889, 905, 906, 920, 985, 993, 994, 1008, 1014, 1016, 1031, 1041, 1042, 1043, 1044, 1046, 1051], "extens": [266, 268, 288, 366, 367, 374, 375, 378, 381, 383, 384, 388, 389, 392, 403, 410, 415, 497, 504, 535, 742, 936, 944, 990, 992, 993, 1012, 1013, 1018, 1036, 1042, 1049, 1050, 1052, 1053], "extent": [7, 56, 151, 152, 153, 230, 347, 441, 536, 697, 798, 993], "extercond": 119, "extern": [136, 149, 253, 368, 369, 373, 377, 380, 382, 385, 392, 394, 406, 410, 418, 419, 420, 594, 611, 612, 718, 738, 796, 989, 992, 993, 996, 1009, 1014, 1021, 1027, 1031, 1044, 1048], "exterqu": [119, 130], "extmath": [246, 351, 389, 408, 454, 1036, 1037, 1042, 1043, 1046, 1050, 1051, 1053], "extr": 6, "extra": [44, 118, 125, 235, 283, 322, 353, 378, 379, 381, 384, 394, 403, 417, 418, 439, 444, 448, 460, 465, 533, 558, 559, 567, 591, 592, 701, 702, 703, 826, 849, 915, 916, 932, 992, 993, 996, 1036, 1039, 1041, 1042, 1044, 1049, 1051], "extra_cflag": 386, "extra_tre": [915, 916], "extract": [1, 2, 4, 6, 9, 10, 14, 15, 48, 53, 67, 68, 69, 70, 74, 83, 93, 115, 142, 146, 164, 173, 212, 223, 251, 258, 259, 263, 264, 265, 267, 276, 302, 319, 330, 342, 351, 353, 362, 369, 372, 375, 377, 382, 386, 389, 392, 410, 411, 414, 415, 451, 453, 456, 457, 463, 465, 489, 490, 494, 495, 504, 505, 532, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 584, 585, 589, 590, 592, 594, 595, 598, 600, 632, 719, 789, 801, 815, 842, 864, 865, 910, 942, 950, 957, 982, 990, 994, 998, 1003, 1007, 1013, 1015, 1018, 1021, 1025, 1026, 1031, 1036, 1037, 1045, 1048], "extract_dbscan": 410, "extract_patches_2d": [48, 96, 418, 588, 1044], "extract_scor": 262, "extractal": 6, "extractor": [197, 302, 368, 375, 394, 418, 504, 582, 583, 589, 590, 592, 982, 1036], "extran": 380, "extrapol": [2, 149, 176, 198, 229, 262, 884, 993, 1003, 1009, 1049, 1051], "extratre": [118, 128, 366, 1039], "extratreeclassifi": [558, 567, 916, 994, 1040, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "extratreeregressor": [559, 564, 567, 915, 994, 999, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "extratreesclassifi": [118, 128, 417, 419, 559, 565, 567, 915, 916, 994, 1039, 1040, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "extratreesregressor": [235, 417, 558, 566, 567, 915, 916, 994, 1039, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "extrem": [122, 197, 199, 235, 236, 305, 312, 329, 352, 380, 383, 409, 410, 415, 558, 559, 565, 566, 567, 633, 634, 680, 725, 753, 915, 916, 917, 919, 993, 995], "extrema": 987, "exxon": 10, "ey": [78, 79, 245, 249, 339, 375, 535, 542, 551], "eyast": 1050, "ezebunandu": 1048, "ezeiza": 765, "ezri": 1049, "f": [0, 2, 3, 5, 9, 10, 11, 13, 15, 18, 24, 28, 30, 35, 41, 45, 46, 47, 50, 51, 53, 56, 62, 65, 69, 73, 84, 96, 109, 112, 115, 116, 117, 119, 120, 122, 125, 130, 131, 137, 140, 142, 145, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 169, 170, 173, 181, 183, 186, 188, 197, 198, 199, 201, 207, 211, 215, 219, 230, 232, 233, 236, 240, 248, 253, 257, 259, 260, 261, 262, 265, 266, 268, 269, 271, 273, 283, 286, 299, 300, 301, 307, 310, 311, 315, 317, 319, 321, 322, 323, 326, 327, 338, 343, 346, 351, 352, 353, 362, 375, 380, 381, 382, 384, 386, 392, 403, 407, 411, 415, 417, 418, 419, 420, 488, 509, 510, 532, 533, 538, 539, 567, 582, 583, 584, 588, 593, 596, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 618, 628, 633, 636, 659, 697, 714, 724, 727, 730, 731, 757, 784, 785, 788, 789, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 829, 830, 832, 862, 863, 867, 876, 879, 880, 884, 885, 886, 912, 920, 925, 926, 977, 985, 988, 997, 1000, 1001, 1003, 1007, 1015, 1038, 1044, 1045, 1046, 1048, 1050], "f0_c0": 886, "f0_c1": 886, "f0_c2": 886, "f0e442": 243, "f1": [4, 23, 30, 68, 143, 257, 302, 326, 327, 330, 414, 714, 730, 731, 739, 784, 823, 993, 994, 1025, 1029, 1040, 1052], "f1_c0": 886, "f1_c1": 886, "f1_c2": 886, "f1_macro": [414, 993, 1040], "f1_micro": [993, 1040], "f1_sampl": 993, "f1_score": [23, 266, 330, 375, 409, 739, 993, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1052, 1053], "f1_weight": [993, 1040], "f2": [384, 994], "f2001": 993, "f2006": 993, "f3": 994, "f4": 499, "f401": [43, 65, 88, 99, 168, 194, 218, 220], "f781bf": [38, 42, 60, 61], "f7bd01": 38, "f_": [417, 636, 731, 993], "f_0": 127, "f_1": [127, 266, 993], "f_beta": 993, "f_classif": [142, 143, 342, 419, 593, 596, 597, 599, 600, 601, 605, 607, 610], "f_i": 407, "f_idx": 127, "f_j": [407, 1001], "f_m": 417, "f_n": 266, "f_p": 266, "f_regress": [52, 141, 419, 593, 596, 597, 599, 600, 601, 605, 606, 610, 1039, 1043, 1050, 1053], "f_score": 266, "f_statist": [606, 607], "f_test": 141, "fa": [76, 92, 102, 103, 104, 164, 386, 415, 474, 477, 533, 542, 801, 827, 1015], "fa_estim": 93, "fa_scor": 100, "fab": [1018, 1046, 1047], "fabia": [406, 720], "fabian": [0, 184, 202, 219, 295, 399, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1053], "fabiana": 1047, "fabio": 1042, "fabisch": [0, 399, 1038, 1039, 1040, 1042], "fabrizio": 1051, "face": [1, 3, 13, 14, 34, 46, 49, 51, 66, 92, 96, 98, 100, 102, 103, 104, 117, 164, 173, 225, 230, 232, 241, 351, 373, 380, 384, 415, 417, 419, 450, 473, 494, 495, 496, 522, 533, 534, 538, 540, 541, 542, 544, 559, 585, 658, 674, 698, 714, 815, 831, 848, 885, 910, 928, 996, 1009, 1010, 1011, 1015, 1023, 1028, 1031, 1036, 1044], "face_compress": 1028, "face_id": 235, "facecolor": [10, 24, 32, 43, 58, 93, 99, 111, 138, 157, 218, 234, 259, 290, 307, 337, 340, 343, 344, 345], "faces_cent": 93, "facial": 375, "facil": 992, "facilit": [366, 394, 403, 1013, 1014, 1042, 1045], "fact": [2, 9, 17, 23, 79, 84, 109, 120, 122, 169, 230, 240, 278, 281, 351, 374, 387, 392, 394, 413, 415, 416, 417, 418, 650, 669, 671, 705, 987, 989, 996, 1003, 1007, 1008, 1014, 1018, 1050], "facto": 1046, "factor": [1, 4, 7, 14, 24, 29, 42, 44, 51, 53, 60, 76, 83, 92, 98, 102, 104, 128, 164, 167, 211, 223, 226, 236, 253, 270, 271, 283, 284, 297, 299, 300, 305, 307, 317, 319, 338, 366, 367, 380, 386, 389, 394, 406, 408, 410, 417, 418, 420, 441, 443, 455, 470, 472, 473, 474, 475, 477, 479, 489, 505, 515, 516, 528, 533, 536, 537, 539, 541, 542, 545, 546, 547, 548, 550, 551, 562, 563, 564, 589, 592, 598, 614, 650, 651, 652, 655, 656, 657, 683, 684, 693, 720, 784, 801, 804, 805, 827, 851, 885, 899, 901, 909, 941, 942, 982, 989, 990, 996, 1003, 1006, 1010, 1013, 1015, 1030, 1031, 1036, 1037, 1039, 1040, 1042, 1050, 1052], "factoranalysi": [93, 100, 103, 415, 545, 1037, 1039, 1048, 1050], "factori": [59, 253, 259, 418, 963, 993], "facundo": [1047, 1050], "fagan": 1045, "fail": [2, 52, 64, 94, 100, 157, 158, 176, 181, 201, 233, 259, 315, 367, 378, 380, 382, 383, 388, 395, 397, 413, 414, 441, 473, 475, 677, 678, 679, 862, 863, 924, 936, 982, 990, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "failur": [164, 165, 167, 171, 192, 380, 388, 658, 786, 831, 925, 926, 1015, 1017, 1018, 1049, 1050, 1054], "fair": [10, 25, 417, 691, 695, 834, 994, 1018], "fairer": 362, "fairli": [80, 121, 220, 275, 300, 388, 410, 560, 561, 700, 994, 1027], "faith": [17, 155, 344], "fake": 418, "falak": 1045, "fall": [2, 11, 122, 125, 156, 258, 259, 380, 382, 408, 410, 418, 435, 447, 448, 509, 510, 728, 729, 795, 882, 894, 992, 993, 1003, 1020, 1028, 1045], "fallback": [395, 397, 833, 834, 993], "fals": [2, 3, 5, 6, 8, 9, 12, 13, 18, 19, 22, 24, 25, 30, 31, 32, 37, 40, 42, 44, 45, 52, 53, 62, 65, 68, 69, 70, 77, 79, 90, 97, 101, 102, 109, 115, 116, 119, 122, 123, 125, 133, 136, 149, 154, 155, 156, 157, 167, 168, 169, 170, 176, 177, 181, 183, 197, 198, 202, 203, 205, 213, 215, 218, 221, 233, 234, 236, 240, 243, 253, 256, 257, 259, 262, 263, 266, 267, 268, 269, 270, 271, 272, 274, 283, 287, 293, 296, 300, 301, 305, 306, 311, 312, 315, 317, 318, 319, 320, 322, 323, 328, 339, 341, 343, 346, 347, 351, 352, 374, 380, 381, 382, 385, 394, 400, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 422, 423, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 516, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 636, 637, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 695, 696, 698, 699, 700, 701, 702, 703, 704, 709, 710, 712, 713, 714, 715, 716, 719, 720, 727, 728, 729, 730, 731, 732, 739, 743, 744, 751, 752, 755, 757, 762, 764, 768, 770, 775, 779, 783, 784, 785, 786, 788, 790, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 815, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 923, 924, 925, 926, 936, 943, 954, 955, 958, 959, 963, 964, 965, 967, 974, 979, 980, 982, 983, 989, 993, 996, 1003, 1007, 1008, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "false_discovery_r": 596, "famili": [4, 253, 366, 368, 394, 410, 413, 415, 418, 419, 593, 596, 597, 599, 600, 601, 607, 862, 863, 881, 893, 989, 1003, 1007, 1025, 1027, 1040, 1050], "familiar": [380, 416, 1044], "famou": [375, 377, 417, 1008], "famous": 995, "fan": [0, 367, 395, 398, 1008, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "fanci": 418, "fancybox": 345, "fanelli": [1051, 1052], "fang": [659, 1043, 1044], "fanni": 1046, "fantasi": 998, "fantast": 1018, "faouzi": [1046, 1047], "faq": [0, 388, 414, 693, 990, 1003], "far": [23, 58, 80, 119, 150, 156, 167, 197, 215, 339, 343, 351, 353, 380, 389, 420, 721, 885, 968, 998, 999, 1008, 1018, 1027], "farach": 985, "farahsae": 1044, "farawai": 996, "fare": [69, 169, 240, 319, 320, 1040, 1041], "fargo": 10, "farhan": 1052, "farlei": [0, 399, 1036], "farouk": [1044, 1045], "farther": 726, "farthest": 410, "fashion": [5, 114, 120, 205, 268, 367, 394, 406, 407, 410, 415, 417, 554, 558, 559, 560, 561, 565, 566, 567, 603, 628, 831, 854, 869, 872, 878, 889, 913, 914, 915, 916, 964, 983, 989, 993, 1003, 1045], "fast": [11, 25, 60, 173, 181, 186, 212, 213, 231, 232, 306, 353, 366, 375, 380, 389, 410, 412, 414, 415, 417, 418, 422, 447, 448, 470, 475, 509, 533, 534, 536, 539, 541, 545, 548, 565, 566, 567, 589, 590, 592, 633, 634, 641, 659, 660, 673, 675, 688, 700, 801, 815, 826, 827, 837, 838, 845, 846, 850, 861, 942, 962, 985, 989, 992, 995, 996, 998, 999, 1009, 1013, 1018, 1029, 1036, 1037, 1042, 1043, 1046, 1047], "fast_dict": 1046, "fast_dot": 1043, "fast_logdet": 389, "fast_svd": 1036, "faster": [5, 17, 37, 62, 71, 93, 114, 115, 119, 120, 122, 125, 146, 168, 173, 183, 197, 199, 212, 213, 215, 232, 236, 253, 283, 285, 301, 316, 318, 319, 323, 351, 352, 353, 366, 374, 380, 388, 389, 394, 403, 408, 410, 415, 419, 420, 422, 444, 448, 450, 452, 453, 454, 463, 509, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 554, 560, 561, 562, 563, 644, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 673, 675, 685, 688, 692, 696, 727, 757, 779, 780, 781, 845, 846, 850, 862, 863, 880, 882, 884, 894, 898, 942, 962, 982, 986, 989, 994, 996, 997, 1000, 1005, 1007, 1008, 1009, 1013, 1025, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "fastest": [55, 257, 353, 448, 671, 673, 675, 688, 941, 942, 992], "fastest_top_recall_high_precision_index": 257, "fastfm": 1013, "fastica": [92, 104, 164, 196, 415, 533, 536, 542, 1015, 1028, 1036, 1038, 1044, 1050, 1051], "fastkmean": 450, "fastmcd": [412, 470, 475], "fastnc": 861, "fat": [522, 525], "fatima": [1050, 1053], "fato": 1049, "fauchereau": 1049, "fault": [388, 1044, 1046, 1048], "faulti": [200, 1036], "favor": [3, 80, 115, 243, 249, 392, 412, 417, 674, 676, 731, 809, 811, 864, 982, 1001, 1038, 1040, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "favorit": [380, 392, 1018], "favour": [793, 990, 992, 1045], "fawcett": [789, 790, 993], "fazlul": 1038, "fbeta_scor": [730, 743, 784, 993, 1038, 1039, 1040, 1041, 1046, 1052], "fc": [7, 288, 375], "fc2009": 993, "fcd116": 90, "fcharra": [1051, 1054], "fcluster": 170, "fcostin": 1036, "fd": 6, "fdr": 593, "fear": 1029, "feasibl": [380, 874, 875, 885], "feast": 411, "feat": [6, 8, 384, 418], "feat0": [228, 316], "feat1": [228, 316, 418], "feat2": [228, 316, 418], "feat3": [228, 316, 418], "feat_idx": 628, "featur": [1, 3, 4, 5, 6, 8, 9, 10, 13, 14, 17, 18, 23, 24, 25, 28, 29, 30, 31, 34, 40, 43, 45, 48, 56, 58, 61, 66, 67, 68, 69, 70, 71, 73, 74, 78, 79, 83, 84, 87, 88, 89, 90, 93, 95, 97, 99, 100, 101, 103, 108, 110, 113, 115, 118, 122, 124, 129, 130, 131, 132, 133, 134, 136, 137, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 168, 171, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 193, 196, 197, 198, 199, 201, 202, 205, 206, 212, 213, 214, 216, 219, 225, 228, 230, 234, 235, 236, 239, 240, 241, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 281, 286, 287, 288, 291, 292, 293, 294, 298, 299, 301, 303, 304, 305, 308, 312, 313, 314, 316, 319, 320, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 336, 339, 343, 346, 349, 350, 353, 354, 357, 358, 359, 360, 362, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 385, 387, 388, 389, 392, 393, 394, 395, 396, 397, 403, 407, 410, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 426, 431, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 580, 581, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 688, 689, 690, 691, 692, 693, 698, 702, 703, 704, 714, 722, 723, 724, 725, 742, 743, 746, 747, 749, 759, 760, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 782, 786, 789, 791, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 926, 939, 958, 968, 969, 970, 974, 982, 985, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1025, 1026, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "feature_0": 918, "feature_1": [632, 918], "feature_2": 632, "feature_all_": 842, "feature_count_": [840, 842, 844], "feature_extract": [6, 13, 17, 44, 45, 48, 49, 52, 64, 68, 96, 164, 260, 330, 350, 351, 352, 353, 368, 369, 375, 410, 411, 418, 465, 545, 878, 991, 1028, 1029, 1036, 1037, 1038, 1039, 1042, 1043], "feature_import": 123, "feature_importances_": [116, 117, 123, 146, 169, 170, 394, 417, 419, 554, 555, 558, 559, 560, 561, 565, 566, 567, 594, 595, 598, 913, 914, 915, 916, 1038, 1041, 1045], "feature_index": 418, "feature_indices_": 1044, "feature_log_prob_": [840, 841, 842, 844], "feature_map": [231, 305], "feature_map__n_compon": 231, "feature_map_fouri": 231, "feature_map_nystroem": [231, 640], "feature_nam": [13, 17, 88, 103, 116, 123, 127, 146, 167, 169, 206, 237, 273, 286, 305, 315, 316, 317, 322, 336, 351, 357, 373, 375, 385, 411, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 583, 632, 633, 634, 886, 917, 918, 919, 1001, 1009, 1052], "feature_name_combin": [878, 1052], "feature_names_": 582, "feature_names_in": 1050, "feature_names_in_": [240, 312, 318, 394, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1049, 1050, 1051, 1052, 1054], "feature_names_out": [426, 431, 443, 444, 446, 448, 450, 465, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 1050, 1053], "feature_rang": [302, 875, 891, 1003, 1038, 1048], "feature_select": [52, 69, 70, 72, 140, 141, 142, 143, 144, 145, 146, 147, 164, 240, 317, 319, 342, 362, 369, 394, 400, 411, 419, 582, 982, 1015, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "feature_selector": 146, "feature_to_plot": 191, "feature_union": 1052, "featureagglomer": [49, 52, 441, 442, 1010, 1028, 1039, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "featureforg": 1018, "featurehash": [17, 68, 164, 330, 350, 351, 352, 354, 368, 375, 418, 489, 582, 589, 590, 591, 592, 878, 1015, 1037, 1042, 1043, 1044, 1050, 1051], "featureheash": 353, "features_": [630, 983], "features__pca__n_compon": 72, "features__univ_select__k": 72, "features_idx": 305, "features_info": 168, "features_nam": [166, 1043], "features_samples_ratio": 31, "featureselector": 602, "featuretool": 1013, "featureunion": [2, 72, 372, 394, 400, 408, 465, 630, 867, 983, 1014, 1018, 1031, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054], "featurewis": 881, "feb": [36, 441, 455], "februari": [0, 412, 474, 993, 1037, 1041, 1053], "fed": [6, 130, 362, 375, 418, 982, 998, 1003, 1047], "feda": [1044, 1045], "feder": 1013, "federico": [1038, 1039, 1044, 1045, 1050], "federicopisanu": 1046, "federicov": 6, "feed": [6, 84, 198, 233, 353, 375, 378, 385, 392, 410, 418, 743, 878, 994], "feedback": [256, 379, 380, 381, 395, 1013, 1017, 1044], "feedforward": [862, 863], "feedstock": 384, "feel": [25, 162, 305, 379, 380, 388, 410, 447, 1009], "feel_temp": [2, 168], "feghali": 1053, "fei": [564, 999], "feld": [1040, 1052], "feldbauer": [1044, 1045, 1046, 1047, 1050], "feldman": [1038, 1043, 1044, 1045, 1046], "felip": [1049, 1050, 1051, 1052], "felix": [1038, 1043, 1044, 1046, 1048, 1049, 1050], "femal": [69, 167, 320, 385, 878, 879, 1003], "fenc": 385, "feng": [1046, 1048, 1049, 1050], "fenil": 1049, "fenx": 1044, "ferdman": 1053, "ferenc": 1018, "fernand": [1044, 1050, 1051], "fernandez": 1045, "fernando": [1041, 1048], "fern\u00e1ndez": 1050, "ferrando": 1046, "ferrari": 1044, "ferreira": [1044, 1049, 1050], "ferri": [419, 993], "ferria": 1043, "ferrin": 1050, "ferriss": 1043, "ferr\u00e9": 1050, "ferr\u00edn": 1047, "fetal": 236, "fetch": [10, 15, 130, 167, 215, 253, 273, 373, 374, 375, 380, 384, 385, 388, 408, 415, 497, 556, 557, 558, 559, 564, 565, 566, 567, 589, 590, 592, 1044, 1052], "fetch_": 1043, "fetch_20newsgroup": [13, 17, 68, 260, 330, 351, 352, 353, 375, 490, 1029, 1041, 1046, 1054], "fetch_20newsgroups_vector": [5, 212, 230, 375, 1036, 1046, 1048, 1053, 1054], "fetch_california_h": [115, 120, 161, 162, 305, 317, 375, 393, 411, 1045, 1047, 1054], "fetch_covtyp": [173, 236, 317, 375, 1045, 1048, 1050, 1054], "fetch_data": 1029, "fetch_kddcup99": [236, 375, 1043, 1044, 1045, 1048, 1049, 1054], "fetch_lfw_pair": [375, 1041, 1051, 1054], "fetch_lfw_peopl": [4, 375, 1025, 1051, 1054], "fetch_mldata": 1044, "fetch_olivetti_fac": [48, 93, 117, 235, 375, 1044, 1045, 1046, 1054], "fetch_openml": [2, 3, 11, 69, 73, 119, 125, 130, 154, 167, 168, 169, 197, 205, 213, 215, 227, 236, 240, 253, 273, 278, 281, 283, 301, 311, 315, 319, 322, 374, 384, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "fetch_rcv1": [375, 1041, 1045, 1054], "fetch_species_distribut": [9, 296, 1045, 1054], "fetcher": [373, 1041, 1043, 1052], "feth": 1036, "feurer": [1039, 1044], "fevott": [415, 539, 541, 548], "few": [0, 5, 13, 17, 37, 44, 50, 97, 119, 125, 152, 155, 156, 186, 195, 197, 199, 215, 232, 233, 243, 261, 262, 266, 301, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 346, 353, 366, 375, 376, 377, 380, 382, 393, 395, 400, 403, 406, 407, 410, 414, 415, 417, 419, 420, 438, 450, 562, 563, 656, 693, 696, 898, 942, 961, 989, 990, 992, 993, 996, 997, 1006, 1008, 1009, 1018, 1020, 1027, 1028, 1029, 1042, 1052], "fewer": [2, 12, 24, 53, 109, 118, 120, 197, 366, 381, 410, 419, 420, 449, 462, 542, 554, 595, 697, 835, 946, 989, 994, 996, 1041, 1042, 1043], "fewest": [258, 628], "ff": 388, "ff0000": [29, 291, 299], "ff3333": 90, "ff7216": 90, "ff7f00": [42, 60, 226], "ff9c34": [57, 62], "ffaaaa": 291, "ffc107": 309, "fft": 641, "fhaselbeck": 1048, "fhoang7": 1045, "fhr": 236, "fi": 876, "fibins": [1044, 1045], "fidel": 12, "fidor": 1052, "fiedler": 1042, "fiegel": [1048, 1049, 1051], "field": [146, 215, 377, 406, 410, 411, 418, 499, 502, 618, 989, 991, 1000, 1008, 1013, 1017, 1029, 1037], "fifth": [232, 986, 1020], "fig": [2, 3, 5, 6, 7, 8, 11, 13, 23, 25, 28, 32, 40, 41, 43, 51, 53, 55, 58, 62, 64, 71, 76, 78, 84, 88, 93, 98, 99, 103, 109, 115, 116, 119, 120, 122, 123, 125, 127, 128, 130, 132, 152, 158, 161, 168, 170, 173, 177, 185, 188, 191, 192, 194, 195, 197, 198, 201, 205, 210, 212, 215, 218, 219, 220, 221, 222, 223, 227, 229, 236, 237, 248, 253, 254, 255, 256, 259, 260, 261, 262, 265, 268, 269, 270, 273, 281, 283, 285, 287, 288, 296, 300, 301, 305, 306, 307, 309, 310, 311, 315, 319, 320, 336, 343, 345, 346, 347, 348, 351, 352, 353, 356, 387, 1025, 1028], "fig1": 65, "fig2": 65, "fig_num": 194, "figaspect": 309, "fight": [37, 201, 1018], "fighter": 68, "fignum": 344, "figsiz": [2, 3, 4, 8, 10, 11, 12, 13, 23, 24, 25, 28, 29, 30, 32, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 71, 73, 78, 80, 83, 84, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 109, 111, 112, 119, 120, 121, 122, 123, 125, 128, 130, 131, 141, 151, 153, 157, 158, 161, 162, 167, 168, 170, 173, 176, 177, 180, 181, 187, 191, 194, 195, 196, 197, 198, 199, 201, 203, 205, 208, 211, 213, 215, 218, 219, 220, 222, 223, 226, 227, 229, 231, 234, 235, 236, 237, 243, 245, 246, 249, 253, 254, 255, 256, 261, 262, 263, 266, 268, 269, 273, 274, 281, 283, 285, 286, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 319, 320, 326, 328, 337, 339, 343, 344, 345, 346, 347, 348, 351, 352, 353, 919, 1025], "figur": [4, 5, 6, 8, 10, 12, 22, 23, 24, 25, 29, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 76, 80, 83, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110, 111, 112, 121, 122, 123, 124, 125, 128, 129, 133, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 167, 168, 169, 170, 176, 181, 182, 187, 190, 191, 194, 196, 198, 199, 203, 208, 212, 213, 214, 220, 221, 222, 226, 230, 231, 232, 234, 235, 237, 243, 245, 246, 249, 252, 258, 263, 264, 274, 288, 292, 293, 296, 299, 302, 305, 307, 308, 312, 315, 317, 326, 327, 328, 337, 339, 344, 357, 358, 359, 380, 410, 416, 417, 418, 420, 439, 632, 633, 698, 699, 701, 702, 703, 807, 824, 919, 982, 986, 989, 992, 993, 996, 997, 1000, 1001, 1007, 1008, 1009, 1024, 1025, 1027, 1028, 1049], "figure_": [30, 168, 237, 315, 317, 387, 439, 632, 633, 698, 699, 701, 702, 703, 807, 824], "figure_titl": 119, "filali": 1044, "file": [6, 10, 14, 20, 26, 30, 33, 46, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 241, 250, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 351, 352, 354, 361, 366, 367, 368, 374, 375, 377, 378, 380, 384, 385, 386, 388, 392, 403, 411, 415, 488, 494, 495, 497, 504, 509, 510, 535, 580, 581, 589, 590, 592, 917, 996, 1009, 1015, 1017, 1021, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "file_1": 504, "file_2": 504, "file_42": 504, "file_43": 504, "file_44": 504, "file_id": 374, "filenam": [6, 15, 330, 375, 386, 403, 489, 501, 504, 505, 508, 589, 590, 592, 1029, 1036, 1041, 1044, 1045], "filesystem": [388, 397, 1049], "filho": 407, "filip": [1053, 1054], "filipj8": [1043, 1044], "fill": [32, 118, 136, 169, 254, 288, 357, 394, 411, 415, 516, 528, 539, 541, 548, 588, 631, 917, 919, 983, 996, 1009], "fill_between": [11, 122, 125, 136, 149, 154, 156, 158, 176, 177, 215, 259, 261, 262, 263, 269, 807, 824], "fill_between_": [807, 824], "fill_between_kw": [807, 824], "fill_betweenx": 58, "fill_diagon": [170, 221], "fill_legend": 215, "fill_valu": [162, 228, 238, 316, 424, 427, 433, 434, 628, 631, 1003, 1044, 1052, 1053], "fillna": [215, 236], "filo": [1036, 1039], "filter": [6, 13, 44, 45, 71, 203, 215, 257, 259, 285, 351, 367, 375, 386, 389, 408, 410, 418, 449, 489, 490, 504, 589, 592, 596, 597, 598, 599, 600, 601, 775, 840, 934, 958, 995, 996, 1026, 1029, 1046], "filter_param": 775, "filtered_cv_result": 257, "filterwarn": [42, 60, 212, 300, 301, 380, 1003], "final": [2, 11, 24, 25, 32, 38, 40, 53, 68, 69, 78, 80, 84, 89, 98, 109, 110, 112, 114, 119, 120, 123, 130, 133, 143, 154, 162, 166, 168, 170, 173, 176, 181, 185, 186, 194, 197, 199, 214, 215, 219, 226, 240, 247, 253, 257, 265, 278, 283, 311, 312, 315, 316, 339, 343, 366, 368, 375, 378, 380, 381, 382, 384, 393, 394, 406, 407, 410, 411, 414, 417, 418, 419, 438, 443, 448, 449, 453, 460, 463, 465, 537, 556, 557, 568, 569, 571, 595, 628, 648, 654, 660, 680, 691, 695, 720, 801, 833, 834, 865, 866, 902, 905, 982, 983, 985, 989, 990, 993, 996, 999, 1000, 1003, 1006, 1018, 1027, 1041, 1044, 1045, 1046, 1047, 1049], "final_estim": [130, 315, 417, 568, 569], "final_estimator_": [568, 569], "final_lay": 417, "final_layer_gbr": 417, "final_layer_rfr": 417, "final_step": 40, "financ": [253, 994], "financi": [0, 10, 410, 417, 989], "find": [2, 3, 4, 10, 15, 25, 38, 44, 45, 46, 47, 50, 51, 53, 55, 63, 71, 78, 79, 93, 95, 97, 98, 103, 120, 130, 149, 153, 155, 157, 168, 181, 185, 186, 199, 205, 218, 220, 222, 223, 229, 236, 248, 253, 258, 259, 260, 270, 286, 291, 292, 293, 310, 315, 321, 341, 342, 343, 346, 351, 352, 356, 367, 377, 378, 380, 381, 382, 385, 386, 389, 392, 393, 394, 395, 406, 409, 410, 412, 413, 415, 417, 418, 419, 421, 442, 445, 446, 447, 451, 452, 453, 454, 463, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 559, 566, 583, 590, 611, 612, 648, 651, 654, 655, 656, 657, 659, 660, 672, 689, 708, 730, 731, 739, 783, 784, 785, 788, 789, 795, 800, 801, 815, 823, 847, 848, 849, 851, 853, 855, 856, 857, 878, 879, 884, 897, 898, 899, 913, 914, 916, 922, 941, 942, 944, 982, 983, 985, 988, 989, 990, 992, 993, 994, 997, 999, 1003, 1007, 1008, 1009, 1012, 1014, 1017, 1018, 1020, 1022, 1024, 1025, 1027, 1028, 1029, 1036, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1054], "findal": 353, "fine": [2, 35, 118, 146, 201, 213, 249, 257, 343, 358, 359, 377, 384, 394, 418, 447, 942, 961, 996, 999, 1008, 1014, 1046], "finer": [2, 11, 35, 285, 339, 367, 410, 414, 982, 996, 1046], "finfo": [221, 472, 473, 479, 607, 651, 652, 655, 656, 657, 683, 684, 1051], "finish": [146, 246, 990], "finit": [25, 243, 249, 366, 375, 394, 469, 539, 552, 583, 607, 610, 611, 612, 659, 729, 779, 786, 798, 826, 903, 923, 924, 925, 926, 989, 992, 993, 1018, 1020, 1027, 1043, 1044, 1048, 1050, 1051], "finn": [1044, 1045], "fire": 1029, "firefox": 1003, "fireplac": 119, "fireplacequ": 119, "firm": [10, 410], "first": [0, 2, 3, 5, 6, 9, 11, 15, 18, 23, 24, 28, 29, 30, 32, 37, 53, 54, 56, 59, 62, 63, 64, 65, 68, 69, 70, 73, 78, 83, 84, 87, 88, 89, 98, 101, 109, 110, 114, 116, 117, 118, 119, 120, 121, 123, 125, 127, 130, 131, 132, 133, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 167, 168, 170, 173, 176, 178, 180, 186, 193, 194, 195, 198, 199, 205, 206, 211, 219, 222, 230, 231, 233, 234, 235, 237, 239, 240, 245, 249, 253, 254, 259, 261, 262, 266, 268, 270, 271, 278, 281, 283, 285, 288, 292, 293, 294, 299, 301, 305, 307, 310, 311, 312, 316, 317, 327, 330, 335, 336, 339, 341, 351, 352, 353, 356, 357, 360, 362, 367, 368, 374, 375, 377, 378, 379, 382, 384, 385, 386, 388, 392, 394, 403, 406, 407, 409, 410, 413, 414, 415, 417, 418, 419, 420, 422, 444, 447, 448, 451, 460, 461, 465, 473, 484, 488, 489, 491, 492, 493, 495, 498, 501, 503, 505, 509, 510, 511, 529, 534, 535, 539, 542, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 583, 585, 589, 590, 591, 592, 594, 595, 602, 611, 612, 618, 622, 625, 632, 633, 634, 635, 647, 653, 660, 667, 669, 675, 677, 689, 696, 699, 700, 701, 703, 713, 717, 737, 743, 764, 765, 783, 795, 798, 799, 804, 805, 806, 807, 808, 813, 815, 822, 824, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 850, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 870, 878, 882, 883, 884, 886, 887, 894, 895, 907, 910, 913, 914, 915, 916, 918, 920, 921, 925, 926, 927, 944, 946, 960, 964, 967, 979, 982, 983, 987, 988, 989, 990, 992, 993, 994, 995, 996, 1000, 1003, 1004, 1007, 1008, 1009, 1018, 1020, 1026, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "first_img_data": 508, "first_pca_compon": 310, "first_quart": 102, "first_week": 125, "firstli": [96, 366, 392, 658, 1029], "fisach": 1042, "fiscal": 0, "fischer": [1041, 1042], "fischler": 989, "fischoff": 1048, "fish": 318, "fisher": [377, 417, 505, 637, 1013], "fisher1958": 417, "fisher_transform": 637, "fitfit_": 1049, "fit_algorithm": [93, 532, 538, 1051, 1052], "fit_and_evalu": 352, "fit_and_plot_model": 310, "fit_and_scor": 205, "fit_data": 19, "fit_dur": 283, "fit_ecoc": 1040, "fit_grid_point": 1047, "fit_intercept": [5, 176, 177, 183, 202, 211, 226, 267, 312, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 905, 906, 912, 989, 1007, 1040, 1044, 1045, 1046, 1048, 1049, 1050], "fit_inverse_transform": [3, 98, 536, 1045], "fit_ovo": 1040, "fit_ovr": 1040, "fit_param": [233, 394, 434, 438, 443, 446, 466, 533, 535, 537, 538, 540, 543, 544, 550, 556, 557, 568, 569, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 631, 636, 639, 640, 641, 642, 643, 666, 672, 807, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 849, 854, 857, 861, 864, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 897, 898, 953, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055], "fit_path": [651, 655, 656, 657, 683, 684], "fit_predict": [17, 54, 55, 58, 226, 236, 290, 382, 394, 410, 428, 432, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 470, 564, 678, 793, 794, 798, 799, 851, 857, 865, 909, 999, 1041, 1044, 1045, 1049, 1051, 1053], "fit_prior": [375, 840, 841, 842, 844], "fit_status_": [907, 908, 909, 910, 911], "fit_tim": [11, 56, 119, 186, 205, 261, 414, 828, 829], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 11, "fit_times_nb": 261, "fit_times_svm": 261, "fit_transform": [2, 3, 4, 8, 10, 13, 17, 42, 47, 50, 51, 56, 60, 88, 94, 97, 103, 128, 173, 188, 213, 215, 218, 219, 220, 221, 222, 223, 229, 230, 233, 234, 240, 283, 287, 300, 305, 306, 310, 311, 312, 315, 318, 320, 321, 322, 323, 339, 351, 352, 353, 362, 372, 375, 382, 385, 386, 394, 405, 411, 415, 418, 419, 426, 434, 443, 444, 446, 448, 450, 465, 467, 469, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 691, 692, 693, 697, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 983, 985, 989, 994, 996, 1003, 1004, 1005, 1020, 1025, 1028, 1029, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1050, 1052, 1053, 1054], "fitfailedwarn": [801, 804, 805, 807, 815, 824, 827, 828, 829, 832], "fitted_transform": [382, 465], "fittedcolumntransform": [130, 168], "fittedgridsearchcv": 238, "fittedpipelin": [130, 228, 238, 260, 273, 311, 316], "fittedrandomforestclassifi": 322, "fittedrandomizedsearchcv": 69, "fittedstackingregressor": 130, "fitter": 1009, "fitting_weight": 400, "fitzgerald": 1044, "fitzk": 1018, "five": [117, 125, 244, 253, 327, 330, 375, 532, 540, 546, 990, 996, 1008, 1018, 1036], "five_imag": 418, "fix": [2, 6, 18, 23, 32, 44, 69, 102, 114, 115, 118, 125, 149, 150, 154, 157, 167, 181, 199, 215, 236, 249, 262, 299, 315, 316, 317, 318, 319, 320, 321, 322, 323, 352, 366, 367, 374, 376, 378, 379, 380, 382, 383, 388, 392, 394, 395, 400, 410, 411, 414, 415, 417, 418, 420, 453, 463, 473, 505, 513, 532, 538, 541, 543, 549, 550, 560, 561, 565, 566, 589, 592, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 631, 654, 664, 669, 671, 685, 688, 692, 696, 708, 786, 798, 815, 822, 847, 848, 850, 853, 855, 856, 872, 875, 889, 913, 914, 942, 960, 982, 989, 992, 993, 996, 1003, 1014, 1029, 1034, 1035, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "fixed_classes_uniform_labelings_scor": 35, "fixed_vocabulary_": [589, 592], "fixedthresholdclassifi": [253, 409, 823, 1054], "fixm": [384, 394], "fixtur": [367, 380], "fkaren27": 1050, "flach": [407, 993], "flach2008": 993, "flach2015": 993, "flag": [154, 233, 236, 322, 378, 380, 381, 383, 400, 405, 465, 611, 612, 628, 674, 676, 729, 786, 1008, 1042, 1046, 1047, 1049, 1050, 1051, 1052], "flair": 995, "flak": 1051, "flake8": 580, "flanagan": [1045, 1046], "flat": [41, 93, 168, 218, 219, 220, 257, 410, 417, 418, 441, 447, 449, 462, 510, 1000, 1028, 1036, 1037, 1052], "flat_grid": 231, "flatnonzero": [102, 185, 258, 267, 268, 782], "flatten": [13, 30, 221, 231, 257, 309, 336, 347, 386, 503, 570, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 854], "flatten_transform": [570, 1043], "flatter": [2, 23], "flavanoid": [7, 377], "flaviomorelli": 1046, "flavor": [380, 996], "flavour": 417, "flaw": [394, 417], "flaxman": [1038, 1040], "fledg": [368, 418], "fleet": 2, "fleme": 1051, "flennerhag": 1044, "fletcher": [989, 1036, 1040], "flexibl": [2, 23, 119, 161, 197, 306, 336, 353, 382, 387, 392, 403, 414, 420, 675, 905, 906, 982, 987, 989, 993, 997, 1003, 1013, 1014, 1018, 1045, 1049], "flier": 8, "flink": 68, "flip": [97, 583, 743, 942, 995, 1040, 1049], "flip_i": 516, "flip_sign": 942, "float": [5, 8, 10, 17, 39, 43, 44, 45, 46, 51, 58, 59, 63, 64, 65, 69, 96, 99, 138, 157, 167, 183, 187, 221, 253, 258, 259, 263, 267, 346, 353, 366, 374, 375, 380, 389, 394, 405, 409, 410, 411, 418, 419, 421, 422, 423, 427, 429, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 584, 585, 589, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 611, 612, 614, 615, 616, 617, 618, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 760, 767, 770, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 815, 818, 821, 823, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 868, 871, 872, 878, 879, 881, 883, 885, 886, 887, 888, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 922, 923, 925, 926, 929, 939, 940, 956, 968, 974, 979, 983, 993, 994, 996, 997, 1003, 1008, 1009, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "float16": 1045, "float32": [15, 121, 221, 302, 320, 367, 375, 380, 381, 382, 394, 403, 405, 558, 559, 560, 561, 564, 565, 566, 567, 594, 595, 641, 642, 659, 700, 764, 870, 913, 914, 915, 916, 923, 969, 970, 971, 1009, 1020, 1029, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "float64": [9, 11, 12, 46, 51, 69, 121, 123, 124, 167, 168, 253, 270, 319, 320, 367, 374, 380, 381, 382, 394, 418, 472, 473, 479, 497, 498, 509, 510, 543, 549, 582, 583, 590, 592, 642, 659, 674, 676, 700, 739, 870, 878, 879, 907, 908, 910, 911, 914, 916, 923, 925, 964, 967, 969, 970, 971, 1008, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "float_info": 17, "floch": 1053, "floor": 12, "floor_x": 12, "flore": 1049, "florian": [214, 1018, 1036, 1040, 1042, 1046, 1053], "florin": 1054, "flow": 382, "flowchart": [414, 1022], "flower": [88, 101, 268, 507, 508, 993, 1013], "floyd": [375, 689, 990], "floydsoft": 1040, "fluctuat": [10, 58, 125, 197, 266, 1044], "flush": 205, "fly": [121, 385, 388, 509, 510, 583, 1036, 1038, 1045], "flyingdutchman23": 1049, "flyingimmidev": 1036, "flynn": [1049, 1051], "fmax": 215, "fmi": [410, 732], "fmin_l_bfgs_b": [611, 612], "fmt": [59, 208], "fn": [410, 713, 719, 730, 731, 732, 783, 784, 785, 788, 993, 994], "fn_c": 268, "fna": [146, 377], "fnlwgt": [322, 497], "fnr": [256, 699, 728], "fo": 418, "focu": [2, 7, 93, 109, 149, 249, 293, 366, 385, 407, 417, 554, 555, 560, 562, 563, 679, 990, 996, 1003, 1013, 1014, 1017], "focus": [23, 76, 186, 278, 375, 392, 990, 1003, 1013], "fokow": 1053, "fold": [2, 65, 72, 76, 115, 118, 121, 136, 145, 167, 186, 245, 253, 254, 255, 257, 259, 260, 262, 269, 273, 312, 329, 346, 362, 375, 380, 383, 384, 393, 394, 400, 409, 410, 419, 438, 473, 494, 537, 568, 569, 595, 603, 648, 652, 654, 656, 660, 662, 664, 666, 674, 676, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 886, 907, 910, 982, 989, 993, 1003, 1008, 1024, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1053], "folder": [70, 375, 378, 380, 384, 388, 397, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 996, 1029], "folkman": 1043, "folloni": 1047, "follow": [0, 2, 5, 17, 24, 25, 30, 35, 43, 52, 53, 55, 61, 65, 69, 70, 90, 93, 102, 109, 112, 122, 127, 141, 154, 161, 166, 167, 168, 169, 170, 176, 178, 181, 185, 186, 195, 197, 198, 212, 215, 227, 233, 234, 236, 249, 253, 259, 266, 268, 269, 273, 278, 305, 311, 312, 315, 316, 318, 319, 320, 336, 346, 351, 352, 353, 356, 360, 362, 366, 367, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 427, 429, 430, 431, 432, 433, 434, 442, 444, 446, 447, 448, 449, 450, 454, 462, 464, 465, 466, 469, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 516, 535, 539, 541, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 632, 634, 635, 647, 653, 659, 660, 671, 672, 681, 693, 695, 700, 706, 710, 714, 719, 789, 820, 842, 847, 848, 849, 851, 853, 855, 856, 857, 864, 868, 869, 870, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 903, 905, 906, 910, 913, 914, 915, 916, 920, 921, 941, 961, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1020, 1029, 1033, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "folwarczn\u00fd": 1053, "fonari": [1048, 1049], "fond": [0, 1018], "fondat": 1018, "font": [122, 186, 211, 231, 917, 919], "font_manag": [79, 289, 338], "font_prop": 79, "font_siz": 309, "fontdict": [13, 37], "fontnam": [917, 1049], "fontproperti": [79, 289, 338], "fontsiz": [3, 6, 8, 13, 32, 48, 58, 89, 96, 118, 141, 152, 153, 155, 158, 168, 177, 187, 196, 208, 219, 220, 246, 254, 263, 264, 265, 270, 271, 302, 309, 345, 919], "fontweight": [58, 192], "foo": [382, 582, 997], "food": 377, "foot": 1012, "footer": [13, 68, 260, 351, 352, 375, 489, 490], "footnot": [1000, 1013], "footprint": [317, 320, 366, 368, 410, 415, 542, 556, 557, 558, 559, 564, 565, 566, 567, 1038, 1041, 1042, 1047, 1048, 1051], "fopenmp": [378, 381], "foral": [410, 420, 614], "forbid": [410, 417], "forbidden": [168, 417], "forc": [109, 149, 182, 201, 283, 309, 351, 374, 378, 384, 404, 414, 417, 451, 458, 465, 468, 497, 607, 610, 647, 648, 653, 654, 658, 661, 662, 663, 664, 673, 674, 675, 682, 685, 688, 755, 779, 782, 823, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 907, 908, 909, 910, 911, 923, 925, 926, 1003, 1031, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "force_all_finit": [779, 923, 925, 926, 1047, 1050], "force_alpha": [840, 841, 842, 844, 1051], "force_finit": [607, 610, 729, 786, 993, 1050], "force_int_remainder_col": [465, 468], "ford": 10, "forecast": [1, 2, 14, 122, 125, 148, 149, 156, 159, 164, 197, 199, 215, 259, 407, 409, 420, 497, 563, 612, 616, 623, 624, 626, 702, 743, 746, 747, 749, 791, 822, 827, 828, 831, 993, 1013, 1015], "foreground": [38, 64], "foreign_work": 253, "foreman": 1043, "forese": 392, "forest": [9, 25, 29, 108, 109, 114, 118, 120, 121, 123, 124, 125, 126, 128, 130, 133, 134, 161, 164, 165, 171, 173, 226, 256, 258, 260, 296, 317, 351, 359, 362, 373, 393, 394, 407, 408, 419, 464, 465, 491, 492, 496, 497, 499, 516, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 631, 635, 801, 806, 831, 838, 865, 879, 909, 913, 914, 915, 982, 983, 994, 1001, 1014, 1015, 1016, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1053], "forest_import": 116, "forestclassifi": 1041, "forestcov": 236, "forg": [315, 316, 317, 318, 319, 320, 321, 322, 323, 367, 381, 383, 384, 388, 397], "forget": [168, 362, 367, 374, 384, 392, 415, 990], "forget_factor": [415, 539], "forgiv": 735, "forina": 377, "fork": [378, 380, 384, 388, 392], "forkserv": 392, "form": [2, 7, 17, 30, 40, 58, 65, 93, 133, 156, 157, 167, 232, 233, 249, 259, 326, 362, 374, 377, 380, 382, 384, 394, 395, 406, 408, 410, 413, 414, 415, 416, 417, 418, 420, 422, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 460, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 700, 798, 799, 800, 801, 804, 805, 806, 809, 811, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 931, 950, 953, 982, 984, 986, 987, 989, 990, 993, 994, 997, 998, 999, 1003, 1008, 1013, 1020, 1027, 1042, 1046, 1048], "formal": [394, 395, 410, 417, 845, 846, 990, 993, 994, 997], "format": [6, 9, 10, 11, 17, 19, 46, 52, 56, 59, 68, 78, 93, 102, 112, 118, 121, 123, 136, 141, 142, 173, 177, 183, 197, 215, 254, 264, 266, 267, 270, 274, 287, 288, 291, 292, 309, 315, 323, 345, 356, 360, 366, 373, 379, 380, 382, 383, 388, 389, 393, 394, 403, 411, 414, 417, 418, 434, 443, 444, 446, 448, 450, 451, 453, 460, 465, 469, 483, 484, 485, 486, 488, 490, 497, 498, 499, 509, 510, 511, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 552, 558, 559, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 647, 653, 659, 660, 661, 663, 667, 668, 669, 677, 678, 679, 689, 690, 693, 698, 714, 721, 740, 741, 752, 769, 792, 793, 834, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 892, 897, 898, 903, 905, 917, 925, 926, 947, 955, 959, 964, 967, 969, 970, 971, 972, 973, 974, 979, 983, 993, 996, 1001, 1003, 1004, 1007, 1009, 1013, 1020, 1021, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1053, 1054], "format_func": 288, "formatter_result": 56, "former": [10, 353, 409, 417, 418, 566, 803, 810, 819, 995, 1036, 1042, 1045], "formerli": [201, 1037, 1040, 1042, 1043], "formul": [109, 149, 158, 201, 268, 380, 410, 412, 415, 418, 420, 423, 476, 550, 551, 558, 565, 651, 652, 655, 656, 657, 659, 660, 666, 671, 764, 770, 799, 907, 910, 913, 915, 989, 993, 994, 997, 1003, 1016, 1031, 1053], "formula": [76, 77, 266, 406, 410, 412, 423, 474, 476, 517, 518, 519, 591, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 677, 679, 705, 730, 731, 756, 765, 982, 987, 989, 993, 998, 999, 1003, 1007, 1041, 1043, 1045], "forrest": [1047, 1048], "forsal": [17, 353, 375], "forsyth": 1044, "forth": 388, "fortin": [1036, 1038, 1039, 1040], "fortran": [422, 542, 647, 648, 653, 654, 661, 662, 663, 664, 666, 682, 685, 686, 687, 925, 926, 1036, 1039, 1040, 1044], "fortun": [386, 417, 1029, 1049, 1050], "forward": [5, 109, 146, 233, 317, 366, 380, 400, 403, 419, 509, 510, 540, 544, 554, 560, 561, 603, 669, 686, 687, 865, 869, 989, 1014, 1048], "foster": [0, 1044], "fouchet": 1042, "found": [0, 4, 17, 18, 19, 103, 116, 145, 149, 153, 155, 157, 201, 234, 253, 257, 260, 261, 262, 310, 315, 318, 320, 321, 339, 353, 366, 368, 374, 377, 379, 380, 382, 392, 394, 395, 403, 406, 409, 410, 413, 414, 415, 417, 418, 420, 435, 442, 445, 446, 460, 473, 558, 559, 560, 561, 565, 566, 589, 591, 611, 612, 629, 637, 648, 652, 654, 656, 662, 664, 666, 672, 673, 675, 677, 679, 688, 689, 713, 720, 801, 804, 805, 815, 823, 842, 847, 848, 854, 876, 878, 879, 913, 914, 915, 916, 920, 922, 977, 981, 982, 985, 989, 990, 992, 994, 995, 996, 997, 1003, 1007, 1008, 1009, 1014, 1020, 1025, 1029, 1036, 1039, 1040, 1043, 1044, 1046, 1050, 1053], "foundat": [0, 130, 253, 380, 407, 996], "founder": 1018, "fouqu": 1036, "fouquet": [1052, 1053], "four": [25, 142, 157, 173, 179, 198, 245, 246, 253, 327, 336, 376, 380, 394, 558, 565, 720, 913, 915, 931, 989, 991, 992, 993, 1003, 1012], "fourier": [231, 408, 639, 640, 641, 642, 643, 759, 760, 985], "fourier_approx_svm": 231, "fourier_scor": 231, "fourier_tim": 231, "fournier": 1045, "fourth": [118, 1020], "fowkl": [410, 732], "fowlk": [732, 1042], "fowlkes_mallows_scor": [410, 993, 1042, 1044], "fox": [323, 418, 1052], "fp": [6, 253, 410, 713, 719, 730, 731, 732, 783, 784, 785, 788, 993], "fp_c": 268, "fpgawesom": 1050, "fpr": [9, 227, 236, 253, 256, 268, 269, 387, 593, 597, 699, 703, 707, 728, 790, 993, 1033, 1036, 1052], "fpr_a": 268, "fpr_b": 268, "fpr_grid": 268, "fpr_score": 253, "fr": [3, 5, 6, 7, 8, 22, 23, 28, 35, 40, 52, 55, 73, 80, 115, 125, 155, 176, 181, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 236, 260, 262, 265, 272, 295, 310, 346, 351, 352, 353, 532, 538, 659, 665, 686, 687, 759, 760, 991, 993], "fraa\u00df": 1053, "frac": [24, 78, 79, 109, 259, 266, 268, 318, 406, 407, 410, 412, 415, 416, 417, 418, 420, 433, 464, 466, 483, 484, 485, 555, 557, 559, 561, 563, 566, 569, 571, 612, 616, 620, 623, 624, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 681, 697, 730, 731, 756, 770, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 985, 987, 988, 989, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1027], "frac12": [417, 985], "fractal": [146, 377], "fraction": [2, 23, 25, 122, 125, 197, 205, 215, 253, 346, 352, 407, 414, 417, 439, 440, 450, 451, 457, 458, 516, 528, 558, 559, 560, 561, 565, 566, 567, 591, 594, 603, 667, 668, 669, 672, 677, 678, 679, 704, 722, 723, 724, 725, 735, 795, 797, 803, 807, 829, 830, 844, 872, 907, 908, 909, 913, 914, 915, 916, 959, 989, 993, 996, 1000, 1001, 1003, 1008, 1009, 1014, 1037, 1038, 1039, 1050], "fragil": 656, "fragment": [53, 96], "frame": [2, 11, 69, 125, 154, 167, 168, 197, 253, 311, 322, 375, 380, 392, 395, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 1013, 1025, 1048], "frameon": [5, 203], "framework": [259, 366, 382, 392, 394, 403, 410, 638, 689, 798, 989, 990, 997, 1011, 1014, 1018, 1036, 1042], "fran": [1048, 1049, 1050], "franc": [311, 765], "francesco": [1048, 1051], "franci": [537, 659, 989, 1042], "francia": 1050, "francidona": 1046, "francisco": [418, 1005], "franck": [1051, 1053, 1054], "franco": 1046, "francoi": [1036, 1049], "francoisgoupil": 1050, "frank": [259, 836, 994, 1041, 1045, 1046], "frankhui": 1044, "franki": 1049, "franz": 1044, "franziska": 1047, "fran\u00e7oi": [0, 363, 1039], "fraud": [253, 989, 1018], "fraudul": [253, 989, 1018], "fraudulent_accept": 253, "fraudulent_refus": 253, "fred": [68, 1036, 1049], "freder": 1046, "frederick": 1049, "fredrik": 1044, "free": [0, 3, 25, 53, 154, 155, 162, 196, 248, 305, 374, 379, 380, 381, 388, 392, 397, 418, 453, 610, 672, 861, 911, 982, 985, 989, 993, 1014, 1044], "freebsd": 383, "freedom": [2, 95, 154, 185, 186, 188, 259, 542, 657, 798, 989, 1039], "freeland": 1051, "freestand": 382, "freez": [384, 397, 403, 1014, 1018, 1044], "frei": [36, 441, 455, 1046], "freija": 1044, "freita": [1041, 1043, 1044], "frellwan": 1049, "fremtpl2": 215, "fremtpl2freq": 215, "fremtpl2sev": 215, "french": [0, 215, 311], "freq": [167, 181, 353], "frequenc": [17, 25, 149, 168, 181, 191, 197, 230, 316, 317, 351, 352, 353, 375, 392, 407, 414, 415, 417, 418, 419, 552, 558, 560, 561, 562, 565, 589, 590, 591, 592, 605, 659, 660, 665, 667, 669, 675, 676, 677, 686, 687, 834, 869, 878, 879, 905, 907, 910, 913, 915, 931, 989, 990, 995, 1003, 1007, 1009, 1038, 1040, 1041, 1047, 1054], "frequent": [35, 109, 162, 262, 268, 269, 273, 352, 369, 377, 380, 418, 552, 591, 631, 855, 878, 879, 882, 894, 983, 985, 993, 1007, 1011, 1014, 1054], "frequentist": 529, "fresh": [539, 1014, 1046], "fresh_restart": 539, "fresh_restarts_max_it": 539, "freund": [417, 554, 555], "fri": [2, 125, 168, 375], "frid": [1018, 1039], "friedman": [112, 113, 124, 258, 412, 414, 417, 479, 517, 518, 519, 521, 559, 560, 561, 566, 594, 595, 835, 913, 914, 916, 987, 989, 994, 1000, 1009], "friedman2001": 417, "friedman2002": 417, "friedman_ms": [559, 560, 561, 566, 914, 916, 1009, 1052, 1053], "friend": [424, 1040], "friendli": [93, 367, 380, 388, 415, 898, 1005, 1006, 1013, 1014], "fring": [50, 410], "fritsch": [0, 7, 399, 1036, 1037, 1039], "fritzk": 1051, "fro": [415, 539, 541, 548, 694, 989], "fro_2": [662, 664], "frobeniu": [13, 96, 444, 448, 460, 470, 471, 472, 473, 474, 475, 476, 477, 532, 538, 539, 541, 546, 547, 548, 989, 1043], "frobenius_norm": 689, "from": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 366, 368, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 952, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1026, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "from_dtyp": [2, 119, 253, 322, 417, 562, 563, 1053], "from_estim": [4, 7, 23, 25, 28, 29, 32, 54, 111, 114, 125, 126, 127, 131, 168, 180, 189, 206, 211, 232, 237, 239, 252, 253, 256, 261, 262, 266, 269, 275, 286, 291, 294, 310, 315, 316, 317, 318, 320, 321, 322, 335, 336, 337, 338, 340, 341, 343, 357, 387, 407, 634, 719, 728, 783, 785, 788, 789, 790, 988, 993, 1000, 1025, 1033, 1049, 1050, 1051, 1052, 1053, 1054], "from_predict": [2, 11, 30, 73, 130, 167, 236, 255, 266, 268, 318, 326, 351, 387, 439, 632, 699, 719, 728, 783, 785, 788, 789, 790, 993, 1033, 1049, 1050, 1051, 1052, 1053, 1054], "frombuffer_empti": 1043, "fromkei": [260, 920], "fromnumer": 386, "front": [384, 1043], "frontal": 375, "frontend": 386, "frontier": [7, 211, 289, 338, 999, 1027], "frozen": 382, "frozentransform": 382, "frsi": 1044, "fruit": [380, 994], "fr\u00e9minvil": [1053, 1054], "fs1995": 417, "ftfy": 418, "ftorres16": [1050, 1051], "ftp": [146, 377, 683, 684], "ftwo_scor": [743, 993], "fu": [659, 1040], "fuck": [1048, 1049], "fuent": [1037, 1038], "fugled": 1053, "fujikawa": 1043, "fukatani": 1043, "fulfil": [380, 410, 417, 801, 804, 805, 815, 865, 869, 989], "full": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 367, 368, 373, 375, 378, 380, 382, 385, 388, 392, 394, 395, 397, 405, 408, 410, 412, 414, 415, 418, 424, 427, 433, 434, 442, 446, 448, 450, 460, 489, 490, 493, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 536, 538, 542, 560, 561, 568, 569, 633, 649, 651, 655, 670, 681, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 798, 799, 812, 842, 931, 982, 989, 992, 995, 996, 1000, 1003, 1006, 1014, 1027, 1036, 1040, 1042, 1044, 1046, 1047, 1049, 1050, 1052, 1053, 1054], "full_data": 176, "full_lik": 63, "full_model": 285, "full_scor": 162, "fulli": [11, 42, 53, 116, 122, 366, 374, 375, 394, 410, 416, 417, 419, 444, 448, 558, 559, 565, 566, 913, 914, 915, 916, 917, 919, 982, 983, 989, 998, 1006, 1013, 1049, 1050], "fullpap": 1006, "fultz": 1049, "fun": [422, 534, 1018], "fun_arg": [422, 534], "func": [9, 73, 114, 167, 177, 215, 296, 380, 411, 466, 700, 869, 1003, 1040, 1042, 1044, 1045, 1053, 1054], "func_min": [611, 612], "funcformatt": 288, "function": [2, 3, 4, 5, 6, 11, 13, 18, 19, 25, 35, 44, 51, 52, 53, 55, 57, 64, 68, 69, 70, 73, 77, 93, 96, 98, 102, 107, 114, 115, 119, 120, 121, 122, 123, 124, 125, 136, 142, 145, 146, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 168, 170, 175, 176, 179, 181, 184, 189, 190, 192, 193, 194, 195, 197, 198, 203, 204, 205, 210, 213, 214, 215, 216, 218, 227, 229, 232, 233, 236, 237, 239, 240, 248, 251, 253, 257, 259, 260, 261, 262, 267, 268, 274, 276, 278, 283, 299, 302, 305, 312, 315, 316, 318, 319, 321, 323, 329, 331, 336, 337, 338, 339, 340, 341, 343, 346, 348, 351, 352, 357, 362, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 392, 393, 394, 397, 400, 403, 405, 407, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 425, 427, 429, 430, 432, 433, 434, 438, 441, 444, 445, 446, 448, 449, 451, 453, 455, 458, 459, 460, 461, 462, 465, 466, 469, 470, 472, 473, 475, 479, 489, 490, 492, 493, 496, 497, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 573, 576, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 605, 608, 609, 610, 611, 612, 616, 618, 620, 621, 623, 624, 628, 629, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 699, 700, 701, 703, 704, 705, 707, 712, 713, 717, 720, 722, 723, 724, 725, 729, 733, 735, 736, 739, 741, 742, 743, 751, 756, 758, 762, 763, 764, 766, 769, 772, 775, 779, 780, 781, 782, 783, 784, 786, 790, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 877, 881, 882, 883, 884, 885, 886, 889, 891, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 923, 932, 934, 935, 936, 941, 942, 952, 953, 959, 960, 961, 963, 964, 967, 968, 977, 982, 983, 984, 986, 988, 990, 991, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1009, 1013, 1014, 1015, 1016, 1020, 1023, 1024, 1025, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "functiontransform": [2, 68, 114, 197, 215, 330, 403, 465, 466, 1003, 1041, 1042, 1044, 1049, 1050, 1051, 1053], "functiontransformerfunctiontransform": 114, "functool": 215, "fund": 1011, "fundament": [35, 47, 79, 352, 392, 393, 413, 497, 539, 541, 548, 709, 989, 993], "funder": 0, "fung": 414, "funki": 1013, "funnel": [4, 494, 495, 1025], "funni": 68, "furlanello": 744, "furrer": 1053, "further": [2, 23, 40, 69, 76, 84, 93, 112, 118, 120, 145, 149, 154, 167, 169, 176, 181, 218, 223, 233, 253, 256, 259, 260, 266, 320, 339, 352, 360, 366, 380, 392, 394, 403, 408, 409, 410, 412, 415, 417, 418, 420, 445, 453, 463, 516, 533, 536, 583, 615, 623, 629, 659, 660, 667, 668, 669, 677, 678, 679, 692, 696, 738, 775, 779, 782, 793, 794, 841, 847, 848, 855, 856, 883, 885, 905, 907, 910, 942, 992, 993, 995, 996, 997, 999, 1001, 1003, 1007, 1008, 1027, 1029, 1045, 1049], "furthermor": [2, 11, 35, 115, 155, 168, 169, 236, 237, 239, 283, 351, 352, 366, 368, 387, 410, 415, 417, 418, 563, 591, 607, 620, 705, 737, 747, 756, 758, 796, 905, 989, 1001, 1039, 1043], "fuse": [381, 1042, 1052], "fusion": 392, "futur": [11, 154, 198, 239, 318, 321, 380, 382, 384, 394, 395, 403, 414, 418, 497, 535, 636, 963, 994, 1008, 1009, 1018, 1033, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "futurewarn": [380, 388, 1043, 1044, 1045, 1047, 1049, 1052, 1053], "fuxin": 643, "fw": 689, "fwe": 593, "f\u00e9lix": [1036, 1038, 1039, 1040, 1044], "g": [0, 2, 5, 6, 8, 10, 22, 23, 24, 25, 30, 51, 53, 63, 68, 80, 84, 100, 109, 112, 113, 121, 122, 130, 149, 150, 151, 152, 154, 156, 157, 158, 162, 166, 167, 179, 182, 197, 198, 199, 201, 215, 219, 223, 232, 233, 243, 253, 259, 263, 264, 270, 281, 289, 305, 310, 329, 345, 346, 353, 362, 366, 372, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 392, 394, 400, 403, 405, 407, 408, 410, 412, 414, 415, 417, 418, 419, 420, 422, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 504, 529, 532, 534, 535, 538, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 594, 595, 598, 605, 611, 612, 618, 623, 624, 631, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 691, 693, 698, 721, 729, 739, 741, 764, 779, 786, 789, 800, 802, 803, 804, 805, 807, 808, 810, 819, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 854, 855, 856, 857, 861, 862, 863, 865, 868, 870, 871, 872, 875, 877, 878, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 941, 942, 953, 961, 982, 983, 987, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1007, 1008, 1009, 1014, 1017, 1018, 1024, 1029, 1036, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "g0g0gadget": 1046, "g2015": 1000, "g_": 410, "g_i": [417, 650], "g_j": [649, 670, 681], "ga": 0, "gaaca": 157, "gaatattaggccga": 392, "gabor": 1050, "gabriel": [302, 1044, 1045, 1046, 1049, 1050], "gael": [0, 10, 30, 37, 38, 44, 50, 51, 64, 65, 80, 95, 186, 187, 219, 231, 245, 398, 1012, 1014, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaido": 1045, "gaidon": 1036, "gain": [51, 125, 220, 266, 283, 285, 322, 327, 351, 352, 360, 379, 386, 388, 417, 497, 533, 558, 562, 563, 565, 727, 757, 798, 799, 834, 913, 915, 994, 998, 1006, 1009, 1039, 1043, 1046], "gain_matrix": 253, "galleri": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 375, 380, 382, 394, 397, 402, 1015, 1025, 1036, 1040, 1043], "galli": 1048, "gallopoulo": 415, "galvez": 1041, "gambl": 10, "gameiro": 1050, "gamma": [2, 3, 4, 5, 7, 9, 29, 30, 98, 131, 138, 173, 211, 226, 231, 232, 257, 259, 261, 264, 270, 275, 317, 326, 327, 329, 331, 336, 338, 339, 342, 343, 345, 348, 413, 415, 417, 420, 453, 536, 563, 620, 621, 640, 641, 642, 644, 645, 646, 649, 681, 686, 692, 725, 748, 753, 760, 767, 776, 777, 778, 798, 812, 815, 900, 901, 902, 907, 908, 909, 910, 911, 982, 985, 988, 989, 991, 1006, 1008, 1020, 1024, 1025, 1027, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1050, 1051, 1052], "gamma_": [536, 1052], "gamma_0": [243, 249], "gamma_2d_rang": 339, "gamma_bound": 621, "gamma_k": 413, "gamma_rang": 339, "gammaregressor": [215, 316, 319, 681, 989, 1047, 1050, 1051], "gandenberg": 1045, "ganesh": [1041, 1053], "ganevgv": 1046, "gangesh": 1048, "gangwar": 1043, "ganiev": [1041, 1042, 1043], "ganssl": 1043, "gap": [2, 11, 125, 351, 375, 414, 472, 473, 479, 589, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 822, 913, 914, 915, 916, 989, 990, 1044, 1048, 1050], "garagecar": [119, 130], "garagefinish": 119, "garagetyp": 130, "garageyrblt": 73, "garbag": 1048, "garcia": 1049, "garc\u00eda": [1045, 1046, 1051], "gardin": 374, "gardner": [1044, 1045], "garg": [1046, 1047], "gargsya": 1046, "gari": [375, 1043], "garret": 1040, "garreta": [1038, 1039], "garrett": 1040, "garri": 377, "garriga": [265, 414, 830], "gasmi": 1050, "gasquez": 1043, "gate": [377, 1049], "gather": [319, 321, 388, 395, 408, 410, 1003, 1018], "gatsbi": 1006, "gaug": 167, "gaull": 765, "gaurav": [1044, 1045, 1046, 1047, 1048, 1050], "gauravahlawat": [1044, 1045], "gaussian": [2, 3, 5, 6, 7, 24, 25, 28, 29, 32, 42, 44, 45, 53, 54, 55, 59, 63, 76, 77, 78, 79, 80, 89, 90, 94, 95, 96, 102, 107, 110, 111, 118, 122, 126, 128, 138, 159, 162, 176, 179, 181, 185, 187, 207, 208, 209, 210, 226, 230, 232, 233, 245, 246, 250, 270, 288, 293, 296, 299, 307, 308, 309, 312, 331, 336, 343, 344, 348, 369, 372, 376, 382, 385, 394, 410, 412, 415, 416, 422, 453, 470, 471, 472, 473, 474, 475, 476, 477, 497, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 531, 533, 545, 550, 551, 554, 564, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 644, 645, 673, 678, 681, 704, 725, 742, 753, 777, 798, 799, 801, 815, 840, 841, 842, 843, 844, 845, 846, 850, 881, 885, 893, 897, 898, 899, 987, 989, 990, 991, 999, 1015, 1016, 1018, 1028, 1030, 1031, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1050], "gaussian_filt": [12, 44, 45, 52, 1028], "gaussian_process": [28, 29, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 369, 394, 420, 644, 994, 1015, 1039, 1042, 1043], "gaussianhmm": 1036, "gaussianmixtur": [42, 55, 244, 245, 246, 247, 248, 249, 416, 798, 992, 1042, 1044, 1045, 1049, 1050, 1052, 1054], "gaussianmixturegaussianmixtur": 248, "gaussiannb": [22, 23, 25, 29, 132, 261, 362, 407, 417, 438, 570, 840, 841, 842, 844, 866, 987, 994, 995, 1040, 1041, 1042, 1044, 1049, 1052], "gaussiannois": 382, "gaussianprocessclassifi": [28, 29, 150, 151, 152, 153, 157, 394, 420, 612, 620, 621, 623, 624, 994, 1042, 1044, 1046, 1050], "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 420, 611, 614, 615, 616, 617, 618, 622, 625, 626, 644, 994, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "gaussianprocessregressorifittedgaussianprocessregressor": 154, "gaussianrandomproject": [898, 1005, 1037, 1050, 1052, 1053], "gauthier": 1050, "gauz": 1044, "gave": [25, 407, 801, 804, 805, 815, 872], "gavin": [629, 983], "gaynor": 403, "ga\u00ebl": [29, 43, 49, 71, 87, 88, 99, 180, 194, 195, 307, 343, 344, 395, 1018], "gb": [133, 417, 554, 634], "gbc": 362, "gbdt": [114, 168, 253, 315, 316, 321, 385, 417], "gbdt_appli": 114, "gbdt_cst": 316, "gbdt_leaves_yield": 114, "gbdt_model": 114, "gbdt_no_cst": [127, 316], "gbdt_pipelin": 130, "gbdt_with_monotonic_cst": 127, "gbdt_with_monotonic_cst_df": 127, "gbm": [121, 417, 1039], "gbm_early_stop": 120, "gbm_full": 120, "gbp": 1018, "gbr": 122, "gbr_l": 122, "gbrt": [2, 11, 197, 417], "gbrt_mean_poisson": 11, "gbrt_median": 11, "gbrt_percentile_5": 11, "gbrt_percentile_95": 11, "gbrt_predict": 2, "gbt": 366, "gc": 8, "gca": [6, 42, 60, 84, 152, 202, 206, 208, 226, 239, 263, 291, 293, 306, 335, 337, 340, 341, 1000, 1033], "gcc": [378, 381, 386, 392], "gcf": [6, 1000], "gcv": [674, 676], "gcv_mode": [674, 1038], "gd": [10, 133], "gdb": [381, 383, 1017], "gdex1": 1046, "ge": [10, 984, 995, 1048], "ge0": 1009, "gear": 1012, "geb": 17, "gebremichael": [1051, 1052], "gedeck": 1043, "geevarghes": 1051, "gefel": 993, "gegr": 418, "gei": 1038, "geiger": 1053, "geist": 377, "gelavizh": 1047, "gelder": 1047, "gemm": 1054, "gen": 782, "gen_batch": [389, 946], "gen_cov": 78, "gen_even_slic": [197, 389, 945], "gender": [238, 878, 1003], "gender_femal": 878, "gender_mal": 878, "gene": [157, 374, 406, 452, 514, 594, 595, 852, 885], "gener": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 19, 23, 24, 25, 27, 28, 29, 30, 31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 63, 68, 69, 70, 71, 72, 73, 77, 79, 83, 84, 86, 87, 88, 91, 93, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 143, 144, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 170, 173, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 367, 369, 372, 373, 375, 377, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 403, 406, 407, 410, 414, 416, 418, 419, 420, 422, 426, 431, 433, 438, 441, 444, 447, 448, 450, 453, 455, 459, 460, 461, 463, 465, 466, 468, 470, 473, 475, 483, 484, 485, 489, 492, 493, 496, 497, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 539, 541, 542, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 615, 616, 619, 620, 621, 623, 624, 628, 629, 630, 631, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 686, 687, 690, 691, 692, 693, 694, 695, 696, 702, 705, 707, 718, 722, 724, 725, 738, 744, 758, 779, 782, 786, 794, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 838, 839, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 905, 906, 907, 908, 910, 911, 914, 916, 917, 918, 919, 936, 937, 941, 942, 945, 946, 958, 962, 964, 967, 982, 983, 985, 987, 988, 990, 992, 993, 994, 996, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1023, 1027, 1028, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "generalis": [789, 993, 1014], "generaliz": [343, 417], "generate_data": [5, 31], "generate_dataset": 8, "generate_missing_valu": 125, "generate_onli": [936, 1046], "generate_synthetic_data": 12, "generickernelmixin": [157, 1046], "genericunivariateselect": [419, 596, 597, 599, 600, 601, 603, 1050, 1052, 1053], "generos": 380, "genesi": [1050, 1052], "genet": 1013, "genoa": 377, "genom": [18, 514], "genotyp": 374, "gensim": 1013, "gentil": [377, 1048], "gentli": 415, "genvalen": [1048, 1049, 1050, 1051, 1052], "geodes": [218, 689, 990], "geoff": [836, 994], "geoffrei": [862, 863, 997, 1047, 1048, 1049, 1050, 1052], "geograph": [2, 9, 296, 375, 499], "geometr": [95, 410, 689, 705, 732, 758, 990, 1044], "geometri": [37, 410, 990, 996], "geomspac": 321, "georg": [4, 375, 410, 1042, 1048, 1049, 1050, 1051], "george_w_bush": 1025, "georgi": [1044, 1047], "georgiamaydai": 1051, "geospati": [296, 416], "geovan": [1049, 1050], "geq": [230, 407, 415, 417, 989, 993, 1003, 1007, 1008], "ger": 418, "gerhard": [4, 375], "gerhard_schroed": 1025, "german_credit": 253, "germer": [1051, 1052], "geroldcsend": 1049, "geron": [1044, 1049, 1050], "gerstein": 514, "gertrud": 1043, "gertz": 451, "gervai": [1038, 1039], "gesa": 1048, "gesdd": 942, "gesvd": 942, "get": [2, 3, 7, 10, 11, 15, 17, 35, 46, 50, 54, 94, 98, 122, 125, 132, 143, 146, 149, 154, 155, 161, 167, 168, 169, 170, 190, 199, 212, 215, 218, 233, 234, 257, 260, 261, 263, 267, 270, 278, 283, 288, 296, 306, 315, 322, 327, 330, 336, 339, 341, 344, 348, 351, 353, 356, 367, 369, 373, 374, 375, 378, 380, 381, 382, 385, 386, 387, 388, 394, 397, 403, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 424, 425, 426, 431, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 700, 722, 723, 724, 725, 727, 733, 734, 743, 757, 764, 765, 770, 786, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 933, 934, 935, 941, 942, 952, 982, 988, 989, 990, 992, 993, 1003, 1006, 1007, 1008, 1009, 1014, 1024, 1027, 1028, 1029, 1033, 1036, 1039, 1042, 1044, 1047, 1049, 1050, 1053], "get_adjacency_matrix": 15, "get_arrai": [845, 846], "get_bin_se": 449, "get_cmap": [23, 25, 344], "get_color": 5, "get_config": [469, 782, 903, 960, 1051], "get_config_var": 378, "get_covari": [533, 535, 542], "get_data": [509, 510], "get_data_hom": 6, "get_depth": [913, 914, 915, 916, 1045], "get_feature_nam": [318, 1044, 1045, 1047, 1048, 1049], "get_feature_names_out": [13, 17, 167, 169, 318, 351, 352, 353, 375, 382, 394, 411, 418, 426, 431, 434, 443, 444, 446, 448, 450, 465, 468, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 1003, 1049, 1050, 1051, 1052, 1053, 1054], "get_figur": 109, "get_full_scor": 162, "get_height": [6, 120], "get_impute_it": 162, "get_impute_knn_scor": 162, "get_impute_mean": 162, "get_impute_zero_scor": 162, "get_indic": [17, 425, 452, 454], "get_initial_mean": 246, "get_legend_handles_label": [125, 232, 261, 266], "get_lin": 300, "get_metadata_rout": [233, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 950, 951, 952, 953, 993, 1053], "get_metr": 700, "get_minibatch": 6, "get_n_cal": [845, 846], "get_n_leav": [913, 914, 915, 916, 1045], "get_n_split": [394, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "get_nam": 307, "get_output_feature_nam": 1050, "get_param": [260, 383, 394, 420, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 1046, 1047, 1048, 1050, 1051], "get_precis": [470, 471, 472, 473, 474, 475, 476, 477, 533, 535, 542], "get_redirect": 15, "get_routing_for_object": [233, 950], "get_scor": [253, 322, 394, 734, 1043, 1052], "get_scorer_nam": [409, 733, 993, 1050, 1053], "get_scores_for_imput": 162, "get_shap": [17, 425, 452, 454], "get_stop_word": [589, 590, 592], "get_submatrix": [425, 452, 454], "get_subplotspec": 387, "get_support": [142, 146, 317, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 1038], "get_tree_stat": [845, 846], "get_untrusted_typ": 403, "get_width": [6, 120], "get_x": [6, 120], "get_xaxi": [243, 293, 305], "get_xlim": [78, 192, 202, 305], "get_xticklabel": 270, "get_yaxi": [293, 305], "get_ybound": 51, "get_ylim": [192, 305, 306], "getattr": [2, 6, 253, 305, 382, 394, 1052], "getgaurav2": 1046, "gettempdir": 996, "getter": [470, 471, 472, 473, 474, 475, 476, 477, 594, 595, 598], "geurt": [417, 556, 557, 558, 559, 566, 567, 915, 916], "gewili": [1051, 1052], "gh": 380, "ghahramani": 900, "gharibi": 1046, "ghg": 1042, "ghislain": 1048, "gholdman1": 1047, "ghorai": 1044, "ghosh": [0, 399, 410, 1036, 1037, 1053], "gia": 1047, "giancarlo": 1050, "gianr": 1051, "gibb": [861, 998, 1013], "gideon": 1046, "giessel": 1042, "gif": 46, "gigant": [1044, 1046, 1051, 1052], "gijsber": 1050, "gil": [366, 367, 381, 961, 1039, 1044, 1045, 1048, 1049, 1053], "gilad": 1018, "gilberto": 1044, "gilbertson": [1050, 1051], "gilch": 1043, "gile": [1039, 1040], "gill": [0, 112, 113, 399, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "gilliam": 1043, "gilmor": 1040, "gim": 1048, "gini": [25, 170, 197, 215, 238, 271, 317, 554, 555, 558, 559, 560, 561, 565, 566, 567, 789, 913, 914, 915, 916, 982, 1001, 1009, 1044, 1045, 1052, 1053], "gionanidi": 1050, "giorgio": [1041, 1042, 1043], "giorgiop": 1041, "giotto": 1013, "giovanni": [1042, 1044], "gist": [380, 388, 1017], "git": [378, 382, 384, 386, 388, 1017, 1032, 1036, 1052], "github": [0, 5, 6, 10, 24, 69, 70, 114, 116, 117, 123, 126, 127, 130, 133, 143, 154, 162, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 283, 302, 311, 316, 317, 319, 320, 322, 328, 360, 374, 378, 379, 383, 384, 385, 386, 388, 392, 394, 395, 397, 403, 405, 453, 463, 509, 537, 692, 693, 696, 996, 1012, 1013, 1017, 1018, 1029, 1041, 1046], "githubusercont": 10, "gitter": [1011, 1043, 1044], "giudic": 1048, "giusepp": [1044, 1045], "give": [2, 10, 11, 12, 22, 23, 37, 42, 47, 58, 60, 62, 68, 69, 73, 95, 121, 149, 154, 158, 161, 167, 168, 186, 188, 194, 197, 198, 199, 226, 249, 253, 256, 261, 268, 285, 289, 292, 302, 318, 319, 323, 330, 366, 368, 375, 377, 379, 380, 382, 386, 388, 392, 393, 394, 395, 403, 406, 407, 408, 410, 411, 412, 415, 417, 418, 420, 422, 435, 447, 448, 450, 452, 460, 473, 497, 500, 504, 534, 539, 550, 551, 552, 553, 558, 559, 565, 566, 567, 594, 595, 598, 608, 609, 639, 648, 662, 666, 677, 721, 731, 737, 740, 795, 801, 804, 805, 815, 826, 827, 828, 830, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 882, 883, 885, 886, 894, 989, 993, 996, 997, 998, 1000, 1001, 1003, 1007, 1008, 1009, 1013, 1018, 1020, 1022, 1027, 1028, 1029, 1036, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1052], "given": [5, 8, 9, 11, 25, 28, 35, 47, 56, 58, 76, 83, 94, 98, 115, 125, 126, 128, 130, 149, 156, 167, 168, 181, 197, 198, 201, 215, 219, 226, 230, 231, 233, 235, 236, 237, 253, 255, 259, 260, 261, 262, 268, 273, 286, 289, 290, 291, 307, 311, 318, 323, 351, 352, 353, 359, 366, 368, 375, 379, 380, 382, 384, 386, 388, 389, 392, 394, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 427, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 457, 459, 460, 461, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 485, 488, 497, 502, 504, 506, 524, 534, 535, 537, 539, 540, 541, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 594, 595, 602, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 632, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 688, 689, 691, 692, 698, 699, 700, 701, 702, 703, 705, 706, 707, 713, 715, 718, 719, 721, 725, 727, 728, 735, 737, 738, 741, 753, 756, 757, 759, 760, 765, 775, 779, 782, 783, 785, 788, 789, 790, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 813, 815, 819, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 891, 892, 894, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 929, 930, 931, 949, 950, 952, 977, 981, 982, 985, 987, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1018, 1020, 1024, 1025, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "gkevinyen5418": 1044, "gkf": 414, "gkiasta": 1049, "gl": [146, 377], "glad": 380, "glanc": [278, 379], "glaser": [1044, 1045], "glass": 375, "glasso": [412, 479], "glaxosmithklin": 10, "gleb": [1049, 1051, 1052, 1053], "glemaitr": [1045, 1046, 1048], "glemaitre58": 199, "glen": 1049, "glenn": 1042, "glennfrutiz": 1050, "glibc": 388, "glm": [197, 215, 316, 649, 670, 681, 989, 1036, 1047], "glm_freq": 215, "glm_pure_premium": 215, "glm_sev": 215, "glmnet": [647, 648, 1036], "glob": 6, "global": [6, 8, 40, 55, 93, 197, 218, 219, 240, 268, 301, 316, 362, 366, 367, 386, 392, 394, 408, 410, 420, 443, 453, 463, 469, 591, 627, 633, 689, 692, 693, 696, 708, 730, 731, 739, 784, 785, 788, 789, 819, 886, 901, 903, 961, 963, 982, 990, 993, 999, 1003, 1009, 1018, 1044, 1051], "global_dtyp": 367, "global_random_se": 367, "globular": [60, 410], "glorot": [862, 863], "glossari": [362, 369, 380, 382, 386, 408, 421, 422, 438, 441, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 465, 468, 470, 473, 475, 489, 492, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 595, 603, 608, 609, 611, 612, 628, 633, 635, 640, 641, 642, 643, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 693, 694, 695, 696, 702, 775, 779, 782, 794, 798, 799, 801, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 847, 848, 850, 851, 853, 854, 855, 856, 858, 859, 861, 862, 863, 864, 867, 870, 882, 886, 894, 897, 898, 900, 901, 905, 906, 907, 910, 913, 914, 915, 916, 941, 942, 964, 967, 982, 983, 989, 1020, 1044], "glu": [146, 377], "glushchenkov": 1050, "gl\u00f2ria": [1049, 1051], "gm": 799, "gmail": [5, 9, 13, 22, 40, 46, 55, 63, 68, 69, 107, 109, 110, 111, 112, 113, 114, 121, 123, 124, 129, 130, 149, 152, 154, 156, 158, 177, 199, 214, 219, 221, 229, 243, 245, 246, 260, 263, 305, 310, 351, 352], "gmil": 375, "gmm": [42, 57, 164, 242, 244, 247, 248, 249, 250, 505, 513, 799, 820, 992, 1015, 1036, 1037, 1040, 1041, 1042], "gmm_": 1037, "gmm_bic_scor": 248, "gmmhmm": [1036, 1037], "gnb": [22, 23, 25, 132, 417, 570, 995], "gnb_isoton": 23, "gnb_sigmoid": 23, "gnu": 378, "go": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 375, 380, 382, 384, 385, 389, 395, 397, 411, 415, 417, 419, 444, 562, 563, 721, 884, 945, 946, 1003, 1009, 1013, 1014, 1020, 1029, 1047], "goadrich": 993, "goal": [8, 15, 18, 25, 50, 55, 84, 125, 161, 168, 173, 197, 212, 215, 235, 236, 253, 256, 257, 351, 367, 368, 375, 382, 385, 386, 394, 395, 396, 400, 415, 419, 543, 549, 591, 594, 740, 993, 996, 998, 999, 1007, 1008, 1009, 1011, 1018, 1020, 1023, 1027, 1029, 1044], "god": [17, 351, 352, 1029], "godbol": 784, "goe": [2, 35, 114, 167, 360, 380, 417, 472, 473, 479, 558, 559, 565, 566, 567, 913, 914, 915, 916, 1003, 1007], "goetz": [1043, 1044], "goh": 1053, "gohlk": 1041, "goix": [0, 1040, 1042, 1043, 1044, 1045], "gold": [31, 191, 198, 200, 203, 207, 211, 214, 244, 249, 266, 289, 338, 386], "goldberg": [854, 996], "goldfarb": 989, "goldman": 10, "goldstein": [168, 1000], "goldszmidt": 1005, "gollonet": [0, 399], "goltermann": 1048, "golub": [535, 843, 885], "golubin": 1043, "gome": [1049, 1050], "gomez": [1044, 1051, 1053], "gommer": [1039, 1042, 1043, 1051, 1052], "goncalo": [1043, 1044], "gone": [1036, 1037], "gonthier": 1047, "goo": [146, 377], "good": [2, 7, 18, 23, 25, 38, 42, 44, 47, 50, 51, 53, 56, 72, 79, 84, 102, 115, 118, 121, 122, 125, 150, 154, 161, 167, 181, 186, 197, 198, 203, 212, 223, 226, 230, 233, 236, 244, 246, 252, 253, 259, 265, 275, 302, 310, 311, 317, 326, 331, 339, 351, 352, 362, 366, 367, 368, 379, 381, 382, 383, 384, 386, 388, 392, 394, 406, 407, 410, 412, 414, 415, 417, 418, 419, 420, 438, 440, 445, 535, 560, 562, 563, 591, 631, 641, 648, 649, 657, 659, 660, 662, 670, 681, 691, 695, 724, 732, 743, 765, 830, 899, 942, 982, 988, 989, 990, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1007, 1008, 1009, 1014, 1018, 1020, 1024, 1027, 1029, 1042], "goodby": 380, "goodman": [1036, 1041], "googl": [0, 15, 392, 410, 443, 1012, 1025, 1036], "gool": 993, "gorb": 1048, "gordon": [17, 246, 1042, 1046, 1048, 1050], "gorelli": [1044, 1045, 1049, 1051, 1054], "gorgolewski": [0, 399, 1036, 1039], "gorilla": 351, "gorinevski": 989, "gorodkin": 744, "gorro\u00f1o": [1047, 1049, 1050], "got": [233, 266, 362, 385, 552, 650, 666, 1049, 1051, 1053], "gotten": [989, 1003], "gou": 410, "gouillart": [12, 64, 1036], "goupil": [0, 363], "gov": [15, 377], "govern": [167, 362, 366, 369, 380, 394, 1011, 1018], "govin": 1042, "go\u0144da": 1051, "gp": [152, 157, 420, 611, 612, 623, 1042], "gp_fix": 150, "gp_opt": 150, "gpapadok": [1046, 1050], "gpassino": 1040, "gpc": [24, 28, 29, 89, 118, 128, 138, 148, 154, 155, 156, 159, 164, 207, 208, 209, 210, 232, 247, 299, 307, 308, 331, 344, 348, 505, 611, 612, 614, 615, 620, 621, 623, 624, 704, 742, 1015, 1016, 1031, 1046], "gpc_rbf_anisotrop": 151, "gpc_rbf_isotrop": 151, "gperftool": 383, "gplearn": 1013, "gpr": [94, 148, 149, 150, 156, 158, 159, 164, 497, 611, 612, 614, 615, 616, 617, 622, 623, 624, 625, 626, 1015, 1016, 1031, 1046], "gpr_model": 158, "gprof": 383, "gpu": [320, 405, 997, 1014, 1029, 1053], "gr": 898, "grab": 380, "gracefulli": [1039, 1040], "grad": [386, 1018], "gradd": 386, "grade": 993, "gradi": 1046, "gradient": [5, 11, 44, 64, 69, 108, 109, 110, 113, 114, 116, 117, 127, 130, 133, 134, 154, 155, 156, 164, 169, 170, 175, 177, 185, 186, 199, 204, 216, 221, 226, 231, 258, 260, 289, 300, 305, 309, 311, 319, 322, 337, 338, 345, 394, 408, 409, 410, 420, 453, 463, 467, 468, 489, 491, 497, 502, 504, 521, 554, 555, 560, 561, 562, 563, 565, 566, 572, 587, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 632, 633, 635, 636, 640, 649, 650, 659, 660, 669, 670, 673, 675, 677, 678, 679, 681, 688, 693, 695, 696, 742, 743, 749, 751, 791, 801, 804, 805, 806, 822, 828, 831, 861, 862, 863, 866, 878, 879, 909, 967, 990, 993, 996, 997, 998, 999, 1013, 1015, 1016, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1053], "gradient_boost": [114, 1038, 1039, 1045], "gradientboost": 1041, "gradientboostingclassifi": [114, 121, 124, 307, 362, 392, 554, 562, 633, 634, 994, 1000, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "gradientboostingclassifier__learning_r": 307, "gradientboostingregressor": [5, 120, 122, 123, 130, 133, 366, 385, 392, 555, 563, 633, 634, 989, 993, 994, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "gradientboostingregressorgradientboostingregressor": 133, "gradual": [201, 862, 863, 1007], "graduat": 377, "graham": [1041, 1042], "grai": [4, 12, 44, 45, 48, 49, 51, 93, 96, 124, 146, 195, 197, 215, 230, 234, 235, 266, 301, 377, 415, 494, 495, 503, 522, 1025, 1028, 1047], "grain": [2, 29, 35, 231, 249, 307, 386, 418, 447, 961, 1014], "gram": [164, 175, 216, 233, 295, 382, 415, 418, 490, 525, 549, 589, 590, 591, 592, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 682, 683, 684, 685, 686, 687, 768, 982, 989, 1003, 1008, 1015, 1029, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1050], "gram_test": 1008, "gram_train": 1008, "gramfort": [0, 22, 23, 28, 40, 45, 52, 65, 93, 95, 100, 182, 184, 185, 186, 188, 190, 191, 226, 229, 265, 272, 295, 395, 398, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "grammar": 380, "granada": 0, "grant": [0, 236, 253, 380], "grape": 411, "graph": [15, 23, 37, 42, 44, 64, 65, 157, 218, 256, 283, 285, 329, 366, 380, 383, 394, 406, 412, 421, 442, 445, 446, 453, 454, 458, 463, 464, 472, 473, 479, 512, 586, 587, 689, 692, 693, 696, 783, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 901, 990, 993, 996, 998, 1006, 1009, 1013, 1018, 1025, 1028, 1036, 1043, 1044, 1046, 1049, 1051], "graph_laplacian": 1043, "graph_lasso": [479, 1044], "graph_model": 285, "graph_shortest_path": [389, 1049], "graphic": [17, 79, 168, 330, 351, 352, 353, 375, 386, 408, 410, 412, 415, 793, 794, 798, 835, 917, 993, 994, 1000, 1013, 1029], "graphical_lasso": [389, 472, 473, 1044, 1052], "graphicallasso": [80, 412, 470, 471, 473, 474, 475, 476, 477, 479, 1044, 1052], "graphicallassocv": [10, 80, 400, 412, 472, 474, 475, 476, 477, 479, 1044, 1048, 1050, 1052, 1054], "graphicallassocvifittedgraphicallassocv": 10, "graphlasso": [472, 1041, 1044], "graphlassocv": [473, 1038, 1044], "graphviz": [917, 1009], "grasp": [273, 1008, 1014], "grassberg": [608, 609], "grate": 1018, "graviton": 388, "gray_r": [30, 87, 96, 152, 219, 302, 326, 327, 1026], "grayscal": 30, "greasemonkei": 388, "great": [53, 166, 167, 195, 362, 380, 392, 415, 765, 1014, 1018, 1036, 1043], "greater": [23, 90, 109, 111, 167, 214, 231, 236, 246, 253, 265, 281, 289, 290, 356, 366, 376, 385, 394, 407, 409, 410, 413, 417, 442, 446, 447, 450, 453, 464, 473, 537, 542, 558, 559, 560, 561, 562, 563, 565, 566, 567, 594, 595, 598, 611, 612, 629, 641, 643, 665, 667, 668, 672, 677, 678, 679, 693, 710, 713, 721, 736, 737, 740, 743, 789, 796, 798, 799, 835, 847, 848, 855, 856, 862, 863, 868, 883, 895, 899, 902, 905, 906, 913, 914, 915, 916, 942, 962, 982, 988, 989, 990, 993, 994, 999, 1003, 1008, 1009, 1039, 1044, 1047, 1049, 1050, 1051, 1053], "greater_is_bett": [122, 743, 993], "greatest": [53, 397, 410, 872, 1044], "greatli": [195, 231, 320, 380, 388, 453, 996, 1009, 1042, 1050], "greedi": [146, 417, 419, 448, 450, 461, 560, 561, 603, 989, 1009], "greedili": [84, 146, 410, 414, 419, 461], "greek": [10, 15, 19, 34, 46, 51, 64, 66, 96, 164, 410, 463, 1015], "green": [24, 79, 90, 112, 127, 132, 149, 173, 223, 300, 306, 310, 316, 322, 394, 994, 1044, 1045, 1047, 1048], "greenhal": 1044, "greg": [1018, 1042, 1043, 1045, 1046], "gregori": [1042, 1046, 1047, 1048, 1049], "gregorystrubel": 1049, "gregov": 1044, "grei": [3, 269, 305, 346, 375], "grep": 380, "greyscal": 302, "grid": [4, 6, 8, 9, 18, 23, 24, 25, 40, 52, 59, 69, 70, 71, 72, 76, 80, 118, 128, 141, 143, 145, 153, 164, 166, 167, 168, 186, 215, 223, 231, 232, 233, 237, 243, 248, 251, 253, 256, 258, 260, 263, 264, 266, 271, 276, 281, 285, 287, 288, 296, 302, 307, 308, 310, 336, 338, 339, 345, 351, 375, 382, 387, 392, 394, 404, 411, 414, 416, 417, 418, 449, 462, 465, 473, 499, 503, 516, 523, 632, 633, 634, 648, 651, 654, 655, 657, 660, 662, 664, 677, 714, 729, 743, 786, 789, 801, 804, 805, 812, 815, 817, 831, 832, 865, 910, 986, 988, 993, 996, 1000, 1014, 1015, 1020, 1021, 1023, 1025, 1027, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1050, 1052, 1053], "grid_encod": 308, "grid_model": 285, "grid_posit": [23, 25], "grid_resolut": [168, 317, 337, 632, 633, 634], "grid_scores_": [1042, 1048, 1049], "grid_search": [72, 115, 238, 248, 257, 267, 322, 411, 961, 1038, 1039, 1040, 1041, 1042, 1043], "grid_siz": [9, 59, 296, 375, 499], "grid_to_graph": [45, 49, 52, 410, 418, 1028, 1049], "grid_tograph": 1039, "grid_valu": [168, 634, 1000, 1052], "gridsearch": [52, 76, 270, 1013], "gridsearchcv": [2, 52, 67, 69, 71, 72, 74, 76, 97, 100, 115, 164, 232, 238, 248, 251, 253, 257, 258, 259, 260, 264, 267, 270, 276, 278, 285, 287, 302, 307, 317, 321, 322, 339, 343, 362, 367, 382, 392, 394, 400, 411, 414, 417, 420, 424, 503, 521, 541, 542, 576, 600, 608, 654, 704, 743, 812, 815, 865, 875, 905, 913, 961, 982, 989, 993, 997, 1007, 1008, 1013, 1014, 1015, 1024, 1025, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054], "gridsearchcvifittedgridsearchcv": [70, 248, 257, 259], "gridsearchcvinot": 238, "gridsiz": 230, "gridspec": [23, 25, 63, 243, 387], "gridspecfromsubplotspec": 387, "griffith": [1044, 1045], "grigorev": 1041, "grigorio": 735, "grigsbi": 63, "grime": [690, 694, 990], "grinsztajn": 1053, "grisel": [0, 13, 15, 35, 46, 59, 186, 219, 260, 262, 351, 352, 353, 395, 398, 1012, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "griva": [1050, 1051], "grlivarea": 119, "grobler": [0, 29, 43, 49, 51, 71, 87, 88, 180, 193, 194, 195, 220, 344, 346, 399, 1036, 1037, 1038, 1039], "groceryheist": 1049, "groenen": [691, 695, 990], "grok": 488, "groothui": [628, 983], "grother": 377, "ground": [18, 30, 38, 43, 47, 55, 56, 59, 76, 80, 84, 96, 126, 157, 181, 191, 197, 198, 236, 249, 262, 352, 394, 408, 410, 704, 705, 706, 709, 713, 714, 715, 716, 718, 719, 722, 724, 725, 727, 729, 730, 731, 735, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 784, 785, 786, 787, 788, 791, 792, 796, 797, 993, 1006, 1020, 1028, 1044], "ground_truth": [53, 290], "group": [0, 10, 35, 38, 53, 56, 58, 132, 168, 170, 197, 219, 233, 249, 254, 311, 322, 328, 352, 360, 375, 385, 394, 395, 400, 410, 416, 417, 418, 435, 447, 496, 589, 590, 592, 595, 719, 789, 801, 802, 803, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 832, 878, 879, 915, 916, 989, 990, 992, 993, 994, 1003, 1009, 1010, 1011, 1013, 1020, 1023, 1024, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1052, 1053, 1054], "group_1": 878, "group_2": 878, "group_3": 878, "group_by_dynam": 154, "group_df": 205, "group_kfold": 802, "group_prior": 254, "groupbi": [2, 125, 168, 205, 215], "groupkfold": [254, 264, 322, 400, 414, 595, 806, 807, 808, 809, 810, 819, 824, 826, 827, 828, 829, 832, 1024, 1042, 1049], "groupshufflesplit": [254, 414, 1024, 1042], "grow": [2, 11, 37, 173, 181, 285, 346, 353, 366, 392, 405, 412, 417, 418, 558, 559, 560, 561, 565, 566, 567, 811, 845, 846, 913, 914, 915, 916, 982, 993, 996, 1009, 1018, 1023, 1027, 1039, 1040], "grower": [125, 417, 562, 563], "grown": [377, 417, 554, 555, 556, 557, 558, 559, 565, 566, 913, 914, 915, 916, 1009], "growth": [993, 1041, 1042], "grumman": 10, "grusak": 1046, "gryllo": [1041, 1044], "gryze": [1038, 1041], "grzegorz": [1043, 1046], "gs_clf": 1029, "gs_time": 270, "gsh": 270, "gsh_time": 270, "gsiisg": 1051, "gsk": 10, "gss": [414, 803], "gt": [30, 69, 70, 114, 130, 167, 248, 257, 271, 378, 380, 384], "gu": [1047, 1048, 1050], "guan": 1046, "guangguo": 1042, "guarante": [5, 6, 25, 78, 79, 125, 167, 205, 230, 281, 283, 305, 352, 362, 368, 374, 388, 389, 403, 410, 414, 415, 418, 447, 537, 646, 659, 660, 669, 673, 675, 677, 679, 688, 695, 818, 821, 845, 846, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 912, 985, 989, 990, 992, 996, 1001, 1005, 1009, 1028, 1046], "gubri": [1044, 1045], "gudmalwar": 1048, "guerin": [1042, 1043], "guess": [15, 109, 118, 414, 417, 418, 533, 539, 541, 542, 548, 789, 993, 1007], "guestrin": 417, "guha": 1051, "gui": [1027, 1037, 1047], "guid": [11, 23, 25, 53, 67, 93, 115, 158, 164, 167, 168, 185, 218, 266, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 369, 378, 379, 380, 385, 386, 387, 388, 393, 394, 395, 400, 408, 411, 417, 421, 422, 423, 424, 427, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 938, 993, 994, 1022, 1029, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1053, 1054, 1055], "guidanc": [392, 420], "guidelin": [379, 383, 385, 386, 388, 408, 410, 417], "guiel": 495, "guilherm": 1039, "guillaum": [0, 3, 5, 70, 73, 98, 130, 149, 154, 155, 156, 158, 185, 186, 199, 219, 305, 398, 1018, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "guillem": [1045, 1046, 1051], "guillemot": [0, 243, 245, 1042, 1043], "guillermo": 1050, "guiniol": 1043, "guitar": 1051, "guitton": 1048, "guiweb": 1049, "gulati": [1041, 1042, 1043], "gun": [17, 375], "gunesbayir": [1051, 1052], "gunnar": [536, 942], "guo": 1049, "guoci": 1043, "gupta": [899, 1005, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053], "gustafson": [1051, 1052], "gustav": 1042, "gustavo": [1044, 1045, 1050], "gutierrez": 1046, "guttman": 695, "guyon": [516, 594, 595, 993], "guyon2015": 993, "gwulf": [1040, 1041], "gz": [6, 384, 397, 509, 510], "gzip": 1036, "g\u00e9ron": 1044, "g\u00f3rski": [1047, 1048], "g\u00f6khan": [3, 415, 536], "g\u00fcnther": [1049, 1053], "h": [3, 4, 11, 46, 56, 93, 94, 109, 110, 128, 146, 151, 167, 245, 288, 291, 299, 307, 319, 331, 335, 353, 377, 386, 407, 410, 412, 415, 416, 417, 418, 421, 445, 520, 533, 536, 539, 541, 548, 554, 568, 569, 583, 591, 608, 609, 690, 694, 705, 709, 758, 840, 844, 845, 846, 851, 861, 876, 885, 985, 987, 989, 990, 991, 993, 995, 997, 998, 1007, 1009, 1025, 1042, 1047, 1051, 1052, 1053], "h1998": 417, "h2009": 1000, "h4dr1en": 1046, "h5py": 374, "h_": 989, "h_i": [415, 998], "h_init": 386, "h_j": 998, "h_l": 987, "h_m": 417, "h_pad": [93, 118, 357], "h_samples_": 861, "ha": [0, 2, 3, 6, 9, 10, 11, 23, 28, 32, 35, 42, 48, 53, 54, 55, 58, 72, 78, 79, 84, 93, 107, 114, 118, 120, 122, 125, 127, 132, 144, 145, 149, 154, 155, 156, 162, 167, 168, 169, 170, 173, 190, 194, 197, 198, 199, 203, 214, 215, 218, 226, 230, 232, 233, 236, 237, 240, 243, 244, 246, 248, 249, 253, 254, 257, 258, 259, 262, 263, 265, 270, 271, 281, 286, 289, 290, 291, 293, 301, 305, 306, 308, 310, 315, 316, 317, 318, 319, 321, 323, 326, 329, 339, 343, 344, 345, 351, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 395, 397, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 494, 495, 498, 499, 509, 510, 517, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 620, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 696, 712, 714, 721, 723, 742, 764, 775, 779, 780, 781, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 819, 822, 823, 824, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 924, 925, 926, 944, 962, 978, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1014, 1017, 1018, 1020, 1024, 1027, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "haan": 1045, "haar": [12, 1053], "haas": 1046, "habchi": 1046, "haberland": [1051, 1052], "haberth\u00fcr": 1043, "hack": [6, 8], "had": [2, 7, 45, 122, 125, 154, 233, 305, 311, 318, 362, 380, 381, 400, 418, 421, 445, 983, 993, 1018, 1020, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1051], "hadamard": 382, "haddad": 1043, "hadrien": [1043, 1046], "hadshirt": 1046, "haenel": 1039, "haesun": [1048, 1051, 1052], "hafner": 1049, "hagai": 798, "hagberg": 15, "hahn": [1043, 1044], "haiat": 1048, "haidar": [1049, 1050], "hail": 311, "hailei": [1046, 1047], "hain": 375, "haitz": [1047, 1049, 1050], "hakaa1": [1043, 1044], "hal": [548, 659, 759, 760, 991], "halchenko": [0, 398, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1052], "hale": [1038, 1050], "half": [2, 22, 96, 125, 231, 235, 257, 259, 271, 375, 376, 415, 417, 464, 523, 563, 594, 598, 603, 771, 864, 872, 993, 996, 1009], "half_cal": 598, "half_selector": 598, "halfbath": 119, "halford": [1044, 1051, 1052], "halkidi": 410, "halko": [415, 536, 542, 545, 941, 942], "hall": [989, 1043, 1047], "hallock": 1042, "halpert": [693, 990], "halv": [141, 164, 251, 263, 267, 276, 345, 404, 516, 565, 580, 801, 804, 805, 910, 1015, 1031, 1048], "halvic": 1048, "halvinggridsearchcv": [270, 271, 317, 400, 580, 805, 982, 1048, 1050, 1051, 1053, 1054], "halvingrandomsearchcv": [122, 271, 317, 400, 580, 804, 982, 1048, 1050, 1051, 1052, 1053, 1054], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 271, "halwai": 1042, "ham": [5, 451, 458, 582, 700, 704, 710, 735, 742, 779, 780, 781, 797, 996], "hamada": 1048, "hamdi": 1053, "hammerbach": 1040, "hamming_loss": [5, 704, 797, 993, 1038, 1042, 1045], "hammingdist": 700, "hammoudeh": 1045, "hamoumi": 1049, "hampton": 1029, "hampu": 1040, "hamzeh": [0, 1039, 1040], "han": [410, 443, 451, 458, 1036, 1044, 1045, 1049], "hancock": 1046, "hand": [3, 27, 33, 49, 51, 84, 87, 95, 96, 98, 115, 122, 141, 144, 154, 164, 167, 168, 190, 201, 204, 222, 229, 230, 232, 233, 236, 252, 253, 256, 261, 268, 273, 287, 326, 327, 339, 366, 374, 375, 377, 380, 382, 386, 388, 393, 415, 416, 417, 419, 427, 433, 503, 644, 698, 714, 789, 831, 886, 910, 982, 986, 989, 993, 995, 997, 1001, 1006, 1008, 1015, 1018, 1020, 1023, 1026, 1027], "handbook": [721, 741, 993], "handi": [47, 69, 352, 353, 381, 1052], "handk": 1052, "handl": [0, 2, 7, 69, 115, 119, 125, 126, 130, 173, 181, 232, 233, 253, 261, 266, 268, 278, 281, 283, 290, 311, 315, 322, 351, 353, 360, 366, 372, 374, 378, 380, 381, 382, 389, 392, 394, 417, 418, 420, 497, 545, 578, 582, 583, 589, 590, 592, 611, 636, 647, 648, 653, 659, 660, 661, 662, 663, 669, 676, 677, 679, 682, 721, 789, 869, 878, 879, 905, 906, 910, 917, 943, 950, 953, 990, 993, 994, 995, 996, 999, 1001, 1008, 1009, 1013, 1014, 1018, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "handle_data": 6, "handle_endtag": 6, "handle_starttag": 6, "handle_unknown": [2, 69, 114, 119, 130, 168, 169, 228, 236, 238, 240, 311, 316, 319, 878, 879, 1003, 1040, 1044, 1048, 1049], "handler": 1047, "handler_map": 290, "handlerpathcollect": 290, "handletextpad": 357, "handpick": 226, "handprint": 377, "handwritten": [10, 34, 41, 43, 44, 46, 50, 55, 57, 58, 59, 62, 66, 114, 144, 164, 217, 218, 220, 222, 224, 230, 246, 257, 292, 293, 301, 302, 326, 327, 352, 373, 410, 417, 448, 503, 542, 545, 550, 567, 689, 690, 691, 692, 693, 705, 706, 718, 738, 794, 796, 854, 866, 875, 885, 898, 990, 996, 1015, 1020, 1031], "hang": [380, 1046, 1047], "hank": 1039, "hanmin": [0, 306, 398, 1043, 1044, 1045, 1046, 1047], "hann": 1036, "hanna": [1040, 1041, 1047], "hannah": [1046, 1048, 1050], "hannel": [1044, 1045], "hansen": 1044, "hansin": [1050, 1051], "hanu\u0161": 1053, "hanxiang": [680, 989], "hao": [1047, 1048, 1050, 1051], "haoi": 1053, "haoran": 1044, "haoyin": [1047, 1049, 1050], "happen": [3, 25, 114, 185, 253, 305, 311, 352, 362, 366, 367, 378, 379, 380, 384, 385, 386, 392, 394, 395, 397, 403, 410, 412, 414, 417, 438, 516, 573, 659, 786, 883, 885, 905, 989, 993, 994, 1008, 1014, 1029, 1044, 1048, 1049, 1051, 1052, 1053, 1054], "happi": [167, 253, 351, 392, 395, 819, 820], "haqu": [1038, 1039, 1040], "harabasz": 711, "harabaz": 1042, "hard": [7, 197, 226, 230, 259, 261, 368, 379, 392, 394, 409, 410, 415, 418, 535, 542, 570, 677, 907, 908, 909, 910, 911, 989, 1006, 1008, 1009, 1014, 1027, 1028, 1029, 1045, 1046], "hardcod": [441, 455, 1044], "harder": [268, 269, 309, 375, 379, 382, 388, 392, 410, 516, 562, 563], "hardest": 1022, "hardin": 79, "hardli": [53, 608, 609], "hardwar": [17, 330, 353, 366, 367, 375, 378, 392, 397, 403, 405, 1013, 1050, 1051], "hare": 989, "harfouch": 1052, "harikrishnan": 1038, "harizo": [1042, 1043], "harm": [253, 351, 382, 418, 796], "harmanan": 1053, "harmon": [2, 35, 266, 352, 410, 536, 542, 730, 731, 737, 784, 796, 993], "haroldfox": [1044, 1045], "harper": 1043, "harri": [1040, 1042, 1048, 1049], "harsanyi": 1052, "harsh": [427, 438, 470, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 659, 667, 669, 675, 676, 677, 800, 823, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 900, 901, 905, 907, 910, 913, 915, 1046, 1048, 1051], "harshit5674": 1051, "hart": [377, 987, 1044], "hartong": 1047, "harutaka": 1049, "harvest": 311, "harwar": 392, "has_fit_paramet": 389, "hasan": 1051, "hasattr": [42, 54, 60, 80, 107, 118, 215, 230, 299, 307, 351, 394, 425, 429, 435, 954, 1046], "haseeb": [1049, 1050], "hash": [6, 108, 134, 164, 234, 308, 352, 353, 366, 368, 372, 380, 383, 392, 417, 515, 545, 558, 567, 582, 583, 590, 641, 840, 958, 985, 1015, 1029, 1031, 1037, 1040, 1043], "hashabl": [394, 873, 876, 1004], "hashcode55": 1042, "hasher": [128, 353, 418], "hashingvector": [6, 353, 368, 418, 490, 589, 591, 592, 1037, 1043, 1044, 1045, 1046, 1049], "hashlib": 6, "hasil": 1040, "haskel": 1013, "hasn": 400, "hassaan": [1044, 1045], "hassan": 1049, "hassen": 1036, "hassoun": 1051, "hasti": [109, 112, 113, 124, 146, 185, 258, 377, 414, 417, 520, 521, 554, 560, 561, 629, 657, 722, 724, 725, 835, 852, 898, 913, 914, 983, 987, 989, 994, 1000, 1005, 1007, 1009], "hat": [79, 102, 255, 259, 288, 318, 378, 407, 412, 416, 417, 984, 989, 990, 993, 995, 997], "hathidara": 1048, "hatwar": [1044, 1045], "hauck": 1042, "hausamann": [1044, 1045], "haussler": 157, "have": [0, 2, 3, 5, 6, 7, 9, 10, 11, 12, 22, 23, 24, 25, 35, 37, 40, 41, 44, 45, 48, 51, 53, 55, 58, 60, 62, 63, 68, 69, 76, 78, 84, 87, 89, 90, 98, 99, 109, 116, 118, 119, 120, 122, 125, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 170, 173, 176, 181, 197, 198, 199, 201, 215, 222, 226, 228, 233, 234, 236, 237, 244, 245, 246, 248, 252, 253, 259, 260, 262, 265, 266, 273, 274, 278, 283, 285, 286, 289, 290, 305, 310, 311, 312, 315, 317, 318, 322, 327, 328, 329, 336, 342, 343, 344, 346, 351, 352, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 493, 495, 496, 497, 509, 510, 515, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 700, 705, 706, 713, 716, 721, 727, 732, 737, 743, 757, 758, 759, 760, 783, 786, 787, 793, 796, 798, 799, 800, 801, 804, 805, 806, 807, 812, 815, 819, 823, 824, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 925, 927, 929, 931, 942, 968, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "haversin": [296, 416, 700, 763, 765, 996, 1045, 1048], "haversine_dist": [763, 1045], "haversinedist": 700, "hawaii": 154, "haxbi": 0, "haya": 1050, "hayashi": 1044, "hbgt": 125, "hd": 10, "hdb": [53, 447], "hdbscan": [34, 36, 42, 47, 63, 66, 164, 230, 445, 513, 885, 983, 1013, 1015, 1030, 1031, 1052, 1053, 1054], "hdbscan_min_cluster_s": 42, "hdbscan_min_sampl": 42, "hdf5": 374, "hdl": [146, 377], "hdmetor": 1042, "he": [380, 727, 757, 862, 863, 895, 896, 993, 1029, 1043, 1050, 1051], "head": [0, 11, 24, 69, 114, 129, 154, 167, 185, 186, 215, 240, 248, 311, 315, 320, 380, 388, 398, 415, 1018, 1041, 1042, 1051, 1052, 1053, 1054], "head_width": 24, "header": [13, 68, 260, 351, 352, 375, 378, 418, 489, 490, 801, 804, 805, 815], "heali": 410, "heap": 451, "heapq": 464, "heard": 380, "heart": 236, "heat": [130, 339, 410, 453, 463, 696], "heatingqc": 130, "heatmap": [168, 170, 176, 181, 270, 320, 339, 633, 1000], "heatmap_kw": 633, "heatmaps_": 633, "heavei": 1044, "heavi": [199, 392, 406, 1014], "heavier": [102, 412, 989], "heavili": [186, 366, 367, 380, 388, 650, 656, 779, 1010], "heavy_rain": [2, 168], "hebei": 410, "hedlund": 1052, "hedyati": 1040, "hee": [1043, 1046], "heer": 1047, "hegd": 1053, "heidelberg": [410, 415, 536, 697, 727, 757, 993], "height": [6, 13, 51, 96, 119, 120, 146, 305, 311, 322, 351, 416, 447, 494, 495, 507, 587], "heightpet_catpet_dogf64f64f64": 322, "heikki": 1005, "heilman": [1040, 1041], "heitz": 311, "held": [2, 6, 69, 100, 123, 169, 205, 245, 262, 267, 281, 414, 417, 560, 561, 562, 563, 702, 801, 804, 805, 815, 862, 863, 875, 982, 983, 992, 1001, 1029], "helder": [1040, 1049, 1050], "heldout": 204, "heldout_scor": 121, "helen": 320, "heli": 1043, "hello": [380, 388, 954, 958], "helloifeven": 954, "helmu": 1040, "help": [0, 2, 7, 9, 53, 68, 72, 98, 103, 168, 181, 215, 218, 253, 260, 262, 278, 302, 336, 339, 352, 353, 362, 366, 367, 378, 381, 382, 383, 384, 385, 386, 388, 389, 394, 395, 396, 403, 410, 411, 414, 418, 420, 434, 537, 578, 628, 651, 655, 666, 686, 687, 693, 715, 841, 913, 914, 915, 916, 983, 987, 988, 990, 992, 993, 995, 997, 1003, 1004, 1009, 1012, 1013, 1014, 1017, 1018, 1029, 1042, 1043, 1044, 1047, 1050, 1054], "helper": [3, 4, 96, 215, 270, 373, 382, 383, 393, 394, 414, 469, 576, 903, 1024, 1025, 1036, 1043, 1044, 1045, 1049], "helvetica": [917, 919], "heme": 1053, "hempstalk": 1043, "henc": [35, 58, 70, 167, 201, 230, 253, 268, 339, 351, 352, 366, 375, 382, 384, 386, 394, 397, 410, 414, 417, 418, 488, 509, 540, 542, 543, 544, 564, 591, 644, 647, 653, 661, 663, 673, 688, 705, 706, 710, 716, 732, 758, 787, 796, 820, 821, 840, 841, 842, 843, 844, 880, 950, 990, 992, 993, 994, 999, 1000, 1003, 1014, 1043, 1044, 1047, 1048, 1050], "hendrik": [0, 22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232, 398, 1036, 1039, 1040, 1041, 1042], "henri": [1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "henrymooresc": [1050, 1051], "hepe": [680, 989], "here": [2, 6, 7, 10, 11, 12, 15, 22, 25, 55, 56, 64, 76, 80, 87, 88, 90, 95, 96, 98, 99, 100, 101, 103, 109, 112, 115, 119, 123, 125, 130, 143, 146, 149, 157, 158, 167, 168, 169, 173, 176, 181, 186, 190, 197, 201, 203, 212, 213, 215, 218, 220, 226, 231, 233, 236, 237, 244, 245, 246, 252, 253, 256, 257, 259, 261, 262, 264, 268, 269, 271, 273, 278, 283, 285, 292, 300, 301, 302, 307, 310, 317, 319, 322, 326, 328, 339, 343, 346, 348, 353, 356, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 392, 393, 400, 403, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 423, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 465, 473, 476, 537, 539, 540, 544, 545, 568, 569, 570, 571, 582, 583, 585, 589, 592, 595, 603, 629, 631, 648, 652, 654, 656, 662, 664, 666, 674, 676, 690, 692, 696, 700, 713, 727, 747, 757, 795, 800, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 832, 841, 845, 846, 869, 877, 880, 883, 886, 897, 898, 908, 959, 982, 985, 989, 990, 991, 992, 993, 996, 999, 1003, 1005, 1006, 1007, 1008, 1013, 1014, 1017, 1018, 1020, 1021, 1027, 1036, 1044, 1049], "hereaft": 395, "hereund": 999, "herilalaina": [1043, 1044, 1046], "hermano": [1051, 1052], "hermida": [1045, 1049], "hernandez": 993, "hern\u00e1ndez": 993, "hero": [412, 423, 476], "herrou": 1050, "hershei": 993, "hertel": 1053, "herv": 1040, "hervieu": 1036, "herv\u00e9": 1040, "heryanto": 1043, "hesit": 380, "hessian": [218, 219, 220, 417, 562, 563, 649, 659, 660, 670, 681, 690, 694, 989, 997, 1030, 1031, 1051], "hessian_tol": [690, 694], "heterogen": [2, 7, 22, 53, 67, 69, 74, 164, 168, 197, 240, 310, 315, 353, 372, 374, 392, 465, 489, 542, 582, 592, 714, 865, 869, 905, 990, 1000, 1003, 1013, 1015, 1031, 1040, 1044, 1046, 1047], "heteroscedast": [93, 100, 122, 199, 415, 881, 893], "heteroschedast": 993, "heuer": 1039, "heurist": [10, 13, 121, 236, 351, 367, 410, 419, 450, 453, 462, 463, 509, 510, 538, 540, 547, 677, 678, 679, 692, 696, 804, 805, 907, 908, 909, 910, 911, 930, 990, 991, 996, 1007, 1009, 1018, 1027, 1036, 1037, 1041, 1045, 1048, 1049], "hexbin": 230, "hexdigest": 6, "hgbdt": 115, "hgbdt_model": 168, "hgbdt_model_without_interact": 168, "hgbdt_preprocessor": 168, "hgbt": [115, 125, 417], "hgbt_cst": 125, "hgbt_no_cst": 125, "hgbt_quantil": 125, "hhu": [650, 1045], "hi": [0, 411, 993, 1029], "hibon": 1043, "hida": [1051, 1052], "hidden": [2, 168, 301, 302, 380, 388, 406, 415, 861, 862, 863, 997, 998, 1013, 1036, 1047], "hidden_layer_s": [168, 237, 299, 301, 862, 863, 997], "hide": [41, 380, 388, 840, 841, 842, 843, 844, 1039, 1044, 1052], "hideaki": 1050, "hierarch": [12, 19, 34, 37, 38, 40, 42, 44, 50, 51, 52, 55, 66, 164, 170, 222, 319, 360, 394, 418, 442, 444, 446, 447, 505, 513, 515, 523, 531, 548, 732, 858, 885, 1010, 1014, 1015, 1030, 1031, 1036, 1039, 1040, 1052], "hierarchi": [39, 170, 380, 451, 457, 464, 998, 1028], "higgin": 1053, "high": [0, 2, 7, 9, 10, 23, 25, 29, 35, 38, 42, 47, 53, 55, 60, 63, 68, 72, 78, 79, 95, 96, 112, 114, 115, 116, 117, 122, 123, 125, 126, 128, 137, 138, 146, 149, 155, 162, 166, 168, 169, 170, 181, 192, 198, 199, 201, 211, 218, 219, 220, 226, 230, 243, 249, 257, 261, 265, 266, 275, 289, 290, 299, 301, 307, 309, 310, 311, 312, 321, 329, 336, 338, 339, 351, 352, 358, 359, 366, 375, 377, 380, 385, 388, 389, 392, 393, 406, 407, 408, 409, 410, 414, 416, 417, 418, 419, 420, 445, 448, 450, 451, 453, 470, 483, 484, 485, 554, 555, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 645, 671, 672, 680, 690, 693, 694, 727, 732, 743, 747, 757, 790, 793, 809, 811, 845, 846, 850, 879, 880, 884, 886, 907, 909, 910, 913, 914, 915, 916, 962, 982, 987, 988, 989, 990, 992, 993, 996, 997, 999, 1001, 1003, 1005, 1008, 1009, 1010, 1013, 1014, 1020, 1021, 1023, 1029, 1036, 1037, 1039, 1040, 1044, 1047, 1048, 1049, 1050, 1051], "high_cardin": 311, "high_cardinality_featur": 311, "high_cardinalityindex": 311, "high_i": 192, "high_precision_cv_result": 257, "high_recall_cv_result": 257, "high_x": 192, "higher": [2, 11, 55, 78, 96, 100, 109, 112, 114, 115, 122, 126, 144, 149, 151, 156, 157, 167, 168, 169, 173, 197, 198, 201, 215, 222, 223, 249, 252, 253, 257, 259, 262, 274, 288, 310, 339, 343, 351, 352, 353, 362, 366, 375, 378, 382, 406, 409, 410, 412, 417, 419, 420, 421, 445, 449, 450, 472, 479, 510, 533, 540, 544, 549, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 574, 589, 592, 608, 609, 620, 628, 632, 636, 638, 647, 648, 653, 654, 661, 662, 663, 664, 677, 679, 680, 705, 725, 729, 753, 786, 798, 801, 804, 805, 807, 815, 822, 824, 829, 832, 851, 854, 880, 897, 898, 899, 905, 906, 907, 908, 909, 910, 911, 918, 985, 989, 990, 992, 993, 996, 1000, 1003, 1007, 1008, 1027, 1029, 1037, 1042, 1044, 1051, 1053], "highest": [15, 17, 24, 80, 142, 146, 201, 257, 259, 270, 317, 351, 380, 392, 407, 410, 414, 417, 419, 438, 556, 558, 565, 593, 596, 597, 599, 600, 601, 604, 605, 607, 636, 638, 727, 757, 795, 798, 801, 804, 805, 815, 902, 913, 944, 982, 989, 993, 994, 997, 1007, 1009, 1048], "highest_protocol": 403, "highli": [2, 7, 25, 70, 78, 79, 95, 103, 126, 181, 192, 202, 253, 259, 262, 268, 300, 343, 352, 366, 367, 380, 382, 386, 392, 407, 410, 414, 417, 418, 453, 463, 497, 564, 672, 693, 813, 815, 861, 989, 993, 996, 997, 999, 1007, 1008, 1012, 1013], "highlight": [2, 11, 13, 53, 69, 78, 90, 113, 114, 116, 119, 125, 127, 143, 146, 149, 150, 155, 161, 162, 168, 169, 173, 178, 197, 198, 199, 215, 228, 237, 238, 239, 240, 253, 254, 256, 268, 271, 273, 278, 285, 309, 311, 324, 329, 351, 353, 360, 369, 380, 384, 385, 388, 392, 420, 444, 447, 448, 465, 468, 491, 492, 497, 502, 503, 505, 513, 516, 522, 525, 539, 542, 562, 563, 565, 566, 568, 600, 603, 629, 631, 633, 635, 641, 647, 649, 653, 659, 670, 681, 689, 702, 703, 709, 718, 719, 733, 749, 779, 789, 796, 800, 801, 802, 804, 805, 807, 815, 823, 824, 827, 828, 831, 847, 849, 866, 870, 875, 878, 879, 880, 884, 885, 886, 902, 903, 905, 910, 913, 914, 937, 990, 993, 1001, 1003, 1008, 1015, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "highlight_min": [122, 186], "higuera": 374, "hila": 410, "hilbert": [202, 871, 985, 1003], "hilferti": 78, "hill": [410, 449, 462, 1046], "him": 418, "himanshu": [1047, 1050], "hind": 1050, "hinder": 1046, "hing": [23, 204, 207, 209, 267, 336, 337, 341, 343, 394, 667, 677, 736, 905, 912, 989, 1007, 1008, 1029], "hinge_loss": [343, 993, 1040, 1048, 1049], "hinrich": 415, "hint": [167, 366, 381, 385, 400, 449, 993, 1027], "hinton": [693, 854, 861, 862, 863, 990, 996, 997, 998], "hintz": 1042, "hiramatsu": 1053, "hirofumi": [1047, 1048], "hirsch": 1044, "hirschberg": [410, 718, 738, 796], "hirzel": 1049, "hispan": 167, "hist": [2, 23, 25, 51, 73, 111, 115, 197, 199, 230, 236, 253, 265, 288, 305, 309, 311, 319, 322, 417], "hist_drop": 119, "hist_n": 119, "hist_nbin": 305, "hist_no_interact": 320, "hist_one_hot": 119, "hist_ordin": 119, "hist_quantil": 319, "hist_x0": 305, "hist_x1": 305, "histgradientboost": 1048, "histgradientboostingclassifi": [114, 115, 253, 315, 316, 317, 318, 320, 322, 367, 403, 560, 565, 633, 634, 983, 1013, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "histgradientboostingclassifierhistgradientboostingclassifi": 253, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 253, "histgradientboostingregressor": [2, 5, 11, 110, 115, 119, 122, 123, 125, 127, 130, 161, 168, 197, 311, 315, 316, 317, 318, 320, 321, 322, 384, 417, 561, 566, 633, 634, 636, 983, 1000, 1013, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "histgradientboostingregressor__interaction_cst": 168, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "histgradientboostingregressorhistgradientboostingregressor": [130, 311], "histgradientboostingregressorifittedhistgradientboostingregressor": [127, 320], "histogram": [11, 23, 25, 51, 108, 110, 114, 119, 120, 122, 123, 127, 134, 164, 197, 205, 230, 258, 260, 265, 288, 305, 317, 319, 321, 322, 407, 491, 497, 560, 561, 562, 563, 565, 566, 633, 643, 743, 749, 759, 760, 791, 801, 806, 822, 828, 831, 985, 991, 1003, 1015, 1030, 1031, 1048, 1051, 1053], "histor": [10, 197, 253, 1014], "histori": [10, 369, 560, 561, 1011, 1036], "hit": [199, 386], "hitesh": 1048, "hjortkj\u00e6r": 1050, "hkey_local_machin": 397, "hline": 95, "hlle": 990, "hmasdev": 1050, "hmc": 10, "hmm": [1036, 1037, 1038, 1039, 1041], "hmmlearn": 1013, "hn": 386, "hnyk": [1042, 1043], "ho": [113, 417, 556, 557, 993, 1041, 1044, 1045, 1050], "hoang": [1045, 1046], "hobson": 1042, "hoc": [145, 146, 164, 251, 253, 262, 276, 278, 323, 329, 394, 409, 497, 659, 817, 823, 828, 866, 885, 1015], "hochberg": [596, 1042, 1043], "hochreit": [406, 720], "hockei": [17, 375], "hoctor": 1048, "hoda1394": 1048, "hoenig": 1036, "hoesli": 417, "hoffman": [415, 537, 1041, 1048], "hogan": 1044, "hoh": 1044, "hold": [6, 11, 24, 25, 197, 201, 233, 253, 260, 360, 373, 380, 381, 382, 394, 407, 410, 414, 417, 418, 420, 504, 558, 562, 565, 590, 633, 634, 635, 737, 801, 804, 805, 815, 841, 872, 873, 878, 879, 886, 889, 913, 915, 983, 987, 993, 997, 1007, 1008, 1009, 1020, 1029, 1044, 1048, 1054], "holder": 1029, "holdgraf": 1044, "holdselig": 418, "hole": [164, 217, 218, 219, 220, 223, 224, 531, 693, 694, 1015, 1050], "holger": 1043, "holidai": [2, 168], "holm": [836, 994, 1053], "holman": 1051, "holmstr\u00f6m": 1038, "holohan": [1051, 1053], "holt": [0, 399, 1036], "holub": 535, "home": [0, 10, 111, 130, 153, 155, 157, 158, 189, 206, 244, 254, 302, 320, 344, 357, 375, 378, 388, 397, 408, 487, 500, 680, 1018], "homebrew": [383, 397], "homepag": [375, 531, 1009], "homm": 1051, "homo": 56, "homogen": [35, 36, 37, 42, 44, 47, 53, 56, 352, 375, 392, 394, 412, 417, 420, 447, 615, 705, 718, 732, 737, 738, 758, 796, 990, 991, 993, 1045], "homogeneity_completeness_v_measur": [410, 1045], "homogeneity_scor": [36, 47, 56, 352, 410, 718, 737, 796, 993], "homomorph": 1013, "homoscedast": [100, 229, 309, 993, 1044], "homoschedast": 993, "honda": 10, "honei": 987, "hong": [1042, 1044, 1048, 1049, 1050, 1052], "hongh": 1044, "hongkahjun": 1043, "honglu": 1046, "hongshaoyang": 1051, "honl": [1048, 1049], "honolulu": 993, "honor": 311, "hood": [403, 989, 1008], "hoover": [1041, 1042, 1043, 1045], "hope": [3, 215, 394, 408, 1045], "hopefulli": [262, 388, 1036], "hopfensperg": 1053, "hopper": 1041, "horizont": [28, 93, 218, 231, 305, 308, 385, 394, 465, 516, 698, 702], "horizontal_distance_to_hydrologi": 492, "horizontalalign": [10, 24, 29, 38, 42, 43, 60, 99, 226, 243, 299, 307], "hornik": 636, "hornstein": 1051, "horrel": 1043, "hoshia": 1050, "hossein": [1044, 1045, 1046], "host": [0, 115, 321, 351, 375, 380, 384, 388, 389, 898, 961, 1029, 1052], "hot": [2, 69, 114, 117, 130, 167, 197, 268, 306, 307, 311, 317, 339, 394, 417, 418, 552, 567, 582, 649, 659, 660, 670, 681, 868, 870, 872, 873, 876, 878, 879, 886, 989, 1003, 1044, 1050, 1051], "hot_r": [10, 305], "hotel": 1018, "hotspot": 386, "hotter": 117, "hour": [2, 125, 167, 168, 322, 380, 386, 497, 990, 1012], "hour_co": 2, "hour_df": 2, "hour_sin": 2, "hour_workday_interact": 2, "hourli": [2, 125, 167], "hourly_wag": 166, "hous": [73, 120, 130, 161, 162, 253, 305, 317, 373, 491, 1031], "house_pric": [73, 130], "houseag": [305, 317, 375, 491], "household": 375, "housestyl": [119, 130], "hover": 322, "hover_data": [115, 260], "how": [0, 2, 3, 5, 6, 7, 8, 11, 18, 19, 23, 24, 25, 30, 31, 35, 48, 49, 50, 51, 55, 58, 67, 68, 69, 72, 76, 78, 84, 102, 109, 110, 113, 117, 118, 119, 120, 122, 123, 125, 128, 130, 143, 144, 156, 164, 167, 168, 169, 170, 173, 178, 186, 187, 193, 198, 199, 200, 201, 204, 205, 211, 215, 222, 223, 228, 231, 233, 235, 236, 237, 239, 249, 253, 254, 255, 257, 259, 260, 261, 266, 268, 269, 271, 272, 273, 274, 281, 283, 285, 286, 287, 289, 290, 301, 310, 312, 316, 317, 318, 321, 322, 336, 337, 339, 342, 343, 346, 351, 352, 356, 360, 366, 367, 368, 369, 375, 378, 379, 381, 382, 383, 385, 388, 393, 394, 395, 400, 403, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 424, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 505, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 623, 624, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 705, 721, 758, 793, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 977, 982, 983, 987, 988, 989, 990, 992, 993, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1012, 1014, 1018, 1020, 1022, 1024, 1029, 1031, 1036, 1038, 1041, 1047, 1050, 1051, 1052], "howaboutw": 1011, "howel": 1043, "howev": [0, 2, 3, 5, 11, 12, 22, 23, 25, 35, 45, 47, 51, 53, 58, 70, 73, 76, 80, 83, 98, 100, 112, 114, 115, 119, 122, 123, 130, 143, 146, 149, 154, 155, 168, 169, 178, 186, 197, 201, 219, 222, 223, 226, 232, 233, 236, 253, 259, 266, 273, 274, 278, 281, 283, 288, 300, 305, 317, 323, 343, 346, 351, 352, 362, 366, 367, 368, 374, 375, 377, 379, 380, 382, 386, 388, 392, 394, 400, 403, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 441, 444, 448, 450, 452, 455, 460, 497, 509, 533, 542, 552, 568, 582, 583, 584, 590, 607, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 631, 633, 634, 639, 644, 656, 657, 673, 688, 693, 696, 701, 764, 766, 801, 804, 805, 815, 828, 832, 833, 844, 862, 863, 868, 877, 878, 883, 907, 908, 910, 921, 962, 982, 983, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1007, 1008, 1009, 1020, 1024, 1027, 1045, 1046, 1048, 1049, 1052], "hoyer": [415, 1039], "hp": [10, 1029], "hpq": 10, "hrishikesh": [1037, 1038], "hristo": [1044, 1051], "hsiang": [659, 1040], "hsieh": 1042, "hspace": [4, 12, 13, 42, 43, 60, 93, 215, 226, 243, 245, 246, 249, 288, 317, 327, 336, 1025], "hstack": [12, 31, 40, 132, 142, 223, 235, 254, 342, 414, 864], "hsuan": 1041, "ht2001": 993, "htf": 417, "htm": [913, 914], "html": [2, 6, 10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 146, 154, 158, 167, 168, 169, 173, 178, 227, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 375, 377, 380, 381, 383, 384, 388, 411, 414, 418, 424, 488, 509, 510, 659, 840, 844, 938, 991, 1013, 1014, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "htmledit": [840, 844, 991], "htmlparser": 6, "htsedebenham": 1051, "http": [2, 4, 5, 6, 10, 11, 15, 22, 69, 123, 130, 146, 158, 162, 173, 197, 205, 213, 215, 223, 227, 273, 278, 281, 283, 301, 374, 375, 377, 378, 380, 384, 385, 386, 388, 392, 394, 397, 405, 410, 414, 419, 443, 450, 453, 463, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 509, 510, 511, 531, 532, 535, 537, 538, 542, 596, 637, 642, 645, 650, 659, 665, 667, 668, 669, 672, 677, 680, 683, 684, 686, 687, 692, 693, 696, 706, 722, 724, 725, 759, 760, 770, 840, 842, 843, 844, 847, 848, 853, 854, 855, 856, 861, 883, 898, 899, 900, 913, 914, 989, 991, 993, 996, 1006, 1009, 1018, 1025, 1041, 1046], "hu": [1041, 1044, 1046], "hua": [564, 999], "huang": [375, 659, 1042, 1047], "huangk10": 1047, "huard": 1036, "huber": [179, 207, 408, 417, 561, 650, 677, 679, 1007, 1036, 1038, 1039, 1048], "huberlossfunct": 1049, "huberregressor": [52, 149, 164, 175, 177, 195, 201, 202, 203, 216, 312, 525, 671, 672, 673, 679, 680, 989, 1015, 1042, 1043, 1044, 1045], "hubert": [410, 706, 716, 787], "hubert1985": 706, "hudson": 320, "hue": [125, 248, 259, 310, 377], "huerta": 1046, "hug": [0, 146, 309, 398, 1011, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "huge": [199, 202, 366, 386, 628, 1039], "hugh": [880, 1038, 1049], "hugo": [4, 375, 1042, 1047, 1048, 1049, 1050], "hugorichard": 1048, "hugu": 1040, "hui": [113, 185, 539, 541, 548, 657, 989], "huiginn": 1036, "huilgolkar": [1037, 1038], "hujiahong726": 1052, "hull": 1053, "humahn": 1051, "human": [93, 168, 351, 410, 415, 862, 863, 993, 1000, 1045], "humid": [2, 168, 1000], "hunan": 1044, "hundr": [40, 121, 219, 309, 375, 414, 417, 562, 563, 990, 1047], "hungarian": [406, 720], "hunt": 1051, "hunter": 1045, "hurt": [366, 535, 1044], "husak": 1050, "huszar": 1018, "hut": [693, 990, 1041, 1043, 1046], "huynh": [1046, 1048], "hv": 418, "hvassard": 1050, "hwan": 1047, "hwang": 1042, "hybrid": [447, 650, 1013], "hye": 1047, "hyper": [2, 25, 69, 115, 252, 259, 264, 302, 339, 362, 382, 392, 393, 394, 404, 414, 417, 419, 469, 645, 646, 805, 813, 815, 861, 903, 988, 989, 993, 996, 1007, 1008, 1020, 1031, 1036, 1050], "hyperband": 982, "hyperbol": [343, 643, 862, 863, 991, 997], "hypercub": [226, 516], "hyperlink": 1038, "hyperparamet": [69, 71, 72, 125, 149, 150, 156, 157, 161, 164, 168, 176, 181, 186, 211, 215, 226, 236, 251, 257, 262, 264, 270, 271, 276, 285, 302, 351, 382, 394, 410, 414, 415, 417, 420, 503, 536, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 644, 654, 660, 666, 674, 677, 729, 786, 801, 815, 910, 982, 987, 988, 989, 992, 993, 995, 997, 999, 1007, 1014, 1015, 1029, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052], "hyperparameter_alpha": 624, "hyperparameter_baseline_similar": 157, "hyperparameter_constant_valu": 614, "hyperparameter_gamma": 621, "hyperparameter_grid": 322, "hyperparameter_length_scal": [616, 620, 623, 624], "hyperparameter_noise_level": 626, "hyperparameter_period": 616, "hyperparameter_sigma_0": 615, "hyperplan": [89, 111, 121, 152, 164, 175, 189, 206, 216, 234, 262, 334, 335, 336, 337, 338, 339, 343, 344, 349, 513, 632, 659, 660, 667, 669, 675, 676, 677, 678, 905, 907, 909, 910, 1007, 1008, 1015], "hyperspher": [376, 1013], "hypothes": 989, "hypothesi": [122, 259, 265, 414, 691, 695, 830, 990], "hypothet": 25, "hyunjin": 1036, "hyvarinen": [422, 534], "h\u00e9lion": 1047, "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 90, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 337, 338, 339, 343, 344, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 941, 942, 944, 947, 948, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 974, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "i_alpha_optim": 272, "i_ax": 283, "i_dataset": [42, 60, 226], "i_j": 1001, "iain": [146, 377, 989], "iampat": 1044, "ian": [1038, 1040, 1045, 1046, 1048, 1051, 1052], "iasoon": 1050, "ibay": 1036, "ibieta": 1049, "ibm": [10, 17, 330, 353, 375], "ibn": 1036, "ibnukhsein": 1053, "ibraheem": 1045, "ibrahima": 1046, "ibraim": [1041, 1042, 1043], "ib\u00e1\u00f1ez": [1044, 1045, 1048], "ic": [6, 278, 317, 374, 377, 396, 501, 503, 511, 633, 634, 1031, 1048, 1049], "ica": [95, 408, 422, 1009, 1030, 1031], "ica_estim": 93, "icann": 697, "icassp": 993, "icdm": [564, 999], "icdmw": 410, "ice_lines_kw": 633, "icml": [23, 25, 407, 410, 418, 438, 440, 840, 842, 861, 993, 995, 1007, 1012], "icml03": 842, "icml09": [532, 538], "icon": [322, 382], "icyblad": 1043, "id": [4, 17, 215, 296, 360, 374, 375, 380, 388, 412, 414, 418, 424, 495, 496, 497, 917, 919, 937, 1025, 1029, 1044, 1045, 1048], "id3": [1016, 1031], "idea": [3, 51, 78, 79, 115, 146, 154, 167, 198, 218, 253, 288, 339, 356, 366, 367, 380, 385, 386, 412, 413, 414, 415, 416, 417, 419, 608, 609, 989, 990, 993, 996, 999, 1012, 1018, 1029], "ideal": [197, 199, 215, 253, 256, 259, 266, 268, 269, 362, 379, 380, 381, 384, 385, 388, 392, 394, 407, 409, 727, 757, 982, 992, 1007, 1008, 1014, 1017], "idelberg": 1053, "ident": [11, 17, 62, 121, 192, 197, 215, 226, 230, 331, 351, 375, 382, 394, 406, 410, 411, 412, 414, 420, 423, 439, 440, 453, 465, 466, 474, 476, 477, 480, 481, 482, 489, 504, 552, 560, 561, 565, 566, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 644, 680, 681, 700, 705, 706, 737, 786, 796, 803, 806, 816, 817, 820, 821, 847, 848, 854, 862, 863, 869, 870, 882, 894, 913, 914, 986, 987, 990, 993, 996, 997, 1008, 1040, 1044, 1045, 1046, 1050, 1054], "identif": [375, 380, 410, 498, 982, 1021], "identifi": [18, 88, 95, 101, 122, 123, 166, 167, 197, 200, 201, 246, 248, 257, 262, 268, 292, 312, 317, 343, 351, 352, 374, 375, 379, 380, 384, 385, 394, 409, 410, 411, 414, 417, 418, 447, 451, 458, 488, 497, 509, 510, 556, 557, 558, 559, 564, 565, 566, 567, 607, 644, 650, 700, 713, 775, 830, 851, 870, 900, 901, 982, 989, 993, 999, 1006, 1018, 1027, 1043, 1045, 1050, 1051], "idf": [13, 17, 230, 351, 352, 353, 375, 415, 522, 545, 589, 590, 591, 592, 844, 852, 877, 982, 991, 995, 1003, 1029, 1036], "idf_": [418, 591, 592, 1044], "idier": [415, 539, 541, 548], "idiom": 386, "idiosyncrat": 382, "idl": 1047, "ido": [1051, 1052], "idpol": [197, 215], "idx": [9, 17, 43, 53, 102, 111, 115, 118, 125, 131, 158, 168, 170, 181, 189, 196, 197, 206, 219, 253, 357, 411, 414], "idx_a": 268, "idx_b": 268, "idx_r": 196, "idx_sort": 197, "idxmax": 346, "idxmin": 257, "ie": [38, 64, 94, 441, 705, 989, 1003], "ieee": [61, 77, 79, 377, 410, 412, 419, 423, 449, 476, 535, 564, 665, 686, 687, 726, 770, 989, 993, 999], "ieeexplor": 770, "ieic": [539, 541, 548], "iem": 659, "if_binari": [167, 240, 878, 1003, 1047], "if_delegate_has_method": [1049, 1050], "iff": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 876], "iforest": 236, "iforest_kw": 236, "iglesi": 1051, "ignacio": 1039, "ignor": [2, 4, 6, 15, 42, 47, 53, 60, 69, 109, 111, 114, 119, 127, 130, 168, 185, 189, 197, 206, 212, 228, 233, 238, 240, 249, 253, 254, 300, 301, 310, 311, 316, 319, 343, 344, 352, 357, 367, 380, 382, 384, 386, 394, 397, 400, 410, 411, 417, 418, 428, 429, 432, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 461, 462, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 504, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 582, 583, 584, 589, 590, 591, 592, 595, 598, 603, 604, 611, 612, 628, 629, 630, 631, 633, 634, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 708, 714, 715, 727, 730, 731, 739, 756, 757, 764, 770, 775, 779, 784, 785, 788, 789, 798, 799, 800, 802, 803, 804, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 968, 989, 990, 993, 995, 999, 1003, 1008, 1025, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "ignore_attribut": 374, "ignore_error": 52, "ignore_implicit_zero": [882, 894], "ignore_ti": [727, 757], "ignore_warn": [205, 307, 1042], "ignored_new_col": 411, "ignorerevsfil": 380, "igor": [1042, 1043, 1049], "ih": 288, "ii": [9, 94, 168, 204, 254, 377, 418, 583, 584, 590, 639, 667, 668, 868, 877, 989, 1003, 1012, 1053], "iid": 1044, "iii": [1029, 1050, 1053], "iijima": 1045, "iinfo": 1051, "ij": [259, 293, 406, 410, 415, 539, 541, 548, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 989, 990, 993, 995, 998, 1003, 1008], "ijcnn": 993, "ijcv": 993, "ijet": 410, "ik": [989, 993], "ikeda": 1048, "ikko": 1049, "il": [8, 665, 686, 687, 989, 993], "ilambharathi": [1039, 1040], "ili": [1052, 1053], "ilic": 1049, "ilion": 1050, "iliya": 1051, "iljin": [1051, 1052], "ill": [38, 80, 202, 302, 472, 473, 479, 651, 652, 655, 656, 657, 683, 684, 989, 992, 1028, 1046], "illustr": [7, 21, 22, 24, 29, 31, 50, 54, 55, 68, 69, 72, 73, 76, 78, 84, 90, 95, 109, 112, 117, 124, 125, 127, 129, 130, 141, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 162, 164, 166, 168, 169, 173, 186, 193, 194, 197, 199, 201, 205, 207, 208, 210, 211, 214, 215, 218, 219, 221, 223, 226, 228, 229, 231, 232, 233, 235, 243, 247, 253, 259, 266, 271, 272, 273, 284, 292, 297, 308, 310, 314, 315, 317, 329, 339, 340, 344, 346, 347, 348, 352, 353, 359, 362, 366, 377, 380, 385, 388, 393, 409, 413, 415, 417, 418, 516, 611, 612, 614, 615, 616, 620, 623, 624, 854, 982, 989, 993, 996, 999, 1005, 1006, 1007, 1008, 1015, 1018, 1020], "iloc": [2, 125, 130, 167, 168, 215, 259, 286], "ilya": 1043, "im": [93, 103, 270, 287], "im_": 698, "im_kw": [698, 1050], "imacul": 1042, "imag": [1, 4, 12, 14, 18, 19, 30, 34, 37, 38, 39, 40, 42, 44, 46, 49, 52, 56, 60, 65, 66, 68, 87, 92, 93, 98, 102, 104, 117, 144, 146, 153, 164, 188, 219, 228, 231, 235, 257, 292, 301, 302, 316, 326, 327, 351, 352, 372, 373, 375, 377, 380, 385, 388, 394, 397, 402, 409, 410, 415, 442, 446, 453, 463, 494, 495, 496, 497, 503, 504, 507, 508, 535, 536, 538, 542, 608, 609, 692, 698, 739, 831, 875, 989, 993, 994, 996, 998, 1005, 1009, 1013, 1015, 1018, 1020, 1025, 1026, 1028, 1029, 1031, 1036, 1039, 1044, 1045, 1049, 1051, 1052], "image_arrai": 46, "image_array_sampl": 46, "image_height": [584, 585, 588], "image_index": [326, 327], "image_nam": 507, "image_patch": 588, "image_reconstruct": 588, "image_s": 588, "image_shap": [93, 235], "image_width": [584, 585, 588], "imagebox": 219, "imageio": 374, "imagenet": [862, 863], "images_approx": 1028, "images_restor": 49, "imagin": [94, 149, 233, 343, 414, 415, 418, 989], "imamura": 1050, "imbal": [252, 262, 273, 323, 414, 708, 730, 731, 739, 784, 785, 788, 789, 993], "imbalanc": [197, 253, 262, 266, 268, 273, 352, 392, 407, 414, 704, 709, 788, 802, 806, 842, 993, 995, 1001, 1013], "imbert": [1043, 1045, 1048, 1050, 1053], "img": [3, 48, 64, 507, 587], "img_height": 584, "img_shap": 117, "img_to_graph": [44, 64, 418, 1039, 1049], "img_width": 584, "imit": 351, "immanuel": [0, 1036, 1037, 1041], "immedi": [53, 380, 392, 801, 815, 826, 827, 1044], "immens": 1018, "immensu": 1044, "immers": [691, 695], "immobil": 2, "immut": 403, "imp": 983, "imp_mean": [628, 631], "imp_reshap": 117, "impact": [10, 11, 23, 34, 35, 40, 41, 57, 61, 62, 66, 73, 109, 142, 164, 166, 167, 168, 177, 199, 201, 215, 236, 252, 253, 278, 286, 310, 320, 346, 352, 362, 366, 367, 373, 392, 395, 407, 410, 415, 448, 450, 537, 541, 548, 591, 667, 668, 669, 673, 675, 677, 678, 679, 693, 795, 801, 804, 805, 815, 828, 845, 846, 847, 882, 894, 905, 906, 928, 942, 964, 967, 982, 992, 1000, 1008, 1015, 1043, 1046, 1049], "imped": 388, "imperfect": [729, 786, 993, 1038], "imperfectli": [704, 735, 993], "implant": 19, "implement": [4, 5, 11, 12, 15, 44, 54, 79, 93, 115, 125, 162, 170, 173, 181, 182, 186, 211, 215, 218, 226, 232, 233, 253, 257, 259, 268, 278, 281, 283, 285, 288, 308, 315, 316, 317, 318, 319, 321, 351, 353, 366, 367, 368, 374, 375, 377, 378, 380, 381, 382, 385, 386, 388, 389, 394, 397, 400, 405, 406, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 438, 443, 444, 445, 447, 448, 449, 450, 451, 476, 494, 497, 509, 533, 534, 535, 536, 537, 539, 542, 543, 544, 554, 555, 556, 558, 559, 562, 563, 564, 568, 573, 583, 589, 590, 592, 594, 598, 602, 611, 612, 633, 634, 641, 642, 646, 647, 654, 658, 659, 660, 664, 665, 669, 672, 673, 675, 676, 677, 678, 679, 685, 686, 687, 688, 689, 692, 693, 696, 708, 712, 721, 736, 739, 743, 779, 783, 789, 790, 798, 800, 801, 804, 805, 807, 815, 819, 820, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 850, 853, 855, 856, 861, 862, 863, 865, 887, 895, 896, 902, 905, 906, 907, 908, 909, 910, 911, 941, 942, 950, 953, 958, 961, 962, 964, 982, 983, 985, 987, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1003, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1020, 1025, 1026, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "impli": [2, 149, 167, 351, 352, 353, 415, 417, 420, 475, 574, 583, 611, 612, 623, 736, 929, 989, 990, 1029, 1047], "implic": [362, 380], "implicit": [197, 394, 417, 418, 573, 683, 684, 987, 992, 1013, 1045], "implicitli": [353, 389, 417, 598, 633, 634, 884, 983, 985, 1000, 1003, 1008], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 400, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 954, 955, 956, 957, 958, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1015, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051], "importance_gett": [419, 594, 595, 598, 1048], "importances_mean": [116, 123, 169, 170, 315, 635, 1001], "importances_std": [116, 635, 1001], "important_word": 17, "importantli": [2, 12, 94, 168, 173, 305, 410, 1054], "importerror": [9, 51, 96, 283, 296, 388], "importlib": 1049, "impos": [37, 55, 127, 191, 201, 311, 392, 410, 415, 417, 418, 528, 658, 989], "imposs": [122, 353, 1014], "impract": 910, "impress": 1018, "improp": [394, 1043], "improv": [0, 2, 22, 23, 31, 76, 77, 80, 98, 103, 109, 110, 115, 118, 120, 121, 122, 124, 125, 130, 142, 162, 167, 173, 183, 197, 205, 215, 253, 260, 262, 278, 283, 286, 302, 310, 321, 342, 343, 352, 362, 367, 378, 383, 385, 386, 388, 389, 392, 394, 395, 403, 408, 415, 417, 419, 450, 451, 532, 533, 535, 538, 539, 540, 542, 543, 544, 547, 555, 558, 559, 560, 561, 562, 563, 565, 566, 611, 612, 644, 653, 665, 667, 668, 669, 673, 674, 675, 676, 677, 679, 686, 688, 693, 730, 731, 785, 788, 789, 854, 862, 863, 879, 881, 893, 913, 914, 916, 942, 987, 989, 990, 993, 996, 997, 1007, 1008, 1009, 1012, 1013, 1014, 1018, 1027, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "improvis": [9, 296], "impur": [123, 170, 360, 396, 417, 419, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 917, 919, 1009, 1031, 1041, 1042, 1043, 1044], "imput": [69, 125, 130, 163, 169, 228, 238, 240, 316, 319, 369, 372, 384, 393, 394, 400, 411, 417, 491, 502, 566, 581, 640, 646, 673, 827, 848, 866, 924, 926, 1013, 1014, 1015, 1031, 1038, 1039], "imputation_const": 238, "imputation_mean": 238, "imputation_ord": [628, 1046], "imputation_sequence_": 628, "impute_estim": 161, "impute_scor": 162, "imran": [1038, 1039, 1040], "imread": 30, "imshow": [3, 4, 12, 30, 38, 44, 45, 46, 48, 49, 51, 52, 56, 80, 87, 93, 96, 103, 151, 152, 153, 157, 170, 188, 213, 219, 235, 270, 287, 302, 326, 327, 339, 347, 374, 633, 698, 1025, 1026, 1050], "in1d": 1043, "in_bodi": 6, "in_titl": 6, "in_top": 6, "in_topic_d": 6, "inaccess": 53, "inact": [353, 374, 380], "inadvert": [166, 394], "inadvis": 403, "inappropri": [375, 414, 420, 710, 822], "inbuilt": 414, "inc": [0, 68, 258, 983, 1005, 1018], "incap": 53, "incentiv": 384, "incept": 1014, "includ": [2, 30, 32, 53, 78, 115, 119, 120, 121, 166, 167, 169, 181, 197, 201, 215, 233, 260, 278, 283, 300, 305, 318, 319, 321, 339, 344, 351, 353, 362, 366, 367, 374, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 394, 395, 397, 403, 406, 408, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 445, 447, 451, 457, 467, 470, 471, 472, 473, 474, 475, 476, 477, 490, 491, 492, 497, 501, 502, 503, 505, 506, 511, 535, 542, 558, 565, 575, 633, 639, 647, 648, 653, 661, 662, 663, 666, 682, 689, 690, 698, 714, 730, 731, 736, 738, 739, 772, 784, 785, 788, 796, 801, 803, 804, 805, 814, 815, 818, 821, 828, 831, 853, 855, 856, 857, 878, 879, 880, 884, 902, 905, 906, 913, 915, 917, 919, 925, 926, 929, 931, 934, 950, 982, 989, 992, 993, 994, 996, 997, 1003, 1007, 1008, 1009, 1013, 1014, 1017, 1018, 1027, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "include_bia": [2, 176, 274, 880, 884, 1050], "include_boundari": [929, 1050], "include_self": [37, 42, 65, 696, 858, 859, 1040], "include_valu": 698, "inclus": [380, 382, 388, 451, 457, 755, 787, 993, 994, 1036, 1050], "incom": [305, 375, 441], "incoming_count": 15, "incompat": [199, 384, 497, 983, 1044, 1045], "incomplet": [380, 397, 405, 410, 706, 796, 983, 990, 1029, 1040, 1042], "inconsist": [394, 403, 418, 509, 510, 577, 907, 910, 929, 999, 1008, 1031, 1036, 1041, 1042, 1043, 1044, 1046, 1049, 1051, 1052, 1053], "inconsistentversionwarn": [403, 1052], "incorpor": [321, 380, 411, 417, 992, 1013, 1018], "incorrect": [109, 166, 266, 329, 362, 380, 410, 608, 609, 633, 634, 735, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "incorrectli": [178, 417, 418, 554, 560, 562, 735, 741, 993, 1037, 1042, 1044, 1045, 1047, 1052], "incr_mean_variance_axi": [1042, 1048], "increas": [2, 5, 13, 24, 35, 41, 53, 55, 56, 59, 73, 96, 109, 110, 112, 115, 118, 120, 125, 127, 142, 146, 149, 153, 154, 155, 158, 167, 168, 173, 177, 179, 188, 197, 198, 199, 201, 215, 223, 230, 244, 245, 253, 259, 260, 261, 266, 272, 273, 299, 306, 307, 310, 317, 323, 327, 339, 346, 352, 353, 356, 366, 367, 368, 379, 388, 389, 394, 407, 410, 412, 415, 417, 418, 421, 441, 445, 447, 453, 464, 472, 473, 479, 533, 537, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 628, 636, 637, 638, 646, 651, 652, 655, 656, 657, 659, 660, 667, 668, 669, 677, 678, 679, 683, 684, 686, 687, 693, 707, 708, 713, 779, 783, 790, 804, 805, 834, 853, 855, 856, 857, 860, 862, 863, 879, 905, 913, 914, 915, 916, 942, 982, 984, 988, 989, 990, 992, 993, 996, 1003, 1007, 1008, 1009, 1018, 1036, 1038, 1041, 1045, 1047, 1048, 1051], "increasing_": 636, "increasing_bool": 637, "increment": [70, 72, 92, 98, 99, 100, 101, 104, 164, 262, 384, 386, 443, 448, 464, 505, 534, 535, 536, 537, 540, 542, 545, 603, 647, 659, 667, 807, 829, 837, 838, 840, 841, 842, 843, 844, 874, 875, 885, 905, 906, 968, 989, 995, 1015, 1039, 1040], "incrementalpca": [97, 368, 415, 534, 536, 540, 542, 545, 1040, 1043, 1044, 1046, 1047, 1050], "incur": [24, 620, 905, 1008, 1044], "ind": [12, 40, 121, 132, 352, 845, 846], "inde": [3, 5, 23, 25, 32, 37, 38, 51, 53, 56, 80, 84, 98, 109, 112, 145, 146, 149, 167, 169, 176, 181, 185, 186, 197, 199, 261, 262, 266, 268, 278, 283, 305, 310, 346, 352, 362, 366, 379, 385, 393, 394, 395, 410, 412, 417, 568, 569, 989, 1003, 1007, 1050], "indecisiveus": [1047, 1048], "indefinit": 384, "indent": [382, 959], "independ": [11, 23, 25, 35, 44, 94, 95, 97, 114, 118, 156, 168, 235, 236, 259, 262, 264, 268, 281, 305, 312, 315, 352, 362, 366, 367, 376, 382, 384, 393, 394, 397, 406, 407, 408, 410, 411, 412, 413, 414, 418, 422, 450, 465, 489, 504, 516, 517, 518, 519, 521, 533, 534, 536, 538, 540, 541, 547, 548, 552, 553, 605, 608, 609, 626, 641, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 705, 706, 718, 737, 738, 756, 758, 796, 803, 830, 834, 836, 838, 839, 877, 881, 882, 883, 885, 889, 890, 891, 892, 894, 895, 896, 899, 907, 908, 909, 910, 911, 936, 982, 985, 987, 989, 990, 993, 994, 995, 998, 1000, 1003, 1008, 1009, 1030, 1031, 1036, 1037, 1042, 1044, 1046, 1051], "inder128": 1046, "inderjeet": 1047, "inderjit": [406, 454], "indeterminaci": 545, "index": [10, 13, 15, 35, 36, 37, 38, 39, 47, 48, 56, 69, 70, 109, 114, 116, 125, 143, 146, 161, 166, 167, 168, 169, 170, 197, 201, 215, 237, 240, 244, 245, 249, 254, 257, 258, 259, 260, 262, 270, 271, 273, 283, 305, 310, 311, 312, 319, 323, 326, 327, 352, 353, 375, 377, 378, 380, 382, 384, 389, 392, 394, 406, 411, 414, 415, 417, 418, 425, 444, 448, 449, 450, 451, 452, 454, 455, 458, 460, 461, 465, 468, 504, 510, 558, 559, 560, 561, 565, 566, 567, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 618, 633, 634, 641, 698, 705, 706, 713, 717, 719, 732, 739, 758, 780, 781, 787, 789, 795, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 831, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 878, 913, 914, 915, 916, 946, 964, 967, 972, 973, 993, 995, 996, 997, 1007, 1009, 1013, 1027, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "index_alpha_path_a": 185, "index_alpha_path_b": 185, "index_map": 15, "indexerror": [1044, 1045], "indexhash": 641, "indexhash_": 641, "indian": 375, "indic": [10, 17, 18, 23, 24, 46, 57, 58, 64, 73, 84, 88, 93, 109, 114, 120, 154, 157, 162, 166, 168, 194, 220, 230, 233, 252, 253, 261, 262, 265, 266, 283, 296, 326, 327, 330, 351, 352, 353, 360, 367, 375, 380, 381, 382, 384, 388, 389, 392, 394, 405, 406, 407, 410, 412, 414, 415, 417, 418, 421, 425, 438, 441, 445, 451, 452, 453, 454, 456, 457, 458, 461, 465, 468, 473, 488, 509, 510, 512, 513, 514, 524, 533, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 621, 628, 629, 630, 631, 633, 634, 640, 647, 648, 651, 652, 653, 654, 655, 656, 662, 664, 666, 674, 676, 683, 684, 691, 693, 695, 697, 704, 708, 713, 714, 719, 720, 721, 723, 726, 729, 730, 731, 732, 735, 739, 740, 741, 742, 755, 772, 779, 780, 781, 782, 784, 785, 786, 788, 789, 793, 794, 795, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 838, 839, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 869, 872, 876, 878, 886, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 921, 925, 926, 931, 946, 956, 957, 968, 969, 970, 971, 972, 973, 974, 983, 988, 989, 990, 993, 994, 995, 996, 997, 1000, 1003, 1004, 1007, 1008, 1014, 1020, 1024, 1027, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1049, 1051, 1052, 1053, 1054], "indicator_": [628, 629, 631], "indicator_matrix_": 1041, "indigo": 214, "indirect": [262, 381, 394], "indirectli": [215, 343], "indispens": 1018, "indistinguish": 305, "individu": [2, 44, 58, 78, 108, 110, 112, 127, 129, 130, 134, 141, 144, 158, 164, 165, 167, 170, 171, 193, 197, 215, 227, 236, 237, 253, 262, 264, 281, 315, 322, 343, 346, 367, 381, 384, 387, 389, 394, 396, 400, 406, 411, 414, 417, 418, 438, 453, 463, 465, 497, 502, 504, 510, 556, 557, 560, 561, 563, 564, 566, 568, 569, 570, 571, 604, 610, 611, 633, 634, 644, 646, 658, 659, 660, 669, 672, 673, 674, 675, 676, 677, 678, 679, 688, 713, 720, 729, 735, 751, 752, 786, 791, 792, 801, 815, 833, 837, 838, 840, 841, 842, 843, 844, 863, 866, 874, 875, 877, 878, 879, 882, 884, 885, 890, 891, 892, 905, 906, 993, 994, 1003, 1008, 1015, 1024, 1029, 1031, 1037, 1040, 1042, 1048, 1050, 1052], "indptr": [15, 283, 360, 968, 969, 970, 971, 972, 973, 974, 1044, 1052], "induc": [24, 54, 167, 181, 188, 190, 195, 198, 212, 232, 236, 346, 353, 406, 408, 415, 417, 447, 450, 540, 544, 554, 558, 559, 560, 561, 565, 566, 567, 644, 727, 757, 878, 913, 914, 915, 916, 986, 993, 1007, 1027], "induct": [2, 6, 25, 34, 66, 107, 122, 157, 164, 233, 283, 394, 410, 417, 424, 442, 513, 565, 628, 632, 900, 901, 954, 977, 989, 1006, 1015, 1038], "inductive_learn": 54, "inductivecluster": 54, "industri": [410, 1013], "ineffect": [309, 1003, 1044, 1045], "ineffici": [417, 444, 575, 833, 834, 996, 998], "inequ": [360, 394, 410, 444, 448, 460, 700, 990, 991, 996], "inertia": [55, 56, 59, 352, 410, 444, 448, 450, 453, 460, 461, 463, 464, 1047], "inertia_": [56, 59, 62, 444, 448, 450, 1047], "inf": [73, 152, 293, 389, 410, 420, 447, 451, 456, 457, 458, 462, 472, 473, 479, 554, 555, 560, 561, 594, 595, 598, 607, 608, 609, 620, 628, 636, 638, 649, 650, 651, 653, 670, 672, 673, 677, 678, 679, 681, 688, 729, 731, 747, 779, 786, 790, 861, 870, 877, 923, 924, 925, 926, 940, 993, 1003, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "infant": 1003, "infeas": [989, 996, 998], "infer": [164, 165, 167, 171, 192, 244, 248, 249, 259, 357, 374, 382, 392, 403, 408, 414, 415, 497, 509, 510, 516, 535, 537, 539, 541, 548, 550, 551, 554, 560, 561, 633, 636, 658, 710, 723, 724, 742, 786, 798, 799, 807, 824, 831, 841, 879, 886, 900, 901, 913, 914, 915, 916, 956, 983, 989, 992, 993, 998, 1003, 1006, 1009, 1013, 1014, 1015, 1023, 1037, 1041, 1042, 1047, 1050, 1053], "inferencesess": 403, "inferenti": 54, "inferior": [442, 446, 1047], "infin": [259, 346, 542, 683, 684, 713, 826, 912, 924, 996], "infinit": [25, 198, 243, 262, 343, 366, 420, 447, 623, 624, 779, 798, 923, 925, 926, 985, 992, 1003, 1008, 1044, 1046, 1049, 1050, 1051, 1053, 1054], "inflammatori": 375, "inflat": [55, 166, 167, 169, 410, 414, 993, 1003], "inflect": 261, "influenc": [1, 7, 11, 14, 78, 79, 109, 164, 167, 179, 232, 243, 267, 305, 312, 339, 343, 346, 362, 368, 412, 415, 417, 433, 441, 455, 466, 483, 484, 485, 490, 502, 555, 557, 559, 561, 563, 566, 569, 571, 612, 629, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 679, 680, 735, 751, 831, 838, 839, 847, 848, 855, 856, 863, 882, 883, 894, 906, 908, 911, 914, 916, 925, 982, 987, 988, 989, 996, 999, 1003, 1007, 1008, 1015, 1018, 1039, 1044, 1045], "influenti": [201, 352, 1018], "info": [4, 40, 69, 93, 167, 168, 233, 253, 257, 377, 379, 384, 394, 418, 497, 949, 959, 1025], "infonea": 1011, "inform": [2, 3, 6, 9, 10, 11, 12, 23, 25, 31, 32, 35, 36, 47, 51, 56, 64, 65, 68, 69, 84, 87, 88, 89, 99, 115, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 167, 168, 170, 173, 175, 176, 177, 181, 198, 201, 205, 212, 214, 215, 216, 233, 237, 245, 246, 248, 253, 254, 256, 259, 260, 261, 264, 266, 268, 286, 289, 290, 293, 312, 318, 322, 342, 346, 351, 352, 353, 357, 360, 362, 366, 369, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 388, 392, 393, 394, 395, 400, 403, 406, 409, 414, 415, 417, 418, 419, 420, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 493, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 516, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 607, 608, 609, 610, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 696, 698, 702, 705, 706, 716, 727, 731, 744, 756, 757, 758, 787, 789, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 950, 983, 985, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1007, 1009, 1014, 1015, 1017, 1018, 1026, 1027, 1028, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "informatik": [22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232, 993], "informed": 993, "infrastructur": [301, 321, 1011, 1013, 1014], "infrequ": [878, 879, 886, 993, 1036, 1050, 1051, 1052], "infrequent_categories_": [319, 321, 878, 879, 886, 1003], "infrequent_if_exist": [878, 1003], "infrequent_sklearn": [878, 1003], "infti": [215, 420, 620, 989, 1003, 1043], "ing": 418, "ingela": 1050, "ingest": 418, "ingredi": 420, "ingrid": 1046, "inher": [103, 192, 362, 410, 415, 983, 985, 987, 988, 990, 994], "inherit": [233, 380, 382, 393, 394, 424, 578, 677, 934, 936, 989, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053], "inhibit": [421, 445], "inhomogen": [420, 615], "ini": 246, "init": [13, 40, 43, 56, 57, 59, 62, 168, 177, 218, 219, 221, 222, 223, 244, 246, 283, 352, 383, 388, 410, 415, 417, 444, 448, 450, 452, 454, 460, 461, 539, 541, 548, 549, 560, 561, 633, 634, 691, 693, 695, 854, 990, 1036, 1045, 1048, 1050, 1051, 1052], "init_": [560, 561], "init_param": [243, 246, 249, 798, 799], "init_s": [59, 352, 450], "init_size_": 1048, "init_tim": 246, "initi": [0, 5, 10, 15, 34, 40, 41, 43, 55, 56, 58, 61, 62, 66, 79, 123, 131, 132, 133, 150, 155, 164, 167, 177, 190, 212, 218, 219, 223, 242, 244, 245, 250, 259, 283, 317, 328, 339, 352, 362, 367, 375, 380, 382, 388, 389, 392, 394, 410, 415, 417, 419, 420, 422, 443, 444, 448, 449, 450, 451, 452, 453, 454, 460, 461, 462, 463, 513, 516, 532, 533, 534, 538, 539, 541, 544, 546, 547, 548, 549, 554, 555, 560, 561, 594, 608, 609, 611, 612, 620, 621, 628, 641, 646, 647, 648, 649, 653, 654, 659, 661, 662, 663, 664, 667, 668, 669, 670, 672, 677, 678, 679, 681, 682, 685, 691, 692, 693, 695, 696, 798, 799, 835, 854, 861, 862, 863, 901, 928, 941, 942, 962, 967, 968, 985, 989, 990, 992, 997, 998, 999, 1007, 1009, 1013, 1015, 1026, 1028, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "initial_imputer_": 628, "initial_strategi": 628, "initial_theta": [611, 612], "initialis": [93, 539, 541, 548, 1036, 1044, 1045], "initializedcheck": 381, "inject": [236, 375, 417], "inki": 1042, "inli": [226, 989, 999], "inlier": [78, 126, 200, 226, 236, 305, 394, 412, 432, 470, 564, 672, 678, 851, 882, 894, 908, 909, 911, 989, 999, 1043, 1044, 1049], "inlier_mask": 200, "inlier_mask_": [200, 672], "inlier_plot": 78, "inliers_mask": 79, "inlin": [208, 380, 381, 1009], "inner": [25, 98, 122, 125, 260, 264, 281, 328, 366, 418, 444, 515, 583, 590, 619, 649, 670, 681, 776, 778, 985, 993, 1003, 1008, 1037, 1040, 1050, 1053], "inner_clf": 993, "inner_cv": [264, 322], "inner_it": 386, "inner_max_num_thread": 961, "inner_numb": 328, "inner_stat": 1050, "inner_stats_": 1050, "inpaint": 415, "inplac": [215, 236, 271, 455, 483, 484, 485, 486, 860, 868, 871, 874, 875, 877, 881, 882, 883, 885, 966, 969, 970, 971, 975, 976, 1045], "inplace_csr_column_scal": 389, "inplace_csr_row_normalize_l1": 389, "inplace_csr_row_normalize_l2": 389, "inproceed": 0, "input": [2, 4, 8, 25, 29, 31, 71, 93, 97, 118, 122, 123, 155, 156, 157, 167, 173, 176, 197, 200, 201, 205, 212, 215, 229, 230, 232, 233, 240, 254, 278, 287, 288, 301, 306, 307, 308, 309, 315, 318, 320, 339, 343, 347, 353, 374, 377, 380, 383, 385, 389, 390, 392, 393, 394, 403, 406, 407, 411, 414, 415, 416, 417, 418, 419, 420, 422, 428, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 446, 449, 450, 451, 455, 458, 459, 462, 465, 466, 468, 469, 470, 472, 473, 483, 484, 485, 490, 504, 510, 517, 518, 519, 521, 525, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 621, 623, 628, 629, 630, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 686, 687, 688, 689, 690, 691, 693, 694, 697, 698, 699, 700, 701, 702, 703, 722, 723, 724, 725, 729, 746, 747, 749, 751, 752, 754, 755, 762, 768, 772, 773, 775, 779, 780, 781, 782, 786, 791, 792, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 893, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 922, 923, 924, 925, 926, 927, 931, 936, 939, 941, 950, 952, 953, 957, 966, 968, 974, 975, 976, 979, 980, 983, 985, 987, 989, 990, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1020, 1024, 1025, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "input_featur": [176, 382, 394, 426, 431, 443, 444, 446, 448, 450, 465, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 1052], "input_nam": [924, 926, 956, 1050], "input_typ": [353, 418, 583], "inria": [0, 3, 7, 28, 35, 50, 52, 55, 73, 80, 115, 125, 155, 176, 181, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 236, 260, 262, 265, 272, 295, 310, 346, 351, 352, 353, 659, 1011, 1036], "insensit": [232, 644, 677, 679, 789, 906, 986, 1007, 1008, 1036], "insepar": [146, 377], "insert": [58, 167, 197, 392, 410, 488, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 920], "insid": [15, 17, 24, 168, 199, 233, 259, 328, 339, 368, 374, 375, 382, 386, 400, 410, 418, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 595, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 950, 953, 961, 1000, 1018, 1053], "insight": [2, 5, 167, 168, 198, 199, 215, 253, 301, 305, 351, 360, 407, 409, 801, 804, 805, 815, 828, 1000, 1009, 1018], "insist": 68, "inspect": [2, 7, 28, 29, 32, 54, 59, 111, 116, 123, 125, 126, 127, 131, 143, 149, 154, 155, 167, 168, 169, 170, 171, 180, 189, 206, 211, 237, 253, 259, 262, 271, 286, 291, 294, 310, 315, 316, 317, 318, 320, 322, 335, 336, 337, 338, 340, 341, 343, 351, 357, 367, 369, 382, 394, 410, 411, 417, 418, 465, 554, 555, 558, 559, 560, 561, 565, 566, 567, 834, 865, 866, 913, 914, 915, 916, 981, 993, 994, 997, 1000, 1001, 1008, 1013, 1015, 1029, 1031, 1039], "inspir": [77, 127, 168, 215, 380, 392, 417, 562, 563, 930, 983, 1013, 1045], "instabl": [37, 167, 293, 420, 453, 536, 540, 544, 696, 1043, 1046, 1049], "instal": [51, 240, 283, 315, 316, 317, 318, 319, 320, 321, 322, 323, 366, 367, 369, 380, 381, 383, 384, 386, 388, 392, 393, 402, 403, 405, 410, 418, 453, 463, 497, 692, 696, 1009, 1011, 1029, 1043, 1044, 1045, 1049, 1050], "installment_commit": 253, "instanc": [2, 6, 8, 11, 22, 24, 25, 51, 54, 56, 112, 125, 143, 146, 162, 168, 169, 180, 181, 228, 233, 236, 253, 255, 257, 268, 270, 271, 294, 315, 322, 331, 335, 336, 342, 343, 351, 352, 353, 365, 366, 367, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 388, 389, 392, 394, 397, 400, 403, 405, 406, 407, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 424, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 492, 493, 496, 497, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 621, 628, 629, 630, 631, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 708, 721, 730, 731, 739, 772, 775, 779, 780, 781, 782, 784, 785, 788, 789, 790, 793, 794, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 925, 926, 928, 936, 937, 941, 942, 949, 950, 951, 952, 961, 962, 963, 964, 967, 977, 978, 982, 983, 989, 990, 993, 995, 996, 999, 1001, 1003, 1007, 1008, 1009, 1014, 1020, 1027, 1028, 1029, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "instanci": 1045, "instant": 191, "instantan": 509, "instanti": [70, 152, 318, 383, 400, 417, 451, 568, 569, 603, 631, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 830, 832, 932, 999, 1026, 1036, 1044, 1048, 1052], "instead": [0, 2, 3, 4, 11, 18, 46, 51, 53, 54, 55, 69, 98, 112, 117, 127, 143, 146, 149, 197, 199, 212, 215, 222, 236, 249, 255, 256, 260, 261, 281, 288, 305, 315, 316, 317, 318, 319, 339, 341, 343, 351, 353, 360, 362, 366, 367, 374, 375, 378, 379, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 400, 403, 405, 410, 411, 413, 414, 415, 416, 417, 418, 419, 421, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 457, 460, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 510, 511, 534, 535, 536, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 595, 608, 609, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 631, 633, 636, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 693, 695, 708, 710, 743, 747, 751, 752, 775, 779, 780, 781, 783, 784, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 813, 815, 819, 820, 821, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 866, 867, 868, 870, 871, 872, 877, 878, 883, 884, 885, 895, 896, 899, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 919, 931, 937, 942, 950, 961, 968, 982, 983, 985, 989, 990, 992, 993, 994, 997, 998, 1003, 1007, 1008, 1009, 1013, 1025, 1027, 1029, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "instinct": 351, "institut": [0, 253, 377, 996], "instruct": [366, 380, 381, 382, 383, 384, 385, 388, 392, 393, 394, 504, 589, 590, 592, 1017, 1020, 1029, 1036], "instrument": [10, 68, 94, 166], "insuffici": [396, 992, 1028], "insur": [164, 175, 197, 216, 409, 465, 497, 553, 649, 670, 681, 707, 746, 751, 753, 831, 866, 869, 870, 878, 885, 989, 1015], "int": [6, 8, 11, 12, 15, 17, 35, 42, 60, 79, 112, 121, 125, 126, 137, 138, 150, 151, 152, 158, 162, 166, 178, 188, 190, 197, 215, 223, 226, 232, 236, 243, 253, 254, 257, 258, 259, 283, 288, 290, 296, 312, 327, 353, 375, 380, 382, 392, 394, 407, 411, 414, 418, 421, 422, 425, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 618, 628, 629, 630, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 706, 708, 710, 714, 727, 728, 730, 731, 732, 735, 739, 757, 758, 770, 775, 779, 780, 781, 782, 783, 784, 785, 788, 790, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 925, 926, 928, 929, 941, 942, 944, 945, 946, 947, 958, 962, 964, 967, 972, 973, 989, 1000, 1036, 1042, 1046, 1047], "int32": [236, 283, 312, 380, 394, 444, 448, 450, 452, 454, 460, 907, 908, 909, 910, 911, 958, 1008, 1045, 1051, 1052, 1053], "int64": [2, 12, 52, 69, 167, 168, 253, 273, 278, 311, 322, 360, 394, 418, 428, 443, 449, 451, 497, 589, 641, 647, 648, 653, 654, 715, 716, 841, 870, 923, 979, 1044, 1047, 1049, 1051, 1052, 1053], "int64dtyp": 1053, "intact": [878, 1029], "integ": [2, 15, 46, 51, 69, 167, 197, 215, 316, 317, 362, 366, 374, 375, 377, 382, 385, 389, 393, 394, 410, 411, 414, 415, 417, 418, 435, 438, 463, 465, 468, 473, 488, 497, 499, 502, 503, 504, 506, 509, 510, 513, 515, 516, 520, 523, 551, 560, 561, 562, 563, 564, 568, 569, 573, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 633, 634, 645, 652, 656, 660, 666, 674, 676, 677, 679, 700, 715, 736, 801, 803, 804, 805, 806, 808, 810, 815, 816, 817, 820, 821, 823, 825, 828, 836, 839, 841, 844, 845, 846, 870, 878, 879, 884, 885, 886, 889, 899, 901, 913, 914, 915, 916, 921, 956, 957, 958, 962, 983, 989, 994, 996, 1003, 1006, 1008, 1009, 1020, 1027, 1029, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "integr": [0, 40, 69, 143, 157, 186, 301, 317, 367, 378, 382, 383, 384, 386, 388, 394, 397, 415, 420, 447, 716, 756, 787, 968, 992, 1000, 1018, 1023, 1037, 1039, 1040, 1048, 1049, 1053], "intel": [993, 1013], "intelex": [397, 1013], "intellectu": 166, "intellig": [61, 146, 253, 351, 377, 410, 417, 449, 556, 557, 639, 697, 726, 835, 862, 863, 994, 1005, 1014, 1018], "intend": [55, 56, 97, 198, 343, 351, 380, 381, 382, 387, 392, 394, 414, 469, 583, 674, 700, 874, 875, 885, 903, 988, 989, 993, 997, 1004], "intens": [64, 96, 283, 377, 381, 392, 394, 415, 444, 448, 460, 608, 609, 633, 634, 803, 982, 1000, 1018, 1044], "intention": 25, "inter": [38, 116, 362, 417, 717], "interact": [1, 123, 125, 164, 197, 223, 228, 260, 316, 379, 381, 382, 384, 386, 392, 394, 395, 403, 411, 560, 561, 562, 563, 633, 634, 880, 884, 982, 985, 989, 990, 991, 998, 1000, 1003, 1012, 1014, 1038, 1043, 1050, 1051], "interaction_cst": [168, 320, 417, 562, 563, 1051], "interaction_onli": [2, 880, 989, 1003], "interactiveshellapp": 386, "intercept": [96, 189, 206, 214, 347, 394, 483, 484, 485, 550, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 880, 884, 887, 905, 906, 912, 989, 991, 993, 998, 1007, 1008, 1039, 1041, 1045, 1046], "intercept_": [179, 187, 189, 206, 234, 337, 344, 347, 382, 394, 483, 484, 485, 550, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 905, 906, 907, 908, 909, 910, 911, 987, 989, 1007, 1008, 1036, 1043, 1048, 1050, 1053], "intercept_hidden_": 861, "intercept_init": [667, 668, 669, 677, 679], "intercept_sc": [190, 659, 660, 905, 906, 912, 989, 1008], "intercept_visible_": 861, "intercepts_": [862, 863, 997], "interchang": [1013, 1053], "interclass": 38, "interdepend": 516, "interest": [0, 2, 4, 11, 40, 42, 48, 53, 60, 64, 70, 109, 117, 122, 130, 143, 146, 154, 161, 167, 168, 169, 186, 197, 198, 199, 215, 219, 231, 252, 253, 256, 259, 260, 262, 268, 273, 278, 339, 346, 352, 360, 366, 375, 377, 380, 385, 386, 388, 392, 395, 409, 410, 412, 415, 418, 420, 494, 495, 501, 505, 511, 647, 648, 905, 983, 989, 990, 993, 998, 999, 1000, 1014, 1018, 1025, 1027, 1028, 1036, 1053], "interestingli": [76, 146, 1003], "interfac": [1, 109, 164, 373, 374, 381, 382, 389, 392, 394, 414, 420, 421, 442, 446, 451, 497, 554, 700, 801, 804, 805, 815, 865, 866, 891, 978, 982, 996, 1008, 1013, 1014, 1018, 1036, 1038, 1041, 1042, 1044, 1045, 1050, 1052], "interfer": [322, 1046], "interim": 1043, "interior": [199, 671, 989, 1051], "interleav": [376, 392, 523], "intermedi": [2, 5, 50, 53, 114, 122, 236, 339, 392, 418, 560, 561, 620, 865, 993, 1048, 1054], "intern": [0, 2, 24, 69, 80, 98, 115, 120, 123, 125, 136, 146, 150, 161, 164, 179, 197, 233, 253, 273, 283, 285, 304, 311, 313, 328, 353, 362, 367, 375, 377, 382, 386, 389, 392, 394, 400, 405, 406, 410, 414, 415, 417, 418, 419, 420, 421, 438, 440, 445, 466, 469, 512, 535, 536, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 594, 595, 611, 612, 641, 644, 647, 653, 669, 673, 677, 679, 697, 709, 732, 735, 759, 760, 784, 831, 845, 846, 861, 862, 863, 865, 866, 870, 884, 886, 900, 901, 903, 905, 906, 907, 910, 913, 914, 915, 916, 961, 989, 990, 991, 993, 996, 999, 1003, 1005, 1008, 1009, 1015, 1018, 1036, 1039, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "internet": [375, 385, 1003, 1027], "interoper": [403, 420, 1011, 1014], "interp": [268, 269, 339], "interp1d": [654, 664, 685], "interp_tpr": 269, "interpol": [2, 12, 30, 38, 48, 49, 52, 56, 80, 87, 93, 96, 153, 156, 164, 175, 176, 188, 213, 216, 229, 235, 268, 274, 287, 288, 295, 302, 327, 339, 420, 636, 646, 654, 664, 673, 685, 701, 708, 848, 856, 866, 880, 884, 984, 989, 993, 1003, 1015, 1043, 1048], "interpret": [2, 25, 125, 146, 156, 164, 165, 166, 168, 171, 193, 197, 198, 202, 213, 215, 252, 259, 261, 262, 273, 302, 306, 309, 317, 351, 353, 366, 378, 380, 381, 386, 388, 389, 394, 396, 407, 410, 411, 416, 418, 453, 465, 466, 468, 497, 542, 573, 612, 640, 644, 654, 673, 674, 692, 693, 696, 702, 730, 754, 759, 760, 784, 793, 794, 807, 816, 828, 829, 831, 834, 866, 878, 885, 961, 987, 989, 993, 994, 1000, 1001, 1003, 1009, 1013, 1015, 1020, 1028, 1036, 1037, 1041, 1044, 1049, 1050, 1051], "interquartil": [236, 883, 895], "interquartile_rang": 883, "interrog": 418, "interrupt": 989, "intersect": [260, 336, 406, 410, 739], "interv": [11, 25, 108, 125, 133, 134, 156, 164, 181, 197, 198, 199, 215, 259, 375, 394, 407, 414, 417, 420, 439, 440, 517, 518, 519, 558, 559, 561, 563, 565, 566, 636, 637, 639, 678, 743, 749, 751, 805, 822, 831, 868, 870, 884, 907, 908, 909, 929, 985, 989, 993, 1003, 1009, 1015, 1043, 1047], "intervent": [53, 167], "intl": [25, 414], "intoler": 253, "intolerant_classifi": 253, "intp": [425, 452, 454], "intra": [2, 589, 592, 793, 794], "intract": [54, 415, 990, 998], "intric": [201, 513], "intricaci": 380, "intrins": [176, 394, 415, 417, 996, 1001, 1007, 1048], "introduc": [2, 69, 76, 78, 79, 98, 125, 145, 164, 169, 176, 181, 201, 225, 230, 233, 236, 238, 241, 266, 320, 321, 353, 373, 376, 378, 380, 382, 384, 385, 388, 392, 394, 400, 407, 410, 412, 414, 415, 417, 418, 434, 442, 443, 444, 446, 448, 450, 460, 465, 469, 483, 484, 485, 486, 497, 505, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 556, 557, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 665, 686, 687, 689, 690, 693, 831, 849, 854, 857, 861, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 899, 903, 987, 989, 992, 995, 996, 999, 1003, 1005, 1007, 1008, 1015, 1020, 1027, 1036, 1037, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054], "introduct": [145, 215, 257, 369, 380, 409, 414, 415, 418, 591, 789, 790, 840, 844, 989, 991, 993, 995, 1012, 1021, 1027, 1030, 1031], "introductori": [122, 148, 149, 154, 155, 158, 159, 164, 225, 420, 612, 623, 1015, 1018], "introspect": [2, 4, 69, 386, 560, 561, 590, 1003, 1025], "intrus": 375, "intuit": [2, 11, 29, 42, 50, 60, 98, 109, 112, 119, 141, 149, 167, 168, 198, 199, 220, 226, 260, 278, 288, 307, 310, 336, 339, 343, 352, 380, 394, 407, 410, 412, 414, 416, 646, 783, 784, 785, 788, 876, 905, 907, 908, 910, 911, 985, 989, 990, 993, 994, 1000, 1003, 1004, 1008, 1018, 1027, 1029, 1036], "inv": [76, 80, 300], "inv_kw_arg": 869, "invalid": [6, 197, 394, 447, 579, 672, 713, 775, 989, 993, 1042, 1044, 1046, 1047, 1049, 1050, 1052], "invalidparametererror": 993, "invalu": 1018, "invari": [38, 377, 394, 410, 420, 615, 690, 748, 819, 820, 989, 990, 993, 1008, 1014, 1044, 1047, 1048, 1049], "invent": 996, "inventor": 995, "inventori": 1018, "invers": [10, 32, 52, 75, 76, 77, 79, 81, 109, 164, 248, 266, 268, 275, 286, 339, 352, 353, 372, 394, 408, 411, 413, 414, 415, 417, 418, 422, 446, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 528, 534, 535, 536, 540, 542, 544, 558, 562, 565, 590, 591, 592, 629, 645, 646, 659, 660, 667, 669, 675, 676, 677, 678, 679, 681, 725, 744, 753, 798, 799, 847, 848, 855, 856, 862, 863, 865, 869, 872, 878, 879, 881, 897, 898, 905, 906, 907, 910, 911, 913, 915, 931, 987, 989, 993, 996, 997, 1003, 1007, 1008, 1015, 1027, 1029, 1030, 1031, 1036, 1039, 1044, 1047, 1048, 1050, 1054], "inverse_components_": [897, 898, 1005, 1050], "inverse_func": [73, 167, 411, 466, 869, 1003, 1044, 1054], "inverse_transform": [3, 49, 52, 98, 143, 287, 352, 400, 415, 418, 446, 466, 483, 484, 485, 534, 535, 536, 539, 540, 541, 542, 544, 545, 582, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 631, 801, 804, 805, 815, 865, 869, 870, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 885, 897, 898, 1003, 1004, 1005, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "invert": [80, 98, 143, 219, 352, 353, 392, 412, 418, 631, 690, 694, 1003, 1045], "invert_yaxi": [162, 353], "invest": [386, 1018], "investig": [98, 103, 109, 162, 346, 380, 403, 989], "invit": 384, "invok": [382, 532, 538, 540, 546, 547, 568, 570, 571, 800, 823, 826, 902, 1048, 1053], "involv": [310, 312, 315, 339, 343, 366, 368, 375, 380, 384, 394, 395, 403, 413, 420, 700, 833, 834, 990, 994, 996, 1000, 1001, 1008, 1013, 1018, 1027, 1044], "invscal": [300, 677, 678, 679, 862, 863, 1007], "io": [374, 377, 380, 384, 386, 388, 394, 693, 1013, 1031, 1034], "ioangatop": 1053, "ioanni": 735, "ioerror": 1052, "iofal": 1050, "ion": 1051, "ionescu": [643, 985, 1046], "iowa": [119, 130, 236], "ipca": [97, 534, 535], "ipdb": [388, 1029], "ipm": 671, "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "ipython": [382, 385, 386, 388, 1021, 1029], "ipython_config": 386, "iq": 166, "iqbal": 1048, "iqr": [236, 883, 895], "ir": [229, 415, 591, 727, 757, 840, 844, 991, 993], "iren": [1051, 1052], "iri": [6, 9, 15, 28, 29, 31, 39, 43, 54, 72, 86, 91, 92, 95, 97, 98, 103, 104, 107, 108, 109, 110, 111, 113, 128, 131, 134, 138, 142, 148, 150, 153, 154, 157, 159, 164, 173, 175, 180, 189, 190, 194, 216, 231, 234, 240, 245, 252, 264, 265, 268, 269, 275, 286, 292, 294, 299, 300, 307, 317, 325, 330, 332, 334, 335, 337, 339, 341, 342, 343, 344, 347, 349, 355, 356, 358, 359, 360, 361, 373, 374, 393, 403, 410, 411, 414, 415, 417, 448, 497, 505, 542, 550, 554, 558, 565, 611, 623, 632, 677, 801, 815, 900, 901, 902, 905, 910, 913, 917, 918, 919, 982, 983, 987, 992, 993, 996, 1000, 1003, 1006, 1007, 1008, 1009, 1015, 1020, 1027, 1028, 1031, 1049], "iris": [88, 265, 266, 1026], "iris_61": 374, "iris_969": 374, "iris_i": 1027, "iris_version_3": 374, "iris_x": 1027, "iris_x_test": 1027, "iris_x_train": 1027, "iris_y_test": 1027, "iris_y_train": 1027, "irreduc": [112, 993], "irregular": [154, 343, 410, 996], "irregularities_kernel": 154, "irrelev": [141, 181, 362, 386, 412, 417, 419, 605, 741, 993], "irrespect": [197, 230, 268, 283, 607], "irvin": 377, "is_categor": 633, "is_categorical_": [562, 563], "is_classifi": [382, 394], "is_data_valid": [672, 989], "is_fit": 977, "is_fitted_": [424, 427, 429, 432, 433], "is_inli": [470, 564, 851], "is_leav": 360, "is_max_test_scor": 71, "is_model_valid": [672, 989], "is_multilabel": [389, 1053], "is_paramet": 981, "is_pypi": 1054, "is_regressor": 394, "is_scalar_nan": 1049, "is_sh": 270, "is_split_nod": 360, "is_stationari": [157, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "isa": 17, "isaac": [1042, 1043, 1045, 1046, 1053], "isaack": 1049, "isaactrost": 1053, "isakov": 1048, "isbn": [377, 410, 989], "isclos": 15, "isdigit": [17, 418], "ish": 31, "ishaan": 1049, "ishan": [1049, 1050], "ishank": [1041, 1042, 1043], "ishikawa": [1048, 1049], "isin": [275, 327], "isinst": [32, 118, 215, 394], "islic": [6, 42, 60], "ism": 1040, "isn": [146, 315, 351, 353, 362, 367, 380, 388, 516, 562, 563, 595, 795, 804, 805, 878, 996, 1008, 1046], "iso": [89, 148, 159, 164, 209, 220, 611, 614, 615, 1015], "iso_reg": 636, "isoformat": 15, "isol": [119, 126, 226, 236, 352, 378, 386, 397, 564, 851, 909, 1045, 1046], "isolationforest": [108, 111, 134, 164, 200, 214, 226, 236, 275, 305, 632, 831, 909, 999, 1015, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "isolationforestifittedisolationforest": 126, "isomap": [10, 50, 114, 164, 217, 220, 222, 224, 230, 292, 293, 315, 319, 417, 503, 545, 550, 567, 690, 691, 692, 693, 854, 866, 875, 898, 996, 1015, 1030, 1031, 1044, 1046, 1049, 1050, 1051, 1052, 1053], "isomap__n_neighbor": 315, "isometr": [218, 689, 691, 692, 693, 990], "isoton": [22, 23, 71, 73, 164, 221, 225, 241, 369, 438, 658, 928, 1015, 1016, 1031, 1037, 1038, 1039, 1040, 1042, 1049, 1052], "isotonic_regress": [636, 1049], "isotonicregress": [229, 984, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "isotonicregression0": 636, "isotrop": [32, 53, 55, 59, 98, 151, 153, 218, 220, 410, 412, 420, 513, 520, 533, 616, 620, 621, 623, 624], "isotropi": 415, "isr": 419, "issam": [0, 299, 1042], "issu": [0, 2, 23, 77, 84, 197, 215, 264, 312, 367, 369, 374, 383, 384, 385, 388, 389, 392, 394, 395, 396, 397, 400, 403, 405, 410, 412, 413, 418, 450, 453, 463, 474, 483, 484, 485, 535, 540, 544, 574, 589, 590, 592, 612, 628, 692, 696, 770, 876, 881, 893, 932, 982, 983, 990, 996, 1001, 1003, 1008, 1013, 1014, 1017, 1028, 1029, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1053, 1054], "issuenumb": 388, "ist": 419, "isupp": 418, "isuru": 1048, "itakura": [415, 539, 541, 548, 1043], "itali": 377, "item": [6, 7, 8, 9, 10, 11, 15, 17, 28, 41, 53, 73, 113, 115, 119, 122, 130, 167, 195, 199, 205, 219, 232, 233, 235, 245, 256, 262, 319, 327, 352, 373, 380, 381, 382, 389, 411, 465, 527, 562, 563, 589, 590, 592, 633, 813, 878, 900, 901, 920, 921, 947, 985, 1006, 1014, 1020], "item_idx": 305, "itemgett": 17, "iter": [6, 13, 15, 29, 44, 70, 80, 93, 96, 109, 112, 115, 118, 120, 121, 123, 124, 125, 146, 158, 161, 164, 176, 177, 205, 212, 245, 246, 251, 254, 267, 270, 276, 299, 301, 302, 307, 317, 327, 329, 330, 339, 380, 382, 386, 388, 389, 393, 394, 404, 410, 413, 415, 417, 419, 422, 438, 441, 442, 444, 446, 448, 449, 450, 453, 455, 460, 462, 463, 464, 472, 473, 479, 483, 484, 485, 516, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 560, 561, 562, 563, 565, 568, 569, 582, 583, 589, 590, 592, 594, 595, 603, 611, 628, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 839, 854, 861, 862, 863, 864, 865, 869, 876, 878, 880, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 920, 941, 942, 948, 949, 950, 951, 959, 983, 989, 990, 992, 993, 996, 997, 998, 1006, 1007, 1008, 1009, 1014, 1015, 1018, 1024, 1028, 1029, 1031, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "iter_minibatch": 6, "iter_offset": 1050, "iter_offset_": 1050, "iterated_pow": [70, 533, 536, 542, 1042], "iterative_impute_scor": 162, "iterativeimput": [160, 162, 163, 164, 228, 400, 491, 566, 581, 629, 630, 631, 640, 646, 673, 827, 848, 866, 1015, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "itergrid": 1038, "itertool": [6, 40, 42, 60, 131, 168, 182, 244, 249, 259, 266, 268, 417], "ith": [497, 775, 779, 841, 862, 863, 878, 879], "ith_cluster_silhouette_valu": 58, "itk": [1046, 1047, 1048], "its": [0, 2, 7, 10, 11, 12, 17, 24, 25, 32, 35, 53, 63, 64, 76, 78, 80, 84, 88, 89, 90, 98, 107, 109, 115, 118, 120, 122, 125, 136, 146, 149, 154, 156, 167, 168, 170, 173, 176, 186, 210, 214, 215, 220, 226, 233, 235, 236, 238, 240, 243, 248, 249, 258, 262, 264, 266, 268, 273, 283, 285, 289, 290, 307, 318, 329, 336, 343, 348, 351, 352, 356, 360, 362, 367, 368, 373, 374, 375, 376, 380, 381, 382, 384, 385, 388, 392, 393, 394, 395, 397, 400, 403, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 426, 441, 443, 445, 447, 451, 455, 457, 461, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 498, 504, 524, 532, 534, 535, 536, 538, 539, 541, 542, 543, 545, 551, 554, 556, 557, 558, 559, 560, 561, 565, 566, 567, 584, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 645, 646, 672, 673, 675, 686, 687, 688, 689, 693, 697, 700, 709, 726, 730, 731, 737, 738, 742, 779, 782, 784, 798, 799, 801, 826, 833, 834, 836, 847, 848, 849, 851, 852, 853, 855, 856, 857, 864, 865, 869, 874, 877, 878, 880, 897, 898, 901, 905, 906, 913, 915, 925, 926, 931, 937, 961, 963, 982, 985, 988, 989, 990, 992, 993, 994, 995, 996, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1013, 1018, 1020, 1022, 1024, 1027, 1028, 1029, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "itself": [22, 25, 47, 53, 109, 122, 126, 168, 181, 195, 233, 239, 253, 268, 283, 312, 339, 352, 366, 368, 379, 380, 382, 384, 394, 400, 403, 407, 408, 410, 421, 441, 442, 445, 446, 447, 470, 471, 472, 473, 474, 475, 476, 477, 528, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 552, 567, 570, 584, 593, 596, 597, 599, 600, 601, 603, 604, 640, 641, 642, 643, 644, 646, 656, 690, 692, 793, 794, 840, 841, 842, 843, 844, 845, 846, 850, 858, 859, 870, 871, 872, 900, 901, 950, 985, 989, 990, 992, 996, 997, 1001, 1013, 1040, 1051], "iv": [166, 993], "ivan": [1044, 1045, 1048, 1051], "ivanllt": 1051, "iver": 1042, "iverson": 989, "ivicajov": 1039, "ivl": 170, "ivt": 535, "iv\u00e1n": [1043, 1049], "iwhalv": 1049, "iwona": 1053, "ix": [9, 268, 345], "iy_j": 1003, "iyer": 1047, "j": [0, 9, 15, 35, 36, 38, 41, 59, 68, 77, 78, 79, 109, 112, 113, 124, 144, 150, 162, 168, 209, 221, 235, 243, 258, 259, 264, 270, 287, 293, 296, 309, 320, 360, 367, 374, 375, 377, 384, 386, 392, 398, 406, 407, 410, 412, 414, 415, 417, 418, 420, 421, 438, 441, 445, 447, 454, 455, 470, 475, 499, 514, 517, 518, 519, 521, 529, 532, 535, 537, 538, 539, 541, 542, 548, 554, 560, 561, 594, 595, 633, 634, 638, 645, 646, 649, 650, 667, 668, 670, 681, 689, 690, 691, 693, 694, 695, 697, 706, 709, 711, 715, 717, 719, 722, 724, 725, 727, 756, 757, 759, 760, 775, 779, 789, 790, 793, 794, 834, 835, 842, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 876, 885, 886, 913, 914, 982, 983, 987, 989, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1011, 1029, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j0rd1smit": 1048, "ja": [413, 1043], "jaccard": [281, 406, 451, 458, 700, 704, 720, 730, 735, 739, 779, 780, 781, 797, 996, 1044, 1045], "jaccard_scor": [281, 704, 730, 735, 797, 993, 1045, 1048], "jaccard_similarity_scor": [1038, 1040, 1045], "jaccarddist": 700, "jack": [1038, 1041, 1049, 1050, 1051, 1052], "jacklangerman": [1044, 1045], "jackman": 1037, "jackmartin": 1042, "jackson": [1042, 1043, 1045], "jacob": [0, 399, 1041, 1042, 1043], "jacobi": 1051, "jacobsen": 1039, "jacopo": [1044, 1045], "jacqu": [1037, 1039], "jaehong": 1046, "jaehyun": 1048, "jaewon": 1044, "jai": [1046, 1050], "jaidev": 1041, "jaim": 1046, "jain": [1042, 1043, 1044, 1048, 1050, 1051], "jair": 1043, "jake": [0, 9, 156, 198, 218, 246, 288, 296, 399, 1012, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1050], "jakemick": 1038, "jakevdp": [288, 296], "jakhar": 1048, "jakirkham": [1043, 1044, 1045, 1051, 1052], "jakub": 1053, "jakubek": [1049, 1050], "jalali": [0, 63, 347, 395, 398, 403, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "jalexand3r": 1050, "jamaoui": [1044, 1045, 1048], "jame": [0, 377, 414, 835, 994, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053], "jamestwebb": [1038, 1039], "jami": 1044, "jamieson": 982, "jan": [0, 22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 198, 232, 278, 398, 884, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1052], "jana": 1046, "janet": 377, "jane\u017e": [1037, 1038], "janfidor": [1051, 1052], "janhang": 1046, "janin": 1043, "janna": 1042, "jannik": 1049, "janso": 1036, "jansson": [1039, 1051], "januari": [378, 380, 1036, 1037, 1046, 1048, 1051, 1053], "janvanrijn": [1044, 1045], "jaqu": [0, 29, 43, 49, 51, 71, 87, 88, 180, 193, 194, 195, 220, 344, 346, 399, 1036, 1037, 1038, 1039], "jardim": 1049, "jare": 1051, "jarfa": 1042, "jarir": 1049, "jarkko": 697, "jarosch": 1038, "jaroslaw": 1043, "jarrod": [0, 399, 1045, 1052, 1053], "jarvelin": [727, 757, 993], "jaskowiak": 447, "jason": [3, 415, 536, 901, 1042, 1044, 1048, 1051], "jatin": [1040, 1042], "jauhar": 1050, "jauvin": 1037, "java": [410, 443, 1013], "javascript": 1013, "javier": 1040, "jawahar": 985, "jax": 1053, "jay": 1043, "jaya": 1050, "jayaratn": [1047, 1048, 1051, 1052], "jayratn": 1048, "jayzed82": 1043, "jb": [1052, 1053], "jbdelafoss": 1043, "jbirch": [410, 443], "jblackburn": 1042, "jc": [1043, 1044], "jdcaballero": 1040, "jdethuren": [1044, 1045], "je": 1050, "jean": [1036, 1039, 1040, 1041, 1042, 1043, 1049], "jeann": 1050, "jeanselm": 1046, "jeb": 1044, "jeevan": 1048, "jeff": [1040, 1042, 1049, 1050], "jeffrei": [1039, 1042], "jeffrey04": [1041, 1042], "jelfner": 1050, "jell": 1039, "jen": [659, 1044], "jen09": 415, "jenatton": 415, "jenni": 1050, "jennif": 1049, "jensen": [1042, 1048], "jeong": 1046, "jeremi": [1018, 1041, 1042, 1043, 1044, 1047, 1048], "jeremiedbb": [1044, 1045, 1046], "jeremynixon": 1042, "jeroen": 1042, "jeroenpeterbo": 1048, "jeroko": 1043, "jeromedock": 1046, "jerphanion": [0, 398, 1048, 1049, 1050, 1051, 1052, 1053], "jerryzhu": 900, "jesper": 1046, "jess": [836, 994, 1049], "jess010": 1039, "jessica": 1042, "jessicakk0711": 1052, "jesu": [17, 351, 352], "jet": 65, "jevnik": 1041, "jewalikar": 1042, "jf": 1045, "jfraj": 1041, "jha": [1040, 1046, 1050], "jhay": 1048, "jhm": [22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232], "jhun": 475, "jia": 1042, "jiacheng": 1043, "jiali": 1041, "jian": 410, "jianbo": [410, 453, 463, 692], "jiang": [407, 1040, 1047], "jianzhu": 1049, "jiawei": [1052, 1053, 1054], "jiaxiang": 1048, "jie": [1044, 1045, 1048], "jiefangxuanyan": 1049, "jigna": 1048, "jihan": 1050, "jill": 1042, "jim": 1038, "jim0421": 1048, "jimenez": [1049, 1050], "jimmi": [862, 863, 997, 1042, 1044], "jim\u00e9nez": [0, 370, 1044, 1047, 1048, 1049, 1050, 1051], "jin": [640, 1047, 1048], "jindal": 1048, "jinkun": 1044, "jiongyan": 1044, "jiquan": 997, "jirka": 1050, "jiten": 1051, "jitendra": [410, 453, 463, 692], "jitter": [109, 651, 655, 1047], "jiyuan": 1042, "jjabl": 1044, "jjmistri": 1047, "jk": 990, "jkarolczak": 1051, "jkleint": [1043, 1044], "jl": [230, 898], "jmlr": [0, 410, 667, 668, 677, 705, 989, 1008], "jmlr_2014": 693, "jmontoyam": 1043, "jnboehm": 1049, "jnt": 414, "joaak": [1044, 1045], "joan": [1043, 1044, 1045, 1046], "joanna": 1046, "joaquin": 1048, "job": [117, 125, 167, 246, 253, 380, 384, 388, 417, 421, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 469, 473, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 603, 608, 609, 611, 635, 640, 658, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 864, 867, 900, 901, 903, 959, 1018, 1022], "joblib": [40, 52, 70, 115, 283, 316, 375, 378, 380, 383, 389, 392, 394, 397, 402, 408, 411, 421, 438, 442, 445, 446, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 509, 510, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 864, 865, 866, 867, 900, 901, 959, 960, 961, 963, 978, 993, 1014, 1031, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1051, 1053, 1054], "joblib_start_method": 392, "jochen": 1038, "jock": 68, "joe": 1041, "joei": 1052, "joel": [0, 70, 395, 398, 418, 536, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "johann": [1038, 1039, 1044, 1046, 1047, 1050], "johanna": 79, "johannah": 1042, "johanwork": 1049, "john": [377, 418, 537, 709, 736, 770, 880, 907, 908, 910, 911, 983, 989, 993, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052, 1053], "johnathanpi": [1051, 1052], "johnson": [53, 164, 225, 241, 305, 309, 372, 408, 490, 503, 881, 893, 897, 898, 899, 1003, 1010, 1015, 1031, 1044, 1050, 1052], "johnson_lindenstrauss_min_dim": [230, 1005, 1037], "johnston": [146, 377, 989, 1045], "johnstott": 1044, "johnthagen": 1051, "johnwon": 309, "join": [9, 10, 17, 53, 161, 215, 259, 307, 375, 395, 464, 1017, 1029, 1036, 1044], "joint": [122, 164, 168, 175, 181, 183, 184, 185, 186, 196, 216, 218, 253, 411, 612, 653, 663, 693, 840, 841, 842, 843, 844, 905, 989, 990, 994, 998, 1000, 1004, 1015, 1036], "jointli": [191, 266, 408, 410, 415, 989], "joli": [0, 399, 1037, 1038, 1039, 1040, 1041, 1042], "jon": [351, 1043, 1046, 1047, 1049, 1050, 1053], "jona": [103, 1048, 1053], "jonatan": 1044, "jonathan": [375, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052], "joncral": 1042, "jone": [0, 375, 399, 1036], "jong": 1043, "joona": 1036, "jordal": 1042, "jordan": [410, 415, 692, 798, 1046, 1047, 1050, 1051], "jordi": 1042, "jorg": [659, 1039, 1048, 1050], "jori": [0, 398, 1043, 1044, 1045, 1048, 1049], "jose": [146, 377, 659, 993, 1044, 1046], "joseph": [1039, 1040, 1041, 1042, 1048, 1050, 1051], "josephsalmon": [1043, 1044, 1045], "josh": [418, 1043], "joshi": [1042, 1044, 1050, 1053, 1054], "joshua": [320, 375, 1038, 1039, 1041, 1042, 1048, 1051, 1052], "joshuakennethjon": 1045, "jos\u00e9": [724, 1039, 1049], "jotasi": 1044, "joudet": [1043, 1044], "journal": [0, 79, 168, 259, 265, 278, 374, 375, 377, 407, 410, 412, 417, 453, 463, 474, 535, 542, 628, 636, 646, 690, 693, 694, 706, 716, 732, 735, 736, 759, 760, 787, 830, 835, 881, 893, 982, 983, 987, 989, 990, 991, 994, 1000, 1005, 1007, 1008], "jovan": [1050, 1051], "joydeep": 410, "jo\u00e3o": 1051, "jo\u00ebl": 1044, "jpeg": [374, 375, 494, 495], "jpfrancoia": [1042, 1043], "jpg": [46, 507, 585, 588], "jpm": 10, "jpmml": 1013, "jpmorgan": [10, 1018], "jr": 989, "jrenni": 842, "jrfiedler": 1042, "jschendel": [1043, 1044], "jschuerz": 1050, "json": [374, 380, 397], "jth": [775, 779], "juan": [0, 370, 1036, 1047, 1048, 1049, 1050, 1051], "juanfe88": 1051, "judg": [56, 203, 410, 1024], "judgment": [249, 993], "judithabk6": 1047, "juergen": [1046, 1051], "jul": 268, "juli": [146, 377, 419, 735, 886, 1003, 1039, 1043, 1044, 1045], "julia": [410, 718, 738, 796], "julian": [1043, 1044, 1054], "juliankahnert": 1042, "juliaschoepp": [1051, 1052], "juliathebrav": 1042, "julien": [0, 398, 659, 989, 1018, 1036, 1039, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "juliet": 1044, "julietcl": 1044, "julio": 1049, "julyrashchenko": 1049, "jumon": 1047, "jump": [2, 198, 305, 377, 380, 418, 884], "jumpi": 418, "june": [410, 990, 1042, 1052], "jung": [1043, 1047, 1051], "jungkook": 1041, "jungl": 990, "jupyt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 381, 382, 411, 469, 903, 1009, 1013, 1014, 1047, 1050], "jupyterlit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "jurgen": 1018, "juri": 567, "jurman": 744, "just": [2, 11, 29, 68, 84, 93, 115, 119, 125, 146, 187, 194, 219, 231, 253, 259, 266, 270, 283, 299, 339, 351, 352, 360, 362, 375, 379, 380, 381, 382, 384, 385, 388, 392, 393, 394, 406, 409, 410, 411, 414, 417, 419, 422, 469, 534, 536, 543, 547, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 580, 585, 611, 612, 647, 653, 658, 659, 661, 663, 667, 668, 669, 677, 678, 679, 807, 824, 854, 862, 863, 982, 989, 992, 993, 994, 997, 1001, 1003, 1007, 1014, 1027, 1036, 1040, 1042, 1044, 1048, 1052], "justglow": 1045, "justif": 677, "justifi": [380, 386, 407, 566], "justin": [1038, 1044, 1048], "jvm": 1049, "jygerardi": [1051, 1052], "j\u00e9r\u00e9mie": [0, 398, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "j\u00e9r\u00f4me": [1045, 1046, 1047, 1053, 1054], "j\u00eann": 1042, "j\u00f6rg": [410, 451, 458, 1044], "j\u00f6rn": 1043, "j\u00f8rgensen": [989, 1053], "k": [4, 9, 10, 13, 15, 17, 22, 24, 28, 29, 34, 35, 36, 38, 40, 44, 47, 48, 51, 53, 54, 58, 61, 63, 66, 72, 73, 78, 88, 89, 90, 93, 96, 99, 100, 109, 111, 118, 122, 126, 128, 129, 131, 132, 136, 138, 142, 143, 146, 150, 152, 153, 157, 158, 162, 164, 167, 168, 169, 170, 177, 179, 180, 182, 191, 194, 199, 201, 209, 211, 230, 232, 234, 235, 236, 243, 246, 255, 259, 262, 263, 268, 269, 272, 273, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 306, 307, 308, 309, 312, 315, 319, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 350, 351, 353, 354, 360, 362, 367, 374, 375, 377, 380, 388, 389, 392, 394, 400, 405, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 460, 461, 463, 470, 473, 489, 503, 505, 507, 513, 524, 532, 538, 542, 545, 546, 547, 550, 551, 554, 556, 558, 559, 560, 582, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 632, 640, 641, 649, 651, 652, 654, 655, 656, 657, 659, 660, 664, 665, 666, 667, 668, 670, 680, 681, 683, 684, 685, 686, 687, 689, 692, 696, 697, 705, 706, 709, 718, 727, 738, 744, 757, 759, 760, 762, 767, 770, 775, 776, 777, 778, 780, 794, 795, 796, 798, 799, 802, 806, 808, 809, 810, 813, 816, 817, 819, 820, 822, 823, 829, 840, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 866, 870, 871, 872, 876, 877, 878, 880, 881, 885, 893, 898, 912, 920, 928, 937, 942, 967, 982, 983, 985, 986, 987, 989, 990, 991, 992, 995, 997, 998, 999, 1001, 1006, 1007, 1008, 1009, 1013, 1015, 1024, 1030, 1031, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "k0": 987, "k1": [420, 622, 625], "k1__": 420, "k1__constant_valu": 153, "k1__k1": 420, "k1__k1__constant_valu": 420, "k1__k1__constant_value_bound": 420, "k1__k2": 420, "k1__k2__length_scal": [155, 420], "k1__k2__length_scale_bound": 420, "k2": [420, 622, 625], "k2__": 420, "k2__length_scal": 420, "k2__length_scale_bound": 420, "k_": [406, 420, 617, 620, 622, 625, 775, 985, 1003], "k_1": [420, 622, 625], "k_2": [420, 622, 625], "k_best": [593, 902, 1006, 1053], "k_diag": [613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "k_fit_all_": 871, "k_fit_rows_": 871, "k_fold": [136, 1024], "k_gradient": [613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626], "k_init": [444, 460], "k_mean": [62, 389, 394, 1028, 1044, 1052], "k_means_cluster_cent": 62, "k_means_elkan": 1044, "k_means_iris_3": 43, "k_means_iris_8": 43, "k_means_iris_bad_init": 43, "k_means_label": 62, "k_new": 871, "k_ret": [845, 846], "k_true": [845, 846], "ka00ri": [1051, 1052], "kachaiev": 1053, "kaczmarzyk": 1053, "kadatatlu": 1049, "kadota": 1050, "kaggl": [130, 393], "kahni": 1048, "kai": [377, 564, 999, 1043], "kaicheng": 1040, "kaichogami": 1042, "kailasa": [1050, 1051], "kaim": [862, 863], "kaiser": [415, 533], "kakati": 1051, "kalli": [1044, 1045], "kalyan": 1042, "kamalakerdadi": [1041, 1042], "kamar": 1044, "kamchyev": 1053, "kamel": 1036, "kamishima": [1042, 1043], "kamm": 993, "kanai": [1042, 1043, 1044], "kanazu": [1051, 1052], "kang": [1044, 1046], "kania": [1051, 1052], "kanika": 1046, "kanishk": 1051, "kanissh": 1051, "kanji": 1049, "kanniah": [1039, 1040], "kansal": 1042, "kapadni": 1051, "kapeln": [168, 1000], "kapoor": [1044, 1045], "kappa": [537, 717], "kapur": 1043, "kar": 1042, "karan": [1043, 1044, 1045], "karayev": 1038, "karbownik": 1049, "karen": 1049, "karger": [842, 995], "karhunen": 535, "karin": [628, 983], "karl": 1044, "karlo": [1053, 1054], "karnofski": 1043, "karnowski": 1048, "karol": 1039, "kartik": 1048, "karypi": 410, "kaseorg": 1046, "kashif": 1041, "kasim": 1040, "kaski": 697, "kasper": 1044, "kassa": [1051, 1052], "kastner": [0, 97, 399, 1038, 1039, 1040, 1047, 1048], "kat": 1043, "kataev": [1044, 1045], "kataki": [721, 735, 741, 993], "katarina": [1046, 1048], "katheleen": 374, "kathi": [1043, 1046], "kathleen": 1043, "kathryn": 1047, "kati": 1043, "katotten": 1050, "katrin": [1044, 1045], "katrina": [123, 1047], "katriopla": 1044, "katyal": 1046, "katz": [1041, 1048, 1049], "kaufmann": [1005, 1009, 1048], "kaushik": [1043, 1050, 1051, 1052, 1054], "kaushik94": 1039, "kawamura": 1049, "kawwa": 1049, "kayawari": 1049, "kaylani2": 1048, "kaynak": 377, "kazmar": 1040, "kb": [69, 167, 168, 253], "kbest": [70, 593], "kbin": [312, 320], "kbinsdiscret": [2, 51, 73, 90, 164, 177, 197, 215, 237, 293, 304, 307, 312, 313, 320, 358, 513, 658, 868, 884, 914, 1003, 1015, 1044, 1048, 1049, 1050, 1052, 1054], "kbinsdiscretizer__n_bin": 307, "kcachegrind": 383, "kd": [288, 410, 416, 996, 1044, 1045, 1046], "kd_tree": [421, 445, 447, 451, 458, 689, 690, 847, 848, 849, 850, 851, 853, 855, 856, 857, 996, 1049, 1053], "kdd": [173, 375, 407, 438, 1005], "kdd06_rp": 898, "kddcup": [236, 373, 493, 1031], "kddcup99": [375, 493], "kde": [166, 167, 273, 278, 287, 288, 296, 416, 850], "kdt": 996, "kdtree": [447, 451, 458, 689, 690, 845, 847, 848, 849, 850, 851, 853, 855, 856, 857, 1038, 1040, 1044, 1048, 1049, 1052, 1053], "ke": [417, 1047, 1048], "kearn": 1039, "keat": [1051, 1052], "keep": [0, 4, 11, 25, 40, 73, 96, 98, 115, 125, 145, 161, 166, 167, 168, 169, 170, 181, 197, 198, 199, 205, 215, 248, 254, 257, 309, 310, 318, 327, 339, 351, 352, 356, 362, 366, 367, 372, 380, 384, 393, 394, 407, 410, 411, 412, 413, 414, 415, 433, 451, 466, 483, 484, 485, 486, 494, 495, 535, 541, 542, 545, 548, 555, 557, 559, 561, 563, 566, 569, 571, 596, 599, 601, 604, 612, 635, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 678, 679, 680, 709, 819, 838, 839, 848, 856, 862, 863, 901, 906, 908, 911, 914, 916, 989, 994, 998, 1001, 1003, 1014, 1017, 1018, 1020, 1025, 1027, 1029, 1031, 1036, 1041, 1044, 1045, 1049, 1050, 1052, 1054], "keep_empty_featur": [628, 629, 631, 983, 1051], "keerti": 1051, "kegl": [22, 1040], "kei": [6, 8, 11, 15, 17, 40, 115, 119, 130, 161, 166, 215, 233, 236, 239, 260, 262, 263, 316, 317, 318, 319, 320, 321, 322, 323, 368, 373, 382, 385, 386, 387, 392, 394, 395, 397, 400, 410, 411, 414, 420, 465, 473, 562, 563, 568, 569, 570, 571, 589, 592, 595, 618, 627, 633, 635, 660, 712, 801, 804, 805, 813, 815, 823, 828, 864, 865, 920, 930, 958, 1001, 1014, 1029, 1031, 1033, 1042, 1048, 1049, 1051, 1052, 1054], "keith": [351, 1036, 1041], "kekalainen": [727, 757, 993], "kelkar": [1043, 1044, 1046], "kelleh": [709, 993], "kelleher2015": 993, "kellei": [375, 1038, 1039], "keller": 1048, "kellogg": 10, "kellycarmodi": 1046, "kemal": [0, 18, 19, 1038, 1039], "kemaleren": [18, 19], "kemenad": 1047, "kemk": 1047, "ken": [377, 1029, 1038, 1045], "ken4git": 1050, "kendal": 1051, "kendrick": 1048, "kennedi": [1043, 1046, 1053], "kennel": 1047, "kenneth": [1005, 1036, 1037, 1042, 1043, 1050, 1051], "kenni": 1048, "kensuk": 1046, "kent": 17, "kenta": 1039, "kento": [1051, 1052], "kept": [25, 248, 283, 346, 374, 384, 403, 420, 497, 536, 539, 541, 542, 548, 598, 611, 612, 620, 621, 645, 696, 798, 799, 926, 1003, 1044, 1045], "kera": [392, 1013], "kerimov": [1043, 1044], "kernal": 98, "kernc": [1036, 1050, 1051], "kernel": [1, 4, 7, 8, 9, 14, 28, 29, 30, 49, 55, 72, 84, 92, 94, 102, 104, 131, 138, 144, 148, 150, 151, 152, 153, 156, 159, 161, 174, 179, 180, 198, 206, 211, 225, 226, 234, 238, 241, 252, 257, 259, 261, 264, 265, 269, 274, 275, 284, 289, 290, 294, 297, 310, 312, 318, 328, 331, 334, 336, 337, 339, 340, 341, 342, 344, 347, 349, 362, 366, 369, 372, 382, 392, 394, 407, 410, 411, 414, 417, 418, 433, 441, 449, 453, 462, 463, 466, 483, 484, 485, 492, 497, 499, 503, 505, 515, 534, 535, 536, 542, 545, 555, 557, 559, 561, 563, 566, 569, 571, 594, 595, 611, 612, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 678, 679, 680, 689, 691, 692, 693, 696, 736, 759, 760, 762, 767, 768, 775, 776, 777, 778, 801, 807, 812, 815, 831, 833, 838, 839, 845, 846, 848, 850, 856, 863, 865, 866, 871, 875, 877, 878, 880, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 914, 916, 982, 988, 989, 990, 993, 994, 996, 999, 1006, 1007, 1015, 1016, 1020, 1024, 1025, 1030, 1031, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 611, 612], "kernel__length_scal": 149, "kernel__period": 149, "kernel_approxim": [2, 161, 164, 172, 173, 174, 211, 226, 231, 317, 369, 678, 759, 760, 871, 985, 1015, 1020, 1037, 1043, 1053], "kernel_dens": [845, 846], "kernel_label": 345, "kernel_metr": [640, 641, 642, 643], "kernel_param": [453, 536, 640, 644], "kernel_pca": [3, 98, 411], "kernel_pca_": 689, "kernel_pca_back_proj_ax": 98, "kernel_pca_proj_ax": 98, "kernel_ridg": [149, 232, 369, 994, 1040], "kernel_ridge_tun": 149, "kernel_svm": 231, "kernel_svm_scor": 231, "kernel_svm_tim": 231, "kernelcenter": [405, 1003, 1046, 1050, 1052, 1053], "kerneldens": [287, 288, 296, 416, 1038, 1044, 1045, 1049, 1050, 1051], "kernelpca": [3, 411, 415, 534, 535, 542, 545, 689, 691, 693, 871, 1003, 1037, 1038, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "kernelridg": [98, 149, 232, 673, 986, 994, 1040, 1053], "kertesz": 1050, "keshat": [667, 668, 989], "keshavan": 1046, "kesshi": [1046, 1047], "kevad": 1046, "kevin": [644, 1038, 1040, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1053], "kevlani": 1044, "keyerror": [920, 1046], "keyword": [351, 374, 380, 382, 385, 387, 394, 410, 421, 424, 439, 445, 446, 451, 453, 458, 465, 468, 497, 504, 536, 539, 541, 560, 561, 568, 569, 570, 571, 621, 629, 632, 633, 640, 644, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 689, 693, 698, 699, 700, 701, 702, 703, 775, 779, 780, 781, 782, 793, 794, 807, 824, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 865, 869, 937, 960, 982, 990, 993, 996, 1006, 1036, 1040, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053, 1054], "kf": [414, 806], "kfold": [52, 115, 121, 136, 254, 264, 362, 414, 438, 473, 568, 569, 595, 603, 648, 652, 654, 656, 662, 664, 666, 674, 801, 804, 805, 807, 809, 811, 815, 820, 822, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 886, 1024, 1037, 1038, 1039, 1041, 1042, 1044, 1046], "khaja": 1051, "khan": [1051, 1052], "khandelw": 1048, "khanduja": 1039, "khant": 1051, "kharsa": 1050, "khedkar": 1050, "khine": 1050, "kho": 1051, "khoo": 1048, "khosasi": 1049, "khosrow": 993, "khoual": 1049, "khwaja": 1051, "ki": 993, "kian": [113, 1041, 1051, 1052, 1053], "kid": 1003, "kieker": [1044, 1045], "kielczewski": [201, 1042], "kie\u00dfl": 1047, "kilian": [418, 1051, 1052], "kill": [351, 392], "killer": [380, 1018], "kilobyt": 51, "kilomet": 765, "kim": [989, 1044, 1045, 1046, 1050], "kimayoung": 1050, "kimberli": 10, "kimbinyi": 1048, "kind": [2, 7, 10, 11, 22, 23, 73, 101, 115, 130, 141, 167, 168, 248, 252, 253, 255, 268, 312, 317, 320, 336, 339, 351, 367, 368, 373, 375, 380, 382, 386, 392, 393, 407, 410, 413, 414, 415, 417, 418, 419, 489, 490, 504, 509, 510, 522, 525, 589, 633, 634, 702, 934, 989, 995, 1000, 1009, 1039, 1048, 1050, 1051, 1052], "kindli": 0, "king": 930, "kingjr": 1042, "kingma": [862, 863, 997], "kink": 186, "kiragu": 1048, "kiran": 1048, "kirandevraj": 1051, "kiril": [1043, 1044, 1046, 1048], "kirkbi": [1043, 1044], "kirkham": [1041, 1042, 1044], "kirthi": 1046, "kishan": 1053, "kishimoto": 1048, "kishor": 1049, "kislovskii": 1053, "kit": 392, "kitchen": [642, 985], "kj": [374, 995], "kjell": 1042, "kk": 993, "kl": [415, 990, 1044], "kl_divergence_": [693, 1043], "klarup": 1043, "klass": 63, "klau": [415, 536, 871], "kleczewski": [281, 1043, 1044], "kleiber": 1050, "klevebr": 1044, "klima": 1051, "klopfer": 1045, "kluge": [1051, 1052], "kluger": [406, 452, 514], "klusacek": 993, "km": [59, 319, 352], "kmatt10": 1049, "kmb": 10, "kmean": [17, 18, 34, 35, 41, 43, 44, 46, 48, 51, 55, 56, 59, 63, 66, 164, 246, 249, 308, 319, 352, 389, 400, 410, 441, 444, 449, 450, 453, 463, 513, 711, 793, 794, 798, 799, 870, 996, 1003, 1014, 1015, 1028, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "kmeans_estim": 93, "kmeans_model": 410, "kmeans_plusplu": [57, 410, 1048, 1053], "kmitl": 236, "kmode": 1013, "kms15": [1044, 1045], "knee": 410, "kneighbor": [310, 319, 847, 848, 849, 851, 853, 996, 1040, 1045, 1049, 1050, 1051, 1052], "kneighbors_graph": [37, 42, 60, 65, 283, 394, 410, 442, 446, 696, 847, 848, 849, 851, 853, 855, 856, 857, 859, 996, 1036, 1040, 1045], "kneighborsclassifi": [29, 131, 137, 285, 286, 291, 292, 310, 317, 319, 351, 417, 603, 848, 852, 853, 854, 855, 856, 994, 996, 1027, 1036, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kneighborsregressor": [161, 235, 295, 319, 417, 571, 847, 853, 855, 856, 994, 996, 1036, 1038, 1040, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kneighborstransform": [283, 285, 315, 693, 857, 996, 1046, 1050, 1051], "knew": 1028, "knight": 311, "knit": 1023, "knn": [112, 131, 137, 161, 286, 291, 292, 295, 310, 317, 328, 351, 417, 603, 854, 900, 901, 996, 1006, 1027, 1042], "knn__weight": 286, "knn_graph": 37, "knn_impute_scor": 162, "knnimput": [162, 315, 628, 631, 983, 1046, 1047, 1050, 1051, 1052, 1053], "knnquerybatch": 283, "knot": [2, 198, 318, 884, 1003, 1049], "know": [51, 64, 143, 146, 149, 158, 167, 215, 233, 234, 253, 259, 278, 281, 319, 326, 346, 352, 366, 380, 392, 400, 403, 410, 413, 414, 415, 418, 501, 505, 511, 647, 653, 659, 660, 727, 757, 801, 815, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 982, 992, 993, 994, 996, 1005, 1042, 1043, 1046, 1048], "knowledg": [55, 117, 125, 167, 214, 236, 253, 259, 273, 369, 375, 380, 383, 386, 393, 394, 410, 414, 417, 421, 445, 512, 556, 557, 564, 721, 737, 741, 784, 834, 993, 994, 1005, 1029, 1054], "known": [9, 15, 23, 25, 37, 47, 55, 56, 79, 101, 102, 130, 154, 156, 162, 181, 197, 198, 215, 226, 253, 259, 261, 268, 292, 296, 306, 318, 323, 326, 336, 343, 352, 368, 375, 377, 378, 380, 383, 388, 392, 394, 405, 406, 407, 410, 411, 412, 413, 414, 415, 417, 418, 420, 439, 464, 483, 485, 499, 509, 510, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 589, 590, 592, 595, 610, 623, 634, 659, 660, 673, 683, 684, 695, 705, 711, 714, 719, 730, 744, 756, 758, 796, 834, 840, 841, 842, 843, 844, 847, 852, 855, 861, 889, 913, 914, 915, 916, 983, 985, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1008, 1009, 1020, 1025, 1027, 1028], "known_val": 628, "knox": 1048, "knp": 628, "knr": 417, "knyazev": [44, 410, 453, 463, 696, 1046, 1049, 1050], "ko": [10, 24, 150], "kobak": [693, 1049], "kobaski": 1049, "kobayashi": [1048, 1049], "kober": 1044, "kobi": 736, "koch": [1038, 1044, 1045, 1047, 1048], "kocot": 1047, "koehler": 1040, "koen": [1044, 1045], "koenker": [724, 989], "koh": [989, 1018], "kohavi": 414, "kohli": 1053, "koi8": 418, "koivunen": 79, "kokhlikyan": [223, 1043, 1044], "koki": 1048, "koko": [1044, 1050, 1051], "kolawol": 1049, "kolganov": 1041, "kolh": 1038, "kolstad": 17, "komey": [1050, 1051], "kommireddi": 1050, "kondratyev": 1050, "kong": 1049, "konstantin": [1041, 1042, 1043], "konstantino": [1044, 1053], "konwar": 1047, "koonc": 1044, "korba": 375, "korean": 1013, "kornel": [201, 1042], "kornev": 1051, "korobko": 1053, "korobov": [1037, 1038, 1039, 1042, 1043], "korolev": 1046, "kosic": 1048, "kosobrodov": 1044, "kossaifi": [1036, 1040, 1041], "kossen": [1051, 1052], "kossori": [1044, 1045], "kostelac": [1051, 1052], "kot271828": 1049, "kothari": 1047, "kotwalia": [1044, 1045], "koumenti": 1051, "koushik": 1050, "koustav": 1053, "kovalevskyi": 1042, "kowalski87": 1039, "koyama": 1050, "kozachenko": [608, 609], "kozynet": [1048, 1050], "kpca": [534, 535, 536, 1030, 1031, 1036], "kr": [232, 259, 1050], "kr_fit": 232, "kr_predict": 232, "kraig": 1051, "kranthi": 1050, "kranz": 1018, "kraskov": [608, 609], "krasouli": [1043, 1044, 1045, 1046, 1048, 1049], "kratzwald": 1042, "krawczyk": 1050, "krawutschk": [1051, 1052], "krell": [1040, 1042], "kriegel": [410, 421, 445, 451, 458, 851, 999], "krinitsyn": 1044, "krishna": [1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "krishnachaitanya9": 1047, "krishnakalyan3": 1042, "krishnan": 1046, "krivich": [1042, 1043, 1045], "kronovet": 1041, "krr": [232, 644, 986], "krsto": 1054, "krum": [1048, 1050], "krumetoft": 1050, "krump": 1041, "kruskal": [636, 691, 695, 990], "krzeminski": 1043, "krzysztof": 374, "ksemb": 1044, "kshitij": [1051, 1052, 1054], "ksvd": [665, 686, 687, 989], "ksvm": 173, "ksvm_score": 173, "ksvm_time": 173, "kth": [17, 822], "ku": [1040, 1041], "kuai": [1044, 1045], "kubin": 1047, "kuhlmann": [1043, 1044], "kulbear": 1045, "kulkarni": 1044, "kull": [407, 993], "kullback": [13, 218, 415, 539, 541, 548, 693, 990, 1043], "kulsinski": [451, 458, 700, 779, 780, 781], "kulsinskidist": [700, 1052], "kumar": [0, 40, 146, 179, 375, 399, 410, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kumaresshan": [1044, 1045, 1048], "kumawat": 1050, "kund": [1052, 1053], "kunj": 1049, "kuno": 1054, "kuo": 1040, "kurumeyuta": 1049, "kurz": [1050, 1051], "kusanagi": [1047, 1049], "kusanagi2": 1048, "kushal": [1044, 1045], "kushan": [107, 1053], "kushansharma1": 107, "kushwah": [1052, 1053], "kushwaha": 1048, "kusterl": 1046, "kuth": 1042, "kvam": [1037, 1039], "kvle": 1042, "kw_arg": [114, 869, 1003, 1042], "kwarg": [39, 96, 233, 382, 387, 424, 428, 432, 439, 443, 449, 451, 465, 470, 536, 539, 541, 564, 618, 632, 647, 648, 653, 654, 661, 662, 663, 664, 678, 682, 685, 699, 700, 701, 703, 743, 845, 846, 864, 865, 869, 909, 920, 953, 961, 1043, 1047, 1049, 1053], "kwd": [629, 772, 775, 779, 782, 793, 794], "kwei": [13, 1039, 1040, 1041, 1042, 1043], "kxytim": 1049, "kybernetika": 377, "kye": 1044, "kyeongpil": 1044, "kyle": [0, 97, 399, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048], "kyledrogo": 1044, "kyler": 1041, "k\u00e4rkk\u00e4inen": 989, "l": [0, 5, 12, 15, 38, 44, 45, 64, 65, 79, 112, 146, 169, 189, 192, 201, 206, 207, 264, 265, 266, 278, 300, 309, 346, 377, 378, 386, 388, 406, 407, 410, 414, 415, 417, 420, 475, 517, 518, 519, 539, 541, 548, 556, 557, 558, 559, 566, 567, 591, 608, 609, 611, 612, 616, 620, 623, 624, 635, 649, 650, 659, 670, 673, 675, 681, 688, 690, 693, 694, 706, 716, 726, 727, 732, 757, 787, 842, 876, 913, 914, 915, 916, 982, 987, 989, 990, 993, 995, 996, 997, 1001, 1005, 1007, 1009, 1028, 1039, 1044, 1048, 1049, 1050, 1051, 1053], "l1": [1, 5, 14, 15, 28, 38, 64, 80, 83, 164, 166, 175, 176, 182, 183, 184, 185, 186, 191, 192, 201, 202, 208, 212, 216, 228, 260, 283, 301, 318, 389, 392, 408, 410, 412, 415, 442, 446, 451, 458, 465, 470, 471, 472, 473, 474, 475, 476, 477, 479, 497, 503, 505, 532, 538, 539, 540, 541, 543, 544, 548, 549, 559, 566, 590, 591, 592, 598, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 673, 677, 678, 679, 680, 682, 689, 736, 763, 769, 774, 779, 780, 781, 786, 815, 822, 831, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 877, 885, 892, 905, 906, 912, 914, 916, 928, 975, 989, 991, 993, 996, 1003, 1007, 1008, 1009, 1015, 1027, 1041, 1043, 1049, 1052], "l1_color": 208, "l1_contour": 208, "l1_distanc": 1036, "l1_min_c": [190, 989, 1008, 1036], "l1_plot": 213, "l1_ratio": [5, 8, 13, 181, 182, 188, 267, 272, 366, 392, 415, 539, 541, 548, 647, 648, 653, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 989, 1007, 1037, 1039, 1041, 1048, 1050], "l1_ratio_": [648, 660, 662], "l1_ratios_": 660, "l2": [12, 28, 38, 80, 83, 164, 166, 167, 175, 176, 181, 182, 188, 190, 192, 193, 197, 202, 208, 212, 213, 215, 216, 260, 272, 283, 305, 312, 330, 351, 352, 382, 389, 392, 410, 412, 415, 417, 418, 442, 446, 451, 458, 525, 539, 541, 548, 559, 562, 563, 566, 590, 591, 592, 644, 647, 648, 649, 650, 653, 658, 659, 660, 661, 662, 663, 664, 669, 670, 673, 677, 679, 681, 682, 687, 688, 689, 736, 751, 762, 763, 779, 780, 781, 815, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 877, 885, 892, 905, 906, 910, 911, 912, 914, 916, 976, 982, 986, 989, 991, 996, 997, 1003, 1007, 1009, 1015, 1027, 1029, 1038, 1040, 1041, 1043, 1045], "l2014": 417, "l2_color": 208, "l2_contour": 208, "l2_regular": [318, 417, 562, 563], "l_": [406, 612, 653, 742, 993], "l_i": 1003, "l_inf": 15, "l_m": 417, "l_p": [451, 458, 689, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859], "l_x": 12, "la": [0, 189, 205, 283, 285, 307, 308, 311, 377, 398, 1018, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "lab": [0, 375, 469, 537, 903, 1018, 1047], "label": [2, 4, 5, 7, 9, 10, 11, 12, 18, 22, 23, 24, 25, 28, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 53, 54, 56, 58, 61, 62, 63, 64, 65, 71, 73, 76, 77, 78, 79, 83, 84, 87, 89, 90, 95, 97, 99, 100, 101, 102, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 142, 144, 149, 150, 154, 155, 156, 157, 158, 161, 164, 167, 170, 173, 176, 177, 179, 180, 181, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 211, 212, 214, 215, 219, 220, 221, 226, 231, 232, 234, 235, 236, 237, 245, 252, 253, 254, 257, 258, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 274, 281, 288, 290, 292, 295, 300, 302, 305, 306, 310, 315, 316, 319, 322, 325, 329, 330, 331, 332, 341, 343, 345, 346, 351, 352, 356, 357, 358, 359, 368, 372, 373, 374, 379, 380, 382, 385, 389, 394, 395, 406, 407, 409, 420, 421, 427, 428, 432, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 463, 466, 470, 488, 489, 490, 494, 495, 496, 497, 503, 504, 509, 510, 513, 515, 516, 520, 523, 524, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 571, 593, 594, 595, 596, 597, 599, 600, 601, 605, 606, 607, 610, 611, 632, 659, 660, 667, 668, 669, 674, 675, 676, 677, 678, 679, 698, 699, 701, 703, 704, 705, 706, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 723, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 755, 756, 757, 758, 783, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 854, 855, 862, 863, 865, 869, 872, 873, 876, 878, 879, 886, 889, 900, 901, 902, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 925, 930, 931, 956, 957, 964, 982, 989, 990, 994, 995, 996, 997, 999, 1000, 1003, 1007, 1008, 1009, 1013, 1015, 1016, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "label1": 394, "label2": 394, "label_a": 268, "label_b": 268, "label_binar": [266, 268, 872, 1040], "label_binarizer_": 834, "label_distributions_": [326, 327, 900, 901, 1047], "label_im": 64, "label_out": 41, "label_pr": [718, 737, 738, 756, 758, 796], "label_prop_model": [900, 901], "label_propag": 1037, "label_ranking_average_precision_scor": [993, 1040, 1044, 1045, 1051], "label_ranking_loss": [993, 1041], "label_spread": 328, "label_tru": [705, 718, 738, 756, 758, 796], "labelbinar": [268, 394, 723, 742, 834, 869, 878, 886, 889, 994, 1020, 1039, 1040, 1041, 1045, 1050], "labelbottom": [133, 259], "labeled_iter_": [329, 902], "labelencod": [394, 570, 879, 1004, 1036, 1044, 1051, 1052, 1055], "labelkfold": [1041, 1042], "labelleft": 243, "labelpad": 259, "labelpropag": [319, 328, 901, 902, 994, 1006, 1037, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1052], "labels": [13, 309], "labels_": [36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 50, 53, 56, 59, 60, 61, 63, 65, 319, 321, 352, 380, 394, 410, 428, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 711, 1028, 1041], "labels_050": 63, "labels_200": 63, "labels_a": 35, "labels_b": 35, "labels_pr": [410, 705, 706, 715, 716, 718, 732, 737, 738, 756, 758, 787, 796], "labels_random": 46, "labels_tru": [36, 47, 53, 62, 410, 705, 706, 715, 716, 718, 732, 737, 738, 756, 758, 787, 796], "labels_uniqu": 61, "labelshufflesplit": [1041, 1042], "labelspread": [319, 326, 327, 328, 330, 331, 900, 902, 994, 1006, 1037, 1042, 1043, 1046, 1047, 1050, 1051, 1052], "labelspreadingifittedlabelspread": 328, "labex": 0, "labl": 125, "laboratori": [375, 1013], "lacchia": 1043, "lack": [2, 25, 343, 380, 382, 392, 414, 830, 920, 1008, 1050], "lacost": [659, 989], "lacouth": 1049, "lacrosse91": 1049, "lad": 1049, "lag": [1, 2, 14, 122, 125, 164, 197, 199, 215, 497, 563, 702, 743, 746, 747, 749, 791, 822, 827, 828, 831, 1015], "lagacheri": 1040, "lagard": 1039, "lagat": 1046, "lagged_count_": 11, "lagged_count_1d": 11, "lagged_count_1d_1h": 11, "lagged_count_7d": 11, "lagged_count_7d_1h": 11, "lagged_df": 11, "lagged_max_24h": 11, "lagged_max_7d": 11, "lagged_mean_24h": 11, "lagged_mean_7d": 11, "lagged_min_24h": 11, "lagged_min_7d": 11, "lai": [10, 310, 343, 999], "laid": [0, 166, 380], "lakhotia": [1046, 1047], "lakshmi": 1046, "lakshmikanth": 1043, "lakshya": [1044, 1045, 1046], "lal": 901, "lalliacqua": [1046, 1049], "lam": [316, 317, 1047, 1054], "lama": 495, "lamb": [1041, 1049], "lambda": [2, 5, 6, 8, 17, 54, 121, 177, 215, 259, 260, 309, 330, 403, 405, 410, 415, 417, 418, 645, 646, 647, 648, 869, 881, 985, 989, 1003, 1024, 1044, 1050], "lambda_": [177, 645, 646, 881, 989, 1043], "lambda_1": [645, 646, 989], "lambda_2": [645, 646, 989], "lambda_i": [989, 1003], "lambda_init": [176, 177, 646, 989, 1046], "lambdas_": [309, 881, 1049, 1052], "lami": 1044, "lamond": 1040, "lamp": 1018, "lamu": 1042, "lan": [659, 1051, 1052], "land": [9, 296, 395, 417], "land_mask": 296, "land_refer": [9, 296], "landeau": 1053, "landmark": [882, 894, 1003], "landscap": 150, "lane": 1042, "lang": 1029, "langford": [418, 689, 990], "langl": [985, 993, 1007, 1008], "languag": [0, 353, 385, 415, 418, 1007, 1013, 1014, 1018, 1021], "language_level": 381, "lanigan": [310, 1043], "lanl": 15, "lannuzel": 1048, "lanterni": 1050, "lanzani": 1042, "lapack": [366, 367, 378, 533, 536, 542, 689, 1051], "lapack_lit": 386, "lapack_svd_driv": 1051, "laplac": [150, 420, 611, 612, 840, 841, 842, 844, 995], "laplacian": [218, 372, 406, 441, 453, 463, 621, 640, 644, 692, 696, 766, 767, 775, 901, 989, 990, 1006, 1031, 1037, 1042], "laplacian_kernel": [766, 991, 1041], "laptop": [11, 388, 469, 903, 1050, 1051, 1052], "lar": [0, 13, 96, 146, 164, 167, 175, 182, 183, 186, 190, 191, 202, 216, 272, 351, 352, 353, 377, 399, 472, 473, 479, 502, 532, 538, 540, 543, 544, 546, 547, 549, 652, 653, 654, 655, 656, 657, 664, 665, 666, 679, 683, 684, 685, 686, 687, 994, 1015, 1016, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049], "laradji": [0, 299, 1042], "larg": [0, 2, 10, 11, 12, 19, 24, 25, 35, 37, 41, 45, 47, 48, 50, 51, 53, 71, 73, 93, 97, 112, 114, 115, 122, 125, 126, 128, 142, 154, 155, 169, 170, 176, 177, 186, 188, 197, 199, 201, 202, 203, 215, 231, 236, 253, 256, 262, 265, 268, 285, 292, 301, 305, 307, 318, 319, 322, 323, 339, 344, 346, 352, 353, 366, 375, 380, 386, 389, 392, 393, 394, 397, 403, 408, 410, 412, 414, 415, 416, 417, 419, 421, 423, 443, 445, 447, 448, 451, 452, 453, 454, 459, 463, 474, 476, 500, 515, 535, 537, 539, 541, 542, 545, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 583, 590, 635, 642, 644, 647, 648, 651, 653, 654, 655, 658, 659, 660, 665, 672, 673, 675, 678, 680, 686, 688, 690, 692, 693, 694, 696, 747, 780, 781, 801, 809, 811, 815, 819, 830, 840, 841, 842, 843, 844, 845, 846, 851, 862, 863, 870, 874, 875, 883, 885, 897, 898, 905, 906, 910, 911, 913, 914, 915, 916, 941, 942, 982, 985, 987, 989, 990, 992, 995, 996, 997, 1001, 1003, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1025, 1027, 1028, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "larger": [2, 5, 25, 35, 37, 40, 45, 53, 78, 80, 90, 102, 112, 123, 125, 150, 155, 156, 162, 167, 168, 173, 177, 181, 212, 213, 214, 223, 230, 232, 243, 249, 253, 260, 262, 268, 269, 278, 283, 285, 299, 300, 302, 305, 339, 343, 352, 353, 373, 375, 380, 386, 394, 406, 407, 410, 411, 412, 414, 415, 417, 418, 420, 441, 444, 450, 451, 453, 455, 457, 516, 528, 542, 545, 562, 563, 564, 568, 569, 583, 590, 644, 653, 673, 674, 675, 676, 680, 688, 693, 705, 720, 737, 798, 850, 851, 882, 884, 885, 886, 894, 899, 941, 942, 964, 967, 985, 986, 989, 990, 992, 993, 996, 997, 1001, 1003, 1007, 1008, 1027, 1029, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1053, 1054], "largest": [80, 95, 115, 146, 199, 377, 410, 412, 415, 444, 528, 542, 558, 559, 560, 561, 565, 566, 589, 710, 798, 799, 820, 843, 875, 913, 914, 915, 916, 942, 990, 993, 1003, 1008, 1009], "largest_clust": [410, 444], "largest_coef": [80, 528], "larrald": 1053, "lars_path": [184, 389, 532, 538, 540, 543, 544, 546, 547, 549, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 684, 685, 686, 687, 989, 1036, 1038, 1041, 1045, 1047], "lars_path_gram": [683, 989, 1045], "larscv": [400, 651, 666, 683, 684, 1043, 1049, 1053], "larson": [1041, 1045, 1046, 1048, 1050], "larsson": [1048, 1049, 1050], "lasagna": 1042, "laserjet": 1029, "laska": 1042, "lasso": [1, 14, 15, 64, 102, 130, 136, 164, 167, 175, 178, 188, 190, 196, 202, 205, 208, 216, 230, 248, 272, 318, 322, 346, 366, 392, 412, 413, 415, 417, 418, 419, 472, 473, 479, 502, 525, 532, 538, 540, 543, 544, 546, 547, 549, 598, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 671, 673, 679, 682, 683, 684, 685, 686, 687, 722, 724, 725, 826, 827, 828, 866, 885, 982, 993, 994, 1007, 1015, 1016, 1024, 1027, 1031, 1036, 1040, 1041, 1042, 1044, 1045, 1047, 1049, 1050, 1054], "lasso_cd": [532, 538, 543, 549], "lasso_cv": 136, "lasso_lar": [102, 532, 538, 543, 549, 1046], "lasso_lars_": [185, 186], "lasso_path": [182, 652, 653, 654, 655, 656, 657, 664, 683, 684, 989, 1036, 1038, 1040, 1049], "lasso_pipelin": 130, "lassocv": [12, 130, 136, 167, 181, 186, 400, 417, 419, 652, 653, 655, 656, 657, 664, 685, 989, 1024, 1036, 1039, 1043, 1046, 1047, 1049, 1050, 1053, 1054], "lassocvlassocv": 130, "lassolar": [652, 653, 654, 656, 657, 664, 665, 666, 683, 684, 685, 989, 994, 1027, 1036, 1037, 1039, 1043, 1046, 1047, 1049], "lassolars": [185, 186, 419, 652, 655, 656, 989, 1036, 1043, 1045, 1049, 1050], "lassolarscv": [186, 400, 419, 653, 654, 655, 657, 664, 666, 683, 684, 685, 989, 1036, 1043, 1049, 1053], "lassolarsic__criterion": [185, 186], "last": [2, 18, 42, 56, 87, 122, 167, 176, 197, 198, 205, 210, 226, 249, 262, 270, 271, 310, 317, 319, 329, 356, 366, 375, 378, 382, 384, 385, 388, 394, 397, 403, 410, 411, 418, 422, 439, 443, 448, 460, 465, 468, 469, 516, 534, 560, 561, 562, 563, 584, 585, 588, 594, 595, 598, 611, 683, 684, 686, 687, 698, 699, 701, 702, 703, 708, 783, 798, 799, 804, 805, 820, 845, 846, 850, 865, 866, 870, 878, 884, 920, 945, 968, 982, 988, 989, 990, 992, 994, 997, 1007, 1014, 1020, 1027, 1036, 1042, 1043, 1044, 1045, 1050, 1052, 1053], "last_hour": [2, 11], "last_mean": 968, "last_n": 968, "last_var": 968, "lat": [9, 296, 499, 765], "late": [311, 368], "latenc": [1, 5, 14, 164, 365, 525, 566, 673, 679, 831, 885, 911, 958, 967, 1013, 1015, 1031, 1039], "latent": [1, 4, 14, 15, 103, 164, 223, 302, 319, 352, 413, 418, 420, 489, 533, 537, 539, 540, 541, 544, 545, 589, 592, 861, 992, 1013, 1015, 1029, 1030, 1031, 1038, 1041], "latentdirichletalloc": [13, 368, 385, 415, 1013, 1041, 1043, 1050, 1051], "later": [0, 9, 51, 109, 114, 123, 149, 168, 173, 176, 236, 253, 278, 296, 353, 362, 386, 392, 393, 403, 851, 874, 875, 883, 885, 985, 1003, 1024, 1029, 1039, 1042, 1044, 1048], "latest": [315, 316, 317, 318, 319, 320, 321, 322, 323, 378, 380, 384, 386, 388, 1009, 1011, 1050], "latestst": 384, "latex": 1036, "latexpdf": 380, "latin": [6, 418], "latitud": [296, 305, 375, 499, 700, 765], "lattarini": 1038, "latter": [2, 13, 248, 259, 268, 269, 291, 310, 346, 368, 377, 394, 409, 414, 417, 418, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 743, 798, 799, 800, 801, 804, 805, 810, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 960, 996, 1001, 1045], "laughlin": 1043, "launch": [351, 352, 397, 1018], "laur": 1036, "lauren": [0, 363, 693, 697, 990, 1048, 1051], "laurent": [1039, 1040, 1043, 1044, 1051, 1052], "laurenz": 1048, "lauritzen": 1044, "laveen": 1049, "law": 1018, "lawrenc": 253, "lawson": [1043, 1044, 1045], "lawton": 1044, "layer": [2, 29, 118, 128, 138, 151, 153, 164, 204, 207, 210, 213, 237, 298, 301, 302, 303, 307, 308, 331, 344, 348, 366, 388, 417, 515, 516, 523, 568, 831, 861, 862, 863, 866, 885, 998, 1015, 1016, 1031, 1042], "layout": [109, 305, 392, 905, 906, 907, 910, 926, 1008, 1039, 1041, 1053], "layton": [0, 46, 399, 1036, 1037, 1038, 1039, 1041], "lazebnik": [759, 760, 991], "lazi": [11, 395, 418, 1007, 1040], "lazyfram": 71, "lazz": 1051, "lb": [872, 1004], "lbfg": [158, 299, 382, 649, 650, 659, 660, 670, 673, 675, 681, 688, 836, 839, 862, 863, 989, 997, 1040, 1041, 1043, 1044, 1049, 1050, 1051, 1053], "lbfgsb": 659, "lbfin": 1046, "lc": [10, 221, 229], "lceil": [406, 999], "lda": [13, 31, 88, 92, 95, 97, 99, 103, 104, 164, 292, 362, 377, 405, 505, 537, 542, 550, 551, 854, 1013, 1015, 1016, 1030, 1031, 1041], "lda_featur": 385, "lda_model": 385, "lda_np": 405, "ldavid": 1042, "ldflag": 378, "ldirer": 1043, "ldl": [146, 377], "ldot": [989, 993, 995, 997, 1007], "ldwy4": 1053, "le": [659, 873, 984, 989, 996, 1004, 1006, 1044, 1048, 1049, 1053], "le_": 570, "lead": [0, 5, 23, 25, 29, 35, 50, 53, 59, 70, 115, 119, 120, 122, 145, 146, 167, 168, 169, 176, 181, 186, 188, 197, 201, 231, 233, 236, 253, 259, 260, 262, 266, 288, 289, 301, 305, 307, 310, 311, 317, 339, 346, 352, 356, 362, 366, 367, 374, 379, 388, 389, 393, 394, 406, 407, 409, 410, 412, 414, 415, 416, 417, 419, 453, 463, 466, 469, 497, 516, 528, 536, 539, 540, 541, 544, 548, 552, 558, 559, 560, 561, 564, 565, 566, 567, 607, 631, 647, 648, 651, 653, 654, 655, 661, 662, 663, 664, 680, 692, 696, 747, 798, 804, 805, 833, 845, 846, 850, 869, 876, 886, 897, 898, 903, 905, 913, 914, 915, 916, 982, 987, 989, 990, 992, 993, 994, 996, 997, 999, 1001, 1003, 1006, 1007, 1009, 1018, 1020, 1039, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054], "leader": [380, 1018], "leadership": 0, "leaf": [39, 114, 126, 128, 356, 360, 410, 417, 421, 442, 443, 444, 445, 446, 447, 451, 458, 464, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 913, 914, 915, 916, 917, 918, 996, 1009, 1039, 1041, 1043, 1047, 1050], "leaf_id": 360, "leaf_rot": 170, "leaf_siz": [421, 445, 447, 451, 456, 457, 458, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 996], "leagu": 375, "leak": [114, 264, 351, 362, 411, 414, 865, 890, 891, 893, 894, 895, 896, 1003, 1036, 1043, 1046, 1052, 1053, 1054], "leakag": [393, 394, 411, 1031], "lean": 403, "leandro": [1045, 1049], "lear": 1018, "learn": [2, 4, 5, 6, 7, 8, 11, 13, 15, 18, 23, 24, 25, 29, 30, 32, 34, 35, 46, 47, 49, 50, 51, 53, 54, 65, 66, 68, 69, 73, 79, 80, 87, 92, 98, 102, 104, 107, 109, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 129, 130, 136, 137, 138, 143, 146, 149, 152, 154, 158, 161, 162, 165, 169, 170, 171, 172, 174, 178, 183, 185, 186, 192, 197, 198, 199, 201, 211, 215, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 251, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 276, 278, 283, 285, 287, 288, 289, 290, 291, 292, 296, 298, 301, 302, 303, 305, 306, 310, 311, 312, 314, 324, 325, 329, 331, 332, 338, 343, 346, 351, 352, 353, 356, 357, 358, 359, 360, 362, 367, 369, 372, 373, 374, 375, 377, 379, 383, 386, 387, 388, 389, 393, 394, 396, 400, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 416, 418, 419, 420, 424, 425, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 443, 444, 447, 448, 450, 451, 458, 465, 466, 468, 469, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 509, 510, 511, 513, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 572, 577, 582, 583, 584, 585, 588, 589, 590, 591, 592, 594, 595, 600, 603, 604, 611, 612, 615, 620, 623, 627, 629, 631, 633, 635, 639, 641, 642, 644, 645, 646, 647, 649, 653, 658, 659, 669, 670, 677, 678, 679, 681, 689, 690, 691, 692, 693, 697, 701, 702, 703, 709, 714, 718, 719, 722, 724, 725, 727, 733, 736, 742, 743, 744, 749, 757, 779, 780, 781, 785, 786, 788, 789, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 847, 849, 854, 861, 862, 863, 864, 865, 866, 868, 870, 872, 875, 877, 878, 879, 880, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 910, 913, 914, 915, 916, 928, 936, 937, 959, 960, 961, 982, 983, 985, 986, 987, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1010, 1012, 1015, 1017, 1022, 1024, 1025, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "learn_rat": 1037, "learner": [6, 110, 120, 130, 368, 560, 561, 562, 563, 583, 590, 631, 847, 848, 853, 855, 856, 995, 998, 1009, 1013, 1014, 1029, 1052], "learning_curv": [261, 320, 400, 807, 988, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1053, 1055], "learning_decai": 537, "learning_method": [13, 385, 537], "learning_offset": [13, 537], "learning_r": [5, 109, 120, 121, 122, 123, 124, 125, 223, 283, 300, 302, 316, 318, 417, 554, 555, 560, 561, 562, 563, 669, 677, 678, 679, 693, 861, 862, 863, 990, 1000, 1007, 1037, 1045, 1049], "learning_rate_": [693, 863], "learning_rate_init": [168, 300, 301, 862, 863], "learningcurvedisplai": [232, 261, 320, 988, 1051, 1052], "learnt": [125, 167, 312, 362, 394, 414, 886, 982, 1003], "least": [3, 11, 13, 78, 79, 82, 83, 85, 95, 96, 112, 123, 144, 146, 157, 164, 166, 175, 176, 179, 181, 187, 190, 193, 194, 197, 199, 201, 202, 205, 214, 215, 216, 230, 236, 259, 278, 281, 310, 317, 318, 339, 352, 353, 366, 373, 375, 377, 379, 380, 384, 386, 388, 392, 394, 395, 400, 408, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 445, 449, 451, 457, 458, 459, 462, 475, 482, 483, 484, 485, 486, 495, 517, 532, 538, 540, 542, 543, 544, 546, 547, 548, 549, 550, 558, 559, 560, 561, 563, 565, 566, 567, 594, 595, 603, 636, 644, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 693, 698, 713, 717, 719, 786, 802, 806, 807, 813, 815, 816, 817, 819, 820, 822, 826, 829, 830, 831, 862, 863, 866, 877, 885, 910, 913, 914, 915, 916, 934, 956, 983, 986, 990, 993, 996, 1005, 1007, 1008, 1009, 1014, 1015, 1016, 1018, 1027, 1031, 1036, 1038, 1039, 1042, 1043, 1047], "least_absolute_devi": [1046, 1048, 1049], "least_angl": 389, "least_squar": 1049, "leastangle_2002": [146, 377], "leastsquareserror": 1045, "leav": [51, 109, 114, 123, 168, 170, 215, 266, 310, 360, 362, 366, 377, 379, 385, 394, 410, 417, 442, 443, 446, 447, 464, 504, 558, 559, 560, 561, 562, 563, 565, 566, 567, 674, 676, 803, 808, 809, 810, 811, 819, 820, 845, 846, 913, 914, 915, 916, 982, 990, 996, 1000, 1009, 1024, 1027, 1036, 1043, 1045, 1047, 1048, 1052], "leaveonegroupout": [264, 414, 802, 809, 810, 1024, 1042], "leaveonelabelout": 1042, "leaveoneout": [264, 414, 1024], "leavepgroupsout": [414, 803, 1024, 1042], "leaveplabelout": 1042, "leaveplabelsout": 1042, "leavepout": [414, 809, 1024], "leaves_parallel": 917, "lebedev": [1042, 1043], "lebel": 1051, "lebourgeoi": 1018, "lectur": [410, 645, 985, 1012], "lecture2": 645, "lecun": [997, 1007], "led": 1036, "ledoit": [8, 13, 27, 32, 33, 75, 76, 79, 80, 81, 164, 292, 474, 476, 480, 481, 513, 550, 987, 1015], "ledoit_wolf": [80, 412, 1049], "ledoit_wolf_shrinkag": 1049, "ledoitwolf": [31, 75, 77, 80, 81, 100, 124, 164, 294, 412, 470, 471, 475, 476, 477, 478, 801, 1015, 1040], "lee": [415, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1051], "leepei": 1040, "leereev": 1043, "leeuw": 636, "lefebvr": [1049, 1050], "lefevr": [415, 539], "left": [4, 5, 10, 12, 13, 22, 31, 32, 37, 40, 42, 43, 49, 53, 60, 62, 70, 73, 79, 80, 89, 90, 95, 96, 109, 112, 114, 115, 116, 119, 122, 125, 130, 132, 152, 158, 162, 167, 170, 182, 190, 197, 198, 199, 201, 208, 210, 211, 214, 215, 226, 230, 234, 236, 237, 243, 245, 246, 249, 255, 256, 257, 258, 260, 268, 269, 271, 286, 288, 289, 296, 299, 302, 305, 319, 321, 322, 327, 338, 339, 343, 360, 375, 380, 382, 384, 406, 410, 413, 414, 416, 417, 418, 420, 427, 433, 447, 473, 483, 484, 485, 486, 494, 499, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 588, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 636, 640, 644, 652, 656, 798, 799, 801, 804, 805, 808, 815, 878, 885, 913, 914, 915, 916, 917, 929, 942, 964, 967, 982, 985, 987, 989, 991, 993, 995, 1000, 1005, 1007, 1009, 1024, 1025, 1027, 1028, 1043, 1045, 1050], "left_h": 305, "left_impur": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "leftarrow": [410, 997, 1007], "leftmost": 997, "legaci": [374, 384, 394, 961, 1036, 1043, 1048], "legarreta": [1047, 1049, 1050], "legend": [2, 5, 6, 7, 9, 11, 22, 24, 31, 35, 38, 59, 70, 71, 73, 76, 77, 78, 79, 83, 84, 88, 95, 97, 100, 101, 102, 109, 110, 111, 112, 113, 115, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 142, 149, 150, 154, 155, 156, 157, 158, 167, 168, 173, 176, 177, 179, 182, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 221, 229, 230, 231, 232, 234, 237, 245, 253, 254, 256, 258, 259, 261, 262, 263, 264, 266, 269, 271, 272, 273, 274, 278, 286, 288, 289, 290, 295, 300, 306, 310, 316, 319, 322, 328, 338, 341, 343, 345, 351, 356, 357, 358, 359, 701, 1025, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "legend_el": [88, 126, 210, 262, 286, 343], "legend_handl": 290, "legend_lin": 7, "legend_titl": 203, "legitim": [253, 990], "legitimate_accept": 253, "legitimate_refus": 253, "lego": 1013, "lehoucq": 415, "leibler": [13, 218, 415, 539, 541, 548, 693, 990, 1043], "leibniz": 993, "leig": 1042, "leightonzhang": 1042, "leinweb": [1044, 1045], "leisur": 2, "lejeun": 1043, "lekhwani": 1045, "leland": [1042, 1043, 1044, 1046, 1047, 1052], "lemaitr": [0, 3, 5, 70, 73, 98, 130, 149, 154, 155, 156, 158, 185, 186, 199, 219, 305, 398, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "lemaitre58": [5, 130, 149, 154, 156, 158, 219, 305], "lemir": 1047, "lemma": [230, 372, 408, 535, 542, 550, 897, 898, 899, 987, 1031, 1039], "lemmat": 418, "lemmatoken": 418, "lemo": [1052, 1053], "len": [5, 6, 8, 9, 15, 17, 28, 29, 30, 35, 36, 39, 41, 42, 47, 48, 49, 53, 58, 59, 60, 61, 62, 63, 68, 70, 96, 102, 103, 107, 112, 115, 118, 119, 125, 137, 138, 144, 149, 157, 162, 168, 170, 196, 197, 215, 221, 226, 229, 230, 231, 233, 235, 236, 243, 245, 246, 254, 257, 259, 260, 267, 268, 270, 274, 281, 283, 290, 292, 293, 299, 306, 307, 308, 311, 321, 323, 326, 327, 330, 339, 345, 348, 351, 352, 353, 360, 392, 394, 417, 420, 428, 432, 434, 438, 446, 451, 457, 465, 508, 516, 551, 570, 571, 583, 598, 633, 634, 783, 801, 815, 827, 831, 833, 835, 836, 886, 900, 901, 1027, 1028, 1029, 1045, 1048], "lenail": [1044, 1048], "lend": 1018, "lene": 1052, "length": [43, 68, 87, 88, 90, 101, 103, 118, 146, 149, 150, 151, 154, 155, 157, 173, 180, 233, 234, 237, 240, 286, 317, 320, 336, 353, 373, 377, 380, 388, 389, 394, 411, 415, 417, 418, 420, 446, 491, 509, 510, 513, 516, 524, 552, 564, 582, 583, 590, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 633, 647, 648, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 664, 682, 685, 782, 801, 804, 805, 815, 831, 833, 836, 837, 839, 847, 848, 849, 851, 853, 892, 918, 925, 927, 931, 947, 948, 964, 967, 992, 999, 1003, 1020, 1026, 1027, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1052], "length_scal": [149, 150, 153, 154, 155, 156, 158, 420, 613, 616, 619, 620, 622, 623, 624, 625], "length_scale_bound": [149, 155, 156, 158, 420, 612, 616, 620, 623, 624], "length_scale_grid": 155, "lengthi": [380, 392], "lenient": [879, 1014, 1053], "lenz": [1047, 1051], "leo": 1053, "leon": [677, 678, 679, 1036, 1054], "leonardo": 1049, "leonenko": [608, 609], "leonieborn": 1042, "leopoldo": 1049, "leq": [152, 415, 417, 989, 993, 996, 1007, 1008, 1009], "lera": 1043, "leriqu": [1042, 1044], "lernen": 451, "lesne": 1050, "less": [2, 3, 6, 25, 50, 51, 58, 90, 93, 96, 103, 109, 116, 122, 123, 125, 149, 156, 167, 179, 181, 197, 199, 201, 232, 236, 244, 246, 253, 259, 260, 268, 270, 273, 274, 306, 309, 310, 311, 317, 319, 323, 343, 351, 352, 362, 366, 368, 375, 380, 382, 392, 394, 403, 410, 414, 415, 417, 418, 422, 440, 442, 444, 446, 449, 451, 453, 458, 461, 463, 464, 483, 484, 485, 497, 516, 532, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 597, 620, 628, 635, 648, 662, 677, 679, 693, 702, 722, 723, 724, 725, 726, 737, 753, 765, 780, 781, 786, 796, 798, 799, 803, 804, 805, 811, 829, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 868, 880, 882, 883, 885, 888, 894, 895, 905, 906, 913, 914, 915, 916, 931, 945, 982, 983, 985, 986, 987, 990, 992, 993, 996, 998, 1003, 1007, 1008, 1009, 1013, 1027, 1029, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1053], "lessen": [203, 659, 660], "lesser": [299, 394, 443, 542, 989], "let": [2, 3, 11, 51, 53, 62, 69, 73, 88, 93, 98, 116, 119, 122, 123, 125, 127, 149, 155, 156, 162, 167, 168, 169, 178, 186, 197, 199, 215, 218, 222, 233, 240, 253, 254, 259, 262, 266, 273, 351, 353, 360, 362, 375, 380, 382, 386, 392, 403, 406, 409, 410, 414, 417, 418, 442, 446, 492, 501, 505, 511, 535, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 682, 685, 871, 878, 879, 989, 990, 991, 992, 993, 1000, 1001, 1003, 1008, 1009, 1018, 1027, 1028, 1029, 1046], "letelli": 1042, "letter": [146, 157, 375, 377, 384, 418, 789, 790, 807, 824, 993], "leu": 1050, "leung": 1047, "lev_metr": 392, "levarag": 322, "level": [2, 7, 9, 10, 25, 32, 39, 51, 93, 94, 114, 118, 138, 146, 148, 149, 150, 153, 156, 158, 159, 164, 167, 168, 208, 209, 210, 211, 212, 215, 226, 230, 231, 247, 253, 259, 262, 268, 269, 289, 296, 337, 338, 340, 341, 343, 346, 352, 360, 366, 375, 377, 380, 382, 386, 392, 394, 396, 397, 400, 407, 415, 418, 420, 424, 455, 469, 494, 495, 497, 504, 522, 532, 537, 538, 546, 547, 548, 562, 563, 568, 569, 612, 616, 623, 624, 626, 667, 668, 669, 677, 678, 679, 688, 691, 693, 695, 701, 703, 717, 724, 729, 786, 826, 827, 828, 830, 833, 834, 861, 862, 863, 903, 918, 982, 989, 993, 994, 996, 1001, 1007, 1009, 1013, 1014, 1015, 1029, 1039, 1047, 1050, 1051, 1052], "levelnam": 93, "leven": 392, "levenshtein": [323, 392], "levenshtein_dist": 323, "levequ": [843, 885], "leverag": [2, 6, 35, 47, 84, 215, 351, 352, 366, 367, 378, 394, 414, 417, 880, 982, 989, 1020, 1039, 1051, 1054], "levesqu": 1042, "levi": [535, 1043], "levinson": [1044, 1045], "levitski": [1051, 1052, 1053], "levitskii": 1049, "lewi": [375, 1043, 1047], "lex": [410, 453, 463], "lexicograph": [394, 568, 789, 795, 847, 855], "lexicon": 1003, "lexsort": 22, "lf": 388, "lfw": [4, 375, 494, 495, 1025, 1036], "lfw_": 1025, "lfw_home": 375, "lfw_pairs_train": [375, 494], "lfw_peopl": [4, 375, 495, 1025], "lg2012": 417, "lgtm": 1043, "li": [0, 329, 375, 399, 640, 643, 697, 727, 757, 898, 982, 985, 993, 996, 1003, 1005, 1008, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "liabil": 215, "liac": [320, 374, 380, 497, 1051, 1052], "liam": [1044, 1045], "liang": [1042, 1047, 1048, 1053], "liau": 1039, "lib": [367, 378, 397, 1013], "liberti": 249, "libisel": 1054, "liblinear": [190, 337, 386, 659, 660, 789, 905, 906, 907, 910, 911, 989, 993, 1008, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1052], "libomp": [378, 1048], "librari": [4, 253, 259, 318, 320, 358, 362, 372, 374, 375, 378, 379, 380, 381, 386, 392, 393, 394, 397, 403, 405, 659, 905, 906, 907, 908, 910, 911, 961, 989, 993, 1008, 1009, 1013, 1014, 1018, 1025, 1029, 1034, 1039, 1043, 1044, 1045, 1046, 1047, 1049, 1053], "libsvm": [173, 337, 373, 386, 488, 509, 564, 905, 906, 907, 908, 909, 910, 911, 1008, 1031, 1036, 1038, 1044, 1047, 1050], "libsvmtool": [173, 374, 488, 509, 510], "licenc": [3, 374], "licens": [5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 35, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 68, 69, 71, 72, 73, 80, 87, 88, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 202, 204, 205, 213, 214, 219, 220, 221, 223, 226, 229, 231, 232, 234, 236, 243, 245, 260, 263, 265, 272, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 326, 327, 328, 329, 331, 343, 344, 346, 347, 351, 352, 353, 374, 392, 394, 1009, 1018], "lichman": 377, "liddel": 1044, "lidston": [840, 841, 842, 844, 995], "lie": [11, 58, 83, 145, 167, 231, 305, 328, 337, 339, 415, 417, 607, 853, 855, 856, 857, 905, 906, 987, 990, 993, 1003, 1008], "lieg": 417, "lieret": 1051, "lieu": [1042, 1043], "life": [11, 125, 252, 388, 990], "lifecycl": [1013, 1014], "lifo": 920, "lift": 397, "light": [112, 375], "lighter": [366, 701, 703, 783, 790, 1052], "lightfm": 1013, "lightgbm": [125, 417, 562, 563, 1013, 1045, 1052], "lightgreen": [132, 203, 214], "lightgrei": 8, "lightn": 1013, "lightweight": [381, 801, 815, 826, 827, 1013], "ligo": 1043, "lik_max": 76, "lik_min": 76, "like": [0, 2, 10, 11, 17, 50, 53, 56, 58, 68, 87, 90, 96, 100, 102, 107, 109, 111, 116, 122, 125, 126, 149, 155, 167, 177, 197, 233, 249, 253, 259, 262, 263, 266, 267, 274, 292, 302, 305, 310, 311, 315, 329, 339, 343, 351, 352, 362, 366, 368, 372, 374, 375, 379, 380, 382, 384, 387, 388, 389, 392, 393, 394, 400, 403, 405, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 516, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 582, 583, 584, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 930, 931, 944, 947, 956, 957, 961, 964, 965, 966, 978, 980, 982, 985, 987, 988, 989, 990, 993, 995, 996, 997, 999, 1000, 1003, 1008, 1009, 1013, 1014, 1018, 1020, 1027, 1029, 1033, 1036, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "likelihood": [31, 55, 75, 77, 78, 79, 80, 81, 100, 124, 149, 150, 151, 153, 154, 155, 156, 158, 164, 185, 215, 247, 251, 259, 265, 276, 294, 302, 305, 382, 394, 407, 412, 415, 417, 420, 438, 470, 471, 472, 473, 474, 475, 476, 477, 478, 516, 533, 537, 542, 550, 551, 552, 611, 612, 632, 646, 659, 713, 742, 798, 799, 801, 828, 831, 850, 861, 881, 893, 907, 908, 910, 911, 989, 992, 995, 1003, 1008, 1015, 1039, 1040, 1045, 1051], "likewis": [234, 410, 524], "lil": [394, 554, 555, 872, 921, 947, 996], "lil_matrix": 15, "lili": [1044, 1045], "lilian": [1041, 1042, 1053], "lim": [152, 535], "lima": [1049, 1050], "limit": [2, 6, 15, 25, 35, 40, 55, 64, 80, 109, 116, 117, 123, 130, 161, 167, 168, 169, 176, 197, 198, 214, 230, 266, 307, 311, 318, 346, 353, 362, 367, 381, 382, 385, 392, 394, 395, 407, 409, 410, 413, 415, 419, 447, 464, 469, 560, 561, 562, 563, 633, 651, 680, 683, 684, 689, 779, 822, 853, 855, 856, 857, 878, 879, 903, 907, 908, 909, 910, 911, 961, 982, 989, 990, 992, 993, 1000, 1001, 1003, 1014, 1020, 1031, 1044, 1046, 1049, 1050, 1053], "limits_": 996, "lin": [0, 535, 659, 1008, 1041, 1042, 1043, 1044], "lin_clf": 1008, "linalg": [32, 52, 76, 77, 80, 100, 102, 183, 243, 244, 245, 248, 249, 322, 380, 386, 415, 452, 453, 454, 463, 522, 533, 536, 542, 545, 658, 673, 675, 688, 692, 696, 940], "linalgerror": 1046, "lincoln": 375, "lindenbaum": 535, "lindenstrauss": [53, 164, 225, 241, 372, 408, 490, 503, 897, 898, 899, 1010, 1015, 1031], "lindgren": 1054, "lindquist": 1051, "line": [7, 9, 11, 15, 38, 41, 58, 68, 78, 89, 93, 98, 109, 115, 121, 148, 159, 161, 162, 164, 167, 168, 185, 186, 187, 189, 192, 193, 195, 198, 199, 200, 205, 206, 208, 209, 211, 226, 230, 231, 234, 236, 256, 263, 265, 266, 289, 293, 296, 306, 317, 338, 341, 343, 344, 347, 348, 351, 374, 375, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 415, 416, 417, 439, 488, 489, 490, 509, 510, 543, 554, 555, 556, 557, 611, 614, 615, 633, 671, 687, 701, 702, 703, 807, 824, 961, 987, 993, 997, 1000, 1007, 1013, 1015, 1017, 1027, 1029, 1038, 1047, 1049, 1052, 1053], "line0": [10, 221], "line1": [5, 10, 221], "line2": [5, 10, 221, 347], "line2d": [7, 78, 211, 289, 338, 341, 807, 824], "line_": [387, 439, 699, 701, 702, 703, 807, 824], "line_bin": 306, "line_fig": 115, "line_i": 200, "line_kw": [125, 127, 237, 261, 316, 322, 633, 807, 824], "line_kwarg": [130, 702], "line_profil": 386, "line_trac": 115, "line_x": [200, 214], "line_y_ransac": 200, "linear": [3, 7, 8, 10, 11, 12, 13, 25, 27, 28, 29, 33, 35, 50, 55, 72, 73, 76, 77, 78, 79, 80, 84, 88, 93, 98, 101, 112, 114, 128, 130, 133, 136, 138, 141, 146, 153, 155, 161, 162, 165, 166, 168, 171, 173, 177, 179, 181, 183, 185, 186, 187, 192, 194, 195, 198, 199, 201, 202, 205, 209, 211, 213, 214, 215, 216, 217, 220, 222, 224, 229, 230, 232, 234, 235, 238, 248, 252, 255, 256, 257, 259, 262, 264, 265, 266, 267, 268, 269, 274, 288, 289, 290, 291, 292, 293, 302, 305, 306, 307, 310, 312, 317, 318, 334, 336, 339, 340, 341, 344, 346, 347, 349, 351, 358, 359, 367, 369, 372, 376, 377, 378, 382, 383, 385, 394, 396, 407, 410, 413, 414, 415, 416, 417, 418, 419, 420, 422, 443, 445, 456, 466, 468, 476, 483, 484, 485, 497, 502, 503, 513, 516, 522, 525, 533, 534, 535, 536, 537, 540, 542, 544, 545, 549, 550, 551, 555, 567, 583, 590, 594, 595, 607, 610, 615, 621, 632, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 691, 692, 693, 694, 702, 708, 717, 751, 754, 766, 768, 775, 786, 801, 812, 816, 828, 831, 845, 846, 850, 854, 861, 862, 863, 866, 870, 871, 872, 875, 878, 880, 882, 883, 884, 885, 894, 898, 905, 906, 907, 908, 909, 910, 911, 982, 984, 985, 986, 988, 993, 996, 997, 998, 999, 1000, 1001, 1007, 1008, 1013, 1015, 1016, 1018, 1020, 1023, 1024, 1029, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "linear_baselin": 317, "linear_kernel": [762, 766, 991, 1044], "linear_model": [2, 5, 6, 8, 12, 23, 25, 28, 52, 69, 71, 73, 84, 114, 130, 132, 133, 136, 137, 144, 145, 146, 149, 161, 164, 166, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 226, 227, 228, 229, 233, 235, 238, 240, 253, 255, 262, 267, 268, 272, 273, 274, 281, 302, 306, 307, 310, 312, 315, 316, 317, 318, 319, 321, 322, 323, 330, 351, 362, 366, 368, 369, 379, 380, 382, 386, 388, 389, 393, 394, 400, 405, 409, 411, 417, 430, 435, 439, 466, 538, 540, 543, 544, 546, 547, 549, 568, 569, 570, 571, 598, 632, 633, 635, 636, 639, 641, 642, 643, 644, 701, 702, 789, 800, 815, 824, 826, 827, 828, 830, 832, 836, 837, 838, 839, 863, 880, 884, 905, 906, 909, 912, 934, 936, 937, 938, 977, 985, 989, 993, 994, 999, 1001, 1003, 1007, 1015, 1024, 1025, 1027, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "linear_model_preprocessor": 197, "linear_pca": 411, "linear_preprocessor": 130, "linear_regress": [199, 274], "linear_svc": 1008, "linear_svm": 231, "linear_svm_scor": 231, "linear_svm_tim": 231, "lineardiscriminantanalysi": [31, 32, 101, 219, 292, 362, 405, 537, 551, 854, 987, 994, 996, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "linearli": [29, 98, 111, 146, 167, 176, 211, 219, 226, 268, 269, 307, 310, 343, 351, 366, 377, 392, 415, 417, 516, 554, 643, 708, 874, 875, 993, 996, 999, 1008, 1027, 1043, 1052], "linearly_separ": [29, 299], "linearmodel": 1049, "linearoper": [322, 688], "linearregress": [84, 133, 166, 176, 187, 192, 193, 194, 195, 200, 203, 214, 229, 233, 235, 255, 274, 306, 362, 380, 392, 393, 411, 417, 466, 571, 633, 636, 647, 650, 653, 655, 672, 673, 688, 989, 993, 994, 1003, 1027, 1040, 1041, 1045, 1048, 1049, 1050, 1052], "linearregressionifittedlinearregress": 229, "linearregressionlinearregress": 133, "linearsvc": [23, 25, 68, 70, 142, 143, 164, 173, 211, 231, 256, 258, 266, 307, 315, 334, 336, 340, 341, 346, 349, 351, 366, 382, 386, 407, 418, 419, 438, 513, 568, 578, 632, 640, 644, 653, 673, 674, 675, 676, 677, 688, 736, 743, 828, 833, 906, 907, 910, 912, 989, 993, 994, 1008, 1015, 1036, 1037, 1038, 1042, 1044, 1047, 1052], "linearsvc__c": 307, "linearsvclinearsvc": [70, 143, 266], "linearsvr": [569, 911, 1008, 1040, 1042, 1047, 1052], "linecollect": [10, 221, 229, 633], "linen": [10, 221], "lineno": 386, "lineplot": [125, 259], "liner": [382, 831], "lines_": [387, 633, 807, 824], "linestyl": [8, 9, 31, 58, 71, 78, 100, 102, 109, 121, 132, 136, 138, 149, 152, 154, 156, 158, 169, 170, 182, 184, 185, 186, 197, 198, 199, 203, 207, 209, 210, 215, 234, 236, 253, 256, 258, 262, 263, 268, 273, 288, 296, 300, 306, 337, 340, 341, 343, 344, 346, 1025], "linewidth": [22, 31, 32, 35, 38, 56, 71, 76, 84, 90, 110, 122, 125, 127, 149, 153, 157, 186, 187, 191, 192, 193, 195, 198, 200, 203, 211, 214, 226, 234, 236, 268, 272, 289, 293, 306, 316, 322, 337, 338, 340, 358, 1025], "linger": 199, "linguist": [717, 902, 1006], "lingyi1110": 1051, "link": [10, 15, 109, 167, 168, 176, 197, 201, 215, 243, 253, 262, 293, 356, 367, 379, 380, 381, 382, 384, 388, 394, 407, 410, 412, 415, 417, 420, 562, 563, 611, 649, 670, 681, 689, 706, 924, 926, 989, 996, 1009, 1010, 1013, 1017, 1023, 1027, 1029, 1034, 1036, 1039, 1040, 1043, 1044, 1047, 1053], "link_thickness_i": 293, "linkag": [34, 37, 38, 39, 42, 45, 50, 53, 54, 55, 65, 66, 164, 170, 441, 442, 446, 447, 464, 513, 515, 523, 885, 1013, 1015, 1028, 1039, 1044, 1047], "linkage_matrix": 39, "linkage_tre": 1040, "linkedin": 384, "linker": [378, 381], "linnerrud": [373, 1031], "linnerud": [377, 506], "linprog": [671, 989], "linspac": [2, 6, 8, 9, 12, 22, 24, 35, 36, 38, 40, 47, 53, 78, 79, 94, 102, 110, 122, 149, 150, 152, 153, 154, 155, 156, 158, 168, 176, 177, 179, 181, 187, 191, 197, 198, 199, 203, 207, 208, 209, 210, 211, 215, 223, 226, 229, 230, 232, 234, 247, 259, 261, 262, 266, 267, 268, 269, 274, 288, 289, 295, 296, 306, 308, 319, 320, 338, 339, 342, 343, 344, 346, 347, 348, 632, 633, 807, 829, 845, 846, 1028], "lint": [380, 388], "linter": 580, "linthresh": [176, 181], "linu": [1052, 1053], "linux": [380, 382, 383, 388, 1013, 1036], "lipoprotein": [146, 377], "lippert": 989, "lippmann": 375, "lipschitz": [408, 1005], "lisa": [1044, 1045, 1047, 1048, 1050, 1051], "lise": 1050, "list": [0, 2, 6, 8, 10, 11, 12, 15, 17, 18, 23, 30, 38, 42, 47, 60, 68, 102, 103, 113, 115, 121, 130, 170, 201, 236, 237, 254, 257, 259, 260, 262, 263, 268, 272, 292, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 330, 342, 352, 353, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 400, 407, 410, 411, 414, 416, 417, 418, 433, 435, 438, 451, 457, 458, 465, 466, 467, 468, 472, 473, 479, 483, 484, 485, 489, 490, 491, 492, 493, 494, 497, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 524, 533, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 592, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 633, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 682, 685, 687, 688, 693, 697, 698, 700, 711, 712, 713, 714, 717, 719, 726, 734, 743, 747, 755, 779, 782, 784, 789, 795, 798, 799, 801, 804, 805, 807, 812, 813, 815, 824, 826, 827, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 869, 873, 876, 878, 879, 884, 886, 902, 906, 908, 911, 913, 914, 915, 916, 919, 921, 925, 926, 927, 931, 933, 934, 935, 937, 945, 946, 948, 959, 964, 967, 977, 982, 983, 989, 993, 995, 996, 997, 1000, 1001, 1004, 1009, 1011, 1013, 1014, 1018, 1020, 1024, 1026, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "list_param": 380, "listedcolormap": [29, 32, 118, 291, 294, 299, 307], "listen": 351, "listinfo": 388, "lite": 1036, "liter": [380, 384, 1018], "literatur": [46, 154, 259, 278, 352, 377, 380, 386, 388, 392, 393, 410, 413, 415, 417, 444, 448, 450, 502, 537, 539, 541, 548, 556, 557, 589, 592, 709, 798, 982, 985, 989, 993, 1046], "litsidi": [1051, 1052], "littl": [167, 168, 169, 170, 226, 375, 418, 463, 645, 801, 815, 942, 983, 990, 992, 1008, 1009, 1027, 1037, 1048, 1053], "lituiev": 1049, "liu": [0, 265, 370, 391, 564, 727, 757, 993, 999, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "liutong": 1044, "live": [9, 68, 167, 253, 296, 375, 380, 410, 499, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 1017], "livesei": 351, "livni": [410, 443], "lizao": 1044, "lizsz": 1042, "lj2017": 410, "lk": 1039, "lkjcalc": 1044, "lkubin": 1047, "ll": [9, 53, 117, 254, 296, 380, 392, 533, 542, 985, 996, 1009, 1020], "llcrnrlat": [9, 296], "llcrnrlon": [9, 296], "lle": [218, 219, 220, 222, 531, 690, 694, 990, 1048], "lle_hessian": 218, "lle_ltsa": 218, "lle_method": 218, "lle_mod": 218, "lle_standard": 218, "lloyd": [410, 444, 448, 450, 460, 1050, 1051], "llvm": 378, "lm": 178, "lmbda": 309, "lmbda_bc": 309, "lmbda_yj": 309, "lml": [150, 151, 155, 420], "ln": [384, 989, 997, 1003], "loa": [148, 149, 156, 159, 164, 420, 497, 612, 616, 623, 624, 626, 1015], "load": [2, 4, 9, 10, 11, 13, 24, 30, 44, 46, 51, 69, 70, 87, 93, 103, 114, 116, 118, 120, 126, 127, 130, 131, 133, 143, 144, 154, 167, 168, 173, 178, 193, 194, 197, 205, 213, 228, 229, 233, 235, 236, 237, 238, 240, 248, 253, 255, 257, 259, 264, 266, 271, 273, 278, 283, 287, 292, 300, 301, 302, 316, 317, 319, 320, 322, 328, 329, 330, 357, 360, 366, 369, 372, 375, 377, 383, 386, 393, 403, 408, 413, 414, 415, 417, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 533, 535, 544, 845, 846, 942, 1003, 1014, 1021, 1023, 1025, 1031, 1036, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "load_ames_h": 130, "load_boston": [1042, 1044, 1049], "load_breast_canc": [146, 170, 329, 356, 385, 593, 596, 597, 599, 675, 676, 789, 993, 1041, 1042, 1047], "load_cont": 504, "load_dataset": 351, "load_diabet": [5, 123, 133, 136, 146, 162, 182, 184, 185, 186, 193, 194, 237, 255, 320, 417, 559, 563, 569, 674, 702, 826, 827, 828, 914, 916, 1001, 1024, 1027, 1042, 1047, 1050], "load_digit": [30, 49, 50, 56, 70, 71, 87, 137, 144, 188, 204, 219, 230, 231, 257, 258, 261, 267, 275, 285, 287, 292, 300, 302, 321, 326, 327, 386, 411, 422, 446, 447, 533, 534, 535, 536, 600, 601, 639, 640, 669, 689, 690, 691, 692, 694, 696, 1020, 1024, 1025, 1026, 1027, 1028, 1042, 1047], "load_fil": [374, 375, 1029, 1038, 1050], "load_iri": [28, 39, 43, 72, 88, 97, 99, 101, 103, 118, 131, 138, 142, 151, 180, 190, 206, 240, 245, 252, 264, 265, 266, 268, 269, 286, 291, 294, 300, 315, 317, 320, 331, 335, 336, 339, 342, 357, 360, 393, 403, 410, 411, 414, 417, 419, 430, 562, 568, 602, 603, 611, 620, 621, 623, 624, 632, 659, 660, 712, 789, 801, 804, 805, 807, 815, 833, 854, 900, 901, 902, 913, 915, 917, 918, 919, 983, 988, 993, 994, 995, 996, 1000, 1003, 1009, 1020, 1026, 1027, 1028, 1042, 1044, 1047], "load_lfw_pair": 1041, "load_linnerud": [838, 1042, 1047], "load_mnist": [205, 283], "load_mtpl2": 215, "load_sample_imag": [46, 584, 585, 588, 1045], "load_svmlight_fil": [374, 1036, 1037, 1042, 1043, 1044, 1051], "load_win": [7, 239, 310, 849, 857, 1033, 1047], "loader": [260, 330, 351, 373, 374, 375, 499, 500, 509, 1014, 1029, 1036, 1041, 1043, 1044, 1047], "loan": [417, 535, 989, 1018], "loayza": 1050, "lobpcg": [44, 453, 463, 689, 692, 696, 1046, 1049, 1050, 1051], "loc": [2, 5, 6, 7, 22, 24, 31, 38, 70, 73, 77, 78, 79, 83, 88, 95, 97, 100, 101, 102, 109, 111, 112, 113, 121, 122, 123, 124, 125, 127, 130, 132, 133, 142, 149, 150, 156, 158, 167, 168, 179, 182, 187, 191, 197, 198, 199, 200, 203, 204, 207, 210, 211, 214, 215, 221, 229, 230, 231, 232, 234, 236, 245, 246, 254, 257, 258, 259, 262, 263, 266, 269, 272, 273, 274, 286, 288, 289, 300, 306, 309, 310, 316, 319, 322, 328, 338, 341, 343, 345, 346, 351, 357, 359, 815, 882, 894, 1024], "loc_a": 309, "loc_b": 309, "local": [2, 7, 10, 18, 37, 50, 55, 59, 93, 96, 114, 115, 127, 146, 154, 155, 164, 168, 198, 211, 217, 220, 222, 224, 226, 230, 236, 284, 292, 293, 297, 338, 358, 359, 367, 377, 378, 380, 384, 386, 388, 397, 410, 415, 417, 418, 420, 448, 453, 463, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 503, 539, 541, 545, 548, 550, 560, 561, 564, 567, 611, 612, 689, 690, 691, 692, 693, 694, 696, 697, 759, 760, 848, 851, 854, 856, 866, 875, 898, 901, 909, 959, 961, 991, 992, 996, 997, 1009, 1015, 1017, 1028, 1030, 1031, 1040, 1044, 1048, 1051, 1054], "localcach": 397, "localclust": 961, "locally_linear_embed": [222, 990], "locallylinearembed": [10, 218, 219, 220, 319, 689, 691, 693, 990, 996, 1041, 1042, 1050, 1051, 1052], "localoutlierfactor": [226, 236, 289, 290, 319, 394, 564, 909, 999, 1043, 1044, 1046, 1050, 1051, 1052, 1053], "localoutlierfactor__n_neighbor": 236, "locat": [7, 23, 51, 52, 70, 78, 79, 191, 296, 317, 339, 373, 375, 378, 380, 384, 385, 388, 389, 397, 410, 412, 416, 449, 461, 462, 470, 471, 472, 473, 474, 475, 476, 477, 489, 501, 502, 505, 506, 513, 516, 978, 983, 989, 994, 999, 1003, 1009, 1044], "location_": [78, 79, 470, 471, 472, 473, 474, 475, 476, 477], "location_reweight": [470, 475], "lock": [397, 402, 403, 959, 961, 1054], "loev": 535, "lof": [7, 164, 211, 226, 236, 284, 297, 338, 564, 851, 909, 999, 1015], "lof_kw": 236, "lofti": [1046, 1047], "log": [2, 18, 23, 24, 25, 76, 93, 109, 120, 122, 130, 142, 146, 150, 151, 153, 154, 155, 158, 182, 185, 186, 190, 197, 202, 207, 215, 230, 232, 247, 293, 310, 351, 375, 377, 378, 380, 384, 388, 389, 394, 406, 407, 410, 411, 412, 415, 417, 418, 420, 449, 452, 461, 466, 471, 472, 473, 474, 475, 476, 477, 533, 537, 542, 550, 551, 552, 554, 556, 558, 560, 563, 565, 591, 592, 594, 595, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 643, 646, 649, 659, 660, 670, 672, 677, 681, 723, 742, 752, 756, 798, 799, 801, 804, 805, 815, 840, 841, 842, 843, 844, 845, 846, 850, 861, 862, 869, 870, 899, 902, 907, 910, 912, 913, 915, 940, 982, 985, 987, 989, 990, 995, 996, 998, 1001, 1003, 1007, 1009, 1013, 1014, 1027, 1038, 1039, 1040, 1045, 1046, 1047, 1050, 1053, 1054], "log10": [142, 155, 167, 182, 190, 260, 339], "log1p": [73, 229, 869, 993, 1003], "log2": [113, 207, 238, 558, 559, 560, 561, 565, 566, 913, 914, 915, 916, 994], "log_": 993, "log_2": [406, 564, 999], "log_bas": 727, "log_den": 288, "log_dens": 850, "log_likelihood": [76, 611, 612, 798, 799], "log_likelihood_gradi": [611, 612], "log_logist": 1053, "log_loss": [23, 24, 121, 124, 150, 310, 330, 351, 394, 407, 417, 558, 560, 562, 565, 647, 659, 677, 913, 915, 982, 989, 993, 1007, 1009, 1038, 1040, 1042, 1050, 1051, 1052, 1053], "log_marginal_likelihood": [150, 151, 153, 155, 158, 420, 611, 612, 1046], "log_marginal_likelihood_value_": [611, 612], "log_prob": [798, 799, 800, 823], "log_reg": [240, 319], "log_reg_input_featur": 319, "log_scal": 1052, "log_scale_transform": [197, 215], "log_scaled_numer": [197, 215], "log_y_prob": 862, "logaddexp": 1053, "logan": [1050, 1051, 1052], "logarithm": [73, 130, 167, 201, 230, 260, 339, 394, 419, 461, 591, 659, 660, 677, 705, 727, 742, 752, 756, 757, 758, 792, 800, 823, 836, 845, 846, 940, 1009, 1024, 1043], "logcosh": [422, 534], "logdet": 940, "logged_in": 375, "logger": 1047, "logic": [107, 367, 381, 382, 387, 405, 417, 1009, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "logical_and": [12, 122], "logical_not": [17, 62, 102, 200], "logical_or": [199, 205, 268, 386], "logical_xor": [12, 153, 343], "loginov": 1042, "logist": [23, 25, 28, 43, 67, 69, 73, 74, 88, 101, 103, 114, 137, 144, 164, 175, 182, 184, 192, 194, 195, 201, 202, 203, 206, 208, 214, 216, 227, 229, 240, 253, 267, 270, 273, 281, 294, 301, 302, 310, 319, 335, 336, 346, 347, 351, 394, 395, 407, 411, 417, 419, 420, 438, 490, 497, 503, 505, 513, 542, 560, 562, 572, 611, 632, 647, 658, 659, 660, 667, 669, 677, 742, 801, 815, 831, 834, 861, 862, 863, 865, 885, 912, 928, 930, 993, 997, 998, 1007, 1008, 1015, 1016, 1018, 1025, 1031, 1040, 1043, 1044, 1046, 1047], "logistic__c": [71, 1025], "logistic_regress": [253, 824, 832], "logistic_regression_path": [1044, 1045], "logisticregress": [23, 28, 69, 71, 114, 132, 137, 144, 145, 146, 180, 187, 188, 189, 190, 204, 212, 213, 227, 228, 238, 240, 253, 262, 268, 273, 302, 307, 315, 316, 317, 318, 319, 321, 323, 351, 366, 380, 382, 386, 388, 393, 400, 407, 409, 411, 417, 419, 430, 435, 439, 568, 570, 598, 632, 635, 644, 653, 660, 673, 674, 675, 676, 677, 688, 701, 789, 800, 815, 824, 830, 832, 836, 837, 839, 890, 891, 893, 894, 895, 896, 912, 936, 937, 938, 977, 989, 993, 994, 1003, 1007, 1008, 1025, 1027, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "logisticregression__c": [253, 307], "logisticregressioncv": [25, 310, 394, 400, 659, 989, 994, 1040, 1041, 1042, 1044, 1045, 1046, 1050, 1051, 1053, 1054], "logisticregressionifittedlogisticregress": 302, "logisticregressionlogisticregress": [69, 114, 227, 228, 238, 240, 253, 273, 316, 319], "logit": [407, 420, 659, 660, 989], "loglik_lw": 76, "loglik_oa": 76, "loglik_r": 76, "loglike_": 533, "loglog": [76, 230], "logloss": 1047, "lognorm": [122, 155, 178, 247, 309, 1003], "logo": [0, 414, 808], "logprob": 850, "logreg": [180, 839], "logspac": [2, 10, 25, 71, 76, 100, 136, 146, 150, 155, 167, 190, 201, 202, 230, 232, 247, 253, 260, 272, 275, 287, 299, 307, 310, 339, 346, 824, 832, 988, 989, 1024, 1025, 1027], "logsumexp": [293, 1043], "loguniform": [4, 149, 267, 982, 1025, 1046], "logx": [201, 346], "lohit": 1053, "loic": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "loki": [367, 961, 993, 1044, 1047], "lomp": 378, "lon": 765, "london": [411, 418, 467], "londschien": [198, 1049, 1053], "lone": [1051, 1052], "long": [2, 9, 10, 42, 60, 122, 154, 162, 167, 169, 197, 233, 234, 236, 262, 296, 305, 316, 351, 352, 362, 367, 378, 380, 388, 392, 394, 395, 403, 408, 410, 454, 499, 539, 677, 678, 679, 804, 805, 840, 841, 842, 843, 844, 862, 863, 873, 993, 999, 1003, 1004, 1006, 1007, 1012, 1038, 1042, 1048, 1050], "long_term_trend_kernel": 154, "long_titl": 343, "longer": [0, 2, 32, 51, 112, 167, 168, 182, 301, 318, 380, 382, 410, 414, 417, 418, 450, 537, 564, 988, 992, 993, 995, 998, 1008, 1017, 1018, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "longest": 283, "longitud": [296, 305, 375, 499, 700, 765], "longpathsen": 397, "longstand": [1037, 1043], "loo": [394, 809, 1047], "look": [2, 3, 25, 51, 53, 93, 96, 98, 122, 123, 149, 154, 155, 162, 167, 168, 199, 218, 222, 226, 233, 249, 253, 254, 259, 261, 273, 301, 322, 351, 352, 362, 367, 368, 374, 375, 380, 381, 382, 384, 386, 388, 392, 393, 410, 413, 415, 416, 417, 418, 449, 489, 490, 558, 559, 560, 561, 565, 566, 603, 604, 632, 660, 693, 885, 913, 914, 915, 916, 989, 990, 1003, 1007, 1008, 1010, 1028, 1029, 1036, 1044, 1046], "lookup": [389, 958, 1045], "loop": [5, 6, 112, 122, 167, 254, 264, 351, 360, 366, 380, 381, 386, 410, 414, 419, 647, 648, 653, 654, 660, 661, 662, 663, 664, 982, 1006, 1007, 1024, 1039, 1040, 1043, 1048, 1049, 1052, 1053], "loopym": 1046, "loos": [249, 256, 1008, 1044], "looser": 190, "lope": 173, "lopez": 173, "lopusz": 1047, "lorain": 320, "lorek": 1043, "lorentzen": [0, 198, 199, 398, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "lorenz": [197, 215, 1041, 1053], "lorenz_curv": [197, 215], "lose": [201, 214, 353, 375, 394, 413, 418, 420, 941, 942, 983, 989, 1029], "losi": [0, 399, 1036], "loss": [5, 11, 22, 23, 24, 25, 77, 102, 115, 121, 122, 123, 124, 149, 150, 164, 175, 179, 187, 190, 199, 201, 202, 204, 205, 209, 215, 216, 232, 253, 267, 300, 301, 310, 318, 322, 330, 336, 337, 341, 343, 346, 351, 392, 394, 407, 408, 415, 420, 465, 466, 497, 509, 510, 533, 539, 540, 541, 544, 548, 553, 554, 555, 559, 560, 561, 562, 563, 566, 644, 647, 650, 659, 660, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 704, 707, 710, 723, 724, 735, 736, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 791, 792, 797, 801, 804, 805, 815, 827, 828, 831, 862, 863, 865, 866, 869, 870, 878, 879, 880, 885, 905, 906, 911, 912, 914, 916, 942, 946, 986, 989, 997, 1001, 1006, 1007, 1008, 1009, 1015, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "loss_": [300, 862, 863, 997, 1050], "loss_curve_": [300, 862, 863], "loss_func": 11, "loss_funct": 11, "loss_function_": [667, 669, 677, 678, 1053], "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 11, "lossfunct": [669, 677, 678, 1045], "lossi": 410, "lossili": 394, "lost": [18, 55, 80, 375, 381, 392, 990, 993], "lostanlen": 1046, "lostcoast": 1046, "lot": [2, 80, 125, 167, 201, 375, 380, 381, 382, 388, 415, 417, 804, 805, 897, 898, 982, 1005, 1007, 1008, 1013, 1014, 1018, 1028, 1029, 1036, 1041, 1043, 1044, 1045, 1046, 1048], "lot_area": 236, "lotan": 1018, "lotconfig": 119, "lotfrontag": 73, "loui": [320, 1041, 1042, 1046, 1048, 1050, 1052, 1053], "louib": [1044, 1045], "loupp": [0, 112, 113, 399, 417, 556, 557, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "lourida": 1042, "love": [1011, 1029], "low": [2, 9, 10, 35, 48, 79, 84, 95, 97, 100, 109, 112, 126, 146, 169, 190, 192, 197, 199, 201, 211, 218, 220, 226, 230, 236, 243, 244, 246, 249, 252, 253, 259, 261, 265, 266, 275, 289, 290, 301, 309, 311, 312, 321, 329, 338, 339, 351, 360, 376, 377, 380, 385, 388, 392, 394, 397, 406, 407, 408, 409, 414, 415, 418, 443, 445, 450, 469, 522, 525, 536, 583, 590, 604, 680, 693, 697, 706, 727, 743, 790, 850, 879, 886, 903, 942, 958, 961, 982, 988, 989, 990, 992, 993, 996, 998, 999, 1000, 1001, 1003, 1005, 1008, 1009, 1016, 1031, 1037, 1040, 1041, 1042, 1044, 1045, 1050, 1051], "low_cardin": 311, "low_cardinality_featur": 311, "low_cardinalityindex": 311, "low_i": 192, "low_x": 192, "lower": [3, 11, 24, 25, 29, 31, 56, 77, 84, 88, 93, 95, 100, 109, 112, 115, 118, 122, 125, 126, 144, 149, 151, 153, 155, 157, 167, 168, 169, 181, 182, 183, 187, 197, 198, 199, 200, 210, 218, 222, 229, 230, 235, 245, 249, 253, 258, 259, 261, 262, 266, 267, 269, 272, 273, 286, 287, 289, 290, 307, 310, 319, 323, 329, 339, 351, 352, 353, 357, 375, 380, 394, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 421, 445, 449, 465, 468, 499, 510, 533, 535, 542, 545, 554, 560, 561, 562, 563, 564, 589, 590, 592, 604, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 633, 634, 636, 638, 678, 680, 713, 717, 726, 729, 735, 740, 798, 799, 851, 853, 855, 856, 857, 859, 886, 905, 906, 907, 908, 909, 912, 929, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1005, 1007, 1008, 1009, 1027, 1038, 1039, 1044, 1051, 1053], "lower_bound": 258, "lower_bound_": [798, 799, 1044], "lowercas": [418, 426, 443, 444, 446, 448, 450, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 589, 590, 592, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 866, 871, 897, 898, 1049], "lowest": [73, 84, 168, 181, 248, 374, 410, 414, 636, 638, 804, 805, 808, 912, 913, 990, 993, 1009, 1051], "loyal": 1041, "loyola": [0, 370, 1049, 1050], "lo\u00efc": [0, 398, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "lp_model": [326, 327], "lpgo": [414, 810], "lpo": 811, "lprun": 386, "lr": [23, 25, 114, 132, 133, 200, 228, 229, 255, 262, 393, 400, 417, 569, 570, 571, 713, 977], "lr_": 993, "lr__c": 417, "lr_base": 262, "lrap": [740, 993], "lrjball": [1046, 1047], "ls100": 331, "ls2010": 985, "ls30": 331, "ls50": 331, "ls_pipelin": 330, "lsa": [415, 545, 1038], "lsa_vector": 352, "lshforest": [1040, 1043], "lsi": 415, "lsqr": [31, 312, 550, 673, 675, 688, 987, 1037, 1043, 1050], "lstrip": [29, 42, 60, 226, 299, 307], "lstsq": [102, 380, 658, 671], "lsturtew": 1049, "lsvc": 419, "lsvm": 173, "lsvm_score": 173, "lsvm_time": 173, "lt": [69, 70, 114, 130, 167, 248, 257, 271, 378, 380], "ltd": [253, 375, 1018], "ltg": [146, 377, 502], "ltorgo": 375, "ltsa": [218, 219, 220, 690, 694, 990], "lu": [542, 545, 941, 942, 1042, 1043, 1044, 1045, 1052, 1053, 1054], "luangkot": 1043, "luca": [1036, 1046, 1047, 1048, 1049], "lucca": 1049, "luce": 1039, "lucen": 418, "lucgiffon": 1047, "luci": [0, 265, 370, 391, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "luciano": [1044, 1051], "lucieclair": 1050, "lucija": 1044, "lucio": 1045, "lucki": 362, "lucyleeow": 1047, "ludwig": 1036, "luessi": 1038, "lui": [659, 1037, 1039, 1040, 1044, 1053], "luiz": 1050, "luk": 1045, "luka": [1040, 1047, 1053], "luke": 1044, "lukowski": 1051, "luk\u00e1\u0161": 1053, "luna": 1050, "lunt": 1039, "luo": 1040, "lupo": 1048, "luqi": 1045, "luqu": 1046, "lurk": 1036, "lustig": 989, "lutz": [1042, 1046, 1049, 1053], "luxburg": [410, 453, 463, 692], "luzgin": 1046, "lv_ep": 231, "lvdmaaten": [693, 1043], "lw": [58, 76, 77, 79, 97, 101, 102, 191, 198, 200, 203, 207, 214, 221, 246, 254, 269, 288, 305, 328, 345], "lw_cov_": 80, "lw_mse": 77, "lw_prec_": 80, "lw_score": 100, "lw_shrinkag": 77, "lwda": 451, "lx": 996, "ly": [231, 853, 855, 856, 857, 1040], "ly648499246": 1049, "lynch": [1037, 1043], "lyon": [1042, 1043], "lyra": [1037, 1040, 1041], "lyrl2004": [375, 498], "l\u00e9o": 1044, "l\u00e9on": [1007, 1050, 1051, 1052], "l\u00e9onard": [1046, 1051], "l\u00e9one": 1042, "l\u00e9oni": 1042, "l\u00f3pez": [1040, 1044, 1045, 1048], "l\u00f6fstedt": 1043, "l\u00f6ning": 1048, "m": [0, 2, 6, 9, 17, 24, 25, 42, 56, 57, 61, 62, 63, 78, 79, 93, 109, 133, 179, 197, 215, 259, 263, 296, 322, 330, 335, 345, 351, 366, 367, 374, 375, 377, 378, 384, 386, 394, 397, 406, 407, 410, 412, 415, 417, 419, 421, 445, 446, 447, 451, 458, 474, 475, 501, 514, 529, 533, 535, 537, 542, 640, 646, 650, 665, 672, 686, 687, 690, 694, 709, 717, 727, 742, 757, 759, 760, 798, 799, 851, 876, 942, 972, 973, 983, 985, 987, 989, 990, 991, 993, 994, 995, 996, 997, 1001, 1003, 1007, 1009, 1018, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "m1": [378, 405], "m11": 375, "m2": 405, "m2012": 986, "m2019": 1000, "m2cgen": 1013, "m4x": [189, 213], "m_max": 151, "ma": [80, 311, 339, 989, 1042, 1047], "maascha": 1051, "maaten": [693, 697, 990], "mabel": [1044, 1048], "mabu": 1049, "mac": [17, 311, 330, 375, 380, 709, 993], "macaulei": 311, "macbook": 1044, "macdonald": [1046, 1047], "mach": [264, 407, 414, 594, 595], "machado": [407, 724], "machin": [0, 2, 4, 6, 7, 11, 25, 61, 71, 83, 115, 137, 142, 143, 146, 149, 154, 165, 169, 171, 187, 192, 209, 212, 239, 253, 259, 262, 265, 278, 298, 303, 305, 310, 312, 317, 320, 335, 340, 343, 346, 351, 353, 366, 367, 369, 373, 374, 375, 377, 380, 383, 386, 387, 392, 393, 394, 396, 403, 407, 410, 414, 415, 417, 418, 420, 438, 440, 449, 472, 473, 479, 503, 505, 511, 517, 518, 519, 531, 533, 535, 542, 545, 556, 557, 558, 559, 560, 561, 565, 566, 567, 594, 595, 611, 612, 615, 620, 623, 635, 639, 640, 642, 644, 645, 646, 651, 652, 655, 656, 657, 658, 659, 660, 677, 683, 684, 693, 709, 714, 726, 736, 742, 744, 786, 789, 798, 830, 831, 845, 846, 851, 854, 861, 862, 863, 865, 883, 885, 891, 905, 906, 907, 908, 910, 911, 915, 916, 961, 982, 983, 985, 986, 989, 990, 991, 993, 994, 996, 999, 1000, 1001, 1003, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1029, 1030, 1031, 1033, 1036, 1038, 1048, 1049, 1050, 1051, 1053], "machinali": 1011, "maciej": 1047, "maci\u00e0": [993, 1049, 1051], "mackai": [645, 646, 989], "mackenbach": 1047, "maco": [381, 383, 397, 405, 1044, 1048, 1050], "macosx": 1036, "macro": [4, 30, 68, 143, 257, 302, 315, 326, 327, 375, 414, 708, 714, 730, 731, 739, 784, 785, 788, 789, 823, 993, 1029, 1036, 1044, 1052], "macro_roc_auc_ovo": 268, "macro_roc_auc_ovr": 268, "macroscop": 410, "macsween": [1045, 1046], "mad": [672, 1042], "madan": 1048, "made": [0, 11, 25, 68, 79, 87, 98, 109, 115, 133, 156, 167, 168, 197, 215, 236, 249, 263, 311, 316, 339, 357, 366, 375, 377, 380, 384, 394, 395, 400, 410, 417, 418, 422, 444, 447, 448, 450, 460, 497, 504, 589, 590, 592, 631, 632, 657, 666, 686, 687, 736, 784, 801, 804, 805, 815, 819, 820, 821, 842, 845, 846, 994, 999, 1009, 1013, 1018, 1026, 1028, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050], "madelon": 516, "madhura": [1045, 1047, 1048, 1051, 1052], "madinak": 1051, "madsen": [1042, 1044], "mae": [2, 11, 130, 197, 199, 559, 566, 746, 914, 916, 993, 1009, 1043, 1044, 1048, 1049], "mae_test": 167, "mae_train": 167, "maennel": 1051, "magali": 1050, "magazin": [79, 419], "magda": 1047, "magenta": [76, 124], "maggi": 1050, "maggiecheg": [1046, 1050], "maggio": [1047, 1048, 1049], "magic": [233, 381, 386, 420, 617, 622, 625], "magnesium": 377, "magnitud": [2, 102, 111, 150, 162, 167, 214, 236, 264, 305, 310, 318, 366, 375, 386, 410, 417, 420, 614, 653, 705, 885, 989, 993, 997, 1003, 1007, 1009, 1038, 1045, 1054], "mahajan": [1044, 1046, 1053], "mahal": 78, "mahal_emp_cov": 78, "mahal_robust_cov": 78, "mahalanobi": [7, 75, 79, 81, 100, 164, 200, 410, 412, 451, 458, 470, 471, 472, 473, 474, 475, 476, 477, 700, 779, 780, 781, 987, 996, 999, 1015, 1044, 1047, 1048], "mahalanobisdist": 700, "mahapatra": 1043, "mahdavi": 640, "maheshakya": [0, 1039, 1040, 1041], "mahieux": 1018, "mahout": 842, "mai": [0, 6, 17, 23, 37, 42, 44, 54, 69, 84, 93, 119, 120, 125, 146, 153, 155, 157, 167, 170, 173, 177, 181, 186, 201, 203, 223, 233, 236, 262, 264, 266, 267, 273, 299, 310, 327, 339, 343, 346, 351, 352, 353, 362, 366, 367, 368, 372, 374, 375, 376, 377, 379, 380, 382, 384, 385, 388, 392, 394, 395, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 433, 440, 441, 442, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 460, 463, 466, 470, 473, 483, 484, 485, 488, 489, 490, 497, 509, 510, 516, 535, 536, 539, 541, 542, 545, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 575, 582, 595, 598, 603, 611, 612, 618, 621, 635, 636, 638, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 680, 682, 685, 687, 689, 690, 692, 693, 694, 696, 698, 706, 712, 713, 716, 717, 719, 720, 722, 723, 724, 725, 727, 739, 757, 764, 786, 787, 801, 803, 804, 805, 806, 815, 816, 817, 820, 821, 826, 830, 833, 838, 839, 840, 841, 842, 844, 847, 848, 849, 851, 853, 855, 856, 857, 863, 864, 865, 868, 870, 880, 882, 883, 884, 885, 886, 888, 894, 897, 898, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 923, 945, 946, 961, 982, 983, 985, 987, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1020, 1026, 1027, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "maikia": [5, 123, 130, 162, 1044, 1045, 1047, 1048], "mail": [199, 310, 375, 380, 384, 388, 392, 395, 1011, 1044, 1045], "mailhot": 1036, "mailman": 388, "main": [7, 30, 60, 84, 97, 119, 164, 226, 268, 281, 314, 346, 351, 366, 367, 368, 373, 378, 380, 382, 384, 386, 388, 392, 393, 394, 396, 397, 407, 408, 410, 415, 417, 418, 420, 504, 526, 531, 550, 551, 626, 714, 835, 905, 906, 982, 990, 992, 993, 1000, 1005, 1014, 1017, 1026, 1029, 1036, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "mainak": 1043, "maingret": 1047, "mainli": [25, 51, 109, 112, 149, 268, 278, 366, 382, 407, 612, 995, 1000], "maint": 384, "maint_tool": 384, "maintain": [53, 202, 215, 218, 233, 259, 367, 369, 379, 383, 386, 387, 388, 392, 394, 395, 397, 410, 417, 441, 443, 874, 875, 881, 882, 885, 890, 893, 894, 896, 989, 990, 1003, 1013, 1014, 1020, 1031, 1051], "mainten": [0, 380, 388, 392, 397, 402, 989, 1014, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mainy": 1048, "mair": 636, "mairal": [415, 532, 538], "maisonneuv": 1048, "maithreyi": 1046, "maj": 570, "major": [8, 13, 32, 115, 266, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 323, 343, 353, 366, 375, 379, 380, 383, 386, 392, 395, 403, 410, 414, 416, 418, 552, 570, 571, 695, 917, 919, 993, 996, 1007, 1014, 1018, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "make": [0, 2, 5, 6, 9, 11, 13, 15, 18, 19, 23, 24, 25, 37, 38, 41, 42, 54, 59, 60, 65, 71, 98, 109, 115, 119, 122, 125, 128, 143, 146, 149, 154, 157, 166, 167, 168, 169, 176, 181, 183, 186, 189, 190, 191, 193, 197, 198, 199, 201, 203, 215, 219, 228, 230, 232, 233, 234, 236, 243, 245, 248, 249, 253, 254, 259, 261, 262, 268, 269, 270, 273, 281, 292, 301, 305, 306, 311, 319, 321, 339, 348, 351, 352, 353, 362, 366, 367, 368, 369, 374, 375, 378, 379, 381, 382, 383, 385, 386, 388, 392, 394, 397, 400, 403, 406, 407, 410, 411, 412, 414, 415, 417, 418, 419, 422, 441, 442, 443, 444, 446, 448, 450, 452, 453, 454, 459, 460, 461, 463, 489, 504, 515, 516, 523, 524, 528, 533, 535, 542, 552, 553, 556, 557, 562, 563, 584, 585, 608, 609, 632, 650, 656, 657, 672, 692, 696, 731, 738, 743, 769, 770, 782, 798, 799, 801, 803, 806, 812, 816, 817, 820, 821, 827, 828, 835, 836, 839, 872, 881, 884, 885, 889, 893, 895, 896, 897, 898, 911, 919, 925, 926, 936, 942, 948, 954, 979, 982, 983, 985, 987, 989, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1020, 1025, 1027, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "make_": 1045, "make_biclust": [19, 514, 1038], "make_blob": [22, 24, 31, 36, 40, 41, 42, 47, 53, 54, 55, 57, 58, 60, 61, 62, 89, 189, 209, 226, 246, 308, 316, 319, 337, 340, 341, 347, 376, 382, 383, 417, 516, 697, 711, 793, 794, 1044, 1047, 1050], "make_cbar": 270, "make_checkerboard": [18, 512, 1038], "make_circl": [29, 42, 60, 98, 128, 223, 299, 300, 307, 328, 376, 1037, 1044, 1047], "make_classif": [23, 25, 29, 89, 113, 114, 116, 143, 145, 256, 262, 270, 271, 293, 299, 307, 315, 317, 321, 323, 346, 362, 376, 383, 405, 409, 417, 438, 439, 488, 513, 554, 556, 558, 565, 606, 608, 667, 698, 699, 701, 703, 800, 823, 824, 829, 830, 832, 835, 862, 865, 905, 912, 982, 993, 994, 1003, 1008, 1042, 1043, 1044, 1046], "make_column_selector": [69, 119, 130, 236, 411, 465, 468, 1046], "make_column_transform": [119, 130, 167, 228, 316, 411, 465, 467, 1044], "make_data": [32, 59], "make_dataset": 1045, "make_default": 963, "make_ellips": 245, "make_estim": 236, "make_friedman1": [376, 417, 540, 544, 594, 595, 633], "make_friedman2": [376, 612, 614, 615, 616, 617, 618, 622, 625, 626], "make_friedman3": 376, "make_gaussian_quantil": [89, 109, 111, 376, 471, 475, 476, 477, 482, 521], "make_hastie_10_2": [124, 263, 376, 417, 560, 1000], "make_heatmap": 270, "make_low_rank_matrix": [321, 323, 525], "make_ml_clf": 90, "make_moon": [29, 42, 60, 226, 259, 299, 300, 307, 376, 982, 1043, 1047], "make_multilabel_classif": [90, 234, 376, 516, 537, 789, 836, 837, 993, 1038, 1039, 1041, 1047], "make_pipelin": [2, 29, 56, 84, 114, 119, 130, 142, 143, 146, 161, 162, 167, 168, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 226, 227, 228, 236, 237, 238, 240, 253, 256, 266, 273, 283, 292, 299, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 352, 362, 393, 400, 411, 414, 568, 677, 679, 857, 865, 890, 891, 893, 894, 895, 896, 905, 906, 907, 908, 910, 911, 983, 996, 1003, 1007, 1008, 1039, 1046, 1049], "make_plot": 305, "make_regress": [8, 73, 176, 178, 179, 183, 200, 201, 272, 316, 322, 362, 376, 382, 383, 393, 555, 557, 561, 566, 607, 609, 610, 636, 647, 648, 650, 652, 653, 654, 656, 661, 662, 663, 664, 665, 666, 668, 672, 680, 682, 683, 684, 686, 687, 688, 863, 906, 993, 994, 996], "make_s_curv": [218, 223], "make_scor": [11, 122, 125, 253, 263, 400, 409, 414, 801, 823, 827, 828, 993, 1045, 1053], "make_sparse_coded_sign": [196, 532, 538, 546, 547, 1050, 1052], "make_sparse_spd_matrix": [80, 479, 530, 1053], "make_sparse_uncorrel": 376, "make_spd_matrix": 528, "make_subplot": 115, "make_swiss_rol": [65, 222, 1050], "make_union": [411, 864, 1039, 1043], "makedir": 1043, "maker": [166, 167], "makhija": 1051, "makoeppel": 1049, "maksym": 1051, "maladier": 1051, "maladi\u00e8r": [1051, 1052], "malcolm": 1044, "maldonado": [1046, 1049], "male": [69, 167, 320, 385, 878, 879, 1003], "malem": 1053, "malet": 1036, "malform": [15, 1040], "malic": [310, 377], "malic_acid": 7, "malici": 403, "malign": [146, 377, 501], "malik": [410, 453, 463, 692], "mallat": [665, 686, 687, 989], "mallatpursuit93": [665, 686, 687], "mallow": [732, 1042], "maloo": [1044, 1045], "malt": [198, 1049, 1050, 1051, 1053], "maltimor": 1046, "malu": 215, "malzer": 447, "mal\u00e9zieux": 1049, "mamba": 403, "mame": 1053, "mammal": 9, "mammalian": 415, "man": [415, 591, 770, 840, 844, 991, 993, 995], "manag": [0, 84, 240, 365, 374, 378, 381, 382, 384, 388, 392, 394, 395, 403, 417, 451, 469, 627, 903, 961, 987, 1009, 1013, 1014, 1018, 1029, 1031, 1049, 1052], "manaileng": 1049, "mandal": 1046, "mandatori": [380, 418, 430, 632], "mandatorili": 1043, "mandera": 1039, "mandi": [1047, 1050], "mandjev": 1050, "mandyam": 1046, "mangasarian": [146, 377], "mangipudi": 1042, "manh": 1044, "manhattan": [410, 442, 446, 451, 458, 700, 763, 772, 779, 780, 781, 852, 991, 996, 1040, 1045, 1052], "manhattan_dist": [451, 458, 689, 763, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 1036, 1046, 1051, 1052], "manhattandist": 700, "mani": [2, 5, 8, 17, 53, 54, 72, 76, 80, 109, 115, 116, 117, 118, 123, 142, 146, 169, 197, 218, 230, 244, 252, 253, 259, 266, 267, 271, 283, 305, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 351, 362, 366, 368, 375, 377, 379, 380, 393, 394, 395, 397, 403, 406, 407, 410, 411, 412, 415, 417, 418, 419, 420, 422, 504, 542, 554, 555, 558, 559, 560, 561, 565, 566, 567, 607, 610, 628, 640, 651, 655, 659, 660, 667, 668, 669, 677, 678, 679, 693, 696, 775, 779, 801, 805, 815, 862, 863, 878, 883, 885, 905, 913, 914, 915, 916, 982, 983, 985, 989, 990, 992, 993, 994, 995, 996, 999, 1000, 1003, 1006, 1008, 1010, 1012, 1013, 1014, 1018, 1027, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052], "manideep": 1054, "manifest": [388, 990, 996], "manifold": [10, 37, 50, 65, 114, 221, 222, 223, 224, 230, 283, 292, 293, 315, 319, 320, 328, 369, 373, 394, 410, 415, 417, 503, 526, 531, 545, 550, 567, 854, 866, 875, 898, 928, 996, 1015, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1053], "manimaran": [1045, 1047, 1048, 1049, 1050], "manipul": [374, 405, 508, 961, 1013, 1042], "manish": 1047, "maniteja": [1042, 1043, 1044], "mankoo": 1051, "mann": 1046, "mannbi": 1044, "manner": [2, 73, 93, 143, 168, 173, 245, 319, 320, 367, 380, 386, 410, 415, 417, 418, 710, 845, 846, 982, 993, 1009, 1039, 1046], "mannila": 1005, "manning2008": 993, "manoharan": [1043, 1044], "manoj": [0, 40, 146, 179, 399, 1039, 1040, 1041, 1042, 1043], "manojkumarsivaraj334": 40, "manraj": 1043, "mansi": 1051, "mansingh": 1050, "mansouri": 1052, "mantovani": 1051, "manu": 375, "manual": [2, 44, 53, 167, 168, 170, 198, 208, 261, 283, 329, 337, 351, 353, 366, 367, 375, 380, 384, 385, 392, 393, 397, 403, 410, 414, 415, 416, 438, 450, 568, 800, 823, 855, 878, 884, 982, 987, 988, 989, 992, 993, 996, 1003, 1014, 1020, 1021, 1029, 1044, 1046, 1052, 1054], "manuel": [1036, 1040, 1044, 1045, 1048, 1049], "manufactur": [167, 417], "manvendra": [1042, 1043], "maocx": 1046, "map": [2, 3, 8, 9, 15, 17, 24, 51, 84, 98, 113, 121, 124, 128, 149, 164, 173, 197, 215, 218, 220, 225, 233, 236, 241, 260, 263, 268, 275, 291, 294, 296, 304, 305, 313, 330, 339, 343, 352, 353, 374, 375, 381, 392, 394, 400, 403, 407, 408, 410, 411, 414, 415, 417, 418, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 497, 499, 503, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 763, 766, 798, 799, 800, 801, 804, 805, 812, 813, 815, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 893, 894, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 947, 950, 951, 982, 985, 990, 993, 995, 1005, 1008, 1009, 1015, 1024, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "mapd": 993, "mape": [11, 747, 993], "mape_cv_mean": 119, "mape_cv_std": 119, "mapi": 11, "mar": [10, 1011], "marc": [1043, 1045, 1046, 1052], "march": [154, 727, 757, 993, 1036, 1040, 1044, 1046, 1051], "marchand": 1050, "marchman": [1037, 1038], "marco": [1042, 1044, 1045, 1049, 1050, 1051, 1054], "marcofalk": 1043, "marcogorelli": [1044, 1045], "marcolini": 1049, "marcom": 1050, "marcu": [1044, 1053], "mare": 1053, "marek": [1036, 1053], "maren": [0, 370, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "margeta": 1044, "margin": [2, 10, 23, 25, 89, 111, 121, 138, 150, 151, 152, 153, 154, 155, 164, 167, 168, 175, 207, 208, 210, 216, 234, 236, 259, 278, 305, 308, 311, 334, 335, 337, 338, 339, 341, 343, 347, 348, 349, 377, 407, 408, 415, 417, 420, 513, 611, 612, 632, 646, 677, 736, 834, 882, 894, 907, 910, 989, 993, 995, 999, 1000, 1003, 1007, 1008, 1015, 1027, 1043, 1045], "marguli": 1046, "mari": [68, 1044, 1045, 1046, 1047, 1050], "maria": [5, 123, 130, 146, 162, 410, 1047, 1048, 1049, 1050, 1051], "mariam": 1048, "mariana": 1047, "mariangela": 1049, "mariano": 259, "mariel": 1047, "marielaraj": 1049, "marija": [1047, 1048], "marijn": 1048, "marin": 529, "marina": 410, "marinelm": 1045, "mario": [407, 1040, 1042, 1050, 1051, 1052], "marit": [322, 497], "mari\u00e9": [0, 370, 1045, 1046, 1047, 1048, 1049, 1050], "mark": [32, 56, 90, 141, 162, 263, 270, 372, 380, 382, 384, 388, 389, 394, 410, 536, 608, 609, 612, 633, 659, 858, 859, 900, 901, 918, 932, 937, 942, 989, 1018, 1031, 1036, 1037, 1042, 1044, 1045, 1052, 1053, 1054], "markdown": 383, "marker": [8, 9, 15, 25, 28, 32, 35, 36, 40, 50, 53, 56, 57, 58, 61, 62, 83, 89, 90, 95, 115, 129, 156, 157, 173, 185, 190, 192, 194, 195, 197, 199, 200, 212, 214, 219, 243, 245, 246, 253, 254, 259, 261, 262, 263, 290, 305, 310, 328, 356, 380, 384, 418, 1044, 1046, 1047, 1052], "markeredgecolor": [47, 53, 59, 61, 62], "markeredgewidth": [78, 263], "markerfacecolor": [47, 53, 59, 61, 62], "markers": [47, 53, 56, 59, 61, 62, 122, 152, 156, 229, 253, 319], "markerstyl": 253, "market": [1, 14, 44, 50, 64, 125, 164, 218, 219, 222, 410, 412, 455, 473, 690, 1015, 1018, 1023], "marketplac": 1018, "markham": [1040, 1047, 1048], "markiwanchyshyn": 1044, "marko": [1036, 1045, 1046, 1052], "markou": 1049, "markov": [420, 612, 998, 1013, 1036], "markovtsev": 1044, "marktab": 1041, "marku": [410, 451, 458, 1044, 1046, 1047, 1048], "marmo": [0, 371, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "maron": [410, 443], "marr": 167, "marr_unmarri": 167, "marreddi": 1050, "marri": 167, "marriott": 10, "marsgui": 1044, "marsh": 1047, "marshal": 377, "marsi": 1039, "marsland": 531, "marslast": 531, "marszalek": [759, 760, 991], "mart": [10, 1046], "martel": 1050, "martha": 311, "martian": 1046, "martin": [0, 370, 722, 724, 725, 989, 993, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "martin1997": 993, "martina": [1046, 1048], "martinbpr": [1041, 1042], "martinez": 1043, "martino": 1041, "martinosorb": 1041, "martinsson": [15, 536, 542, 942], "martynov": 1049, "mart\u00edn": [1049, 1050], "marufo": 1051, "marufur": 1043, "marvin": [1051, 1052], "marwaha": 1044, "marx": 1003, "maryanmorel": [1041, 1042], "marzinotto": [1044, 1045], "mar\u00eda": [1050, 1051, 1052], "mas_vnr_typ": 236, "masafumi": 1041, "masanori": [1051, 1052], "masashi": [1046, 1048], "masecchia": 1036, "mash": 418, "mask": [12, 40, 64, 117, 197, 205, 236, 257, 258, 330, 389, 394, 411, 417, 465, 470, 475, 562, 563, 582, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 630, 631, 633, 634, 650, 672, 801, 804, 805, 815, 965, 983, 1000, 1036, 1039, 1041, 1042, 1044, 1046, 1054], "mask_al": 983, "mask_false_neg": 253, "mask_false_posit": 253, "mask_missing_values_onli": 983, "mask_out": 12, "mask_test": 215, "mask_train": [168, 215], "mask_true_neg": 253, "mask_true_posit": 253, "mask_y_pr": 28, "maskani": [1044, 1046, 1047, 1048], "masked_arrai": [339, 801, 815], "masked_equ": 80, "maskedarrai": [263, 1042], "mason": 1040, "mass": [146, 237, 377, 447, 798, 989, 1000], "massachusett": 375, "massia": [0, 1047, 1049, 1050], "massich": [1043, 1044, 1045, 1046], "massil": 1042, "masstran": 1045, "master": [10, 283, 320, 380, 384, 1018, 1041], "masurel": 1037, "masvnrarea": [73, 130], "masvnrtyp": [119, 130], "mat": [374, 418], "match": [2, 18, 35, 52, 93, 94, 96, 99, 102, 115, 164, 173, 175, 197, 216, 220, 229, 236, 272, 343, 353, 375, 378, 382, 384, 410, 415, 417, 418, 431, 450, 465, 467, 509, 510, 516, 527, 532, 538, 543, 549, 552, 568, 569, 573, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 659, 665, 666, 686, 687, 700, 704, 705, 706, 714, 716, 720, 735, 779, 780, 781, 787, 845, 846, 850, 854, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 905, 912, 918, 929, 961, 990, 992, 993, 995, 996, 1015, 1016, 1020, 1029, 1031, 1036, 1042, 1043, 1044, 1046, 1048, 1049, 1052], "matchingdist": 700, "matchmak": 1018, "matcovici": 1046, "mate": 351, "matem\u00e1tica": 989, "mateo": 1049, "materi": [12, 167, 322, 395, 542, 582, 895, 896, 1012], "matern": [158, 420, 1047, 1051], "mateusz": [1040, 1047, 1048, 1053], "math": [47, 68, 125, 146, 236, 259, 260, 377, 397, 765], "mathbb": [93, 112, 152, 413, 993, 1000, 1008], "mathbf": [152, 343, 415, 989, 993, 997, 998, 1007], "mathcal": [201, 346, 415, 417, 628, 697, 985, 987, 989, 993, 1007, 1049], "mathemat": [109, 167, 185, 214, 262, 372, 377, 380, 394, 396, 410, 412, 415, 416, 420, 550, 551, 558, 565, 636, 647, 657, 793, 794, 799, 863, 907, 910, 913, 915, 989, 993, 997, 1003, 1005, 1016, 1018, 1027, 1031, 1050], "matheu": 1042, "mathew": 1051, "mathi": 1049, "mathia": 1050, "mathieu": [0, 22, 46, 98, 188, 198, 219, 234, 260, 351, 399, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049], "mathrm": [410, 412, 415, 419, 989, 1009], "mathschi": 1048, "mathur": [1043, 1045, 1046, 1051, 1052, 1054], "mathurin": [0, 1047, 1049, 1050], "mathurinm": [1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matjansen": 1050, "mato": 1048, "matplotlib": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 374, 380, 387, 397, 402, 439, 503, 632, 633, 698, 699, 701, 702, 703, 807, 824, 919, 988, 1013, 1023, 1024, 1025, 1026, 1027, 1028, 1033, 1045, 1048, 1049, 1050, 1051, 1054], "matric": [32, 37, 38, 78, 80, 93, 202, 244, 245, 247, 248, 249, 283, 296, 316, 322, 330, 351, 352, 372, 374, 382, 383, 392, 393, 394, 410, 411, 412, 413, 415, 418, 419, 425, 451, 452, 454, 465, 474, 482, 483, 484, 485, 527, 535, 536, 539, 541, 542, 545, 548, 550, 551, 556, 557, 564, 567, 582, 583, 590, 644, 647, 648, 653, 654, 659, 665, 673, 675, 688, 755, 761, 769, 775, 779, 780, 781, 782, 793, 798, 799, 831, 849, 852, 857, 868, 872, 874, 877, 880, 882, 883, 885, 888, 890, 892, 894, 895, 896, 897, 898, 907, 908, 910, 911, 921, 942, 948, 957, 964, 966, 967, 983, 985, 987, 990, 991, 992, 994, 996, 997, 1005, 1007, 1008, 1013, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matrix": [1, 4, 5, 7, 11, 12, 14, 17, 18, 19, 30, 32, 37, 39, 42, 52, 60, 68, 77, 78, 79, 80, 83, 93, 94, 95, 103, 156, 164, 170, 175, 183, 198, 202, 216, 223, 227, 230, 231, 233, 248, 251, 253, 266, 276, 295, 301, 319, 322, 323, 326, 327, 343, 351, 352, 353, 360, 366, 369, 375, 376, 377, 380, 382, 386, 389, 392, 393, 394, 406, 411, 412, 413, 418, 419, 420, 421, 422, 432, 433, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 455, 458, 460, 461, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 493, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 520, 522, 524, 525, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 594, 595, 604, 605, 606, 607, 608, 609, 610, 612, 621, 630, 631, 632, 634, 636, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 713, 714, 715, 716, 717, 719, 723, 730, 731, 732, 735, 739, 740, 741, 742, 755, 756, 759, 760, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 788, 789, 793, 794, 797, 798, 799, 800, 801, 804, 805, 815, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 874, 876, 877, 878, 880, 882, 883, 884, 885, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 923, 924, 925, 926, 931, 939, 940, 941, 942, 943, 946, 947, 948, 956, 957, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 983, 985, 987, 989, 990, 994, 995, 996, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1028, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "matrixorz": 1039, "matshow": [18, 19, 64, 117, 144, 301, 503], "matsubara": 993, "matt": [68, 1039, 1040, 1041, 1046, 1047, 1051, 1052], "matteo": [1040, 1042, 1050], "matter": [102, 249, 343, 362, 410, 411, 417, 568, 669, 677, 679, 989, 1040], "matthew": [379, 385, 537, 744, 1036, 1039, 1043, 1045, 1049, 1050], "matthews_corrcoef": [993, 1036, 1042, 1043, 1050], "matthia": [1036, 1038, 1039, 1042, 1043, 1044, 1048, 1051], "matthieu": [0, 399, 1036, 1040, 1051], "matti": [1037, 1040, 1041], "matur": [380, 1013, 1014], "mat\u00e9rn": 620, "mat\u00eda": 1050, "maud": 1039, "mauna": 154, "maura": 1047, "mauroantonioserrano": 1051, "mavani": 1044, "mavroforaki": [1040, 1042], "max": [2, 6, 8, 9, 10, 11, 15, 17, 23, 25, 29, 31, 38, 42, 50, 56, 60, 65, 70, 71, 75, 77, 80, 81, 93, 96, 100, 103, 109, 111, 118, 124, 128, 136, 137, 138, 141, 142, 146, 151, 153, 154, 162, 164, 167, 179, 184, 185, 186, 190, 192, 199, 200, 203, 211, 213, 215, 221, 230, 234, 257, 258, 259, 270, 272, 281, 283, 285, 289, 290, 294, 296, 299, 301, 305, 307, 308, 310, 318, 323, 329, 331, 347, 366, 410, 412, 415, 470, 471, 472, 473, 474, 475, 476, 477, 478, 513, 537, 556, 557, 558, 559, 560, 561, 564, 565, 566, 607, 628, 632, 633, 649, 650, 670, 673, 675, 681, 692, 693, 697, 700, 705, 706, 758, 793, 794, 801, 862, 863, 874, 875, 877, 884, 891, 892, 913, 914, 915, 916, 961, 989, 991, 996, 1003, 1007, 1008, 1015, 1027, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "max_": [410, 993], "max_abs_": 874, "max_abs_scal": 1003, "max_bin": [318, 319, 417, 562, 563, 1053], "max_categori": [311, 319, 321, 878, 879, 1003, 1050, 1052], "max_cluster_s": 447, "max_column": 215, "max_degre": [880, 1049], "max_depth": [5, 29, 110, 111, 114, 118, 119, 120, 121, 122, 123, 124, 128, 129, 131, 161, 219, 256, 271, 278, 317, 318, 356, 358, 359, 360, 393, 394, 409, 417, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 712, 804, 805, 829, 913, 914, 915, 916, 917, 918, 919, 982, 1000, 1009, 1045, 1047], "max_df": [13, 260, 330, 351, 352, 589, 592, 1047, 1054], "max_dist": 230, "max_doc_update_it": 537, "max_ep": [410, 451, 456, 457, 458], "max_error": [993, 1045], "max_estim": 113, "max_featur": [13, 29, 113, 124, 235, 256, 271, 317, 417, 419, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 589, 592, 598, 913, 914, 915, 916, 982, 989, 1036, 1038, 1039, 1043, 1044, 1047, 1050, 1053], "max_features_": [560, 561, 598, 913, 914, 915, 916, 1050], "max_fpr": [789, 993, 1044], "max_fun": [862, 863, 1046], "max_i": [234, 995], "max_idf": 1049, "max_it": [2, 6, 11, 13, 15, 23, 25, 28, 29, 70, 71, 93, 96, 114, 115, 119, 125, 132, 136, 137, 158, 161, 162, 167, 168, 176, 183, 189, 190, 204, 205, 206, 209, 210, 212, 218, 219, 220, 221, 223, 237, 238, 243, 244, 245, 246, 249, 272, 293, 299, 300, 301, 311, 317, 318, 319, 326, 327, 336, 351, 352, 386, 394, 417, 422, 441, 444, 448, 449, 450, 455, 460, 462, 472, 473, 479, 483, 484, 485, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 562, 563, 628, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 673, 675, 677, 678, 679, 680, 681, 683, 684, 688, 689, 690, 691, 693, 694, 695, 798, 799, 815, 854, 862, 863, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 983, 985, 989, 996, 997, 1006, 1007, 1025, 1029, 1037, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054], "max_iter": 327, "max_iter_list": 125, "max_iter_predict": 611, "max_j": [647, 653], "max_leaf_nod": [109, 115, 124, 197, 318, 360, 417, 558, 559, 560, 561, 562, 563, 565, 566, 567, 913, 914, 915, 916, 1039, 1045, 1047], "max_n": [589, 590, 592, 1036], "max_n_alpha": [652, 656], "max_nbyt": 959, "max_no_improv": [40, 59, 62, 450, 538, 539, 540, 547, 1050, 1051], "max_patch": [48, 418, 584, 585, 1044], "max_resourc": [122, 804, 805, 982], "max_resources_": [804, 805], "max_sampl": [126, 161, 417, 556, 557, 558, 559, 564, 565, 566, 635, 1046, 1049, 1052], "max_samples_": 564, "max_skip": 672, "max_subpopul": [214, 680, 1050], "max_thread": [367, 381], "max_train_s": [2, 11, 414, 822, 1043], "max_trial": [672, 989], "max_val": 929, "max_valu": [628, 1047, 1048], "max_x": 234, "maxabs_scal": [394, 874, 1044], "maxabsscal": [368, 405, 869, 890, 983, 1003, 1041, 1044, 1045, 1046, 1047, 1052, 1053], "maxent": [659, 660, 989], "maxent_du": 659, "maxi": 1051, "maxim": [83, 84, 88, 93, 103, 122, 176, 248, 249, 253, 260, 264, 268, 269, 273, 293, 310, 317, 339, 343, 356, 360, 377, 394, 406, 409, 410, 413, 415, 417, 419, 420, 550, 595, 611, 612, 645, 646, 649, 670, 680, 681, 721, 801, 804, 805, 815, 874, 880, 890, 987, 989, 992, 993, 996, 998, 1008, 1024, 1027, 1039, 1041, 1046, 1049, 1051, 1054], "maxima": 410, "maximesaur": [1051, 1052], "maximis": [136, 244, 291, 987, 996], "maximum": [2, 6, 9, 25, 31, 35, 55, 76, 77, 78, 79, 80, 89, 95, 109, 111, 114, 115, 118, 121, 125, 150, 152, 156, 164, 175, 185, 216, 236, 253, 269, 285, 289, 290, 296, 305, 334, 335, 337, 338, 341, 343, 349, 352, 356, 358, 359, 366, 375, 385, 386, 393, 394, 406, 407, 410, 412, 413, 415, 417, 418, 420, 421, 422, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 455, 458, 460, 462, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 484, 485, 499, 510, 512, 513, 514, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 584, 585, 598, 611, 628, 632, 633, 636, 638, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 677, 678, 679, 680, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 717, 745, 782, 798, 801, 804, 805, 807, 815, 822, 829, 854, 861, 862, 863, 869, 870, 874, 875, 877, 880, 881, 882, 884, 893, 894, 899, 900, 901, 902, 905, 906, 910, 913, 914, 915, 916, 917, 919, 922, 929, 982, 988, 989, 990, 992, 993, 995, 996, 997, 999, 1003, 1007, 1008, 1009, 1015, 1028, 1043, 1044, 1046, 1047, 1050, 1051, 1053], "maxin": [1046, 1047], "maxsiz": 618, "maxval": [512, 514], "maxwel": [0, 370, 1046, 1049, 1050, 1051, 1052], "maxwelllzh": 1051, "may_share_memori": 1053, "mayb": [72, 301, 394, 418, 1008, 1014], "mayer": [417, 1048, 1050, 1053], "mayer2022": 417, "mayilvahanan": 410, "mayorov": [1039, 1040, 1041, 1042], "mayur": 1044, "mazari": 1044, "mb": [6, 14, 20, 26, 33, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 230, 241, 250, 253, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 351, 353, 354, 361, 375, 386, 497, 907, 908, 909, 910, 911, 1008, 1015, 1032], "mbilling": 1041, "mbillingr": 1046, "mbk": [40, 62], "mbk_means_cluster_cent": 62, "mbk_means_label": 62, "mbk_means_labels_uniqu": 40, "mblondel": [22, 46, 188, 219, 260, 351, 374, 509], "mbnmf": 13, "mc4229": 1047, "mc_clf": 1000, "mcar": 125, "mcc": [744, 993, 1050], "mccall": 68, "mccallum": [840, 995], "mccarthi": [1036, 1044], "mcclish": [268, 789], "mcconaghi": 1018, "mccullagh": 989, "mcculloh": [1041, 1042], "mcd": [10, 78, 79, 412, 470, 475], "mcdermott": [1038, 1053], "mcdonald": 10, "mcdowel": 1044, "mcfadden": 993, "mcfee": [1041, 1042], "mcgibbon": [70, 1038, 1039, 1042], "mcgushion": 1045, "mcinn": [410, 1042, 1043, 1044, 1046, 1047, 1052], "mcivor": [1051, 1052], "mcm": [755, 993], "mcm_": 755, "mcmahon": 1053, "mcsherri": [727, 757, 993], "mctiernan": [1050, 1051], "mcve": [385, 392], "md": [218, 219, 220, 221, 384, 689, 693, 695, 1030, 1031, 1036, 1048, 1051], "md5": 1048, "md5_checksum": 374, "md_scale": 218, "mdarii": 1052, "mdbecker": 1018, "mdi": [115, 116, 123, 164, 165, 170, 171, 417, 465, 497, 565, 631, 635, 831, 865, 879, 1001, 1015], "mdi_import": [169, 170], "mds_result": 695, "me": 351, "me1": 278, "me2": 278, "me3": 278, "mea": 56, "mean": [2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 22, 23, 25, 32, 34, 35, 36, 38, 40, 42, 44, 47, 48, 51, 52, 53, 58, 66, 69, 77, 78, 79, 80, 84, 88, 90, 93, 96, 97, 98, 99, 100, 109, 111, 112, 115, 118, 119, 122, 123, 125, 130, 131, 132, 145, 146, 149, 154, 156, 158, 161, 164, 167, 168, 177, 179, 186, 188, 190, 193, 194, 197, 199, 203, 204, 206, 212, 213, 214, 215, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 243, 244, 245, 246, 248, 249, 253, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 281, 283, 294, 305, 308, 310, 311, 312, 315, 318, 321, 329, 339, 342, 343, 346, 348, 350, 351, 353, 354, 362, 366, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 400, 406, 407, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 433, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 502, 503, 505, 507, 513, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 589, 590, 591, 592, 595, 598, 603, 607, 608, 609, 610, 611, 612, 614, 623, 628, 629, 631, 633, 634, 635, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 685, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 708, 710, 713, 714, 717, 718, 725, 727, 730, 731, 732, 737, 738, 739, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 775, 779, 780, 782, 784, 785, 786, 788, 789, 791, 792, 793, 794, 796, 798, 799, 800, 801, 804, 805, 807, 815, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 858, 859, 861, 862, 863, 864, 866, 867, 869, 870, 874, 875, 877, 881, 883, 885, 886, 891, 893, 894, 896, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 921, 925, 926, 928, 967, 968, 974, 978, 982, 983, 984, 987, 989, 990, 992, 995, 996, 997, 998, 1000, 1001, 1006, 1007, 1008, 1009, 1013, 1015, 1018, 1024, 1027, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mean_": [94, 263, 533, 534, 535, 540, 542, 544, 885, 1003, 1028, 1044], "mean_absolute_error": [11, 197, 199, 215, 405, 993, 1037, 1039, 1055], "mean_absolute_percentage_error": [11, 119, 993, 1048, 1050], "mean_auc": 269, "mean_change_tol": 537, "mean_fit_tim": [115, 285, 801, 815], "mean_fpr": 269, "mean_gamma_devi": [993, 1046], "mean_impute_scor": 162, "mean_l1_ratio": 1039, "mean_pinball_loss": [11, 122, 125, 318, 989, 993, 1049], "mean_pinball_loss_95p": 993, "mean_poisson_devi": [197, 993, 1046], "mean_precis": 257, "mean_precision_": 798, "mean_precision_prior": [243, 249, 798], "mean_precision_prior_": 798, "mean_predict": [11, 156], "mean_predictions_gpr": 149, "mean_prior": 798, "mean_prior_": 798, "mean_recal": 257, "mean_scor": [70, 268, 271, 352, 1049], "mean_score_tim": [115, 257, 260, 801, 815], "mean_shift": [1041, 1044], "mean_square_error": 1037, "mean_squared_error": [5, 120, 122, 123, 193, 197, 199, 201, 203, 215, 362, 417, 753, 993, 1037, 1039, 1046, 1047, 1053], "mean_squared_log_error": [993, 1043, 1049, 1053], "mean_test_": 263, "mean_test_precis": [257, 263], "mean_test_recal": 257, "mean_test_scor": [69, 70, 71, 80, 115, 136, 145, 248, 258, 259, 260, 267, 270, 271, 285, 339, 473, 595, 801, 815, 982, 1042, 1049], "mean_tim": 1042, "mean_tpr": [268, 269], "mean_train_precis": [801, 815], "mean_train_scor": [801, 815, 1042], "mean_tweedie_devi": [215, 405, 993, 1046, 1055], "mean_variance_axi": [389, 1042, 1049], "mean_y_pr": 154, "meaning": [35, 170, 223, 292, 353, 406, 409, 414, 418, 419, 549, 730, 731, 739, 784, 785, 788, 854, 997, 1007, 1008, 1036, 1052], "meaningfulli": [197, 993], "meaningless": [168, 418, 907, 910, 1039], "means_": [32, 243, 244, 245, 246, 248, 249, 550, 551, 798, 799], "means_init": [245, 246, 799], "meanshift": [42, 319, 410, 441, 1039, 1040, 1041, 1044, 1046, 1047, 1050, 1051, 1052, 1054], "meant": [55, 125, 146, 236, 375, 382, 389, 475, 494, 678, 851, 959, 960, 983, 997, 999, 1003, 1037], "meanwhil": [392, 1008], "measur": [2, 5, 6, 8, 9, 11, 17, 23, 35, 36, 47, 56, 58, 59, 94, 112, 113, 122, 126, 133, 146, 149, 154, 164, 166, 167, 168, 173, 186, 191, 196, 197, 201, 203, 215, 251, 257, 259, 265, 266, 272, 276, 310, 343, 351, 352, 366, 375, 377, 382, 386, 394, 406, 408, 412, 414, 415, 416, 417, 418, 450, 453, 463, 499, 516, 539, 541, 548, 552, 558, 559, 560, 561, 564, 565, 566, 605, 608, 609, 612, 628, 632, 659, 691, 693, 699, 703, 705, 706, 708, 710, 713, 714, 717, 718, 721, 726, 727, 728, 730, 732, 737, 738, 740, 741, 744, 748, 756, 757, 758, 783, 784, 785, 787, 788, 789, 790, 793, 796, 826, 828, 831, 851, 882, 894, 913, 914, 915, 916, 983, 989, 991, 996, 998, 999, 1001, 1007, 1009, 1015, 1024, 1027, 1036, 1039, 1041, 1042, 1044, 1046], "mechan": [37, 233, 347, 351, 367, 380, 382, 403, 407, 410, 418, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 1009, 1018], "mecopur": 1053, "med": [17, 68, 268, 375, 1003, 1029], "meda": [73, 167, 993], "media": [410, 1011, 1018], "median": [2, 11, 35, 69, 73, 78, 79, 122, 161, 162, 167, 199, 203, 214, 228, 236, 305, 316, 318, 319, 375, 412, 417, 419, 441, 455, 459, 462, 475, 553, 555, 559, 566, 598, 628, 631, 636, 671, 672, 680, 722, 754, 852, 883, 895, 914, 916, 983, 1003, 1009, 1039, 1040], "median_absolute_error": [73, 167, 993, 1040, 1046, 1048], "median_predict": 11, "medic": [262, 414, 713, 989, 1018], "medicin": [262, 713, 993], "medina": [1036, 1038], "medinc": [305, 317, 375, 491], "medium": [1, 164, 232, 275, 312, 339, 410, 644, 879, 986, 989], "medoid": 447, "medoids_": 447, "medri": 1039, "meekail": [0, 398, 1050, 1051, 1052, 1053], "meer": [61, 410, 449], "meet": [380, 392, 395, 419, 573, 604, 862, 863, 902, 993, 1006, 1018, 1044, 1045, 1046], "megabyt": 1050, "megasari": 1048, "meghann": [1044, 1046], "mehak": 1043, "mehdi": [1040, 1049], "mehgarg": 1051, "mehmet": [1043, 1049], "mehmetcanakbai": 1051, "mehrdad": 1050, "mehta": [1040, 1041, 1042, 1044, 1045, 1046, 1047, 1051, 1052], "mehul": 1043, "mei": [1041, 1046], "meier": 1043, "meila": 410, "mein": 418, "meinshausen": 181, "meirel": 1047, "meketon": 1043, "melani": [1018, 1043, 1044], "melderi": 1044, "melemo2": 1050, "meli": [1049, 1050, 1051], "melissa": 1044, "mellon": 900, "melnik": 1051, "melsyt": [1044, 1045], "mem": [14, 20, 26, 33, 52, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 241, 250, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 354, 361, 386, 509, 510, 1015], "member": [0, 351, 352, 375, 380, 383, 395, 410, 425, 443, 447, 449, 452, 454, 493, 556, 557, 558, 559, 564, 565, 566, 567, 582, 659, 660, 667, 668, 669, 677, 678, 679, 705, 706, 716, 718, 732, 737, 738, 758, 787, 796, 801, 905, 989, 996, 1020, 1036, 1048, 1051], "membership": [54, 395, 406, 408, 410, 512, 513, 514, 515, 516, 520, 523, 1008], "memit": 386, "memmap": [367, 375, 394, 415, 509, 535, 1044, 1053], "memoiz": [70, 375, 394], "memor": 169, "memori": [6, 52, 69, 70, 97, 167, 168, 253, 285, 311, 315, 317, 319, 320, 323, 351, 352, 353, 367, 368, 374, 380, 383, 389, 392, 394, 403, 410, 411, 414, 415, 418, 421, 422, 442, 443, 444, 445, 446, 447, 448, 450, 451, 455, 458, 460, 469, 474, 480, 497, 504, 509, 510, 534, 535, 536, 539, 542, 556, 557, 558, 559, 564, 565, 566, 567, 582, 583, 589, 590, 592, 647, 648, 649, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 677, 678, 679, 680, 681, 682, 685, 779, 780, 781, 782, 801, 807, 815, 824, 826, 827, 828, 829, 832, 833, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 865, 866, 883, 885, 895, 896, 898, 903, 905, 906, 913, 914, 915, 916, 926, 962, 978, 989, 995, 996, 1003, 1005, 1006, 1008, 1009, 1014, 1018, 1020, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "memory_profil": [386, 397, 402], "memoryerror": [1044, 1048], "memoryview": 381, "memorywis": 403, "men": 377, "menes": 1051, "meng": [1036, 1037, 1040, 1042, 1043], "menoci": 1054, "menon": 407, "mensch": [212, 213, 1041, 1042, 1043, 1044], "mention": [53, 84, 109, 215, 273, 316, 362, 366, 380, 384, 385, 392, 410, 697, 897, 898, 982, 987, 989, 1014, 1017, 1018, 1029, 1043, 1044, 1045], "menu": 397, "menuet": 1045, "mercer": 985, "mere": [2, 259, 394, 832, 1007], "merg": [37, 39, 44, 49, 318, 378, 380, 383, 388, 392, 395, 410, 441, 442, 443, 446, 447, 464, 821, 1028, 1036, 1043], "merit": [380, 384, 395], "meritocrat": 395, "merritt": 1042, "mersenn": 1047, "merz": 407, "mesfer": 1049, "mesh": [56, 118, 128, 151, 231, 291, 299, 307, 331, 335], "meshgrid": [9, 24, 40, 56, 78, 118, 128, 150, 151, 152, 153, 155, 168, 208, 209, 210, 211, 223, 226, 247, 289, 296, 299, 307, 308, 331, 338, 339, 343, 344, 347, 348, 632], "meshulam": 1039, "meson": [378, 383, 397, 402], "mess": 1050, "messag": [36, 42, 60, 68, 93, 233, 351, 352, 375, 378, 379, 380, 384, 385, 388, 389, 410, 441, 455, 469, 540, 544, 549, 575, 628, 713, 801, 804, 805, 807, 815, 824, 829, 832, 834, 854, 862, 863, 903, 924, 925, 926, 929, 932, 956, 977, 993, 1003, 1036, 1040, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "met": [117, 233, 382, 419, 535, 542, 628, 672, 989, 993, 1044], "meta": [54, 68, 108, 133, 134, 164, 197, 264, 268, 273, 277, 279, 281, 321, 322, 356, 359, 362, 374, 378, 382, 384, 392, 394, 400, 405, 407, 419, 420, 430, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 497, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 582, 583, 589, 591, 592, 595, 598, 604, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 801, 802, 803, 808, 810, 817, 819, 823, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 953, 982, 994, 1014, 1015, 1016, 1031, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051, 1053], "meta_clf_sample_weight": 233, "meta_est": 233, "meta_meta_est": 233, "metaclassifi": [233, 234], "metaclassifierifittedmetaclassifi": 233, "metadata": [6, 54, 107, 157, 164, 178, 225, 241, 253, 323, 352, 369, 374, 375, 403, 424, 427, 430, 433, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 950, 951, 952, 953, 977, 993, 1013, 1014, 1015, 1020, 1031, 1052], "metadata_rout": [233, 408, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "metadatarequest": [233, 424, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 596, 597, 599, 600, 601, 604, 611, 612, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 655, 657, 658, 659, 661, 663, 665, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 950, 952, 1053], "metadatarout": [233, 438, 465, 473, 556, 557, 564, 568, 569, 570, 571, 598, 628, 648, 652, 654, 656, 660, 662, 664, 666, 672, 674, 676, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 864, 865, 952, 1053], "metaestim": [54, 382, 394, 408, 902, 1040, 1049, 1050, 1053], "metaestimatormixin": 233, "metaireau": [1036, 1039], "metal": 405, "metaregressor": 233, "metatransfom": 1041, "meteorologi": 407, "meth_nam": 309, "method": [2, 6, 10, 11, 15, 17, 18, 22, 23, 24, 25, 34, 35, 37, 38, 39, 42, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 63, 65, 66, 67, 70, 74, 77, 78, 82, 84, 85, 90, 93, 96, 98, 101, 102, 103, 107, 109, 114, 116, 117, 123, 130, 141, 142, 146, 161, 173, 184, 186, 198, 205, 214, 217, 219, 221, 222, 223, 224, 226, 230, 232, 233, 234, 236, 240, 242, 245, 250, 253, 261, 264, 265, 266, 267, 268, 273, 278, 283, 289, 290, 292, 305, 309, 312, 315, 317, 318, 342, 351, 352, 353, 360, 362, 366, 367, 368, 369, 372, 377, 378, 380, 381, 382, 386, 387, 389, 392, 393, 396, 400, 403, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 460, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 505, 513, 515, 523, 526, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 711, 712, 723, 732, 733, 736, 737, 742, 743, 764, 769, 770, 775, 779, 784, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 893, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 928, 942, 949, 950, 951, 952, 953, 954, 959, 962, 977, 978, 981, 982, 983, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1024, 1026, 1027, 1029, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "method_map": [233, 950], "method_max_it": [546, 547, 1046], "method_nam": [233, 950, 953], "methodmap": [233, 950], "methodmetadatarequest": 949, "methodol": 1003, "methodolog": [414, 1017], "methodologi": [542, 878, 983, 993, 1018], "methodpair": 951, "metric": [2, 4, 5, 9, 11, 17, 18, 19, 22, 23, 24, 28, 30, 34, 36, 40, 42, 45, 46, 47, 50, 56, 58, 60, 62, 66, 68, 73, 80, 109, 114, 120, 121, 123, 124, 125, 130, 143, 146, 150, 161, 164, 166, 167, 169, 181, 186, 192, 193, 197, 199, 201, 203, 215, 221, 227, 230, 231, 236, 239, 251, 252, 255, 256, 257, 259, 260, 262, 266, 268, 269, 270, 273, 276, 281, 283, 285, 293, 296, 302, 305, 310, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 329, 330, 351, 352, 362, 366, 369, 372, 375, 380, 382, 392, 393, 394, 396, 400, 404, 407, 409, 415, 416, 417, 420, 421, 427, 438, 442, 445, 446, 447, 451, 455, 456, 457, 458, 463, 470, 521, 536, 550, 551, 552, 554, 556, 558, 559, 560, 562, 563, 565, 566, 568, 570, 579, 603, 611, 621, 629, 632, 635, 639, 640, 641, 642, 643, 644, 659, 660, 664, 667, 669, 675, 676, 677, 689, 691, 693, 695, 697, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 830, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 871, 877, 900, 901, 905, 907, 910, 913, 915, 983, 985, 988, 990, 994, 996, 999, 1001, 1013, 1014, 1015, 1024, 1025, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1055], "metric_kwarg": [780, 781], "metric_obj": 700, "metric_param": [421, 445, 447, 451, 456, 457, 458, 689, 693, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 1040, 1043, 1050], "metsi": [840, 995], "metzen": [0, 22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232, 398, 1036, 1039, 1040, 1041, 1042], "mexican": 102, "meyer89": 1047, "mferrari3": [1044, 1045], "mgrid": [12, 138], "mhg": 1041, "mi": [25, 35, 141, 410, 608, 609, 705, 756, 758, 983, 993, 1007], "mia": 1051, "miao": 1049, "mib": [366, 469, 903], "mic": [886, 1003], "micah": 1046, "micci": [886, 1003], "mice": [374, 628, 983], "miceprotein": 374, "michael": [377, 407, 410, 451, 629, 638, 692, 798, 983, 989, 1018, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051, 1053], "michal": [1040, 1043, 1049, 1050], "michali": 410, "michalkrawczyk": [1049, 1050], "micha\u0142": 1047, "micha\u0142owski": 1045, "michel": [0, 45, 65, 399, 1036, 1038, 1039, 1041, 1043, 1050, 1051], "michelbach": 1040, "michiaki": 1042, "micka\u00ebl": [1044, 1045], "micky774": [1050, 1051], "micro": [8, 296, 330, 366, 708, 714, 730, 731, 739, 784, 785, 788, 789, 993, 1036, 1044, 1045, 1051, 1054], "micro_roc_auc_ovr": 268, "microarrai": [406, 452, 514, 629, 983], "microcontrol": 1013, "microml": 1013, "micromlgen": 1013, "microphon": 94, "microryzomi": [9, 296, 375, 499], "microryzomys_minutu": 499, "microryzomys_minutus_0": 9, "microsoft": [0, 10, 378, 381, 397], "mid": [24, 339, 993, 995], "middl": [2, 22, 32, 58, 98, 181, 347, 377, 1000, 1003], "mideast": [17, 375], "midina": 1043, "midnight": 2, "midpoint": 339, "midpointnorm": 339, "midvidi": 1049, "midwest": [146, 377], "might": [0, 2, 3, 11, 29, 40, 42, 58, 60, 68, 118, 125, 128, 143, 155, 162, 167, 168, 169, 173, 197, 215, 226, 253, 259, 261, 273, 286, 300, 317, 343, 348, 362, 366, 367, 374, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 397, 403, 407, 409, 411, 414, 415, 416, 417, 418, 420, 435, 444, 489, 497, 502, 504, 509, 516, 524, 537, 556, 557, 558, 562, 563, 565, 580, 581, 583, 611, 612, 628, 651, 655, 656, 657, 659, 660, 677, 679, 693, 758, 795, 804, 805, 829, 854, 870, 885, 898, 917, 919, 921, 925, 926, 942, 962, 982, 983, 985, 987, 989, 990, 992, 993, 995, 996, 1000, 1001, 1003, 1008, 1009, 1029, 1037, 1039, 1044, 1045, 1047, 1050, 1051, 1052, 1053], "mignon": [1036, 1039, 1040, 1043], "migrat": [380, 1036], "miguel": [1046, 1054], "miguelbarao": 1046, "mihael": [410, 451, 458], "mihevc": 1046, "mike": 1043, "mikebenfield": 1043, "miketip": [535, 542], "mikhail": [1037, 1038, 1039, 1042, 1043, 1051, 1052], "miki": 1053, "mikulski": 1047, "milajev": 1040, "milan": 1048, "milana2": 1050, "mileag": 366, "milen": 1043, "mileston": 384, "militari": 68, "mill": 1046, "millawel": 1050, "miller": [375, 1044, 1045, 1049], "million": [40, 54, 154, 173, 418, 693, 990, 1008, 1018, 1050, 1051], "millman": [0, 399, 1045, 1052, 1053], "milman": 1044, "miln": 375, "miltenberg": 1051, "milton": 1053, "milutinov": 1045, "mimic": [161, 197, 351, 819], "mimicri": 351, "min": [2, 8, 9, 10, 11, 12, 23, 25, 29, 50, 56, 73, 93, 96, 109, 111, 118, 121, 122, 128, 138, 146, 151, 153, 154, 155, 162, 167, 179, 185, 186, 192, 199, 200, 203, 219, 230, 231, 234, 281, 289, 290, 296, 299, 301, 305, 307, 308, 310, 323, 331, 347, 389, 410, 413, 415, 483, 484, 486, 513, 535, 536, 539, 541, 542, 550, 551, 564, 628, 632, 633, 655, 656, 657, 658, 683, 684, 705, 758, 781, 804, 805, 854, 862, 863, 875, 884, 891, 942, 958, 984, 989, 993, 996, 1003, 1042, 1045, 1047, 1048, 1051], "min_": [318, 410, 417, 875, 989, 1003, 1007, 1008, 1009], "min_arg": 11, "min_batch_s": 945, "min_bin_freq": [449, 462], "min_c": 995, "min_categori": [841, 1048], "min_cluster_s": [42, 63, 321, 410, 447, 451, 457, 1045], "min_degre": [880, 1049], "min_df": [13, 17, 68, 260, 330, 351, 352, 418, 589, 592, 1036, 1038, 1047, 1054], "min_dist": 230, "min_estim": 113, "min_faces_per_person": [4, 375, 495, 1025], "min_features_to_select": [145, 595, 1044], "min_frequ": [319, 321, 878, 879, 1003, 1050, 1052], "min_grad_norm": [693, 1042], "min_i": 234, "min_idf": 1049, "min_impurity_decreas": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1009, 1043], "min_impurity_split": 1043, "min_max_axi": 1045, "min_max_scal": 1003, "min_n": [589, 590, 592, 1036], "min_n_compon": 230, "min_po": 389, "min_resourc": [122, 804, 805], "min_resources_": [804, 805], "min_sampl": [42, 47, 63, 392, 394, 410, 421, 445, 447, 451, 456, 457, 458, 672, 989, 1045, 1049], "min_sample_split": 1051, "min_samples_leaf": [115, 121, 122, 169, 315, 318, 356, 417, 558, 559, 560, 561, 562, 563, 565, 566, 567, 913, 914, 915, 916, 1009, 1042], "min_samples_split": [122, 123, 124, 263, 271, 306, 317, 417, 558, 559, 560, 561, 565, 566, 567, 804, 805, 913, 914, 915, 916, 982, 1009, 1042], "min_val": [922, 929], "min_valu": [628, 1047, 1048], "min_w": 989, "min_weight_fraction_leaf": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1009, 1039, 1042, 1043], "min_x": 234, "mina": [1046, 1047], "mincovdet": [78, 79, 412, 470, 471, 474, 476, 477, 999, 1036, 1043], "mind": [98, 125, 166, 167, 168, 215, 309, 310, 351, 352, 362, 380, 403, 412, 414, 417, 647, 648, 705, 989, 1008, 1013, 1020, 1027], "minden": [410, 453, 463], "mine": [0, 259, 352, 375, 410, 421, 445, 512, 564, 721, 735, 741, 784, 989, 993, 999, 1005], "ming": [564, 999, 1040, 1044, 1045, 1046, 1050], "minghui": [1043, 1044], "mingw": 1039, "minh": 1044, "mini": [6, 62, 93, 319, 368, 394, 418, 441, 443, 448, 450, 452, 454, 532, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 997, 998, 1036, 1047, 1049], "mini_batch": [452, 454], "minibatch": [6, 42, 410, 415, 450, 535, 677, 861, 862, 863, 1013, 1036], "minibatch_iter": 6, "minibatch_kmean": 352, "minibatch_s": [6, 368], "minibatchdictionarylearn": [93, 96, 368, 415, 532, 539, 543, 546, 547, 1037, 1039, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "minibatchkmean": [17, 34, 36, 38, 41, 42, 48, 56, 57, 59, 61, 66, 89, 164, 352, 368, 410, 415, 441, 443, 448, 513, 780, 1015, 1037, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "minibatchnmf": [13, 368, 415, 1050, 1052, 1053, 1054], "minibatchsparsepca": [532, 534, 538, 541, 543, 544, 546, 547, 1036, 1037, 1047, 1049, 1050, 1051, 1052, 1053], "miniconda": 397, "miniforg": [378, 388, 397], "miniforge3": [378, 388], "minim": [2, 10, 11, 25, 55, 64, 76, 77, 122, 149, 157, 176, 193, 195, 197, 199, 201, 205, 215, 218, 229, 230, 243, 248, 253, 260, 268, 269, 305, 315, 318, 336, 343, 346, 356, 369, 379, 380, 383, 388, 392, 394, 403, 407, 410, 412, 415, 417, 441, 442, 446, 447, 451, 464, 539, 541, 548, 558, 559, 560, 561, 565, 566, 610, 611, 612, 642, 647, 650, 658, 659, 668, 672, 673, 675, 679, 680, 688, 693, 695, 696, 749, 781, 852, 854, 863, 881, 893, 899, 913, 914, 915, 916, 989, 990, 993, 996, 997, 1003, 1005, 1006, 1007, 1008, 1013, 1016, 1027, 1028, 1031, 1040, 1045, 1046], "minima": [155, 185, 415, 448, 693, 990, 1028, 1044], "minimal_reproduc": 388, "minimalist": [385, 418, 1017], "minimis": [11, 258, 410, 414, 659, 660, 1009], "minimum": [7, 53, 55, 78, 122, 123, 125, 145, 186, 207, 230, 236, 269, 289, 290, 382, 389, 397, 402, 406, 410, 417, 418, 442, 446, 447, 451, 455, 457, 470, 471, 474, 475, 476, 477, 512, 514, 542, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 595, 628, 632, 633, 636, 638, 669, 672, 677, 679, 680, 683, 684, 693, 706, 726, 780, 781, 804, 805, 826, 841, 862, 863, 874, 875, 878, 879, 880, 884, 898, 899, 912, 913, 914, 915, 916, 922, 925, 926, 929, 945, 990, 993, 997, 999, 1003, 1005, 1009, 1036, 1039, 1043, 1044, 1048, 1049, 1053], "minimum_cluster_s": 410, "minka": [100, 542, 989], "minknowski": 1049, "minkowski": [421, 445, 451, 456, 457, 458, 689, 700, 779, 780, 781, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 996, 1036, 1039, 1050, 1051, 1052], "minkowski_dist": [451, 458, 689, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859], "minkowskidist": [700, 1049], "minmax_scal": [302, 305, 875, 1041, 1044], "minmaxscal": [2, 3, 70, 142, 144, 173, 219, 236, 300, 317, 368, 405, 411, 465, 891, 983, 1003, 1038, 1041, 1044, 1046, 1047, 1048, 1052, 1053], "minmaxscalerminmaxscal": 70, "minnesota": 410, "minor": [236, 253, 262, 266, 375, 383, 395, 497, 993, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "minu": [259, 761, 993], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 375, 380, 990, 1012], "minutu": [9, 296, 375, 499], "minval": [512, 514], "minwoo": 1036, "minyushkin": 1042, "miola": 1051, "miott": [1036, 1039], "miotto": 1047, "mir": 418, "miroslav": [1037, 1038, 1041], "mirror": [842, 982], "mirza": 1049, "misa": 1051, "misc": [17, 51, 96, 260, 330, 351, 352, 353, 375, 1028], "misc_featur": 236, "miscalibr": 25, "miscellan": [241, 369, 373, 374, 1015, 1042, 1043, 1050, 1051, 1053, 1054, 1055], "miscfeatur": 130, "misclassif": [5, 109, 253, 343, 797, 1007, 1008, 1009, 1037], "misclassifi": [32, 109, 252, 253, 343, 351, 1008], "misclassification_error": 109, "misdetect": 1053, "mise": 1013, "mish": 418, "mishra": [1048, 1049], "mislabel": [252, 417, 995], "mislead": [35, 116, 117, 123, 167, 381, 396, 417, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1031, 1049], "mismatch": [42, 992, 1045], "misread": 223, "miss": [69, 130, 146, 163, 169, 228, 238, 253, 259, 283, 316, 320, 323, 362, 366, 369, 372, 375, 377, 379, 380, 382, 384, 385, 394, 405, 408, 409, 410, 411, 412, 447, 473, 491, 497, 499, 502, 558, 559, 562, 563, 565, 566, 567, 628, 629, 630, 631, 640, 646, 673, 691, 695, 728, 770, 827, 848, 866, 874, 875, 879, 881, 882, 885, 886, 890, 893, 894, 896, 913, 914, 915, 916, 989, 990, 993, 1013, 1014, 1015, 1016, 1018, 1031, 1038, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "missclassif": 109, "missforest": [161, 983], "missing": [125, 417, 628, 629, 631, 1045], "missing_featur": [161, 162], "missing_fract": 125, "missing_fraction_list": 125, "missing_r": 162, "missing_sampl": [161, 162], "missing_valu": [161, 162, 238, 394, 628, 629, 630, 631, 770, 983, 1044, 1045], "missingind": [628, 629, 631, 983, 1044, 1045, 1046, 1050, 1052], "mission": [0, 352, 1018], "misspecifi": 25, "misspel": 418, "mistak": [109, 143, 273, 327, 362, 410, 414, 736, 876, 890, 891, 893, 894, 895, 896, 989, 994], "misti": [2, 168], "mit": [278, 375, 386, 410, 420, 611, 612, 615, 620, 623, 644, 667, 668, 677, 842, 986], "mitar": 1045, "mitig": [25, 53, 125, 169, 312, 367, 368, 990, 1009, 1027, 1028, 1048], "mitra": [1046, 1047, 1051], "mitrov": 1045, "mitzi": [1049, 1050], "miwojc": 1050, "mix": [2, 60, 67, 68, 74, 94, 95, 119, 164, 167, 197, 228, 238, 240, 260, 305, 311, 374, 382, 392, 394, 411, 415, 422, 465, 467, 468, 497, 534, 539, 541, 548, 601, 605, 631, 647, 648, 653, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 801, 815, 831, 865, 878, 879, 885, 886, 957, 964, 967, 989, 998, 1015, 1028, 1048, 1050, 1051], "mixed_encoded_preprocessor": 311, "mixed_pip": 311, "mixed_target": 311, "mixin": [380, 394, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 602, 936, 1038, 1047, 1051], "mixing_": [94, 95, 534, 1028], "mixtur": [5, 7, 32, 42, 53, 55, 63, 90, 152, 162, 185, 245, 246, 250, 270, 288, 293, 296, 322, 369, 375, 376, 394, 410, 415, 416, 420, 624, 801, 1013, 1014, 1015, 1030, 1031, 1036, 1040, 1041, 1042, 1043], "mizil": [23, 25, 407, 438, 440], "mizuki": 1050, "mk": 1009, "mkdir": [6, 386, 388], "mkdtemp": [52, 411], "mkl": [366, 367, 378, 392, 961, 1036], "mkl_num_thread": 367, "mks542": 179, "mksol": 68, "ml": [6, 146, 278, 374, 377, 385, 501, 503, 511, 989, 991, 1013, 1014, 1018], "mlant": 1050, "mlb": [375, 876], "mlc": 377, "mlcomp": 1036, "mld": 6, "mldata": [1036, 1044], "mle": [78, 100, 542, 1044, 1047], "mlewis1729": 1043, "mlflow": 1013, "mlg": 1040, "mlinari\u0107": 1051, "mline": [7, 78, 211, 289, 338, 341], "mlle": [690, 694, 990], "mlliou112": 1043, "mlo": 154, "mlondschien": 1049, "mlop": 1013, "mlp": [164, 168, 237, 298, 300, 303, 497, 572, 831, 862, 863, 997, 1015], "mlp_disp": 237, "mlp_model": 168, "mlp_preprocessor": 168, "mlpclassifi": [29, 124, 137, 164, 298, 299, 301, 303, 368, 503, 505, 515, 523, 572, 861, 863, 875, 994, 997, 1015, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mlpregressor": [2, 168, 237, 368, 861, 862, 997, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mlpregressormlpregressor": 237, "mlxtend": 1013, "mm": 173, "mm_bunch": 9, "mmap_mod": [403, 959], "mmm": 10, "mmse": [77, 412, 423, 476], "mn193": 1053, "mnb": 995, "mnist": [28, 164, 175, 188, 205, 212, 216, 283, 298, 300, 303, 346, 497, 572, 659, 831, 862, 885, 928, 989, 997, 1015], "mnist_10000": 283, "mnist_20000": 283, "mnist_784": [205, 213, 283, 301], "mo": [320, 1047], "mobil": 388, "mock": 1046, "mockdatafram": 1046, "mod": 408, "modal": [226, 475, 944], "mode": [7, 8, 44, 45, 78, 197, 226, 283, 285, 302, 315, 378, 380, 388, 389, 392, 406, 413, 417, 421, 444, 445, 448, 450, 453, 460, 463, 472, 473, 479, 483, 488, 509, 510, 558, 562, 565, 593, 596, 597, 599, 600, 601, 611, 628, 645, 646, 659, 660, 667, 669, 674, 675, 676, 677, 680, 683, 684, 690, 694, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 861, 905, 907, 910, 913, 915, 931, 941, 942, 944, 996, 999, 1013, 1020, 1021, 1028, 1037, 1045, 1050, 1053], "model": [1, 3, 4, 7, 8, 10, 12, 13, 14, 18, 19, 22, 23, 25, 32, 37, 38, 39, 46, 47, 52, 53, 54, 56, 59, 67, 69, 70, 71, 74, 76, 78, 80, 84, 92, 93, 102, 103, 104, 108, 109, 110, 112, 114, 118, 121, 122, 124, 125, 127, 129, 130, 133, 134, 136, 138, 140, 142, 143, 147, 152, 153, 155, 156, 157, 158, 162, 165, 166, 170, 171, 177, 179, 182, 183, 184, 187, 188, 190, 192, 193, 194, 198, 199, 201, 202, 203, 205, 209, 210, 212, 213, 214, 216, 226, 229, 234, 243, 245, 246, 247, 250, 252, 254, 255, 257, 260, 262, 263, 264, 265, 267, 268, 272, 273, 274, 276, 278, 283, 285, 286, 287, 289, 292, 296, 306, 309, 311, 312, 315, 317, 319, 320, 321, 326, 327, 336, 338, 339, 340, 341, 342, 344, 346, 348, 352, 353, 357, 358, 359, 362, 369, 372, 374, 375, 383, 386, 394, 396, 400, 405, 406, 407, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 429, 433, 435, 438, 443, 450, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 497, 499, 501, 502, 503, 504, 510, 523, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 589, 590, 594, 595, 598, 603, 607, 610, 611, 612, 616, 628, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 702, 707, 712, 722, 723, 724, 725, 735, 736, 742, 751, 754, 786, 789, 790, 793, 798, 799, 801, 804, 805, 806, 807, 815, 816, 817, 818, 822, 823, 824, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 850, 851, 852, 854, 856, 861, 862, 863, 865, 866, 868, 870, 872, 877, 878, 880, 881, 882, 884, 885, 886, 890, 891, 893, 894, 895, 896, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 977, 983, 985, 986, 987, 990, 991, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1021, 1023, 1025, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1055], "model_1": 259, "model_1_scor": 259, "model_2": 259, "model_2_scor": 259, "model__estimator__max_depth": 982, "model_coef": 166, "model_color": 345, "model_detail": 118, "model_displai": 114, "model_fixed_threshold": 253, "model_from_prevision_vers": 403, "model_i": 259, "model_i_scor": 259, "model_idx": 236, "model_k": 259, "model_k_scor": 259, "model_l1": 346, "model_l2": 346, "model_nam": [115, 236, 281], "model_no_cf": 312, "model_param": 212, "model_prop": 2, "model_scor": [259, 281], "model_select": [2, 3, 4, 5, 8, 11, 22, 23, 25, 29, 30, 52, 69, 70, 71, 72, 73, 76, 84, 98, 100, 109, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 136, 142, 143, 145, 149, 161, 162, 164, 166, 167, 169, 170, 173, 181, 192, 197, 199, 204, 205, 212, 213, 215, 227, 232, 233, 236, 238, 239, 240, 245, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 285, 286, 287, 291, 292, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 320, 322, 323, 329, 330, 339, 342, 346, 356, 360, 362, 369, 380, 382, 385, 393, 394, 400, 405, 409, 411, 414, 417, 438, 439, 559, 561, 568, 569, 580, 660, 698, 699, 701, 703, 743, 833, 836, 854, 862, 863, 865, 913, 914, 915, 916, 961, 982, 983, 988, 993, 995, 996, 1001, 1003, 1008, 1014, 1015, 1024, 1025, 1029, 1033, 1040, 1042, 1043, 1055], "model_step": 2, "model_titl": 118, "model_with_cf": 312, "moder": [259, 380, 420, 455, 999], "modern": [2, 125, 418, 469, 504, 591, 691, 695, 731, 903, 990, 1013, 1014, 1052], "modif": [380, 413, 417, 418, 447, 1006, 1053, 1054], "modifi": [29, 43, 49, 71, 73, 87, 88, 180, 181, 194, 195, 207, 218, 219, 220, 233, 236, 245, 321, 344, 348, 380, 382, 384, 394, 410, 417, 420, 444, 448, 455, 460, 469, 483, 484, 485, 486, 496, 511, 582, 611, 612, 614, 620, 677, 679, 690, 694, 730, 731, 769, 784, 785, 788, 923, 975, 976, 989, 1006, 1007, 1014, 1026, 1030, 1031, 1036, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051], "modified_fil": 380, "modified_hub": [5, 677, 1007], "modified_huber_loss": 207, "modified_tol": [690, 694], "modrak": [1051, 1052], "modroiu": 993, "modul": [34, 35, 47, 51, 75, 82, 86, 92, 93, 108, 140, 148, 158, 160, 164, 165, 172, 175, 212, 217, 218, 242, 251, 277, 278, 280, 284, 298, 300, 301, 304, 325, 334, 350, 355, 358, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 394, 396, 397, 403, 407, 408, 410, 413, 417, 418, 419, 421, 445, 504, 536, 580, 581, 660, 934, 982, 987, 989, 991, 993, 994, 997, 999, 1000, 1003, 1005, 1007, 1009, 1010, 1018, 1023, 1024, 1029, 1037, 1038, 1039, 1041, 1042, 1046, 1050], "modulo": [418, 1047], "moeller": 1042, "mogavero": 1046, "moham": [1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "mohamedbsh": 1051, "mohammad": [1044, 1045], "mohit": [1050, 1053], "mohn": [1044, 1048], "mohr": 1042, "moin": 1048, "mois\u00e9": 1005, "moitra": [1036, 1037, 1038], "mojca": 1047, "mojdeh": 1053, "mola": [1047, 1053], "molden": 1038, "molecul": 990, "molin": 1051, "molla": [1037, 1038], "molnar": [168, 1000], "moment": [366, 415, 420, 441, 616, 624, 862, 863, 957, 997, 998], "momentum": [300, 862, 863, 997], "mon": [2, 125, 168], "mona": [148, 149, 156, 159, 164, 420, 497, 612, 616, 623, 624, 626, 1015], "monaf": 1051, "monei": [0, 215, 1018], "monitor": [120, 181, 205, 383, 394, 554, 555, 560, 561, 562, 563, 997, 1017, 1039, 1044, 1046, 1048], "mono": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "monografia": 989, "monomi": 198, "monotoinc": 316, "monoton": [2, 23, 108, 134, 164, 168, 215, 229, 237, 316, 407, 558, 559, 562, 563, 565, 566, 633, 636, 637, 695, 707, 881, 893, 907, 910, 913, 914, 915, 916, 990, 994, 1003, 1008, 1015, 1043, 1047, 1051, 1053], "monotonic_cst": [125, 127, 316, 318, 322, 417, 558, 559, 562, 563, 565, 566, 913, 914, 915, 916, 1051, 1054], "mont": [231, 420, 612, 642, 643, 985, 998], "montecchio": 1040, "montesel": 1054, "month": [0, 2, 154, 168, 311, 375, 380, 384, 395, 1036], "month_co": 2, "month_sin": 2, "monthli": [154, 395, 993], "montoya": 1043, "montreal": 320, "moodi": 1041, "moon": [259, 300, 307, 351, 352, 523], "moonkyung94": 1050, "moor": [0, 736, 993, 1018, 1053], "moosmann": 567, "moradizadeh": 1050, "moral": [17, 69, 351, 659, 1044, 1048, 1049], "morawiec": [1043, 1044], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "moreau": [1042, 1043, 1044, 1045, 1046], "moreov": [136, 155, 307, 319, 362, 384, 410, 414, 420, 898, 963, 993, 1001, 1018, 1044, 1050, 1051], "moreyra": 1049, "morgan": [1005, 1009, 1011], "mori": 1051, "morikko": 1043, "morina": 1049, "moritz": [1049, 1051], "morn": 2, "moroz": 1042, "morril": 1036, "mors": 1047, "mortem": 1029, "moslei": 993, "mosley2013": 993, "mosold": 130, "most": [2, 4, 6, 10, 12, 17, 22, 25, 50, 51, 53, 60, 76, 83, 84, 101, 109, 115, 116, 123, 125, 130, 141, 142, 143, 145, 146, 154, 162, 166, 167, 168, 169, 170, 173, 181, 197, 198, 215, 233, 237, 243, 249, 253, 256, 257, 262, 266, 267, 269, 273, 278, 281, 292, 305, 311, 312, 315, 318, 321, 327, 339, 343, 351, 352, 353, 362, 366, 367, 368, 375, 376, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 397, 400, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 444, 445, 447, 451, 457, 458, 461, 469, 497, 504, 522, 525, 533, 535, 540, 544, 550, 552, 562, 563, 567, 568, 589, 590, 592, 594, 605, 612, 628, 631, 650, 659, 673, 675, 677, 679, 688, 689, 693, 696, 726, 729, 747, 759, 760, 764, 786, 795, 798, 799, 804, 805, 820, 833, 834, 847, 848, 849, 851, 853, 854, 855, 856, 857, 880, 882, 890, 891, 893, 894, 895, 896, 903, 941, 942, 944, 956, 961, 982, 983, 987, 988, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1018, 1025, 1027, 1028, 1029, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1053], "most_common": 17, "most_frequ": [262, 552, 628, 631, 855, 983, 993, 1044, 1046, 1048], "mostli": [0, 44, 68, 197, 215, 310, 388, 392, 394, 415, 417, 418, 522, 780, 781, 1008, 1013, 1018, 1044, 1045, 1046, 1052], "mother": 990, "motiv": [102, 380, 382, 394, 985, 993, 1003, 1018, 1049], "motmoti": 1046, "motoda": 410, "motor": 215, "motorcycl": [17, 375], "mottl": [1044, 1045], "moudgalya": [1052, 1053], "moufad": 1051, "moulavi": [410, 447], "mount": 388, "mountain": 1044, "mountford": [1052, 1053], "mous": 374, "mouseid": 374, "moussa": 1042, "move": [25, 118, 260, 302, 339, 379, 380, 384, 386, 407, 410, 550, 551, 572, 573, 574, 576, 578, 579, 960, 1028, 1036, 1037, 1041, 1044, 1046, 1049, 1050], "moveabl": 411, "movelikeriv": 1045, "movement": 375, "movi": [418, 1021], "movie_entri": 418, "movie_review": 1029, "moya": 1048, "mp": 989, "mpce": 17, "mpl": [32, 243, 244, 245, 249, 305], "mpl_toolkit": [9, 43, 65, 88, 99, 168, 194, 218, 220, 296], "mplot3d": [43, 65, 88, 99, 168, 194, 218, 220], "mpoemsl": 1050, "mppca": [535, 542], "mprun": 386, "mpy": 418, "mr": [55, 320, 1037, 1040, 1050], "mrandrewandrad": 1042, "mrastgoo": [1051, 1053], "mrg": [380, 388], "mridul": 1042, "mrinal": 1050, "mrinaltyagi": 1050, "mrl09": 415, "mrmjauh": 1043, "mro": [382, 427, 433, 1046, 1047], "mrs2008": 591, "msabati": 1050, "msc": 377, "mschaffenroth": 1046, "mse": [3, 5, 76, 77, 120, 122, 123, 161, 162, 197, 199, 201, 203, 274, 322, 648, 654, 751, 993, 1009, 1047, 1049], "mse_path_": [186, 648, 652, 654, 656, 662, 664], "mse_valu": 5, "mses_california": 162, "mses_diabet": 162, "msft": 10, "msg": [283, 977], "msle": [752, 993], "msm": [146, 377], "mssubclass": 130, "mst": 410, "msvc": 1039, "msvcp140": 1050, "mt19937": [266, 271, 928, 1047], "mthorrel": [1043, 1046], "mtrand": 362, "mtse": 680, "mu": [13, 78, 79, 259, 415, 423, 474, 476, 477, 480, 481, 482, 541, 548, 987, 989, 1043, 1046], "mu_i": 995, "mu_j": 410, "mu_k": 987, "muayyad": 1044, "much": [2, 4, 5, 7, 11, 17, 23, 38, 53, 78, 80, 90, 96, 102, 114, 122, 123, 130, 131, 132, 149, 161, 162, 167, 168, 169, 170, 173, 194, 195, 199, 230, 233, 236, 253, 259, 261, 262, 265, 270, 301, 306, 310, 311, 312, 317, 318, 320, 339, 344, 351, 352, 362, 366, 367, 368, 375, 380, 381, 382, 385, 388, 392, 393, 397, 403, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 448, 449, 497, 535, 536, 537, 539, 560, 561, 562, 563, 659, 660, 667, 668, 669, 677, 678, 679, 693, 780, 781, 804, 805, 819, 880, 898, 905, 982, 985, 988, 989, 990, 992, 993, 994, 996, 997, 999, 1001, 1005, 1006, 1008, 1009, 1014, 1018, 1024, 1025, 1027, 1028, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mudd": 1049, "mueller": [0, 72, 98, 113, 188, 231, 328, 346, 347, 398, 1018, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "muhammad": [1044, 1045, 1049], "mukherje": 1047, "mula": 1048, "multi": [9, 29, 48, 89, 108, 110, 112, 113, 118, 120, 128, 131, 133, 134, 138, 141, 151, 153, 164, 175, 181, 183, 184, 185, 186, 189, 196, 204, 207, 210, 213, 216, 217, 220, 224, 225, 226, 234, 237, 241, 251, 256, 268, 270, 276, 281, 298, 300, 303, 306, 307, 308, 315, 320, 331, 335, 344, 348, 351, 355, 356, 357, 358, 360, 361, 367, 375, 377, 382, 383, 389, 394, 397, 410, 417, 418, 420, 427, 438, 453, 463, 470, 475, 496, 497, 505, 506, 511, 515, 516, 520, 521, 523, 542, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 611, 632, 634, 644, 647, 648, 653, 654, 658, 659, 661, 662, 663, 664, 667, 669, 673, 674, 675, 676, 677, 682, 685, 691, 704, 714, 721, 735, 741, 743, 784, 800, 801, 815, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 853, 855, 861, 862, 863, 866, 872, 885, 889, 900, 901, 905, 907, 910, 913, 914, 915, 917, 918, 919, 925, 928, 931, 982, 994, 996, 1000, 1003, 1007, 1013, 1014, 1015, 1016, 1020, 1026, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "multi_class": [189, 268, 315, 611, 659, 660, 789, 905, 989, 994, 1008, 1036, 1040, 1044, 1049, 1051, 1054], "multi_confus": 755, "multi_layer_regressor": 417, "multi_output": [389, 925], "multi_target_forest": 994, "multialign": 271, "multiarch": 388, "multiclass": [24, 28, 115, 175, 189, 213, 216, 227, 234, 236, 239, 251, 256, 264, 266, 269, 276, 279, 281, 302, 336, 347, 356, 369, 375, 376, 382, 383, 385, 394, 400, 410, 417, 438, 453, 463, 490, 497, 505, 558, 560, 562, 565, 568, 569, 572, 595, 603, 611, 632, 633, 634, 659, 660, 667, 669, 674, 675, 676, 677, 703, 707, 709, 730, 731, 735, 736, 739, 744, 755, 784, 785, 788, 789, 790, 795, 801, 802, 804, 805, 806, 807, 815, 817, 819, 824, 825, 826, 827, 828, 829, 830, 831, 832, 872, 886, 905, 907, 910, 913, 915, 987, 989, 1003, 1004, 1008, 1009, 1015, 1016, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1051, 1052, 1053], "multicollinear": [116, 117, 164, 165, 169, 171, 265, 329, 413, 501, 565, 635, 656, 831, 989, 1001, 1015], "multicor": [1048, 1049], "multidimension": [413, 689, 691, 693, 695, 990, 996], "multigrid": 463, "multiindex": 1050, "multilabel": [83, 86, 91, 164, 225, 241, 266, 278, 280, 282, 375, 382, 383, 394, 404, 483, 488, 497, 498, 509, 510, 516, 524, 542, 558, 565, 568, 659, 675, 676, 704, 708, 714, 727, 730, 731, 735, 736, 739, 740, 755, 757, 784, 785, 788, 789, 795, 797, 831, 834, 836, 838, 862, 869, 872, 876, 878, 889, 910, 913, 915, 931, 955, 956, 957, 1004, 1015, 1016, 1029, 1031, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "multilabel_": [834, 1041], "multilabel_confusion_matrix": [714, 730, 731, 739, 785, 788, 993, 1045], "multilabelbinar": [394, 834, 869, 878, 994, 1020, 1039, 1041, 1042, 1044, 1045], "multilay": [392, 991], "multilearn": 1013, "multimetr": [982, 1046, 1051], "multimetric_": [801, 804, 805, 815], "multimod": 226, "multinomi": [6, 28, 164, 175, 188, 206, 212, 216, 234, 254, 268, 281, 301, 346, 347, 375, 376, 380, 415, 417, 497, 513, 524, 552, 554, 560, 562, 632, 659, 660, 742, 831, 834, 840, 841, 842, 843, 844, 885, 928, 993, 1009, 1015, 1016, 1029, 1031, 1036, 1040, 1042, 1043, 1044, 1049, 1050, 1054], "multinomialdevi": 1047, "multinomialhmm": 1036, "multinomialnb": [6, 368, 375, 418, 840, 841, 842, 843, 995, 1029, 1038, 1040, 1043, 1044, 1048, 1049, 1051], "multiouput": 1046, "multioutput": [129, 268, 281, 282, 369, 382, 394, 400, 433, 466, 483, 484, 485, 552, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 612, 633, 634, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 789, 791, 792, 826, 834, 848, 856, 863, 872, 906, 908, 911, 913, 914, 915, 916, 931, 956, 957, 993, 1015, 1016, 1031, 1036, 1037, 1038, 1042, 1043, 1049, 1050], "multioutput_arrai": 380, "multioutput_onli": 382, "multioutputclassifi": [400, 789, 834, 836, 838, 993, 1043, 1045, 1046, 1047, 1048, 1052, 1053], "multioutputregressor": [129, 400, 433, 466, 483, 484, 485, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 837, 839, 848, 856, 863, 906, 908, 911, 914, 916, 1042, 1043, 1045, 1047, 1048, 1052, 1053], "multipl": [11, 44, 67, 70, 74, 90, 102, 109, 115, 117, 118, 120, 142, 164, 167, 173, 191, 231, 253, 259, 264, 265, 267, 271, 278, 281, 285, 315, 321, 342, 366, 367, 368, 374, 376, 377, 380, 382, 383, 384, 385, 392, 394, 403, 408, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 445, 461, 465, 467, 468, 470, 475, 489, 492, 493, 496, 497, 498, 504, 505, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 560, 561, 562, 563, 564, 582, 600, 608, 609, 611, 612, 628, 633, 635, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 658, 661, 662, 663, 664, 667, 668, 669, 672, 674, 677, 679, 680, 690, 691, 693, 694, 695, 712, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 789, 791, 792, 794, 798, 799, 801, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 827, 828, 829, 831, 835, 836, 837, 838, 839, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 867, 870, 882, 886, 894, 897, 898, 905, 906, 907, 910, 921, 936, 941, 942, 964, 967, 985, 988, 989, 990, 994, 995, 996, 1000, 1001, 1006, 1007, 1009, 1013, 1014, 1015, 1020, 1029, 1036, 1037, 1039, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "multipleloc": [218, 288], "multiplex": 1009, "multipli": [167, 201, 215, 259, 366, 389, 394, 415, 417, 418, 423, 465, 476, 516, 539, 541, 542, 548, 558, 562, 565, 647, 649, 653, 655, 659, 660, 661, 663, 669, 670, 671, 673, 677, 678, 679, 681, 687, 688, 690, 694, 765, 907, 910, 913, 915, 931, 969, 970, 971, 982, 985, 989, 993, 1007, 1047], "multiprocess": [392, 394, 959, 961, 996, 1036, 1044, 1050], "multirespons": 989, "multiscal": 463, "multisurfac": [146, 377], "multitarget": 389, "multitask": [281, 418, 994], "multitaskelasticnet": [647, 648, 653, 662, 663, 664, 682, 989, 994, 1036, 1043, 1044, 1047, 1049], "multitaskelasticnetcv": [400, 647, 648, 653, 661, 663, 664, 682, 989, 994, 1039, 1046, 1047, 1049, 1053], "multitasklasso": [191, 653, 661, 664, 989, 994, 1036, 1044, 1047, 1049], "multitasklassocv": [400, 662, 663, 994, 1039, 1046, 1047, 1049, 1053], "multithread": [366, 410, 779, 905, 906, 907, 908, 909, 910, 911], "multivari": [93, 167, 372, 412, 415, 418, 474, 517, 518, 519, 628, 629, 630, 631, 650, 672, 679, 680, 840, 841, 842, 843, 844, 987, 989, 992, 995, 1013, 1020, 1028, 1031], "multivariate_norm": [80, 84, 243, 423, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "multiwai": 1009, "muma": 79, "mungui": 1049, "munoz": [1042, 1048], "muoki": 1048, "murad": 1039, "murashkin": 1040, "murata": [1049, 1050], "murder": 351, "murezzda": 1052, "murmurhash": 389, "murmurhash3": [418, 583, 590, 958], "murmurhash3_32": 389, "murmurhash3_x86_32": [389, 958], "murphi": [407, 644, 986], "murrai": [1042, 1043], "music": 1018, "must": [53, 167, 168, 170, 178, 181, 214, 215, 226, 237, 254, 289, 306, 311, 351, 362, 375, 379, 380, 381, 382, 384, 386, 388, 394, 395, 400, 405, 407, 410, 411, 414, 415, 417, 418, 419, 420, 421, 431, 439, 442, 445, 446, 447, 448, 450, 451, 452, 456, 458, 460, 462, 463, 465, 467, 468, 470, 475, 488, 509, 510, 513, 524, 532, 538, 539, 540, 541, 542, 544, 545, 548, 554, 555, 560, 561, 562, 563, 568, 569, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 618, 621, 628, 629, 630, 631, 633, 634, 639, 643, 644, 649, 650, 653, 659, 660, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 700, 704, 707, 710, 736, 747, 765, 772, 775, 779, 782, 789, 793, 794, 795, 797, 798, 799, 801, 802, 804, 805, 806, 808, 810, 811, 813, 815, 816, 817, 819, 820, 822, 826, 829, 831, 832, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 865, 868, 869, 870, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 905, 906, 907, 908, 909, 910, 911, 912, 918, 961, 968, 977, 979, 982, 983, 989, 990, 991, 993, 996, 997, 999, 1000, 1007, 1008, 1009, 1020, 1029, 1036, 1039, 1043, 1047, 1049, 1050, 1053], "mutat": [362, 1044], "mutual": [35, 36, 47, 53, 56, 140, 142, 147, 164, 394, 417, 419, 447, 593, 596, 597, 600, 601, 607, 608, 609, 610, 705, 706, 716, 756, 758, 787, 796, 982, 989, 993, 994, 1015, 1036, 1042, 1052], "mutual_info_classif": [70, 419, 593, 596, 597, 600, 601, 1042, 1048, 1051, 1054], "mutual_info_regress": [141, 319, 419, 593, 596, 597, 600, 601, 610, 1042, 1043, 1048, 1050, 1051, 1052, 1054], "mutual_info_scor": [35, 410, 705, 993, 1044, 1047, 1048], "mu\u00f1oz": [1049, 1051], "mwestt": 1045, "my": [374, 380, 385, 388, 497], "my_custom_loss_func": 993, "my_data": 385, "my_dataset": 488, "my_estim": [382, 411], "my_extra_param": 382, "my_featur": 380, "my_fil": 386, "my_func": [381, 386], "my_g": [422, 534], "my_group": [233, 400], "my_kernel": [335, 1008], "my_memb": [59, 61, 62], "my_other_weight": [233, 400], "my_pipelin": 1045, "my_script": 367, "my_test_script": 388, "my_token": 418, "my_weight": [233, 400], "myatt": [1045, 1046], "mycach": [509, 510], "mycluster": 428, "myer": [1039, 1043], "myestim": [382, 424, 426, 427, 429, 430, 431, 432, 433], "myestimator0": 426, "myestimator1": 426, "mymultioutputestim": 382, "mypi": [380, 384, 397, 402, 1047], "myself": 380, "mysvmlightfil": 509, "mytransform": [382, 434], "m\u00e9hault": [1044, 1045], "m\u00f6rtberg": 1042, "m\u00fcller": [0, 29, 306, 307, 395, 415, 536, 871, 997, 1003, 1007, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "n": [2, 3, 5, 6, 8, 9, 13, 15, 17, 30, 31, 35, 37, 38, 56, 68, 73, 78, 83, 90, 93, 96, 98, 100, 102, 103, 109, 111, 112, 116, 132, 141, 144, 146, 149, 153, 158, 168, 170, 177, 181, 193, 197, 198, 201, 212, 214, 215, 218, 229, 230, 231, 234, 243, 245, 246, 257, 259, 262, 264, 265, 266, 268, 269, 283, 286, 288, 302, 307, 309, 310, 317, 320, 322, 323, 327, 333, 343, 346, 360, 366, 374, 377, 378, 380, 384, 386, 389, 394, 397, 400, 406, 407, 410, 413, 414, 415, 416, 417, 418, 420, 421, 445, 446, 448, 449, 451, 470, 472, 475, 479, 490, 516, 517, 518, 519, 524, 529, 539, 541, 542, 548, 558, 559, 560, 561, 564, 565, 566, 567, 589, 590, 591, 592, 608, 609, 615, 628, 650, 672, 680, 693, 697, 700, 707, 708, 756, 806, 809, 811, 816, 817, 820, 841, 845, 846, 850, 870, 897, 899, 913, 914, 915, 916, 922, 940, 945, 946, 968, 972, 973, 982, 985, 987, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1003, 1005, 1007, 1008, 1009, 1020, 1027, 1029, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "n1": 96, "n2": 96, "n4": 96, "n_": [78, 79, 170, 259, 318, 410, 415, 417, 647, 653, 686, 697, 985, 989, 993, 995, 996, 1000, 1003, 1005, 1008, 1009], "n_alpha": [202, 473, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 674, 676, 682, 683, 684, 685, 1039], "n_atom": 1037, "n_averag": 31, "n_bar": 162, "n_batch_iter_": 537, "n_best": 452, "n_bin": [22, 23, 25, 51, 197, 215, 306, 308, 312, 439, 440, 870, 1003], "n_bins_": 870, "n_bootstrap": [262, 1037], "n_bulk_repeat": 8, "n_byte": 230, "n_c": [410, 660], "n_call": [845, 846], "n_candid": [804, 805, 982], "n_candidates_": [271, 804, 805, 982], "n_candidates_0": 982, "n_candidates_i": 982, "n_categori": [312, 841, 879, 1003], "n_categorical_featur": [119, 562, 563, 633, 634], "n_categories_": 841, "n_center": [40, 513], "n_channel": [584, 585, 588], "n_class": [4, 35, 89, 90, 109, 111, 116, 118, 143, 145, 212, 219, 231, 234, 245, 266, 267, 268, 292, 293, 315, 357, 360, 362, 380, 382, 394, 417, 438, 489, 490, 503, 516, 520, 524, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 594, 595, 605, 611, 635, 640, 659, 660, 667, 668, 669, 675, 676, 677, 678, 698, 708, 717, 719, 723, 736, 739, 742, 755, 789, 795, 800, 801, 804, 805, 815, 823, 826, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 847, 852, 854, 855, 862, 865, 872, 873, 876, 879, 886, 889, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 915, 917, 918, 930, 931, 989, 993, 994, 997, 1004, 1007, 1008, 1025, 1041, 1042, 1043, 1045, 1046, 1047, 1053], "n_classes_": [552, 554, 556, 558, 560, 565, 611, 833, 834, 913, 915, 1037, 1046, 1048], "n_classes_pr": [715, 756], "n_classes_tru": [715, 756], "n_classifi": [28, 570, 571], "n_cluster": [17, 18, 19, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 93, 319, 352, 380, 394, 410, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 464, 512, 514, 711, 793, 794, 1028, 1036, 1040, 1042, 1044, 1045, 1047, 1050], "n_clusters_": [36, 47, 53, 61, 442, 446], "n_clusters_list": 41, "n_clusters_per_class": [29, 89, 113, 143, 145, 256, 293, 299, 307, 385, 516, 606, 608], "n_clusters_rang": 35, "n_clusters_tru": 59, "n_col": [4, 17, 93, 235, 425, 452, 454, 512, 514, 633, 1025], "n_color": 46, "n_column": [406, 452, 454], "n_column_clust": [452, 454, 514], "n_comp": [103, 173], "n_comparison": 259, "n_compon": [2, 3, 4, 10, 13, 42, 50, 55, 56, 57, 68, 70, 71, 72, 83, 84, 88, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 128, 173, 196, 218, 219, 220, 221, 222, 223, 226, 230, 231, 234, 238, 243, 244, 245, 246, 247, 248, 249, 258, 287, 292, 302, 310, 317, 319, 322, 323, 352, 382, 385, 386, 394, 411, 413, 415, 422, 452, 453, 463, 465, 483, 484, 485, 486, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 640, 641, 642, 643, 689, 690, 691, 692, 693, 694, 695, 696, 697, 798, 799, 854, 861, 864, 897, 898, 899, 942, 985, 987, 990, 992, 996, 1025, 1028, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1053, 1054], "n_components_": [71, 100, 394, 442, 446, 535, 539, 540, 541, 542, 543, 544, 897, 898, 1025, 1045, 1047], "n_components_fa": 100, "n_components_pca": 100, "n_components_pca_ml": 100, "n_components_rang": 230, "n_connected_compon": 464, "n_connected_components_": [442, 446, 1045], "n_core": 115, "n_core_sampl": [421, 445], "n_cpu": [367, 394], "n_cv": [414, 438], "n_cv_alpha": [652, 656], "n_cv_fold": [119, 311, 807, 824, 829, 832], "n_digit": 56, "n_dim": [479, 528, 530, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 1053], "n_dimens": [798, 799], "n_dimensions_of_x": [907, 908, 909, 910, 911], "n_dir": 12, "n_e": 410, "n_element": [420, 618], "n_encoded_featur": [878, 879], "n_error": 290, "n_error_outli": [211, 289, 338], "n_error_outliers_sgd": 211, "n_error_test": [211, 289, 338], "n_error_test_sgd": 211, "n_error_train": [211, 338], "n_error_train_sgd": 211, "n_estim": [5, 8, 24, 29, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 128, 129, 132, 161, 170, 219, 235, 239, 245, 256, 271, 307, 315, 317, 366, 393, 394, 417, 419, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 633, 804, 805, 982, 999, 1000, 1033, 1044, 1052], "n_estimators_": [120, 560, 561], "n_estimators_ful": 120, "n_exampl": 6, "n_face": 235, "n_featur": [4, 6, 13, 23, 24, 25, 28, 29, 30, 31, 32, 38, 50, 56, 58, 59, 76, 77, 78, 79, 80, 89, 90, 93, 100, 109, 111, 113, 115, 116, 143, 145, 146, 161, 162, 173, 176, 179, 181, 183, 191, 192, 196, 200, 201, 212, 214, 219, 226, 230, 231, 233, 243, 248, 256, 262, 266, 268, 269, 271, 272, 293, 299, 307, 315, 316, 317, 319, 321, 322, 323, 346, 351, 352, 353, 362, 366, 373, 374, 380, 382, 385, 392, 393, 394, 400, 410, 412, 413, 415, 417, 418, 421, 422, 423, 425, 427, 428, 429, 432, 433, 434, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 495, 502, 505, 509, 510, 513, 516, 517, 520, 522, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 711, 726, 759, 760, 761, 762, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 942, 968, 969, 970, 971, 972, 973, 974, 975, 976, 985, 989, 994, 996, 997, 1003, 1007, 1008, 1009, 1020, 1025, 1026, 1028, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "n_feature_influ": 8, "n_features_": [145, 594, 595, 1049, 1051], "n_features_a": 854, "n_features_b": 854, "n_features_in_": [382, 394, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1047, 1049, 1051, 1054], "n_features_max": 31, "n_features_missing_ind": 631, "n_features_new": [434, 443, 446, 533, 535, 537, 538, 540, 543, 544, 550, 568, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 631, 636, 639, 640, 641, 642, 643, 854, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 897, 898], "n_features_opt": 70, "n_features_out": 631, "n_features_out_": 884, "n_features_rang": 31, "n_features_to_comput": 1044, "n_features_to_select": [144, 146, 317, 419, 594, 603, 1048, 1050], "n_features_to_select_": 603, "n_features_with_miss": 630, "n_features_with_missing_": 628, "n_fold": [136, 648, 652, 654, 656, 660, 662, 664, 1037, 1038, 1042], "n_gram_rang": 1036, "n_group": [414, 810, 1024, 1042], "n_i": [995, 1003], "n_imag": 257, "n_index": [847, 848, 849, 851, 853, 855, 856], "n_inform": [23, 25, 29, 89, 113, 116, 143, 145, 176, 181, 200, 201, 256, 262, 272, 293, 299, 307, 315, 346, 382, 385, 516, 525, 554, 555, 556, 557, 565, 566, 606, 607, 608, 609, 610, 647, 648, 653, 661, 662, 663, 666, 682, 683, 684, 835, 994, 1044], "n_init": [17, 40, 41, 43, 48, 55, 56, 59, 62, 218, 219, 220, 221, 316, 319, 352, 410, 444, 448, 450, 452, 453, 454, 460, 463, 691, 695, 798, 799, 1028, 1036, 1044, 1050, 1051, 1052], "n_init_rang": 59, "n_inlier": 226, "n_input_features_": 1049, "n_instanc": [8, 634], "n_iter": [4, 15, 69, 125, 149, 205, 260, 267, 283, 302, 341, 382, 386, 393, 422, 455, 479, 533, 534, 545, 546, 547, 548, 647, 648, 653, 654, 661, 662, 663, 664, 682, 683, 684, 685, 686, 687, 688, 693, 695, 804, 805, 813, 815, 861, 863, 941, 942, 982, 1007, 1025, 1037, 1042, 1043, 1044, 1048, 1050, 1051, 1052, 1054], "n_iter_": [2, 96, 125, 205, 246, 394, 441, 448, 449, 450, 472, 473, 483, 484, 485, 532, 533, 534, 537, 538, 539, 540, 541, 544, 562, 563, 628, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 680, 681, 691, 693, 798, 799, 854, 862, 863, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 1040, 1043, 1044, 1046, 1049, 1050, 1052], "n_iter_no_chang": [5, 115, 120, 125, 205, 318, 351, 385, 394, 417, 560, 561, 562, 563, 667, 668, 669, 677, 678, 679, 862, 863, 1007, 1044, 1047], "n_iter_search": 267, "n_iter_without_progress": [219, 693, 1041, 1042], "n_iterations_": [271, 804, 805], "n_iters_": 1042, "n_job": [11, 52, 70, 71, 115, 116, 117, 122, 123, 130, 145, 146, 161, 167, 168, 169, 170, 219, 221, 238, 253, 258, 260, 261, 263, 275, 278, 283, 315, 316, 317, 320, 346, 367, 380, 394, 417, 421, 438, 445, 447, 449, 451, 453, 456, 457, 458, 459, 462, 465, 468, 473, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 864, 867, 900, 901, 959, 961, 982, 993, 994, 996, 1024, 1025, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1054], "n_k": [410, 551], "n_kernel": 613, "n_kernel_param": [611, 612], "n_knot": [2, 198, 318, 884, 1003, 1049], "n_l1_ratio": [648, 660, 662, 1039], "n_l1_ratios_": 660, "n_label": [10, 90, 234, 394, 488, 524, 714, 721, 727, 740, 741, 755, 757, 793, 794, 821, 993, 1042, 1044], "n_labeled_point": [326, 327], "n_layer": [862, 863], "n_layers_": [862, 863], "n_leav": [464, 913, 914, 915, 916], "n_leaves_": [442, 446], "n_left": 564, "n_local_tri": 461, "n_m": 1009, "n_mask": 197, "n_missing_featur": 630, "n_missing_sampl": 162, "n_nearest_featur": [162, 628], "n_neighbor": [10, 42, 60, 65, 131, 161, 218, 219, 220, 222, 226, 236, 283, 285, 286, 289, 290, 291, 292, 295, 310, 315, 317, 351, 417, 453, 603, 608, 609, 629, 689, 690, 692, 694, 696, 697, 847, 848, 849, 851, 853, 854, 858, 900, 901, 983, 990, 996, 999, 1006, 1043, 1050, 1052, 1053], "n_neighbors_": [692, 851], "n_neighbors_list": [236, 285], "n_neighbour": 1050, "n_node": [360, 442, 446, 464, 558, 559, 565, 566, 567, 913, 914, 915, 916, 947], "n_node_sampl": 360, "n_nodes_ptr": [558, 559, 565, 566, 567], "n_noise_": 47, "n_nonzero": 102, "n_nonzero_coef": [196, 527, 532, 538, 543, 546, 547, 549, 651, 665, 686, 687, 1054], "n_nonzero_coefs_": [665, 666, 1054], "n_nonzero_column": 353, "n_numerical_featur": 119, "n_order": 177, "n_original_featur": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "n_out": 567, "n_outlier": [78, 79, 126, 200, 226, 290], "n_output": [360, 394, 417, 427, 433, 434, 438, 443, 446, 466, 470, 483, 484, 485, 533, 535, 537, 538, 540, 543, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 629, 631, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 722, 724, 729, 746, 747, 749, 751, 752, 754, 755, 786, 789, 791, 792, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 854, 855, 856, 861, 862, 863, 864, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 897, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 931, 964, 993, 994, 1009, 1043, 1046], "n_output_featur": 629, "n_output_features_": 880, "n_outputs_": [552, 553, 558, 559, 565, 566, 567, 862, 863, 913, 914, 915, 916], "n_oversampl": [452, 454, 542, 545, 942, 1050], "n_pack": [945, 946], "n_patch": [584, 585, 588], "n_permut": [265, 414, 830], "n_pixel": [235, 257], "n_point": [254, 845, 846], "n_points_per_clust": 63, "n_popul": [389, 962], "n_possible_iterations_": [804, 805], "n_predict": 8, "n_pt": 12, "n_q": 410, "n_quantil": [73, 168, 309, 882, 894, 1045], "n_quantiles_": 882, "n_queri": [689, 847, 848, 849, 851, 853, 855, 856, 857], "n_random_featur": 186, "n_redund": [23, 25, 29, 89, 116, 143, 145, 256, 262, 293, 299, 307, 385, 438, 516, 554, 556, 565, 835], "n_refin": 473, "n_region": 44, "n_regions_plu": 44, "n_regressor": 571, "n_relevant_featur": 191, "n_remaining_candidates_": [804, 805], "n_repeat": [112, 116, 123, 145, 167, 169, 170, 259, 273, 278, 315, 414, 516, 635, 816, 817, 1001], "n_required_iterations_": [804, 805], "n_resourc": 982, "n_resources_": [271, 804, 805, 982], "n_resources_0": 982, "n_resources_i": 982, "n_restarts_optim": [156, 420, 611, 612], "n_retri": [489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1050, 1054], "n_row": [4, 17, 93, 406, 425, 452, 454, 512, 514, 1025], "n_row_clust": [452, 454, 514], "n_run": [35, 59, 173, 352], "n_sampl": [4, 5, 8, 13, 22, 23, 24, 25, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 68, 73, 76, 77, 78, 79, 80, 84, 90, 93, 94, 98, 100, 109, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 126, 127, 137, 138, 145, 146, 158, 161, 162, 166, 176, 178, 179, 181, 183, 185, 187, 189, 191, 192, 196, 197, 198, 200, 201, 205, 209, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 230, 231, 233, 236, 244, 246, 247, 248, 249, 256, 257, 259, 262, 263, 266, 268, 269, 270, 271, 272, 274, 283, 293, 307, 308, 309, 312, 316, 317, 319, 321, 322, 323, 328, 337, 340, 341, 346, 351, 352, 362, 373, 377, 380, 382, 385, 389, 392, 393, 394, 400, 409, 410, 412, 413, 414, 415, 417, 421, 422, 423, 425, 427, 428, 429, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 495, 502, 505, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 622, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 771, 772, 773, 774, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 930, 931, 942, 944, 946, 955, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 982, 985, 989, 993, 994, 996, 997, 1003, 1004, 1005, 1007, 1008, 1009, 1020, 1025, 1026, 1027, 1028, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "n_samples1": 871, "n_samples2": 871, "n_samples_": 542, "n_samples_1": [341, 1008], "n_samples_2": [341, 1008], "n_samples_a": [793, 794], "n_samples_fit": [433, 466, 483, 484, 485, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 689, 838, 839, 847, 848, 849, 851, 853, 855, 856, 857, 863, 906, 908, 911, 914, 916], "n_samples_fit_": [283, 847, 848, 849, 851, 853, 855, 856, 857], "n_samples_i": [613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782], "n_samples_per_cent": 59, "n_samples_rang": [77, 230], "n_samples_seen": 885, "n_samples_seen_": [535, 874, 875, 885, 1044], "n_samples_test": [272, 907, 908, 909, 910, 911, 996, 1003], "n_samples_train": [272, 907, 908, 909, 910, 911], "n_samples_transform": [283, 849, 857], "n_samples_x": [612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782], "n_seed": 462, "n_selected_featur": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "n_skips_": 1043, "n_skips_invalid_data_": 672, "n_skips_invalid_model_": 672, "n_skips_no_inliers_": 672, "n_spline": [2, 884], "n_split": [2, 11, 115, 121, 125, 161, 162, 167, 245, 254, 259, 261, 264, 269, 273, 278, 322, 329, 339, 346, 362, 414, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 828, 1024, 1042, 1044], "n_splits_": [801, 804, 805, 815], "n_steps_": [96, 450, 538, 539, 1049], "n_subpopulation_": 680, "n_subsampl": [680, 931], "n_subsets_of_featur": 595, "n_support_": [907, 908, 909, 910, 911, 1008, 1046], "n_support_vector": 5, "n_sv": [907, 908, 909, 910, 911, 1008, 1046], "n_svd_vec": [452, 454], "n_t": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "n_t_l": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "n_t_r": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "n_target": [394, 413, 483, 484, 485, 486, 525, 557, 612, 644, 647, 648, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 664, 665, 666, 672, 673, 674, 675, 676, 682, 685, 686, 687, 688, 994, 1048, 1050, 1052], "n_task": [191, 989], "n_test": [6, 8, 31, 112, 259, 1036, 1039], "n_test_docu": 6, "n_test_po": 6, "n_threshold": [636, 728, 783, 790], "n_tick": [807, 824, 829, 832], "n_top": 267, "n_top_word": 13, "n_topic": [385, 537, 1043], "n_tot": 700, "n_total_sampl": [326, 327], "n_train": [6, 8, 31, 112, 259, 1036, 1039], "n_train_po": 6, "n_transformed_featur": 865, "n_tree": 5, "n_trees_per_iter": 562, "n_trees_per_iteration_": [560, 561, 562, 563], "n_trials_": 672, "n_uncorrelated_featur": 265, "n_unequ": 700, "n_unique_categori": 311, "n_unique_label": [730, 731, 739, 784, 785, 788, 957], "n_unique_tick": [807, 829], "n_valu": [824, 832, 1044], "n_values_": 1044, "n_values_feature_j": 634, "n_x": [52, 586], "n_y": [52, 586, 995, 1003], "n_z": 586, "na": [628, 629, 630, 631, 770, 779, 923, 925, 926, 1046, 1047, 1050, 1051, 1052, 1053], "nabarun": 1044, "nabla": 997, "nabsolut": 203, "nacross": 273, "nada": 17, "nadeau": [259, 1044], "nadia": 1048, "nadim": 1049, "nadirhan": 1050, "nadya": 1042, "nagarajan": [646, 989], "nagarjuna": [1043, 1044], "nagasaka": 1049, "naghshhnejad": [1046, 1047], "nagpal": 54, "naipawat": [1050, 1051], "naiv": [25, 29, 128, 259, 261, 281, 351, 353, 369, 375, 407, 417, 418, 438, 545, 840, 841, 842, 843, 844, 987, 988, 996, 1001, 1016, 1031, 1036, 1037, 1038, 1039, 1044, 1046, 1049, 1051], "naive_bay": [6, 22, 23, 25, 29, 128, 132, 260, 261, 351, 362, 368, 369, 375, 417, 438, 570, 866, 987, 994, 995, 1029, 1037, 1038, 1040, 1041, 1042, 1043], "naive_linear_pipelin": 2, "naive_linear_predict": 2, "naivebay": 368, "naivelycalibratedlinearsvc": [23, 25], "najera": 1043, "najork": [727, 757, 993], "naka": 1049, "nakamura": 1050, "nakano": [1043, 1044], "nalepa": 1043, "naman": 1053, "name": [2, 4, 5, 7, 8, 9, 10, 15, 17, 23, 25, 28, 29, 35, 42, 43, 56, 60, 69, 71, 73, 80, 94, 99, 112, 113, 114, 115, 119, 122, 125, 130, 167, 168, 169, 186, 195, 197, 199, 201, 203, 204, 212, 214, 215, 218, 219, 226, 232, 233, 235, 236, 240, 245, 253, 254, 256, 257, 260, 262, 263, 266, 268, 269, 273, 278, 283, 291, 292, 299, 300, 307, 309, 311, 319, 320, 323, 330, 344, 351, 352, 353, 367, 368, 374, 375, 378, 380, 382, 384, 385, 387, 388, 394, 397, 400, 406, 410, 414, 417, 418, 420, 424, 426, 431, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 698, 699, 700, 701, 703, 709, 710, 712, 714, 733, 734, 743, 780, 781, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 813, 815, 819, 823, 824, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 924, 925, 926, 929, 933, 934, 935, 937, 949, 950, 951, 953, 956, 963, 977, 981, 982, 987, 989, 993, 994, 1000, 1001, 1003, 1009, 1014, 1024, 1025, 1027, 1029, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "name_to_color": 311, "named_estim": [568, 569, 570, 571], "named_estimators_": [568, 569, 570, 571, 1044, 1046], "named_step": [71, 84, 144, 411, 594, 595, 598, 865, 866, 905, 906, 989, 1025, 1043, 1045], "named_transform": [864, 1051], "named_transformers_": 465, "namedtupl": [618, 951, 1052], "namespac": 405, "namiya": 1043, "nan": [73, 119, 125, 161, 162, 167, 215, 236, 238, 240, 254, 262, 311, 315, 320, 321, 322, 323, 366, 372, 382, 389, 394, 417, 447, 469, 497, 556, 557, 558, 562, 563, 565, 594, 595, 598, 604, 607, 610, 628, 629, 630, 631, 636, 713, 714, 715, 722, 723, 724, 725, 729, 730, 731, 770, 779, 784, 785, 786, 788, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 874, 875, 879, 881, 882, 885, 886, 890, 893, 894, 896, 923, 924, 925, 926, 968, 982, 993, 1003, 1009, 1031, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "nan_euclidean": [629, 763, 779], "nan_euclidean_dist": [315, 763, 983, 1046], "nandana": [1042, 1043, 1044], "nanshan": 1049, "nanta": 1039, "nanxin": 1044, "nanyang": 377, "naois": [1051, 1053], "naoki": [1038, 1048], "naoya": [1042, 1043, 1044, 1045], "naozin555": 1049, "napa": 311, "narasimhan": 852, "nardelli": 1039, "narendra": [1047, 1053], "narendramukherje": 1047, "narendran": 1044, "narin": [223, 1043, 1044], "narinek": [1043, 1044], "narr": [380, 394, 659, 905, 910, 1036, 1037], "narrai": 595, "narrow": [11, 112, 122, 305, 307, 385, 845, 846], "nartayxd": 1050, "nasa": [68, 351, 352, 377], "nasdaq": 10, "naser": 1046, "nasir": 1044, "nass": 1051, "nastegiano": 1050, "nat": [608, 609, 705, 756, 758, 1050], "natasha": 1046, "natchiappan": [1049, 1050], "nate": [1042, 1043, 1049], "nath": 1044, "nathan": [536, 1044, 1048, 1051], "nathaniel": [1043, 1044, 1046], "nathansquan": 1050, "nati": 1051, "nation": [9, 78, 296, 375, 852], "nativ": [2, 11, 125, 129, 154, 161, 253, 367, 375, 394, 403, 417, 497, 562, 563, 837, 838, 961, 989, 993, 994, 1013, 1046, 1048], "native_result": 119, "natl": [690, 694, 990], "natur": [2, 25, 29, 115, 122, 156, 167, 168, 173, 181, 197, 198, 214, 215, 222, 236, 243, 249, 268, 281, 351, 380, 382, 394, 415, 417, 418, 421, 445, 451, 458, 552, 591, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 693, 705, 742, 756, 758, 847, 848, 849, 851, 853, 855, 856, 857, 884, 940, 989, 990, 992, 993, 996, 998, 1003, 1007, 1013, 1036, 1044], "naul": [1041, 1042], "nav": 10, "navarret": [1044, 1045, 1046], "navarro": 1051, "navi": [31, 68, 77, 97, 101, 102, 129, 176, 200, 208, 221, 244, 245, 246, 249, 266, 268, 288, 295, 328, 359], "navig": [388, 1038], "navin": 901, "navistar": 10, "navkal": 1044, "navractil": 993, "navratil2007": 993, "nawazish": [1051, 1052], "na\u00efv": 1029, "nb": [6, 100, 128, 362, 842, 995], "nbclaim": 215, "nber": 8, "nbr": [853, 996], "nbrs_": [689, 690], "nbsp": [10, 24, 69, 70, 114, 116, 117, 122, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 186, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360], "nbviewer": [10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360], "nbyte": [51, 230], "nca": [219, 291, 292, 293, 854, 996], "nca_pip": 996, "ncall": 386, "ncanip": 854, "nclass": 254, "ncluster": 42, "ncol": [2, 3, 11, 28, 30, 32, 51, 55, 64, 93, 98, 103, 120, 168, 197, 198, 199, 205, 215, 218, 219, 229, 236, 253, 255, 261, 262, 270, 273, 283, 286, 300, 306, 307, 309, 310, 320, 345, 346, 352], "ncorrect": 259, "ncsu": [146, 377], "ncv": [452, 454], "nd": [1049, 1053], "ndarrai": [51, 56, 88, 197, 240, 257, 258, 259, 380, 381, 382, 386, 387, 405, 418, 421, 422, 425, 426, 428, 431, 432, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 716, 719, 722, 723, 724, 725, 728, 729, 739, 746, 747, 749, 751, 752, 754, 755, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 790, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 922, 923, 924, 925, 930, 931, 939, 941, 942, 943, 944, 948, 955, 957, 958, 962, 965, 966, 968, 969, 970, 971, 974, 979, 980, 993, 1008, 1014, 1039, 1043, 1046, 1047, 1050, 1051, 1052, 1053], "ndata": 265, "ndataset": [212, 307], "ndbscan": 63, "ndcg": [727, 757, 993, 1043], "ndcg_score": [727, 993, 1043, 1046, 1051, 1052], "ndenumer": 209, "ndepend": 168, "ndim": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 925, 926], "ndimag": [12, 44, 45, 52, 302, 1028], "ndingwal": 1043, "ndirangu": [1046, 1050], "ne": [993, 996], "neal": [989, 1049], "near_uniqu": 312, "nearbi": [410, 996], "nearer": [849, 857, 996], "nearest": [10, 12, 29, 30, 37, 38, 48, 49, 52, 56, 59, 64, 70, 76, 80, 87, 93, 96, 124, 126, 131, 137, 153, 162, 188, 209, 213, 220, 223, 229, 235, 236, 252, 262, 287, 289, 292, 293, 297, 301, 302, 310, 335, 339, 344, 348, 369, 372, 377, 389, 392, 394, 410, 416, 417, 421, 424, 434, 445, 447, 449, 451, 453, 458, 462, 463, 497, 503, 505, 608, 609, 628, 629, 631, 632, 636, 689, 690, 692, 693, 697, 793, 794, 801, 831, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 865, 866, 870, 885, 967, 990, 999, 1008, 1014, 1015, 1016, 1023, 1031, 1036, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1048], "nearest_neighbor": [42, 453, 692], "nearest_neighbor_algorithm": [847, 855, 856], "nearest_neighbors_algorithm": [848, 853], "nearestcentroid": [294, 351, 994, 996, 1036, 1040, 1043, 1048, 1051], "nearestneighbor": [283, 319, 397, 410, 421, 445, 447, 449, 462, 689, 690, 694, 847, 848, 849, 851, 855, 856, 857, 996, 1036, 1040, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "nearli": [23, 262, 375, 394, 408, 765, 993, 996, 1005, 1029], "neat": [1013, 1036], "necess": [990, 996], "necessari": [5, 12, 113, 181, 197, 202, 243, 253, 259, 260, 266, 285, 343, 358, 366, 375, 378, 379, 380, 381, 382, 383, 384, 388, 392, 410, 412, 417, 453, 463, 489, 490, 492, 493, 494, 495, 496, 498, 535, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 672, 674, 676, 677, 692, 696, 796, 868, 877, 888, 892, 898, 982, 985, 989, 992, 995, 1003, 1009, 1029, 1036, 1044], "necessarili": [2, 29, 70, 96, 167, 197, 205, 215, 231, 232, 244, 253, 307, 351, 352, 374, 384, 403, 405, 407, 410, 417, 628, 853, 855, 856, 857, 987, 990, 992, 993], "need": [0, 2, 7, 10, 30, 44, 46, 51, 53, 55, 80, 95, 107, 115, 119, 121, 122, 123, 125, 130, 146, 149, 154, 161, 162, 167, 185, 199, 214, 215, 219, 226, 229, 231, 233, 236, 237, 243, 244, 248, 249, 253, 257, 259, 261, 262, 264, 278, 281, 283, 285, 310, 315, 322, 329, 339, 351, 352, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 426, 438, 442, 446, 450, 465, 466, 468, 504, 542, 552, 573, 583, 584, 589, 590, 591, 592, 628, 636, 639, 640, 641, 643, 650, 667, 669, 672, 677, 680, 693, 721, 722, 723, 724, 725, 782, 786, 798, 799, 801, 804, 805, 815, 816, 817, 826, 834, 837, 845, 846, 862, 865, 868, 872, 877, 878, 882, 900, 907, 910, 950, 982, 983, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1014, 1018, 1026, 1027, 1028, 1029, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "needl": [146, 377], "needs_proba": [743, 1045, 1053], "needs_threshold": [743, 1053], "neeraj": 1043, "neg": [1, 2, 4, 14, 22, 58, 73, 76, 84, 115, 121, 122, 127, 164, 166, 167, 175, 187, 193, 194, 195, 197, 215, 216, 223, 247, 248, 253, 256, 259, 262, 266, 268, 269, 273, 283, 305, 309, 319, 351, 386, 394, 395, 410, 414, 417, 418, 419, 421, 422, 433, 441, 445, 453, 466, 470, 483, 484, 485, 489, 532, 534, 536, 537, 538, 539, 541, 543, 545, 548, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 589, 592, 593, 596, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 678, 679, 680, 681, 688, 699, 700, 705, 706, 713, 714, 716, 717, 719, 720, 722, 723, 724, 725, 728, 730, 731, 732, 736, 739, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 783, 784, 785, 786, 788, 791, 792, 794, 798, 799, 807, 824, 826, 831, 838, 839, 848, 851, 856, 863, 872, 881, 883, 884, 889, 893, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 940, 942, 961, 991, 993, 994, 996, 997, 998, 999, 1007, 1008, 1015, 1029, 1030, 1031, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "neg_": [807, 824, 1042], "neg_brier_scor": [993, 1046], "neg_label": [253, 273, 872, 889], "neg_log_alphas_enet": 182, "neg_log_alphas_lasso": 182, "neg_log_alphas_positive_enet": 182, "neg_log_alphas_positive_lasso": 182, "neg_log_loss": [25, 253, 993], "neg_lr": 262, "neg_lr_bas": 262, "neg_lr_base_std": 262, "neg_mean_absolute_error": [2, 130, 199, 993], "neg_mean_absolute_percentage_error": [11, 119, 993, 1001], "neg_mean_gamma_devi": 993, "neg_mean_pinball_loss_05p_scor": 122, "neg_mean_pinball_loss_95p_scor": 122, "neg_mean_poisson_devi": 993, "neg_mean_squared_error": [161, 162, 199, 232, 274, 322, 828, 993, 1001, 1042], "neg_mean_squared_log_error": 993, "neg_median_absolute_error": 993, "neg_root_mean_squared_error": [2, 125, 311, 993], "neg_root_mean_squared_log_error": 993, "neg_root_mean_squared_log_error_scor": 1053, "negat": [394, 807, 824, 993], "negate_scor": [232, 807, 824], "negative_class": 713, "negative_likelihood_ratio": [262, 713], "negative_linestyl": 226, "negative_loglik": 76, "negative_mahal_dist": 470, "negative_outlier_factor": 851, "negative_outlier_factor_": [236, 290, 851, 999], "neglig": [167, 996, 1039, 1053], "neigh": [782, 847, 848, 849, 851, 853, 855, 856, 857], "neigh_dist": [847, 848, 849, 851, 853, 855, 856, 857], "neigh_ind": [847, 848, 849, 851, 853, 855, 856, 857], "neighbor": [10, 29, 37, 42, 45, 58, 64, 70, 125, 126, 128, 131, 137, 161, 162, 219, 220, 222, 223, 226, 229, 235, 236, 252, 262, 287, 288, 289, 290, 292, 293, 294, 296, 297, 301, 317, 319, 320, 351, 369, 372, 377, 389, 392, 394, 397, 410, 416, 417, 418, 421, 424, 434, 442, 445, 446, 449, 451, 453, 458, 459, 462, 464, 497, 503, 505, 564, 571, 603, 608, 609, 628, 629, 632, 689, 690, 691, 692, 693, 694, 696, 697, 782, 801, 831, 865, 866, 885, 901, 909, 967, 994, 999, 1014, 1015, 1016, 1023, 1028, 1030, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "neighbor_feat_idx": 628, "neighborhood": [31, 53, 80, 84, 101, 137, 162, 164, 218, 243, 284, 285, 286, 294, 295, 297, 377, 394, 410, 415, 421, 445, 447, 451, 458, 503, 505, 516, 542, 550, 629, 632, 697, 831, 847, 848, 851, 853, 854, 855, 856, 857, 859, 865, 866, 885, 990, 999, 1015, 1016, 1031, 1045], "neighborhoodcomponentanalysi": 292, "neighborhoodcomponentsanalysi": [219, 291, 292, 293, 996, 1045, 1050, 1054], "neighbors_algorithm": [689, 690], "neighborsbas": [1048, 1051], "neighborsclassifi": [853, 855, 856, 857, 1036], "neighborsregressor": 1036, "neighbour": [447, 463, 693, 998], "neighbourhood": [854, 996], "neighbourhood_components_analysi": 854, "neil": 1048, "neill": 1048, "neither": [162, 167, 315, 351, 362, 392, 407, 438, 595, 629, 929, 996, 1009], "nelder": 989, "nell": [0, 37, 221, 229, 398, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048], "nelson": [0, 1042, 1043, 1048], "nemour": 10, "neo": 1044, "nep": 1046, "neptun": 1013, "neq": [410, 993, 995, 1003], "ness": [162, 215], "nest": [98, 109, 136, 164, 186, 233, 251, 253, 254, 276, 278, 322, 367, 386, 394, 397, 410, 414, 420, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 463, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 505, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 806, 815, 823, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 993, 996, 1015, 1036, 1037, 1040, 1042, 1043, 1044, 1050], "nested_lin": 264, "nested_scor": 264, "nesterov": [300, 862, 863, 997, 1052, 1053], "nesterovs_momentum": [300, 862, 863], "nestor": 1051, "net": [29, 164, 175, 181, 183, 184, 188, 190, 191, 208, 216, 230, 233, 272, 295, 386, 408, 414, 472, 473, 479, 502, 525, 558, 559, 560, 561, 565, 566, 567, 647, 648, 653, 658, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 685, 861, 913, 914, 915, 916, 982, 993, 998, 1007, 1015, 1016, 1018, 1031, 1036, 1041, 1045, 1046, 1048], "netbsd": 1036, "netnew": 1029, "neto": [591, 731, 1054], "nettei": 1049, "network": [4, 236, 301, 366, 367, 368, 369, 374, 375, 394, 395, 403, 410, 415, 417, 422, 497, 534, 536, 568, 569, 697, 742, 862, 863, 989, 991, 993, 1007, 1009, 1013, 1016, 1025, 1030, 1031, 1036, 1050, 1054], "networkx": [15, 389], "neural": [3, 4, 29, 259, 301, 369, 394, 403, 414, 415, 417, 422, 534, 536, 539, 541, 548, 568, 569, 640, 646, 697, 742, 798, 854, 861, 862, 863, 871, 985, 989, 990, 991, 993, 996, 999, 1003, 1007, 1009, 1013, 1016, 1018, 1025, 1030, 1031, 1036, 1048], "neural_network": [29, 164, 168, 237, 298, 299, 300, 301, 302, 303, 368, 369, 392, 994, 997, 1015, 1038, 1053], "neuraxl": 1013, "neuro": 1013, "neurodebian": 0, "neuroimag": [1012, 1018], "neuron": [862, 863, 991, 997], "neutral": 717, "nevalu": 130, "never": [115, 234, 323, 362, 380, 389, 392, 403, 409, 410, 411, 413, 414, 451, 458, 524, 556, 557, 558, 565, 865, 866, 985, 1003, 1046, 1049], "nevertheless": [2, 170, 417], "new": [2, 5, 6, 8, 48, 54, 56, 58, 68, 69, 88, 100, 109, 111, 113, 114, 115, 120, 122, 125, 129, 130, 143, 146, 149, 155, 162, 169, 170, 197, 203, 211, 226, 233, 253, 258, 261, 266, 281, 287, 289, 311, 316, 319, 322, 323, 327, 330, 338, 343, 362, 367, 368, 374, 375, 377, 378, 379, 382, 383, 384, 386, 388, 389, 393, 394, 395, 397, 403, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 435, 438, 439, 441, 443, 444, 446, 448, 449, 450, 453, 463, 464, 473, 483, 484, 485, 505, 509, 510, 535, 542, 545, 556, 557, 558, 559, 564, 565, 566, 567, 582, 603, 631, 632, 636, 641, 642, 643, 646, 647, 653, 689, 690, 691, 698, 699, 701, 702, 703, 789, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 835, 851, 874, 875, 880, 881, 882, 884, 885, 886, 893, 894, 902, 920, 923, 928, 963, 968, 982, 983, 985, 989, 993, 994, 996, 997, 998, 999, 1003, 1005, 1006, 1007, 1008, 1014, 1018, 1020, 1021, 1024, 1027, 1029, 1034, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "new_data": [287, 382], "new_valu": [568, 569, 570, 571], "newaxi": [10, 12, 17, 22, 40, 80, 102, 110, 150, 178, 187, 193, 198, 199, 200, 202, 203, 214, 229, 231, 274, 288, 295, 358, 359, 406, 537, 989], "newei": 1044, "newer": [149, 379, 397, 415], "newgroups20": 212, "newli": [378, 393, 417, 464, 1000, 1042, 1043, 1051], "newsgroup": [5, 13, 17, 230, 260, 330, 352, 353, 373, 406, 418, 489, 490, 1021, 1031], "newsgroups_test": 375, "newsgroups_train": [375, 489], "newsgroups_vector": 490, "newshap": 155, "newsl": [886, 1003], "newslett": 374, "newsweed": 1029, "newswir": 375, "newton": [197, 215, 302, 611, 649, 659, 660, 670, 681, 862, 863, 989, 1040, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "newton_cg": 1046, "next": [5, 23, 58, 78, 118, 119, 123, 133, 156, 166, 170, 190, 194, 197, 227, 233, 235, 239, 240, 245, 254, 265, 281, 310, 311, 312, 317, 327, 351, 356, 360, 362, 369, 378, 380, 382, 384, 403, 406, 410, 411, 414, 417, 509, 510, 611, 635, 693, 699, 701, 703, 782, 798, 799, 831, 959, 982, 986, 992, 993, 1003, 1018, 1033, 1036, 1049, 1050], "nezar": 1046, "nff": 700, "nfit": 327, "nfkd": [589, 590, 592, 1046], "nfor": 234, "nfrom": 154, "nft": 700, "ng": [410, 415, 692, 851, 997, 999, 1047], "ngiam": 997, "ngo": 1048, "ngram_rang": [260, 330, 418, 589, 590, 592], "ngram_vector": 418, "ngroup": 254, "ngshya": 1047, "nguyen": [1046, 1047, 1050, 1051], "nguy\u1ec5n": 1051, "ni": [123, 1042, 1047], "nic": 1049, "nice": [2, 65, 198, 233, 305, 366, 415, 1029], "nicer": 632, "nichol": 1040, "nichola": [1044, 1045, 1047], "nicholson": [1042, 1043, 1044], "nick": [146, 377, 1036, 1042, 1043, 1044, 1045], "nicki": 1050, "nickledav": 1042, "nicknam": 375, "nico": [1042, 1049], "nicol": 1043, "nicola": [0, 146, 309, 398, 659, 989, 1006, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "nicolashug": 1045, "nicolasservel": 1047, "nicolau": 1044, "nicula": [0, 93, 234, 302, 398, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "niculescu": [23, 25, 407, 438, 440], "nidhin": 1046, "niederb\u00fchl": 1044, "niederhut": [1044, 1046], "nielsen": [744, 1044], "nielsenmarkus11": [1043, 1044], "nigam": [840, 995], "nigel": 1049, "night": 11, "nightli": [0, 367, 383, 384], "nightwalkx": 1052, "nihal": 1051, "nihar": 1044, "niket": 1050, "nikhil": 1050, "nikita": [1043, 1044, 1046, 1049, 1050, 1051], "nikla": [1046, 1047], "nikolai": [1039, 1040, 1041, 1042, 1044, 1045, 1050, 1052], "nil": 1048, "nilearn": 1013, "nilesh": 1044, "nilichen": 123, "nilotp": [636, 638], "nima": 1051, "nima10khodaveisi": 1051, "nimbus1after2a1sun7show": 177, "nine": 1020, "ninertia": 62, "ningchi": 1042, "ninh": 173, "ninja": [378, 1018], "nip": [100, 377, 516, 542, 567, 642, 993], "nipal": [413, 484, 485], "nipy_spectr": [10, 37, 44, 45, 49, 50, 58, 59, 99], "nirvan": [1044, 1048], "nishan": 1046, "nishihara": 1048, "nishu": 1052, "nist": [377, 993], "nistir": 377, "nit": 380, "nitinramvelraj": 1051, "nitish": 1043, "nitya": 1046, "niuk": 1052, "niyogi": 990, "nizam": 1044, "nizhibitski": 1037, "nk": 697, "nkish": 1047, "nkmean": 42, "nl": 386, "nl1_ratio": 188, "nlasso": 181, "nlathia": 1042, "nlearn": 300, "nlog": 155, "nlogn": 693, "nlp": [375, 415, 418, 840, 844, 991, 1018], "nls_max_it": 1041, "nltk": [418, 1012, 1013], "nm": 366, "nmcd": 78, "nmd": 221, "nmean": 97, "nmf": [13, 70, 386, 408, 418, 536, 539, 545, 548, 1030, 1031, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "nmf_estim": 93, "nmi": [35, 410, 718, 737, 738, 758], "nmixtur": 42, "nmle": 78, "nmse": [3, 274], "nmslib": 283, "nmslib_": 283, "nmslibtransform": 283, "nn": [235, 418, 696, 1027], "nn_candid": 271, "nn_compon": [230, 231], "nn_sampl": [230, 271], "nndsvd": [415, 539, 541, 548, 1045, 1048], "nndsvda": [13, 415, 539, 541, 548, 1045, 1048], "nndsvdar": [415, 539, 541, 548, 1045], "nneq": 700, "nnl": [192, 658], "nnlnr": [1051, 1052], "nnmf": [418, 1030, 1031, 1036], "nntp": [351, 375, 1029], "nnz": [183, 352, 375, 700], "no_chang": 902, "no_interact": [562, 563, 1051], "no_mathjax": 380, "no_structur": [42, 60], "no_valid": 382, "no_weight": 210, "no_weights_handl": 210, "noa": [1047, 1053], "noah": 989, "noc": 10, "noced": 659, "nodar": 1049, "node": [10, 39, 119, 123, 181, 315, 321, 322, 356, 360, 388, 389, 410, 412, 415, 417, 442, 443, 446, 464, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 651, 655, 657, 683, 684, 693, 845, 846, 913, 914, 915, 916, 917, 919, 947, 961, 996, 998, 999, 1000, 1009, 1039, 1040, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1053], "node_count": [315, 356, 360, 913, 914, 915, 916], "node_depth": 360, "node_id": [360, 917, 919], "node_ind": 360, "node_index": 360, "node_position_model": 10, "noel": [0, 109, 110, 111, 399, 1036, 1037, 1038, 1039, 1040, 1048], "noelano": 1048, "nof": 126, "nogil": [380, 381], "noinfo": 236, "noir": 311, "nois": [3, 8, 12, 18, 19, 25, 29, 31, 38, 42, 47, 50, 52, 53, 59, 60, 65, 73, 84, 93, 94, 96, 98, 100, 110, 112, 122, 127, 128, 148, 149, 150, 154, 158, 159, 164, 176, 178, 179, 181, 186, 187, 192, 195, 196, 199, 200, 201, 202, 214, 221, 223, 226, 228, 229, 232, 259, 267, 272, 274, 295, 299, 300, 307, 312, 316, 322, 345, 358, 359, 362, 376, 382, 385, 407, 410, 415, 417, 419, 420, 421, 445, 447, 453, 512, 514, 515, 516, 517, 518, 519, 523, 525, 526, 531, 533, 535, 542, 607, 608, 609, 610, 612, 614, 615, 616, 617, 618, 622, 623, 625, 626, 645, 646, 650, 651, 652, 654, 655, 656, 657, 664, 665, 666, 672, 680, 686, 687, 693, 882, 894, 900, 986, 988, 989, 990, 993, 996, 1006, 1015, 1027, 1028, 1037, 1042, 1047, 1049, 1050], "noise_coef": 52, "noise_kernel": 154, "noise_level": [149, 154, 155, 613, 626], "noise_level_bound": [154, 155, 626], "noise_level_grid": 155, "noise_std": 156, "noise_vari": [185, 533, 657, 989, 1050], "noise_variance_": [93, 185, 533, 535, 542, 657, 1043, 1050], "noise_variance_init": 533, "noiseless": [96, 991], "noisi": [3, 31, 47, 53, 60, 94, 109, 142, 149, 155, 181, 196, 199, 221, 229, 249, 260, 266, 268, 269, 310, 358, 359, 362, 410, 418, 420, 421, 445, 447, 451, 522, 525, 942, 988, 990, 996, 1008, 1013], "noisier": 990, "noisili": 168, "noisy_circl": [42, 60], "noisy_moon": [42, 60], "noiz": 83, "nolan": 1053, "noll": [197, 215], "nomenclatur": [989, 1042], "nomin": [168, 374, 394, 395, 417, 418, 582, 583, 717, 1003, 1014], "non": [0, 1, 3, 4, 7, 8, 11, 12, 14, 22, 23, 25, 31, 32, 35, 47, 55, 60, 69, 73, 78, 80, 94, 95, 96, 98, 111, 119, 127, 128, 130, 136, 142, 143, 145, 153, 155, 162, 164, 166, 167, 168, 169, 170, 175, 176, 181, 183, 187, 190, 191, 193, 194, 195, 196, 198, 199, 203, 211, 212, 213, 215, 216, 221, 222, 223, 227, 228, 229, 230, 232, 236, 243, 245, 249, 251, 252, 253, 254, 259, 268, 276, 278, 283, 287, 289, 290, 302, 305, 307, 309, 310, 316, 317, 318, 319, 321, 322, 330, 334, 336, 341, 342, 343, 346, 347, 349, 351, 352, 353, 360, 362, 366, 367, 372, 375, 376, 380, 381, 382, 385, 386, 388, 389, 392, 394, 395, 407, 408, 410, 411, 414, 416, 417, 418, 419, 420, 422, 438, 442, 446, 447, 451, 453, 457, 463, 464, 465, 466, 468, 469, 489, 497, 498, 504, 505, 509, 527, 533, 536, 537, 539, 541, 545, 548, 550, 552, 553, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 573, 589, 590, 592, 593, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 636, 639, 644, 651, 653, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 673, 677, 678, 679, 686, 687, 688, 689, 690, 691, 692, 693, 695, 699, 700, 703, 707, 708, 713, 716, 718, 720, 721, 727, 728, 729, 736, 738, 740, 741, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 779, 783, 786, 789, 790, 791, 792, 795, 798, 799, 801, 802, 806, 808, 809, 810, 811, 813, 819, 827, 831, 834, 853, 855, 856, 857, 860, 865, 866, 868, 869, 870, 873, 877, 878, 879, 880, 881, 882, 884, 885, 892, 893, 894, 895, 896, 898, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 925, 926, 940, 942, 946, 948, 956, 982, 983, 984, 985, 986, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1015, 1027, 1028, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "non_determinist": [382, 1050], "non_neg": [583, 1043], "non_negative_factor": [1045, 1047, 1048, 1049, 1053], "non_nest": 264, "non_nested_scor": 264, "non_nested_scores_lin": 264, "non_noisy_label": 321, "non_outliers_mask": 305, "non_zero": [5, 10], "nonblasdotwarn": 1048, "none": [2, 6, 7, 8, 11, 15, 24, 28, 31, 37, 39, 40, 42, 50, 52, 53, 54, 60, 95, 98, 102, 113, 118, 119, 121, 124, 125, 138, 146, 150, 156, 157, 170, 176, 197, 198, 205, 208, 215, 218, 232, 233, 234, 236, 252, 259, 260, 271, 288, 290, 294, 309, 312, 317, 318, 327, 330, 337, 339, 340, 343, 344, 345, 351, 352, 375, 377, 380, 382, 387, 389, 394, 400, 403, 410, 414, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 708, 709, 710, 712, 713, 714, 715, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 735, 736, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 928, 929, 930, 931, 934, 936, 941, 942, 945, 946, 947, 948, 952, 953, 956, 959, 962, 964, 967, 968, 974, 977, 978, 980, 982, 989, 993, 1003, 1006, 1009, 1020, 1024, 1029, 1031, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "nonecheck": 381, "nonetheless": [394, 993], "nonexist": 633, "nonflavanoid": 377, "nonlinear": [274, 318, 645, 689, 690, 694, 697, 871, 989, 990, 998, 1003], "nonmetr": [691, 695, 990], "nonneg": [410, 415, 454, 539, 541, 548, 882], "nonner": 1047, "nonoverlap": 377, "nonparametr": [419, 420, 608, 609], "nonzero": [15, 17, 102, 196, 230, 263, 353, 406, 421, 445, 524, 525, 532, 538, 543, 549, 589, 592, 686, 687, 700, 847, 848, 851, 853, 855, 856, 993], "nonzero_coef": 989, "noptic": 63, "noptimum": 155, "noqa": [43, 65, 88, 99, 122, 146, 161, 162, 168, 194, 218, 220, 270, 271, 317, 351, 384, 580, 581, 628, 804, 805, 982, 1045], "nor": [122, 262, 351, 362, 366, 385, 392, 407, 418, 438, 447, 595, 929, 997, 1009, 1047], "norbert": [0, 370, 1038, 1048, 1049, 1050], "nordbi": 1053, "nore\u00f1a": 1049, "norm": [10, 12, 13, 15, 28, 32, 38, 52, 96, 152, 155, 176, 181, 183, 188, 221, 243, 244, 245, 247, 249, 256, 260, 288, 305, 339, 352, 386, 389, 394, 410, 418, 419, 443, 444, 448, 460, 461, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 490, 532, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 590, 591, 592, 598, 644, 647, 648, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 673, 675, 677, 679, 682, 685, 686, 687, 691, 693, 694, 695, 771, 842, 877, 892, 905, 907, 910, 975, 976, 986, 989, 991, 993, 1003, 1007, 1039, 1041, 1043, 1047], "norm1": 465, "norm2": 465, "norm_diag": 528, "norm_laplacian": 696, "norm_ord": [598, 1043], "norm_y_weight": 1048, "normal": [3, 8, 10, 13, 15, 17, 18, 24, 27, 32, 33, 35, 38, 42, 44, 55, 59, 60, 64, 71, 73, 76, 77, 78, 83, 84, 94, 109, 110, 112, 115, 121, 122, 125, 126, 127, 141, 152, 155, 156, 162, 164, 166, 167, 175, 176, 177, 178, 179, 181, 187, 190, 192, 195, 199, 200, 201, 203, 211, 215, 216, 221, 236, 243, 248, 249, 252, 253, 256, 259, 265, 288, 289, 292, 304, 306, 310, 313, 316, 319, 322, 329, 339, 352, 353, 362, 369, 372, 375, 376, 377, 380, 385, 389, 393, 394, 405, 406, 407, 410, 411, 413, 416, 417, 418, 422, 441, 450, 452, 453, 454, 463, 465, 466, 476, 483, 484, 485, 490, 497, 513, 516, 520, 527, 528, 534, 537, 542, 543, 545, 549, 550, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 567, 580, 581, 583, 589, 590, 591, 592, 612, 626, 628, 640, 659, 660, 670, 673, 677, 681, 688, 692, 696, 698, 704, 705, 707, 719, 725, 727, 735, 737, 742, 746, 750, 751, 753, 756, 757, 758, 762, 771, 795, 796, 797, 804, 805, 831, 833, 842, 844, 850, 851, 854, 865, 866, 869, 870, 873, 875, 878, 879, 880, 881, 882, 883, 885, 890, 891, 893, 894, 895, 896, 900, 901, 913, 914, 915, 916, 941, 942, 946, 969, 970, 975, 976, 982, 985, 987, 989, 990, 991, 992, 995, 999, 1004, 1006, 1008, 1009, 1015, 1025, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "normalesup": [10, 30, 44, 64, 231], "normalis": [167, 612, 789, 1029], "normalization_": [640, 985], "normalize_compon": [1044, 1046], "normalize_i": [154, 420, 612, 1050], "normalized_discounted_cumulative_gain": 757, "normalized_mutual_info_scor": [35, 410, 737, 756, 796, 993, 1044, 1050], "normalized_stress": [218, 691, 695, 990, 1051], "normalized_weight": 178, "norms_squar": 687, "north": [377, 410], "northern": 311, "northrop": 10, "northwestern": [309, 659], "norvan": 1046, "nose": [377, 1039, 1043], "nosetest": 1038, "not_memb": 167, "notabl": [233, 305, 374, 394, 409, 497, 729, 878, 990, 992, 996, 1040, 1043, 1050], "notarstefano": [1044, 1045], "notat": [126, 394, 411, 415, 418, 591, 713, 989, 993, 1020, 1045, 1052], "notch": 1018, "note": [0, 2, 3, 5, 6, 9, 10, 12, 17, 18, 24, 25, 30, 35, 51, 64, 69, 70, 78, 80, 83, 84, 90, 96, 112, 113, 115, 118, 122, 123, 127, 146, 149, 156, 161, 166, 167, 168, 169, 170, 173, 185, 186, 190, 197, 198, 199, 201, 205, 211, 213, 215, 218, 219, 220, 222, 226, 227, 229, 231, 232, 233, 234, 236, 244, 253, 254, 255, 259, 262, 265, 266, 267, 273, 281, 283, 285, 289, 290, 300, 305, 306, 309, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 329, 331, 339, 343, 351, 360, 366, 367, 374, 377, 378, 380, 381, 382, 384, 386, 387, 392, 393, 394, 397, 400, 403, 404, 407, 408, 410, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 491, 497, 499, 505, 510, 516, 520, 528, 531, 534, 535, 539, 540, 541, 542, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 598, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 633, 634, 636, 637, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 700, 701, 708, 709, 714, 716, 721, 722, 723, 724, 725, 729, 730, 731, 733, 735, 739, 742, 747, 755, 756, 759, 764, 765, 769, 771, 775, 779, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 921, 931, 932, 941, 942, 953, 956, 961, 968, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1020, 1027, 1028, 1029, 1031, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "notebook": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 381, 382, 386, 411, 469, 903, 1009, 1012, 1013, 1014, 1047, 1050], "notes_neighbor": 1036, "notfittederror": [107, 394, 854, 977, 1040, 1042, 1045, 1046, 1052, 1053], "noth": [17, 68, 351, 352, 385, 543, 715, 868, 877, 926, 1003], "nothman": [0, 70, 395, 398, 418, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "notic": [5, 11, 23, 24, 32, 51, 55, 78, 112, 114, 115, 122, 125, 145, 176, 181, 226, 239, 256, 257, 259, 260, 262, 268, 269, 283, 310, 343, 351, 352, 353, 362, 382, 385, 395, 409, 414, 417, 497, 542, 564, 982, 992, 993, 999, 1029, 1033, 1049], "notifi": [573, 574, 575, 1034, 1046], "notimplementederror": [466, 554, 555, 594, 595, 603, 892, 902, 1043, 1053], "notin": 410, "notion": [268, 343, 352, 368, 392, 410, 415, 417, 989, 993], "notmatthancock": [1044, 1046], "noto": 1049, "noun": 394, "nouri": [366, 1037, 1039], "novak": 1039, "novarti": 10, "novaya": [1046, 1049], "novel": [211, 289, 338, 362, 407, 982], "novelti": [164, 211, 226, 236, 284, 290, 297, 338, 851, 1015, 1016, 1030, 1031, 1036, 1044], "novemb": [146, 197, 215, 377, 1041, 1042, 1044], "novic": 1038, "now": [2, 3, 5, 11, 15, 18, 51, 55, 69, 84, 98, 109, 110, 114, 116, 118, 119, 122, 123, 130, 133, 146, 149, 154, 155, 156, 162, 166, 167, 168, 169, 173, 176, 178, 183, 185, 186, 198, 199, 201, 222, 231, 233, 253, 255, 259, 262, 270, 271, 273, 278, 286, 310, 316, 317, 319, 320, 321, 322, 323, 328, 339, 351, 352, 353, 362, 366, 368, 375, 380, 381, 382, 386, 392, 393, 394, 406, 410, 414, 415, 417, 418, 422, 494, 509, 510, 513, 537, 550, 580, 581, 583, 628, 631, 650, 654, 659, 664, 685, 727, 757, 798, 799, 804, 805, 837, 852, 864, 865, 968, 982, 983, 989, 993, 999, 1002, 1003, 1008, 1009, 1012, 1014, 1020, 1027, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "nowadai": 380, "nozawa": [1051, 1052], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 90, 94, 95, 96, 97, 99, 100, 102, 103, 110, 111, 112, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 374, 375, 380, 382, 385, 386, 389, 392, 394, 400, 406, 410, 411, 414, 415, 416, 417, 418, 420, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 486, 497, 498, 509, 510, 521, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 564, 565, 566, 567, 570, 571, 582, 583, 586, 587, 589, 590, 594, 595, 598, 602, 605, 607, 610, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 669, 671, 672, 673, 675, 676, 677, 678, 679, 682, 683, 684, 685, 688, 692, 693, 695, 696, 700, 703, 704, 707, 708, 710, 713, 714, 715, 716, 727, 728, 730, 731, 733, 735, 736, 739, 740, 755, 757, 764, 770, 774, 779, 782, 783, 784, 785, 788, 789, 790, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 827, 828, 829, 831, 832, 833, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 855, 856, 857, 861, 862, 869, 870, 872, 878, 879, 880, 881, 882, 884, 885, 886, 893, 894, 897, 898, 900, 901, 902, 905, 907, 908, 910, 911, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 928, 930, 931, 940, 941, 942, 947, 948, 955, 956, 958, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 979, 982, 983, 988, 989, 991, 993, 994, 996, 997, 999, 1003, 1004, 1005, 1007, 1008, 1009, 1020, 1024, 1025, 1027, 1028, 1029, 1037, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "npach": [1051, 1052], "npo": 221, "npolynomi": 2, "nprior": 243, "npropag": 42, "nqy18": 418, "nreceiv": 268, "nrow": [2, 3, 28, 30, 32, 55, 64, 71, 93, 125, 158, 168, 197, 199, 205, 215, 218, 219, 222, 236, 253, 261, 262, 283, 307, 309, 310, 320, 327, 345, 346, 1025], "nsampl": [382, 798, 799], "nsup": 12, "nswdemand": 125, "nswprice": 125, "nt": 15, "nt_uri": 15, "ntest": 292, "ntf": 700, "nth": [266, 708, 993], "nthe": [168, 257, 360], "ntime": [9, 270], "nto": [203, 268], "ntol": 146, "ntrain": 48, "ntree": 2, "ntrue": [4, 326, 327, 1025], "ntt": 700, "ntu": [173, 374, 488, 509, 510, 659], "nu": [5, 7, 9, 158, 211, 226, 338, 366, 417, 420, 620, 678, 907, 908, 909, 999, 1007, 1008, 1047, 1051], "nuanc": 394, "nuc": 278, "nuclear": [146, 377], "nuclei": [146, 377], "nudge_dataset": 302, "nuff": 1043, "nugmanov": [1044, 1045], "nuisanc": 420, "nukariya": [1048, 1049], "null": [42, 69, 167, 168, 169, 253, 259, 265, 410, 414, 497, 649, 670, 681, 705, 732, 758, 796, 830, 989, 990, 993, 1008, 1046], "null_count": 11, "nullabl": [628, 629, 630, 631, 1047, 1051], "nullformatt": [218, 220, 223, 283], "nullloc": 288, "num": [2, 10, 69, 146, 149, 154, 155, 156, 168, 169, 199, 266, 267, 319, 321, 322, 417, 497, 633], "num_col": 240, "num_cor": 386, "num_depend": 253, "num_featur": [991, 1051], "num_linear_processor": 130, "num_missing_cel": 125, "num_pip": 240, "num_preprocess": 465, "num_proc": [228, 316], "num_sampl": [801, 815, 1051], "num_selector": 130, "num_sent": 68, "num_thread": 283, "num_tree_processor": 130, "num_trial": 264, "numba": [283, 1014], "number": [2, 3, 5, 6, 8, 10, 11, 12, 17, 18, 23, 24, 25, 30, 31, 34, 36, 37, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 55, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 73, 80, 83, 84, 89, 90, 93, 95, 97, 98, 100, 109, 110, 112, 115, 117, 118, 120, 121, 122, 123, 126, 130, 132, 142, 143, 144, 146, 157, 158, 162, 164, 167, 168, 173, 181, 186, 196, 197, 198, 199, 204, 205, 211, 212, 213, 214, 215, 218, 226, 230, 234, 236, 237, 243, 244, 246, 248, 249, 252, 253, 254, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 278, 283, 285, 289, 290, 305, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 323, 330, 339, 344, 346, 352, 353, 356, 360, 362, 367, 368, 372, 374, 375, 376, 377, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 582, 583, 584, 585, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 704, 705, 706, 708, 713, 714, 715, 717, 719, 721, 725, 729, 730, 731, 732, 735, 736, 739, 741, 753, 756, 775, 779, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 926, 929, 941, 942, 945, 946, 961, 962, 964, 967, 968, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1020, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "number_norm": 17, "numbernormalizingvector": 17, "numer": [2, 11, 17, 64, 69, 73, 117, 119, 130, 146, 154, 157, 168, 169, 186, 197, 215, 236, 238, 240, 293, 311, 318, 322, 353, 374, 375, 377, 383, 385, 386, 392, 393, 394, 410, 412, 417, 418, 419, 420, 422, 423, 441, 444, 448, 460, 472, 473, 476, 479, 490, 491, 492, 497, 501, 502, 503, 505, 506, 511, 532, 534, 536, 541, 542, 548, 562, 563, 568, 582, 591, 612, 618, 621, 628, 631, 633, 634, 647, 653, 655, 673, 688, 691, 695, 715, 779, 789, 795, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 840, 841, 842, 843, 844, 862, 863, 868, 873, 878, 879, 886, 917, 918, 919, 925, 926, 941, 942, 982, 983, 989, 990, 994, 1001, 1003, 1004, 1009, 1017, 1018, 1020, 1029, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "numeric_featur": [69, 319], "numeric_onli": 168, "numeric_preprocessor": 238, "numeric_transform": [69, 319], "numerical_column": [167, 169, 468], "numerical_columns_subset": 119, "numerical_featur": [168, 311], "numerical_pip": 169, "numerical_transform": 69, "numfocu": 0, "numpi": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 88, 90, 93, 94, 95, 96, 97, 99, 100, 102, 103, 110, 111, 112, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 373, 374, 375, 378, 380, 381, 382, 383, 384, 386, 388, 389, 392, 393, 394, 397, 400, 402, 403, 405, 406, 410, 411, 414, 415, 416, 417, 418, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 486, 491, 494, 495, 497, 504, 507, 509, 510, 522, 528, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 570, 571, 582, 583, 586, 587, 589, 590, 592, 602, 605, 619, 628, 629, 630, 631, 632, 633, 634, 644, 647, 648, 650, 653, 654, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 673, 677, 678, 679, 685, 688, 689, 692, 693, 694, 695, 696, 700, 703, 704, 707, 708, 710, 713, 715, 727, 728, 730, 731, 733, 735, 736, 739, 740, 755, 757, 774, 780, 782, 783, 784, 785, 788, 789, 790, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 832, 833, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 907, 908, 910, 911, 913, 921, 922, 923, 924, 928, 930, 939, 940, 941, 942, 946, 947, 948, 955, 956, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 979, 980, 982, 983, 988, 989, 991, 993, 994, 996, 999, 1003, 1005, 1008, 1009, 1012, 1014, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1036, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "numpydoc": [380, 394, 397, 402], "nune": 1037, "nuniformli": 126, "nuniqu": 311, "nurseit": 1053, "nusvc": [366, 438, 908, 994, 1008, 1036, 1037, 1038, 1041, 1044, 1046, 1047, 1048, 1050], "nusvr": [5, 366, 911, 1008, 1038, 1044, 1046, 1047, 1048, 1050, 1051], "nutshel": 991, "nv": 10, "nvidia": [0, 392], "nvirginica": 268, "nwanna": 1051, "nweight": 132, "nwith": [35, 55, 59, 145, 352], "nx": [9, 296, 375, 499], "nxorabl": 1046, "ny": [9, 11, 258, 296, 375, 377, 499, 983, 1005], "nyc": [1012, 1018], "nymark": 1051, "nystroem": [2, 161, 211, 226, 231, 372, 641, 642, 643, 678, 871, 910, 911, 1031, 1037, 1043, 1046, 1048, 1049, 1050], "nystroem_approx_svm": 231, "nystroem_scor": 231, "nystroem_tim": 231, "nystrom": [880, 1045, 1046], "nystr\u00f6m": [2, 985], "nyu": [0, 179, 854], "nz": 531, "nzw": 1044, "n\u00e1jera": [1040, 1041, 1042, 1043], "n\u00e1pole": 1049, "o": [0, 15, 17, 25, 28, 36, 47, 53, 58, 59, 61, 62, 80, 83, 89, 95, 127, 146, 157, 185, 190, 195, 197, 212, 232, 243, 253, 259, 261, 268, 305, 306, 310, 316, 319, 322, 330, 343, 356, 366, 375, 377, 380, 397, 410, 412, 415, 417, 421, 423, 445, 448, 449, 451, 474, 476, 500, 535, 605, 628, 667, 668, 693, 833, 861, 876, 917, 961, 962, 985, 987, 989, 990, 993, 994, 996, 997, 1007, 1008, 1009, 1036, 1039, 1042, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "oa": [8, 13, 27, 32, 33, 75, 79, 80, 81, 100, 124, 164, 292, 294, 412, 470, 471, 474, 475, 477, 478, 513, 550, 801, 987, 1015], "oa_ms": 77, "oa_shrinkag": 77, "oak": 311, "oarc": 989, "ob2019": 993, "obaja": 1040, "obatin": 310, "obei": [394, 991], "obj": [233, 403, 568, 569, 950, 952, 953, 954, 959], "obj_func": [611, 612], "object": [2, 9, 12, 13, 17, 24, 25, 42, 48, 60, 64, 68, 69, 96, 107, 125, 130, 136, 145, 154, 164, 168, 181, 193, 197, 213, 215, 225, 233, 237, 239, 240, 241, 253, 257, 266, 268, 269, 271, 296, 311, 318, 319, 321, 322, 326, 352, 353, 362, 373, 374, 375, 380, 381, 383, 385, 386, 387, 389, 393, 394, 395, 400, 403, 410, 411, 412, 415, 418, 419, 420, 424, 426, 431, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 712, 719, 733, 734, 743, 759, 760, 782, 783, 790, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 920, 925, 926, 927, 928, 929, 932, 936, 938, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 961, 978, 979, 981, 989, 990, 991, 992, 996, 999, 1000, 1003, 1006, 1007, 1008, 1013, 1014, 1015, 1020, 1021, 1023, 1024, 1027, 1029, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "object_nam": [233, 950, 953], "obozinski": 415, "obscur": [1000, 1052], "observ": [2, 3, 5, 7, 9, 11, 12, 18, 22, 25, 32, 35, 38, 41, 51, 60, 69, 76, 78, 79, 80, 94, 95, 98, 100, 109, 112, 113, 115, 116, 122, 125, 126, 129, 137, 138, 146, 149, 152, 154, 155, 156, 158, 167, 168, 169, 176, 177, 192, 193, 195, 197, 198, 199, 201, 211, 215, 222, 223, 229, 230, 236, 253, 255, 259, 261, 262, 266, 273, 283, 286, 289, 296, 310, 321, 329, 338, 339, 343, 344, 351, 352, 353, 358, 359, 375, 377, 394, 397, 407, 410, 412, 413, 414, 415, 416, 419, 420, 442, 444, 446, 447, 448, 450, 460, 461, 470, 471, 472, 473, 474, 475, 476, 477, 525, 533, 552, 553, 564, 611, 612, 647, 653, 658, 702, 717, 719, 759, 822, 843, 851, 884, 886, 989, 992, 993, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1017, 1021, 1023, 1024, 1026, 1037, 1049, 1050, 1051, 1052], "observatori": 154, "obsolet": [1036, 1052], "obstruct": 1043, "obtain": [2, 5, 7, 10, 11, 18, 25, 46, 53, 55, 56, 69, 72, 73, 98, 100, 109, 119, 122, 123, 128, 136, 146, 151, 153, 167, 168, 181, 197, 199, 201, 211, 222, 236, 243, 244, 245, 253, 255, 259, 260, 261, 265, 268, 286, 310, 318, 337, 343, 352, 353, 360, 362, 375, 377, 382, 394, 403, 407, 409, 410, 412, 413, 415, 417, 418, 419, 420, 438, 443, 470, 497, 533, 534, 556, 557, 558, 559, 560, 561, 564, 565, 566, 594, 607, 615, 646, 660, 662, 667, 669, 673, 675, 677, 678, 688, 709, 713, 727, 740, 757, 794, 807, 824, 830, 833, 834, 837, 851, 862, 882, 894, 907, 910, 913, 914, 942, 983, 985, 987, 989, 990, 992, 993, 994, 996, 997, 999, 1000, 1003, 1007, 1008, 1042, 1044, 1047, 1049, 1050, 1051, 1052, 1053], "obviat": 985, "obviou": [167, 343, 362, 366, 406, 415], "obvious": [162, 366, 1029], "oc": 1051, "occam": 1027, "occas": 380, "occasion": [395, 728, 1045], "occup": [167, 305, 322, 497], "occupation_cler": 167, "occupation_manag": 167, "occupation_oth": 167, "occupation_profession": 167, "occupation_sal": 167, "occupation_servic": 167, "occupi": [410, 993], "occur": [13, 68, 120, 197, 201, 215, 346, 362, 380, 382, 388, 395, 406, 410, 412, 414, 418, 445, 509, 510, 573, 582, 591, 628, 672, 799, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 875, 930, 993, 995, 1003, 1029, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "occurr": [197, 311, 352, 353, 375, 380, 410, 418, 570, 571, 582, 590, 591, 618, 628, 629, 630, 631, 784, 840, 868, 995, 1037, 1042], "ocean": 296, "ocsvm": [7, 211], "oct": [693, 770, 990, 996], "octob": [77, 375, 1036, 1043, 1049, 1050, 1052], "od280": 377, "od315": 377, "odd": [262, 417, 515, 713, 993, 1043, 1044], "off": [3, 10, 12, 35, 37, 38, 45, 46, 50, 51, 76, 80, 83, 93, 115, 125, 145, 146, 164, 201, 219, 231, 235, 251, 252, 258, 260, 261, 262, 276, 278, 305, 323, 327, 329, 331, 339, 348, 351, 375, 380, 382, 394, 409, 410, 412, 419, 443, 497, 554, 555, 560, 561, 589, 592, 635, 657, 659, 693, 716, 798, 799, 801, 804, 805, 815, 817, 823, 828, 866, 885, 946, 992, 998, 1008, 1014, 1015, 1036, 1040, 1041, 1043], "offer": [2, 115, 382, 388, 392, 393, 394, 397, 403, 414, 415, 417, 418, 982, 983, 994, 997, 1009, 1013, 1014, 1018, 1042, 1054], "offic": 1018, "offici": [375, 382, 394, 397, 494, 498, 1013, 1029, 1044, 1045, 1048], "offlin": [253, 366, 380], "offset": [112, 173, 392, 412, 415, 470, 509, 510, 564, 633, 634, 642, 643, 645, 646, 678, 729, 776, 778, 851, 909, 993, 1007, 1027, 1044], "offset_": [470, 564, 678, 851, 909, 1044], "offset_init": 678, "offsetbox": 219, "offsetimag": 219, "ofmulticlass": 1008, "often": [2, 17, 22, 23, 25, 31, 68, 72, 115, 125, 128, 153, 161, 167, 168, 198, 215, 219, 236, 245, 261, 264, 305, 310, 339, 348, 351, 352, 353, 366, 367, 374, 375, 377, 380, 382, 385, 388, 392, 393, 394, 396, 403, 407, 410, 411, 412, 414, 415, 417, 418, 420, 422, 469, 522, 525, 534, 537, 633, 647, 648, 653, 654, 661, 662, 663, 664, 673, 675, 688, 729, 875, 883, 891, 903, 982, 983, 985, 988, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1003, 1006, 1007, 1009, 1020, 1022, 1027, 1028, 1029, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "og": 418, "ogbonna": 1049, "ogordon100": 1049, "ogrid": 12, "ogrisel": 1054, "ogu": 418, "ogura": 1051, "oh": [878, 1046], "ohad": 1050, "ohayon": [1044, 1045, 1052], "ohio": 375, "ohno": 407, "oj_lappi": 1048, "oja": [422, 534], "ojala": [265, 414, 830], "ojeda": 1050, "ok": [8, 380, 999], "okal": 1040, "okbalefthand": 1042, "okcupid": 1011, "okhlopkov": [1042, 1043], "okon": 1050, "okroshiashvili": 1049, "ol": [176, 187, 192, 194, 195, 203, 214, 318, 657, 989], "ol2001": 983, "olatunji": 1051, "old": [215, 380, 384, 386, 410, 469, 537, 647, 653, 903, 990, 1014, 1036, 1041, 1042, 1044, 1049, 1050, 1051], "olden": 1044, "older": [199, 233, 379, 384, 403, 465, 1011, 1017, 1034, 1039, 1046, 1048], "oldest": [384, 497], "oldid": 993, "oldja": 1048, "oleg": 1046, "oleggio": 1040, "olegovich": 1043, "oleh": [1048, 1050], "oleksandr": [1044, 1045, 1046, 1047, 1050], "oleksii": 1053, "olemiss": 680, "olga": [629, 983], "oli": 1043, "oliblum90": [1043, 1044], "olicairn": 1047, "olimpio": 1044, "oliph": 1036, "oliv": [329, 331, 1044, 1045, 1047, 1048, 1049], "oliveira": [1042, 1044, 1046, 1050], "olivetti": [93, 117, 373, 415, 496, 1031, 1036, 1044], "olivetti_fac": 496, "olivi": [0, 13, 15, 35, 46, 59, 186, 219, 260, 262, 351, 352, 353, 395, 398, 901, 1006, 1012, 1014, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "oll": 1051, "olr": 176, "olsen": 1043, "olshen": [913, 914, 1009], "olson": 1042, "olszewski": 1049, "olvi": [146, 377], "om": 1043, "omar": [0, 398, 1046, 1051, 1052, 1053, 1054, 1055], "omarmanzoor": 1052, "omega": [346, 413, 987], "omega_": 987, "omega_k": [413, 987], "omer": 1041, "omit": [116, 166, 167, 331, 385, 423, 476, 535, 667, 669, 677, 808, 810, 833, 834, 837, 840, 841, 842, 843, 844, 862, 991, 998], "omohundro": 996, "omp": [96, 102, 196, 415, 532, 538, 543, 549, 665, 666, 686, 687, 1016, 1031, 1036, 1044], "omp_cv": 196, "omp_get_max_thread": 381, "omp_num_thread": 367, "omtcyfz": 1043, "onc": [2, 6, 11, 48, 143, 146, 149, 154, 219, 233, 236, 253, 257, 260, 273, 278, 283, 311, 315, 319, 351, 353, 360, 362, 366, 368, 374, 375, 378, 380, 384, 385, 386, 387, 388, 393, 394, 395, 403, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 450, 452, 454, 473, 509, 510, 539, 545, 552, 560, 561, 591, 592, 598, 612, 620, 628, 648, 652, 654, 656, 662, 664, 666, 667, 668, 669, 677, 678, 679, 698, 713, 717, 719, 737, 782, 802, 806, 809, 819, 823, 840, 841, 842, 843, 844, 917, 989, 990, 996, 1003, 1007, 1008, 1009, 1020, 1029, 1033, 1036, 1044, 1046, 1047, 1048, 1049, 1053], "one": [0, 2, 6, 7, 8, 11, 13, 15, 23, 24, 25, 30, 31, 32, 35, 38, 45, 51, 53, 55, 56, 58, 59, 62, 64, 69, 79, 87, 88, 89, 93, 96, 98, 102, 114, 115, 120, 122, 125, 126, 130, 133, 145, 146, 149, 156, 157, 161, 166, 167, 168, 169, 170, 173, 176, 177, 181, 186, 187, 189, 190, 191, 193, 197, 199, 206, 207, 212, 215, 220, 226, 233, 234, 236, 245, 248, 253, 255, 256, 257, 259, 260, 262, 263, 266, 267, 268, 269, 278, 281, 283, 288, 302, 306, 307, 310, 311, 315, 317, 318, 319, 329, 338, 339, 347, 351, 352, 353, 356, 360, 362, 366, 367, 368, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 396, 397, 400, 403, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 461, 463, 465, 470, 475, 488, 489, 491, 492, 493, 494, 495, 496, 497, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 535, 540, 541, 542, 544, 548, 552, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 582, 584, 585, 589, 590, 591, 592, 611, 612, 616, 617, 621, 628, 631, 633, 634, 635, 636, 644, 648, 649, 650, 651, 655, 658, 659, 660, 662, 667, 669, 670, 672, 674, 675, 676, 677, 679, 681, 689, 693, 696, 700, 704, 710, 712, 721, 730, 731, 735, 739, 751, 752, 755, 764, 772, 775, 779, 780, 781, 782, 784, 785, 788, 789, 791, 792, 793, 794, 797, 798, 799, 800, 801, 804, 805, 807, 808, 809, 811, 813, 815, 819, 820, 823, 824, 826, 828, 829, 831, 832, 833, 834, 835, 837, 838, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 861, 865, 868, 869, 870, 872, 873, 875, 876, 877, 878, 879, 884, 885, 886, 889, 891, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 921, 931, 934, 944, 964, 982, 983, 985, 987, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1018, 1020, 1024, 1026, 1027, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "one_class": 234, "one_hot": [311, 323], "one_hot_encod": [2, 119], "one_hot_encoder_": 567, "one_hot_linear_pipelin": 2, "one_hot_linear_predict": 2, "one_hot_poly_pipelin": 2, "one_hot_poly_predict": 2, "one_hot_result": 119, "one_hot_tim": 2, "one_imag": [418, 585, 588], "one_vs_on": [420, 611, 994], "one_vs_rest": [611, 994], "oneclasssvm": [7, 9, 211, 226, 318, 338, 564, 678, 851, 999, 1007, 1008, 1038, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "oned": 397, "onehot": [238, 306, 307, 411, 870, 1003], "onehot_categor": [197, 215], "onehotencod": [2, 69, 114, 119, 130, 167, 168, 197, 215, 228, 236, 238, 240, 311, 316, 318, 321, 322, 323, 374, 394, 411, 417, 467, 468, 567, 582, 583, 868, 872, 873, 876, 879, 886, 983, 1003, 1037, 1040, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "onehotencoderonehotencod": [69, 114, 130, 167, 168, 228, 238, 316, 319], "ones": [2, 9, 32, 41, 53, 69, 79, 120, 126, 149, 173, 181, 201, 202, 226, 229, 233, 259, 267, 270, 290, 309, 327, 348, 366, 367, 380, 388, 394, 410, 412, 414, 417, 425, 428, 432, 451, 533, 567, 582, 611, 612, 619, 645, 646, 659, 660, 671, 677, 704, 797, 803, 808, 819, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 880, 884, 947, 989, 993, 998, 999, 1003, 1008, 1027, 1036, 1044, 1045, 1046], "onetoonefeaturemixin": [382, 434], "onevsoneclassifi": [278, 400, 834, 835, 1037, 1039, 1040, 1042, 1043, 1045, 1048, 1050, 1053], "onevsrestclassifi": [28, 189, 212, 234, 266, 268, 278, 400, 407, 659, 660, 833, 835, 905, 1020, 1037, 1038, 1040, 1042, 1043, 1049, 1050, 1053, 1054], "ong": 709, "ongari": 1053, "onggo": 1052, "ongo": [321, 381, 395], "onli": [2, 5, 9, 12, 13, 18, 22, 23, 24, 25, 28, 31, 32, 35, 37, 38, 43, 47, 51, 53, 56, 64, 68, 69, 70, 72, 73, 79, 88, 96, 97, 99, 103, 109, 111, 116, 117, 118, 119, 121, 129, 130, 141, 142, 143, 146, 149, 151, 156, 158, 162, 164, 166, 167, 168, 173, 175, 180, 181, 186, 193, 197, 198, 200, 203, 205, 206, 215, 216, 218, 219, 226, 228, 230, 232, 233, 237, 240, 243, 244, 245, 248, 249, 253, 255, 257, 259, 261, 262, 265, 266, 267, 268, 270, 271, 273, 278, 281, 283, 289, 291, 294, 296, 301, 305, 306, 310, 311, 317, 318, 326, 327, 329, 335, 336, 339, 343, 344, 346, 347, 351, 352, 353, 356, 357, 360, 362, 366, 367, 368, 373, 374, 375, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 490, 491, 492, 493, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 517, 520, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 708, 710, 714, 727, 730, 731, 735, 737, 738, 739, 742, 743, 744, 757, 759, 761, 775, 779, 780, 781, 782, 784, 785, 788, 789, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 819, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 929, 931, 934, 942, 944, 947, 949, 954, 959, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1013, 1014, 1015, 1018, 1027, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054], "onlin": [3, 4, 6, 13, 34, 49, 66, 93, 96, 117, 164, 175, 205, 211, 216, 235, 253, 300, 368, 375, 379, 385, 394, 415, 418, 420, 443, 447, 448, 450, 496, 503, 532, 537, 538, 539, 540, 546, 547, 583, 585, 659, 667, 668, 669, 677, 679, 831, 840, 841, 842, 843, 844, 847, 848, 853, 855, 856, 874, 875, 885, 905, 906, 985, 989, 997, 999, 1012, 1015, 1016, 1018, 1027, 1031, 1036, 1040, 1041, 1043, 1051], "onlineldavb": 537, "only_non_neg": 1049, "only_physical_cor": 115, "onnx": [1013, 1014, 1031], "onnxruntim": 403, "onto": [84, 219, 220, 231, 305, 392, 415, 418, 422, 447, 449, 462, 534, 540, 544, 628, 629, 631, 689, 987, 991, 996], "onward": [879, 1040, 1054], "onx": 403, "oob": [108, 109, 121, 134, 164, 417, 516, 565, 1014, 1015, 1038, 1049, 1053], "oob_best_it": 121, "oob_color": 121, "oob_decision_function_": [556, 558, 565], "oob_error": 113, "oob_improvement_": [121, 417, 560, 561, 1038], "oob_lin": 121, "oob_prediction_": [557, 559, 566], "oob_scor": [113, 417, 556, 557, 558, 559, 565, 566, 1041, 1043], "oob_score_": [113, 556, 557, 558, 559, 560, 561, 565, 566, 1038, 1052], "oob_scores_": [560, 561, 1052], "op": [384, 429, 659, 660, 667, 668, 669, 677, 678, 679, 862, 863, 905, 1003], "opaqu": 1001, "open": [6, 10, 15, 220, 374, 375, 378, 379, 380, 384, 386, 392, 393, 395, 403, 411, 418, 488, 497, 509, 510, 983, 1013, 1018, 1023, 1039, 1043, 1044, 1046, 1052], "open_pric": 10, "openbla": [366, 367, 378, 392, 961, 1049, 1053, 1054], "openblas_num_thread": 367, "opencv": 375, "opengl": 1029, "opengraph": [380, 397, 402], "openml": [2, 11, 69, 130, 154, 167, 197, 205, 213, 215, 227, 253, 273, 278, 281, 301, 373, 397, 497, 1031, 1044, 1046, 1049], "openml100": 374, "openmp": [316, 378, 383, 392, 394, 410, 417, 961, 1047, 1049, 1052], "openrec": 1013, "opentsn": 693, "oper": [12, 17, 146, 157, 164, 227, 232, 239, 251, 253, 254, 256, 261, 266, 276, 329, 353, 366, 367, 377, 378, 380, 383, 386, 392, 394, 395, 397, 403, 405, 409, 414, 415, 417, 418, 419, 423, 449, 462, 469, 476, 483, 484, 485, 486, 505, 534, 535, 542, 552, 553, 567, 573, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 617, 622, 625, 631, 636, 644, 659, 690, 694, 703, 707, 708, 709, 728, 775, 782, 783, 789, 790, 820, 831, 834, 845, 846, 868, 872, 877, 888, 889, 903, 910, 913, 944, 961, 966, 989, 996, 1003, 1008, 1013, 1015, 1018, 1027, 1040, 1042, 1043, 1044, 1046, 1047, 1052], "operand": 420, "operation": [215, 1018], "operatornam": [415, 742, 989, 993, 1009], "opinion": 395, "opitz": 993, "opportun": [535, 1007], "oppos": [65, 233, 384, 405, 410, 901, 996, 1008, 1020, 1036, 1054], "opposit": [23, 51, 65, 98, 167, 168, 186, 253, 266, 394, 407, 412, 414, 419, 444, 448, 450, 470, 539, 541, 548, 564, 713, 731, 851, 909, 1036], "opposite_lof_scor": 851, "opt": [378, 382], "opta": 898, "optic": [34, 42, 66, 164, 319, 329, 373, 421, 445, 447, 456, 457, 458, 503, 1015, 1030, 1031, 1045, 1049, 1050, 1051, 1052, 1053, 1054], "optim": [5, 11, 12, 25, 51, 52, 55, 58, 70, 76, 77, 93, 120, 121, 123, 125, 145, 146, 149, 150, 153, 154, 155, 156, 157, 181, 185, 186, 190, 205, 213, 232, 236, 253, 257, 264, 267, 272, 273, 278, 281, 287, 302, 305, 310, 319, 323, 329, 341, 346, 351, 352, 353, 362, 366, 369, 374, 377, 380, 382, 383, 392, 394, 397, 404, 406, 409, 410, 412, 414, 415, 417, 419, 420, 421, 445, 448, 449, 450, 451, 453, 458, 462, 463, 473, 474, 480, 532, 535, 536, 538, 540, 544, 558, 559, 560, 561, 575, 611, 612, 620, 621, 636, 639, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 685, 688, 691, 693, 695, 696, 702, 724, 731, 800, 801, 815, 823, 847, 848, 849, 851, 853, 854, 855, 856, 857, 862, 863, 881, 893, 897, 898, 905, 906, 907, 908, 909, 910, 911, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 1007, 1008, 1009, 1013, 1018, 1024, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052], "optima": 420, "optimis": [382, 410, 996, 1039, 1049, 1051], "optimist": [11, 186, 264, 351, 362, 708, 989, 993], "optimum": [59, 155, 167, 173, 253, 272, 409, 415, 473, 989, 992], "optimz": 323, "option": [2, 28, 44, 50, 100, 115, 123, 155, 162, 178, 181, 198, 236, 253, 262, 268, 316, 323, 351, 356, 362, 368, 374, 375, 376, 378, 380, 381, 383, 385, 386, 388, 389, 392, 394, 395, 397, 410, 411, 413, 414, 415, 417, 418, 421, 434, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 689, 690, 691, 693, 695, 696, 712, 714, 718, 730, 731, 736, 737, 738, 758, 759, 760, 765, 767, 768, 772, 775, 776, 777, 778, 779, 782, 784, 785, 788, 793, 794, 796, 800, 802, 803, 804, 805, 807, 808, 810, 819, 823, 824, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 932, 979, 982, 983, 989, 992, 993, 996, 1003, 1006, 1008, 1009, 1014, 1027, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "option_context": 215, "ora": 1049, "oracl": [31, 197, 215, 423, 470, 471, 474, 475, 476, 477, 987, 1036], "orallo": 993, "orang": [5, 7, 51, 78, 90, 94, 95, 100, 109, 124, 125, 127, 156, 162, 185, 186, 207, 234, 246, 253, 294, 316, 322, 359, 994, 1053], "orazbayev": 1050, "orbit": [351, 352], "order": [2, 12, 18, 22, 25, 45, 53, 62, 63, 70, 76, 87, 102, 117, 118, 119, 123, 125, 138, 154, 166, 167, 170, 173, 186, 190, 193, 197, 198, 203, 211, 215, 220, 230, 233, 236, 240, 245, 254, 257, 259, 266, 281, 302, 305, 310, 311, 312, 317, 318, 346, 351, 353, 362, 366, 367, 375, 380, 381, 382, 385, 386, 389, 394, 397, 400, 403, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 441, 444, 447, 448, 450, 451, 456, 457, 458, 460, 465, 489, 490, 491, 496, 498, 516, 535, 536, 540, 541, 542, 544, 548, 552, 554, 556, 557, 558, 559, 560, 564, 565, 566, 567, 568, 582, 589, 592, 594, 595, 598, 607, 608, 609, 611, 623, 628, 632, 641, 659, 660, 666, 677, 686, 687, 689, 690, 694, 698, 700, 701, 703, 705, 713, 714, 719, 723, 727, 730, 731, 739, 741, 742, 743, 755, 757, 779, 783, 784, 785, 788, 789, 790, 795, 800, 801, 802, 804, 805, 806, 808, 812, 815, 819, 820, 823, 826, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 855, 862, 865, 876, 878, 879, 880, 884, 885, 886, 889, 890, 891, 893, 894, 895, 896, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 925, 926, 931, 942, 957, 962, 983, 989, 990, 993, 994, 996, 997, 1003, 1006, 1007, 1008, 1009, 1014, 1024, 1026, 1027, 1029, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "order_": [836, 839], "order_centroid": 352, "ordered_sampl": 215, "ordereddict": 113, "ordering_": [63, 410, 451, 456, 457, 458], "ordin": [2, 51, 69, 130, 236, 308, 311, 312, 317, 320, 374, 394, 417, 497, 568, 710, 870, 873, 878, 879, 886, 989, 990, 1003, 1014, 1044, 1050], "ordinal_encod": [119, 236], "ordinal_result": 119, "ordinalencod": [119, 130, 168, 169, 197, 236, 311, 320, 374, 394, 582, 841, 873, 878, 886, 983, 995, 1003, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "ordinalencoderordinalencod": [130, 168, 169, 311], "ordinari": [95, 112, 164, 175, 176, 179, 181, 187, 193, 199, 200, 202, 214, 216, 318, 636, 647, 653, 655, 656, 657, 658, 673, 679, 683, 684, 688, 1007, 1015, 1016, 1031], "ordinarili": [392, 394], "ordowski": 993, "oregon": 311, "oren": 1044, "oresti": 1045, "orfano": [1049, 1050, 1051, 1052, 1053], "org": [2, 10, 12, 13, 15, 22, 24, 30, 35, 44, 46, 59, 64, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 158, 167, 168, 169, 173, 178, 188, 189, 197, 205, 213, 215, 219, 227, 228, 229, 231, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 262, 266, 271, 273, 281, 301, 302, 311, 316, 317, 319, 320, 322, 326, 327, 328, 331, 351, 352, 353, 360, 367, 373, 378, 380, 383, 386, 388, 395, 397, 414, 596, 637, 669, 672, 677, 696, 706, 770, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 989, 993, 1009, 1011, 1031, 1044, 1048], "organ": [0, 9, 11, 68, 78, 351, 374, 379, 380, 395, 853, 1013], "ori": 1042, "orient": [28, 93, 167, 218, 305, 394, 917, 990], "orig": [12, 290], "orig_coin": [44, 45], "orig_data_ax": 98, "origin": [2, 3, 12, 18, 19, 44, 45, 46, 49, 54, 56, 72, 73, 88, 93, 95, 96, 102, 125, 128, 142, 143, 146, 149, 151, 153, 154, 161, 162, 168, 173, 185, 186, 201, 218, 219, 220, 222, 223, 230, 231, 232, 236, 249, 253, 256, 262, 286, 291, 302, 306, 310, 321, 327, 343, 351, 353, 362, 367, 375, 377, 379, 380, 382, 384, 385, 392, 394, 403, 406, 410, 411, 414, 415, 417, 418, 420, 421, 422, 423, 435, 438, 442, 444, 445, 446, 447, 448, 450, 451, 460, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 494, 495, 496, 502, 520, 532, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 577, 582, 583, 585, 589, 591, 592, 595, 608, 609, 611, 612, 615, 631, 633, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 693, 697, 702, 729, 764, 770, 800, 802, 803, 808, 810, 819, 823, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 855, 856, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 877, 878, 879, 881, 882, 883, 884, 885, 894, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 923, 925, 926, 930, 931, 952, 964, 967, 986, 987, 989, 990, 992, 993, 996, 999, 1004, 1005, 1006, 1007, 1010, 1013, 1018, 1020, 1029, 1039, 1040, 1042, 1044, 1046, 1048, 1050, 1052], "original_param": 124, "original_shap": 46, "original_sklearn_vers": [403, 577], "original_space_centroid": 352, "orii": 1038, "orphan": [449, 462, 1036], "orr": [997, 1007], "orr\u00f9": 1039, "orthogon": [52, 94, 95, 96, 102, 164, 175, 216, 272, 408, 415, 527, 532, 538, 540, 543, 544, 549, 665, 666, 686, 687, 1005, 1015, 1016, 1031, 1036], "orthogonal_mp": [549, 665, 666, 687, 989], "orthogonal_mp_gram": [665, 666, 686, 1050], "orthogonalmatchingpursuit": [196, 666, 686, 687, 989, 994, 1036, 1038, 1041, 1044, 1049, 1054], "orthogonalmatchingpursuitcv": [196, 400, 665, 1038, 1049, 1053], "orthonorm": [4, 389, 941, 985, 1025], "orthotrop": 996, "ortiz": [1046, 1052], "osa": 1044, "osaid": 1044, "osborn": [1039, 1040], "oscar": [1039, 1043], "oscil": [127, 168, 202, 410, 441], "oscillatori": [198, 1003], "osei": 1050, "osendorf": [1036, 1037], "oserror": [397, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499], "osindero": [861, 998], "osman": [1045, 1051], "osx": 366, "other": [0, 2, 6, 10, 11, 22, 25, 28, 29, 31, 35, 38, 42, 50, 55, 64, 67, 69, 70, 84, 95, 96, 98, 100, 112, 114, 115, 118, 119, 122, 123, 125, 126, 132, 141, 161, 162, 164, 166, 167, 168, 169, 173, 176, 190, 197, 201, 215, 218, 219, 220, 222, 226, 227, 228, 230, 232, 233, 236, 237, 238, 245, 248, 253, 254, 256, 259, 260, 261, 268, 269, 273, 278, 288, 289, 290, 304, 305, 309, 310, 312, 313, 315, 316, 318, 322, 323, 326, 339, 343, 345, 348, 351, 352, 356, 360, 362, 366, 372, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 393, 394, 395, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 438, 444, 445, 447, 448, 449, 450, 451, 453, 458, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 497, 498, 504, 534, 535, 536, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 595, 598, 603, 611, 612, 613, 614, 621, 628, 629, 631, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 693, 697, 700, 705, 719, 764, 775, 779, 786, 793, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 860, 862, 863, 865, 866, 868, 870, 871, 872, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 886, 893, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 936, 950, 982, 983, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1020, 1024, 1027, 1028, 1031, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1052, 1053], "other_parti": 253, "other_payment_plan": 253, "other_scor": 385, "otherwis": [9, 54, 60, 111, 158, 162, 178, 199, 205, 253, 296, 343, 346, 362, 368, 382, 384, 386, 394, 400, 410, 412, 414, 418, 420, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 454, 455, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 497, 528, 534, 535, 536, 537, 539, 541, 542, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 598, 603, 611, 612, 615, 632, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 691, 693, 697, 698, 699, 701, 703, 704, 708, 710, 714, 715, 725, 727, 728, 729, 730, 731, 739, 742, 753, 755, 756, 757, 767, 775, 779, 782, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 819, 820, 823, 824, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 862, 863, 865, 868, 869, 870, 871, 872, 876, 877, 884, 885, 886, 887, 890, 891, 892, 894, 895, 896, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 920, 926, 928, 941, 942, 952, 954, 977, 979, 988, 989, 990, 993, 996, 997, 999, 1000, 1003, 1005, 1007, 1008, 1013, 1018, 1020, 1038, 1044, 1045, 1046, 1049, 1052], "ott": 1040, "otto": 1011, "oudshoorn": [628, 983], "ought": 366, "our": [0, 2, 3, 5, 9, 10, 11, 40, 51, 54, 68, 69, 78, 79, 84, 93, 94, 109, 110, 116, 119, 120, 122, 123, 141, 146, 149, 154, 156, 166, 167, 168, 169, 170, 197, 201, 215, 220, 222, 233, 252, 253, 259, 262, 265, 266, 286, 301, 305, 311, 316, 318, 331, 336, 342, 344, 346, 351, 352, 353, 362, 367, 379, 384, 385, 388, 392, 393, 394, 395, 400, 410, 414, 417, 418, 420, 421, 445, 451, 564, 645, 693, 709, 721, 727, 739, 757, 847, 848, 849, 851, 853, 855, 856, 857, 982, 983, 989, 990, 993, 999, 1003, 1006, 1007, 1008, 1014, 1017, 1018, 1020, 1027, 1028, 1029, 1043, 1044, 1046, 1047, 1050, 1051, 1053], "our_rand_r": 1045, "oura": [1049, 1050, 1051], "ourselv": 1018, "ouss1508": [1051, 1052], "out": [0, 1, 2, 5, 7, 8, 10, 11, 13, 14, 15, 24, 28, 38, 48, 53, 54, 68, 69, 100, 107, 108, 113, 115, 116, 123, 124, 134, 138, 157, 164, 166, 167, 169, 181, 197, 199, 201, 205, 215, 233, 236, 243, 245, 253, 257, 259, 262, 267, 271, 278, 281, 310, 311, 318, 329, 331, 335, 336, 339, 346, 351, 365, 375, 377, 378, 380, 382, 383, 384, 386, 392, 394, 403, 410, 413, 415, 417, 418, 420, 426, 436, 437, 443, 444, 446, 447, 448, 450, 473, 483, 484, 485, 486, 500, 516, 517, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 589, 590, 592, 605, 608, 609, 635, 640, 641, 642, 643, 652, 656, 667, 669, 674, 676, 677, 689, 690, 693, 702, 728, 742, 743, 801, 803, 804, 805, 806, 808, 809, 810, 811, 815, 831, 840, 841, 842, 843, 844, 849, 854, 857, 861, 862, 863, 871, 875, 882, 894, 897, 898, 920, 955, 957, 962, 983, 987, 988, 992, 993, 994, 996, 1001, 1003, 1014, 1015, 1016, 1018, 1024, 1027, 1029, 1031, 1036, 1038, 1040, 1042, 1044, 1045, 1048, 1049, 1052, 1054], "out_activation_": [862, 863], "out_bounds_predict": 199, "out_fil": [917, 1009], "out_of_bound": [229, 636], "out_of_cluster_doc": 17, "outcom": [2, 115, 167, 394, 417, 570, 659, 710, 743, 795, 833, 900, 901, 902, 907, 910, 989, 993, 1009, 1017, 1029, 1040, 1044, 1046], "outdat": 383, "outer": [18, 98, 264, 328, 452, 515, 641, 651, 652, 655, 985, 1037], "outer_cv": [264, 322], "outer_numb": 328, "outermost": 343, "outli": [7, 78, 394, 470, 475, 989, 999], "outlier": [1, 14, 32, 42, 52, 78, 79, 80, 122, 126, 149, 164, 175, 177, 195, 199, 200, 201, 202, 203, 211, 216, 225, 241, 284, 297, 304, 309, 312, 313, 338, 348, 375, 394, 410, 412, 417, 432, 447, 465, 467, 470, 471, 474, 475, 476, 477, 491, 492, 493, 497, 511, 513, 523, 525, 564, 632, 640, 650, 671, 672, 673, 677, 678, 679, 680, 693, 703, 831, 851, 855, 866, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 890, 891, 892, 893, 894, 895, 896, 908, 909, 911, 993, 1007, 1008, 1013, 1015, 1016, 1030, 1031, 1036, 1041, 1042, 1044], "outlier_detector": [236, 432], "outlier_label": [855, 1046], "outlier_label_": 855, "outlier_mask": 200, "outlier_plot": 78, "outliermixin": 1053, "outliers_": 650, "outliers_cov": 78, "outliers_fract": 226, "outliers_index": 79, "outliers_offset": 79, "outlin": [64, 118, 380, 382, 394, 395, 396, 410, 982, 1031], "outlying": 999, "outperform": [76, 84, 125, 130, 278, 310, 392, 414, 417, 453, 463, 995, 1003], "output": [10, 13, 23, 25, 35, 48, 51, 57, 96, 108, 109, 110, 112, 118, 130, 133, 134, 137, 138, 141, 149, 157, 161, 162, 164, 167, 193, 225, 233, 237, 240, 241, 246, 252, 253, 257, 259, 262, 266, 268, 269, 273, 278, 283, 306, 309, 311, 312, 315, 318, 319, 321, 323, 352, 353, 355, 356, 358, 360, 361, 373, 374, 375, 377, 380, 382, 386, 388, 392, 393, 394, 407, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 426, 431, 434, 438, 442, 443, 444, 446, 447, 448, 450, 451, 453, 460, 461, 463, 464, 465, 466, 467, 468, 469, 483, 484, 485, 486, 489, 492, 493, 494, 495, 496, 497, 498, 504, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 658, 659, 661, 662, 663, 664, 667, 668, 669, 672, 674, 675, 677, 679, 680, 682, 683, 684, 685, 689, 690, 691, 693, 695, 697, 700, 701, 714, 715, 722, 724, 725, 727, 729, 736, 746, 747, 749, 751, 752, 753, 754, 755, 757, 762, 768, 773, 786, 789, 791, 792, 798, 799, 800, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 826, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 848, 849, 850, 854, 855, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 893, 894, 897, 898, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 926, 928, 931, 942, 943, 949, 950, 952, 960, 980, 982, 983, 985, 987, 989, 990, 993, 994, 995, 996, 997, 1000, 1003, 1008, 1015, 1016, 1020, 1021, 1023, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "output_dict": [714, 1044, 1048], "output_distribut": [73, 305, 309, 411, 881, 882, 893, 894, 1003], "output_fil": 488, "output_indices_": [465, 1049], "output_label": 328, "output_label_arrai": 328, "outputcodeclassifi": [278, 400, 833, 834, 1043, 1048, 1052, 1053], "outputs_2d_": [847, 855, 1046], "outreach": 395, "outsid": [4, 7, 17, 118, 198, 199, 229, 240, 403, 418, 447, 636, 884, 999, 1025, 1044], "outward": 305, "outweigh": 1040, "ouvert": [759, 760, 991], "ova": [206, 667, 669, 677, 1007], "ovb": [166, 167], "over": [2, 5, 6, 7, 18, 22, 24, 25, 29, 35, 48, 53, 54, 70, 71, 72, 93, 112, 115, 120, 125, 126, 141, 145, 149, 157, 161, 166, 168, 179, 191, 197, 205, 215, 226, 236, 259, 260, 262, 264, 266, 267, 268, 271, 288, 296, 299, 300, 307, 318, 319, 321, 323, 326, 351, 352, 366, 367, 368, 375, 376, 379, 380, 381, 382, 386, 393, 394, 405, 407, 408, 410, 411, 414, 415, 416, 417, 418, 422, 447, 450, 465, 473, 510, 534, 535, 537, 538, 539, 540, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 589, 590, 592, 595, 603, 631, 633, 634, 635, 645, 646, 647, 648, 653, 654, 659, 661, 662, 663, 664, 666, 667, 668, 669, 677, 678, 679, 686, 687, 698, 717, 719, 740, 764, 789, 794, 798, 801, 804, 805, 807, 812, 813, 815, 824, 826, 827, 828, 829, 830, 832, 861, 862, 863, 864, 880, 884, 905, 913, 915, 922, 931, 961, 982, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1025, 1028, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "overal": [2, 41, 46, 109, 112, 115, 120, 130, 154, 215, 253, 256, 283, 310, 311, 352, 366, 379, 380, 386, 406, 407, 417, 448, 450, 465, 472, 473, 479, 550, 886, 990, 993, 1009, 1018, 1046], "overallqu": 130, "overcom": [116, 201, 366, 418], "overcomplet": 415, "overconstrain": 125, "overestim": [100, 362, 414], "overfit": [2, 25, 114, 120, 122, 125, 164, 168, 169, 170, 176, 198, 201, 226, 245, 251, 253, 254, 260, 264, 273, 275, 276, 299, 306, 307, 309, 310, 311, 312, 339, 346, 356, 358, 359, 375, 394, 407, 409, 414, 417, 438, 489, 490, 562, 563, 568, 569, 658, 801, 804, 805, 815, 823, 827, 828, 862, 863, 865, 880, 884, 988, 997, 999, 1001, 1003, 1009, 1015, 1018, 1027, 1039], "overflow": [379, 388, 392, 1017, 1039, 1043, 1044, 1045, 1046, 1047, 1049], "overflowerror": 1046, "overhead": [6, 283, 367, 368, 380, 386, 389, 392, 394, 417, 442, 446, 450, 535, 700, 837, 838, 840, 841, 842, 843, 844, 845, 846, 961, 995, 996, 1039, 1044, 1045, 1048], "overlai": [388, 633], "overlaid": 1000, "overlap": [10, 11, 35, 53, 88, 123, 145, 221, 245, 352, 406, 410, 414, 417, 418, 588, 793, 794, 802, 806, 808, 809, 810, 811, 819, 990, 1003, 1042], "overli": [11, 23, 24, 186, 264, 362, 415, 993], "overlin": [259, 406], "overparameter": 989, "overrid": [382, 418, 447, 451, 458, 543, 549, 589, 590, 592, 594, 595, 598, 657, 665, 686, 687, 807, 824, 847, 848, 849, 851, 853, 855, 856, 857, 1036, 1044, 1046, 1050, 1052], "overridden": [382, 394, 420, 543, 549, 617, 622, 625, 695, 1044, 1045, 1052], "oversampl": [545, 1036], "oversc": 1051, "overset": [415, 1000], "overst": 167, "oversubscript": [779, 961, 1050], "overview": [73, 164, 264, 277, 279, 281, 356, 381, 383, 393, 394, 497, 735, 744, 801, 817, 828, 833, 834, 835, 913, 995, 1007, 1015, 1030, 1031], "overwhelm": 380, "overwrit": [125, 447, 497, 632, 1020, 1036, 1047, 1052, 1053], "overwrite_": 1036, "overwritten": [443, 533, 534, 535, 537, 542, 549, 608, 609, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 673, 675, 680, 682, 683, 684, 685, 687, 961, 963, 1049], "ovo": [278, 315, 789, 833, 907, 910, 993, 994, 1008], "ovo_tpr": 268, "ovo_tre": 278, "ovr": [28, 189, 212, 278, 281, 315, 347, 659, 660, 789, 834, 905, 907, 910, 993, 994, 1008, 1036, 1041, 1042, 1044, 1045, 1046, 1050, 1051], "ovr_jaccard_scor": 281, "ovr_tre": 278, "ow": 58, "owen": [650, 1045, 1046], "own": [11, 32, 115, 215, 233, 248, 283, 285, 328, 352, 367, 374, 383, 384, 385, 388, 389, 397, 408, 409, 410, 422, 426, 441, 455, 534, 558, 565, 647, 798, 799, 847, 848, 849, 851, 853, 855, 856, 857, 879, 913, 915, 931, 936, 961, 989, 995, 996, 999, 1003, 1008, 1013, 1018, 1028, 1029, 1043, 1044, 1046, 1053], "own_telephon": 253, "owner": [233, 375, 377, 949, 950], "ownership": 382, "oyamada": 1041, "oyindamola": 1051, "oywa": 1046, "ozga": 1044, "ozsvald": 1038, "p": [0, 9, 12, 22, 24, 25, 39, 59, 78, 79, 83, 90, 100, 121, 142, 146, 152, 173, 209, 214, 215, 218, 220, 230, 246, 259, 265, 266, 296, 374, 375, 377, 378, 385, 388, 406, 407, 409, 410, 412, 413, 415, 417, 419, 420, 421, 423, 443, 445, 447, 448, 451, 456, 457, 458, 470, 472, 475, 476, 479, 499, 529, 535, 539, 541, 542, 548, 550, 551, 552, 554, 556, 557, 558, 559, 560, 562, 565, 566, 567, 591, 593, 594, 595, 596, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 616, 617, 628, 641, 644, 689, 691, 693, 695, 700, 706, 716, 725, 742, 753, 787, 789, 803, 809, 810, 811, 814, 830, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 861, 865, 866, 881, 893, 899, 915, 916, 917, 986, 987, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1003, 1007, 1008, 1011, 1024, 1027, 1036, 1037, 1039, 1042, 1044, 1051, 1052, 1053], "p0": 24, "p1": [24, 132], "p1d": 24, "p2": [24, 132, 215], "p3": 132, "p4": 132, "p5": 942, "p592": 113, "p_": [142, 993, 996, 1009], "p_c": [90, 524], "p_e": 717, "p_grid": 264, "p_i": [993, 996], "p_k": [266, 993], "p_n": [266, 708, 993], "p_o": 717, "p_val": 259, "p_val_uncorrect": 259, "p_valu": [605, 606, 607], "p_w": 90, "p_w_c": [90, 524], "pa": [667, 668, 902, 989, 993, 1006], "pab": [1051, 1052], "pablo": [1046, 1049, 1050], "pabloduque0": 1049, "pace": 375, "pacha": 1044, "pacif": 259, "pack": [389, 1044], "packag": [0, 44, 51, 161, 233, 283, 367, 373, 374, 377, 378, 380, 381, 382, 384, 386, 388, 389, 392, 394, 397, 403, 408, 412, 417, 418, 453, 479, 647, 648, 983, 989, 992, 996, 1003, 1009, 1018, 1023, 1036, 1042, 1044, 1045, 1046], "packet": 366, "pacman": 397, "paczuski": [1044, 1045], "pad": [93, 118, 161, 168, 218, 236, 351, 357, 418, 589, 590, 592], "page": [0, 10, 15, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 146, 154, 167, 168, 169, 178, 218, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 366, 375, 377, 380, 382, 384, 386, 388, 395, 408, 410, 412, 474, 517, 518, 519, 629, 645, 835, 900, 942, 983, 989, 993, 994, 1020, 1029, 1034, 1036, 1040, 1041], "page_links_en": 15, "page_links_filenam": 15, "page_links_url": 15, "pagerank": 15, "pagh": [173, 985], "pai": [0, 167, 215, 253, 380], "paid": 989, "pain": 392, "paint": [917, 919], "pair": [8, 11, 35, 42, 56, 62, 98, 111, 113, 118, 122, 138, 153, 157, 177, 180, 189, 206, 209, 215, 230, 254, 259, 266, 268, 331, 335, 337, 339, 340, 341, 343, 352, 357, 375, 392, 394, 406, 407, 411, 414, 418, 420, 438, 441, 442, 446, 451, 458, 464, 472, 473, 479, 494, 509, 510, 583, 593, 596, 597, 599, 600, 601, 611, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 633, 634, 644, 646, 693, 700, 701, 706, 707, 708, 716, 732, 741, 759, 760, 764, 767, 770, 771, 772, 773, 774, 775, 777, 779, 780, 781, 782, 783, 787, 833, 845, 846, 920, 993, 994, 995, 996, 1003, 1009, 1036, 1048, 1049, 1051, 1052, 1053], "pair_confusion_matrix": [410, 1048], "pair_list": 268, "pair_scor": 268, "paired_dist": [764, 770, 779, 1040], "pairidx": 357, "pairplot": [166, 167], "pairwis": [62, 166, 167, 230, 236, 268, 315, 319, 320, 351, 366, 372, 382, 394, 405, 410, 415, 420, 447, 455, 459, 462, 463, 469, 488, 509, 510, 536, 562, 563, 621, 639, 640, 641, 642, 643, 644, 689, 691, 693, 695, 697, 700, 779, 780, 781, 782, 789, 793, 794, 833, 849, 853, 857, 871, 903, 985, 993, 996, 1005, 1008, 1031, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055], "pairwise_bayesian": 259, "pairwise_bayesian_df": 259, "pairwise_comp_df": 259, "pairwise_dist": [38, 323, 394, 410, 421, 445, 447, 451, 458, 689, 697, 763, 772, 780, 781, 793, 794, 849, 851, 853, 857, 991, 1036, 1040, 1042, 1044, 1045, 1047, 1048, 1053, 1054], "pairwise_dist_chunk_s": [469, 903], "pairwise_distance_funct": [693, 697, 779, 782, 996], "pairwise_distances_argmin": [46, 62, 319, 781, 1044, 1050, 1051, 1052, 1053], "pairwise_distances_argmin_min": [319, 780, 1039, 1044, 1050, 1051, 1052, 1053], "pairwise_distances_chunk": [366, 779, 1044, 1047, 1053], "pairwise_indices_": 833, "pairwise_kernel": [394, 420, 453, 463, 644, 766, 871, 991, 1036, 1043, 1053], "pairwise_kernel_funct": [621, 644, 775], "pairwise_kernels_kwarg": 621, "pairwise_t_test": 259, "pairwisedistancesreduct": 367, "pairwisekernel": 420, "paislei": [415, 537], "pakdd": 410, "pal": [1044, 1050], "palac": 46, "palacio": 1049, "palafox": 1036, "palett": [46, 167, 259], "palevioletr": [211, 289, 338], "palioura": [840, 995], "paliw": 1044, "palladium": 1018, "palmol": 10, "paltri": 1027, "pami": [377, 410, 726], "pamnani": 1044, "panchal": 1048, "pancholi": 1043, "panda": [2, 10, 11, 23, 68, 69, 70, 109, 115, 116, 119, 122, 125, 127, 145, 154, 161, 166, 167, 168, 169, 170, 176, 181, 186, 197, 201, 205, 215, 236, 237, 240, 248, 253, 257, 259, 260, 262, 270, 271, 273, 278, 310, 311, 312, 315, 318, 319, 346, 351, 352, 374, 375, 378, 379, 380, 382, 383, 388, 394, 397, 402, 411, 434, 443, 444, 446, 448, 450, 465, 467, 469, 483, 484, 485, 486, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 633, 634, 636, 639, 640, 641, 642, 643, 689, 690, 693, 801, 804, 805, 815, 831, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 921, 982, 983, 1003, 1013, 1014, 1029, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pandata": [1051, 1052], "pandei": [1043, 1048], "panel": [249, 288, 305, 416, 1013], "panga": [1051, 1052], "panico": [1044, 1048], "pankaj": 1048, "pano": 1042, "panpiort8": [1046, 1048], "paolo": [0, 399, 1036, 1040, 1046, 1054], "papadopoulo": [1049, 1050, 1051, 1052, 1053], "papapanagiot": 1043, "paper": [0, 146, 173, 253, 259, 377, 386, 392, 410, 412, 417, 443, 450, 479, 505, 535, 542, 564, 642, 659, 667, 668, 672, 677, 680, 693, 789, 842, 851, 854, 897, 898, 989, 993, 996, 999, 1008, 1029, 1036, 1043, 1044], "paper355": 672, "papier": [665, 686, 687], "par": 1003, "paraboloid": 989, "paradi": 1051, "paradigm": 989, "paragraph": [418, 504, 1029], "paralel": 1052, "parallel": [12, 108, 113, 115, 116, 118, 134, 164, 168, 169, 170, 199, 260, 316, 317, 319, 344, 360, 365, 372, 378, 380, 381, 383, 384, 392, 394, 411, 419, 421, 422, 438, 445, 447, 449, 450, 451, 453, 458, 459, 462, 465, 468, 473, 496, 532, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 590, 595, 603, 608, 609, 611, 633, 635, 640, 659, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 812, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 864, 867, 900, 901, 961, 963, 1014, 1015, 1024, 1029, 1031, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "parallel_backend": [367, 421, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 864, 867, 900, 901, 1044, 1054], "parallel_batch_queri": 283, "parallel_config": 961, "parallel_coordin": 260, "parallel_help": 1046, "parallelbackendbas": 963, "parallelis": [260, 469, 903, 1043], "param": [42, 53, 59, 60, 69, 120, 121, 123, 124, 218, 232, 233, 257, 259, 267, 271, 287, 300, 322, 380, 382, 394, 400, 417, 420, 424, 427, 433, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 813, 815, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 950, 953, 982, 1042, 1046, 1047, 1049, 1050, 1053, 1054], "param1": [382, 1026], "param2": [382, 1026], "param3": 382, "param_": 115, "param_c": [270, 801], "param_classifier__c": 69, "param_covariance_typ": 248, "param_degre": 801, "param_dist": [267, 271, 317], "param_distribut": [69, 149, 260, 267, 271, 317, 393, 805, 813, 815, 1052], "param_gamma": [270, 801, 815], "param_grid": [2, 4, 69, 70, 71, 72, 115, 122, 232, 238, 248, 253, 257, 258, 259, 263, 264, 267, 270, 278, 285, 307, 322, 339, 394, 400, 411, 417, 743, 801, 804, 812, 813, 961, 982, 993, 1024, 1025], "param_kernel": [801, 815], "param_list": 813, "param_min_samples_split": 263, "param_n_compon": 248, "param_nam": [115, 260, 275, 321, 346, 400, 824, 832, 988, 1029], "param_pca__n_compon": 71, "param_preprocessor__cat__selector__percentil": 69, "param_preprocessor__num__imputer__strategi": 69, "param_rang": [275, 321, 346, 824, 832, 988, 1052], "param_reduce_dim__n_compon": 258, "param_valu": 5, "paramet": [2, 3, 7, 8, 9, 12, 13, 25, 32, 42, 52, 53, 56, 58, 59, 60, 69, 70, 71, 77, 79, 80, 90, 93, 107, 109, 111, 113, 115, 118, 119, 120, 123, 124, 125, 136, 143, 146, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 197, 199, 201, 202, 205, 206, 213, 214, 215, 222, 223, 226, 228, 231, 232, 233, 243, 244, 245, 246, 248, 249, 252, 253, 254, 258, 259, 260, 261, 263, 264, 267, 270, 271, 272, 274, 275, 278, 283, 285, 286, 289, 290, 296, 299, 300, 302, 305, 306, 307, 309, 310, 315, 316, 318, 319, 320, 321, 330, 334, 336, 341, 343, 344, 345, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 369, 372, 373, 375, 383, 385, 386, 387, 388, 389, 392, 400, 404, 407, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1021, 1023, 1025, 1026, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "parameter": [356, 420, 615, 616, 623, 624, 798, 799, 989, 990, 998, 1003, 1009], "parameter_grid": 260, "parameter_nam": [568, 569, 570, 571], "parametergrid": [801, 1038, 1044], "parameters_str": 53, "parametersampl": [815, 1038, 1044, 1048], "parametr": [7, 22, 23, 80, 229, 287, 309, 318, 407, 411, 416, 417, 438, 552, 554, 636, 686, 697, 881, 893, 936, 937, 989, 992, 995, 996, 1003, 1006, 1009, 1044, 1046, 1049], "parametrize_with_check": [315, 382, 936, 1046, 1047], "params_str": 271, "parcel": [52, 65, 410], "parch": [169, 320], "pardeep": 1048, "parel": 1040, "parent": [6, 166, 233, 380, 384, 394, 410, 443, 464, 950, 951, 1036, 1053], "parent_hourly_wag": 166, "parenthes": 932, "parenthesi": [39, 380], "paresh": [1045, 1046], "pareto": 199, "pargent": 1003, "pari": [0, 377, 411, 467, 765, 873, 1004, 1050], "pariba": 1011, "pariet": [1018, 1036], "parikh": [1045, 1050, 1051, 1052, 1053], "paris_in_radian": 765, "paristech": [0, 22, 23, 40, 226, 1011], "pariti": 1009, "parizi": 1051, "park": [1041, 1046, 1048, 1051, 1052], "parmet": 1053, "parmind": 1043, "parra": 1044, "parri": [1041, 1042, 1043], "parrot": 351, "pars": [6, 15, 366, 374, 375, 381, 509], "parse_vers": [199, 671], "parser": [6, 11, 125, 253, 273, 315, 319, 497, 1051, 1052], "parsimoni": [415, 1003], "parsing_tim": 6, "parson": [1047, 1049], "part": [0, 3, 4, 29, 34, 49, 59, 66, 69, 80, 93, 96, 112, 115, 117, 118, 122, 128, 136, 137, 138, 143, 154, 164, 176, 233, 235, 246, 253, 254, 256, 274, 299, 307, 310, 312, 353, 368, 375, 377, 380, 382, 386, 388, 393, 394, 397, 405, 407, 409, 410, 414, 415, 417, 418, 420, 447, 450, 494, 495, 496, 522, 532, 538, 543, 575, 585, 586, 587, 614, 626, 794, 870, 888, 890, 891, 892, 893, 894, 895, 896, 982, 983, 985, 990, 994, 1012, 1013, 1014, 1015, 1016, 1018, 1022, 1029, 1031, 1036, 1044, 1045, 1047, 1049, 1051], "part3": 414, "part_of_speech": 418, "partev": [1050, 1051, 1052, 1053], "parthiv": 1048, "parti": [215, 278, 321, 367, 379, 392, 403, 803, 810, 961, 1011, 1036, 1047, 1052, 1053], "partial": [2, 6, 10, 48, 82, 83, 85, 95, 127, 164, 165, 171, 215, 225, 241, 317, 320, 377, 394, 396, 412, 413, 415, 417, 420, 465, 483, 484, 485, 486, 497, 502, 535, 537, 542, 563, 590, 633, 634, 658, 789, 831, 833, 834, 861, 862, 863, 866, 878, 879, 882, 885, 914, 990, 997, 1007, 1015, 1029, 1031, 1033, 1037, 1044, 1045, 1049, 1053], "partial_correl": 10, "partial_depend": [168, 633, 1000, 1037, 1045, 1046, 1047, 1048, 1051, 1052], "partial_fit": [6, 48, 93, 319, 368, 382, 394, 410, 415, 443, 450, 535, 537, 538, 539, 590, 598, 659, 660, 667, 668, 669, 677, 678, 679, 833, 834, 837, 838, 840, 841, 842, 843, 844, 861, 862, 863, 874, 875, 885, 905, 989, 995, 997, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053], "partial_fit_": 1049, "partial_fit_classifi": 6, "partial_fit_param": [598, 833, 834, 837, 838], "partialdependencedisplai": [125, 127, 168, 237, 316, 317, 318, 320, 322, 387, 634, 1000, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "particip": [0, 379, 380, 395, 1018], "particl": 998, "particular": [0, 2, 9, 12, 25, 35, 37, 38, 58, 69, 76, 90, 98, 101, 119, 122, 125, 126, 153, 161, 167, 168, 197, 199, 205, 231, 253, 256, 260, 262, 268, 283, 292, 296, 305, 315, 316, 319, 352, 353, 362, 366, 367, 374, 375, 378, 379, 380, 382, 384, 385, 386, 388, 389, 393, 394, 397, 410, 411, 414, 415, 417, 418, 419, 420, 447, 470, 474, 497, 545, 564, 610, 654, 659, 664, 673, 675, 685, 688, 713, 729, 786, 837, 924, 926, 983, 985, 987, 989, 993, 996, 997, 998, 999, 1001, 1003, 1014, 1018, 1028, 1036, 1039, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1053], "particularli": [18, 29, 68, 69, 72, 102, 128, 167, 198, 228, 259, 273, 307, 316, 348, 362, 366, 380, 382, 389, 394, 410, 411, 413, 416, 418, 497, 807, 824, 842, 942, 961, 962, 989, 990, 993, 995, 1001, 1014, 1018, 1028, 1036, 1041, 1043, 1044, 1050], "partit": [44, 64, 68, 126, 128, 259, 301, 394, 406, 407, 410, 414, 417, 450, 452, 454, 463, 512, 558, 559, 560, 561, 564, 565, 566, 705, 706, 716, 787, 853, 913, 914, 915, 916, 992, 996, 999, 1003, 1009, 1029], "partli": [44, 770], "partnership": 1018, "parvu": 377, "pasbi": [1043, 1044], "pascal": 993, "pascual": 1039, "paskov": 1043, "pass": [2, 5, 6, 18, 19, 32, 36, 115, 125, 127, 143, 178, 181, 198, 227, 229, 230, 233, 236, 237, 239, 248, 253, 257, 260, 312, 315, 318, 344, 353, 362, 366, 367, 368, 375, 380, 381, 382, 385, 386, 387, 388, 389, 392, 394, 400, 403, 405, 409, 410, 411, 414, 415, 417, 418, 420, 421, 422, 427, 428, 432, 433, 438, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 453, 455, 458, 460, 461, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 492, 493, 496, 497, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 589, 590, 591, 592, 594, 595, 598, 608, 609, 611, 612, 618, 621, 627, 632, 633, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 733, 734, 743, 764, 775, 779, 780, 781, 782, 789, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 876, 877, 878, 879, 880, 882, 884, 885, 886, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 925, 926, 932, 936, 937, 941, 942, 944, 946, 948, 950, 953, 954, 961, 963, 964, 967, 982, 983, 989, 991, 993, 994, 995, 996, 997, 1000, 1003, 1006, 1007, 1008, 1014, 1018, 1020, 1024, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "passiv": [6, 204, 667, 668, 1016, 1031, 1037], "passiveaggress": [368, 418], "passiveaggressiveclassifi": [6, 204, 366, 368, 989, 994, 1037, 1040, 1041, 1043, 1044, 1047, 1049, 1054], "passiveaggressiveregressor": [368, 989, 1037, 1040, 1043, 1044, 1047, 1049, 1054], "passo": [0, 399, 1036, 1037], "passthrough": [2, 70, 119, 167, 168, 197, 215, 236, 311, 320, 411, 465, 468, 568, 569, 864, 865, 1003, 1045, 1047, 1050, 1051, 1053], "passthrough_numer": [197, 215], "passthroughpassthrough": [168, 311], "past": [9, 11, 384, 385, 388, 392, 395, 414, 415, 417, 539, 556, 557, 679, 1018, 1021, 1052], "pat": [629, 983], "patch": [32, 48, 236, 243, 244, 245, 248, 249, 254, 375, 384, 392, 415, 417, 556, 557, 584, 585, 588, 1036, 1044], "patch_height": [584, 585, 588], "patch_siz": [48, 96, 418, 584, 585, 588], "patch_width": [584, 585, 588], "patchextractor": [418, 1052], "patel": [1044, 1046, 1047, 1048, 1050], "path": [6, 15, 164, 167, 175, 182, 183, 186, 191, 201, 213, 216, 272, 346, 356, 374, 378, 380, 384, 388, 389, 394, 403, 442, 446, 451, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 509, 510, 549, 558, 559, 564, 565, 566, 567, 594, 595, 598, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 682, 683, 684, 685, 686, 687, 689, 865, 866, 912, 913, 914, 915, 916, 947, 982, 989, 990, 999, 1014, 1015, 1036, 1037, 1040, 1042, 1043, 1045, 1046, 1048, 1049, 1051, 1052], "path_length": 947, "path_method": [689, 990], "pathak": [1051, 1052], "patheffect": 38, "pathlib": [6, 1051, 1052], "pathlik": [497, 1052], "patholog": [50, 992, 1042], "pathwai": 381, "pati": 1038, "patienc": [388, 394], "patient": [5, 133, 146, 162, 377, 388, 409, 414, 989, 1027], "patil": [1050, 1053], "paton": 1049, "patric": [1048, 1049], "patricio": 1050, "patrick": [1043, 1044, 1049, 1050, 1053, 1054], "patrini": [1041, 1042, 1043], "pattaniyil": 1046, "pattern": [2, 11, 18, 61, 80, 83, 88, 92, 93, 100, 104, 149, 161, 164, 168, 181, 201, 233, 236, 318, 343, 351, 352, 353, 362, 377, 380, 382, 395, 406, 410, 411, 415, 417, 418, 449, 465, 467, 505, 533, 535, 542, 556, 557, 639, 709, 726, 742, 770, 789, 790, 798, 885, 985, 987, 989, 993, 994, 1000, 1008, 1010, 1014, 1015, 1018, 1048], "patterson": [495, 1041], "paul": [375, 1039, 1042, 1043, 1044, 1045, 1049, 1050], "paula": [1046, 1047], "pauli": 1041, "paulo": [1043, 1049, 1051], "paus": 44, "pava": 636, "pave": 1027, "pavel": [1037, 1045], "pavlo": [1044, 1045], "pavlyk": [1044, 1045, 1046, 1047], "pawel": 1045, "pawe\u0142": [1039, 1043, 1048, 1049], "payn": 1046, "pazzani": 25, "pb_q": [318, 989], "pbl": 122, "pc": [17, 330, 353, 375], "pca": [1, 4, 14, 30, 31, 43, 49, 67, 68, 70, 72, 73, 74, 76, 84, 92, 95, 102, 103, 104, 137, 164, 180, 194, 219, 221, 229, 231, 234, 238, 258, 267, 270, 283, 287, 292, 302, 318, 362, 372, 382, 394, 405, 408, 410, 411, 416, 426, 474, 477, 485, 497, 503, 505, 515, 533, 534, 535, 536, 540, 541, 544, 545, 550, 644, 659, 689, 691, 693, 697, 801, 827, 831, 854, 861, 864, 865, 867, 875, 883, 885, 985, 987, 990, 996, 1003, 1007, 1009, 1015, 1025, 1030, 1031, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1053, 1054], "pca0": 426, "pca1": [411, 426], "pca2": [411, 426], "pca_2": 84, "pca__n_compon": [71, 1025], "pca_back_proj_ax": 98, "pca_estim": 93, "pca_proj_ax": 98, "pca_scor": 100, "pcapca": [70, 238], "pcd": [861, 998], "pchelintsev": 1048, "pclass": [69, 169, 240, 315, 319, 320], "pcolor": 150, "pcolormesh": [32, 128, 138, 180, 286, 291, 335, 339, 343, 632], "pcr": [84, 413], "pd": [2, 10, 23, 69, 70, 109, 115, 116, 122, 127, 145, 161, 166, 167, 168, 169, 170, 176, 181, 186, 197, 201, 205, 215, 237, 240, 248, 257, 259, 260, 262, 270, 271, 273, 278, 310, 311, 312, 318, 319, 346, 351, 352, 385, 394, 411, 465, 467, 628, 629, 630, 631, 633, 779, 923, 925, 926, 982, 983, 1000, 1003, 1047, 1049, 1050, 1051, 1053], "pd2000": 993, "pd_": 1000, "pd_line_kw": 633, "pd_result": 633, "pdb": 388, "pdbcl": 388, "pdf": [146, 259, 288, 305, 377, 380, 410, 419, 443, 450, 532, 535, 538, 542, 642, 645, 650, 659, 665, 667, 668, 672, 677, 680, 683, 684, 686, 687, 693, 842, 843, 854, 861, 898, 900, 989, 1006, 1009, 1017, 1032, 1036], "pdist": [693, 779, 782], "pdp": [633, 1000, 1050], "pdp_lim": 633, "pdp_line_kw": 633, "pe": 584, "pe_tran": 584, "peai": 1045, "peak": [2, 11, 25, 168, 407, 414, 1050], "pear": 994, "pearson": [607, 610, 1049], "pearu": 1036, "pedersen": [1040, 1052], "pedigo": [1048, 1049], "pedregosa": [0, 184, 202, 219, 295, 399, 1036, 1037, 1038, 1039, 1040, 1042], "pedro": [69, 1037, 1039, 1040, 1044], "peek": [168, 380, 1000], "peer": 1018, "peerindex": 1011, "peev": [1044, 1047], "pegaso": 1007, "pei": [410, 1043], "peixinho": 1050, "pelennor": 1050, "penal": [12, 28, 80, 130, 181, 186, 190, 197, 201, 213, 215, 310, 346, 410, 412, 415, 417, 419, 470, 471, 472, 473, 474, 475, 476, 477, 479, 562, 563, 648, 653, 654, 662, 664, 677, 706, 716, 735, 787, 796, 878, 905, 906, 912, 989, 993, 995, 997, 1007, 1008, 1027], "penalis": [182, 195, 212, 697], "penalti": [5, 8, 28, 80, 164, 175, 176, 181, 182, 186, 190, 197, 201, 204, 212, 213, 216, 228, 267, 299, 318, 330, 344, 351, 366, 388, 392, 408, 412, 415, 419, 472, 473, 474, 475, 476, 477, 479, 503, 532, 538, 539, 540, 541, 543, 544, 548, 549, 598, 644, 647, 648, 649, 650, 653, 654, 655, 658, 659, 660, 661, 662, 663, 669, 670, 671, 673, 677, 679, 681, 682, 688, 815, 885, 905, 906, 908, 910, 911, 912, 982, 989, 992, 997, 1003, 1007, 1008, 1015, 1027, 1029, 1038, 1041, 1043, 1045, 1046, 1048, 1049, 1051, 1052], "peng": [680, 989, 1042, 1043, 1044, 1046, 1048], "peopl": [4, 68, 167, 235, 262, 351, 352, 367, 368, 375, 377, 379, 380, 384, 395, 416, 494, 495, 642, 842, 1011, 1013, 1025], "pep": [10, 388, 1036], "pep073": 381, "pep101": 384, "pep257": 394, "pep8": [382, 384, 388], "pepsi": 10, "per": [2, 8, 18, 32, 46, 51, 62, 89, 114, 115, 119, 154, 156, 167, 168, 197, 212, 215, 236, 240, 244, 255, 266, 268, 305, 311, 317, 322, 346, 351, 353, 366, 375, 376, 380, 385, 386, 389, 392, 394, 407, 410, 414, 415, 416, 417, 418, 420, 447, 449, 451, 458, 462, 465, 469, 488, 497, 501, 503, 504, 505, 509, 511, 513, 516, 524, 533, 535, 536, 537, 540, 542, 544, 550, 551, 562, 563, 570, 584, 589, 592, 611, 612, 633, 634, 642, 643, 659, 660, 667, 668, 669, 672, 674, 675, 676, 677, 679, 693, 697, 714, 717, 721, 723, 742, 755, 759, 760, 782, 784, 798, 799, 826, 833, 834, 835, 837, 838, 841, 843, 861, 864, 870, 872, 874, 875, 878, 879, 885, 886, 903, 905, 906, 907, 908, 909, 910, 911, 930, 931, 942, 968, 982, 985, 989, 992, 993, 994, 997, 1000, 1007, 1008, 1009, 1013, 1014, 1027, 1029, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1052, 1053], "perc": 254, "percal": 386, "percent": [109, 493, 601, 1006], "percent10": [236, 493], "percentag": [11, 52, 101, 119, 188, 215, 254, 262, 265, 414, 419, 535, 542, 545, 550, 594, 595, 649, 670, 681, 704, 735, 747, 819, 820, 821, 835, 917, 919, 994, 1009, 1038, 1042, 1048, 1049], "percentil": [8, 11, 69, 122, 125, 236, 240, 305, 366, 593, 596, 597, 599, 600, 601, 604, 607, 633, 634, 749, 1003, 1041, 1049], "percentile_5_predict": 11, "percentile_95_predict": 11, "percentile_perf_in_u": 8, "percentiles_class": 254, "percept": [141, 168, 1000], "perceptron": [6, 29, 118, 128, 138, 151, 153, 164, 204, 207, 210, 213, 237, 298, 303, 307, 308, 331, 344, 348, 368, 392, 418, 515, 516, 523, 667, 677, 831, 861, 862, 863, 866, 885, 991, 994, 998, 1007, 1015, 1016, 1031, 1040, 1042, 1043, 1044, 1048], "percol": 37, "perdisci": [410, 443], "perdok": 1051, "pere": 1053, "peredachi": [608, 609], "pereira": [1041, 1044, 1045], "peretti": 1051, "perez": [1044, 1051], "perf_count": 236, "perfect": [18, 24, 35, 68, 79, 96, 98, 193, 197, 351, 352, 380, 384, 410, 414, 554, 555, 691, 695, 705, 706, 709, 718, 727, 729, 732, 738, 744, 757, 758, 786, 787, 796, 989, 993, 996, 1008, 1018, 1027, 1050], "perfectli": [24, 25, 35, 262, 274, 343, 396, 410, 417, 439, 568, 607, 705, 706, 716, 718, 737, 738, 758, 787, 796, 878, 988, 990, 993, 1008, 1049, 1050], "perform": [2, 5, 11, 15, 17, 22, 23, 24, 30, 34, 36, 38, 46, 47, 51, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 68, 69, 72, 76, 84, 87, 96, 102, 107, 109, 115, 117, 119, 120, 121, 123, 124, 125, 129, 130, 136, 141, 144, 145, 146, 150, 158, 161, 162, 164, 167, 168, 169, 170, 173, 181, 186, 197, 199, 201, 203, 204, 205, 214, 215, 219, 220, 222, 226, 231, 234, 236, 244, 245, 248, 251, 253, 254, 255, 256, 257, 259, 260, 261, 264, 265, 267, 268, 270, 272, 273, 275, 276, 278, 281, 283, 296, 302, 305, 307, 309, 311, 312, 315, 321, 322, 325, 327, 328, 332, 339, 342, 343, 346, 351, 353, 362, 365, 367, 368, 375, 377, 382, 383, 384, 386, 388, 389, 392, 393, 394, 396, 400, 403, 404, 405, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 428, 432, 441, 443, 444, 445, 447, 448, 449, 451, 453, 455, 456, 460, 462, 469, 470, 483, 484, 485, 486, 495, 503, 513, 516, 532, 533, 534, 536, 538, 543, 544, 545, 546, 547, 549, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 595, 602, 603, 604, 611, 612, 628, 631, 632, 639, 641, 646, 652, 655, 656, 657, 659, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 679, 683, 684, 686, 688, 690, 691, 694, 695, 698, 704, 705, 706, 708, 709, 713, 714, 727, 730, 731, 739, 741, 743, 756, 757, 758, 779, 784, 785, 787, 788, 789, 795, 796, 797, 798, 799, 801, 804, 805, 812, 813, 815, 819, 826, 827, 828, 830, 831, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 852, 854, 860, 861, 862, 863, 865, 866, 868, 871, 872, 874, 875, 877, 878, 879, 881, 882, 885, 886, 888, 890, 891, 892, 894, 895, 896, 900, 901, 903, 907, 908, 909, 910, 911, 913, 914, 915, 916, 925, 926, 966, 977, 982, 983, 985, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1018, 1020, 1021, 1024, 1027, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "performancetip": 386, "perhap": [68, 118, 377, 379, 388, 394, 416, 1014], "perimet": [146, 377], "period": [11, 125, 149, 154, 158, 384, 394, 395, 407, 420, 616, 822, 884, 1044, 1049, 1051], "periodic_spline_transform": 2, "periodicity_bound": [149, 154, 158, 616], "peripheri": 410, "perla": 1039, "perm_scores_iri": 265, "perm_scores_rand": 265, "perm_sorted_idx": 170, "permalink": 384, "perman": 388, "permiss": [379, 384, 395, 397, 1018, 1051], "permit": [411, 468, 589, 590, 592, 801, 804, 805, 815, 827, 866, 867, 993, 994, 995, 1042], "permut": [18, 19, 35, 79, 115, 117, 123, 138, 141, 164, 165, 171, 213, 251, 259, 276, 309, 312, 329, 396, 404, 410, 417, 465, 497, 501, 505, 560, 561, 565, 566, 628, 631, 635, 680, 705, 706, 718, 737, 738, 756, 758, 796, 818, 820, 830, 831, 865, 879, 910, 913, 914, 942, 962, 964, 967, 993, 1007, 1015, 1024, 1027, 1031, 1036, 1042, 1049, 1051], "permutation_import": [116, 117, 123, 169, 170, 315, 417, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1001, 1046, 1048, 1049, 1053], "permutation_scor": 830, "permutation_test_scor": [265, 400, 414, 1036, 1043, 1048], "permuted_categori": 312, "perp_tol": 537, "perpendicular": [32, 344], "perperogl": 1003, "perplex": [164, 217, 218, 220, 222, 224, 283, 515, 526, 537, 693, 990, 1015, 1041, 1043, 1050], "perri": 1046, "perrin": 1042, "perrot": [0, 1036], "persian": 1013, "persist": [369, 388, 392, 415, 447, 611, 612, 861, 998, 1013, 1031, 1042, 1045], "persola": 1044, "person": [4, 167, 253, 262, 375, 379, 414, 418, 494, 495, 496, 1003, 1025, 1044], "personal_statu": 253, "perspect": [53, 58, 197, 273, 366, 375, 392, 395, 531, 644, 905, 986], "pertin": 197, "perturb": [167, 214, 302, 415, 417, 992], "peru": [9, 296, 375, 499], "pervas": [362, 380], "pessimist": [121, 417], "pessoa": 1049, "pestrickland": 1042, "pet": [318, 322, 789, 993], "pet_cat": 318, "pet_dog": 318, "pet_fish": 318, "petal": [43, 88, 101, 103, 118, 240, 317, 320, 377, 411, 918, 1009, 1026, 1027], "petal_col": 320, "petar": 1051, "pete": [1043, 1047, 1048], "peter": [0, 9, 61, 121, 123, 124, 260, 351, 352, 399, 410, 449, 451, 458, 650, 793, 794, 989, 993, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1051, 1052, 1053], "peterlongo": 1053, "peterson": [1036, 1038], "petfood": 1018, "petrov": [1043, 1044, 1052], "petrushev": 1045, "pe\u00f1a": 1040, "pfaffel": 1049, "pfahring": [836, 994], "pfe": 10, "pfister": 1003, "pfizer": 10, "pft": 198, "pg": [10, 386, 650, 989, 1041], "pg_i": 650, "pgithub": 1048, "ph": 1048, "pham": [173, 985, 1043], "phan": 415, "pharmaceut": 377, "pharuj": 236, "phase": [2, 181, 191, 366, 628, 985, 990, 996, 1018, 1044, 1046], "phase_nois": 38, "phd": [0, 410, 417, 1014, 1018], "phenol": 377, "phenomena": 154, "phenomenon": [352, 1003], "phi": [38, 415, 417, 744, 871, 985, 993, 1003, 1008], "phil": [55, 1041, 1052], "philipp": [1038, 1039, 1042, 1051], "phillip": [9, 296, 375, 499], "phimeca": 1011, "phlypo": 1039, "phongpanagnam": 1049, "phongpanangam": 1049, "photo": 46, "photogrammetr": 989, "php": [993, 1013], "phrase": 418, "phy": [608, 609], "phyo": 1050, "physic": [68, 115, 367, 506, 958, 989, 1052], "physician": 409, "physiolog": [262, 377, 1027], "pi": [2, 12, 32, 37, 38, 94, 102, 127, 129, 141, 149, 177, 181, 185, 191, 198, 220, 243, 244, 245, 248, 249, 274, 296, 316, 322, 359, 397, 416, 420, 517, 518, 519, 616, 643, 987, 988, 989, 995, 1028], "pianomania": 1041, "pick": [46, 53, 58, 170, 234, 267, 319, 326, 375, 380, 384, 410, 417, 444, 461, 524, 674, 915, 916, 982, 989, 990, 992, 1007, 1047], "pickl": [384, 394, 418, 590, 845, 846, 1013, 1014, 1031, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "pickleabl": [869, 1042], "pickup": 1044, "pico": [1039, 1040], "pict": [835, 994], "pictur": [10, 15, 19, 34, 46, 51, 64, 66, 96, 164, 230, 249, 375, 395, 410, 415, 418, 463, 494, 495, 522, 1014, 1015], "piec": [32, 45, 198, 367, 992], "piecewis": [102, 318, 406, 984, 989, 1003, 1009], "pierr": [1036, 1044, 1045, 1047, 1049, 1051, 1053, 1054], "pierreablin": 1044, "pierreattard": [1049, 1050], "pierretallott": [1044, 1045, 1046], "pierron": 1039, "piet": [1050, 1051], "pieter": [15, 1042, 1043, 1050], "pietro": [1036, 1039, 1053], "pietruh": 1044, "pig": 784, "pillow": [380, 397, 402], "pim": 1045, "pin": [386, 403], "pinaki": 1044, "pinbal": [11, 122, 125, 318, 417, 563, 671, 724, 749, 989, 1049, 1050], "pinball_loss_05": 11, "pinball_loss_50": 11, "pinball_loss_95": 11, "ping": [898, 1005, 1042, 1043], "pink": 177, "pinki": 1050, "pinot": 311, "pinto": 1036, "pintor": 1047, "pinvh": [1043, 1045], "piontek": 1052, "piotr": [1044, 1045], "pip": [283, 315, 316, 317, 318, 319, 320, 321, 322, 323, 367, 378, 380, 384, 386, 397, 403, 405, 1009], "pip3": [378, 397], "pipe": [70, 71, 119, 144, 233, 238, 258, 311, 317, 318, 393, 400, 411, 418, 591, 865, 890, 891, 893, 894, 895, 896, 982, 1003, 1025], "pipe_sgd": 211, "pipegraph": 392, "pipelin": [2, 29, 52, 56, 69, 72, 73, 74, 84, 97, 114, 115, 119, 137, 140, 142, 144, 145, 146, 147, 161, 162, 168, 169, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 225, 226, 227, 229, 231, 236, 237, 240, 241, 251, 253, 256, 257, 258, 259, 263, 266, 267, 270, 273, 274, 276, 283, 285, 286, 291, 292, 299, 302, 307, 310, 312, 315, 316, 317, 318, 319, 320, 321, 330, 351, 352, 362, 366, 369, 372, 374, 375, 380, 383, 394, 400, 403, 414, 418, 420, 424, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 489, 503, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 608, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 714, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 983, 985, 989, 996, 997, 1002, 1003, 1007, 1008, 1013, 1014, 1015, 1016, 1018, 1021, 1023, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1053], "pipelineifittedpipelin": [69, 114, 143, 167, 169, 227, 237, 240, 266, 319], "pipelineinot": [130, 228, 238, 260, 273, 311, 316], "pipelinepipelin": [69, 70, 238, 253], "pita": 1053, "pitfal": [146, 164, 165, 166, 169, 171, 193, 201, 202, 259, 317, 369, 393, 394, 396, 414, 466, 468, 497, 654, 673, 674, 702, 754, 816, 828, 831, 866, 878, 885, 989, 1015, 1031], "pitkin": [168, 1000], "pitt": 17, "pitter": 1051, "pivot": [44, 270, 271], "pivot_t": 270, "pixel": [3, 4, 12, 18, 30, 45, 46, 51, 93, 108, 116, 134, 144, 164, 169, 170, 173, 230, 257, 301, 302, 377, 410, 415, 417, 418, 419, 494, 495, 496, 565, 586, 587, 608, 609, 635, 996, 998, 1009, 1015, 1025, 1028], "pixelwis": 93, "pixi": 403, "piyg": 307, "pkdd": 0, "pkg": 378, "pkgsrc": 397, "pkl": 403, "pl": [11, 71, 84, 154, 201, 322, 377, 413, 483, 484, 485, 486, 1041], "place": [2, 58, 227, 237, 287, 366, 380, 381, 382, 385, 387, 395, 407, 418, 420, 442, 446, 447, 483, 484, 485, 516, 582, 591, 629, 631, 632, 769, 782, 798, 888, 890, 891, 892, 893, 894, 895, 896, 972, 973, 1013, 1036, 1043, 1046, 1047, 1049, 1053, 1054], "placehold": [17, 384, 628, 629, 630, 631, 816, 817, 820, 821, 983], "plagre": 1043, "plai": [94, 123, 151, 180, 206, 252, 294, 335, 336, 366, 1029], "plain": [341, 420, 658, 1007], "plan": [10, 374, 378, 380, 381, 395, 403, 1003, 1039], "planar": 410, "plane": [10, 146, 209, 231, 289, 341, 343, 344, 348, 377, 453, 463, 987, 989, 1008, 1027], "plant": [265, 268, 269, 373, 993, 1031], "plasma": 305, "plasma_r": 305, "plateau": [115, 120, 145, 253, 257, 261], "platform": [383, 394, 395, 1013, 1017, 1018, 1041, 1044, 1045, 1047, 1049, 1050, 1053], "platt": [407, 438, 907, 908, 910, 911, 1008], "platypu": 351, "pldtc325": 1043, "pleas": [0, 10, 15, 24, 69, 70, 114, 116, 117, 123, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 201, 227, 228, 229, 231, 233, 236, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 283, 293, 302, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 343, 360, 367, 374, 375, 378, 380, 381, 382, 384, 388, 392, 393, 394, 397, 400, 403, 405, 408, 410, 417, 418, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 611, 612, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 993, 997, 1003, 1007, 1008, 1013, 1014, 1017, 1020, 1027, 1029, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pleasant": [379, 1018], "plenti": 23, "plgreenliru": 1047, "plo": [374, 608, 609], "plot": [2, 3, 4, 9, 10, 11, 13, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 38, 40, 41, 43, 52, 53, 54, 56, 57, 58, 59, 60, 63, 66, 70, 71, 72, 73, 77, 78, 79, 84, 86, 91, 93, 96, 97, 100, 101, 102, 103, 108, 109, 111, 112, 113, 114, 116, 120, 121, 122, 124, 125, 127, 128, 129, 134, 138, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 169, 170, 171, 173, 175, 179, 180, 182, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 225, 226, 229, 230, 232, 234, 235, 240, 241, 243, 244, 245, 247, 249, 251, 252, 253, 254, 259, 260, 262, 264, 265, 269, 270, 271, 273, 274, 276, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 312, 316, 319, 320, 321, 322, 327, 328, 331, 334, 335, 339, 340, 341, 344, 345, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 369, 380, 383, 389, 392, 396, 397, 404, 407, 410, 412, 414, 416, 417, 439, 442, 447, 451, 457, 465, 472, 497, 502, 503, 505, 513, 516, 520, 524, 554, 558, 561, 563, 565, 566, 570, 571, 611, 623, 632, 633, 634, 658, 659, 673, 677, 698, 699, 701, 702, 703, 704, 719, 728, 736, 762, 783, 785, 788, 789, 790, 801, 807, 818, 824, 826, 827, 828, 829, 832, 834, 843, 847, 863, 866, 878, 879, 880, 882, 885, 905, 907, 910, 913, 914, 919, 986, 987, 989, 990, 992, 993, 996, 997, 999, 1007, 1008, 1009, 1013, 1014, 1015, 1024, 1025, 1027, 1031, 1037, 1039, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "plot_": [318, 397], "plot_2d": [90, 218], "plot_3d": 218, "plot_accuraci": 6, "plot_adaboost_multiclass": [109, 134, 1015], "plot_adaboost_regress": [110, 134, 1015], "plot_adaboost_twoclass": [111, 134, 1015], "plot_adjusted_for_chance_measur": [35, 66, 1015], "plot_affinity_propag": [36, 66, 441, 455, 1015], "plot_agglomerative_clust": [37, 66, 1015], "plot_agglomerative_clustering_metr": [38, 66, 1015], "plot_agglomerative_dendrogram": [39, 66, 1015], "plot_all_sc": [305, 313, 1015], "plot_anomaly_comparison": [226, 241, 1015], "plot_ard": [176, 216, 645, 1015], "plot_arg": 300, "plot_bayesian_ridge_curvefit": [177, 216, 1015], "plot_benchmark_throughput": 8, "plot_bias_vari": [112, 134, 1015], "plot_bicluster_newsgroup": [17, 20, 1015], "plot_birch_vs_minibatchkmean": [40, 66, 1015], "plot_bisect_kmean": [41, 66, 1015], "plot_caching_nearest_neighbor": [285, 297, 1015], "plot_calibr": [22, 26, 1015], "plot_calibration_curv": [23, 26, 1015], "plot_calibration_multiclass": [24, 26, 1015], "plot_causal_interpret": [166, 171, 1015], "plot_chance_level": [236, 253, 266, 268, 269, 701, 703, 1052], "plot_classif": [286, 297, 1015], "plot_classification_prob": [28, 33, 1015], "plot_classifier_chain_yeast": [281, 282, 1015], "plot_classifier_comparison": [29, 33, 307, 1015], "plot_clust": 50, "plot_cluster_comparison": [42, 66, 1015], "plot_cluster_iri": [43, 66, 1015], "plot_coin_segment": [44, 66, 1015], "plot_coin_ward_segment": [45, 66, 1015], "plot_color": [111, 357], "plot_color_quant": [46, 66, 1015], "plot_column_transform": [68, 74, 1015], "plot_column_transformer_mixed_typ": [69, 74, 1015], "plot_compare_calibr": [25, 26, 1015], "plot_compare_cross_decomposit": [83, 85, 1015], "plot_compare_gpr_krr": [149, 159, 1015], "plot_compare_method": [218, 224, 1015], "plot_compare_reduct": [70, 74, 1015], "plot_concentration_prior": [243, 250, 1015], "plot_confusion_matrix": [252, 276, 315, 1015, 1046, 1047, 1048, 1049], "plot_cost_complexity_prun": [356, 361, 1015], "plot_cost_sensitive_learn": [253, 276, 1015], "plot_covariance_estim": [76, 81, 1015], "plot_custom_kernel": [335, 349, 1015], "plot_cv_diabet": [136, 139, 1015], "plot_cv_indic": [254, 276, 1015], "plot_cv_predict": [255, 276, 1015], "plot_cyclical_feature_engin": [2, 14, 1015], "plot_dbscan": [47, 66, 421, 445, 1015], "plot_decision_funct": 348, "plot_dendrogram": 39, "plot_det": [256, 276, 1015], "plot_det_curv": [1048, 1049], "plot_dict_face_patch": [48, 66, 1015], "plot_digit": 3, "plot_digits_agglomer": [49, 66, 1015], "plot_digits_classif": [30, 33, 1015], "plot_digits_classification_exercis": [137, 139, 1015], "plot_digits_denois": [3, 14, 1015], "plot_digits_kde_sampl": [287, 297, 1015], "plot_digits_last_imag": [87, 91, 1015], "plot_digits_linkag": [50, 66, 1015], "plot_digits_pip": [71, 74, 1015], "plot_discret": [306, 313, 1015], "plot_discretization_classif": [307, 313, 1015], "plot_discretization_strategi": [308, 313, 1015], "plot_display_object_visu": [227, 241, 1015], "plot_distribut": 305, "plot_document_classification_20newsgroup": [351, 354, 1015], "plot_document_clust": [352, 354, 1015], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [178, 216, 1015], "plot_ellips": [32, 243], "plot_embed": 219, "plot_ensemble_oob": [113, 134, 1015], "plot_estimator_represent": [228, 241, 1015], "plot_f_test_vs_mi": [141, 147, 1015], "plot_face_compress": [51, 66, 1015], "plot_face_recognit": [4, 14, 1015], "plot_faces_decomposit": [93, 104, 1015], "plot_feature_agglomeration_vs_univariate_select": [52, 66, 1015], "plot_feature_effect": 351, "plot_feature_select": [142, 147, 1015], "plot_feature_selection_pipelin": [143, 147, 1015], "plot_feature_transform": [114, 134, 1015], "plot_feature_union": [72, 74, 1015], "plot_fig": 194, "plot_forest_hist_grad_boosting_comparison": [115, 134, 1015], "plot_forest_import": [116, 134, 1015], "plot_forest_importances_fac": [117, 134, 1015], "plot_forest_iri": [118, 134, 1015], "plot_galleri": [4, 93, 1025], "plot_gmm": [244, 250, 1015], "plot_gmm_covari": [245, 250, 1015], "plot_gmm_init": [246, 250, 1015], "plot_gmm_pdf": [247, 250, 1015], "plot_gmm_select": [248, 250, 1015], "plot_gmm_sin": [249, 250, 1015], "plot_gpc": [150, 159, 1015], "plot_gpc_iri": [151, 159, 1015], "plot_gpc_isoprob": [152, 159, 1015], "plot_gpc_xor": [153, 159, 1015], "plot_gpr_co2": [154, 159, 1015], "plot_gpr_noisi": [155, 159, 1015], "plot_gpr_noisy_target": [156, 159, 1015], "plot_gpr_on_structured_data": [157, 159, 1015], "plot_gpr_prior_posterior": [158, 159, 1015], "plot_gpr_sampl": 158, "plot_gradient_boosting_categor": [119, 134, 1015], "plot_gradient_boosting_early_stop": [120, 134, 1015], "plot_gradient_boosting_oob": [121, 134, 1015], "plot_gradient_boosting_quantil": [122, 134, 1015], "plot_gradient_boosting_regress": [123, 134, 1015], "plot_gradient_boosting_regular": [124, 134, 1015], "plot_grid_search_digit": [257, 276, 1015], "plot_grid_search_refit_cal": [258, 276, 1015], "plot_grid_search_stat": [259, 276, 1015], "plot_grid_search_text_feature_extract": [260, 276, 1015], "plot_hashing_vs_dict_vector": [353, 354, 1015], "plot_hdbscan": [53, 66, 1015], "plot_hgbt_regress": [125, 134, 1015], "plot_huber_vs_ridg": [179, 216, 1015], "plot_hyperplan": [189, 206, 234], "plot_ica_blind_source_separ": [94, 104, 1015], "plot_ica_vs_pca": [95, 104, 1015], "plot_idx": 118, "plot_image_denois": [96, 104, 1015], "plot_incremental_pca": [97, 104, 1015], "plot_indic": 262, "plot_inductive_clust": [54, 66, 1015], "plot_influ": 5, "plot_info": 119, "plot_iris_dataset": [88, 91, 1015], "plot_iris_dtc": [357, 361, 1015], "plot_iris_exercis": [138, 139, 1015], "plot_iris_logist": [180, 216, 1015], "plot_iris_svc": [336, 349, 1015], "plot_isolation_forest": [126, 134, 1015], "plot_isotonic_regress": [229, 241, 1015], "plot_iterative_imputer_variants_comparison": [161, 163, 1015], "plot_johnson_lindenstrauss_bound": [230, 241, 1015], "plot_kde_1d": [288, 297, 1015], "plot_kernel_approxim": [231, 241, 1015], "plot_kernel_pca": [98, 104, 1015], "plot_kernel_ridge_regress": [232, 241, 1015], "plot_kind": 2, "plot_kmeans_assumpt": [55, 66, 1015], "plot_kmeans_digit": [56, 66, 1015], "plot_kmeans_plusplu": [57, 66, 1015], "plot_kmeans_silhouette_analysi": [58, 66, 1015], "plot_kmeans_stability_low_dim_dens": [59, 66, 1015], "plot_label_propagation_digit": [326, 332, 1015], "plot_label_propagation_digits_active_learn": [327, 332, 1015], "plot_label_propagation_structur": [328, 332, 1015], "plot_lasso_and_elasticnet": [181, 216, 1015], "plot_lasso_coordinate_descent_path": [182, 216, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 1015], "plot_lasso_dense_vs_sparse_data": [183, 216, 1015], "plot_lasso_lar": [184, 216, 1015], "plot_lasso_lars_": [185, 216, 1015], "plot_lasso_model_select": [186, 216, 648, 654, 1015], "plot_lda": [31, 33, 1015], "plot_lda_qda": [32, 33, 1015], "plot_learning_curv": [261, 276, 1015], "plot_likelihood_ratio": [262, 276, 1015], "plot_linear_model_coefficient_interpret": [167, 171, 1015], "plot_linearsvc_support_vector": [337, 349, 1015], "plot_linkage_comparison": [60, 66, 1015], "plot_lle_digit": [219, 224, 1015], "plot_lof_novelty_detect": [289, 297, 1015], "plot_lof_outlier_detect": [290, 297, 1015], "plot_logist": [187, 216, 1015], "plot_logistic_l1_l2_spars": [188, 216, 1015], "plot_logistic_multinomi": [189, 216, 1015], "plot_logistic_path": [190, 216, 1015], "plot_lw_vs_oa": [77, 81, 1015], "plot_mahalanobis_dist": [78, 81, 1015], "plot_manifold_spher": [220, 224, 1015], "plot_map_data_to_norm": [309, 313, 1015], "plot_md": [221, 224, 1015], "plot_mean_shift": [61, 66, 462, 1015], "plot_metadata_rout": [233, 241, 1015], "plot_method": [7, 32, 180, 211, 286, 291, 335, 337, 338, 340, 341, 343, 632], "plot_mini_batch_kmean": [62, 66, 1015], "plot_missing_valu": [162, 163, 1015], "plot_mlp_alpha": [299, 303, 1015], "plot_mlp_training_curv": [300, 303, 1015], "plot_mnist_filt": [301, 303, 1015], "plot_model_complexity_influ": [5, 14, 1015], "plot_monotonic_constraint": [127, 134, 1015], "plot_multi_metric_evalu": [263, 276, 1015], "plot_multi_task_lasso_support": [191, 216, 1015], "plot_multiclass_overview": [278, 279, 1015], "plot_multilabel": [234, 241, 1015], "plot_multioutput_face_complet": [235, 241, 1015], "plot_n_features_influ": 8, "plot_nca_classif": [291, 297, 1015], "plot_nca_dim_reduct": [292, 297, 1015], "plot_nca_illustr": [293, 297, 1015], "plot_nearest_centroid": [294, 297, 1015], "plot_nested_cross_validation_iri": [264, 276, 1015], "plot_nnl": [192, 216, 1015], "plot_num": [42, 60, 226], "plot_obs_pr": 215, "plot_ol": [193, 216, 1015], "plot_ols_3d": [194, 216, 1015], "plot_ols_ridge_vari": [195, 216, 1015], "plot_omp": [196, 216, 1015], "plot_on_dataset": 300, "plot_oneclass": [338, 349, 1015], "plot_opt": [63, 66, 1015], "plot_out_of_core_classif": [6, 14, 1015], "plot_outlier_detection_bench": [236, 241, 1015], "plot_outlier_detection_win": [7, 14, 1015], "plot_partial_depend": [168, 171, 315, 316, 317, 1015, 1041, 1045, 1046, 1047, 1048, 1049, 1050], "plot_partial_dependence_visualization_api": [237, 241, 1015], "plot_pca_iri": [99, 104, 1015], "plot_pca_vs_fa_model_select": [100, 104, 1015], "plot_pca_vs_lda": [101, 104, 1015], "plot_pcr_vs_pl": [84, 85, 1015], "plot_permutation_import": [169, 170, 171, 1015], "plot_permutation_importance_multicollinear": [170, 171, 1015], "plot_permutation_tests_for_classif": [265, 276, 1015], "plot_pipeline_displai": [238, 241, 1015], "plot_poisson_regression_non_normal_loss": [197, 216, 1015], "plot_polynomial_interpol": [198, 216, 880, 884, 1015], "plot_precision_recal": [266, 276, 1015], "plot_precision_recall_curv": [315, 1046, 1048, 1049], "plot_prediction_lat": [8, 14, 1015], "plot_quantile_regress": [199, 216, 1015], "plot_random_dataset": [89, 91, 1015], "plot_random_forest_embed": [128, 134, 1015], "plot_random_forest_regression_multioutput": [129, 134, 1015], "plot_random_multilabel_dataset": [90, 91, 1015], "plot_randomized_search": [267, 276, 1015], "plot_rang": 111, "plot_ransac": [200, 216, 1015], "plot_rbf_paramet": [339, 349, 1015], "plot_rbm_logistic_classif": [302, 303, 1015], "plot_regress": [295, 297, 1015], "plot_release_highlights_0_22_0": [315, 324, 1015], "plot_release_highlights_0_23_0": [316, 324, 1015], "plot_release_highlights_0_24_0": [317, 324, 1015], "plot_release_highlights_1_0_0": [318, 324, 1015], "plot_release_highlights_1_1_0": [319, 324, 1015], "plot_release_highlights_1_2_0": [320, 324, 1015], "plot_release_highlights_1_3_0": [321, 324, 1015], "plot_release_highlights_1_4_0": [322, 324, 1015], "plot_release_highlights_1_5_0": [323, 324, 1015], "plot_result": [32, 119, 243, 244, 249], "plot_rfe_digit": [144, 147, 1015], "plot_rfe_with_cross_valid": [145, 147, 1015], "plot_ridge_coeff": [201, 216, 1015], "plot_ridge_path": [202, 216, 1015], "plot_robust_fit": [203, 216, 1015], "plot_robust_vs_empirical_covari": [79, 81, 1015], "plot_roc": [268, 276, 1015], "plot_roc_crossv": [269, 276, 1015], "plot_roc_curv": [315, 1046, 1048], "plot_roc_curve_visualization_api": [239, 241, 1015], "plot_roc_pr_curv": 253, "plot_sampl": [95, 249], "plot_scalable_poly_kernel": [173, 174, 1015], "plot_scaling_import": [310, 313, 1015], "plot_scatt": 54, "plot_segmentation_toi": [64, 66, 1015], "plot_select_from_model_diabet": [146, 147, 1015], "plot_self_training_varying_threshold": [329, 332, 1015], "plot_semi_supervised_newsgroup": [330, 332, 1015], "plot_semi_supervised_versus_svm_iri": [331, 332, 1015], "plot_separating_hyperplan": [340, 349, 1015], "plot_separating_hyperplane_unbalanc": [341, 349, 1015], "plot_set_output": [240, 241, 1015], "plot_sgd_comparison": [204, 216, 1015], "plot_sgd_early_stop": [205, 216, 1015], "plot_sgd_iri": [206, 216, 1015], "plot_sgd_loss_funct": [207, 216, 1015], "plot_sgd_penalti": [208, 216, 1015], "plot_sgd_separating_hyperplan": [209, 216, 1015], "plot_sgd_weighted_sampl": [210, 216, 1015], "plot_sgdocsvm_vs_ocsvm": [211, 216, 1015], "plot_sparse_cod": [102, 104, 1015], "plot_sparse_cov": [80, 81, 1015], "plot_sparse_logistic_regression_20newsgroup": [212, 216, 1015], "plot_sparse_logistic_regression_mnist": [213, 216, 1015], "plot_species_distribut": 9, "plot_species_distribution_model": [9, 14, 499, 1015], "plot_species_kd": [296, 297, 1015], "plot_spectral_biclust": [18, 20, 1015], "plot_spectral_coclust": [19, 20, 1015], "plot_stack_predictor": [130, 134, 1015], "plot_step": [111, 118, 357], "plot_step_coars": 118, "plot_stock_market": [10, 14, 1015], "plot_subfigur": 234, "plot_successive_halving_heatmap": [270, 276, 1015], "plot_successive_halving_iter": [271, 276, 1015], "plot_surfac": [168, 194], "plot_svm_anova": [342, 349, 1015], "plot_svm_kernel": [343, 349, 1015], "plot_svm_margin": [344, 349, 1015], "plot_svm_regress": [345, 349, 1015], "plot_svm_scale_c": [346, 349, 1015], "plot_svm_tie_break": [347, 349, 1015], "plot_swissrol": [222, 224, 1015], "plot_t_sne_perplex": [223, 224, 1015], "plot_target_encod": [311, 313, 1015], "plot_target_encoder_cross_v": [312, 313, 1015], "plot_theilsen": [214, 216, 1015], "plot_time_series_lagged_featur": [11, 14, 1015], "plot_titl": 243, "plot_tomography_l1_reconstruct": [12, 14, 1015], "plot_top_word": 13, "plot_topics_extraction_with_nmf_lda": [13, 14, 1015], "plot_train_error_vs_test_error": [272, 276, 1015], "plot_training_data_with_decision_boundari": 343, "plot_transformed_target": [73, 74, 1015], "plot_tre": [357, 360, 1009, 1045, 1047, 1048, 1049, 1051, 1052, 1054], "plot_tree_regress": [358, 361, 1015], "plot_tree_regression_multioutput": [359, 361, 1015], "plot_tuned_decision_threshold": [273, 276, 1015], "plot_tweedie_regression_insurance_claim": [215, 216, 1015], "plot_underfitting_overfit": [274, 276, 1015], "plot_unveil_tree_structur": [360, 361, 1015], "plot_validation_curv": [275, 276, 1015], "plot_varimax_fa": [103, 104, 1015], "plot_voting_decision_region": [131, 134, 1015], "plot_voting_proba": [132, 134, 1015], "plot_voting_regressor": [133, 134, 1015], "plot_ward_structured_vs_unstructur": [65, 66, 1015], "plot_weighted_sampl": [348, 349, 1015], "plotli": [115, 260, 380, 397, 402], "pls1": [413, 485], "pls2": [413, 485], "plsca": [83, 484], "plscanon": [83, 483, 485, 486, 994, 1016, 1031, 1040, 1044, 1046, 1048, 1050, 1054], "plsregress": [83, 84, 994, 1016, 1031, 1043, 1046, 1048, 1050, 1052, 1054], "plssvd": [483, 484, 1016, 1031, 1048, 1050, 1054], "plsw2a": 413, "plt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 387, 439, 503, 632, 633, 698, 699, 701, 702, 703, 807, 824, 919, 1000, 1024, 1025, 1026, 1027, 1028, 1033], "plu": [266, 377, 385, 680, 836, 839, 994, 1007], "plug": [415, 989, 1018, 1029], "plugin": 397, "plural": 1042, "plusnet": 201, "pm": [158, 168, 269, 417, 993], "pmlr": 697, "pmml": 1013, "png": [0, 30, 917], "pnucci": 1052, "po": [123, 221, 418], "podshumok": [1042, 1043], "poesio": 717, "poetri": 403, "poh": [1044, 1045], "point": [2, 7, 9, 11, 12, 24, 29, 35, 36, 38, 39, 46, 47, 50, 53, 56, 58, 62, 65, 78, 79, 83, 88, 89, 90, 92, 94, 96, 98, 104, 109, 111, 115, 118, 119, 120, 125, 128, 145, 146, 151, 156, 157, 164, 167, 168, 169, 176, 180, 186, 189, 191, 193, 195, 197, 198, 199, 201, 203, 206, 209, 210, 214, 215, 218, 219, 220, 221, 222, 226, 229, 231, 245, 249, 251, 252, 256, 260, 261, 262, 266, 268, 269, 276, 278, 281, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 306, 307, 309, 311, 323, 326, 327, 329, 331, 335, 339, 340, 341, 343, 344, 347, 348, 351, 352, 353, 357, 362, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 388, 392, 394, 395, 408, 409, 410, 415, 416, 417, 418, 421, 422, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 461, 462, 470, 473, 475, 497, 499, 505, 513, 515, 516, 520, 523, 526, 531, 534, 536, 542, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 611, 612, 629, 632, 633, 634, 638, 639, 640, 645, 646, 652, 656, 658, 659, 671, 672, 674, 676, 677, 679, 680, 683, 684, 689, 690, 691, 692, 693, 694, 695, 702, 707, 708, 711, 714, 718, 724, 726, 732, 737, 738, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 765, 780, 781, 791, 792, 798, 799, 801, 815, 817, 823, 826, 828, 835, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 866, 870, 875, 884, 885, 899, 900, 901, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 923, 985, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1005, 1006, 1008, 1009, 1013, 1014, 1015, 1024, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "pointer": [380, 388, 443, 1045], "pointplot": 125, "points_color": 218, "pointwis": [112, 156, 421, 445], "poisson": [2, 11, 164, 175, 216, 234, 376, 417, 465, 466, 497, 524, 553, 559, 563, 566, 649, 670, 673, 681, 707, 725, 746, 750, 751, 753, 831, 865, 866, 869, 870, 878, 879, 880, 885, 914, 916, 946, 989, 1009, 1015, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "poisson_gbrt": 197, "poisson_glm": 197, "poissonregressor": [197, 215, 316, 319, 649, 681, 989, 1047, 1050, 1051], "pokorni": 1051, "pola": 11, "polar": [71, 154, 380, 397, 402, 434, 443, 444, 446, 448, 450, 465, 469, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 1029, 1053, 1054], "pole": 220, "poli": [2, 138, 173, 259, 336, 343, 345, 453, 536, 621, 766, 775, 801, 880, 907, 908, 909, 910, 911, 989, 1003, 1027], "polici": [125, 166, 167, 197, 215, 394, 536, 542, 989, 1051], "policyhold": [197, 215, 989], "polit": [17, 351, 375, 379, 989, 994], "polli": 351, "pollut": [351, 729, 786, 993, 999], "polmauri": 1043, "poloso": 1050, "polycollect": [807, 824], "polynomi": [13, 161, 164, 172, 174, 175, 197, 203, 216, 231, 238, 259, 274, 288, 317, 318, 336, 345, 372, 376, 453, 492, 621, 640, 641, 642, 644, 646, 673, 766, 775, 776, 831, 866, 875, 877, 880, 884, 905, 907, 908, 909, 910, 911, 988, 1008, 1015, 1016, 1031, 1048, 1049], "polynomial_featur": 274, "polynomial_kernel": [766, 991, 1053], "polynomialcountsketch": [173, 640, 642, 985, 1048, 1050, 1053], "polynomialfeatur": [2, 176, 197, 198, 203, 238, 274, 317, 343, 884, 989, 1003, 1040, 1044, 1045, 1046, 1049, 1050, 1052, 1053], "polynomialfeaturespolynomialfeatur": 238, "polysemi": 415, "polytop": 516, "pomegran": 1013, "ponc": [415, 532, 538], "poncho": 1018, "pone": 374, "ponnuthurai": 377, "ponzi": 311, "pooch": [51, 380, 397, 402], "pooja": [1051, 1052, 1053], "pool": [268, 392, 446, 636, 962, 1014, 1047], "pooling_func": [446, 1044], "poolqc": 119, "poolsawat": [1050, 1051], "poor": [168, 173, 265, 275, 329, 407, 414, 415, 691, 695, 739, 842, 845, 846, 987, 988, 990, 995, 1014, 1020, 1043, 1044, 1045, 1047, 1049], "poor_scor": 382, "poorer": [119, 362, 415], "poorest": 995, "poorli": [23, 25, 60, 76, 84, 112, 124, 222, 367, 410, 417, 529, 631, 989, 990, 1042], "poorna": [1046, 1048], "pop": [360, 392, 920, 1024, 1044], "popa": [1046, 1047], "popitem": 920, "popo": 1039, "popul": [70, 76, 78, 125, 167, 197, 236, 262, 305, 375, 389, 394, 412, 441, 491, 713, 719, 847, 848, 849, 851, 853, 855, 856, 857, 962, 993, 999, 1003, 1009], "popular": [161, 222, 375, 378, 385, 388, 392, 394, 408, 416, 417, 418, 420, 453, 463, 983, 985, 989, 991, 998, 1007, 1014, 1024, 1029], "port": [378, 397, 1046], "portabl": [403, 1013], "porter": 1013, "portfolio": [197, 215, 987], "portion": [4, 6, 79, 120, 146, 268, 366, 375, 377, 380, 386, 394, 789, 826, 843, 982, 992, 996, 1025, 1029], "portland": [410, 421, 445], "portnoi": [989, 1053], "portrait": [4, 415, 1025], "pos_class": 6, "pos_label": [227, 236, 253, 273, 394, 409, 439, 440, 699, 701, 703, 707, 708, 710, 728, 730, 731, 739, 783, 784, 785, 788, 790, 800, 872, 889, 993, 1044, 1048, 1050, 1054], "pos_lr": 262, "pos_lr_bas": 262, "pos_lr_base_std": 262, "pos_tagg": 418, "pos_vector": 418, "pos_window": 418, "pose": [201, 267, 989, 1028], "posit": [0, 2, 4, 6, 9, 10, 22, 23, 25, 65, 103, 125, 127, 132, 144, 166, 167, 181, 182, 192, 197, 198, 199, 201, 215, 221, 230, 236, 253, 256, 259, 262, 266, 268, 269, 273, 305, 316, 317, 321, 323, 351, 360, 366, 375, 379, 380, 382, 387, 389, 394, 395, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 439, 440, 443, 447, 448, 450, 465, 468, 495, 499, 501, 505, 509, 510, 511, 526, 528, 530, 531, 532, 534, 536, 537, 538, 543, 546, 547, 549, 550, 551, 558, 562, 563, 564, 565, 593, 594, 595, 596, 597, 599, 600, 601, 607, 611, 612, 621, 632, 633, 644, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 673, 674, 675, 676, 678, 681, 682, 683, 684, 685, 688, 691, 699, 701, 703, 708, 710, 713, 714, 716, 717, 719, 721, 723, 725, 728, 730, 731, 732, 736, 737, 739, 740, 741, 742, 743, 744, 745, 753, 755, 759, 767, 783, 784, 785, 788, 789, 790, 798, 799, 800, 804, 805, 828, 845, 846, 847, 849, 851, 853, 855, 857, 858, 868, 869, 872, 878, 881, 884, 889, 893, 897, 898, 900, 901, 905, 906, 909, 910, 911, 913, 915, 922, 940, 942, 958, 960, 984, 985, 989, 991, 993, 994, 996, 997, 998, 1000, 1003, 1008, 1025, 1027, 1029, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "position": 394, "positive_class": [6, 713], "positive_cod": [93, 532, 538, 543, 546, 547], "positive_dict": [93, 532, 538, 546, 547], "positive_featur": 385, "positive_likelihood_ratio": [262, 713], "posix": [367, 392], "possa": 1043, "possibl": [0, 2, 11, 15, 24, 25, 35, 47, 53, 69, 76, 93, 112, 115, 125, 127, 149, 167, 168, 169, 170, 197, 214, 215, 231, 233, 253, 259, 260, 261, 262, 264, 265, 266, 268, 269, 281, 315, 339, 346, 351, 352, 362, 366, 367, 368, 373, 374, 375, 380, 381, 382, 383, 384, 386, 388, 392, 393, 394, 397, 400, 403, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 424, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 710, 722, 723, 724, 725, 729, 743, 757, 779, 784, 786, 789, 798, 799, 800, 801, 803, 804, 805, 807, 813, 814, 815, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 923, 925, 926, 929, 934, 961, 964, 967, 982, 985, 988, 989, 990, 992, 993, 994, 995, 996, 1001, 1003, 1008, 1009, 1014, 1018, 1020, 1027, 1028, 1029, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052], "possibli": [55, 84, 146, 197, 212, 343, 352, 377, 379, 388, 403, 410, 417, 418, 452, 454, 590, 840, 841, 842, 843, 844, 910, 911, 913, 914, 915, 916, 982, 985, 990, 996, 1003, 1051], "post": [5, 13, 17, 68, 145, 146, 164, 227, 251, 263, 266, 276, 278, 319, 323, 329, 351, 352, 353, 355, 360, 361, 366, 375, 379, 380, 384, 385, 393, 404, 410, 449, 489, 490, 497, 501, 552, 562, 659, 701, 703, 713, 719, 733, 743, 785, 788, 800, 801, 817, 823, 828, 831, 866, 885, 903, 913, 993, 1009, 1015, 1017, 1018, 1029, 1031, 1047], "post1": 1034, "poster": [351, 379, 380, 1028], "posterior": [55, 148, 149, 150, 155, 159, 164, 176, 253, 259, 273, 415, 420, 550, 551, 553, 611, 612, 614, 615, 616, 620, 623, 624, 628, 645, 646, 709, 798, 800, 823, 987, 1013, 1015, 1042, 1045], "posteriori": [989, 995], "postfit_hook": 5, "postpon": [382, 384], "postprocess": [22, 407, 536, 542], "postprocessor": 1047, "postscript": 917, "potenti": [2, 25, 53, 76, 125, 162, 166, 168, 176, 253, 289, 290, 299, 321, 322, 343, 353, 366, 367, 378, 394, 397, 400, 409, 410, 414, 417, 418, 469, 483, 484, 485, 486, 497, 525, 550, 558, 559, 562, 563, 565, 566, 574, 607, 612, 635, 764, 823, 895, 896, 903, 913, 914, 915, 916, 999, 1007, 1009, 1013, 1029, 1039, 1046, 1047, 1050, 1053, 1054], "poughon": 1043, "poundal": 68, "pour": 993, "pourbozorg": [1044, 1045, 1046], "pow": [677, 678, 679, 862, 863], "powel": [4, 375], "power": [2, 5, 15, 115, 120, 166, 198, 215, 249, 262, 267, 287, 305, 306, 309, 326, 336, 366, 367, 393, 407, 410, 413, 416, 417, 418, 421, 445, 483, 484, 485, 533, 536, 542, 545, 631, 681, 695, 725, 748, 750, 753, 847, 848, 855, 856, 858, 859, 880, 881, 882, 893, 894, 941, 942, 989, 990, 993, 1001, 1003, 1007, 1008, 1018, 1039, 1042, 1044, 1046, 1047, 1049, 1053], "power_iter": 15, "power_iteration_norm": [405, 542, 545, 941, 942, 1050], "power_t": [677, 678, 679, 862, 863, 1007], "power_transform": [881, 894, 1044], "powers_": 880, "powershel": 378, "powertransform": [309, 882, 893, 983, 1003, 1044, 1047, 1050, 1052], "pox": 278, "poznik": [1049, 1050, 1051], "pp": [0, 61, 146, 258, 377, 410, 412, 418, 421, 422, 445, 449, 453, 463, 512, 534, 535, 542, 591, 636, 644, 665, 686, 687, 721, 727, 731, 741, 757, 770, 784, 840, 842, 844, 861, 881, 893, 986, 993, 995, 996, 1006], "pp2013": 985, "pp84": 420, "ppc64le": 388, "ppf": 259, "ppm": 154, "pprint": [15, 122, 233, 260, 375, 937], "pq": 320, "pr": [0, 132, 367, 380, 383, 388, 418, 742, 993, 1017, 1046, 1048], "pr_displai": 227, "pr_number": 388, "prabakaran": [1044, 1045, 1048, 1050, 1051], "prabhakar": 415, "practic": [25, 51, 69, 78, 84, 96, 115, 119, 120, 125, 149, 166, 167, 173, 181, 199, 226, 232, 260, 267, 289, 290, 317, 339, 343, 367, 369, 380, 382, 383, 386, 388, 393, 394, 410, 412, 414, 415, 416, 417, 418, 420, 448, 453, 463, 522, 525, 590, 633, 634, 671, 798, 844, 898, 905, 982, 983, 987, 989, 992, 993, 994, 995, 996, 999, 1000, 1003, 1013, 1014, 1016, 1018, 1020, 1029, 1030, 1031, 1038, 1042, 1044, 1046, 1048], "practicalswift": 1042, "practis": 202, "practition": [113, 201], "pradeep": [1044, 1045], "pragmat": 380, "prakash": [1041, 1043, 1049], "pramod": 1050, "pranayanchuri": 1049, "prang": 381, "prasanth": 1051, "pratama": 1047, "pratap": [1040, 1043, 1050], "prathmesh": 1045, "pratik": 1043, "pratiqu": 377, "pravar": 1044, "pravarmahajan": [1043, 1044], "pre": [3, 69, 167, 186, 305, 353, 369, 378, 380, 394, 397, 409, 412, 414, 415, 417, 418, 419, 421, 422, 444, 445, 448, 460, 534, 536, 691, 713, 764, 868, 910, 993, 998, 1003, 1008, 1009, 1013, 1014, 1031, 1039, 1044, 1050, 1054], "pre_dispatch": [801, 807, 815, 824, 826, 827, 828, 829, 832, 959, 1039], "preambl": 53, "prec": [80, 227, 528, 993], "prec_": 80, "prec_macro": 414, "preced": [367, 380, 488, 993, 1036], "precipit": 407, "precis": [4, 11, 23, 30, 68, 73, 80, 93, 143, 155, 156, 164, 173, 227, 251, 252, 253, 257, 276, 302, 305, 326, 327, 380, 382, 394, 406, 407, 408, 409, 410, 412, 415, 417, 444, 470, 471, 472, 473, 474, 475, 476, 477, 479, 505, 524, 533, 535, 542, 545, 645, 646, 647, 649, 651, 652, 653, 655, 656, 657, 670, 673, 675, 681, 683, 684, 688, 700, 701, 707, 708, 709, 714, 728, 730, 731, 732, 740, 742, 764, 783, 784, 785, 788, 789, 798, 799, 823, 831, 834, 845, 846, 851, 866, 885, 889, 905, 910, 917, 919, 942, 987, 989, 996, 997, 1008, 1015, 1025, 1029, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "precision_": [10, 80, 470, 471, 472, 473, 474, 475, 476, 477], "precision_macro": [414, 1024], "precision_recall_curv": [227, 266, 701, 707, 708, 728, 993, 1037, 1038, 1042, 1049, 1050, 1052, 1054], "precision_recall_fscore_support": [714, 730, 731, 785, 788, 993, 1040, 1044, 1046, 1052], "precision_scor": [23, 253, 266, 709, 788, 993, 1036, 1038, 1039, 1040, 1041, 1046, 1052], "precision_threshold": 257, "precisionrecalldisplai": [253, 266, 318, 783, 785, 788, 993, 1046, 1049, 1052, 1053, 1054], "precisions_": [798, 799], "precisions_cholesky_": [798, 799, 1050], "precisions_init": [799, 1050, 1052], "precompil": 378, "precomput": [92, 93, 94, 104, 164, 175, 196, 216, 221, 233, 283, 285, 295, 382, 389, 392, 394, 410, 418, 421, 433, 441, 442, 445, 446, 447, 451, 453, 458, 466, 472, 483, 484, 485, 525, 532, 536, 538, 541, 542, 543, 549, 555, 557, 559, 561, 563, 566, 569, 571, 611, 612, 621, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 682, 683, 685, 686, 689, 691, 692, 693, 697, 775, 779, 782, 793, 794, 838, 839, 847, 848, 849, 851, 852, 853, 855, 856, 857, 863, 906, 907, 908, 909, 910, 911, 914, 916, 969, 970, 971, 985, 989, 991, 996, 1008, 1014, 1015, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "precompute_dist": [1040, 1047], "precompute_gram": 1038, "precomputed_nearest_neighbor": [453, 692], "precondit": [410, 453, 463, 696, 1009, 1052], "pred": [2, 5, 9, 11, 30, 347, 351, 375, 649, 670, 681, 698, 703, 707, 719, 730, 731, 739, 784, 785, 788, 789, 993], "pred1": 133, "pred2": 133, "pred3": 133, "pred4": 133, "pred_background": 9, "pred_decis": [736, 993, 1049], "pred_entropi": [326, 327], "pred_nam": [4, 1025], "pred_ort": 403, "pred_scor": 5, "pred_test": 9, "pred_typ": 8, "predecessor": [109, 451, 456, 457, 458, 1053], "predecessor_": [451, 458], "predecessor_correct": [451, 457], "predefin": [263, 814, 982, 996, 1024, 1051, 1053], "predefinedsplit": [414, 1024, 1040], "predetermin": [410, 990], "predict": [1, 4, 5, 6, 9, 14, 21, 23, 24, 25, 28, 30, 32, 35, 42, 46, 54, 55, 56, 60, 68, 69, 70, 71, 73, 83, 103, 107, 108, 109, 111, 112, 113, 115, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 137, 138, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 168, 169, 170, 173, 176, 179, 180, 181, 189, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 214, 215, 226, 227, 229, 231, 233, 235, 244, 245, 246, 247, 248, 249, 251, 252, 257, 259, 261, 262, 265, 268, 269, 273, 274, 276, 278, 281, 286, 289, 290, 291, 294, 295, 302, 305, 306, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 327, 329, 330, 331, 335, 336, 338, 339, 343, 345, 346, 347, 351, 352, 357, 358, 359, 360, 362, 365, 367, 369, 372, 375, 377, 380, 382, 387, 389, 394, 396, 400, 403, 404, 405, 407, 408, 410, 411, 413, 415, 417, 418, 419, 424, 427, 432, 433, 438, 439, 440, 441, 443, 444, 445, 448, 449, 450, 466, 470, 483, 484, 485, 488, 502, 509, 525, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 583, 594, 595, 603, 607, 611, 612, 614, 615, 616, 617, 623, 626, 628, 629, 631, 632, 633, 634, 635, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 715, 716, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 739, 742, 743, 744, 747, 749, 751, 753, 757, 783, 784, 785, 786, 787, 788, 789, 790, 794, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 855, 856, 862, 863, 865, 872, 885, 886, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 967, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1029, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "predict_ecoc": 1040, "predict_joint_log_proba": [840, 841, 842, 843, 844, 1051], "predict_log_proba": [382, 394, 550, 551, 552, 554, 556, 558, 560, 565, 594, 595, 659, 660, 677, 800, 801, 804, 805, 815, 823, 826, 836, 840, 841, 842, 843, 844, 862, 865, 902, 907, 910, 913, 915, 1008, 1036, 1049, 1053], "predict_ovo": 1040, "predict_ovr": 1040, "predict_param": [233, 466, 568, 569, 1049], "predict_proba": [22, 23, 24, 25, 28, 32, 128, 132, 146, 150, 151, 152, 153, 253, 268, 273, 281, 299, 307, 310, 315, 317, 323, 351, 382, 387, 394, 407, 408, 409, 417, 438, 439, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 594, 595, 611, 620, 621, 623, 624, 632, 633, 634, 659, 660, 677, 699, 701, 703, 723, 742, 743, 789, 798, 799, 800, 801, 804, 805, 815, 823, 826, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 855, 862, 865, 872, 900, 901, 902, 907, 910, 913, 915, 989, 993, 995, 997, 1000, 1006, 1007, 1008, 1009, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "predict_proba_ovr": 1040, "predicted_label": [326, 327], "prediction_df": 125, "prediction_perform": 5, "prediction_performance_comput": 5, "prediction_performance_label": 5, "prediction_pow": 5, "prediction_tim": [5, 6], "prediction_titl": [4, 1025], "predictionerrordisplai": [2, 11, 73, 130, 167, 255, 320, 993, 1051, 1053], "predictions_kr": 149, "predictive_analyt": 1009, "predictive_word": 351, "predictor": [73, 108, 110, 119, 133, 134, 161, 164, 197, 215, 228, 236, 255, 382, 393, 394, 411, 413, 414, 417, 420, 467, 468, 483, 484, 485, 497, 517, 518, 519, 556, 557, 563, 566, 569, 603, 611, 631, 633, 634, 649, 654, 658, 670, 674, 681, 702, 826, 828, 837, 838, 865, 866, 878, 879, 885, 967, 989, 994, 1015, 1037, 1043, 1046], "predispatch": [807, 824, 829, 832], "predit": 84, "predomin": [382, 1037], "prefer": [36, 42, 53, 125, 249, 268, 305, 362, 366, 367, 368, 380, 381, 382, 394, 410, 414, 415, 417, 418, 441, 455, 472, 473, 479, 488, 509, 510, 628, 633, 634, 655, 659, 660, 702, 727, 729, 743, 758, 759, 836, 854, 880, 905, 906, 947, 959, 982, 985, 987, 989, 993, 998, 1008, 1009, 1013, 1017, 1027, 1037, 1043, 1045, 1049, 1050, 1053], "prefetch": 959, "prefit": [24, 253, 394, 407, 409, 419, 438, 568, 569, 598, 823, 1014, 1048, 1049, 1050], "prefix": [15, 68, 260, 285, 315, 380, 384, 386, 388, 420, 426, 443, 444, 446, 448, 450, 465, 468, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 807, 829, 849, 854, 857, 861, 864, 865, 871, 897, 898, 1042, 1043, 1049, 1051, 1054], "prein": [0, 370, 1048, 1049, 1050], "preiss": 1049, "preliminari": 463, "prematur": 1049, "prepar": [198, 233, 351, 366, 382, 383, 386, 388, 1009, 1018, 1044, 1052], "prepend": [167, 1036], "preprint": 377, "preprocess": [2, 3, 4, 8, 25, 29, 40, 42, 47, 51, 53, 56, 60, 68, 69, 70, 71, 73, 84, 93, 103, 114, 119, 142, 144, 146, 154, 158, 169, 173, 176, 178, 185, 186, 188, 197, 198, 203, 213, 215, 219, 227, 228, 237, 240, 253, 256, 266, 268, 273, 274, 286, 291, 292, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 323, 330, 339, 342, 352, 368, 369, 372, 374, 377, 380, 385, 393, 394, 403, 405, 406, 410, 411, 414, 417, 418, 419, 465, 466, 467, 468, 490, 568, 582, 583, 589, 590, 592, 631, 659, 660, 673, 675, 677, 679, 688, 834, 865, 866, 905, 906, 907, 908, 910, 911, 983, 989, 994, 997, 1004, 1007, 1008, 1010, 1013, 1015, 1017, 1018, 1020, 1025, 1026, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1055], "preprocessor": [69, 130, 167, 197, 228, 236, 238, 311, 316, 318, 319, 320, 322, 411, 418, 589, 590, 592, 1013, 1029, 1036, 1039, 1044, 1046], "preprocessor__cat__selector__percentil": 69, "preprocessor__num__imputer__strategi": 69, "preprocessor_list": 236, "prescrib": 394, "presenc": [7, 58, 60, 78, 79, 107, 166, 170, 181, 201, 236, 305, 378, 381, 394, 412, 415, 713, 727, 757, 770, 834, 868, 876, 878, 885, 977, 983, 989, 993, 994, 1007, 1017, 1039, 1040, 1042, 1046, 1048, 1050], "present": [2, 3, 11, 41, 47, 90, 93, 100, 114, 115, 122, 125, 126, 145, 146, 155, 158, 176, 179, 181, 186, 197, 226, 229, 233, 248, 253, 257, 262, 265, 268, 269, 283, 305, 308, 310, 352, 377, 378, 382, 385, 392, 394, 400, 410, 412, 415, 417, 418, 428, 429, 432, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 490, 491, 492, 493, 497, 501, 502, 503, 504, 505, 506, 511, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 550, 551, 562, 563, 564, 567, 570, 571, 582, 583, 584, 589, 590, 592, 618, 628, 629, 630, 631, 651, 655, 678, 689, 690, 691, 692, 713, 730, 731, 739, 770, 784, 785, 788, 798, 799, 801, 804, 805, 813, 815, 829, 847, 848, 849, 851, 853, 855, 856, 857, 864, 869, 877, 878, 879, 880, 881, 883, 886, 897, 898, 909, 917, 919, 920, 942, 977, 992, 993, 994, 995, 1000, 1003, 1012, 1014, 1039, 1044, 1046, 1047, 1048, 1050, 1051, 1053], "preserv": [2, 46, 98, 222, 230, 254, 382, 383, 408, 414, 415, 417, 418, 582, 589, 590, 592, 647, 653, 697, 743, 775, 779, 819, 820, 821, 889, 925, 926, 983, 989, 990, 1003, 1005, 1013, 1024, 1028, 1036, 1039, 1040, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054], "preserves_dtyp": 382, "preservs": 1050, "preset": [667, 669, 677, 997], "presort": [1041, 1046], "press": [375, 410, 415, 420, 421, 445, 591, 611, 612, 615, 620, 623, 644, 840, 844, 986, 989, 991, 995], "pressur": [146, 377, 1027], "preston": [1041, 1042, 1043], "presum": [167, 281, 410, 418, 840], "prettenhof": [0, 9, 121, 123, 124, 260, 351, 352, 399, 1036, 1037, 1038, 1039, 1040, 1041], "pretti": [168, 222, 257, 351, 366, 380, 392, 862, 863, 997, 1045], "preuss": 1052, "prev_scor": 15, "preval": [109, 315, 394, 701, 713, 993], "prevalence_pos_label": [266, 701], "prevent": [2, 53, 120, 122, 143, 166, 198, 201, 305, 311, 312, 339, 351, 356, 362, 380, 382, 384, 392, 393, 403, 410, 415, 418, 443, 450, 489, 490, 562, 563, 591, 592, 612, 729, 786, 862, 863, 890, 891, 893, 894, 895, 896, 993, 995, 998, 999, 1003, 1009, 1027, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "previou": [2, 41, 51, 69, 93, 112, 119, 120, 122, 130, 149, 154, 155, 166, 167, 168, 181, 183, 198, 230, 232, 233, 253, 259, 262, 266, 305, 310, 319, 351, 352, 353, 362, 366, 375, 380, 382, 385, 386, 388, 392, 394, 395, 397, 409, 410, 417, 418, 469, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 631, 647, 649, 653, 654, 659, 661, 663, 667, 668, 669, 670, 677, 678, 679, 681, 708, 820, 836, 839, 854, 862, 863, 902, 919, 989, 993, 997, 1003, 1014, 1020, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "previous": [5, 51, 55, 69, 109, 155, 167, 253, 257, 266, 273, 319, 375, 388, 392, 397, 410, 415, 418, 441, 444, 455, 525, 535, 542, 650, 659, 660, 667, 668, 669, 677, 678, 679, 905, 961, 989, 1003, 1013, 1033, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "previous_loss": [667, 668, 669, 678], "previs": 227, "price": [10, 73, 119, 120, 125, 130, 236, 311, 983, 989, 1018, 1025], "priceless": 380, "prieur": 1049, "primal": [659, 660, 678, 905, 906, 1007, 1008], "primari": [382, 394, 415, 516, 1000, 1017, 1018], "primarili": [249, 264, 380, 394, 405, 410, 951, 1018, 1045, 1046], "primat": 351, "primdal": 1044, "primit": 1051, "princ": 1049, "princip": [1, 14, 82, 83, 85, 88, 95, 97, 98, 99, 101, 128, 164, 218, 231, 234, 292, 310, 317, 372, 410, 413, 422, 485, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 551, 658, 689, 690, 691, 693, 694, 831, 854, 866, 885, 941, 942, 990, 996, 1015, 1030, 1031, 1036], "principl": [109, 156, 288, 353, 380, 392, 394, 395, 414, 417, 942, 982, 992, 996, 1007, 1043], "print": [2, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 19, 22, 24, 28, 30, 36, 40, 41, 44, 45, 46, 47, 48, 50, 51, 56, 58, 59, 61, 65, 68, 69, 71, 72, 73, 78, 83, 84, 90, 93, 96, 100, 101, 103, 109, 112, 115, 116, 117, 118, 119, 121, 123, 125, 136, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 166, 168, 169, 170, 173, 181, 182, 183, 184, 188, 189, 192, 193, 197, 199, 200, 201, 204, 205, 212, 213, 215, 219, 220, 223, 228, 230, 232, 233, 236, 240, 246, 252, 253, 257, 258, 259, 260, 262, 264, 267, 268, 272, 283, 287, 294, 296, 300, 301, 302, 307, 310, 312, 315, 316, 317, 319, 321, 322, 323, 326, 327, 330, 339, 351, 352, 353, 356, 360, 362, 366, 374, 375, 378, 381, 382, 388, 394, 400, 403, 411, 414, 417, 418, 420, 465, 468, 469, 473, 479, 491, 495, 503, 513, 514, 542, 545, 550, 551, 560, 561, 562, 563, 565, 566, 570, 571, 578, 584, 585, 586, 588, 589, 590, 592, 613, 618, 619, 631, 647, 648, 650, 651, 653, 654, 655, 657, 661, 662, 663, 664, 667, 668, 677, 678, 685, 697, 714, 718, 738, 796, 798, 799, 800, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 832, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 875, 881, 885, 893, 903, 904, 905, 906, 907, 910, 912, 918, 924, 929, 954, 961, 977, 983, 993, 994, 995, 996, 1001, 1009, 1020, 1024, 1025, 1027, 1028, 1029, 1036, 1038, 1044, 1045, 1047, 1051], "print_changed_onli": [469, 903, 1045, 1047, 1048], "print_datafram": 257, "print_progress": 959, "print_rout": 233, "printabl": 1017, "prior": [1, 5, 14, 15, 44, 45, 55, 63, 64, 65, 90, 148, 149, 150, 155, 159, 162, 164, 169, 176, 178, 181, 242, 244, 248, 249, 250, 253, 259, 270, 293, 380, 382, 384, 394, 397, 400, 410, 413, 415, 417, 420, 466, 524, 537, 549, 550, 551, 552, 560, 612, 614, 615, 616, 620, 623, 624, 631, 645, 646, 647, 648, 652, 653, 655, 656, 657, 661, 662, 663, 673, 679, 682, 717, 798, 840, 841, 842, 843, 844, 865, 866, 880, 907, 910, 960, 982, 985, 987, 989, 992, 993, 995, 1001, 1009, 1010, 1015, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1052], "prior_k": 550, "priori": [197, 214, 268, 281, 305, 394, 410, 417, 589, 595, 992, 1052], "priorit": [409, 1014, 1043], "prioriti": [379, 633, 833, 834, 1014, 1039], "priors_": [550, 551], "privaci": 1013, "privat": [0, 384, 394, 395, 921, 1018, 1036, 1044, 1046, 1047, 1049, 1050], "privileg": [236, 388], "priyam": 1051, "prng": [80, 1028], "proanthocyanin": 377, "prob_pos_clf": 22, "prob_pos_isoton": 22, "prob_pos_sigmoid": 22, "prob_pr": [439, 440], "prob_tru": [439, 440], "proba": [23, 25, 132, 438, 913, 915], "proba_": [907, 910, 1047], "proba_map": 53, "proba_neg_class": [23, 25], "proba_pos_class": [23, 25], "probabilist": [13, 24, 25, 28, 76, 80, 92, 93, 102, 103, 104, 148, 149, 152, 155, 156, 159, 164, 232, 351, 394, 407, 416, 417, 438, 474, 477, 533, 535, 536, 542, 560, 589, 590, 611, 623, 644, 646, 677, 704, 742, 801, 827, 872, 907, 908, 910, 911, 986, 987, 989, 992, 993, 998, 1003, 1008, 1009, 1013, 1015, 1018, 1036, 1039, 1043], "probabilisticpca": [1036, 1039], "probabilities_": [53, 447], "probabilities_or_label": 570, "probabl": [0, 11, 21, 25, 26, 27, 32, 33, 53, 73, 89, 90, 108, 125, 131, 134, 141, 148, 149, 150, 151, 159, 164, 167, 188, 189, 209, 212, 213, 218, 222, 227, 229, 230, 253, 259, 261, 262, 265, 266, 269, 273, 278, 281, 302, 305, 309, 315, 317, 323, 329, 331, 345, 346, 366, 369, 375, 376, 382, 386, 392, 394, 409, 410, 414, 415, 418, 419, 420, 436, 437, 438, 439, 440, 447, 448, 450, 505, 513, 516, 524, 528, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 571, 594, 595, 611, 614, 615, 623, 628, 632, 633, 634, 659, 660, 672, 677, 693, 699, 701, 703, 704, 707, 708, 710, 713, 717, 721, 723, 727, 728, 730, 740, 741, 742, 743, 757, 783, 785, 788, 789, 790, 795, 798, 799, 800, 801, 804, 805, 815, 823, 830, 831, 834, 836, 837, 840, 841, 842, 843, 844, 847, 850, 855, 861, 862, 886, 898, 899, 900, 901, 902, 905, 907, 910, 913, 915, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1007, 1009, 1014, 1015, 1016, 1029, 1031, 1036, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "probable_clust": 54, "probas_pr": [783, 1054], "probb_": [907, 910, 1047], "probe": 1001, "probinette4": 1048, "probl": [608, 609], "problem": [1, 2, 3, 4, 9, 11, 12, 13, 24, 35, 52, 53, 55, 64, 93, 109, 112, 115, 117, 122, 123, 149, 164, 169, 173, 176, 181, 183, 186, 190, 191, 197, 199, 201, 214, 215, 220, 226, 227, 234, 236, 239, 257, 259, 264, 268, 269, 273, 274, 278, 281, 283, 288, 295, 309, 318, 322, 323, 336, 339, 343, 346, 347, 351, 352, 360, 362, 366, 375, 376, 377, 378, 379, 381, 382, 385, 386, 389, 392, 394, 407, 408, 409, 410, 412, 414, 416, 417, 418, 419, 420, 421, 422, 445, 448, 450, 451, 453, 458, 463, 466, 479, 504, 509, 510, 516, 517, 518, 519, 524, 525, 529, 532, 534, 538, 540, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 562, 565, 568, 572, 574, 590, 611, 632, 644, 649, 651, 653, 655, 656, 657, 658, 659, 660, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 680, 681, 686, 687, 688, 689, 690, 692, 694, 696, 709, 717, 730, 731, 736, 739, 740, 784, 785, 788, 789, 798, 799, 802, 803, 804, 805, 806, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 825, 833, 834, 835, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 871, 872, 878, 886, 889, 895, 896, 905, 906, 913, 915, 931, 942, 983, 984, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1001, 1003, 1007, 1010, 1014, 1016, 1018, 1021, 1022, 1023, 1029, 1030, 1031, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "problemat": [2, 167, 253, 255, 411, 983, 1044], "proc": [25, 77, 407, 418, 451, 690, 694, 840, 982, 990, 995, 999], "proce": [48, 143, 178, 378, 384, 413, 414, 417, 441, 989], "procedur": [44, 54, 115, 122, 146, 177, 185, 248, 261, 308, 312, 339, 351, 362, 380, 382, 392, 393, 394, 395, 407, 408, 412, 414, 415, 417, 419, 532, 538, 539, 541, 546, 547, 548, 554, 555, 556, 557, 560, 561, 594, 596, 603, 610, 645, 673, 675, 688, 729, 786, 862, 863, 882, 894, 964, 982, 989, 995, 1003, 1006, 1007, 1008, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "proceed": [78, 146, 375, 377, 410, 421, 440, 445, 512, 697, 709, 727, 757, 852, 902, 993, 1005, 1006, 1007], "process": [0, 2, 3, 6, 17, 24, 28, 29, 32, 43, 44, 45, 46, 48, 54, 55, 64, 68, 70, 72, 77, 79, 89, 94, 95, 97, 107, 109, 118, 120, 122, 127, 128, 136, 137, 138, 159, 166, 176, 179, 199, 201, 207, 208, 209, 210, 232, 233, 234, 236, 243, 244, 247, 249, 253, 259, 261, 262, 271, 278, 299, 305, 307, 308, 312, 317, 321, 327, 331, 343, 344, 348, 352, 353, 356, 366, 367, 368, 369, 375, 379, 380, 382, 384, 386, 389, 392, 393, 394, 403, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 449, 450, 476, 497, 505, 524, 535, 536, 537, 538, 539, 562, 563, 564, 589, 590, 592, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 633, 634, 640, 644, 665, 673, 686, 687, 704, 724, 742, 782, 798, 800, 801, 804, 805, 815, 823, 826, 827, 828, 837, 838, 854, 868, 872, 874, 875, 876, 885, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 959, 961, 982, 985, 989, 993, 996, 1003, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1028, 1029, 1031, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "process_rout": [233, 1053], "processor": [69, 130, 167, 369, 421, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 847, 848, 851, 853, 855, 856, 858, 859, 864, 867, 900, 901], "procter": 10, "prod": [352, 622], "prod_": 995, "prod_i": 985, "proding": 1052, "produc": [11, 12, 23, 24, 42, 55, 68, 96, 122, 123, 124, 126, 181, 265, 302, 329, 362, 367, 375, 376, 380, 382, 385, 394, 395, 410, 411, 414, 415, 417, 441, 444, 447, 453, 520, 537, 560, 564, 582, 589, 594, 595, 633, 634, 803, 804, 805, 813, 818, 821, 826, 870, 880, 907, 910, 984, 985, 989, 991, 992, 993, 996, 999, 1000, 1004, 1006, 1007, 1008, 1020, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "product": [18, 69, 93, 131, 149, 154, 168, 343, 362, 366, 382, 383, 386, 389, 406, 415, 417, 452, 539, 541, 548, 583, 590, 591, 592, 614, 615, 634, 641, 665, 666, 686, 687, 762, 764, 776, 778, 877, 880, 897, 898, 943, 982, 985, 989, 991, 1003, 1005, 1007, 1008, 1013, 1018, 1031, 1044], "production": 1018, "prof": 386, "profession": 167, "professor": 1018, "profil": [197, 366, 380, 383, 522, 525, 989, 1018], "profile_default": 386, "profit": [0, 253, 1053], "prog": [146, 377], "prognosi": [146, 377], "program": [0, 48, 146, 352, 362, 367, 368, 377, 378, 380, 382, 386, 392, 509, 636, 671, 895, 896, 989, 1008, 1009, 1013, 1014, 1017, 1036, 1038], "programmat": [382, 500, 1045], "progress": [2, 5, 6, 93, 133, 146, 162, 190, 288, 319, 377, 380, 384, 385, 395, 400, 405, 410, 560, 561, 693, 834, 836, 839, 854, 862, 863, 1018, 1027, 1029, 1036, 1038, 1045, 1050], "prohibit": [166, 236, 414, 417, 628, 998, 1006, 1043], "proj": [12, 650], "proj_gradi": 386, "proj_oper": 12, "project": [4, 6, 9, 12, 15, 31, 43, 53, 56, 65, 88, 92, 93, 95, 97, 99, 103, 104, 111, 153, 155, 157, 158, 164, 168, 189, 194, 206, 218, 219, 220, 222, 225, 231, 234, 241, 244, 254, 287, 292, 296, 302, 336, 344, 352, 357, 366, 369, 372, 374, 378, 379, 380, 385, 386, 389, 394, 395, 397, 406, 413, 415, 416, 422, 441, 447, 452, 453, 463, 475, 483, 484, 485, 486, 490, 503, 505, 532, 534, 535, 536, 538, 540, 542, 543, 544, 545, 549, 550, 574, 583, 590, 642, 643, 650, 673, 675, 689, 692, 696, 697, 835, 854, 882, 897, 898, 899, 941, 942, 987, 989, 990, 991, 994, 996, 997, 999, 1006, 1009, 1011, 1015, 1018, 1020, 1025, 1028, 1031, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "projected_data": 230, "projected_dist": 230, "projectedgradientnmf": 1041, "prokopi": [1041, 1044], "prolifer": 382, "prolin": [17, 310, 377], "promin": [96, 394], "promis": [394, 1014], "promot": [167, 443, 709, 1013, 1047, 1049, 1053], "prompt": [378, 380, 397, 402, 418, 1020], "prone": [25, 197, 245, 309, 392, 407], "pronounc": [37, 38, 50, 154], "proof": [392, 417, 899, 1005], "prop": [71, 79, 203, 245, 289, 338, 360, 1025], "propag": [18, 30, 34, 35, 47, 53, 61, 62, 66, 87, 144, 164, 235, 325, 332, 375, 408, 441, 455, 503, 513, 515, 698, 705, 706, 714, 715, 718, 719, 738, 794, 796, 865, 879, 900, 901, 902, 959, 960, 997, 1015, 1016, 1030, 1031, 1036, 1048, 1051], "proper": [25, 53, 186, 215, 368, 382, 386, 407, 417, 450, 542, 554, 677, 942, 968, 988, 989, 990, 993, 1008, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "properli": [2, 11, 23, 53, 127, 154, 254, 315, 368, 378, 380, 384, 388, 416, 905, 906, 907, 908, 909, 910, 911, 982, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "properti": [10, 23, 156, 157, 199, 214, 244, 285, 310, 360, 366, 369, 373, 380, 382, 397, 406, 407, 410, 412, 415, 417, 419, 420, 425, 443, 446, 452, 453, 454, 465, 466, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 594, 595, 598, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 633, 647, 653, 656, 661, 663, 675, 676, 700, 705, 706, 709, 800, 801, 804, 805, 815, 823, 833, 834, 864, 865, 878, 879, 880, 886, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 985, 988, 989, 990, 993, 994, 996, 999, 1003, 1006, 1008, 1009, 1010, 1014, 1020, 1041, 1045, 1046, 1049, 1050, 1053, 1054], "property_magnitud": 253, "propon": 68, "proport": [13, 24, 38, 125, 145, 183, 197, 204, 210, 226, 236, 253, 262, 286, 290, 293, 346, 348, 366, 375, 407, 410, 412, 414, 415, 417, 418, 439, 440, 447, 470, 475, 516, 550, 551, 556, 558, 560, 561, 562, 563, 564, 565, 584, 585, 589, 592, 628, 633, 659, 660, 667, 668, 669, 675, 676, 677, 679, 697, 702, 713, 723, 802, 803, 804, 805, 818, 821, 831, 851, 862, 863, 879, 905, 906, 907, 910, 911, 913, 915, 917, 919, 931, 982, 992, 993, 996, 999, 1007, 1008, 1009, 1041, 1053], "propos": [55, 76, 77, 283, 375, 380, 382, 392, 394, 410, 412, 417, 422, 423, 451, 476, 536, 608, 609, 677, 678, 679, 862, 863, 989, 992, 996, 1007, 1011, 1043], "proprietari": 1009, "propto": [416, 995], "prorokovi\u0107": 1054, "protect": [381, 384, 959], "protein": 374, "protocol": [403, 993, 1039, 1052, 1053], "protocol_typ": 236, "prototyp": 1018, "prove": [94, 1018], "proven": [259, 987, 991, 1018], "provenc": 311, "provid": [0, 3, 6, 9, 11, 22, 25, 28, 32, 35, 40, 53, 58, 79, 93, 111, 116, 117, 125, 128, 130, 149, 155, 167, 168, 176, 183, 185, 186, 189, 198, 201, 206, 219, 223, 227, 228, 233, 248, 253, 259, 260, 261, 265, 293, 296, 301, 305, 309, 315, 316, 318, 320, 337, 343, 344, 346, 351, 352, 356, 357, 360, 362, 366, 368, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 392, 393, 394, 396, 397, 400, 403, 405, 406, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 424, 431, 438, 441, 443, 444, 445, 447, 448, 450, 451, 453, 460, 461, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 494, 495, 497, 499, 502, 533, 534, 535, 536, 539, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 594, 595, 602, 606, 611, 612, 628, 633, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 691, 695, 700, 712, 723, 736, 742, 743, 765, 775, 779, 789, 793, 795, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 862, 863, 865, 868, 870, 871, 872, 875, 876, 877, 880, 882, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 931, 936, 950, 952, 969, 970, 971, 982, 983, 985, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1020, 1024, 1027, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "provinc": 311, "provost": [789, 993], "proxi": [166, 167, 415, 861, 1024, 1041], "prun": 386, "prune": [164, 355, 360, 361, 419, 501, 558, 559, 560, 561, 565, 566, 594, 645, 831, 913, 914, 915, 916, 996, 1015, 1016, 1031, 1036, 1039, 1046, 1047], "przybocki": 993, "ps_lsvm_score": 173, "ps_lsvm_time": 173, "pseudo": [198, 302, 382, 414, 422, 441, 453, 455, 463, 470, 471, 472, 474, 475, 476, 477, 534, 562, 563, 564, 628, 635, 640, 642, 643, 647, 648, 653, 654, 661, 662, 663, 664, 678, 692, 696, 804, 805, 813, 815, 854, 861, 897, 898, 902, 905, 906, 907, 910, 941, 942, 989, 1005, 1041, 1050], "pseudo_likelihood": 861, "pseudocount": [537, 1044], "psf": [0, 380], "psi": 415, "psi_1": 415, "psi_2": 415, "psi_n": 415, "pspachtholz": [1046, 1047, 1048], "psycholog": [410, 706, 717], "psychometrica": 636, "psychometrika": [691, 695, 990], "pt": [9, 375, 419, 881, 1003], "pt_i": 293, "pt_j": 293, "ptocca": 1046, "ptp": 10, "pts_": 9, "pts_test": 9, "pts_train": 9, "pub": [223, 843, 900], "public": [0, 77, 374, 380, 382, 384, 385, 392, 393, 394, 395, 414, 417, 469, 665, 672, 686, 687, 693, 903, 989, 997, 1036, 1041, 1042, 1047, 1048, 1049, 1052], "publica": 1011, "publicli": [380, 1046], "publish": [374, 375, 382, 384, 388, 394, 1005, 1014, 1048], "pubu": [211, 230, 289, 338], "pubu_r": 78, "puerta": 1051, "puggioni": 1040, "puhuk": [1050, 1051], "pujalt": 1050, "pulapakura": 1053, "pulchritud": 351, "pulido": 1049, "pulkit": [1044, 1045, 1047], "pull": [68, 318, 367, 378, 383, 394, 395, 1017, 1046], "puls": 377, "punctuat": [418, 589, 590, 592], "puneet": 1043, "puneeth": 1053, "puor": 96, "puor_r": 153, "pure": [78, 79, 84, 181, 197, 394, 410, 474, 480, 497, 558, 559, 560, 561, 565, 566, 567, 706, 716, 787, 796, 913, 914, 915, 916, 1003], "pure_emp_cov": 79, "pure_loc": 79, "pure_x": 79, "purepremium": 215, "puriti": [111, 917, 919], "purna": 1050, "purpl": [76, 90, 222], "purport": 1043, "purpos": [7, 10, 35, 84, 120, 125, 161, 211, 212, 213, 218, 220, 234, 246, 248, 253, 255, 256, 339, 340, 346, 351, 352, 362, 375, 380, 382, 393, 394, 395, 397, 402, 406, 410, 411, 415, 417, 418, 419, 420, 827, 828, 865, 990, 993, 994, 996, 999, 1011, 1013, 1020, 1048, 1050, 1054], "pursu": 167, "pursuit": [52, 94, 96, 102, 164, 175, 216, 272, 415, 475, 527, 532, 538, 543, 549, 665, 666, 686, 687, 1015, 1016, 1031, 1036], "push": [25, 380, 384, 407, 1017], "pushd": 388, "put": [38, 56, 138, 149, 151, 231, 238, 243, 273, 299, 307, 319, 331, 344, 348, 368, 382, 384, 385, 388, 403, 420, 444, 448, 460, 516, 615, 648, 662, 798, 882, 886, 894, 907, 908, 909, 910, 911, 932, 983, 990, 992, 993, 994, 1000, 1003, 1021, 1023, 1029], "putnam": 1042, "putschblo": 1049, "pvalu": [593, 596, 597, 599, 600, 601, 830], "pvalue_iri": 265, "pvalue_rand": 265, "pvalues_": [142, 593, 596, 597, 599, 600, 601, 1036], "pvnguyen": 1040, "pwalchessen": 1048, "pwd": 388, "px": [115, 260], "pxd": 380, "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 367, 378, 380, 381, 384, 386, 388, 394, 397, 418, 421, 441, 445, 455, 462, 499, 531, 645, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 880, 884, 937, 993, 1008, 1013, 1015, 1027, 1029, 1036, 1038, 1042, 1046, 1050], "py3": 397, "py39": 397, "pyamg": [44, 397, 402, 410, 453, 463, 692, 696], "pyarrow": [397, 402], "pybrain": 1036, "pycon": [403, 1012], "pyd": 381, "pydata": [2, 388, 403, 1012, 1018], "pydata_2013": 1018, "pydebug": 386, "pyflak": 382, "pyfunc": [700, 996], "pyfuncdist": 700, "pymc": 1013, "pynndesc": 283, "pynndescenttransform": 283, "pyodid": [380, 961], "pyoxid": 1049, "pypi": [367, 378, 380, 382, 384, 386, 397, 1009, 1044, 1048, 1050, 1051, 1053], "pyplot": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 380, 387, 439, 503, 632, 633, 698, 699, 701, 702, 703, 807, 824, 1024, 1025, 1026, 1027, 1028, 1033, 1050], "pyplpt": 374, "pyproject": 384, "pypy3": 1044, "pysniak": 1039, "pystruct": [392, 1013], "pytabl": 374, "pytb": 388, "pytest": [315, 367, 378, 380, 382, 383, 397, 402, 405, 936, 937, 1046, 1049], "python": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 368, 374, 378, 380, 381, 382, 383, 384, 385, 388, 389, 392, 394, 397, 402, 403, 405, 411, 418, 497, 509, 510, 582, 700, 812, 879, 961, 993, 1003, 1008, 1009, 1011, 1014, 1017, 1018, 1020, 1021, 1023, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "python2": 1044, "python3": [378, 397], "python37": 397, "pythonsoftwarefound": 397, "pythonx": 378, "pytorch": [4, 392, 1013, 1014, 1025, 1052, 1053], "pytorch_enable_mps_fallback": 405, "pyx": [380, 381, 386, 388], "p\u00e9rez": 1044, "p\u00f6lsterl": [1043, 1046, 1049], "q": [10, 69, 83, 122, 197, 318, 406, 410, 415, 941, 989, 1008], "q1": 510, "q327": 377, "q_": 1008, "q_m": 1009, "q_max": [883, 895], "q_min": [883, 895], "qaiser": 1053, "qda": [29, 377, 550, 551, 1016, 1031, 1041], "qdeffens": [1046, 1049], "qemu": 388, "qi": [510, 1048], "qian": [1042, 1047], "qiang": 1040, "qianm": 1048, "qid": [488, 509, 510, 1037, 1042], "qimu": 1042, "qin": [0, 306, 377, 398, 418, 1043, 1044, 1045, 1046, 1047], "qingi": 1044, "qinhanmin2005": 306, "qizhi": 1047, "qmarcou": 1053, "qn": 510, "qp": 1008, "qr": [44, 199, 405, 535, 542, 545, 941, 942, 990, 1042, 1053], "qt": [309, 882], "qtconsol": 386, "quad": [420, 996, 1007], "quadcontourset": 632, "quadmesh": 632, "quadrant": 305, "quadrat": [2, 7, 27, 31, 33, 78, 79, 80, 154, 158, 164, 211, 236, 248, 261, 318, 408, 441, 459, 462, 550, 551, 624, 632, 649, 659, 660, 670, 677, 681, 717, 910, 911, 989, 990, 993, 996, 999, 1003, 1007, 1008, 1015, 1016, 1031, 1037], "quadraticdiscriminantanalysi": [29, 32, 550, 987, 994, 996, 1036, 1041, 1043, 1051], "quadro": 1049, "quadv": 1050, "qualifi": 385, "qualit": [3, 4, 51, 53, 59, 115, 122, 197, 320, 375, 410, 440, 702, 1025, 1051], "qualiti": [0, 4, 18, 22, 35, 44, 46, 47, 56, 96, 118, 125, 167, 203, 252, 257, 266, 267, 268, 343, 380, 388, 392, 394, 404, 408, 410, 412, 415, 453, 463, 470, 475, 558, 559, 560, 561, 565, 566, 744, 815, 897, 898, 913, 914, 915, 916, 942, 988, 990, 998, 1005, 1009, 1013, 1014, 1018, 1024, 1025, 1031], "quang": 1047, "quansight": 0, "quantifi": [2, 35, 47, 76, 154, 215, 253, 266, 382, 394, 404, 408, 574, 868, 988, 1001, 1003, 1031], "quantil": [42, 51, 61, 89, 109, 111, 164, 175, 216, 255, 305, 308, 309, 392, 417, 439, 440, 459, 520, 553, 554, 561, 563, 658, 671, 724, 746, 749, 751, 828, 870, 882, 883, 884, 894, 895, 993, 1003, 1015, 1016, 1031, 1036, 1040, 1043, 1045, 1049, 1050, 1052, 1054], "quantile_list": 11, "quantile_rang": [305, 883, 895, 1042], "quantile_regress": 199, "quantile_transform": [73, 882, 893, 1003, 1043, 1044, 1045, 1054], "quantileregressor": [318, 989, 993, 1049, 1050, 1051], "quantiles_": [882, 1003, 1046], "quantiletransform": [73, 168, 309, 411, 466, 881, 894, 983, 1003, 1043, 1044, 1045, 1046, 1047, 1052, 1054], "quantiletransformerquantiletransform": 168, "quantit": [2, 3, 4, 11, 23, 59, 122, 125, 133, 146, 255, 274, 377, 1025], "quantiti": [10, 119, 259, 266, 317, 366, 394, 410, 417, 722, 723, 724, 725, 786, 861, 982, 984, 987, 989, 1041], "quantiz": [4, 34, 44, 56, 66, 96, 164, 374, 375, 410, 444, 448, 450, 507, 780, 870, 967, 1003, 1015], "quantum": 991, "quartil": 883, "quartimax": [533, 1048], "quasi": [382, 862, 863, 989], "quazi": [1043, 1044], "queensland": 377, "quentin": [1043, 1044, 1045, 1052, 1053], "queqichao": 1040, "queri": [176, 286, 296, 366, 384, 416, 421, 445, 447, 451, 458, 553, 611, 612, 629, 645, 646, 727, 757, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 993, 996, 1009, 1013, 1017, 1038, 1040, 1041, 1044], "query_id": [488, 509, 510], "query_radiu": [845, 846], "question": [0, 136, 166, 253, 259, 346, 369, 379, 380, 385, 388, 403, 414, 417, 834, 907, 910, 989, 992, 993, 999, 1011, 1018], "queue": [6, 996, 1039], "quick": [2, 98, 239, 380, 382, 386, 397, 607, 831, 993, 994, 1003, 1018, 1027, 1033], "quicker": 992, "quickest": 378, "quickli": [37, 237, 300, 315, 377, 380, 381, 414, 417, 693, 779, 989, 996, 997, 1018, 1029, 1047], "quinlan": 1009, "quinonez": 1044, "quintana": 993, "quiroz": [35, 55, 115, 125, 176, 181, 236, 260, 262, 310, 351, 352, 353], "quit": [2, 11, 25, 51, 55, 84, 112, 136, 146, 167, 168, 195, 215, 253, 267, 278, 318, 351, 366, 385, 393, 410, 418, 988, 990, 995, 1018, 1044], "quiver": 95, "quot": [10, 11, 13, 68, 260, 351, 352, 367, 374, 375, 378, 384, 405, 408, 489, 490, 497, 993, 1005, 1008, 1029, 1051], "quota": [1049, 1050], "quotat": 375, "quotient": 993, "r": [0, 6, 8, 9, 10, 11, 12, 22, 23, 24, 25, 37, 41, 63, 73, 76, 77, 78, 79, 84, 93, 100, 103, 109, 112, 113, 118, 122, 123, 124, 133, 142, 150, 151, 152, 156, 157, 158, 161, 162, 167, 179, 181, 182, 186, 197, 204, 207, 215, 223, 229, 232, 243, 246, 249, 258, 259, 262, 264, 265, 266, 269, 272, 275, 281, 285, 286, 290, 294, 296, 311, 319, 341, 343, 353, 362, 375, 377, 381, 384, 392, 394, 403, 406, 407, 410, 412, 413, 414, 415, 417, 418, 427, 433, 438, 447, 452, 454, 466, 470, 475, 479, 483, 484, 485, 499, 505, 514, 521, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 589, 590, 591, 592, 607, 610, 611, 612, 628, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 686, 687, 693, 697, 717, 722, 723, 724, 725, 729, 731, 782, 786, 789, 800, 801, 815, 818, 823, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 855, 856, 862, 863, 876, 881, 893, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 918, 959, 983, 985, 987, 989, 990, 993, 994, 995, 996, 997, 1000, 1001, 1003, 1007, 1008, 1009, 1013, 1029, 1036, 1040, 1043, 1046, 1047, 1048, 1049, 1051, 1053], "r0": [804, 805], "r1": 571, "r11": [197, 215], "r2": [73, 110, 115, 130, 166, 168, 192, 232, 382, 411, 417, 555, 571, 674, 828, 863, 993, 1001, 1045], "r2007": 417, "r22": 197, "r25": 215, "r26": 197, "r2_score": [73, 166, 181, 192, 193, 405, 417, 433, 466, 483, 484, 485, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 725, 729, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 982, 993, 1037, 1039, 1045, 1049, 1050, 1054], "r2_score_ard": 181, "r2_score_enet": 181, "r2_score_lasso": 181, "r2_score_nnl": 192, "r2_score_ol": 192, "r2_with_abl": 166, "r2_without_": 166, "r3": 571, "r72": 197, "r73": 215, "r82": 197, "r93": 197, "r_": [9, 102, 210, 211, 244, 266, 289, 290, 338, 344, 348, 410, 708, 993, 1009], "r_0": 982, "r_k": 266, "r_multi": 1001, "r_n": [266, 708, 993], "r_regress": [419, 607, 1049, 1050, 1053], "r_squar": 393, "ra": 236, "raamana": [1044, 1045], "rabbit": [319, 321, 1003], "raccoon": [51, 96, 415], "raccoon_fac": [51, 96], "race": [167, 322, 375, 497, 1039], "race_hispan": 167, "race_oth": 167, "race_whit": 167, "rachel": [1048, 1051], "rachelcjordan": 1047, "rachez": [1041, 1042], "rachit": [1042, 1048, 1051], "rachum": 1048, "radar": 1018, "radford": 989, "radhakrishnan": 1044, "radial": [3, 98, 149, 154, 156, 339, 343, 372, 453, 623, 692, 991, 1008, 1031], "radian": [296, 700, 765], "radii": [845, 846], "radiu": [146, 275, 290, 339, 377, 410, 443, 451, 689, 765, 782, 845, 846, 847, 848, 849, 853, 855, 856, 857, 859, 996, 1038, 1040, 1050, 1053], "radius1": 64, "radius2": 64, "radius3": 64, "radius4": 64, "radius_neighbor": [319, 853, 855, 856, 857, 1040, 1045, 1046, 1048, 1049, 1050, 1051], "radius_neighbors_graph": [410, 421, 445, 847, 848, 849, 851, 853, 855, 856, 857, 858, 996, 1040, 1045, 1048], "radiusneighborsclassifi": [319, 847, 848, 853, 856, 994, 996, 1036, 1038, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "radiusneighborsregressor": [319, 847, 848, 853, 855, 994, 996, 1036, 1038, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "radiusneighborstransform": [315, 849, 996, 1046, 1048, 1050, 1051], "radostin": [1044, 1045], "raduspaimoc": 1047, "raf": 1045, "rafael": [1018, 1037, 1038, 1040, 1043], "rafal": [1051, 1052], "rafei": 1048, "raff": 1039, "raffaello": 1045, "rafiqu": [1044, 1045], "raghav": [0, 263, 305, 399, 1040, 1041, 1042, 1043, 1044, 1048], "raghavan": [415, 591, 840, 844, 991, 993, 995], "raghu": [410, 443], "raghunathan": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "raghuv": [1051, 1052], "raghuwanshi": 1050, "rah": 642, "rahiel": 1040, "rahil": [1050, 1051, 1052, 1053], "rahimi": [642, 985], "rahmaan": 1046, "rahman": [1043, 1044, 1048], "rahn": [1043, 1046], "rahul": [1048, 1053], "rai": [0, 399, 961, 993, 1036, 1046, 1048, 1049], "raimundo": 1044, "rain": [2, 11, 168, 409, 989], "rainbow": [22, 220], "rainfal": 989, "rais": [107, 198, 233, 234, 253, 262, 309, 318, 380, 382, 384, 385, 386, 389, 392, 394, 400, 403, 411, 414, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 510, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 577, 578, 582, 583, 589, 590, 591, 592, 594, 595, 603, 604, 611, 612, 618, 630, 633, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 697, 699, 703, 710, 712, 713, 714, 715, 728, 730, 731, 739, 779, 783, 784, 785, 788, 789, 790, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 819, 823, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 854, 855, 856, 860, 862, 863, 864, 865, 868, 869, 870, 871, 872, 877, 878, 879, 883, 884, 885, 892, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 923, 925, 926, 928, 929, 946, 950, 954, 977, 978, 979, 980, 993, 1003, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "raise_except": 979, "raise_warn": [262, 713, 979], "raj": 1053, "rajagopalan": [0, 399, 1044, 1048], "rajaona": [1042, 1043], "rajat": [1039, 1046], "rajborirug": 236, "rajdeep": 1045, "rajendra": 1044, "raji": [1051, 1052], "rakotoarison": [1043, 1044, 1046], "ralf": [1039, 1042, 1043, 1051, 1052], "ralph": 1054, "ram": [15, 51, 368, 403, 417, 897, 898, 995, 1008, 1029, 1042, 1048, 1051, 1052], "ramakrishnan": [410, 443], "ramana": [1042, 1043], "ramanath": 1041, "ramesh": [375, 1018, 1039, 1042, 1046], "rameshwar": [1043, 1044], "ramil": [1044, 1045], "rammig": [1018, 1042], "ramo": 1051, "rampin": 1043, "ramyanp": [1048, 1049], "ramzi": 1048, "ram\u00edrez": 993, "rand": [12, 22, 35, 36, 37, 38, 42, 47, 56, 60, 100, 112, 127, 129, 141, 176, 181, 220, 221, 226, 232, 233, 274, 295, 316, 317, 322, 330, 331, 345, 352, 358, 359, 389, 400, 545, 705, 706, 716, 758, 782, 787, 897, 898, 900, 901, 902, 1005, 1020, 1036, 1047, 1048], "rand_index": 706, "rand_scor": [35, 410, 716, 993, 1048], "randal": [885, 1040, 1050], "randi": 1042, "randint": [9, 35, 79, 90, 121, 162, 169, 221, 229, 233, 235, 271, 317, 322, 382, 385, 393, 400, 805, 822, 840, 841, 842, 844, 982, 983], "randn": [12, 31, 32, 37, 52, 63, 64, 78, 79, 96, 100, 126, 141, 149, 153, 166, 169, 186, 191, 192, 196, 210, 211, 214, 244, 247, 248, 254, 266, 268, 269, 274, 289, 290, 312, 316, 317, 322, 338, 343, 344, 348, 382, 385, 644, 671, 673, 679, 688, 822, 908, 911], "random": [2, 3, 4, 5, 9, 10, 11, 12, 18, 19, 22, 23, 24, 25, 29, 31, 32, 35, 37, 38, 42, 43, 46, 48, 50, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 69, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 90, 94, 95, 96, 99, 100, 108, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 134, 138, 141, 142, 145, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 166, 171, 176, 177, 178, 179, 181, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 203, 204, 206, 210, 211, 214, 215, 218, 219, 221, 222, 223, 225, 226, 231, 232, 233, 234, 235, 236, 241, 243, 244, 246, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 262, 264, 266, 268, 269, 270, 271, 274, 276, 281, 283, 288, 289, 290, 295, 299, 306, 308, 309, 312, 316, 317, 319, 321, 323, 326, 327, 330, 331, 338, 339, 341, 342, 343, 344, 345, 348, 351, 352, 358, 359, 366, 367, 369, 372, 376, 383, 385, 392, 393, 394, 400, 404, 405, 407, 410, 418, 419, 423, 435, 441, 444, 448, 450, 452, 453, 454, 455, 459, 460, 461, 463, 465, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 489, 490, 491, 492, 493, 496, 497, 498, 503, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 541, 542, 545, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 583, 584, 585, 590, 608, 609, 611, 612, 628, 631, 633, 635, 640, 641, 642, 643, 644, 647, 648, 650, 651, 653, 654, 655, 659, 661, 662, 663, 664, 671, 672, 673, 677, 678, 679, 680, 688, 690, 691, 692, 693, 694, 695, 696, 702, 705, 706, 709, 732, 744, 782, 789, 794, 798, 799, 801, 803, 804, 805, 806, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 830, 831, 836, 838, 839, 840, 841, 842, 844, 845, 846, 850, 854, 861, 862, 863, 865, 868, 870, 879, 882, 886, 894, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 928, 939, 941, 942, 964, 967, 983, 985, 988, 990, 992, 993, 997, 998, 999, 1001, 1003, 1008, 1009, 1013, 1014, 1015, 1016, 1020, 1024, 1025, 1027, 1028, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "random_": 186, "random_02": 186, "random_05": 186, "random_08": 186, "random_11": 186, "random_cat": [169, 1001], "random_choice_csc": 1046, "random_forest": 114, "random_from_data": [246, 798, 799, 992], "random_label": 35, "random_num": [169, 1001], "random_offset_": [642, 643], "random_project": [219, 230, 369, 1005, 1010, 1037, 1042, 1052, 1053], "random_sampl": [181, 845, 846, 850], "random_se": [8, 90, 118], "random_search": [260, 267], "random_st": [2, 3, 4, 5, 8, 10, 11, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 36, 40, 41, 42, 44, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 68, 69, 73, 80, 84, 90, 93, 95, 98, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 142, 143, 145, 149, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 178, 179, 183, 189, 196, 197, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 231, 234, 235, 236, 237, 239, 240, 243, 245, 246, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 278, 281, 283, 286, 287, 291, 292, 293, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 337, 339, 340, 341, 346, 347, 351, 352, 356, 360, 362, 382, 385, 389, 393, 394, 405, 409, 410, 411, 414, 415, 417, 418, 422, 435, 438, 439, 441, 444, 448, 450, 452, 453, 454, 455, 459, 460, 461, 463, 470, 475, 479, 488, 489, 492, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 594, 595, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 633, 634, 635, 636, 639, 640, 641, 642, 643, 647, 648, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 711, 736, 789, 793, 794, 798, 799, 800, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 850, 854, 861, 862, 863, 865, 870, 882, 886, 894, 897, 898, 905, 906, 907, 910, 912, 913, 914, 915, 916, 918, 919, 939, 941, 942, 962, 964, 967, 982, 983, 985, 988, 993, 994, 995, 996, 997, 1000, 1001, 1003, 1008, 1009, 1020, 1024, 1025, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "random_state_": [382, 537, 628, 854, 1050], "random_tre": 567, "random_tree_embed": 114, "random_unlabeled_point": [317, 900, 901, 902], "random_weights_": [642, 643], "randomforest": [8, 118, 366, 417, 913, 914, 1041], "randomforestclassifi": [24, 25, 29, 54, 113, 114, 115, 116, 117, 118, 132, 169, 170, 238, 239, 256, 271, 315, 317, 322, 351, 362, 393, 394, 407, 417, 419, 558, 559, 560, 562, 567, 568, 570, 804, 805, 823, 835, 915, 982, 983, 994, 1001, 1018, 1033, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "randomforestclassifierifittedrandomforestclassifi": [24, 116, 117, 322], "randomforestclassifierinot": 322, "randomforestclassifierrandomforestclassifi": [24, 169, 238, 271], "randomforestregressor": [8, 115, 129, 130, 133, 161, 162, 317, 322, 393, 417, 558, 559, 561, 563, 567, 569, 571, 633, 634, 915, 983, 994, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "randomforestregressorrandomforestregressor": [130, 133], "randomgeek78": 1050, "randomized_range_find": [389, 1037, 1042], "randomized_svd": [15, 389, 452, 454, 533, 542, 545, 547, 1036, 1037, 1042, 1049, 1050, 1051], "randomized_svd_low_rank": 1043, "randomizedlasso": 1043, "randomizedlogisticregress": 1043, "randomizedpca": [1018, 1036, 1038, 1039, 1041, 1042, 1043], "randomizedsearchcv": [4, 69, 149, 260, 267, 317, 362, 393, 400, 576, 982, 993, 1007, 1013, 1025, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053, 1054], "randomizedsearchcvinot": 69, "randomli": [11, 35, 46, 48, 59, 69, 83, 86, 91, 111, 112, 125, 126, 152, 161, 164, 168, 209, 214, 230, 234, 248, 254, 265, 278, 281, 326, 362, 367, 389, 392, 393, 410, 414, 417, 420, 450, 459, 513, 516, 520, 524, 532, 538, 546, 547, 552, 560, 561, 562, 563, 564, 565, 566, 611, 612, 672, 680, 691, 695, 717, 798, 799, 861, 899, 913, 914, 915, 916, 992, 994, 996, 999, 1001, 1005, 1009, 1015, 1027, 1029, 1047, 1051, 1053], "randomst": [3, 12, 18, 19, 22, 29, 32, 35, 42, 48, 59, 60, 79, 80, 84, 93, 95, 100, 110, 121, 122, 125, 126, 127, 129, 142, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 181, 186, 191, 198, 199, 204, 211, 221, 226, 232, 233, 243, 246, 254, 262, 265, 266, 268, 269, 270, 271, 299, 306, 308, 309, 312, 316, 317, 319, 321, 322, 326, 327, 331, 342, 358, 359, 382, 385, 389, 394, 400, 415, 422, 423, 441, 444, 448, 450, 452, 453, 454, 455, 459, 460, 461, 463, 470, 471, 475, 476, 477, 479, 480, 481, 482, 489, 492, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 584, 585, 608, 609, 611, 612, 628, 633, 635, 640, 641, 642, 643, 644, 647, 648, 650, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 675, 677, 678, 679, 680, 688, 690, 691, 692, 693, 694, 695, 696, 702, 782, 794, 798, 799, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 829, 830, 831, 835, 836, 839, 840, 841, 842, 844, 845, 846, 850, 854, 861, 862, 863, 870, 882, 886, 894, 897, 898, 900, 901, 902, 905, 906, 907, 910, 911, 913, 914, 915, 916, 928, 941, 942, 962, 964, 967, 1003, 1020, 1031], "randomtreesembed": [114, 128, 219, 417, 915, 1037, 1044, 1045, 1049, 1050, 1051], "randomtreesembedding_": 567, "randomtreesembeddingrandomtreesembed": 114, "rang": [2, 3, 4, 5, 6, 8, 10, 15, 17, 18, 23, 24, 25, 30, 31, 35, 36, 38, 40, 44, 45, 46, 48, 49, 53, 58, 59, 61, 62, 76, 77, 79, 80, 109, 111, 112, 113, 116, 122, 125, 129, 141, 144, 145, 150, 167, 168, 173, 181, 186, 187, 191, 195, 197, 198, 201, 204, 205, 213, 215, 219, 221, 229, 230, 235, 236, 243, 245, 248, 249, 253, 254, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 274, 281, 287, 293, 296, 302, 305, 310, 311, 315, 319, 320, 327, 339, 346, 351, 352, 357, 360, 367, 374, 375, 377, 380, 382, 386, 389, 394, 403, 410, 414, 417, 420, 441, 462, 470, 472, 473, 474, 475, 476, 477, 479, 482, 492, 495, 496, 515, 528, 542, 554, 555, 560, 561, 564, 589, 590, 592, 630, 633, 639, 641, 649, 650, 670, 672, 677, 678, 679, 681, 693, 713, 732, 747, 789, 831, 837, 851, 853, 855, 856, 861, 875, 882, 883, 884, 890, 891, 894, 895, 898, 899, 941, 942, 961, 982, 989, 993, 997, 1007, 1014, 1018, 1023, 1024, 1025, 1027, 1041, 1042, 1043, 1044, 1046, 1049, 1052], "range_n_clust": 58, "range_n_outli": 79, "rangeindex": [167, 253, 497], "rangespan": 1011, "rangl": [985, 993, 1007, 1008], "ranjanikrishnan": 1049, "rank": [2, 15, 23, 78, 97, 100, 116, 144, 169, 170, 215, 257, 259, 267, 376, 404, 406, 407, 412, 413, 415, 417, 418, 509, 510, 522, 525, 550, 551, 594, 595, 607, 649, 658, 670, 681, 697, 721, 727, 728, 740, 741, 757, 789, 795, 804, 805, 942, 982, 984, 985, 990, 1001, 1003, 1018, 1031, 1037, 1042, 1045, 1046, 1050, 1051, 1054], "rank_": 658, "rank_t": 801, "rank_test_": 263, "rank_test_precis": [257, 263], "rank_test_recal": 257, "rank_test_scor": [259, 267, 801, 815, 1042], "rankdata": 1043, "ranked_exposur": [197, 215], "ranked_frequ": 197, "ranked_pure_premium": 215, "ranking_": [144, 594, 595], "rankylau": 1044, "ransac": [78, 164, 175, 203, 214, 216, 525, 650, 658, 672, 679, 680, 1015], "ransacregressor": [200, 203, 214, 400, 650, 679, 680, 989, 994, 1039, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1054], "rao": [414, 1048, 1051], "raphael": 1053, "rapha\u00ebl": 1046, "raphson": [649, 670, 681], "rapid": 1018, "rapidli": [201, 261, 1008, 1018, 1023], "rare": [25, 168, 311, 362, 384, 392, 394, 396, 407, 410, 414, 590, 649, 659, 660, 670, 681, 905, 930, 961, 989, 1003, 1018, 1043, 1044, 1045, 1049, 1051, 1054], "rarer": [351, 353, 418], "raschka": [310, 1041, 1042, 1043, 1044, 1045, 1048], "rashchedrin": 1043, "rasmu": [173, 1043], "rasmussen": [420, 611, 612, 615, 620, 623], "raspberri": 397, "raster": 68, "rastgoo": 1053, "rastogi": 1044, "rastrojo": 706, "rasul": [1041, 1043, 1044], "rat": [9, 296, 375, 499], "rate": [2, 109, 113, 119, 125, 141, 168, 197, 204, 215, 230, 236, 253, 256, 259, 266, 268, 269, 300, 301, 302, 368, 380, 409, 410, 411, 415, 419, 447, 467, 537, 554, 555, 560, 561, 562, 563, 593, 596, 597, 599, 600, 601, 607, 645, 646, 669, 677, 678, 679, 693, 699, 703, 728, 783, 790, 861, 862, 863, 899, 982, 989, 990, 993, 996, 997, 1007, 1009, 1018, 1040, 1044, 1045], "rather": [10, 25, 51, 80, 109, 112, 125, 161, 167, 197, 198, 211, 236, 273, 309, 310, 351, 352, 362, 367, 376, 378, 380, 382, 385, 386, 388, 392, 393, 394, 395, 410, 414, 415, 417, 418, 420, 449, 462, 464, 465, 468, 566, 582, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 630, 647, 648, 653, 654, 661, 662, 663, 664, 782, 815, 836, 838, 839, 868, 905, 906, 917, 942, 987, 989, 990, 993, 995, 996, 1000, 1014, 1024, 1027, 1036, 1037, 1038, 1039, 1043, 1044, 1045, 1046, 1051, 1052, 1054], "ratio": [5, 51, 64, 71, 101, 164, 230, 232, 246, 251, 276, 366, 380, 410, 412, 414, 417, 451, 457, 494, 495, 516, 542, 550, 551, 552, 632, 659, 711, 713, 717, 726, 731, 737, 740, 783, 784, 785, 788, 796, 828, 831, 851, 898, 962, 987, 999, 1009, 1015, 1025, 1051, 1053], "ration": [154, 253, 624, 991], "rationalquadrat": [154, 158, 420, 617], "raton": 989, "raul": [1038, 1039], "rausch": [329, 331, 1044, 1045, 1048], "rauscho": [329, 331], "rauwuckl": 1048, "ravel": [3, 12, 15, 17, 24, 40, 51, 52, 56, 78, 102, 110, 112, 118, 122, 128, 129, 130, 138, 149, 151, 153, 154, 155, 156, 167, 176, 187, 188, 190, 197, 210, 211, 219, 223, 226, 230, 232, 236, 240, 245, 247, 253, 262, 266, 268, 273, 283, 288, 289, 295, 296, 299, 300, 301, 302, 307, 308, 319, 331, 339, 344, 345, 347, 348, 351, 358, 359, 466, 494, 495, 496, 632, 719, 980, 993, 1052], "ravi": [1048, 1051], "raw": [2, 10, 13, 35, 79, 95, 130, 154, 167, 173, 302, 312, 328, 353, 366, 375, 382, 388, 394, 407, 408, 410, 412, 415, 418, 470, 475, 502, 503, 504, 560, 561, 562, 564, 583, 589, 590, 591, 592, 635, 678, 691, 695, 706, 787, 851, 909, 990, 993, 997, 999, 1000, 1003, 1006, 1026, 1028, 1037, 1041, 1044, 1047, 1053], "raw_coef_": [905, 906], "raw_covariance_": [412, 470, 475], "raw_data": 353, "raw_docu": [589, 592], "raw_location_": [412, 470, 475], "raw_model": 312, "raw_pixel_classifi": 302, "raw_support_": [470, 475], "raw_target_regr": 411, "raw_valu": [722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 993, 1044, 1047], "raw_x": [418, 583], "raytheon": 10, "raz": 1050, "razor": 1027, "ra\u00fal": 1045, "rb": [6, 403], "rbf": [3, 4, 5, 8, 9, 28, 29, 98, 131, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 173, 211, 225, 226, 232, 241, 257, 259, 261, 264, 274, 275, 289, 290, 331, 334, 336, 345, 349, 372, 411, 415, 417, 453, 463, 503, 505, 536, 542, 611, 612, 613, 614, 617, 619, 620, 621, 622, 624, 625, 632, 640, 641, 642, 643, 644, 677, 692, 766, 775, 777, 801, 812, 815, 821, 865, 885, 900, 901, 905, 907, 908, 909, 910, 911, 982, 985, 986, 988, 990, 993, 999, 1003, 1006, 1015, 1020, 1025, 1031, 1042, 1047], "rbf_featur": [642, 985], "rbf_kernel": [766, 991, 1040], "rbf_svc": [331, 1008], "rbfsampler": [231, 640, 641, 643, 985, 1020, 1040, 1050, 1051], "rbm": [302, 861, 862, 863, 998], "rbm_features_classifi": 302, "rc": [211, 384], "rc1": 384, "rceil": [406, 999], "rcond": 102, "rcparam": [6, 226, 231, 312], "rcv1": [373, 498, 1031, 1041], "rcwoolston": 1047, "rd": 418, "rda": 377, "rdbu": [29, 32, 93, 213, 299, 339, 344], "rdbu_r": [52, 80, 103, 339], "rdownload": 6, "rdylbu": [118, 357], "re": [2, 6, 12, 24, 25, 54, 68, 69, 109, 119, 152, 166, 167, 215, 233, 244, 248, 262, 264, 268, 316, 351, 353, 367, 380, 381, 384, 388, 393, 395, 400, 407, 414, 418, 470, 471, 472, 473, 474, 475, 476, 477, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 647, 653, 661, 663, 803, 818, 821, 913, 914, 915, 916, 989, 994, 996, 1003, 1008, 1014, 1018, 1029, 1036, 1040, 1041, 1043, 1045], "reach": [59, 115, 120, 146, 197, 199, 213, 215, 253, 261, 319, 339, 360, 385, 395, 397, 410, 415, 419, 451, 458, 509, 510, 594, 595, 628, 645, 646, 647, 648, 653, 654, 655, 656, 657, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 680, 682, 683, 684, 685, 730, 731, 784, 798, 799, 862, 863, 902, 982, 993, 997, 1007, 1009, 1018, 1047, 1051, 1052, 1053], "reachability_": [63, 410, 451, 456, 457, 458], "reachabl": [53, 63, 447, 451, 456, 457, 458, 851, 947], "reactiv": 386, "read": [6, 11, 15, 93, 218, 266, 315, 316, 317, 319, 321, 366, 374, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 403, 410, 421, 422, 423, 424, 427, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 938, 982, 989, 993, 994, 1013, 1018, 1029, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1053, 1054], "read_byt": 6, "read_csv": [10, 385, 497, 1051], "read_csv_kwarg": [497, 1052], "readabl": [80, 260, 318, 385, 386, 388, 535, 1045, 1048, 1049, 1050, 1051], "reader": [4, 40, 318, 368, 380, 1025], "readi": [2, 5, 154, 198, 253, 375, 384, 388], "readili": [319, 415, 1009, 1018], "readm": [388, 418, 494], "readonli": [905, 906, 1049, 1051, 1052], "readonly_memmap": 1053, "readthedoc": 394, "real": [11, 14, 29, 32, 53, 55, 68, 72, 76, 78, 79, 80, 109, 125, 152, 167, 201, 222, 226, 236, 252, 253, 265, 274, 287, 290, 306, 307, 338, 343, 353, 366, 369, 373, 374, 377, 384, 386, 389, 392, 393, 394, 406, 407, 410, 412, 414, 415, 417, 418, 470, 490, 491, 494, 495, 496, 497, 498, 501, 502, 505, 511, 552, 553, 554, 556, 557, 558, 559, 560, 561, 565, 566, 593, 595, 596, 597, 598, 599, 600, 601, 632, 700, 705, 725, 729, 753, 756, 758, 786, 796, 830, 862, 863, 907, 908, 909, 910, 911, 914, 916, 983, 984, 985, 990, 993, 995, 997, 998, 999, 1009, 1012, 1015, 1031, 1036, 1049, 1053], "real_cov": [76, 77, 423, 471, 474, 475, 476, 477, 480, 481, 482], "real_data": 287, "realist": [2, 6, 261, 268, 269, 336, 375, 993], "realiti": 376, "realiz": [197, 1018], "realli": [76, 169, 186, 384, 385, 386, 993, 999, 1018, 1050], "reappli": 417, "rearrang": [18, 19, 406], "reason": [2, 6, 10, 25, 40, 51, 68, 122, 125, 146, 167, 168, 173, 197, 198, 205, 215, 226, 230, 231, 233, 236, 253, 256, 259, 260, 265, 278, 283, 306, 310, 343, 352, 353, 362, 366, 367, 368, 375, 379, 380, 381, 382, 384, 388, 392, 393, 394, 395, 409, 410, 411, 412, 415, 417, 418, 509, 533, 575, 639, 647, 653, 655, 673, 688, 693, 764, 801, 815, 849, 854, 861, 880, 902, 982, 983, 988, 989, 990, 993, 995, 996, 997, 999, 1003, 1007, 1008, 1018, 1029, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "reassign": [48, 380, 448, 450, 1037, 1041], "reassignment_ratio": 450, "rebalanc": 394, "rebas": 384, "rebecca": 1043, "rebekah": [1044, 1045, 1046], "reboul": 1046, "rebuild": [366, 378, 403, 418, 443], "rebuilt": [30, 378, 845, 846], "rec": [17, 353, 375, 642], "rec_l1": 12, "rec_l2": 12, "rec_macro": 414, "recal": [4, 23, 30, 68, 80, 98, 143, 164, 227, 236, 251, 253, 257, 276, 278, 302, 326, 327, 380, 394, 409, 410, 505, 605, 701, 707, 708, 709, 713, 714, 728, 730, 731, 732, 783, 784, 785, 788, 789, 823, 831, 834, 866, 885, 889, 905, 989, 1009, 1015, 1025, 1029, 1039, 1040, 1043, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "recalcul": [237, 239, 410, 1033, 1036], "recall_macro": [414, 993], "recall_scor": [23, 253, 266, 414, 709, 785, 993, 1036, 1038, 1039, 1040, 1041, 1046, 1052], "recant": 395, "receiv": [0, 17, 136, 164, 227, 233, 239, 251, 253, 254, 256, 261, 266, 276, 329, 353, 362, 380, 382, 388, 394, 409, 414, 417, 505, 659, 703, 707, 709, 728, 783, 789, 790, 820, 831, 833, 834, 872, 910, 994, 997, 998, 1007, 1015, 1046, 1047], "recent": [11, 199, 233, 369, 378, 381, 385, 388, 394, 410, 469, 539, 566, 1007, 1018, 1039, 1048], "recherch": 0, "recht": [642, 985], "recip": [384, 403, 990, 1018], "reciproc": [376, 993], "reckon": 375, "recogn": [2, 3, 27, 33, 49, 51, 84, 87, 96, 117, 144, 164, 198, 252, 287, 318, 326, 327, 386, 400, 410, 418, 503, 698, 714, 831, 910, 993, 1015, 1020, 1053], "recognit": [1, 7, 13, 14, 46, 93, 164, 232, 235, 302, 310, 351, 373, 385, 415, 417, 419, 495, 503, 533, 535, 542, 698, 709, 714, 742, 770, 789, 790, 798, 815, 831, 885, 910, 985, 989, 993, 994, 998, 1008, 1010, 1015, 1020, 1023, 1031, 1036], "recommend": [84, 117, 161, 214, 227, 233, 255, 268, 309, 317, 343, 366, 367, 369, 374, 378, 380, 382, 386, 388, 392, 397, 403, 413, 414, 415, 417, 419, 439, 448, 450, 452, 461, 497, 509, 536, 539, 545, 550, 562, 563, 570, 583, 584, 590, 607, 612, 632, 633, 639, 659, 660, 671, 677, 693, 698, 699, 701, 703, 807, 813, 815, 824, 861, 868, 870, 877, 884, 885, 890, 891, 893, 894, 895, 896, 898, 907, 910, 942, 961, 982, 990, 993, 995, 997, 1000, 1003, 1005, 1007, 1008, 1009, 1012, 1018, 1031, 1038, 1039, 1045, 1046, 1047, 1048, 1050, 1052], "recompil": [381, 386, 397], "recomput": [53, 54, 237, 239, 285, 315, 470, 475, 989, 1005, 1041, 1052], "reconstruct": [1, 14, 15, 18, 64, 93, 94, 98, 164, 196, 221, 222, 319, 403, 415, 418, 483, 484, 485, 532, 534, 536, 538, 539, 540, 541, 543, 544, 546, 547, 549, 584, 588, 653, 673, 689, 690, 694, 897, 898, 989, 990, 1015, 1050], "reconstruct_from_patches_2d": [96, 418, 584], "reconstruction_err_": [539, 541], "reconstruction_error": 689, "reconstruction_error_": 690, "record": [9, 94, 113, 125, 169, 233, 253, 311, 353, 366, 380, 403, 410, 412, 451, 458, 499, 621, 644, 693, 772, 775, 779, 780, 781, 782, 828, 851, 1049, 1050], "recov": [38, 63, 80, 94, 95, 100, 119, 149, 166, 181, 196, 197, 201, 218, 353, 412, 416, 419, 422, 461, 534, 560, 989, 990, 992, 1014, 1028, 1042], "recoveri": [10, 80, 181, 196, 412, 419], "recreat": [46, 237], "recreate_imag": 46, "rect": [6, 50, 176], "rect_colorbar": 305, "rect_histi": 305, "rect_histx": 305, "rect_scatt": 305, "rectangl": 6, "rectangular": [375, 394, 942, 1014], "rectifi": [862, 863], "recurs": [11, 49, 89, 126, 136, 140, 143, 146, 147, 164, 254, 257, 258, 262, 264, 273, 287, 356, 382, 408, 410, 414, 441, 442, 443, 446, 464, 503, 516, 564, 594, 595, 598, 603, 633, 634, 659, 820, 865, 875, 993, 996, 999, 1000, 1009, 1015, 1016, 1028, 1031, 1036, 1046, 1047], "recursionerror": 1054, "red": [7, 8, 9, 24, 31, 32, 58, 78, 90, 93, 94, 95, 112, 130, 133, 158, 173, 176, 177, 187, 195, 223, 237, 254, 265, 296, 300, 306, 310, 311, 328, 339, 359, 378, 394, 410, 415, 994], "reda": 1042, "redden": 1047, "reddi": [1043, 1044, 1045, 1050, 1053], "redefin": [18, 122, 167], "redesign": [392, 1036], "redirects_en": 15, "redirects_filenam": 15, "redirects_url": 15, "redistribut": 443, "redo": 352, "reduc": [2, 5, 40, 43, 44, 45, 46, 51, 69, 70, 76, 112, 122, 124, 125, 128, 143, 167, 176, 177, 181, 195, 201, 202, 205, 228, 230, 233, 236, 260, 266, 278, 292, 307, 310, 311, 320, 352, 353, 362, 372, 374, 377, 380, 386, 392, 394, 403, 407, 408, 409, 410, 412, 414, 415, 417, 418, 419, 421, 445, 446, 451, 458, 461, 494, 535, 545, 550, 556, 557, 558, 559, 564, 565, 566, 567, 574, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 628, 644, 653, 673, 674, 675, 676, 688, 693, 696, 782, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 832, 874, 875, 882, 894, 897, 898, 905, 906, 913, 914, 915, 916, 982, 985, 987, 988, 989, 990, 993, 996, 1005, 1006, 1008, 1010, 1020, 1028, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1052, 1054], "reduce_dim": [70, 238, 258, 411], "reduce_dim__k": 70, "reduce_dim__n_compon": [70, 258, 411], "reduce_func": [782, 1047], "reduced_data": 56, "reducer_label": 70, "reduct": [4, 17, 31, 52, 55, 67, 71, 74, 84, 93, 97, 101, 112, 128, 164, 217, 219, 220, 223, 224, 230, 234, 258, 284, 291, 293, 297, 319, 336, 362, 366, 372, 408, 410, 411, 413, 415, 417, 419, 469, 483, 484, 485, 486, 503, 531, 533, 535, 536, 539, 540, 541, 542, 545, 548, 550, 554, 555, 558, 559, 560, 561, 565, 566, 567, 600, 608, 689, 690, 691, 692, 693, 694, 782, 801, 831, 847, 854, 861, 865, 866, 875, 885, 903, 905, 913, 914, 915, 916, 985, 990, 1005, 1009, 1014, 1015, 1016, 1018, 1025, 1031, 1037, 1038, 1039, 1042, 1050, 1051, 1052], "redund": [23, 25, 103, 145, 244, 249, 322, 362, 376, 379, 380, 385, 394, 407, 516, 635, 1014, 1029, 1048], "redundantli": 394, "ref": [380, 388, 983, 1042], "ref_lin": 439, "refactor": [319, 1036, 1038, 1039, 1040, 1046, 1049, 1050, 1051], "refer": [2, 35, 36, 58, 61, 69, 88, 123, 125, 130, 146, 158, 215, 233, 236, 253, 266, 273, 286, 293, 305, 315, 316, 317, 318, 319, 320, 321, 322, 323, 352, 367, 369, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 397, 400, 403, 409, 411, 413, 414, 421, 422, 423, 438, 439, 440, 441, 443, 445, 447, 448, 449, 451, 452, 453, 454, 455, 458, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 499, 504, 512, 514, 516, 517, 518, 519, 520, 521, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 591, 594, 595, 596, 603, 608, 609, 611, 612, 615, 620, 623, 624, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 648, 650, 652, 654, 656, 657, 659, 662, 664, 666, 667, 668, 669, 672, 674, 676, 677, 679, 680, 683, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 705, 706, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 741, 742, 744, 757, 759, 760, 770, 784, 786, 787, 789, 790, 793, 794, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 840, 841, 842, 844, 847, 850, 851, 852, 854, 861, 862, 863, 865, 870, 871, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 886, 893, 898, 899, 900, 901, 902, 903, 905, 907, 908, 910, 911, 913, 914, 915, 916, 930, 942, 959, 995, 997, 1004, 1009, 1014, 1017, 1020, 1024, 1028, 1029, 1036, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "referenc": [377, 380, 382, 388, 394, 897, 898, 996, 1043, 1049], "references_": 882, "refin": [23, 80, 473, 710, 993, 1029], "refit": [116, 136, 143, 145, 164, 251, 258, 260, 263, 266, 267, 271, 276, 394, 409, 414, 420, 503, 568, 628, 660, 666, 714, 801, 804, 805, 815, 823, 831, 910, 982, 989, 993, 1015, 1043, 1044, 1045, 1054], "refit_strategi": 257, "refit_time_": [801, 804, 805, 815, 1044], "reflect": [10, 38, 44, 45, 78, 90, 94, 119, 168, 169, 197, 215, 268, 287, 352, 376, 379, 384, 394, 396, 406, 451, 457, 990, 993, 999, 1001, 1028, 1037, 1045, 1054], "reformul": 379, "refrain": [198, 380], "refug": 63, "refurbish": 408, "refus": [253, 392, 895, 896], "reg": [123, 167, 177, 233, 306, 316, 344, 417, 559, 561, 569, 651, 652, 654, 655, 656, 657, 658, 664, 665, 666, 671, 672, 679, 680, 690, 694, 916, 989, 1041], "reg1": [133, 417], "reg2": [133, 417], "reg3": [133, 417], "reg_covar": [243, 798, 799], "reg_nnl": 192, "reg_ol": 192, "reg_param": 551, "regard": [0, 3, 5, 9, 11, 51, 53, 69, 88, 98, 137, 149, 154, 168, 169, 186, 194, 199, 220, 232, 236, 261, 268, 269, 286, 352, 375, 376, 380, 381, 385, 392, 394, 403, 408, 410, 415, 417, 418, 420, 444, 448, 453, 460, 463, 502, 615, 620, 657, 659, 702, 744, 799, 807, 823, 824, 829, 847, 848, 986, 989, 993, 995, 996, 998, 1000, 1007, 1008, 1009, 1022, 1029, 1043, 1046], "regardless": [215, 260, 261, 262, 367, 380, 410, 536, 633, 634, 659, 705, 716, 993, 1005, 1044, 1051, 1052], "regedit": 397, "regener": 870, "regex": [259, 353, 465, 467], "regexp": [589, 590, 592], "regim": [2, 394, 905, 906, 992], "region": [10, 15, 19, 23, 34, 45, 46, 47, 51, 54, 64, 66, 96, 131, 156, 164, 167, 197, 215, 226, 230, 231, 249, 308, 339, 346, 377, 387, 394, 410, 417, 420, 449, 451, 457, 463, 588, 990, 993, 996, 999, 1003, 1007, 1009, 1015, 1028], "region_1": 311, "region_2": 311, "regist": [181, 351, 386, 961, 963], "register_parallel_backend": [961, 1044, 1054], "register_rai": 961, "registri": [378, 397, 1013], "regr": [193, 411, 555, 557, 566, 647, 648, 668, 838, 863, 906, 908, 911, 1008, 1027], "regr_1": [110, 358, 359], "regr_2": [110, 358, 359], "regr_3": 359, "regr_multirf": 129, "regr_rf": 129, "regress": [5, 8, 12, 22, 23, 25, 28, 43, 52, 67, 69, 74, 78, 79, 82, 85, 88, 94, 95, 96, 101, 103, 108, 109, 112, 114, 115, 116, 117, 120, 121, 124, 125, 129, 130, 134, 137, 141, 144, 146, 148, 150, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 175, 179, 181, 182, 183, 184, 187, 191, 192, 194, 198, 200, 201, 202, 203, 206, 208, 213, 216, 221, 225, 227, 235, 236, 237, 240, 241, 253, 255, 267, 270, 272, 273, 274, 281, 284, 285, 286, 291, 294, 297, 301, 302, 305, 306, 309, 310, 312, 317, 318, 319, 320, 322, 334, 335, 336, 346, 347, 349, 351, 355, 356, 360, 361, 367, 368, 369, 372, 373, 375, 377, 380, 382, 385, 388, 389, 392, 393, 394, 404, 407, 412, 413, 414, 415, 417, 419, 433, 438, 465, 466, 475, 485, 490, 491, 493, 497, 502, 503, 505, 506, 513, 517, 518, 519, 525, 529, 532, 536, 538, 540, 542, 543, 544, 546, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 571, 572, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 610, 611, 612, 615, 616, 623, 624, 626, 632, 633, 634, 635, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 702, 707, 722, 724, 725, 729, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 786, 791, 792, 801, 804, 805, 807, 815, 824, 828, 829, 831, 832, 834, 836, 838, 839, 847, 848, 853, 855, 856, 862, 863, 865, 866, 869, 870, 872, 878, 879, 880, 882, 885, 886, 889, 894, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 919, 925, 928, 930, 946, 982, 983, 985, 988, 990, 1000, 1001, 1003, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1026, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "regression_data": 5, "regression_model": 1043, "regression_test": 388, "regressioncriterion": 1044, "regressor": [2, 73, 84, 123, 129, 130, 133, 149, 154, 162, 164, 167, 175, 177, 179, 181, 197, 198, 200, 203, 214, 215, 216, 233, 262, 274, 288, 310, 316, 317, 366, 380, 382, 392, 394, 407, 411, 420, 433, 436, 437, 466, 483, 484, 485, 486, 525, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 566, 567, 568, 569, 570, 571, 606, 607, 610, 612, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 702, 833, 834, 837, 838, 839, 848, 856, 861, 862, 863, 866, 872, 880, 885, 886, 906, 908, 911, 913, 914, 915, 916, 919, 934, 936, 982, 983, 989, 993, 994, 996, 1001, 1007, 1013, 1015, 1016, 1024, 1031, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "regressor_": [167, 466, 594, 595, 598], "regressor__sample_weight": 197, "regressor_with_": 166, "regressor_without_": 166, "regressorchain": [400, 836, 838, 1044, 1047, 1051], "regressormixin": [233, 382, 394, 466, 1047], "regul": 0, "regular": [23, 25, 29, 34, 38, 55, 56, 57, 58, 59, 66, 69, 71, 77, 98, 108, 118, 120, 121, 123, 128, 134, 136, 138, 149, 150, 151, 153, 156, 158, 161, 164, 166, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 192, 193, 195, 197, 204, 207, 210, 211, 213, 215, 216, 232, 244, 252, 255, 260, 261, 263, 272, 288, 289, 298, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 331, 334, 336, 338, 339, 340, 343, 344, 348, 349, 351, 353, 356, 366, 380, 392, 393, 407, 410, 412, 413, 415, 416, 417, 420, 438, 444, 448, 472, 473, 477, 479, 480, 481, 482, 505, 513, 515, 516, 521, 523, 525, 529, 539, 540, 541, 544, 548, 549, 551, 560, 562, 563, 589, 590, 592, 639, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 694, 736, 742, 751, 798, 799, 818, 831, 832, 862, 863, 866, 885, 905, 906, 907, 908, 910, 911, 912, 982, 983, 985, 986, 987, 990, 992, 998, 999, 1003, 1006, 1007, 1008, 1015, 1016, 1018, 1024, 1025, 1027, 1031, 1036, 1037, 1038, 1040, 1041, 1045, 1046, 1048, 1049], "regularis": [201, 423, 474, 476], "regularli": [118, 278, 392, 995], "regulatori": 125, "rehan": 1051, "rehman": 1044, "reiichiro": [1043, 1044], "reilli": 1053, "reimburs": 253, "reimplement": [386, 392, 394, 1042, 1046], "reinforc": 1014, "reinit": 388, "reiniti": 392, "reinstal": 397, "reintroduc": 1052, "reitsam": 1048, "reject": [234, 394, 395, 524, 672, 728, 925, 926, 989, 993, 1044], "rel": [2, 4, 6, 15, 18, 25, 53, 59, 98, 116, 154, 170, 173, 177, 197, 215, 246, 289, 290, 306, 316, 319, 339, 343, 351, 352, 375, 379, 382, 388, 394, 407, 410, 414, 417, 418, 420, 441, 444, 448, 450, 460, 522, 525, 532, 535, 538, 542, 546, 547, 558, 559, 560, 561, 565, 566, 567, 605, 650, 659, 660, 672, 673, 675, 691, 695, 730, 748, 801, 804, 805, 807, 815, 824, 829, 832, 845, 846, 850, 862, 863, 874, 875, 885, 901, 905, 906, 907, 910, 912, 913, 914, 915, 916, 989, 990, 993, 995, 996, 997, 999, 1025], "relabel": [379, 819, 820, 902], "relat": [1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 369, 375, 376, 379, 380, 384, 385, 387, 388, 389, 392, 394, 395, 396, 400, 403, 408, 409, 410, 411, 412, 413, 414, 415, 417, 420, 451, 465, 470, 497, 550, 551, 563, 564, 640, 674, 678, 693, 702, 724, 744, 822, 828, 863, 864, 866, 869, 870, 875, 878, 880, 881, 884, 893, 909, 982, 985, 987, 993, 994, 996, 997, 1000, 1003, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1031, 1036, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1052], "relate_point": 293, "relationship": [2, 11, 18, 109, 110, 125, 155, 166, 167, 176, 181, 197, 199, 200, 266, 273, 281, 306, 312, 322, 394, 410, 412, 414, 463, 497, 637, 715, 990, 993, 995, 996, 1000, 1001, 1027, 1041], "relative_tim": 246, "relax": [5, 410, 418, 454, 1006, 1043], "releas": [0, 11, 13, 53, 69, 113, 114, 116, 119, 125, 127, 143, 146, 161, 162, 168, 169, 173, 178, 197, 198, 199, 228, 233, 237, 238, 239, 240, 253, 254, 256, 268, 271, 273, 278, 285, 311, 324, 329, 360, 367, 369, 378, 380, 381, 383, 388, 392, 394, 418, 444, 447, 448, 465, 468, 491, 492, 497, 502, 503, 505, 513, 516, 522, 525, 539, 542, 562, 563, 565, 566, 568, 600, 603, 629, 631, 633, 635, 641, 647, 649, 653, 659, 670, 681, 689, 702, 703, 709, 718, 719, 733, 749, 779, 789, 796, 800, 801, 802, 804, 805, 807, 815, 823, 824, 827, 828, 831, 847, 849, 866, 870, 875, 878, 879, 880, 884, 885, 886, 902, 903, 905, 910, 913, 914, 937, 961, 1009, 1011, 1015, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "release_highlight": [324, 1015], "relev": [5, 7, 17, 75, 79, 81, 100, 146, 164, 176, 191, 200, 259, 260, 266, 362, 366, 368, 375, 377, 379, 380, 382, 384, 385, 386, 394, 395, 400, 412, 413, 419, 420, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 727, 741, 757, 800, 802, 803, 804, 805, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 883, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 993, 994, 999, 1010, 1014, 1015, 1039, 1044, 1050], "reli": [98, 115, 119, 146, 170, 185, 186, 278, 283, 316, 320, 351, 366, 367, 382, 385, 388, 389, 392, 394, 405, 406, 410, 415, 417, 418, 550, 594, 598, 608, 609, 779, 829, 832, 870, 959, 982, 985, 987, 989, 993, 996, 1001, 1003, 1008, 1018, 1044, 1045, 1046, 1050, 1052, 1053], "reliabl": [23, 25, 407, 414, 439, 440, 647, 1009, 1018], "relianc": [98, 201], "religion": [17, 260, 351, 352, 353, 375, 994, 1029], "reloc": 1045, "relova": 1049, "relu": [862, 863], "remain": [6, 23, 25, 69, 109, 116, 121, 123, 145, 167, 197, 201, 213, 243, 257, 261, 265, 268, 406, 410, 411, 412, 414, 418, 447, 465, 468, 516, 517, 522, 529, 535, 571, 611, 612, 764, 770, 803, 804, 805, 806, 809, 811, 840, 841, 842, 844, 946, 982, 983, 985, 992, 993, 997, 1003, 1009, 1014, 1038, 1044, 1050, 1053], "remaind": [2, 119, 167, 186, 197, 199, 215, 236, 320, 356, 411, 465, 468, 1036, 1043, 1044, 1045, 1048, 1049, 1052, 1054], "remaining_column": 465, "remark": [53, 84, 146, 253, 368, 380, 1003], "remedi": 214, "rememb": [53, 382, 385, 397, 418, 996, 1000, 1009], "remi": 1043, "remind": 233, "reminisc": 96, "remot": [173, 327, 380, 383], "remov": [3, 13, 15, 52, 53, 68, 73, 144, 146, 161, 162, 167, 170, 260, 305, 312, 315, 316, 317, 322, 351, 352, 356, 362, 372, 375, 379, 380, 381, 382, 384, 385, 389, 394, 410, 411, 414, 417, 418, 420, 421, 442, 443, 445, 446, 451, 458, 483, 484, 485, 486, 489, 490, 528, 535, 536, 538, 539, 540, 541, 542, 547, 554, 568, 569, 570, 571, 580, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 612, 631, 645, 655, 656, 657, 659, 660, 674, 676, 677, 678, 693, 710, 743, 751, 752, 779, 780, 781, 783, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 852, 864, 865, 869, 870, 882, 883, 885, 894, 920, 936, 937, 983, 990, 996, 1009, 1016, 1021, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "remove_zero_eig": [536, 1038, 1045], "rempfler": 1047, "renam": [248, 260, 380, 384, 410, 447, 448, 460, 472, 473, 479, 528, 537, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 878, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "rename_axi": 259, "render": [10, 24, 51, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 192, 201, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 380, 382, 384, 385, 386, 394, 552, 590, 632, 701, 703, 882, 894, 917, 919, 992, 1009, 1049, 1053], "rene": 1049, "renni": [840, 842, 995, 1044], "renorm": 24, "rent": 2, "rental": [2, 11, 168, 1000], "reorder": [18, 99, 394, 698, 719, 1014, 1044], "reordered_data": 18, "reordered_row": 18, "reorgan": 1042, "rep": 377, "reparameter": 1008, "reparametr": 346, "repartit": 2, "repeat": [8, 31, 64, 77, 79, 121, 146, 149, 155, 156, 168, 173, 199, 253, 254, 259, 260, 271, 278, 327, 352, 353, 382, 389, 394, 395, 406, 407, 408, 410, 415, 418, 419, 589, 594, 608, 609, 616, 628, 635, 660, 806, 816, 817, 820, 931, 983, 992, 1031, 1044, 1046], "repeatedkfold": [167, 414, 806, 817, 1043], "repeatedli": [109, 319, 362, 394, 410, 417, 420, 509, 547, 667, 668, 677, 678, 679, 782, 983, 997, 1024], "repeatedstratifiedkfold": [259, 273, 278, 414, 816, 820, 1043], "repercuss": 310, "repetit": [259, 273, 278, 385, 414, 816, 817, 1001, 1050], "replac": [2, 11, 23, 78, 97, 109, 125, 149, 154, 156, 161, 168, 183, 198, 262, 283, 307, 312, 317, 341, 378, 380, 382, 384, 386, 389, 394, 403, 411, 414, 417, 418, 442, 446, 465, 504, 516, 556, 557, 564, 583, 589, 590, 591, 592, 608, 609, 628, 631, 635, 640, 642, 729, 786, 807, 813, 815, 824, 864, 865, 868, 888, 901, 908, 962, 964, 967, 982, 983, 985, 989, 993, 1003, 1008, 1009, 1013, 1014, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "replai": [804, 805], "repli": [13, 351, 379, 380, 383], "replic": [259, 379, 382, 1031], "repo": [380, 384, 1014, 1017], "report": [0, 2, 6, 11, 30, 68, 73, 143, 157, 185, 253, 257, 267, 273, 278, 315, 326, 362, 375, 379, 381, 382, 383, 386, 388, 392, 394, 397, 403, 410, 414, 612, 650, 659, 665, 686, 687, 701, 714, 730, 731, 739, 784, 785, 788, 834, 843, 862, 863, 900, 918, 936, 989, 996, 1001, 1013, 1014, 1017, 1037, 1040, 1043, 1044, 1046, 1047, 1049, 1051, 1052], "reporthook": 6, "repositori": [2, 6, 11, 173, 253, 321, 373, 375, 377, 378, 380, 382, 384, 388, 392, 395, 397, 505, 1013, 1017, 1031], "repr": [578, 1047, 1048, 1050], "repreat": 259, "repres": [2, 6, 8, 10, 11, 13, 18, 24, 30, 32, 42, 46, 47, 48, 51, 89, 93, 95, 101, 102, 116, 117, 126, 167, 176, 184, 189, 199, 201, 202, 206, 220, 222, 231, 236, 246, 252, 253, 256, 259, 262, 266, 288, 307, 343, 351, 353, 360, 368, 372, 375, 377, 382, 392, 393, 394, 395, 403, 407, 410, 414, 415, 416, 417, 418, 419, 439, 443, 447, 453, 464, 465, 471, 472, 473, 474, 475, 476, 477, 489, 491, 492, 493, 495, 497, 499, 501, 502, 503, 505, 506, 511, 528, 535, 537, 539, 541, 542, 548, 556, 564, 582, 589, 592, 595, 630, 633, 635, 641, 677, 679, 698, 700, 702, 712, 731, 744, 790, 801, 803, 814, 815, 818, 821, 823, 828, 830, 831, 834, 835, 841, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 863, 872, 878, 879, 902, 905, 906, 925, 926, 946, 983, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1006, 1007, 1009, 1020, 1025, 1026, 1028, 1042, 1044, 1047, 1048, 1051, 1054], "represent": [2, 10, 15, 18, 24, 51, 69, 70, 93, 96, 114, 116, 117, 126, 127, 128, 130, 133, 143, 154, 167, 169, 173, 178, 181, 218, 219, 220, 227, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 278, 293, 302, 311, 317, 319, 320, 322, 328, 352, 353, 360, 362, 372, 374, 383, 394, 403, 410, 411, 415, 416, 417, 424, 464, 532, 536, 538, 541, 543, 549, 567, 589, 591, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 631, 644, 647, 653, 659, 660, 661, 663, 667, 668, 669, 677, 678, 679, 770, 798, 799, 807, 824, 861, 874, 878, 879, 883, 885, 898, 905, 917, 919, 922, 938, 959, 985, 990, 992, 994, 996, 997, 998, 1000, 1003, 1008, 1014, 1020, 1021, 1023, 1027, 1029, 1036, 1037, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "reproduc": [3, 10, 58, 109, 167, 173, 185, 268, 278, 302, 367, 369, 379, 380, 382, 383, 388, 392, 394, 410, 414, 415, 418, 422, 441, 455, 461, 470, 475, 489, 492, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 560, 561, 562, 563, 564, 608, 609, 611, 612, 635, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 661, 662, 663, 664, 667, 668, 669, 672, 677, 679, 680, 690, 691, 693, 694, 695, 794, 798, 799, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 829, 830, 831, 835, 836, 839, 850, 854, 861, 862, 863, 870, 882, 886, 894, 897, 898, 905, 906, 907, 910, 941, 942, 964, 967, 985, 1013, 1017, 1036, 1044, 1049, 1050], "reproduct": [392, 989], "request": [6, 15, 44, 197, 215, 233, 318, 367, 374, 378, 379, 383, 394, 395, 400, 403, 415, 418, 419, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 589, 591, 592, 595, 600, 601, 611, 612, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 700, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 950, 952, 993, 996, 1017, 1029, 1042, 1043, 1044, 1053, 1054], "request_rout": 233, "requir": [2, 5, 12, 23, 43, 44, 46, 51, 53, 55, 56, 65, 68, 88, 97, 99, 114, 115, 119, 120, 123, 125, 126, 130, 146, 168, 181, 186, 194, 197, 218, 220, 227, 230, 233, 236, 240, 253, 260, 268, 270, 273, 283, 285, 305, 310, 317, 318, 351, 352, 353, 374, 377, 378, 380, 381, 382, 384, 386, 388, 392, 394, 395, 397, 400, 403, 405, 408, 410, 411, 412, 414, 415, 417, 418, 419, 421, 427, 433, 438, 439, 440, 445, 447, 451, 453, 458, 463, 465, 468, 470, 483, 484, 485, 497, 509, 522, 525, 536, 542, 550, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 580, 581, 582, 611, 612, 620, 628, 633, 634, 635, 644, 647, 648, 653, 654, 659, 660, 667, 668, 669, 672, 675, 676, 677, 678, 679, 687, 690, 692, 693, 694, 696, 700, 725, 730, 731, 743, 748, 750, 753, 764, 785, 788, 800, 801, 804, 805, 808, 810, 815, 823, 828, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 865, 866, 867, 869, 879, 880, 881, 885, 893, 897, 898, 900, 901, 905, 906, 907, 910, 913, 914, 915, 916, 950, 953, 959, 979, 982, 987, 988, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1003, 1007, 1008, 1009, 1014, 1020, 1027, 1029, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "requires_fit": 382, "requires_i": [382, 427, 433, 1047], "requires_positive_i": 382, "requires_positive_x": [382, 1046, 1051], "requires_vector_input": [613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "requisit": 382, "rerais": 1053, "rerun": [10, 24, 40, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 388], "resampl": [50, 122, 167, 215, 287, 389, 392, 394, 556, 557, 967, 1014, 1045, 1049], "resampled_arrai": 964, "rescal": [2, 44, 45, 53, 98, 178, 185, 221, 236, 305, 348, 412, 417, 422, 470, 471, 472, 473, 474, 475, 476, 477, 534, 539, 647, 650, 653, 877, 883, 907, 908, 909, 910, 911, 993, 1003, 1028, 1040, 1041], "rescaled_coin": [44, 45, 1028], "rescu": [403, 418], "research": [0, 146, 166, 253, 259, 265, 278, 375, 377, 392, 410, 502, 514, 636, 646, 693, 736, 830, 835, 982, 990, 994, 996, 1008, 1013, 1014, 1018], "resembl": [37, 201, 233], "reserv": [253, 311, 562, 563, 1018, 1020], "reserva": 311, "reservoir": 962, "reservoir_sampl": 962, "reset": [240, 362, 388, 535, 677, 678, 679, 845, 846, 874, 875, 885, 1038], "reset_n_cal": [845, 846], "reshama": [0, 364, 370, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "reshap": [2, 3, 4, 12, 22, 30, 44, 45, 46, 48, 49, 51, 52, 56, 70, 78, 83, 93, 96, 102, 112, 117, 118, 128, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 176, 188, 194, 210, 211, 213, 214, 219, 221, 223, 226, 231, 235, 247, 257, 287, 289, 296, 299, 301, 302, 306, 307, 308, 312, 315, 318, 319, 321, 322, 331, 338, 339, 344, 347, 348, 392, 406, 415, 417, 418, 446, 466, 585, 632, 733, 831, 880, 884, 989, 1003, 1009, 1025, 1028, 1041], "resid": 375, "residence_sinc": 253, "residenti": 130, "residu": [73, 193, 199, 255, 433, 466, 483, 484, 485, 553, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 675, 679, 680, 686, 687, 702, 745, 786, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 989, 993, 1027, 1048, 1049, 1051], "residual_metr": 1042, "residual_threshold": [214, 672, 989, 1049], "residual_vs_predict": [2, 11, 73, 255, 320, 702], "residues_": 1041, "resign": 395, "resili": 418, "resist": [78, 79, 380], "resiz": [4, 44, 45, 237, 375, 494, 495, 1025], "resolut": [2, 9, 15, 102, 168, 295, 296, 339, 395, 407, 1020, 1046], "resolv": [15, 379, 380, 384, 388, 395, 418, 447, 453, 463, 692, 696, 942, 983, 993, 1043, 1045, 1046, 1049, 1054], "resort": [261, 375, 403, 556, 1046], "resourc": [15, 40, 122, 125, 161, 197, 301, 317, 365, 369, 383, 393, 394, 409, 417, 804, 805, 994, 1011, 1014, 1018, 1021, 1031, 1044, 1049, 1050], "resourcewarn": 1039, "resp": [375, 417, 598, 798, 799, 1007, 1044], "respect": [25, 53, 65, 88, 98, 109, 113, 115, 118, 127, 157, 173, 176, 181, 186, 199, 211, 214, 218, 220, 227, 230, 232, 236, 248, 253, 268, 289, 290, 302, 310, 319, 336, 343, 366, 367, 375, 376, 380, 407, 410, 413, 415, 417, 418, 420, 447, 465, 468, 471, 472, 473, 474, 475, 476, 477, 535, 541, 542, 548, 554, 562, 563, 598, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 637, 644, 672, 691, 695, 713, 729, 783, 786, 798, 799, 841, 851, 862, 863, 917, 919, 982, 986, 987, 989, 990, 993, 996, 997, 998, 999, 1003, 1008, 1013, 1017, 1018, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "respond": [167, 380, 410], "respons": [0, 146, 168, 193, 197, 200, 233, 269, 351, 377, 386, 394, 408, 410, 411, 417, 447, 465, 483, 484, 485, 632, 633, 634, 675, 676, 699, 701, 703, 743, 798, 799, 994, 1000, 1011, 1020, 1053], "response_method": [7, 28, 32, 54, 111, 126, 131, 180, 189, 206, 211, 253, 262, 286, 291, 294, 310, 335, 336, 338, 343, 357, 632, 633, 634, 699, 701, 703, 743, 800, 823, 993, 1053], "rest": [23, 28, 119, 123, 164, 175, 181, 206, 212, 216, 233, 236, 246, 253, 278, 281, 315, 330, 336, 347, 386, 394, 408, 420, 513, 611, 632, 645, 659, 660, 677, 755, 789, 833, 834, 835, 854, 905, 907, 910, 989, 993, 994, 997, 1000, 1008, 1015, 1018, 1040, 1041, 1050, 1051, 1052, 1054], "restart": [55, 383, 388, 448, 532, 538, 539, 544, 546, 547, 611, 612, 990, 1049], "restor": [1039, 1044, 1045, 1046, 1047, 1051], "restrict": [25, 64, 65, 71, 83, 137, 161, 164, 187, 212, 214, 298, 303, 382, 386, 392, 407, 410, 417, 418, 466, 494, 503, 533, 582, 611, 654, 655, 656, 657, 659, 683, 684, 714, 783, 789, 790, 831, 853, 855, 856, 857, 859, 861, 862, 863, 865, 891, 993, 1009, 1015, 1030, 1031, 1036, 1038, 1046, 1048, 1053], "restructuredtext": 380, "result": [2, 3, 4, 7, 11, 12, 17, 22, 23, 24, 28, 30, 32, 35, 38, 40, 41, 42, 44, 46, 51, 52, 53, 58, 60, 64, 69, 71, 73, 79, 84, 93, 96, 98, 99, 103, 112, 113, 114, 116, 119, 120, 122, 123, 126, 128, 129, 138, 145, 146, 149, 151, 153, 157, 161, 167, 168, 169, 170, 177, 182, 183, 186, 187, 192, 198, 199, 201, 205, 211, 212, 215, 218, 219, 222, 226, 229, 231, 237, 243, 248, 249, 252, 253, 254, 257, 259, 260, 262, 265, 266, 267, 268, 270, 271, 273, 275, 278, 283, 285, 289, 299, 300, 301, 305, 306, 307, 310, 315, 317, 319, 320, 321, 322, 326, 329, 331, 339, 343, 344, 346, 351, 353, 358, 359, 360, 366, 367, 368, 374, 375, 377, 380, 382, 384, 385, 386, 388, 392, 393, 394, 395, 403, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 435, 441, 442, 444, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 460, 463, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 480, 490, 509, 510, 512, 514, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 580, 581, 582, 583, 585, 589, 590, 592, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 632, 633, 635, 637, 641, 644, 653, 654, 659, 665, 666, 667, 668, 676, 677, 678, 679, 687, 690, 691, 692, 693, 694, 695, 696, 709, 711, 713, 718, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 755, 757, 758, 765, 772, 775, 779, 780, 781, 782, 784, 785, 786, 788, 794, 795, 798, 799, 801, 803, 804, 805, 806, 811, 815, 816, 817, 820, 821, 826, 832, 833, 834, 836, 837, 838, 839, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 869, 870, 878, 879, 882, 883, 886, 894, 898, 902, 905, 907, 910, 913, 914, 915, 916, 917, 918, 925, 926, 941, 942, 944, 948, 958, 964, 967, 983, 985, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1013, 1014, 1017, 1020, 1024, 1025, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "results_df": [205, 259, 311], "results_for_preval": 262, "results_sc": 346, "retail": 1018, "retain": [176, 394, 410, 413, 414, 418, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 495, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 696, 697, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 878, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 1006, 1036], "retbin": 1003, "retent": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "retrac": 233, "retract": 380, "retrain": [403, 1014, 1052, 1054], "retri": [169, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1044, 1050, 1054], "retriev": [84, 167, 201, 266, 352, 360, 384, 394, 415, 418, 419, 469, 497, 591, 594, 595, 627, 654, 664, 685, 700, 727, 731, 733, 734, 757, 782, 840, 844, 877, 903, 989, 991, 993, 995, 1013, 1014, 1028, 1041, 1046, 1048, 1050, 1053], "return": [2, 4, 5, 6, 8, 9, 11, 12, 15, 17, 22, 23, 25, 31, 32, 35, 38, 46, 51, 54, 59, 68, 73, 90, 100, 102, 107, 109, 112, 114, 121, 122, 125, 126, 130, 146, 152, 155, 157, 162, 170, 176, 177, 185, 186, 189, 197, 198, 205, 206, 207, 215, 233, 236, 239, 240, 246, 248, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266, 274, 283, 288, 293, 296, 302, 305, 307, 310, 315, 323, 335, 339, 351, 353, 356, 360, 366, 373, 374, 375, 380, 381, 382, 386, 387, 389, 392, 394, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 962, 963, 964, 965, 966, 967, 968, 974, 977, 978, 979, 980, 981, 983, 993, 996, 1000, 1001, 1008, 1009, 1014, 1020, 1025, 1027, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "return_a": [586, 587, 959, 1039], "return_cent": [513, 1047], "return_cod": 547, "return_cost": [472, 473, 479], "return_count": [329, 352, 857], "return_cov": [394, 568, 569, 612, 865], "return_dist": [52, 464, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 996, 1040], "return_distribut": [90, 524], "return_estim": [2, 167, 273, 322, 414, 828, 1044], "return_ind": 524, "return_indic": [414, 828, 1052], "return_inner_stat": 1050, "return_intercept": [688, 1045], "return_invers": [124, 382], "return_log": [845, 846], "return_model": [1038, 1040], "return_n_it": [422, 455, 460, 479, 546, 547, 647, 648, 653, 654, 661, 662, 663, 664, 682, 683, 684, 685, 686, 687, 688, 695, 1050], "return_norm": [892, 1043], "return_path": [683, 684, 686, 687], "return_std": [149, 154, 155, 156, 158, 176, 177, 394, 553, 568, 569, 612, 614, 615, 616, 617, 626, 628, 645, 646, 865, 1043, 1044, 1048, 1053], "return_sum_weight": 974, "return_tim": [261, 829, 1046], "return_train_scor": [115, 263, 273, 311, 414, 801, 804, 805, 815, 828, 1042, 1043, 1045], "return_x_i": [3, 5, 13, 56, 68, 69, 70, 71, 93, 115, 119, 133, 136, 137, 142, 161, 162, 169, 170, 173, 182, 184, 185, 186, 188, 193, 194, 204, 212, 213, 227, 235, 236, 239, 240, 255, 258, 261, 266, 267, 275, 278, 281, 285, 292, 300, 301, 302, 310, 315, 317, 319, 320, 321, 322, 329, 342, 353, 356, 373, 385, 386, 393, 403, 410, 411, 414, 417, 419, 422, 430, 447, 489, 490, 491, 492, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 533, 534, 535, 536, 559, 562, 563, 568, 569, 593, 596, 597, 599, 600, 601, 602, 603, 611, 620, 621, 623, 624, 639, 640, 659, 660, 669, 674, 675, 676, 689, 690, 691, 692, 694, 696, 702, 712, 789, 804, 805, 807, 833, 838, 849, 854, 857, 914, 915, 916, 983, 988, 993, 994, 995, 996, 1003, 1020, 1024, 1025, 1027, 1028, 1033, 1042, 1044, 1046, 1049], "return_x_mean": 422, "reuben": 1036, "reus": [11, 149, 190, 253, 260, 315, 353, 382, 394, 410, 411, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 635, 647, 649, 650, 653, 659, 661, 663, 667, 668, 669, 670, 677, 678, 679, 681, 862, 863, 1001, 1005, 1018, 1043, 1053], "reuter": [366, 375], "reuters21578": 6, "reuterspars": 6, "rev": [380, 608, 609], "revamp": 1046, "reveal": [2, 11, 167, 169, 351, 386, 406, 990, 1052], "revers": [17, 73, 146, 202, 259, 535, 542, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 790, 865, 993, 1036, 1037, 1046, 1048, 1052], "revert": [94, 631, 633, 634, 1043, 1048, 1053], "review": [278, 311, 366, 375, 382, 383, 384, 385, 386, 392, 395, 414, 415, 536, 542, 993, 1003, 1021], "revillet": 1036, "revis": [395, 671], "revisit": [410, 421, 445], "revolv": 990, "reward": 380, "reweight": [109, 352, 394, 412, 417, 591, 592, 649, 670, 681], "reweight_covari": [470, 475], "rewrit": [386, 392, 1009, 1028, 1036], "rewritten": [380, 650, 1038, 1040], "rey": 1051, "reza": 1046, "rezazadeh": 1049, "rf": [114, 115, 129, 132, 133, 169, 315, 362, 417, 568, 570, 571], "rf_123": 362, "rf__n_estim": 417, "rf_appli": 114, "rf_cst": 322, "rf_inst": 362, "rf_leaves_yield": 114, "rf_model": 114, "rf_no_cst": 322, "rf_pipelin": 130, "rfc": [25, 239, 315, 1033], "rfc_disp": [239, 315, 1033], "rfe": [144, 145, 400, 419, 595, 598, 603, 1036, 1040, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "rfecv": [145, 400, 419, 594, 598, 603, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1054], "rgb": [46, 375, 418, 494, 495, 584, 585, 588], "rgr_lasso": 12, "rgr_ridg": 12, "rhinehart": 1043, "rho": [208, 415, 678, 989, 1007, 1037], "rho_k": 416, "ri": [410, 706, 787], "ribeiro": [591, 731, 1049], "ricardo": [1039, 1049, 1050, 1053], "ricardojnf": 1049, "riccadonna": 744, "riccardo": [1047, 1053], "rice": [9, 296, 375, 499, 1049], "rich": [50, 125, 388, 392, 410, 440, 1018, 1047, 1050], "richard": [375, 419, 659, 1037, 1046, 1048, 1050, 1051], "richardscottoz": 1049, "richer": [50, 102, 410], "richi": 1044, "rick": 1047, "ricker": 102, "ricker_funct": 102, "ricker_matrix": 102, "rickiepark": 1043, "rid": [7, 1007], "riddel": [1039, 1041, 1043], "ridg": [3, 8, 12, 52, 73, 94, 95, 112, 130, 136, 146, 148, 154, 155, 156, 158, 159, 161, 164, 166, 167, 168, 175, 176, 181, 184, 187, 190, 192, 193, 197, 198, 203, 216, 225, 235, 241, 272, 306, 309, 345, 346, 351, 366, 369, 392, 405, 415, 417, 420, 525, 536, 540, 544, 612, 616, 623, 626, 644, 645, 646, 648, 650, 658, 662, 674, 675, 676, 679, 688, 702, 751, 801, 807, 815, 838, 911, 993, 994, 1001, 1003, 1007, 1008, 1015, 1016, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1049, 1050, 1051, 1052, 1054], "ridge_alpha": [540, 544, 1043], "ridge_cv": 73, "ridge_cv_with_trans_target": 73, "ridge_glm": 197, "ridge_regress": [1044, 1045, 1051], "ridgeclassifi": [351, 366, 673, 674, 676, 989, 994, 1041, 1045, 1049, 1050, 1051, 1054], "ridgeclassifiercv": [400, 674, 675, 789, 989, 993, 994, 1044, 1046, 1047, 1049, 1050, 1054], "ridgecv": [2, 73, 130, 146, 167, 235, 394, 400, 417, 569, 644, 673, 676, 989, 994, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054], "ridgecvridgecv": [130, 167], "ridgeregress": 382, "ridgeridg": 167, "ridgewai": [121, 417], "riedmann": 1048, "ries": 1050, "rifkin": 989, "right": [4, 5, 9, 10, 12, 13, 29, 32, 37, 40, 41, 42, 43, 49, 51, 58, 60, 62, 77, 78, 80, 88, 89, 90, 95, 96, 98, 100, 102, 109, 111, 112, 113, 122, 123, 124, 125, 132, 142, 149, 152, 162, 170, 187, 198, 199, 200, 201, 203, 204, 207, 208, 226, 229, 230, 243, 245, 246, 248, 249, 253, 254, 255, 259, 262, 266, 269, 270, 272, 273, 288, 296, 299, 302, 305, 307, 310, 321, 322, 327, 339, 341, 343, 346, 348, 351, 357, 360, 362, 369, 380, 382, 392, 395, 406, 409, 410, 413, 415, 416, 417, 420, 465, 483, 484, 485, 486, 535, 542, 545, 558, 559, 560, 561, 562, 563, 565, 566, 567, 588, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 636, 677, 679, 870, 913, 914, 915, 916, 917, 929, 942, 982, 985, 987, 989, 991, 993, 995, 996, 1000, 1005, 1007, 1008, 1009, 1013, 1014, 1018, 1021, 1025, 1027, 1028, 1038, 1044, 1050, 1052, 1053], "right_impur": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "rightarrow": [420, 620, 997], "rijn": [374, 1044], "rileran": 1050, "rio": [1046, 1048, 1049, 1050], "ripe": 311, "rise": 154, "rishabh": 1050, "rishi": 1048, "rishikesh": 1043, "risk": [7, 53, 125, 197, 201, 215, 306, 346, 362, 379, 380, 394, 408, 409, 414, 417, 568, 569, 890, 891, 893, 894, 895, 896, 989, 993, 1018, 1043], "riski": 215, "riskiest": [197, 215], "ritchi": 1047, "rithvik": 1048, "ritter": [1050, 1051], "ritual": 351, "rival": [2, 902, 1006], "rk": 63, "rkf": [414, 816], "rl2007": 989, "rlm": 1046, "rm": [78, 152, 384, 388, 412], "rmse": [2, 11, 79, 125, 311, 751, 993, 1047], "rmse_": 311, "rmse_test_mean": 311, "rmse_test_scor": 311, "rmse_test_std": 311, "rmse_train_mean": 311, "rmse_train_scor": 311, "rmse_train_std": 311, "rmsle": [752, 993], "rmtree": [52, 70, 411], "rna": 392, "rnd": 306, "rng": [3, 18, 19, 29, 32, 35, 42, 48, 60, 79, 84, 93, 95, 100, 110, 122, 125, 126, 127, 129, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 181, 186, 191, 198, 199, 204, 211, 226, 232, 233, 235, 243, 254, 262, 265, 270, 271, 299, 309, 312, 316, 317, 319, 321, 322, 326, 327, 331, 342, 358, 359, 362, 367, 382, 385, 400, 423, 471, 475, 476, 477, 479, 480, 481, 482, 644, 650, 671, 673, 679, 688, 813, 840, 841, 842, 844, 845, 846, 850, 853, 855, 856, 857, 882, 894, 897, 898, 900, 901, 902, 911, 1020], "ro": 24, "road": 392, "roadmap": [369, 1011], "rob": [204, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1048, 1051], "robert": [0, 46, 70, 146, 185, 278, 377, 399, 415, 529, 536, 629, 657, 722, 724, 725, 736, 871, 983, 989, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1051], "robertlayton": 46, "roberto": [410, 443], "robertson": 1049, "robin": [161, 162, 628, 983, 1042, 1045, 1050, 1051], "robinson": 1049, "robl": 1043, "robson": 1046, "robust": [7, 32, 59, 61, 75, 77, 81, 100, 120, 122, 146, 162, 164, 167, 168, 175, 187, 199, 201, 214, 216, 226, 236, 274, 305, 321, 368, 377, 382, 388, 410, 417, 418, 447, 449, 470, 471, 474, 475, 476, 477, 525, 535, 560, 561, 650, 658, 671, 672, 679, 680, 751, 835, 866, 880, 882, 883, 894, 900, 940, 993, 997, 999, 1003, 1006, 1007, 1013, 1015, 1016, 1018, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1052], "robust_contour": 78, "robust_cov": 78, "robust_mah": 78, "robust_scal": [883, 894, 1044], "robustli": [200, 408], "robustscal": [236, 882, 895, 983, 1003, 1041, 1042, 1044, 1046, 1047, 1048, 1052], "roc": [9, 23, 114, 146, 164, 225, 227, 236, 237, 241, 251, 253, 254, 261, 266, 276, 322, 323, 329, 387, 407, 409, 414, 505, 511, 565, 659, 703, 707, 708, 709, 728, 743, 783, 789, 790, 820, 831, 834, 872, 910, 999, 1015, 1033, 1038, 1039, 1041, 1042, 1046, 1048, 1052], "roc_auc": [9, 146, 259, 263, 268, 269, 387, 635, 703, 734, 993, 1033], "roc_auc_ovo": [993, 1046], "roc_auc_ovo_weight": [993, 1046], "roc_auc_ovr": [993, 1046], "roc_auc_ovr_weight": [993, 1046], "roc_auc_scor": [23, 146, 259, 268, 315, 322, 703, 707, 708, 709, 790, 993, 1038, 1039, 1044, 1046, 1050, 1051], "roc_curv": [9, 227, 256, 268, 703, 707, 728, 783, 789, 993, 1036, 1037, 1038, 1041, 1042, 1044, 1049, 1052, 1054], "roc_displai": 227, "rocchio": [351, 852], "rocco": [1049, 1050, 1051], "roccurvedisplai": [114, 236, 239, 253, 256, 268, 269, 315, 387, 789, 790, 999, 1033, 1046, 1052, 1053, 1054], "rock": 79, "rocklin": [379, 385], "rocktalu": 63, "roddi": [1045, 1046], "rodent": [9, 296, 375, 499], "roderick": 983, "rodion": 1049, "rodrigo": 1044, "rodrigu": [1043, 1044, 1049], "rodr\u00edguez": 311, "roeder": 1046, "roehr": [1052, 1053], "roei": 1048, "roeschk": 1045, "roger": [724, 1043, 1044, 1048], "rogerstanimoto": [451, 458, 700, 779, 780, 781, 996], "rogerstanimotodist": 700, "rohan": [1041, 1042, 1044, 1045, 1049], "rohit": [1039, 1040, 1044, 1045], "roi": [1036, 1050], "roi_siz": 52, "roic": 1051, "rok": 1046, "rokem": [1036, 1042], "rokhlin": [536, 542, 942], "roland": [1038, 1039], "rolando": [1037, 1038], "role": [0, 268, 366, 379, 415, 1011], "roll": [65, 164, 217, 218, 219, 220, 223, 224, 383, 410, 531, 693, 694, 936, 1015, 1018, 1046, 1051], "rolling_max": 11, "rolling_mean": 11, "rolling_min": 11, "romain": [1043, 1048], "roman": [0, 398, 628, 919, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "roman4oo": 1051, "romaniuk": 1040, "romijnd": 1048, "romuald": 1045, "ron": [0, 245, 399, 1036], "ronald": [375, 997, 1039, 1049], "ronan": [1036, 1039, 1044], "ronchetti": [650, 989], "rong": 1008, "ronrubin": [665, 686, 687, 989], "ronsin": [1044, 1045, 1053], "ronweiss": 245, "room": [305, 375, 385, 410, 1017], "roopam": [1044, 1045], "root": [2, 78, 125, 146, 178, 360, 377, 380, 388, 410, 443, 502, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 640, 751, 752, 791, 792, 913, 914, 915, 916, 917, 919, 993, 999, 1009, 1038, 1044, 1045, 1046, 1047, 1050, 1051], "root_": 443, "root_mean_squared_error": [11, 125, 751, 993, 1053], "root_mean_squared_log_error": [752, 993, 1053], "rope": 259, "rope_interv": 259, "rope_prob": 259, "rori": 1047, "rosa": 1051, "rosal": 414, "rose": 375, "rosenberg": [410, 718, 738, 796], "rosenfeld": 1044, "ross": [535, 608, 609, 1009, 1050, 1051], "rosset": [109, 417, 520, 554], "rossi": 1039, "rosslimlinyang_ijcv": 535, "rostamizadeh": 982, "rostomyan": 1044, "rotat": [6, 38, 83, 92, 93, 95, 98, 100, 104, 121, 132, 164, 170, 221, 270, 271, 281, 339, 345, 413, 415, 420, 422, 505, 533, 542, 551, 615, 698, 885, 917, 989, 1015, 1047, 1048], "rotation_mod": 270, "rotations_": 551, "roth": [55, 1041, 1044, 1051], "rough": [408, 999, 1022], "roughli": [109, 122, 186, 249, 269, 283, 310, 366, 394, 415, 418, 520, 990, 1036], "rouli": 1039, "round": [5, 7, 23, 83, 115, 125, 161, 162, 204, 215, 259, 265, 307, 309, 351, 394, 451, 457, 458, 565, 566, 594, 595, 598, 628, 693, 714, 803, 813, 870, 902, 917, 919, 983, 997, 1009, 1038, 1040, 1042, 1044, 1045, 1047, 1049, 1050, 1052, 1053], "rounded_list": 813, "rouseeuw1984": 475, "rousseeuw": [78, 79, 410, 412, 470, 475, 793, 794, 999], "rousseuw": [78, 79], "rout": [6, 54, 107, 157, 164, 178, 225, 241, 253, 323, 369, 424, 427, 430, 433, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 950, 951, 952, 953, 977, 1015, 1031, 1050, 1052], "route_param": [233, 950], "routed_param": [233, 953], "routemappingpair": 950, "router": [233, 394, 400, 950, 951, 952, 953], "routerconsumerclassifi": 233, "routerconsumerclassifierifittedrouterconsumerclassifi": 233, "routin": [322, 368, 374, 377, 380, 381, 382, 383, 388, 392, 394, 419, 673, 675, 688, 848, 907, 908, 909, 910, 911, 990, 996, 1003, 1004, 1007, 1013, 1018, 1036, 1050, 1051, 1052], "routing_info": 950, "routlei": 1042, "rouvinen": 1041, "roux": [659, 989, 1006], "row": [2, 17, 18, 19, 23, 25, 32, 42, 58, 73, 88, 90, 115, 118, 128, 131, 161, 197, 198, 199, 227, 230, 236, 237, 253, 307, 360, 366, 375, 382, 389, 393, 394, 406, 410, 413, 418, 425, 443, 444, 448, 450, 451, 452, 454, 457, 458, 460, 465, 469, 489, 491, 492, 493, 494, 495, 496, 501, 502, 503, 505, 506, 511, 512, 514, 527, 535, 543, 549, 552, 591, 592, 621, 633, 644, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 693, 697, 698, 711, 719, 720, 726, 759, 760, 764, 767, 769, 770, 771, 772, 774, 775, 777, 779, 780, 781, 782, 798, 799, 834, 840, 841, 842, 843, 844, 850, 853, 854, 855, 856, 857, 860, 871, 875, 877, 878, 880, 890, 891, 892, 895, 896, 899, 903, 921, 925, 926, 942, 964, 967, 971, 973, 975, 976, 979, 980, 982, 983, 985, 987, 989, 991, 993, 994, 996, 1003, 1004, 1007, 1008, 1014, 1043, 1044, 1045, 1046, 1051], "row_compl": 17, "row_id_attribut": 374, "row_idx": [19, 197], "row_idx_shuffl": 18, "row_ind": [425, 452, 454], "row_indic": 125, "row_labels_": [17, 18, 19, 406, 452, 454], "row_norm": 246, "rowan": 1051, "rowei": [690, 694, 854, 990, 996], "rows_": [17, 406, 425, 452, 454], "royal": [542, 628, 881, 893, 1007], "rp": 230, "rpath": 378, "rr2007": 985, "rragundez": 1044, "rrr": 384, "rrrcn": 384, "rsalakhu": 645, "rsh": [271, 317], "rskf": 817, "rsme": 993, "rsnegrin": 1050, "rsplit": [4, 15, 260, 1025], "rst": [367, 380, 384, 388, 1029, 1036, 1041], "rstride": 168, "rt": 114, "rt_model": 114, "rtn": 10, "rtol": [382, 845, 846, 850], "ru": 199, "ruben": 1051, "rubi": 1048, "rubia": 1039, "rubial": 1049, "rubin": 983, "rubinstein": [665, 686, 687], "rubric": 990, "ruchitagard": 1046, "rudi": 1042, "rudresh": 1051, "ruff": [380, 397, 402], "ruifeng": [1042, 1043, 1048], "ruin": 380, "ruiter": 1051, "rule": [2, 25, 115, 173, 357, 360, 362, 366, 377, 380, 381, 382, 392, 394, 395, 404, 407, 408, 409, 410, 414, 415, 417, 419, 537, 550, 551, 552, 553, 554, 562, 563, 570, 571, 603, 635, 646, 659, 660, 667, 668, 669, 674, 676, 677, 678, 679, 707, 708, 712, 801, 804, 805, 807, 815, 824, 827, 828, 829, 830, 832, 854, 905, 918, 982, 987, 995, 996, 1007, 1009, 1014, 1020, 1027, 1031, 1038, 1041, 1048, 1053], "ruleset": 1009, "rumelhart": 997, "rumsfeld": [4, 375], "run": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 394, 395, 397, 403, 405, 410, 412, 414, 417, 420, 421, 422, 438, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 465, 468, 469, 472, 473, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 583, 593, 595, 596, 597, 599, 600, 601, 603, 611, 612, 631, 635, 641, 647, 648, 650, 652, 653, 654, 656, 657, 661, 662, 663, 664, 683, 684, 689, 690, 691, 692, 693, 694, 695, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 867, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 936, 937, 961, 964, 967, 982, 992, 994, 997, 1006, 1008, 1009, 1013, 1014, 1018, 1020, 1027, 1029, 1036, 1039, 1041, 1043, 1044, 1045, 1046, 1050, 1051, 1052], "run_histori": 6, "run_id": 59, "run_tim": [212, 213], "rung": 1003, "runnabl": [13, 384, 385], "runtim": [6, 8, 56, 109, 183, 212, 214, 231, 302, 307, 367, 382, 383, 392, 394, 403, 408, 410, 417, 451, 564, 680, 815, 905, 906, 907, 908, 909, 910, 911, 1007, 1008, 1039, 1043, 1044, 1050, 1051, 1053, 1054], "runtime_histori": 6, "runxfail": 388, "rupesh": 1039, "rush": [2, 11, 380], "rushabh": 1047, "rushil": [1051, 1052], "russ": [629, 983], "russel": [1042, 1043], "russellrao": [451, 458, 700, 779, 780, 781, 996], "russellraodist": 700, "russian": 418, "rust": 1013, "ruth": 1046, "rutter": 1049, "ruusmann": 1042, "rv": [0, 263, 305, 805, 813, 815, 982, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "rv_discrete_frozen": 271, "rvd": [470, 475], "rvdriessen": [470, 475], "rvraghav93": [263, 305], "rw2006": [154, 420, 611, 612], "ryad": 1042, "ryan": [1039, 1042, 1044, 1045], "ryb": 357, "ryder": 10, "ryotaro": 1048, "r\u00e9my": 1042, "r\u00fcdiger": [1044, 1045, 1047], "s1": [94, 146, 157, 185, 186, 377, 1028], "s2": [94, 146, 157, 185, 186, 377, 551, 1028], "s22": 499, "s3": [17, 94, 146, 185, 186, 377, 1028], "s4": [146, 185, 186, 377], "s5": [146, 185, 186, 377, 1001], "s6": [146, 185, 186, 377], "s_": [94, 263, 989, 990, 1001, 1003, 1028], "s__p": 865, "s_color": 218, "s_hessian": 218, "s_i": [410, 989, 1003], "s_ica_": 95, "s_isomap": 218, "s_j": 410, "s_ltsa": 218, "s_mod": 218, "s_pca_": 95, "s_point": 218, "s_scale": 218, "s_spectral": 218, "s_standard": 218, "s_t_sne": 218, "sa": [375, 493], "saaba": 1041, "sabharw": 1046, "sabri": 1051, "sach": 10, "sachdev": 1051, "sachdeva": 1043, "sachin": [1043, 1044, 1050], "sackei": 1046, "saclai": 0, "sacr": 1013, "sad": [819, 820], "sadak": 1048, "sadhana": 1044, "sadli": 122, "sadra": 1052, "sad\u0142ocha": 1049, "saeed": 993, "saeger": [1041, 1042, 1043], "safari": 1003, "safe": [35, 167, 186, 253, 352, 380, 382, 410, 411, 435, 509, 510, 568, 569, 598, 775, 779, 829, 864, 899, 959, 965, 996, 1042, 1043, 1044, 1049, 1050], "safe_copi": 1043, "safe_index": [389, 1046], "safe_mask": 389, "safe_realloc": 1039, "safe_sparse_dot": [389, 1046], "safe_sqr": 389, "safeguard": 403, "safer": [352, 362, 378, 410, 414, 1036], "safest": [197, 215, 362, 374], "safeti": [68, 392, 411, 959, 1014, 1046], "safikh": 1051, "safiuddin": 1051, "sag": [189, 204, 659, 660, 673, 675, 688, 989, 1007, 1013, 1041, 1042, 1043, 1045, 1046], "sag_solv": 1045, "saga": [28, 188, 212, 213, 659, 660, 673, 675, 688, 815, 989, 1043, 1045], "sagar": 1046, "sagnik": 1044, "saha": 1050, "sahil": 1052, "sahin": 1046, "sahu": 1048, "sai": [183, 226, 346, 351, 352, 380, 407, 410, 411, 415, 417, 418, 447, 448, 501, 505, 511, 678, 982, 999, 1006, 1018, 1026, 1027, 1029, 1053, 1054], "said": [125, 167, 226, 260, 375, 380, 793, 991, 999, 1020, 1027], "saihttam": 1042, "sailesh": [1043, 1044], "saint": 1042, "saito": [415, 539, 541, 548, 1043], "saiw": 1042, "sake": [2, 25, 122, 125, 162, 167, 197, 310, 343, 351, 353, 388, 392, 671], "saket": [1040, 1041, 1048], "sakinaouisrani": 1050, "salahuddin": 1051, "salakhutdinov": [645, 854, 996], "salamin": 1040, "sale": [119, 236, 259, 993, 1018], "saleem": 1046, "salerno": 377, "salim": 1053, "sallisaw": [411, 467], "salman": [0, 398, 1051, 1052, 1053, 1054, 1055], "salmon": 1020, "salt": [29, 231, 307, 1050], "salvator": [1036, 1050, 1051, 1053], "salz": 1043, "salzmann": [197, 215], "sam": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "sambhav": 1047, "same": [2, 5, 6, 11, 18, 24, 32, 35, 38, 42, 51, 53, 55, 56, 62, 68, 69, 70, 90, 93, 95, 98, 100, 102, 110, 112, 116, 119, 122, 123, 125, 128, 146, 149, 167, 168, 170, 183, 185, 186, 191, 197, 198, 199, 205, 215, 233, 237, 248, 253, 254, 255, 256, 257, 259, 260, 262, 264, 265, 267, 272, 273, 283, 286, 288, 301, 305, 306, 308, 310, 311, 315, 317, 329, 339, 351, 352, 353, 360, 362, 366, 367, 368, 374, 375, 377, 379, 380, 382, 384, 386, 389, 392, 393, 394, 395, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 435, 439, 440, 447, 451, 457, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 494, 496, 497, 499, 505, 509, 510, 532, 533, 536, 537, 538, 539, 540, 541, 544, 548, 550, 552, 553, 554, 555, 558, 560, 561, 562, 563, 565, 566, 568, 569, 590, 591, 603, 604, 607, 611, 612, 614, 623, 628, 629, 630, 633, 634, 647, 650, 653, 654, 656, 659, 660, 664, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 685, 688, 700, 705, 706, 713, 714, 716, 718, 727, 732, 733, 737, 743, 756, 757, 758, 779, 780, 781, 787, 789, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 809, 810, 815, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 847, 848, 849, 853, 855, 856, 857, 868, 869, 870, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 887, 894, 905, 906, 913, 915, 927, 931, 942, 959, 964, 967, 968, 978, 982, 983, 985, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1013, 1014, 1024, 1029, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "same_kind": 1053, "samesh": [1046, 1047], "samm": [29, 109, 111, 118, 417, 554, 1052, 1053], "samoocha": 1044, "sampl": [2, 3, 6, 9, 12, 22, 23, 24, 25, 30, 31, 32, 35, 37, 39, 40, 41, 44, 46, 47, 51, 54, 55, 56, 57, 58, 63, 78, 79, 80, 84, 88, 90, 93, 97, 98, 101, 102, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 126, 131, 132, 133, 138, 143, 145, 146, 149, 153, 154, 155, 156, 158, 161, 164, 167, 168, 173, 175, 181, 183, 185, 186, 197, 199, 201, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 218, 226, 230, 231, 233, 234, 236, 243, 244, 246, 247, 248, 249, 251, 253, 254, 258, 259, 261, 262, 263, 265, 267, 271, 273, 274, 276, 281, 283, 287, 288, 289, 290, 292, 293, 294, 296, 301, 302, 305, 307, 308, 309, 310, 312, 315, 317, 318, 320, 322, 323, 326, 328, 329, 330, 331, 334, 335, 337, 339, 341, 343, 344, 346, 347, 349, 351, 352, 357, 360, 366, 369, 373, 375, 376, 379, 380, 382, 383, 392, 393, 400, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 427, 428, 429, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 764, 765, 769, 770, 771, 772, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 925, 926, 930, 931, 942, 946, 962, 964, 967, 968, 971, 974, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1020, 1026, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "sample_i": [158, 420, 612, 1050], "sample_id": [360, 375, 498], "sample_interv": 639, "sample_interval_": 1052, "sample_posterior": [162, 628, 983], "sample_s": [56, 231, 352, 794], "sample_score_mean": 263, "sample_score_std": 263, "sample_silhouette_valu": 58, "sample_step": 639, "sample_weight": [22, 178, 197, 210, 215, 233, 316, 321, 322, 348, 380, 394, 400, 410, 417, 421, 427, 433, 438, 444, 445, 448, 450, 460, 461, 466, 470, 483, 484, 485, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 611, 612, 633, 634, 635, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 698, 699, 701, 703, 704, 708, 709, 710, 713, 714, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 797, 800, 801, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 870, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 953, 981, 993, 1007, 1008, 1009, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "sample_weight1": 233, "sample_weight2": 233, "sample_weight_const": 348, "sample_weight_last_ten": 348, "sample_weight_vect": 931, "sample_without_replac": [389, 1042], "samples_weight": 210, "samplewis": [755, 993], "samson": 1043, "samuel": [697, 1018, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "samuela": 1039, "samu\u00ebl": 1043, "san": [146, 377, 418, 1005], "sanchez": [173, 1044, 1045], "sandbox": 403, "sandeep": 1048, "sander": [410, 421, 445, 447, 451, 458, 851, 999, 1045, 1046], "sandi": 1049, "sandip": 1053, "sandra": [1045, 1051], "sandro": [1044, 1051], "sandrocasagrand": [1044, 1045], "sandrovskii": 1043, "sangam": 1051, "sangamswadik": 1051, "sangeeth": 1045, "saniti": [383, 869, 993, 1036, 1037], "sanjabi": 1046, "sanjai": 1050, "sanjai_3": [1051, 1052], "sanjoi": [899, 1005], "sano": 1050, "sanofi": 10, "santa": [157, 1051], "santana": [1047, 1050], "santhanam": 1044, "santhosh": 1047, "santhoshbala18": 1047, "santi": [1041, 1043, 1044], "santiago": 1047, "sap": 10, "sapiro": [415, 532, 538], "saqib": 1044, "sara": 1049, "sarah": [1043, 1045, 1048], "sarahremu": 1051, "sarajpoor": 1051, "sarat": 1047, "sarawagi": 784, "sarra": 1046, "sartaj": 1042, "sasank": 1042, "sashka": [1051, 1052], "sassenhagen": [103, 1048, 1053], "sat": [2, 125, 168, 418], "satellit": 996, "satisfi": [410, 651, 655, 700, 718, 737, 738, 845, 846], "satish": 1044, "sato": 1039, "satrajit": [0, 399, 1036, 1037], "satur": [35, 167, 305], "sauerbrei": 1003, "sauerkraut": 418, "saul": [690, 694, 990, 1043, 1044, 1046], "saurabh": [1040, 1041, 1042, 1043, 1044, 1048], "sauvignon": 311, "saval": 1045, "savard": 1036, "save": [51, 68, 70, 236, 302, 379, 380, 384, 386, 387, 388, 394, 403, 414, 422, 469, 535, 536, 628, 845, 846, 903, 989, 993, 1003, 1009, 1018, 1029, 1036, 1039, 1043, 1046, 1054], "saver": 1013, "savings_statu": 253, "savkomax": 1051, "saw": [94, 198, 201, 1028], "sawtooth": [94, 1028], "say_hello": 954, "sc": [374, 410], "scaja": 1053, "scala": 1014, "scalabl": [40, 42, 60, 164, 172, 174, 231, 251, 276, 320, 352, 380, 410, 417, 418, 449, 492, 503, 590, 641, 807, 818, 829, 831, 843, 866, 875, 877, 905, 907, 910, 911, 985, 988, 990, 993, 1006, 1008, 1015, 1018, 1036, 1039, 1040, 1046, 1047, 1050, 1051], "scalar": [93, 318, 323, 386, 394, 405, 411, 420, 422, 465, 468, 525, 534, 616, 617, 618, 623, 624, 628, 629, 631, 739, 743, 921, 929, 985, 997, 999, 1003, 1007, 1013, 1046, 1047, 1050, 1052], "scalarmapp": 28, "scale": [2, 3, 10, 23, 25, 35, 38, 41, 44, 45, 54, 56, 59, 69, 70, 77, 80, 84, 95, 98, 120, 127, 146, 149, 150, 151, 154, 155, 156, 158, 164, 168, 173, 177, 178, 185, 188, 197, 199, 201, 211, 212, 213, 215, 217, 220, 224, 226, 232, 236, 248, 256, 259, 260, 261, 262, 266, 286, 288, 300, 301, 302, 304, 305, 309, 313, 316, 319, 321, 322, 331, 334, 336, 339, 343, 349, 362, 365, 366, 372, 373, 374, 377, 380, 385, 389, 392, 393, 394, 408, 410, 411, 415, 417, 418, 419, 420, 447, 448, 451, 452, 458, 465, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 502, 511, 515, 516, 525, 535, 539, 541, 542, 548, 550, 551, 562, 563, 583, 591, 592, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 642, 645, 646, 647, 648, 650, 653, 659, 660, 661, 662, 663, 673, 675, 677, 678, 679, 682, 688, 689, 690, 691, 693, 695, 700, 704, 717, 742, 748, 758, 760, 770, 776, 778, 815, 818, 831, 832, 833, 845, 846, 847, 862, 863, 866, 869, 874, 875, 877, 880, 882, 883, 885, 890, 891, 892, 894, 895, 897, 898, 905, 906, 907, 908, 909, 910, 911, 968, 969, 970, 971, 974, 982, 985, 986, 989, 993, 994, 995, 996, 997, 1001, 1007, 1008, 1014, 1015, 1018, 1020, 1027, 1028, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "scale_": [650, 874, 875, 883, 885, 895, 1003, 1041], "scaled_clf": 310, "scaled_pca": 310, "scaled_x_train": 310, "scaler": [4, 69, 71, 126, 144, 164, 213, 214, 231, 236, 238, 240, 273, 286, 291, 304, 309, 310, 313, 320, 339, 342, 362, 385, 411, 414, 491, 659, 660, 673, 675, 688, 865, 874, 875, 877, 881, 882, 883, 885, 890, 891, 892, 893, 894, 895, 896, 997, 1003, 1007, 1015, 1025, 1036, 1041, 1044, 1049], "scaler2": 240, "scalewai": 388, "scaling_": 551, "scalings_": [550, 551], "scanpi": 1053, "scatter": [2, 7, 9, 10, 22, 28, 29, 32, 36, 37, 40, 41, 42, 43, 47, 50, 54, 55, 56, 57, 58, 60, 65, 78, 84, 89, 90, 95, 97, 98, 99, 101, 110, 111, 115, 118, 126, 128, 129, 131, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 167, 173, 177, 180, 187, 189, 193, 194, 195, 198, 199, 200, 206, 209, 210, 211, 214, 218, 219, 220, 221, 222, 223, 226, 231, 232, 234, 243, 244, 245, 246, 247, 248, 249, 254, 260, 262, 274, 283, 286, 289, 290, 291, 292, 293, 294, 295, 299, 305, 307, 308, 310, 319, 328, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 351, 357, 358, 359, 412, 632, 702, 961, 987, 989, 1027, 1028], "scatter_": 702, "scatter_fig": 115, "scatter_kwarg": [2, 11, 73, 130, 167, 702], "scatter_trac": 115, "scatterplot": [83, 176, 259], "scatterpoint": [97, 101, 221, 245, 328], "scenario": [55, 68, 125, 149, 173, 201, 262, 362, 387, 397, 409, 414, 417, 538, 544, 546, 547, 987, 993, 1003, 1046], "scene": [377, 388, 996, 998, 1049], "schapir": [9, 278, 296, 375, 417, 499, 554, 555], "schedul": [125, 300, 367, 677, 678, 679, 862, 863, 1007, 1018, 1043], "scheidegg": 1036, "scheme": [268, 288, 311, 312, 375, 394, 410, 414, 416, 418, 567, 591, 659, 660, 706, 814, 872, 873, 876, 878, 882, 886, 889, 894, 905, 910, 982, 989, 1003, 1007, 1036, 1044, 1047, 1048, 1053, 1054], "scherer": 1042, "scheubrein": 1048, "schloss": 993, "schl\u00fcter": [1036, 1044], "schmerler": 1051, "schmid": [759, 760, 991], "schmidt": [659, 989, 1039], "schmitt": [1046, 1047], "schmitz": 1053, "schneider": [351, 1049], "schoelkopf": 901, "schoentgen": [1044, 1045], "schofield": 1036, "schole": 1048, "scholkopf1997": 415, "scholkopf1998": 1003, "school": [68, 167, 377, 410, 789, 993], "schreiber": [0, 399, 1041, 1042, 1043], "schroeder": [4, 375], "schubert": [410, 421, 445, 451, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050], "schucker": 1042, "schuder": [1044, 1045, 1046], "schuetz": [840, 844], "schuldt": 1040, "schult": 15, "schulz": 1036, "schumach": [1039, 1040, 1041], "schut": 1036, "schwardt": 1036, "schwartz": [1036, 1038, 1050], "schwetlick": [1047, 1048], "sch\u00f6lkopf": [3, 415, 536, 871, 999, 1003, 1008], "sch\u00f6nberger": [1038, 1039], "sch\u00fctze": [415, 591, 991, 993, 995], "sci": [17, 68, 351, 352, 353, 375, 392, 489, 690, 694, 876, 990, 1003, 1029], "scibol": 1047, "scienc": [0, 36, 78, 146, 157, 167, 278, 374, 377, 392, 410, 441, 455, 539, 541, 548, 689, 690, 694, 852, 983, 985, 989, 990, 993, 996, 1005, 1014, 1018, 1023, 1044], "scientif": [0, 30, 136, 137, 138, 231, 369, 374, 378, 392, 397, 410, 453, 463, 502, 1018, 1021], "scientifiqu": 0, "scientist": [983, 1018], "scikera": 1013, "scikit": [4, 6, 8, 10, 11, 13, 15, 29, 30, 48, 53, 68, 69, 107, 113, 114, 115, 116, 119, 125, 127, 130, 143, 146, 158, 161, 162, 164, 167, 168, 169, 170, 173, 178, 185, 186, 197, 198, 199, 215, 225, 228, 236, 237, 238, 239, 240, 251, 253, 256, 264, 268, 269, 271, 273, 276, 278, 283, 285, 288, 290, 311, 314, 324, 329, 343, 351, 352, 356, 357, 360, 362, 367, 368, 369, 372, 374, 375, 376, 377, 379, 380, 383, 386, 387, 388, 389, 393, 394, 400, 402, 403, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 424, 425, 427, 428, 429, 430, 432, 433, 434, 439, 444, 447, 448, 451, 458, 465, 466, 468, 469, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 513, 516, 522, 525, 539, 542, 562, 563, 565, 566, 568, 577, 582, 583, 584, 590, 600, 603, 612, 627, 629, 631, 633, 635, 639, 641, 647, 649, 653, 659, 670, 681, 689, 701, 702, 703, 709, 718, 719, 733, 743, 749, 779, 780, 781, 789, 796, 800, 801, 802, 803, 804, 805, 806, 807, 815, 818, 819, 820, 821, 822, 823, 824, 827, 828, 831, 833, 834, 847, 849, 865, 866, 868, 870, 872, 875, 877, 878, 879, 880, 884, 885, 886, 889, 902, 903, 905, 910, 913, 914, 936, 937, 959, 960, 961, 982, 983, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1006, 1007, 1008, 1009, 1012, 1015, 1017, 1023, 1024, 1025, 1027, 1028, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "scikit_learn": 1013, "scikit_learn_data": [375, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "scipi": [0, 4, 12, 15, 17, 39, 44, 45, 51, 52, 76, 77, 80, 94, 96, 100, 121, 149, 167, 170, 183, 187, 199, 244, 248, 249, 256, 259, 267, 271, 283, 288, 293, 302, 316, 317, 322, 323, 326, 327, 366, 374, 375, 378, 380, 382, 386, 388, 389, 392, 393, 394, 397, 402, 403, 408, 410, 415, 418, 451, 452, 453, 454, 458, 463, 464, 497, 504, 509, 533, 535, 536, 542, 545, 582, 583, 586, 587, 589, 590, 611, 612, 649, 650, 654, 658, 659, 660, 664, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 681, 685, 688, 692, 693, 696, 761, 764, 779, 780, 781, 782, 793, 794, 805, 813, 815, 831, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 868, 877, 878, 883, 884, 885, 888, 892, 895, 896, 905, 907, 908, 910, 911, 939, 943, 944, 948, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 982, 983, 989, 991, 994, 996, 997, 1003, 1007, 1008, 1012, 1014, 1023, 1025, 1028, 1029, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "sckit": 1052, "scls19fr": 1041, "scognamiglio": 417, "scope": [4, 17, 253, 366, 368, 380, 392, 418, 1013, 1014, 1025], "score": [2, 4, 6, 9, 11, 18, 19, 22, 23, 24, 25, 29, 30, 31, 35, 56, 58, 68, 69, 70, 71, 72, 73, 76, 80, 84, 100, 107, 109, 111, 118, 119, 120, 121, 122, 125, 126, 129, 130, 137, 141, 142, 143, 146, 161, 164, 166, 167, 168, 169, 170, 173, 181, 188, 189, 192, 197, 199, 203, 205, 213, 215, 226, 231, 232, 233, 236, 240, 247, 251, 253, 257, 259, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 281, 290, 291, 292, 299, 300, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 322, 323, 326, 327, 329, 330, 339, 346, 351, 352, 356, 362, 375, 380, 382, 385, 393, 394, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 417, 419, 427, 429, 433, 438, 444, 448, 450, 453, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 503, 505, 533, 537, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 610, 611, 612, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 699, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 743, 756, 757, 758, 783, 784, 785, 786, 787, 788, 789, 790, 795, 796, 797, 798, 799, 800, 801, 804, 805, 807, 815, 820, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 863, 865, 885, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 944, 982, 985, 989, 991, 996, 999, 1001, 1003, 1007, 1014, 1015, 1023, 1025, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "score_clf1": 31, "score_clf2": 31, "score_clf3": 31, "score_df": 23, "score_differ": 264, "score_estim": [197, 215], "score_full_data": 161, "score_func": [35, 69, 70, 419, 593, 596, 597, 599, 600, 601, 743, 1036, 1038, 1053], "score_iri": 265, "score_iterative_imput": 161, "score_label": [215, 265], "score_mean": 342, "score_nam": [23, 35, 232, 261, 275, 321, 352, 807, 824], "score_param": [660, 1053], "score_rand": 265, "score_sampl": [247, 288, 289, 290, 296, 394, 416, 470, 533, 542, 564, 678, 798, 799, 801, 804, 805, 815, 850, 851, 861, 865, 909, 999, 1039, 1044, 1046, 1048], "score_simple_imput": 161, "score_std": 342, "score_tim": [261, 414, 828, 829], "score_times_nb": 261, "score_times_svm": 261, "score_typ": [232, 261, 275, 321, 807, 824, 1052], "score_valu": 352, "scorer": [125, 130, 215, 233, 253, 263, 322, 382, 394, 400, 409, 414, 417, 419, 562, 563, 595, 603, 635, 660, 674, 676, 712, 733, 734, 743, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 832, 951, 982, 989, 993, 1001, 1014, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "scorer1_nam": 414, "scorer2_nam": 414, "scorer_": [801, 804, 805, 815], "scorer_nam": [263, 801, 815], "scores_": [176, 177, 593, 596, 597, 599, 600, 601, 645, 646, 660, 1036, 1046], "scores_df": 11, "scores_glm_pure_premium": 215, "scores_matrix": 270, "scores_max": 15, "scores_product_model": 215, "scores_std": [136, 1024], "scoring_inner_cv": 322, "scoring_on_bootstrap": 262, "scoring_weight": 400, "scott": [416, 850, 1036, 1037, 1042, 1044, 1045, 1046, 1051, 1052], "scratch": [381, 443, 993, 1038], "screen": [7, 1049], "screenporch": 119, "screenshot": 378, "script": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 367, 380, 381, 382, 383, 384, 386, 392, 394, 397, 403, 418, 1014, 1017, 1029], "scrollbar": 385, "scrutin": 268, "scsi": 17, "scullei": 410, "sd345": 1029, "sdca": 1013, "sdenton4": 1039, "sdg_param": 330, "se": [146, 220, 377, 397], "seabold": [1039, 1041, 1042], "seaborn": [35, 110, 125, 166, 167, 176, 181, 248, 259, 380, 397, 402, 1013], "seagreen": 191, "seal": 1042, "seamu": 1038, "sean": [1048, 1049, 1051], "seanpwilliam": 1043, "sear": 1042, "search": [4, 25, 44, 52, 69, 70, 71, 72, 122, 141, 143, 145, 146, 149, 164, 215, 232, 233, 248, 251, 253, 258, 260, 263, 264, 266, 271, 276, 281, 283, 285, 287, 302, 307, 320, 339, 345, 351, 362, 369, 377, 378, 380, 382, 392, 394, 404, 410, 411, 414, 417, 418, 419, 421, 444, 449, 451, 453, 458, 459, 462, 465, 472, 473, 479, 503, 516, 523, 558, 559, 560, 561, 565, 566, 567, 580, 600, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 629, 654, 677, 689, 690, 693, 694, 714, 729, 786, 789, 801, 804, 805, 812, 813, 815, 817, 831, 832, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 865, 910, 913, 914, 915, 916, 947, 981, 986, 988, 990, 993, 996, 997, 1007, 1009, 1013, 1014, 1015, 1020, 1021, 1023, 1025, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1053], "search_05p": 122, "search_95p": 122, "search_cv": 69, "searchcv": [393, 1051], "searcher": 1029, "searchforpass": 1052, "searchgrid": 1014, "searchsort": 9, "season": [2, 11, 154, 168, 198, 379], "seasonal_kernel": 154, "seasoncountstru32": 11, "sebastian": [310, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "sebastianraschka": 310, "sebastien": 1044, "sebastin": [1043, 1044], "sebasti\u00e1n": 1042, "seberg": 1037, "sec": [8, 205, 220, 223, 283], "sec65": 1051, "secant": 643, "second": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 375, 382, 384, 386, 394, 406, 409, 410, 414, 415, 417, 418, 420, 465, 468, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 505, 511, 554, 584, 589, 590, 591, 592, 622, 625, 632, 633, 700, 713, 717, 759, 760, 764, 765, 767, 768, 775, 776, 777, 778, 779, 782, 801, 804, 805, 815, 829, 835, 836, 839, 842, 853, 855, 856, 857, 862, 863, 982, 983, 987, 988, 989, 990, 993, 994, 995, 996, 997, 1000, 1003, 1004, 1009, 1020, 1026, 1028, 1051], "secondari": [636, 1040], "secondli": [378, 392, 410, 417, 658, 989, 1029], "sect": 3, "section": [2, 35, 93, 98, 112, 120, 125, 130, 136, 137, 138, 154, 158, 166, 167, 168, 170, 176, 181, 185, 186, 199, 222, 227, 233, 236, 238, 253, 257, 259, 262, 268, 310, 311, 312, 317, 351, 352, 353, 362, 373, 375, 378, 380, 381, 382, 384, 385, 386, 387, 388, 395, 400, 407, 408, 409, 411, 413, 414, 415, 417, 418, 419, 420, 440, 444, 460, 535, 615, 620, 623, 638, 646, 789, 799, 907, 910, 982, 987, 989, 993, 994, 996, 997, 999, 1000, 1007, 1008, 1010, 1012, 1027, 1029, 1036, 1038, 1039, 1040, 1043], "sector": 167, "sector_construct": 167, "sector_manufactur": 167, "sector_oth": 167, "secur": [384, 394, 1013, 1014, 1018, 1031], "sed": [384, 1036], "sedamaki": 1050, "sedykh": 1051, "see": [0, 2, 3, 5, 11, 18, 22, 23, 25, 35, 42, 47, 48, 51, 53, 55, 56, 60, 62, 63, 65, 67, 78, 84, 87, 88, 93, 98, 99, 103, 109, 110, 111, 112, 115, 116, 117, 118, 119, 121, 122, 123, 125, 127, 130, 136, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 167, 168, 170, 173, 176, 177, 178, 181, 188, 198, 199, 200, 201, 203, 214, 215, 218, 220, 228, 230, 233, 236, 237, 238, 240, 244, 245, 246, 252, 253, 254, 256, 258, 259, 260, 261, 262, 266, 268, 269, 270, 273, 274, 275, 278, 283, 289, 290, 292, 296, 305, 311, 312, 315, 316, 317, 318, 319, 320, 321, 328, 339, 343, 346, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 397, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 434, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 610, 611, 612, 615, 620, 623, 624, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 702, 707, 709, 712, 714, 744, 764, 775, 779, 780, 781, 782, 789, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 941, 942, 962, 964, 967, 977, 982, 983, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1018, 1020, 1022, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "seed": [5, 9, 24, 25, 32, 37, 38, 42, 43, 50, 52, 55, 57, 58, 62, 63, 69, 76, 77, 78, 90, 94, 99, 112, 118, 138, 141, 169, 187, 192, 195, 200, 203, 206, 210, 214, 221, 244, 246, 247, 248, 249, 262, 265, 274, 288, 289, 290, 295, 343, 344, 348, 352, 362, 367, 382, 389, 392, 394, 410, 414, 415, 444, 448, 449, 451, 453, 458, 460, 461, 462, 463, 472, 473, 474, 537, 545, 554, 555, 556, 557, 560, 561, 628, 647, 648, 653, 654, 661, 662, 663, 664, 678, 690, 692, 694, 696, 798, 799, 805, 836, 839, 854, 908, 928, 941, 942, 958, 962, 982, 983, 988, 990, 1027, 1028, 1040, 1041, 1045, 1046, 1052], "seeger": [640, 985], "seek": [218, 220, 222, 379, 380, 392, 395, 509, 510, 990, 1021, 1023], "seel": 1050, "seem": [2, 7, 11, 44, 53, 122, 125, 168, 197, 222, 226, 260, 278, 300, 309, 346, 351, 352, 379, 380, 385, 409, 414, 502, 989, 993], "seemingli": [215, 362, 392], "seen": [15, 23, 38, 53, 64, 80, 96, 102, 116, 122, 125, 167, 168, 193, 222, 229, 233, 300, 305, 339, 351, 375, 382, 384, 393, 394, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 426, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 522, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 624, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 968, 974, 982, 988, 993, 996, 997, 1003, 1009, 1018, 1024, 1025, 1027, 1028, 1048, 1049, 1050, 1051, 1052, 1053], "segfault": [367, 381, 1036, 1044, 1049], "seglearn": 1013, "segment": [10, 12, 15, 19, 34, 45, 46, 51, 66, 96, 164, 221, 229, 375, 388, 410, 418, 453, 463, 509, 510, 692, 861, 993, 1013, 1015, 1018, 1044, 1046, 1048], "seguin": 1041, "sei": 418, "seismic_r": [176, 181], "sejourn": 1045, "sel": [400, 419], "seladu": 1052, "seldom": 905, "sele": [1050, 1051], "selecci\u00f3n": 311, "select": [2, 5, 7, 8, 11, 18, 32, 34, 35, 42, 45, 53, 55, 60, 63, 66, 67, 69, 72, 74, 76, 80, 90, 92, 93, 97, 102, 103, 104, 109, 111, 117, 119, 122, 125, 130, 141, 143, 147, 154, 156, 167, 168, 170, 173, 175, 177, 179, 181, 183, 184, 196, 201, 205, 212, 215, 216, 219, 226, 230, 232, 236, 242, 243, 244, 245, 249, 250, 253, 257, 258, 259, 260, 264, 272, 273, 287, 305, 310, 311, 317, 321, 323, 326, 327, 330, 334, 339, 346, 349, 351, 352, 353, 362, 366, 367, 369, 375, 377, 378, 380, 382, 388, 393, 394, 406, 410, 411, 412, 415, 417, 418, 420, 444, 446, 447, 448, 450, 452, 454, 459, 460, 461, 465, 467, 468, 473, 474, 477, 489, 490, 493, 494, 497, 498, 501, 502, 503, 505, 513, 516, 533, 535, 536, 541, 542, 545, 550, 552, 559, 560, 561, 564, 566, 582, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 628, 632, 633, 646, 647, 648, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 672, 674, 677, 679, 683, 684, 692, 693, 698, 713, 717, 719, 755, 789, 793, 794, 798, 799, 801, 804, 805, 806, 807, 815, 827, 828, 829, 831, 833, 847, 848, 849, 851, 853, 855, 856, 857, 865, 866, 870, 875, 881, 885, 902, 905, 906, 910, 913, 914, 915, 916, 921, 962, 963, 987, 988, 990, 992, 993, 994, 996, 997, 999, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1023, 1027, 1028, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "select__k": 982, "select_dtyp": [73, 119, 320, 467], "selected_featur": 170, "selected_features_nam": 170, "selectfdr": [419, 593, 597, 599, 600, 601, 607, 1040, 1042, 1043, 1052], "selectfpr": [380, 419, 593, 596, 599, 600, 601, 607, 1052], "selectfrommodel": [146, 394, 400, 594, 603, 604, 1016, 1031, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052, 1053], "selectfw": [419, 593, 596, 597, 600, 601, 607, 1052], "selectkbest": [70, 72, 142, 143, 319, 362, 380, 400, 411, 419, 582, 593, 596, 597, 599, 601, 607, 982, 1037, 1042, 1052, 1053], "selectkbestselectkbest": [143, 319], "selector": [11, 69, 142, 143, 236, 346, 388, 418, 419, 467, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 1038, 1046, 1048, 1052], "selectormixin": 1047, "selectpercentil": [52, 69, 240, 342, 419, 593, 596, 597, 599, 600, 604, 607, 1037, 1042, 1052, 1053], "selectpercentileselectpercentil": [69, 240], "self": [6, 17, 23, 25, 54, 63, 90, 107, 157, 164, 170, 233, 271, 273, 283, 325, 331, 332, 339, 351, 374, 380, 381, 382, 385, 386, 387, 388, 410, 418, 420, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 501, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 704, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 820, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 950, 951, 953, 954, 959, 967, 996, 1014, 1015, 1016, 1018, 1031, 1038, 1043, 1050], "self_request": 233, "self_training_clf": 329, "self_training_model": [317, 902], "selftrain": 330, "selftrainingclassifi": [317, 329, 330, 331, 400, 1006, 1048, 1053], "selftrainingclassifierifittedselftrainingclassifi": 317, "seljak": 1051, "sell": 73, "selvan": 1048, "semant": [13, 351, 352, 394, 545, 1029, 1030, 1031, 1038], "semi": [6, 17, 29, 54, 68, 107, 118, 128, 138, 151, 157, 231, 234, 299, 307, 317, 332, 336, 339, 342, 343, 353, 369, 375, 394, 489, 505, 536, 589, 591, 677, 730, 831, 865, 869, 900, 901, 902, 910, 991, 996, 999, 1015, 1016, 1031, 1036, 1048, 1051], "semi_supervis": [164, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 369, 400, 994, 1006, 1015, 1037, 1042, 1043, 1050, 1051], "semiconductor": 1018, "semidefinit": [1003, 1008], "semilogi": 230, "semilogx": [136, 186, 272, 1024], "semin": 417, "seminar": 993, "semisupervis": [326, 394], "sen": [164, 175, 200, 203, 216, 305, 650, 658, 672, 679, 680, 1015], "send": [380, 410, 422, 534], "sender": [351, 375], "sendyk": 1045, "seng": 1048, "senger": [0, 1052, 1053, 1054, 1055], "senior": [1003, 1018], "sens": [1, 2, 11, 14, 15, 23, 53, 64, 155, 164, 167, 173, 230, 305, 311, 327, 339, 351, 362, 366, 380, 381, 394, 410, 412, 414, 419, 463, 470, 471, 472, 473, 474, 475, 476, 477, 653, 656, 657, 673, 802, 812, 902, 987, 989, 996, 997, 999, 1003, 1006, 1015], "sensibl": [50, 161, 278, 352, 382, 989, 1003], "sensit": [2, 42, 53, 78, 79, 112, 122, 164, 168, 199, 200, 201, 226, 227, 236, 251, 263, 266, 273, 276, 305, 323, 339, 367, 368, 395, 409, 412, 417, 453, 463, 497, 552, 562, 659, 693, 701, 703, 713, 714, 719, 733, 743, 785, 788, 789, 800, 801, 823, 831, 866, 885, 903, 988, 989, 990, 992, 993, 997, 999, 1007, 1008, 1015, 1020, 1028, 1040, 1054], "sensor": 181, "sent": [125, 410, 834], "sentenc": [68, 351, 353, 375, 395, 418], "sentiment": 1021, "seoeun": 1052, "sep": [90, 268], "sepal": [43, 88, 101, 103, 118, 151, 180, 240, 286, 317, 320, 336, 377, 1003, 1026, 1027], "sepal_col": 320, "separ": [11, 12, 22, 23, 28, 29, 38, 53, 58, 60, 64, 71, 78, 89, 92, 93, 95, 98, 104, 109, 111, 114, 117, 121, 128, 146, 152, 162, 164, 168, 169, 173, 175, 196, 198, 216, 219, 234, 245, 259, 262, 268, 269, 305, 307, 310, 317, 329, 334, 335, 337, 338, 339, 343, 344, 349, 351, 362, 366, 376, 377, 382, 385, 388, 392, 394, 403, 407, 410, 411, 412, 415, 417, 418, 420, 465, 513, 520, 534, 539, 541, 542, 548, 550, 582, 589, 590, 592, 611, 632, 639, 647, 648, 674, 677, 678, 691, 695, 726, 733, 746, 747, 749, 754, 793, 820, 837, 838, 864, 865, 907, 909, 910, 915, 916, 982, 983, 985, 987, 989, 990, 992, 999, 1000, 1003, 1007, 1008, 1015, 1025, 1027, 1028, 1036, 1039, 1041, 1042, 1046, 1048, 1049, 1052, 1053], "seper": 554, "septemb": [735, 993, 1036, 1039, 1042, 1044, 1049, 1052], "seq": 634, "seq_dataset": [1036, 1046], "seqlearn": 392, "sequenc": [10, 109, 118, 185, 221, 382, 394, 411, 414, 415, 417, 418, 504, 513, 554, 562, 563, 570, 571, 582, 583, 589, 590, 592, 647, 801, 804, 812, 831, 865, 889, 945, 946, 956, 964, 967, 1013, 1036, 1039, 1041, 1042], "sequencekernel": 157, "sequenti": [11, 118, 140, 143, 147, 164, 191, 260, 273, 317, 378, 415, 417, 418, 501, 502, 535, 594, 598, 603, 604, 606, 607, 647, 648, 653, 654, 659, 661, 662, 663, 664, 674, 789, 865, 866, 885, 983, 1001, 1007, 1013, 1015, 1016, 1031, 1036, 1045, 1048], "sequentialfeatureselector": [146, 400, 419, 594, 598, 604, 1048, 1049, 1050, 1051, 1052], "sergei": [410, 1038, 1042, 1043, 1044, 1045, 1046], "sergeyf": 1038, "sergio": [1036, 1038, 1039, 1048, 1051], "sergiodsr": 1047, "sergul": [1043, 1044, 1047], "seri": [1, 2, 10, 14, 18, 80, 116, 122, 125, 164, 166, 169, 170, 179, 197, 199, 201, 215, 218, 240, 264, 273, 312, 319, 326, 372, 375, 385, 394, 410, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 542, 563, 691, 695, 702, 743, 746, 747, 749, 791, 822, 827, 828, 831, 921, 984, 989, 990, 994, 996, 1007, 1013, 1015, 1039, 1042, 1043, 1044, 1048, 1051, 1053, 1054], "serial": [394, 403, 424, 949, 1013, 1014, 1036, 1044, 1048, 1053], "serializetostr": 403, "serious": 995, "serum": [146, 377], "serv": [68, 97, 109, 155, 262, 343, 411, 552, 985, 1031, 1050], "server": [0, 146, 366, 377, 378, 497, 1017, 1044], "servic": [0, 2, 227, 236, 380, 384, 403, 1018, 1044], "sess": 403, "session": [382, 386, 392, 397, 1012, 1018, 1029], "set": [1, 2, 3, 4, 5, 6, 9, 11, 12, 14, 18, 23, 24, 25, 28, 29, 32, 35, 39, 40, 42, 43, 44, 47, 48, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 68, 69, 71, 78, 79, 80, 84, 88, 92, 93, 97, 98, 101, 104, 107, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 132, 136, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 176, 180, 181, 182, 185, 186, 188, 190, 192, 193, 194, 196, 197, 198, 199, 202, 205, 210, 211, 215, 218, 219, 220, 226, 227, 228, 229, 231, 232, 233, 236, 240, 243, 245, 247, 248, 252, 254, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 274, 278, 281, 285, 289, 290, 291, 292, 293, 296, 300, 301, 302, 305, 307, 309, 310, 311, 312, 315, 317, 318, 322, 326, 327, 330, 331, 336, 338, 341, 343, 346, 351, 352, 353, 358, 359, 360, 362, 366, 367, 368, 369, 372, 373, 375, 377, 378, 380, 382, 384, 385, 387, 388, 393, 394, 395, 397, 400, 403, 405, 406, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 489, 490, 494, 496, 497, 498, 500, 503, 504, 505, 509, 510, 511, 516, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 700, 701, 702, 703, 704, 714, 715, 720, 722, 724, 727, 728, 729, 730, 731, 732, 735, 739, 741, 746, 747, 749, 751, 752, 754, 757, 780, 781, 783, 784, 785, 786, 788, 790, 791, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 925, 926, 936, 937, 942, 946, 949, 950, 961, 962, 963, 964, 967, 968, 974, 977, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1021, 1023, 1024, 1025, 1028, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "set1": [259, 292, 293], "set_": [233, 400, 1054], "set_alpha": [32, 243, 244, 245, 248, 249], "set_arrai": [10, 221, 229], "set_aspect": [2, 152, 208, 245, 347], "set_autoscaley_on": 40, "set_axis_bgcolor": 80, "set_axis_off": 30, "set_axisbelow": 8, "set_box_aspect": 32, "set_clim": 287, "set_clip_box": [32, 243, 244, 245, 248, 249], "set_color": [5, 208], "set_config": [233, 238, 240, 253, 312, 316, 322, 366, 367, 400, 411, 438, 444, 445, 448, 450, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 598, 611, 612, 627, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1045, 1047, 1050, 1052], "set_constrained_layout_pad": 93, "set_edgecolor": 93, "set_facecolor": [80, 243], "set_fit_request": [233, 322, 400, 438, 444, 445, 448, 450, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 589, 592, 595, 636, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 691, 837, 838, 840, 841, 842, 843, 844, 850, 870, 871, 884, 885, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "set_fmt_str_length": 11, "set_i": 55, "set_index": [23, 109, 122, 186, 215, 259, 311, 352], "set_inverse_transform_request": [534, 582, 872, 885], "set_label": [38, 152, 230], "set_label_posit": 5, "set_linewidth": [10, 221, 229], "set_major_formatt": [218, 220, 223, 283, 288], "set_major_loc": [218, 288], "set_output": [69, 164, 168, 225, 238, 241, 310, 311, 383, 434, 443, 444, 446, 448, 450, 465, 469, 483, 484, 485, 486, 497, 505, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 689, 690, 693, 831, 849, 854, 857, 861, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 1015, 1051, 1052, 1053], "set_param": [96, 103, 113, 119, 122, 168, 169, 177, 185, 186, 190, 201, 205, 231, 236, 253, 272, 286, 315, 342, 352, 383, 394, 410, 411, 417, 420, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 983, 999, 1020, 1027, 1028, 1036, 1042, 1043, 1044, 1049, 1050], "set_partial_fit_request": [450, 535, 667, 668, 669, 677, 678, 679, 833, 834, 837, 838, 840, 841, 842, 843, 844, 862, 885], "set_path_effect": 38, "set_posit": [65, 99, 208, 305], "set_predict_proba_request": [913, 915], "set_predict_request": [233, 483, 484, 485, 553, 612, 636, 645, 646, 913, 914, 915, 916], "set_printopt": 252, "set_prop_cycl": 198, "set_score_request": [233, 253, 322, 400, 438, 444, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 800, 823, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 855, 856, 862, 863, 865, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 993], "set_siz": 290, "set_size_inch": [58, 136, 237], "set_split_request": [802, 803, 808, 810, 819], "set_start_method": 392, "set_stat": 982, "set_tick_param": 243, "set_ticklabel": [43, 88, 99, 194, 351], "set_titl": [6, 8, 13, 23, 25, 28, 29, 30, 32, 40, 41, 43, 51, 53, 55, 58, 62, 63, 70, 73, 78, 88, 90, 98, 103, 109, 114, 116, 120, 126, 128, 130, 131, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 186, 188, 195, 197, 198, 199, 205, 218, 219, 222, 223, 229, 231, 232, 236, 237, 243, 252, 253, 254, 255, 256, 259, 261, 262, 266, 270, 271, 273, 275, 278, 281, 283, 286, 287, 288, 293, 299, 300, 305, 306, 307, 308, 309, 310, 315, 319, 326, 327, 336, 343, 346, 347, 348, 351, 356], "set_transform_request": [233, 483, 484, 485, 534, 583, 589, 591, 592, 636, 868, 871, 877, 885], "set_vis": [13, 32, 287, 293, 305], "set_xlabel": [5, 8, 43, 51, 58, 70, 71, 73, 88, 90, 98, 120, 158, 161, 162, 166, 168, 169, 170, 173, 186, 192, 194, 195, 197, 199, 212, 213, 231, 253, 259, 261, 265, 270, 271, 273, 275, 278, 288, 305, 306, 310, 329, 352, 353, 356], "set_xlim": [29, 40, 58, 73, 78, 90, 114, 128, 162, 168, 195, 197, 202, 231, 243, 263, 265, 278, 288, 299, 305, 307, 308, 309, 310, 316, 322, 347], "set_xscal": [186, 202], "set_xtick": [2, 6, 8, 29, 41, 58, 62, 103, 128, 132, 168, 170, 188, 213, 231, 243, 270, 271, 281, 299, 301, 307, 308, 336], "set_xticklabel": [6, 8, 78, 103, 132, 152, 168, 170, 270, 271, 281], "set_ylabel": [5, 6, 8, 28, 32, 43, 51, 58, 63, 70, 71, 73, 78, 88, 90, 98, 103, 109, 116, 120, 158, 168, 173, 186, 188, 192, 194, 195, 197, 199, 201, 212, 231, 243, 253, 259, 261, 265, 270, 271, 273, 281, 288, 305, 306, 310, 315, 329, 346, 352, 356, 1025], "set_ylim": [6, 8, 29, 40, 58, 70, 90, 114, 127, 128, 158, 168, 177, 195, 197, 198, 231, 243, 263, 275, 281, 288, 299, 305, 307, 308, 310, 316, 322, 329, 347], "set_yscal": [120, 197], "set_ytick": [2, 29, 41, 58, 62, 103, 128, 161, 162, 170, 188, 213, 243, 270, 299, 301, 307, 308, 336, 353], "set_yticklabel": [103, 152, 161, 162, 170, 270, 353], "set_zlabel": [43, 88, 194], "set_zord": 95, "setattr": 382, "setdefault": [15, 920], "setdiff1d": 345, "seth": 1042, "sethdandridg": 1040, "setminu": 1009, "setosa": [43, 88, 99, 101, 268, 269, 377, 505, 1020, 1027], "setp": [6, 8, 270, 274], "settabl": 993, "settingwithcopywarn": 168, "setup": [266, 268, 366, 378, 382, 386, 388, 996, 1021], "setuptool": [378, 1054], "seuclidean": [451, 458, 700, 779, 780, 781, 996, 1044, 1047, 1048], "seuclideandist": 700, "seung": 415, "seven": [375, 986], "seventh": [512, 1005], "sever": [0, 2, 7, 10, 11, 23, 25, 29, 32, 35, 53, 54, 55, 59, 72, 89, 112, 125, 128, 130, 133, 143, 146, 149, 154, 155, 164, 167, 173, 181, 186, 197, 201, 217, 218, 221, 222, 223, 224, 230, 245, 254, 259, 264, 273, 283, 285, 300, 305, 318, 346, 351, 352, 366, 374, 375, 377, 380, 382, 385, 388, 392, 394, 406, 408, 410, 411, 414, 416, 417, 418, 420, 448, 450, 465, 488, 500, 509, 510, 539, 556, 557, 560, 561, 564, 565, 566, 571, 589, 590, 592, 611, 646, 647, 653, 689, 690, 691, 692, 693, 694, 798, 799, 801, 804, 805, 815, 833, 834, 840, 841, 842, 843, 844, 864, 865, 872, 889, 913, 914, 915, 916, 928, 982, 985, 990, 993, 994, 996, 1001, 1003, 1007, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1020, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1052, 1053], "sevin": 1044, "sewook": 1046, "sex": [69, 146, 167, 169, 185, 186, 240, 320, 322, 377, 497, 1001, 1027], "sex_mal": 167, "seyedsaman": 1050, "sf": [146, 259, 317, 375, 419, 493, 603], "sfm": 146, "sfs_backward": 146, "sfs_forward": 146, "sfu": [410, 443], "sgd": [5, 6, 9, 77, 89, 102, 111, 121, 122, 131, 138, 152, 153, 164, 175, 178, 182, 188, 189, 204, 211, 216, 226, 247, 267, 289, 296, 300, 301, 318, 335, 340, 341, 344, 348, 351, 357, 362, 368, 505, 513, 632, 650, 667, 668, 669, 672, 677, 678, 679, 680, 862, 863, 982, 997, 1015, 1016, 1031, 1036, 1039, 1040, 1041, 1043, 1047, 1049], "sgdclassifi": [5, 6, 204, 205, 206, 207, 208, 209, 210, 231, 267, 330, 341, 351, 362, 366, 368, 386, 394, 407, 408, 418, 639, 641, 642, 643, 647, 659, 667, 669, 905, 910, 985, 989, 994, 1007, 1008, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "sgdoneclasssvm": [211, 226, 318, 909, 999, 1007, 1049, 1051, 1052, 1053, 1054], "sgdregressor": [8, 208, 366, 368, 392, 408, 647, 650, 668, 672, 677, 680, 863, 906, 911, 989, 1007, 1038, 1040, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1054], "sgi": 351, "sgkf": [414, 819], "sgm": 6, "sgml": [6, 366], "sh": [270, 384, 388, 982], "sh_color": 222, "sh_err": 222, "sh_lle": 222, "sh_point": 222, "sh_tsne": 222, "sha256": [6, 1051], "shack": [1046, 1047, 1048], "shade": [18, 51, 144, 180, 286, 291, 335, 415], "shader": 405, "shadi": [1051, 1052], "shadow": [97, 101, 102, 221, 328, 345, 353, 418], "shafer": 68, "shagun": 1042, "shah": [1040, 1041, 1042, 1048], "shahebaz": 1044, "shahriar": 1038, "shaikh": [0, 364, 370, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "shail": 1048, "shakerimoff": 1050, "shalev": [667, 668, 989, 1007], "shalil": 1044, "shall": 154, "shallow": [386, 417, 562, 563, 920], "shamsi": 1044, "shandeng123": 1050, "shane": [63, 1045, 1048, 1051], "shanghai": [690, 694, 990], "shangwu": [1044, 1045], "shankar": 1046, "shanmuga": 1042, "shanno": 989, "shannon": [558, 565, 913, 915, 990, 1009], "shantanu": 784, "shao": [1048, 1049, 1050], "shape": [2, 3, 4, 6, 7, 8, 9, 11, 12, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 39, 44, 45, 46, 49, 50, 51, 52, 53, 56, 58, 59, 64, 68, 72, 73, 78, 93, 94, 96, 110, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 138, 142, 144, 150, 151, 153, 154, 155, 156, 161, 162, 164, 168, 169, 185, 186, 197, 199, 204, 206, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 224, 226, 229, 230, 231, 232, 233, 235, 236, 243, 245, 247, 248, 249, 257, 259, 261, 262, 265, 266, 268, 269, 283, 288, 289, 293, 296, 299, 301, 307, 308, 315, 317, 320, 321, 322, 328, 329, 331, 336, 339, 342, 343, 344, 347, 348, 351, 352, 360, 366, 373, 374, 375, 380, 382, 394, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 927, 930, 931, 936, 940, 942, 944, 947, 955, 957, 962, 964, 968, 969, 970, 971, 972, 973, 974, 975, 976, 983, 988, 989, 993, 994, 995, 996, 997, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1025, 1026, 1028, 1029, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1053], "shape_fit_": [907, 908, 909, 910, 911], "shape_img": 586, "sharad": 1044, "sharan": [1043, 1044], "share": [32, 83, 128, 167, 248, 351, 360, 362, 366, 367, 382, 388, 403, 410, 415, 418, 550, 669, 705, 709, 798, 799, 804, 805, 987, 1000, 1017, 1036, 1038, 1044, 1046, 1048, 1051], "shared_yax": 115, "sharedmem": 1044, "sharei": [2, 11, 32, 73, 90, 98, 103, 131, 158, 168, 197, 199, 205, 261, 270, 273, 288, 306, 311, 345, 346, 352], "sharex": [2, 5, 13, 32, 71, 90, 98, 131, 158, 168, 199, 261, 273, 288, 329, 1025], "sharma": [1040, 1042, 1044, 1045, 1047, 1048, 1050, 1053], "sharmadharmp": 1050, "sharon": [4, 375], "sharova": 1043, "sharp": [2, 168, 1000, 1003], "sharper": 727, "shashank": [1042, 1048], "shaun": 1037, "shawpan": 1042, "shaymernaturalint": 1050, "she": [380, 895, 896, 1046], "shea": [1044, 1045], "shebanov": [1044, 1045], "sheep": 1018, "sheer": [380, 1018], "sheerman": 1036, "sheet": 1038, "shekhar": 1042, "shell": [381, 388, 392, 1020, 1029], "shellyfung": 1051, "shen": 1049, "sheng": 1046, "shengxiduan": 1042, "shenhanc78": 1044, "sheni": 1048, "shenk": 1044, "shenoi": 1043, "sherlock": [629, 983], "sheth": 1044, "shetti": 1049, "shi": [410, 453, 463, 692], "shibata": 1046, "shiebler": 1042, "shield": 394, "shift": [11, 34, 36, 42, 47, 62, 66, 164, 176, 221, 248, 288, 302, 305, 343, 412, 416, 441, 449, 459, 462, 470, 513, 516, 690, 694, 851, 874, 1003, 1015, 1030, 1031, 1036, 1040, 1044], "shifted_gaussian": 247, "shifted_opposite_lof_scor": 851, "shih": [842, 995], "shiki": 1047, "shilt": 1039, "shinehid": 1049, "shinitski": 1053, "shinnar": 1049, "shinsuk": 1051, "ship": [17, 130, 162, 357, 367, 378, 397, 418, 989, 1036, 1045], "shiqiao": [0, 399, 1036, 1037], "shirsat": 1051, "shiva": [1051, 1052], "shivam": [1044, 1045, 1046], "shivamgargsya": [1043, 1047, 1049], "shivan": 1041, "shivram": 1044, "shiyu": 1045, "shleifer": [1042, 1043], "shmelkov": 1041, "shoaib": 1051, "shoemak": 1047, "shogo": [1051, 1052], "shooter23": [1048, 1049], "shop": 1018, "short": [3, 88, 119, 126, 188, 257, 301, 351, 380, 388, 414, 418, 422, 989, 990, 996, 1017, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "short_nam": 15, "shortcom": 989, "shortcut": [388, 403, 420], "shorten": [380, 1008, 1049], "shorten_param": 260, "shorter": [2, 155, 246, 392, 410, 415, 451, 458, 564, 698, 995, 999, 1029, 1047], "shortest": [37, 385, 389, 689, 947, 990, 1049], "shortest_path": 1049, "shorthand": [56, 394, 411, 468, 562, 563, 866, 867, 1039], "shortlog": 384, "shortname_slic": 15, "shota": 1042, "should": [2, 3, 4, 6, 7, 11, 13, 15, 23, 25, 29, 35, 51, 107, 109, 112, 115, 119, 122, 125, 146, 161, 167, 173, 176, 177, 181, 197, 199, 215, 226, 231, 232, 233, 236, 253, 259, 262, 265, 266, 268, 273, 278, 283, 306, 307, 312, 328, 339, 346, 352, 362, 366, 367, 368, 375, 378, 379, 380, 382, 384, 385, 387, 388, 389, 393, 394, 397, 400, 403, 405, 407, 409, 410, 412, 414, 415, 417, 418, 419, 420, 421, 422, 424, 427, 433, 438, 441, 443, 444, 445, 446, 448, 450, 451, 453, 455, 458, 459, 460, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 497, 504, 509, 510, 517, 522, 524, 525, 528, 533, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 594, 595, 598, 603, 608, 609, 611, 612, 621, 628, 629, 630, 632, 633, 634, 636, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 688, 690, 691, 692, 693, 694, 695, 696, 697, 702, 710, 728, 729, 743, 767, 772, 775, 779, 780, 781, 782, 783, 786, 789, 790, 793, 800, 802, 803, 808, 809, 810, 811, 818, 819, 820, 821, 823, 827, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 884, 885, 886, 888, 892, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 925, 929, 931, 934, 942, 950, 954, 959, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 982, 983, 987, 988, 989, 990, 993, 994, 996, 998, 999, 1000, 1003, 1006, 1007, 1008, 1009, 1014, 1017, 1018, 1025, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "shouldn": [244, 249, 380], "show": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 157, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 326, 327, 328, 329, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 356, 357, 358, 359, 360, 367, 368, 380, 386, 392, 393, 397, 400, 406, 407, 409, 412, 414, 415, 416, 417, 419, 420, 439, 503, 560, 594, 595, 632, 633, 698, 699, 701, 702, 703, 714, 807, 824, 847, 865, 917, 918, 919, 982, 985, 987, 988, 990, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1007, 1008, 1014, 1024, 1025, 1029, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054], "show_top10": 375, "show_vers": [366, 378, 380, 388, 397, 1044], "show_weight": 918, "show_with_diff": 96, "showcas": [107, 110, 115, 119, 122, 123, 125, 382], "shown": [23, 46, 55, 87, 107, 111, 115, 122, 158, 166, 168, 181, 187, 195, 215, 223, 226, 231, 236, 245, 259, 262, 265, 268, 278, 288, 300, 301, 305, 306, 307, 326, 346, 351, 352, 380, 385, 395, 407, 410, 411, 414, 415, 416, 418, 420, 439, 461, 633, 699, 701, 702, 703, 714, 801, 815, 917, 919, 988, 989, 990, 993, 996, 1003, 1007, 1008, 1009, 1029, 1040, 1045, 1046, 1047, 1050], "shown_imag": 219, "shrankhla": 1051, "shreesha": [1052, 1053], "shreya": 1046, "shrink": [24, 80, 93, 123, 168, 181, 192, 195, 201, 218, 247, 305, 346, 415, 560, 561, 677, 679, 852, 862, 863, 907, 908, 909, 910, 911, 996, 1008, 1027], "shrink_threshold": [294, 852, 996, 1036, 1048], "shrinkag": [31, 75, 77, 80, 81, 100, 124, 164, 294, 423, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 540, 544, 550, 562, 563, 801, 989, 1003, 1015, 1016, 1031, 1036, 1040, 1041, 1043], "shrinkage_": [76, 77, 474, 476], "shrinkage_coeffici": 481, "shrunk": [76, 100, 305, 312, 321, 423, 474, 476, 477, 480, 481, 482, 550, 886, 987, 1007, 1030, 1031], "shrunk_cov": [423, 480, 482], "shrunk_cov_scor": 100, "shrunk_covari": [412, 1053], "shrunkcovari": [76, 100, 412, 470, 471, 474, 475, 476], "shrunken": [852, 1036], "shu": [1037, 1040, 1044], "shuangchi": [1050, 1051], "shubernetskii": 1038, "shubh": 1047, "shubhal": 1053, "shubham": [1043, 1046], "shubhanshu": 1048, "shubhraneel": 1050, "shuckle16": 1042, "shuffl": [8, 11, 13, 18, 19, 22, 25, 30, 46, 58, 59, 93, 115, 116, 118, 125, 130, 162, 181, 205, 206, 211, 226, 260, 264, 265, 272, 283, 312, 326, 327, 328, 329, 341, 351, 352, 362, 375, 389, 394, 404, 470, 475, 489, 490, 492, 493, 496, 498, 504, 512, 513, 514, 515, 516, 520, 523, 525, 532, 538, 540, 541, 547, 548, 554, 555, 556, 557, 565, 566, 568, 569, 603, 606, 608, 659, 660, 667, 668, 669, 673, 675, 677, 678, 679, 688, 801, 803, 804, 805, 806, 807, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 862, 863, 886, 905, 906, 907, 910, 941, 942, 962, 964, 988, 989, 994, 1001, 1007, 1008, 1024, 1029, 1031, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "shuffle_param": 346, "shuffled_arrai": 967, "shufflesplit": [254, 261, 346, 414, 803, 809, 811, 821, 831, 1024, 1036, 1037, 1039, 1041, 1042], "shuhei": 1049, "shuhua": 1048, "shutil": [52, 70, 411], "shuttl": 352, "shuzh": 1046, "shwartz": [667, 668, 989, 1007], "shwed": 1044, "shyam": 1049, "si": 68, "siam": [410, 414, 453, 461, 463, 536, 542], "siang": 1039, "siavash": 1049, "siavrez": 1050, "sibsp": [169, 320], "sid": 1043, "siddharth": [1043, 1047], "side": [2, 25, 57, 122, 190, 201, 215, 220, 229, 253, 305, 343, 351, 362, 375, 392, 407, 411, 414, 415, 418, 427, 433, 516, 989, 990, 993, 995, 1008, 1045], "sidhpura": 1051, "siebert": 1044, "sierra": [532, 538], "sievert": 1046, "siftikha": 1044, "sig": 94, "sigh": 351, "sigkdd": [374, 375, 512, 677, 886, 1003, 1005], "sigma": [12, 44, 45, 52, 78, 100, 122, 257, 259, 406, 412, 415, 417, 615, 650, 987, 989, 991, 995, 998, 1028], "sigma2": [535, 542], "sigma_": [412, 645, 646, 1049, 1053], "sigma_0": [152, 153, 158, 420, 615], "sigma_0_bound": [158, 615], "sigma_i": [995, 1003], "sigma_k": [415, 987], "sigmod": [410, 451, 458, 851, 999], "sigmoid": [22, 23, 24, 25, 372, 417, 438, 453, 536, 562, 621, 640, 644, 766, 775, 778, 862, 863, 907, 908, 909, 910, 911, 998, 1008, 1031, 1049, 1053], "sigmoid_kernel": [766, 991], "sign": [38, 77, 84, 94, 97, 111, 181, 248, 299, 346, 380, 410, 415, 418, 545, 583, 590, 607, 636, 637, 659, 660, 667, 669, 675, 676, 677, 678, 736, 743, 905, 909, 940, 942, 958, 989, 993, 998, 1003, 1007, 1008, 1028, 1036, 1040, 1045, 1049, 1051, 1054], "signal": [12, 79, 93, 94, 95, 102, 120, 122, 149, 154, 155, 164, 166, 175, 176, 182, 183, 185, 186, 191, 192, 196, 198, 216, 249, 318, 408, 410, 412, 418, 419, 420, 423, 476, 504, 522, 527, 532, 535, 538, 542, 546, 547, 626, 645, 646, 647, 648, 653, 654, 664, 665, 673, 685, 686, 687, 786, 822, 831, 879, 989, 993, 1010, 1015, 1018, 1023, 1030, 1031], "signatur": [233, 351, 352, 375, 489, 490, 558, 559, 565, 566, 595, 611, 612, 660, 674, 676, 712, 743, 807, 824, 827, 829, 832, 878, 953, 982, 1043, 1049, 1053], "signif": [4, 985, 1025], "signifi": [382, 410, 582, 812, 998], "signific": [2, 53, 115, 122, 141, 142, 144, 164, 201, 215, 251, 259, 276, 281, 283, 309, 351, 362, 374, 375, 392, 410, 413, 414, 417, 505, 533, 535, 550, 551, 628, 659, 660, 667, 668, 669, 677, 678, 679, 820, 830, 905, 907, 908, 909, 910, 911, 992, 993, 996, 1015, 1036, 1038, 1039, 1040, 1044], "significantli": [2, 22, 23, 25, 35, 76, 77, 109, 115, 120, 122, 125, 146, 167, 168, 169, 197, 201, 205, 213, 215, 253, 259, 283, 316, 317, 352, 353, 362, 367, 384, 410, 415, 417, 418, 423, 470, 475, 480, 481, 539, 541, 548, 559, 566, 647, 648, 653, 654, 661, 662, 663, 664, 685, 693, 845, 846, 985, 989, 990, 996, 1001, 1008, 1036, 1038, 1039, 1043, 1044, 1049, 1050, 1051], "sijaranamu": 1042, "silenc": 233, "silent": [233, 418, 582, 861, 1003, 1041, 1042, 1044, 1045, 1049, 1050], "silhouett": [18, 34, 35, 36, 47, 55, 56, 63, 66, 164, 352, 380, 448, 513, 793, 794, 1015, 1036, 1040], "silhouette_avg": 58, "silhouette_sampl": [58, 794, 1040, 1042, 1044, 1052], "silhouette_scor": [36, 47, 56, 58, 352, 380, 410, 1036, 1040, 1042, 1044, 1046, 1050], "silicon": 378, "silk": 1050, "sillanp\u00e4\u00e4": 1036, "silva": [407, 689, 990, 1047, 1049, 1054], "silverman": [850, 1051], "silvermann": 416, "silverthorn": 1036, "silvestrin": 1053, "sim": [415, 1027], "sim4n6": 1051, "simd": [394, 1051], "similar": [2, 3, 5, 10, 15, 18, 23, 24, 32, 35, 47, 49, 55, 58, 73, 84, 93, 97, 109, 122, 145, 149, 156, 166, 167, 168, 169, 181, 197, 199, 211, 218, 220, 221, 222, 226, 232, 233, 249, 253, 256, 259, 262, 265, 266, 267, 278, 281, 283, 305, 318, 338, 343, 346, 352, 353, 362, 366, 372, 374, 376, 379, 380, 382, 385, 386, 388, 389, 392, 394, 403, 406, 407, 410, 413, 414, 415, 417, 418, 419, 420, 421, 441, 444, 445, 451, 453, 455, 456, 504, 509, 510, 537, 583, 590, 591, 592, 611, 678, 693, 696, 704, 706, 716, 720, 726, 729, 730, 732, 735, 739, 741, 756, 761, 762, 787, 793, 794, 797, 798, 799, 827, 832, 877, 898, 901, 905, 906, 907, 908, 926, 982, 985, 986, 988, 989, 990, 992, 994, 996, 997, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1020, 1028, 1031, 1036, 1040, 1041, 1042, 1044, 1048, 1049], "similarli": [2, 10, 35, 53, 90, 126, 168, 170, 181, 186, 197, 227, 236, 253, 259, 299, 305, 321, 339, 362, 367, 376, 378, 382, 385, 394, 403, 405, 406, 413, 414, 418, 730, 731, 739, 784, 785, 788, 823, 988, 990, 991, 993, 1000, 1007, 1008, 1010, 1020, 1024, 1044, 1050, 1052], "simmon": 1018, "simon": [989, 1018, 1039, 1040, 1049, 1050, 1051, 1052], "simona": [1047, 1048, 1049], "simonamaggio": [1047, 1048, 1049], "simoncw": 1046, "simonpl": 1041, "simpl": [2, 25, 53, 69, 73, 76, 83, 84, 93, 115, 120, 156, 164, 168, 181, 198, 214, 239, 260, 278, 284, 287, 296, 297, 310, 319, 335, 351, 353, 357, 362, 378, 380, 382, 383, 384, 385, 387, 392, 393, 394, 395, 400, 406, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 424, 431, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 463, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 515, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 787, 789, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 985, 987, 988, 989, 990, 992, 993, 996, 1003, 1005, 1007, 1009, 1014, 1015, 1018, 1020, 1029, 1033, 1036], "simplefilt": 403, "simpleimput": [69, 130, 161, 162, 169, 228, 238, 240, 316, 319, 362, 394, 628, 629, 630, 983, 1003, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "simpleimputersimpleimput": [69, 130, 169, 228, 238, 316, 319], "simplepipelin": 233, "simpler": [215, 339, 366, 379, 410, 415, 989, 994, 1027, 1041], "simplest": [51, 414, 990, 1027, 1028], "simplex": [24, 671, 798, 880], "simpli": [37, 84, 128, 149, 157, 222, 234, 236, 268, 296, 317, 318, 366, 375, 380, 382, 385, 392, 394, 412, 413, 414, 415, 417, 418, 486, 696, 763, 766, 872, 944, 985, 993, 994, 995, 996, 1007, 1021, 1029, 1043, 1044, 1045], "simplic": [2, 12, 29, 181, 343, 351, 353, 394, 416, 996, 997, 998, 1008], "simplif": [376, 379, 385, 1036, 1042], "simplifi": [2, 69, 185, 233, 339, 379, 381, 385, 410, 413, 516, 563, 864, 865, 993, 995, 1003], "simplist": [197, 418], "simul": [77, 95, 125, 167, 191, 234, 259, 1018], "simultan": [18, 53, 94, 263, 267, 321, 346, 359, 372, 406, 410, 982, 993, 994, 1009, 1018, 1043], "sin": [2, 12, 17, 37, 94, 110, 121, 122, 127, 129, 141, 149, 155, 156, 158, 176, 177, 181, 191, 198, 203, 220, 232, 249, 295, 306, 316, 322, 345, 358, 359, 420, 517, 616, 700, 765, 1028], "sin_transform": 2, "sina": [306, 1049], "sinayev": 1038, "sinc": [0, 2, 3, 9, 11, 23, 32, 35, 47, 51, 53, 64, 68, 69, 70, 94, 119, 136, 143, 146, 149, 154, 167, 168, 170, 173, 179, 197, 199, 201, 214, 227, 231, 232, 233, 245, 248, 253, 255, 259, 261, 262, 268, 269, 273, 278, 281, 283, 285, 286, 311, 318, 319, 331, 336, 339, 346, 351, 352, 353, 362, 367, 375, 378, 380, 381, 382, 384, 385, 388, 392, 393, 394, 397, 400, 403, 407, 410, 411, 412, 413, 414, 415, 417, 418, 420, 427, 438, 442, 446, 447, 451, 454, 457, 470, 483, 484, 485, 486, 497, 528, 537, 538, 539, 540, 541, 547, 548, 550, 551, 552, 553, 554, 556, 558, 560, 562, 563, 564, 565, 568, 570, 589, 590, 592, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 633, 634, 639, 652, 656, 659, 660, 667, 669, 674, 675, 676, 677, 678, 680, 693, 708, 710, 736, 743, 751, 752, 783, 790, 800, 801, 804, 805, 815, 823, 826, 827, 828, 829, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 863, 865, 870, 895, 896, 900, 901, 905, 907, 910, 913, 915, 942, 950, 982, 985, 986, 987, 989, 990, 994, 995, 996, 997, 999, 1001, 1003, 1007, 1008, 1009, 1018, 1020, 1029, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sinclert": 1044, "sind": 418, "sine": [2, 149, 154, 155, 164, 191, 203, 242, 243, 244, 245, 246, 247, 248, 250, 358, 376, 616, 798, 799, 992, 1009, 1015], "singer": [278, 667, 668, 736, 989, 993, 1007, 1008], "singh": [1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "singl": [8, 32, 37, 46, 50, 51, 53, 56, 59, 60, 70, 95, 108, 109, 110, 118, 119, 129, 134, 146, 149, 155, 161, 164, 168, 170, 173, 181, 197, 199, 201, 237, 239, 248, 253, 255, 268, 278, 301, 319, 321, 339, 351, 352, 353, 357, 359, 362, 366, 367, 374, 375, 380, 385, 387, 388, 389, 392, 393, 394, 400, 407, 408, 409, 411, 413, 414, 415, 417, 418, 419, 435, 438, 441, 442, 446, 447, 448, 450, 455, 465, 467, 468, 494, 495, 497, 507, 510, 535, 554, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 583, 593, 600, 601, 603, 607, 628, 633, 635, 644, 667, 668, 674, 677, 678, 679, 691, 693, 695, 711, 712, 722, 723, 724, 725, 726, 737, 738, 739, 742, 775, 786, 798, 799, 801, 804, 805, 815, 822, 823, 827, 828, 830, 831, 834, 842, 845, 846, 850, 862, 863, 864, 874, 875, 878, 879, 880, 885, 886, 900, 901, 913, 914, 915, 916, 921, 957, 961, 980, 982, 988, 989, 990, 993, 994, 996, 998, 1000, 1001, 1003, 1007, 1008, 1009, 1013, 1015, 1018, 1020, 1027, 1029, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "single_prior": 158, "single_source_shortest_path_length": 389, "singleton": [367, 809, 928, 1049, 1052], "singular": [93, 389, 406, 410, 413, 452, 454, 483, 484, 485, 486, 522, 525, 535, 539, 541, 542, 545, 548, 550, 551, 658, 673, 674, 675, 688, 942, 989, 990, 992, 1030, 1031, 1042, 1043, 1054], "singular_": 658, "singular_values_": [535, 542, 545, 1043], "sinha": [1044, 1053], "sinhrk": [1040, 1041], "sink": [642, 985], "sinoisoid": 122, "sinusoid": [94, 110, 122, 181, 232, 646, 986, 1028], "sio": 403, "siola": [1051, 1052], "sip\u0151cz": [1046, 1047, 1048, 1052], "siqi": 1050, "siqueira": 1046, "sir": 377, "sister": 1013, "site": [378, 380, 383, 388, 397, 417, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 1018, 1044], "situat": [23, 42, 55, 70, 166, 167, 203, 226, 262, 380, 388, 403, 412, 414, 415, 417, 469, 529, 535, 583, 878, 881, 893, 903, 987, 989, 995, 996, 1006, 1009, 1044], "situp": 377, "sivamani": 1046, "sivaprasad": [1039, 1040], "six": [146, 198, 219, 309, 377, 1045], "sixteenth": 1005, "sixth": 375, "size": [1, 2, 3, 4, 6, 9, 10, 11, 12, 22, 25, 29, 31, 35, 37, 38, 40, 42, 44, 45, 50, 52, 53, 55, 56, 58, 59, 60, 64, 65, 71, 76, 77, 78, 79, 80, 83, 84, 90, 93, 94, 95, 96, 97, 100, 102, 112, 121, 122, 125, 126, 127, 142, 149, 151, 152, 155, 156, 164, 166, 168, 169, 176, 177, 178, 179, 183, 187, 192, 195, 198, 199, 200, 203, 210, 211, 218, 223, 226, 229, 230, 231, 232, 233, 235, 236, 245, 252, 255, 257, 259, 261, 262, 264, 265, 266, 278, 289, 290, 291, 299, 302, 306, 307, 308, 309, 312, 316, 319, 321, 322, 327, 331, 335, 337, 338, 339, 346, 348, 351, 352, 353, 356, 366, 367, 368, 375, 376, 380, 385, 389, 392, 393, 394, 397, 400, 406, 407, 408, 410, 412, 414, 415, 418, 420, 421, 423, 445, 446, 447, 449, 450, 451, 458, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 494, 495, 496, 516, 528, 535, 537, 539, 541, 548, 558, 559, 560, 561, 562, 563, 565, 566, 584, 588, 589, 595, 633, 634, 644, 658, 667, 668, 680, 684, 693, 696, 706, 720, 739, 741, 744, 782, 794, 803, 806, 807, 811, 818, 821, 822, 823, 826, 829, 831, 840, 841, 842, 844, 847, 848, 849, 850, 851, 853, 855, 856, 857, 862, 863, 880, 882, 894, 899, 903, 907, 908, 909, 910, 911, 913, 914, 915, 916, 919, 941, 945, 946, 956, 957, 959, 962, 968, 983, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1000, 1003, 1005, 1007, 1008, 1009, 1017, 1018, 1023, 1025, 1027, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1051, 1052], "size_cluster_i": 58, "size_mb": 351, "sizeabl": [818, 821], "skaft": 1050, "skeleton": [1029, 1039], "sketch": [173, 368, 372, 389, 408, 640, 641, 642, 958, 1031, 1048], "skew": [7, 122, 200, 230, 236, 305, 321, 372, 414, 640, 641, 642, 643, 881, 893, 989, 1003, 1031, 1039, 1043, 1052], "skewed": [643, 1043], "skewedchi2sampl": [639, 640, 641, 642, 985, 1043, 1050, 1051], "skf": [245, 414, 820], "skfold": 329, "skforecast": 1013, "skill": 993, "skimag": [44, 45, 374, 1028], "skip": [367, 380, 382, 389, 405, 418, 469, 569, 647, 648, 653, 661, 662, 663, 672, 682, 903, 1029, 1040, 1043, 1046, 1048, 1050, 1052], "skip_complet": 628, "skip_comput": 1046, "skip_parameter_valid": [469, 903, 1052], "skipper": [1039, 1041, 1042], "skiptestwarn": 382, "skl2onnx": 403, "sklear": 381, "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 366, 367, 368, 369, 373, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 396, 397, 400, 403, 405, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 982, 983, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1055], "sklearn2pmml": 1013, "sklearn_api": 0, "sklearn_assume_finit": 366, "sklearn_cache_": 315, "sklearn_enable_debug_cython_direct": 381, "sklearn_fail_no_openmp": 378, "sklearn_graph_cache_": 285, "sklearn_is_fit": [106, 107, 1015], "sklearn_panda": 1013, "sklearn_run_float32_test": 380, "sklearn_site_joblib": 1044, "sklearn_tut_workspac": 1029, "sklearn_warning_as_error": 367, "sklearn_xarrai": 1013, "sklearnex": 397, "skop": [1013, 1031], "skorch": 1013, "sktime": [11, 1013], "sl": 197, "slack": 1007, "slai": 351, "slama": [1046, 1048], "slep": [380, 394, 1011], "slep000": 395, "slep009": [1047, 1049, 1050], "slep010": [382, 1047], "slep011": 1014, "slep018": [240, 382, 1051], "slep020": 395, "slice": [2, 11, 15, 118, 125, 206, 220, 223, 231, 291, 294, 318, 319, 335, 375, 381, 382, 389, 411, 465, 468, 494, 495, 509, 547, 640, 775, 779, 782, 921, 945, 946, 964, 1048, 1050, 1054], "slice_": [494, 495, 1051], "sliceabl": 948, "slide": [260, 645, 989, 1012, 1013], "slight": [119, 202, 317, 403, 417, 450, 1046], "slightli": [2, 23, 25, 62, 80, 112, 115, 119, 122, 126, 130, 146, 149, 150, 151, 169, 176, 197, 215, 221, 223, 233, 236, 267, 273, 283, 315, 336, 353, 379, 380, 392, 407, 410, 417, 418, 420, 422, 447, 589, 590, 592, 639, 659, 804, 805, 905, 907, 910, 941, 942, 982, 989, 1003, 1007, 1008, 1045, 1049, 1050, 1052, 1054], "slishak": 1050, "sloan": 0, "slogdet": 940, "slope": [168, 195, 199, 214, 410, 492, 724, 749, 991, 993], "sloppili": 418, "sloth": [9, 296, 375, 499], "slow": [285, 305, 351, 366, 374, 378, 380, 415, 418, 448, 700, 879, 880, 884, 907, 910, 942, 990, 996, 1014, 1028, 1043], "slower": [70, 96, 115, 119, 161, 232, 268, 353, 394, 417, 418, 419, 447, 452, 454, 539, 541, 548, 556, 557, 558, 559, 564, 565, 566, 567, 589, 590, 592, 632, 633, 634, 644, 660, 673, 675, 688, 693, 705, 833, 837, 838, 986, 990, 991, 992, 994, 996, 1009, 1029, 1040, 1047], "slowest": [119, 941, 942], "slowli": [392, 394, 545, 942], "slug": 68, "smacof": [691, 1051], "small": [3, 9, 11, 19, 25, 37, 46, 47, 51, 53, 68, 76, 80, 84, 89, 98, 110, 112, 119, 121, 122, 154, 156, 167, 168, 177, 183, 187, 188, 198, 201, 203, 212, 214, 215, 245, 253, 259, 266, 271, 273, 285, 296, 300, 302, 305, 307, 309, 317, 323, 326, 331, 339, 344, 346, 351, 352, 368, 373, 375, 377, 380, 383, 389, 394, 403, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 423, 442, 444, 446, 447, 448, 450, 459, 460, 464, 476, 497, 499, 539, 541, 542, 548, 556, 557, 558, 562, 563, 565, 583, 590, 591, 603, 608, 609, 651, 655, 656, 657, 659, 660, 680, 683, 684, 747, 804, 805, 819, 830, 833, 862, 863, 870, 898, 907, 910, 942, 982, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1005, 1006, 1009, 1014, 1018, 1027, 1028, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "smaller": [6, 22, 38, 44, 53, 80, 109, 125, 146, 154, 155, 158, 161, 182, 186, 188, 201, 230, 278, 289, 290, 299, 305, 323, 339, 346, 352, 380, 406, 408, 410, 412, 414, 415, 417, 419, 440, 441, 447, 451, 455, 457, 515, 535, 536, 558, 559, 560, 561, 562, 563, 565, 566, 594, 611, 620, 634, 647, 648, 650, 651, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 673, 675, 683, 684, 693, 710, 798, 804, 805, 851, 854, 878, 879, 897, 898, 905, 913, 914, 915, 916, 942, 987, 989, 990, 992, 993, 994, 996, 997, 999, 1003, 1005, 1007, 1008, 1009, 1014, 1029, 1044, 1049, 1053], "smallest": [78, 79, 197, 283, 323, 356, 375, 410, 412, 419, 528, 542, 631, 655, 656, 657, 683, 684, 691, 695, 696, 801, 804, 805, 815, 820, 875, 922, 1009, 1049], "smallest_ab": 323, "smallest_coef": [80, 528], "smari": [1045, 1046, 1047], "smart": [233, 444, 460, 461, 591], "smartphon": 1018, "smedbergm": 1042, "smedemark": 1046, "smile": [73, 375, 1050], "sminchisescu": [643, 985], "smirnov": 1048, "smith": [1042, 1043, 1044, 1045, 1046, 1048], "sml": [861, 998], "smo": [905, 906], "smola": [415, 418, 536, 871, 1003, 1008], "smolskii": 1051, "smooth": [2, 44, 45, 52, 146, 154, 190, 198, 213, 311, 339, 377, 395, 410, 416, 417, 420, 449, 450, 538, 539, 540, 547, 558, 559, 560, 561, 565, 566, 567, 591, 592, 620, 623, 677, 840, 841, 842, 844, 882, 886, 894, 913, 914, 915, 916, 989, 995, 1003, 1007, 1008, 1009, 1029], "smooth_idf": [418, 591, 592], "smoothened_coin": [44, 45], "smoother": [2, 3, 122, 168, 301, 416], "smoothli": 374, "smt": 1052, "smtp": [375, 493], "smujjiga": 1046, "sn": [35, 110, 125, 166, 167, 176, 181, 248, 259], "snake": [319, 321, 583, 886, 1003], "snapshot": [403, 560, 561, 1014], "sne": [10, 164, 217, 218, 219, 220, 222, 224, 283, 515, 526, 693, 1015, 1030, 1031], "snippet": [107, 362, 380, 385, 388, 392, 405, 417, 418, 419, 983, 1003, 1017, 1049], "snowhit": 1047, "snr": 52, "snuderl": 1040, "sny": 10, "snyder": [693, 990], "so": [2, 7, 10, 11, 15, 25, 40, 46, 53, 54, 59, 63, 79, 115, 118, 119, 120, 121, 125, 129, 149, 154, 167, 169, 173, 177, 197, 198, 226, 233, 236, 253, 259, 278, 283, 289, 290, 293, 300, 301, 306, 311, 312, 316, 329, 339, 351, 353, 360, 362, 366, 367, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 388, 389, 394, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 497, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 706, 709, 717, 727, 757, 779, 789, 798, 799, 800, 801, 804, 805, 807, 808, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 895, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 942, 959, 968, 982, 983, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1003, 1005, 1006, 1007, 1008, 1013, 1014, 1018, 1027, 1028, 1029, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053], "soar": 1051, "sobkevich": 1048, "sobolev": 1040, "soc": [17, 375, 1029], "socastro": [1046, 1052], "socg2006": 448, "social": [167, 395, 410, 1011, 1018], "societi": [146, 377, 410, 412, 470, 475, 542, 628, 881, 893, 989, 1007], "sodhani": 1042, "soft": [102, 131, 132, 380, 394, 570, 571, 901, 909, 1007, 1018, 1041], "softmax": [417, 562, 659, 660, 989, 996, 997], "softw": 989, "softwar": [0, 146, 366, 377, 380, 388, 392, 394, 403, 418, 628, 636, 659, 983, 1018], "soil_typ": 236, "sokalmichen": [451, 458, 700, 779, 780, 781, 996], "sokalmichenerdist": 700, "sokalsneath": [451, 458, 700, 779, 780, 781, 996], "sokalsneathdist": 700, "sok\u00f3\u0142": 1053, "sole": [65, 392, 410], "soledad": 1048, "soler": [0, 399], "solid": [9, 29, 31, 121, 152, 209, 210, 226, 236, 296, 307, 1018], "solido": 1011, "solntz": 351, "solosil": 1049, "solut": [44, 176, 181, 186, 188, 202, 211, 226, 232, 318, 339, 378, 382, 394, 403, 406, 409, 410, 412, 414, 415, 418, 419, 450, 452, 454, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 611, 647, 649, 651, 653, 655, 656, 657, 659, 661, 663, 665, 666, 667, 668, 669, 670, 673, 675, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 798, 799, 815, 854, 862, 863, 986, 987, 989, 990, 992, 997, 999, 1007, 1008, 1012, 1018, 1024, 1027, 1029, 1036, 1039, 1049, 1050, 1051], "solutu": 1044, "solutusimmensu": 1044, "solv": [3, 4, 64, 149, 186, 231, 259, 281, 379, 380, 381, 382, 385, 392, 410, 412, 414, 415, 420, 448, 454, 463, 479, 532, 538, 539, 540, 544, 546, 547, 548, 549, 636, 638, 647, 653, 655, 656, 665, 666, 671, 673, 675, 678, 686, 687, 688, 835, 905, 906, 909, 942, 984, 987, 989, 990, 993, 994, 1007, 1008, 1009, 1012, 1013, 1018, 1022, 1025, 1029, 1042, 1046, 1049], "solvabl": 410, "solver": [13, 28, 31, 32, 44, 64, 164, 175, 186, 188, 189, 190, 197, 199, 205, 212, 213, 215, 216, 299, 300, 301, 302, 312, 322, 323, 351, 386, 392, 394, 397, 405, 410, 422, 453, 463, 472, 473, 479, 503, 534, 536, 541, 542, 545, 548, 550, 647, 648, 649, 653, 654, 659, 660, 661, 662, 663, 664, 667, 669, 670, 671, 673, 675, 677, 681, 682, 685, 688, 689, 690, 692, 694, 696, 789, 815, 831, 836, 839, 862, 863, 907, 908, 909, 910, 911, 987, 990, 993, 994, 997, 1007, 1008, 1013, 1015, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "solver_": [673, 675], "solver_opt": 671, "somani": 1048, "some": [0, 1, 2, 3, 6, 7, 11, 17, 22, 23, 25, 35, 42, 48, 51, 53, 54, 56, 60, 65, 69, 72, 76, 78, 79, 84, 93, 110, 111, 115, 119, 122, 123, 125, 126, 127, 130, 131, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 170, 173, 176, 178, 180, 181, 185, 186, 187, 191, 192, 197, 198, 201, 205, 206, 211, 214, 215, 218, 220, 226, 230, 233, 236, 244, 245, 246, 252, 253, 254, 259, 260, 261, 262, 265, 267, 273, 278, 281, 286, 289, 294, 300, 301, 305, 310, 316, 317, 318, 319, 320, 321, 322, 323, 335, 336, 338, 339, 346, 348, 351, 352, 353, 360, 362, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 400, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 438, 444, 445, 448, 450, 452, 454, 460, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 497, 500, 509, 510, 516, 524, 525, 534, 535, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 582, 583, 589, 591, 592, 595, 607, 610, 611, 612, 633, 634, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 690, 691, 693, 694, 698, 699, 701, 702, 703, 708, 709, 716, 721, 727, 728, 739, 740, 741, 747, 755, 757, 758, 764, 783, 785, 788, 789, 790, 795, 798, 800, 802, 803, 808, 810, 819, 820, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 925, 926, 950, 961, 982, 983, 985, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1020, 1025, 1027, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "some_funct": [380, 932], "some_integ": 414, "some_iter": 380, "some_param": 380, "somebodi": 395, "someestim": 379, "somehow": 168, "someon": [380, 384, 394, 1036], "someth": [167, 219, 278, 351, 380, 382, 383, 384, 388, 418, 993, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "sometim": [70, 130, 166, 253, 259, 301, 352, 362, 367, 368, 380, 382, 384, 386, 393, 394, 410, 412, 415, 417, 418, 450, 535, 536, 539, 541, 542, 870, 871, 872, 920, 988, 989, 990, 993, 998, 1003, 1004, 1008, 1020, 1028, 1033, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052], "somewhat": [346, 362, 368, 380, 382, 415, 417, 907, 910, 989, 1008, 1009], "somewher": [386, 993, 1029], "somya": 1044, "son": [377, 983], "song": 990, "soni": [10, 1046, 1048], "sonni": 1041, "sonniv": [1051, 1052], "sonoiya": 1046, "sonoma": 311, "soon": [79, 394, 1027], "sooner": 1053, "sophist": [983, 995], "sorbaro": 1041, "sorensen": 415, "soriano": 1045, "sornarajah": 1041, "sorri": 1044, "sorro": 1045, "sorski": [1050, 1051], "sort": [2, 6, 8, 10, 17, 18, 22, 58, 68, 71, 107, 112, 119, 122, 129, 146, 154, 176, 181, 197, 198, 215, 235, 259, 260, 263, 274, 295, 345, 351, 358, 359, 380, 384, 388, 389, 394, 414, 417, 418, 420, 535, 542, 556, 567, 582, 595, 611, 618, 698, 713, 719, 730, 731, 739, 755, 784, 785, 788, 790, 801, 828, 840, 841, 842, 843, 844, 845, 846, 853, 855, 856, 857, 860, 870, 876, 878, 879, 882, 884, 886, 894, 907, 910, 942, 947, 989, 996, 999, 1003, 1018, 1029, 1036, 1040, 1046, 1047, 1048, 1050, 1051, 1054], "sort_graph_by_row_valu": [389, 1051], "sort_index": 278, "sort_result": [845, 846, 853, 855, 856, 857, 1048], "sort_valu": [69, 169, 170, 240, 248, 259, 270, 311, 312], "sort_whats_new": 384, "sorted_idx": [123, 315], "sorted_importances_idx": 169, "sortofamudkip": [1051, 1052], "sought": 782, "soumirai": 1046, "sound": [146, 362], "sounder": 1042, "sourav": [1043, 1046], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 374, 377, 379, 380, 381, 383, 384, 386, 388, 389, 392, 393, 397, 403, 406, 411, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 990, 1003, 1009, 1013, 1015, 1018, 1028, 1029, 1046, 1050, 1054], "south": [9, 125, 167, 296, 375, 416], "south_y": 167, "sp": [2, 167, 322, 983, 1028], "sp_version": [199, 671], "space": [2, 6, 8, 17, 29, 44, 46, 51, 55, 56, 58, 59, 61, 63, 68, 69, 72, 84, 93, 95, 101, 103, 114, 118, 122, 128, 143, 146, 149, 155, 173, 181, 198, 218, 219, 220, 222, 230, 231, 232, 236, 237, 244, 249, 267, 270, 271, 283, 292, 293, 307, 317, 343, 351, 352, 353, 360, 362, 366, 372, 375, 376, 377, 380, 387, 392, 393, 394, 406, 408, 410, 413, 415, 416, 417, 418, 420, 444, 448, 449, 450, 453, 463, 465, 466, 467, 468, 483, 484, 485, 489, 499, 533, 535, 536, 539, 540, 541, 542, 544, 545, 550, 574, 583, 589, 590, 592, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 633, 634, 639, 641, 642, 643, 644, 689, 690, 691, 693, 694, 695, 697, 700, 801, 804, 805, 807, 815, 824, 835, 845, 846, 853, 854, 855, 856, 865, 870, 871, 877, 882, 897, 898, 899, 918, 946, 985, 986, 987, 988, 989, 991, 993, 994, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1020, 1027, 1029, 1030, 1031, 1036, 1037, 1039, 1044, 1045, 1046, 1050, 1051, 1052], "spacek": 1041, "spain": 311, "spam": [582, 710, 742, 840, 993, 995, 1018], "span": [11, 53, 76, 122, 231, 253, 256, 375, 410, 418, 550, 637, 801, 804, 993, 1028], "spanish": 1013, "spannbauer": 1048, "sparciti": 352, "spare": [374, 675, 676], "spark": [375, 1014], "sparrai": 1053, "spars": [4, 5, 10, 12, 15, 17, 28, 32, 37, 38, 52, 53, 55, 68, 75, 76, 77, 79, 81, 92, 94, 104, 114, 128, 164, 166, 175, 176, 182, 185, 186, 189, 191, 192, 196, 213, 216, 230, 232, 252, 260, 266, 283, 302, 316, 320, 323, 330, 350, 353, 354, 360, 366, 372, 374, 375, 376, 380, 382, 383, 384, 385, 392, 393, 394, 403, 410, 411, 417, 418, 420, 421, 425, 432, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 458, 460, 461, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 488, 489, 490, 497, 498, 504, 509, 524, 525, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 586, 587, 589, 590, 591, 592, 594, 595, 604, 605, 606, 607, 608, 609, 610, 630, 631, 632, 634, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 713, 714, 715, 730, 731, 732, 735, 739, 740, 741, 755, 756, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 793, 794, 797, 800, 801, 804, 805, 815, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 923, 924, 925, 926, 931, 939, 942, 943, 946, 947, 948, 956, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 983, 986, 989, 990, 991, 993, 994, 996, 1006, 1008, 1009, 1014, 1015, 1016, 1027, 1028, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "sparse_cg": [351, 673, 675, 688, 989, 1037, 1043, 1045, 1046, 1050, 1052], "sparse_coef_": [647, 653, 661, 663, 1036], "sparse_encod": [543, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 683, 684, 685, 686, 687, 1036, 1043, 1044, 1046, 1050], "sparse_encode_parallel": 1036, "sparse_format": [528, 1053], "sparse_func": [1042, 1048], "sparse_input_": 872, "sparse_lasso": 183, "sparse_output": [2, 119, 240, 311, 319, 322, 567, 872, 876, 878, 884, 889, 1003, 1051, 1052], "sparse_output_": [465, 552], "sparse_symmetric_arrai": 979, "sparse_threshold": [168, 465, 468, 1044], "sparsearrai": 1047, "sparsecod": [102, 415, 532, 538, 541, 549, 1043, 1044, 1046, 1048, 1050], "sparsecodingmixin": 1036, "sparsefunc": [389, 408, 1049], "sparsefuncs_fast": [389, 408], "sparsepca": [93, 532, 534, 535, 536, 538, 540, 541, 542, 543, 546, 547, 1036, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1054], "sparser": [53, 176, 188, 415, 472, 479, 540, 544, 989, 996, 1007], "sparserandomproject": [219, 230, 897, 1005, 1037, 1042, 1050, 1052, 1053], "sparsetool": 1043, "sparsifi": [5, 181, 366, 659, 660, 667, 668, 669, 677, 678, 679, 905, 977, 1038], "sparsiti": [12, 28, 43, 80, 99, 164, 175, 181, 182, 190, 208, 212, 213, 216, 232, 346, 352, 366, 394, 412, 415, 417, 419, 502, 503, 528, 532, 538, 539, 540, 541, 544, 546, 547, 548, 647, 653, 658, 659, 677, 679, 722, 724, 725, 874, 880, 885, 890, 986, 989, 996, 1003, 1015, 1023, 1028, 1038], "sparsity_en_lr": 188, "sparsity_l1_lr": 188, "sparsity_l2_lr": 188, "sparsity_ratio": 366, "spatial": [45, 47, 53, 170, 181, 214, 301, 375, 394, 410, 421, 445, 447, 451, 453, 458, 680, 693, 761, 764, 779, 780, 781, 782, 793, 794, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 989, 996, 1003, 1038, 1042, 1049, 1052], "spawn": [366, 392, 801, 815, 826, 827, 828, 1047], "speak": [352, 366, 380, 1007], "spearman": [170, 636, 637, 984], "spearmanr": 170, "spec": [1051, 1052], "speci": [1, 14, 88, 164, 236, 284, 297, 351, 373, 416, 499, 707, 790, 850, 909, 920, 993, 999, 1015, 1031, 1036], "special": [121, 167, 187, 215, 278, 293, 311, 339, 374, 376, 382, 386, 392, 394, 410, 413, 415, 465, 468, 554, 556, 560, 826, 917, 982, 987, 989, 991, 992, 993, 994, 996, 1009, 1043, 1046, 1048, 1050], "special_charact": [917, 1009], "species_nam": [9, 296], "specif": [2, 9, 10, 18, 25, 32, 42, 53, 60, 63, 68, 70, 115, 125, 130, 154, 157, 167, 168, 173, 201, 215, 253, 254, 259, 278, 305, 315, 316, 320, 343, 351, 352, 353, 362, 366, 367, 375, 380, 383, 385, 386, 388, 392, 394, 397, 403, 405, 408, 410, 411, 414, 415, 417, 418, 419, 420, 434, 497, 504, 535, 552, 558, 565, 568, 569, 570, 571, 575, 589, 592, 594, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 641, 644, 647, 648, 653, 659, 673, 688, 698, 700, 713, 714, 747, 801, 802, 803, 808, 809, 810, 815, 828, 841, 934, 936, 937, 956, 969, 970, 971, 987, 989, 990, 992, 993, 995, 996, 998, 1000, 1001, 1003, 1007, 1009, 1010, 1011, 1012, 1017, 1029, 1036, 1040, 1044, 1045, 1046, 1047, 1050, 1051, 1053], "specifi": [2, 18, 25, 53, 93, 119, 120, 125, 150, 153, 155, 156, 157, 186, 198, 205, 243, 253, 267, 366, 367, 374, 378, 380, 382, 389, 393, 394, 400, 403, 407, 410, 411, 414, 415, 417, 419, 420, 422, 424, 430, 438, 442, 446, 451, 453, 464, 465, 468, 470, 471, 473, 474, 475, 476, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 516, 528, 532, 534, 538, 539, 541, 542, 547, 548, 553, 558, 560, 561, 562, 563, 565, 568, 569, 584, 585, 594, 595, 598, 603, 611, 612, 621, 632, 633, 634, 639, 644, 647, 648, 649, 652, 653, 654, 656, 657, 659, 660, 661, 662, 663, 664, 666, 669, 670, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 688, 692, 699, 701, 703, 710, 712, 730, 731, 739, 743, 755, 772, 780, 781, 784, 785, 788, 801, 803, 804, 805, 807, 808, 810, 814, 815, 818, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 840, 841, 843, 844, 845, 846, 850, 855, 878, 879, 880, 883, 884, 886, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 937, 944, 977, 983, 989, 990, 992, 993, 996, 1000, 1001, 1003, 1006, 1007, 1008, 1024, 1028, 1036, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "spector": 414, "spectral": [12, 16, 20, 34, 42, 44, 47, 53, 66, 68, 164, 219, 220, 328, 330, 351, 352, 353, 380, 418, 450, 452, 453, 454, 463, 470, 471, 472, 473, 474, 475, 476, 477, 489, 512, 514, 592, 689, 690, 691, 692, 693, 696, 720, 796, 996, 1006, 1015, 1030, 1031, 1036, 1037], "spectral_clust": [44, 64, 1044, 1046, 1048, 1049, 1050, 1051, 1053], "spectral_embed": [394, 990, 1037, 1040, 1042, 1044, 1046, 1049, 1050, 1051, 1053], "spectralbiclust": [406, 454, 1038, 1042, 1043, 1047], "spectralclust": [42, 319, 410, 441, 996, 1036, 1037, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "spectralcoclust": [17, 19, 406, 452, 1038, 1043, 1047], "spectralembed": [50, 218, 219, 220, 689, 690, 691, 693, 990, 1037, 1042, 1046, 1050, 1051, 1053], "spectrum": [71, 525, 545, 696, 942, 1018, 1025, 1044], "speech": [418, 993], "speed": [44, 45, 55, 68, 96, 107, 115, 162, 168, 183, 186, 190, 236, 283, 317, 327, 351, 353, 368, 369, 380, 383, 389, 392, 394, 405, 407, 410, 415, 417, 418, 421, 444, 445, 448, 449, 450, 451, 453, 458, 460, 461, 462, 463, 532, 533, 611, 628, 633, 634, 635, 640, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 682, 685, 693, 798, 799, 807, 829, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 880, 942, 982, 985, 990, 992, 994, 1007, 1018, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "speedi": 366, "speedup": [322, 366, 415, 417, 651, 655, 658, 1036, 1037, 1038, 1039, 1051], "speer": 1038, "spell": 418, "spend": 418, "spent": [283, 311, 381, 386, 829, 1051], "sphere": [109, 164, 217, 218, 221, 222, 223, 224, 283, 352, 416, 520, 590, 689, 690, 691, 692, 693, 765, 928, 987, 991, 996, 1015], "sphere_data": 220, "sphereclust": 1013, "spheric": [32, 55, 83, 126, 220, 245, 247, 248, 296, 376, 765, 798, 799, 989, 992, 996, 1013], "sphinx": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 367, 380, 384, 394, 397, 402, 1029, 1036, 1043], "sphinxext": [380, 397, 402], "sphx_glr_auto_examples_applications_svm_gui": 1036, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1036, "sphx_glr_auto_examples_svm_plot_svm_nonlinear": 1008, "spidlen": [693, 990], "spie": [146, 377], "spielman": 1046, "spike": 168, "spikebh": 1050, "spikhalskii": 1041, "spiki": 2, "spin": 388, "spine": [5, 13, 32, 208, 305], "spirit": 415, "spite": 995, "spline": [164, 175, 176, 216, 274, 288, 517, 518, 519, 673, 866, 880, 884, 1013, 1015, 1049], "spline_": 2, "splines_df": 2, "splinetransform": [2, 198, 236, 318, 880, 1003, 1049, 1051, 1052], "split": [2, 3, 4, 9, 11, 13, 15, 22, 24, 25, 29, 30, 68, 98, 109, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 136, 142, 146, 166, 167, 170, 181, 192, 193, 197, 200, 205, 215, 227, 236, 244, 245, 252, 253, 254, 257, 259, 264, 266, 269, 273, 278, 286, 292, 299, 301, 306, 307, 312, 319, 321, 329, 339, 351, 353, 360, 375, 380, 387, 393, 394, 397, 400, 407, 409, 410, 415, 417, 418, 419, 438, 443, 444, 473, 474, 480, 481, 498, 532, 538, 540, 543, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 590, 592, 595, 603, 648, 652, 654, 656, 662, 664, 666, 674, 676, 696, 705, 706, 718, 732, 738, 758, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 845, 846, 862, 863, 886, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 964, 982, 985, 989, 990, 996, 999, 1000, 1001, 1003, 1007, 1009, 1014, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "split0_test_precis": [801, 815], "split0_test_scor": [801, 815, 1042], "split0_train_scor": [801, 815, 1042], "split1_test_scor": [801, 815], "split1_train_scor": [801, 815], "split2_test_scor": 801, "split_cod": 415, "split_sign": [532, 538, 543], "splitter": [2, 233, 321, 322, 394, 400, 414, 438, 473, 565, 566, 568, 569, 595, 603, 648, 652, 654, 656, 660, 662, 664, 666, 674, 676, 801, 803, 804, 805, 806, 807, 815, 816, 817, 820, 821, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 913, 914, 915, 916, 1009, 1014, 1042, 1043, 1044, 1045, 1052, 1053, 1054, 1055], "splot": [244, 249], "splt": 198, "sply88": 1050, "spmatrix": 1053, "spolski": 418, "sport": [17, 375], "spot": [51, 228, 410], "spotifi": 1011, "spottabl": 386, "spread": [2, 38, 220, 260, 305, 326, 327, 328, 331, 346, 366, 380, 410, 453, 463, 516, 882, 894, 902, 993], "spring": [2, 11, 168], "springer": [112, 113, 124, 258, 407, 410, 414, 415, 417, 521, 536, 560, 561, 691, 695, 697, 706, 721, 727, 741, 742, 757, 798, 913, 914, 990, 993, 994, 1000, 1009], "sprint": [379, 380, 1011, 1036], "spuriou": [339, 388, 1003, 1049, 1050, 1051], "spy": 191, "sq": 770, "sqeuclidean": [36, 451, 458, 779, 780, 781], "sqft": 236, "sql": 374, "sqr": 38, "sqrt": [10, 78, 79, 80, 96, 102, 113, 136, 170, 176, 178, 221, 223, 238, 243, 244, 245, 248, 249, 259, 344, 346, 410, 417, 418, 420, 464, 470, 471, 472, 473, 474, 475, 476, 477, 539, 541, 548, 558, 559, 560, 561, 565, 566, 620, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 700, 732, 764, 765, 770, 885, 898, 913, 914, 915, 916, 985, 989, 990, 993, 995, 1005, 1050], "squar": [2, 3, 11, 59, 69, 77, 78, 79, 82, 83, 85, 94, 95, 103, 112, 123, 125, 126, 146, 149, 154, 164, 166, 167, 175, 176, 178, 179, 181, 186, 187, 193, 194, 197, 199, 202, 207, 214, 215, 216, 229, 230, 232, 246, 274, 309, 317, 318, 320, 336, 351, 372, 377, 380, 386, 389, 394, 410, 412, 413, 415, 416, 417, 421, 422, 433, 441, 443, 444, 445, 447, 448, 450, 451, 455, 458, 460, 461, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 502, 532, 538, 540, 542, 544, 546, 547, 548, 550, 553, 555, 557, 559, 560, 561, 563, 566, 569, 571, 591, 592, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 612, 616, 623, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 686, 687, 688, 689, 691, 693, 695, 697, 710, 722, 723, 724, 725, 751, 752, 759, 760, 764, 770, 771, 786, 791, 792, 831, 838, 839, 847, 848, 851, 852, 853, 855, 856, 863, 866, 885, 905, 906, 908, 910, 911, 912, 914, 916, 940, 966, 979, 984, 986, 987, 996, 997, 1001, 1007, 1009, 1015, 1016, 1027, 1028, 1031, 1036, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "square_dist": 1048, "squared_epsilon_insensit": [668, 677, 679, 906, 989, 1042], "squared_error": [5, 11, 102, 122, 123, 318, 417, 559, 560, 561, 563, 566, 672, 677, 679, 694, 914, 916, 1007, 1009, 1049, 1052, 1053], "squared_hing": [204, 346, 667, 677, 905, 912, 989, 1008], "squared_loss": [392, 1049], "squareform": 170, "squash": [236, 384, 420, 532, 538, 543, 549], "squeez": [73, 155, 156, 236, 283, 305, 1028], "sr": 1018, "sr_color": 222, "sr_err": 222, "sr_lle": 222, "sr_point": 222, "sr_tsne": 222, "srajan": 1044, "sre": 1051, "srebro": 1007, "srep30750": 410, "sri": [672, 989, 1043, 1044], "sridharan": 1041, "sriharsha": [1044, 1045], "srikantan": 989, "srimukh": 1048, "srinath": [1050, 1051], "srinivasan": [1044, 1047], "sripada": 1048, "srivastava": [1039, 1051], "srivatsan": [1042, 1043, 1046], "srvanrel": 1042, "ss": 414, "sse": 444, "sseg": 1041, "ssrn": [197, 215], "sss": 821, "ssvm": 392, "st": [45, 65, 259, 320, 1039, 1042, 1044], "st30": 331, "st50": 331, "st_pipelin": 330, "sta4273": 645, "stabil": [35, 113, 120, 167, 219, 264, 305, 346, 352, 394, 406, 447, 651, 655, 671, 843, 862, 863, 881, 893, 941, 983, 989, 992, 1003, 1014, 1020, 1036, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "stabilis": 176, "stabl": [2, 25, 158, 167, 191, 195, 199, 283, 316, 346, 352, 378, 380, 384, 386, 389, 394, 397, 414, 418, 422, 472, 473, 479, 534, 542, 656, 673, 675, 688, 693, 725, 753, 941, 942, 989, 995, 996, 1003, 1014, 1032, 1036, 1037, 1042, 1047, 1049, 1053], "stack": [73, 108, 110, 119, 133, 134, 161, 164, 197, 228, 236, 255, 288, 360, 379, 388, 392, 394, 408, 416, 465, 467, 468, 497, 516, 563, 566, 568, 569, 613, 628, 629, 631, 654, 674, 702, 826, 828, 866, 870, 878, 879, 885, 967, 983, 1013, 1014, 1015, 1016, 1017, 1031, 1036, 1039, 1043, 1044, 1045, 1046, 1047], "stack_method": [417, 568], "stack_method_": [417, 568, 569], "stacking_regressor": 130, "stackingclassifi": [315, 362, 394, 400, 417, 569, 983, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "stackingregressor": [130, 315, 394, 400, 417, 568, 983, 1046, 1047, 1048, 1049, 1050, 1053, 1055], "stackingregressorinot": 130, "stackoverflow": [385, 388, 392], "stade": 1040, "stage": [0, 5, 24, 70, 109, 114, 120, 123, 253, 378, 384, 394, 405, 410, 417, 449, 554, 555, 560, 561, 562, 563, 589, 590, 592, 603, 990, 1003, 1012, 1044, 1048], "staged_decision_funct": [554, 560, 562], "staged_predict": [109, 120, 123, 417, 554, 555, 560, 561, 562, 563, 1036, 1048], "staged_predict_proba": [121, 124, 554, 560, 562, 1036], "staged_scor": [554, 555], "stagewis": 109, "stagg": 1049, "stai": [2, 11, 24, 35, 102, 167, 352, 379, 380, 384, 394, 395, 998, 1017, 1042], "stairstep": 266, "stalei": [1045, 1046], "stall": [379, 383], "stallei": 1048, "stan": [843, 1053], "stand": [262, 353, 384, 392, 415, 532, 538, 546, 547, 597, 610, 679, 706, 718, 737, 738, 758, 787, 789, 796, 992, 993, 999], "standalon": [386, 659, 905], "standard": [9, 10, 11, 18, 24, 30, 32, 53, 59, 68, 69, 71, 78, 79, 84, 94, 109, 112, 114, 115, 116, 117, 118, 126, 130, 146, 149, 154, 156, 158, 167, 176, 182, 186, 195, 197, 206, 218, 219, 220, 231, 236, 248, 253, 254, 257, 258, 259, 260, 262, 305, 310, 337, 351, 366, 367, 372, 373, 374, 376, 377, 378, 380, 382, 383, 385, 386, 389, 392, 394, 397, 403, 405, 410, 412, 413, 414, 418, 420, 447, 469, 473, 489, 497, 502, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 525, 526, 531, 533, 536, 542, 553, 591, 595, 612, 635, 645, 646, 673, 674, 675, 676, 677, 679, 688, 690, 694, 789, 807, 822, 824, 842, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 869, 874, 875, 878, 881, 882, 883, 885, 893, 894, 895, 896, 903, 905, 906, 925, 982, 985, 989, 990, 993, 995, 996, 997, 999, 1007, 1008, 1014, 1018, 1020, 1025, 1027, 1028, 1029, 1031, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1054], "standard_coef_": 1047, "standard_intercept_": 1047, "standard_norm": [362, 688], "standard_scal": 238, "standard_t": 95, "standardscal": [4, 8, 29, 42, 47, 53, 56, 60, 69, 71, 84, 103, 130, 146, 167, 176, 185, 186, 188, 197, 213, 215, 227, 228, 236, 237, 238, 240, 253, 256, 266, 273, 286, 291, 292, 299, 307, 310, 315, 316, 318, 319, 320, 322, 323, 339, 342, 362, 368, 380, 382, 385, 389, 393, 411, 414, 431, 467, 468, 568, 677, 679, 865, 866, 869, 882, 896, 905, 906, 907, 908, 910, 911, 983, 990, 997, 1003, 1007, 1008, 1010, 1025, 1038, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "standardscalerifittedstandardscal": 240, "standardscalerstandardscal": [69, 130, 167, 227, 228, 237, 238, 240, 253, 266, 273, 316, 319], "standpoint": 48, "stanford": [146, 377, 650, 683, 684, 840, 843, 844, 898, 991], "stanislav": [1051, 1052], "stanlei": [1050, 1051, 1052], "stap": 1044, "stapl": 1040, "star": [32, 90, 133, 380], "stareh": 1047, "start": [0, 2, 5, 8, 10, 11, 18, 24, 51, 56, 62, 65, 72, 84, 96, 114, 120, 122, 143, 146, 154, 156, 168, 173, 177, 178, 186, 197, 198, 199, 205, 215, 218, 222, 231, 233, 246, 253, 259, 267, 283, 319, 321, 327, 351, 360, 362, 366, 367, 368, 369, 373, 380, 381, 382, 384, 385, 386, 392, 394, 397, 406, 410, 414, 415, 419, 420, 441, 443, 451, 455, 457, 539, 611, 618, 633, 646, 654, 660, 667, 668, 669, 677, 678, 679, 691, 695, 782, 783, 790, 798, 799, 801, 804, 805, 815, 847, 848, 849, 851, 853, 861, 947, 977, 982, 989, 992, 997, 998, 1007, 1014, 1018, 1020, 1028, 1029, 1039, 1041, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "start_": 6, "start_bodi": 6, "start_d": 6, "start_idx": [10, 221], "start_reut": 6, "start_tim": [5, 8, 17, 116, 117, 120, 130, 149, 186, 219], "start_titl": 6, "start_top": 6, "startswith": [11, 68, 219, 296], "startup": 1018, "stat": [4, 6, 8, 68, 78, 146, 149, 170, 256, 259, 267, 271, 288, 317, 326, 327, 377, 389, 393, 412, 475, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 683, 684, 805, 813, 815, 913, 914, 944, 982, 989, 1003, 1025, 1043, 1045, 1049], "state": [51, 55, 68, 70, 78, 125, 199, 230, 238, 244, 253, 265, 317, 362, 367, 368, 380, 382, 386, 388, 392, 394, 395, 408, 409, 417, 418, 423, 441, 444, 448, 450, 455, 460, 476, 545, 590, 680, 804, 805, 813, 815, 817, 845, 846, 852, 900, 901, 928, 982, 983, 989, 995, 998, 1005, 1013, 1014, 1018, 1038, 1040, 1042, 1044, 1046, 1049, 1052], "state_to_print": 381, "stateless": [68, 352, 368, 382, 394, 418, 583, 584, 590, 639, 868, 869, 877, 1003, 1052], "statement": [167, 382, 385, 388, 392, 394, 415, 1011, 1029], "static": [380, 382, 386, 388, 647, 648, 653, 654, 661, 662, 663, 664], "station": 154, "stationari": [153, 420, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "statist": [6, 11, 79, 109, 112, 113, 124, 136, 137, 138, 141, 145, 146, 164, 166, 167, 168, 169, 181, 185, 201, 251, 253, 256, 258, 261, 268, 276, 278, 281, 305, 311, 317, 362, 369, 373, 375, 377, 380, 386, 394, 407, 409, 410, 411, 412, 414, 415, 417, 419, 435, 470, 475, 494, 495, 517, 518, 519, 521, 523, 542, 554, 560, 561, 563, 605, 606, 607, 610, 628, 631, 635, 636, 645, 650, 657, 691, 695, 697, 711, 717, 722, 724, 725, 732, 744, 789, 801, 817, 835, 862, 863, 881, 882, 883, 885, 890, 893, 894, 896, 910, 913, 914, 968, 982, 983, 987, 989, 990, 992, 993, 994, 995, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1021, 1027, 1028, 1041, 1044, 1047, 1048, 1050, 1051, 1054], "statistician": [394, 885], "statistics_": 631, "statisticyearmonthhourweekdaytempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64f64f64": 11, "statlearnspars": [722, 724, 725], "statlib": 375, "statnikov": 993, "statsmodel": [989, 1013], "statu": [107, 158, 322, 374, 384, 397, 497, 845, 846, 1054], "statweb": [650, 683, 684], "staub": 1042, "staubda": 1039, "std": [2, 9, 10, 11, 35, 44, 48, 52, 59, 64, 77, 79, 80, 94, 95, 96, 116, 118, 119, 125, 130, 158, 161, 162, 167, 177, 182, 206, 230, 257, 258, 259, 261, 262, 264, 267, 269, 273, 274, 311, 329, 342, 352, 362, 394, 410, 414, 417, 516, 607, 610, 830, 885, 896, 1003, 1024, 1028, 1044, 1048], "std_": [263, 1041], "std_auc": 269, "std_display_styl": [232, 261, 807, 824], "std_error": 136, "std_fit_tim": [115, 285, 801, 815], "std_i": 167, "std_precis": 257, "std_predict": 156, "std_predictions_gpr": 149, "std_recal": 257, "std_scaler": 323, "std_score": [352, 1049], "std_score_tim": [115, 260, 801, 815], "std_test_precis": 257, "std_test_recal": 257, "std_test_scor": [69, 71, 115, 136, 145, 258, 259, 260, 267, 285, 473, 595, 801, 815, 1042, 1049], "std_time": 1042, "std_tpr": 269, "std_train_scor": [801, 815, 1042], "std_y_pr": 154, "stderr": [10, 834], "stdin": [388, 1029], "stdout": [6, 93, 205, 834, 854, 862, 863], "stds_california": 162, "stds_diabet": 162, "steadi": [900, 901], "steelblu": [94, 95, 132], "steep": [150, 168, 268, 269, 410, 414, 420, 451, 457], "stef": [628, 983], "stefan": [1039, 1040, 1044, 1046], "stefani": [0, 1049, 1051, 1052, 1053, 1054, 1055], "stefanini": 1050, "stefano": 1038, "stehl": [1050, 1051], "stein": 1042, "steinbach": [410, 1051, 1053], "steinfurt": [1046, 1048], "steingold": [1043, 1044], "steinlei": [410, 706], "steinley2004": 706, "stella": [410, 453, 463], "stellalin7": 1051, "stem": [112, 120, 169, 196, 249, 414, 418, 985, 995], "step": [18, 24, 31, 40, 52, 53, 56, 65, 68, 69, 70, 71, 72, 79, 84, 96, 100, 109, 114, 118, 119, 120, 130, 143, 144, 145, 151, 154, 167, 169, 197, 205, 215, 227, 228, 231, 237, 240, 249, 253, 257, 260, 266, 268, 273, 283, 285, 286, 291, 299, 302, 307, 310, 311, 316, 319, 331, 335, 339, 352, 353, 356, 362, 366, 369, 375, 378, 379, 380, 382, 384, 385, 388, 392, 394, 403, 406, 407, 410, 412, 413, 415, 417, 418, 419, 443, 448, 450, 537, 538, 539, 540, 547, 564, 589, 590, 592, 594, 595, 598, 607, 628, 645, 649, 667, 668, 670, 677, 679, 680, 681, 695, 701, 798, 799, 801, 804, 805, 815, 836, 837, 838, 839, 861, 862, 863, 865, 866, 868, 905, 906, 907, 908, 910, 911, 941, 942, 964, 968, 983, 989, 992, 997, 998, 1003, 1007, 1009, 1010, 1013, 1017, 1025, 1029, 1036, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1054], "stephan": [709, 1039, 1045, 1046, 1048], "stephani": 1047, "stephen": [1018, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "stepwis": [125, 636, 655, 656, 657, 683, 684, 989], "stern": [789, 993], "steve": [1038, 1040, 1044, 1049, 1051], "steven": [1038, 1039, 1041, 1043, 1044, 1049, 1051, 1052], "steward": 1043, "stewart": [1041, 1046, 1049, 1051], "stick": [7, 798, 992], "stijn": 1043, "stikhin": 1046, "still": [2, 11, 25, 30, 42, 51, 53, 55, 60, 80, 88, 97, 117, 122, 125, 130, 149, 155, 166, 167, 169, 170, 176, 181, 197, 199, 215, 231, 262, 268, 305, 317, 318, 321, 351, 352, 362, 368, 374, 379, 380, 382, 384, 385, 386, 388, 392, 394, 410, 414, 417, 418, 421, 441, 445, 455, 475, 497, 628, 633, 636, 638, 659, 660, 718, 757, 779, 782, 793, 794, 804, 805, 818, 821, 883, 885, 905, 923, 982, 983, 987, 989, 992, 993, 996, 999, 1001, 1008, 1009, 1012, 1014, 1017, 1018, 1036, 1038, 1041, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1054], "stine": [1044, 1045], "stochast": [5, 56, 120, 121, 124, 137, 164, 173, 175, 185, 186, 204, 216, 220, 222, 226, 231, 289, 291, 292, 298, 301, 303, 318, 337, 338, 410, 415, 417, 463, 489, 497, 503, 504, 505, 515, 523, 537, 545, 560, 561, 572, 605, 628, 632, 640, 659, 660, 669, 673, 675, 677, 678, 679, 680, 688, 689, 690, 691, 693, 831, 854, 861, 862, 863, 866, 875, 909, 941, 942, 967, 982, 996, 997, 999, 1015, 1016, 1030, 1031, 1036, 1037, 1040, 1041, 1043, 1045, 1047], "stochastic_gradi": [1038, 1039, 1045], "stock": [1, 14, 44, 50, 64, 164, 218, 219, 222, 410, 412, 455, 473, 690, 1015, 1023], "stogbauer": [608, 609], "stojanov": [1050, 1051], "stolbunov": 1041, "stone": [380, 913, 914, 1009], "stop": [2, 5, 10, 15, 42, 60, 108, 109, 115, 123, 134, 154, 156, 164, 168, 175, 185, 186, 199, 204, 216, 309, 316, 345, 380, 382, 388, 389, 394, 410, 415, 417, 419, 441, 442, 444, 446, 448, 450, 453, 455, 463, 464, 472, 473, 479, 483, 484, 485, 491, 497, 509, 510, 533, 537, 538, 539, 540, 541, 544, 546, 547, 548, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 572, 589, 590, 592, 603, 618, 628, 645, 646, 647, 649, 650, 653, 657, 659, 660, 667, 668, 669, 670, 672, 677, 678, 679, 681, 692, 693, 696, 715, 751, 798, 799, 831, 862, 863, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 947, 967, 982, 989, 997, 998, 1008, 1009, 1014, 1015, 1016, 1018, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "stop_n_inli": [672, 989], "stop_prob": 672, "stop_scor": [672, 989], "stop_word": [13, 17, 351, 352, 418, 589, 590, 592], "stop_words_": 1054, "stopiter": 1048, "stopword": [490, 1029], "storag": [0, 353, 394, 659, 660, 667, 668, 669, 677, 678, 679, 905, 996, 1008, 1039, 1044], "storch": 1045, "store": [30, 51, 52, 68, 70, 79, 88, 143, 157, 173, 183, 186, 201, 219, 227, 237, 248, 253, 264, 268, 326, 353, 360, 366, 374, 375, 380, 382, 387, 388, 389, 392, 394, 403, 405, 411, 413, 415, 417, 418, 420, 421, 439, 441, 445, 447, 451, 458, 465, 468, 470, 471, 474, 475, 476, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 509, 535, 536, 542, 550, 551, 556, 557, 558, 559, 564, 565, 566, 567, 570, 571, 590, 611, 612, 628, 632, 633, 636, 650, 651, 655, 661, 662, 663, 664, 667, 668, 674, 676, 677, 678, 679, 689, 690, 691, 693, 698, 699, 701, 702, 703, 782, 798, 799, 801, 807, 815, 823, 824, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 860, 876, 883, 885, 886, 900, 901, 902, 925, 926, 950, 951, 964, 967, 979, 983, 985, 989, 996, 1005, 1008, 1009, 1013, 1020, 1029, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "store_cent": [447, 1053], "store_covari": [32, 550, 551, 1041, 1043], "store_cv_result": [253, 674, 676, 823, 1054], "store_cv_valu": [674, 676, 1044, 1047, 1054], "store_precis": [31, 77, 470, 471, 474, 475, 476, 477], "stori": [166, 259, 278, 375, 992], "stork": 987, "stott": 1044, "stoyanov": [1044, 1045], "str": [6, 8, 11, 56, 58, 101, 103, 118, 144, 215, 236, 259, 271, 283, 293, 337, 351, 374, 375, 389, 418, 421, 422, 426, 431, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 458, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 618, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 693, 697, 698, 699, 700, 701, 703, 708, 710, 712, 714, 728, 730, 731, 733, 734, 739, 743, 772, 775, 779, 780, 781, 782, 783, 784, 785, 788, 790, 793, 794, 800, 801, 802, 803, 804, 805, 807, 808, 810, 812, 813, 815, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 924, 925, 926, 929, 932, 934, 938, 949, 950, 951, 953, 956, 977, 978, 981, 1051], "strai": 998, "straight": [98, 187, 193, 195, 256, 343, 366], "straightforward": [306, 379, 409, 415, 1018], "straka": 1048, "strateg": 395, "strategi": [2, 11, 50, 52, 56, 59, 69, 119, 124, 125, 130, 137, 143, 145, 161, 162, 164, 169, 181, 186, 197, 205, 215, 228, 236, 238, 251, 253, 258, 260, 262, 263, 264, 266, 267, 268, 269, 271, 273, 276, 281, 298, 301, 303, 304, 306, 307, 311, 312, 313, 315, 316, 319, 353, 365, 382, 386, 393, 394, 403, 409, 414, 417, 418, 419, 422, 438, 439, 440, 448, 453, 463, 473, 503, 505, 513, 515, 523, 534, 539, 552, 553, 562, 563, 565, 566, 568, 569, 572, 589, 590, 592, 593, 595, 603, 628, 629, 631, 635, 646, 648, 652, 654, 656, 662, 664, 666, 674, 676, 692, 696, 705, 712, 714, 733, 756, 758, 796, 801, 804, 805, 807, 815, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 862, 863, 870, 875, 886, 900, 905, 907, 910, 913, 914, 915, 916, 964, 982, 983, 992, 994, 995, 996, 997, 999, 1001, 1003, 1007, 1008, 1009, 1013, 1015, 1024, 1029, 1031, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "stratif": [802, 803, 809, 810, 819, 820, 821, 964, 1045], "stratifi": [3, 98, 116, 126, 142, 169, 212, 227, 236, 240, 253, 254, 259, 262, 268, 286, 291, 292, 315, 382, 394, 409, 552, 560, 568, 569, 603, 660, 667, 669, 677, 800, 801, 804, 805, 807, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 854, 862, 964, 993, 996, 1024, 1041, 1042, 1043, 1045, 1046, 1049], "stratifiedgroupkfold": [254, 1049], "stratifiedkfold": [145, 245, 254, 265, 269, 329, 414, 438, 568, 569, 595, 603, 660, 674, 801, 802, 804, 805, 806, 807, 809, 811, 815, 819, 821, 824, 825, 826, 827, 828, 829, 830, 832, 886, 1024, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1049], "stratifiedshufflesplit": [254, 339, 414, 1024, 1036, 1037, 1042, 1043, 1049], "stream": [6, 410, 415, 418, 463, 590, 874, 875, 885, 985, 1013, 1044, 1047], "stream_reuters_docu": 6, "streamhandl": 1047, "streamlin": 989, "street": [130, 146, 377], "strehl": 410, "strength": [10, 130, 156, 197, 201, 260, 315, 366, 413, 417, 447, 568, 569, 644, 649, 650, 653, 659, 660, 670, 673, 674, 675, 676, 677, 679, 681, 688, 784, 862, 863, 905, 906, 910, 911, 982, 989, 996, 999, 1007, 1008], "stress": [691, 695, 990, 1051], "stress_": 691, "stretch": [222, 247], "stretched_gaussian": 247, "strickland": 1042, "strict": [362, 378, 394, 405, 415, 504, 536, 589, 590, 592, 989, 1036, 1045, 1048, 1054], "stricter": 161, "strictli": [25, 197, 215, 233, 305, 321, 352, 385, 394, 407, 413, 415, 418, 509, 510, 536, 542, 545, 562, 563, 589, 592, 643, 671, 672, 674, 676, 696, 701, 740, 767, 801, 804, 805, 811, 815, 828, 854, 881, 893, 897, 898, 900, 901, 905, 906, 910, 911, 940, 982, 984, 989, 993, 1003, 1007, 1037, 1047, 1052], "striebel": [1042, 1043], "strife": 990, "strike": [120, 168, 201], "string": [6, 69, 118, 157, 215, 228, 253, 263, 318, 323, 353, 366, 374, 375, 380, 381, 382, 386, 394, 411, 414, 417, 418, 419, 421, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 490, 491, 497, 506, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 618, 621, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 700, 710, 712, 720, 733, 763, 766, 772, 775, 779, 780, 781, 782, 793, 794, 798, 799, 801, 804, 805, 807, 815, 823, 824, 828, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 923, 925, 926, 933, 934, 935, 957, 961, 977, 978, 982, 983, 993, 1006, 1008, 1020, 1027, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "strip": [13, 215, 352, 366, 374, 375, 497], "strip_acc": [589, 590, 592], "strip_accents_unicod": 1046, "stripe": 308, "stripplot": 167, "strive": [379, 395, 1018], "strong": [2, 11, 52, 149, 164, 166, 167, 175, 177, 190, 194, 195, 201, 202, 203, 216, 232, 281, 312, 346, 407, 408, 415, 417, 525, 650, 673, 986, 987, 989, 990, 992, 1000, 1008, 1015, 1027], "stronger": [260, 644, 653, 659, 660, 673, 674, 675, 676, 677, 679, 688], "strongest": [15, 190], "strongli": [23, 25, 80, 84, 96, 119, 123, 167, 179, 212, 233, 265, 351, 380, 396, 397, 407, 417, 659, 737, 796, 989, 990, 1031, 1045, 1052], "stroudsburg": [902, 1006], "strubel": 1049, "struct": [378, 394, 1039], "structur": [0, 1, 6, 7, 11, 12, 13, 14, 15, 18, 19, 34, 38, 39, 40, 41, 42, 44, 50, 51, 52, 53, 54, 60, 64, 66, 80, 103, 107, 126, 148, 159, 164, 218, 219, 222, 228, 233, 249, 254, 265, 288, 310, 316, 319, 325, 332, 339, 343, 355, 356, 357, 361, 366, 375, 377, 380, 382, 385, 392, 394, 395, 397, 406, 410, 412, 413, 414, 415, 417, 418, 419, 420, 442, 443, 446, 447, 451, 452, 453, 454, 455, 458, 463, 464, 473, 497, 504, 505, 509, 512, 514, 515, 522, 531, 536, 542, 545, 564, 611, 612, 613, 617, 618, 619, 690, 697, 710, 714, 831, 853, 858, 885, 897, 898, 901, 913, 914, 915, 916, 919, 941, 942, 964, 967, 990, 992, 993, 996, 998, 999, 1003, 1006, 1009, 1013, 1014, 1015, 1023, 1028, 1029, 1036, 1037, 1039, 1040, 1042, 1046], "struggl": [379, 395, 410], "stuck": [59, 693, 990], "student": [0, 95, 259, 990, 1014, 1018], "studi": [2, 25, 58, 122, 197, 215, 262, 265, 266, 273, 351, 375, 377, 414, 419, 697, 709, 759, 760, 830, 991, 993, 1007, 1020], "studio": [378, 1018], "study_135": 374, "study_14": 374, "study_34": 374, "study_98": 374, "study_99": 374, "stuff": 1018, "stump": [111, 417, 560, 1047], "stupp": [1042, 1043], "stupperich": 1048, "sturla": 1038, "style": [22, 24, 79, 122, 186, 205, 215, 263, 380, 387, 410, 418, 444, 448, 460, 701, 807, 824, 925, 926, 938, 1036, 1039, 1050], "st\u00e9fan": 381, "st\u00e9phan": 1046, "st\u00e9phane": [1045, 1046, 1050, 1051], "su": [722, 724, 725], "sub": [6, 35, 46, 51, 53, 55, 58, 68, 102, 233, 235, 243, 317, 326, 327, 336, 339, 347, 375, 380, 382, 386, 394, 411, 417, 418, 438, 444, 445, 448, 450, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 595, 598, 611, 612, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 864, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 951, 989, 993, 1007, 1029, 1046, 1050, 1052, 1053], "sub_sampl": 537, "subclass": [107, 382, 420, 575, 959, 1041, 1044, 1049, 1053], "subclust": [410, 443], "subcluster_centers_": [40, 443], "subcluster_labels_": 443, "subcompon": [93, 415], "subdirectori": 380, "subdivid": [375, 420], "subestim": 382, "subestimator__c": 382, "subestimator__class_weight": 382, "subestimator__du": 382, "subestimator__fit_intercept": 382, "subestimator__intercept_sc": 382, "subestimator__l1_ratio": 382, "subestimator__max_it": 382, "subestimator__multi_class": 382, "subestimator__n_job": 382, "subestimator__penalti": 382, "subestimator__random_st": 382, "subestimator__solv": 382, "subestimator__tol": 382, "subestimator__verbos": 382, "subestimator__warm_start": 382, "subexpress": 11, "subfold": [378, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 1049], "subgraph": 406, "subhash": 1050, "subhodeep": [1036, 1037, 1038], "subi": [1045, 1046, 1051], "subject": [68, 127, 249, 262, 351, 375, 380, 382, 384, 392, 394, 395, 407, 408, 412, 414, 415, 496, 659, 660, 686, 823, 868, 963, 984, 989, 1008, 1012, 1029, 1045, 1046, 1049, 1051], "subject_body_extractor": 68, "subject_body_transform": 68, "subjectbodi": 68, "subjectbodyextractor": 68, "sublinear": [415, 591, 592], "sublinear_tf": [351, 415, 418, 591, 592], "submatric": 406, "submatrix": [406, 425, 452, 454], "submit": [377, 378, 379, 382, 383, 384, 385, 388, 394, 395], "submitt": 379, "submodel": 414, "submodul": [380, 384, 386, 408, 985, 991, 1036], "subobject": [424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "suboptim": [414, 701, 703, 783, 790, 996, 1044, 1052], "subpackag": [380, 384, 1011, 1040, 1045], "subplot": [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 28, 29, 30, 32, 37, 41, 42, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 64, 71, 73, 77, 78, 79, 80, 83, 84, 88, 89, 90, 93, 94, 95, 96, 98, 102, 103, 109, 111, 112, 114, 115, 116, 118, 119, 120, 123, 125, 127, 128, 130, 131, 132, 141, 151, 153, 158, 161, 162, 167, 168, 170, 173, 177, 180, 188, 189, 191, 192, 195, 196, 197, 198, 199, 201, 205, 210, 211, 213, 215, 218, 219, 222, 223, 226, 227, 229, 231, 232, 234, 235, 236, 237, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 259, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 281, 283, 285, 286, 287, 288, 291, 292, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 315, 319, 320, 329, 331, 336, 337, 338, 339, 343, 345, 346, 347, 348, 351, 352, 353, 356, 357, 387, 1025], "subplot_kw": [218, 287], "subplot_spec": 387, "subplot_titl": 115, "subplots_adjust": [4, 5, 12, 13, 37, 40, 42, 43, 48, 49, 52, 60, 62, 78, 80, 89, 90, 95, 96, 102, 111, 112, 130, 167, 196, 197, 212, 215, 226, 234, 243, 245, 246, 249, 254, 270, 272, 288, 296, 299, 302, 307, 317, 327, 336, 339, 1025], "subpopul": [214, 680, 989], "subproblem": 1041, "subrahmanyam": [1036, 1039], "subramaniam": [1051, 1052, 1053], "subramaniyan": 1048, "subramanyam": 1043, "subrat": 1048, "subrat93": 1048, "subsampl": [102, 121, 124, 168, 214, 255, 312, 317, 459, 560, 561, 562, 563, 564, 633, 680, 702, 804, 805, 831, 870, 882, 894, 921, 931, 985, 989, 1014, 1036, 1046, 1050, 1052, 1053, 1054], "subscrib": 1034, "subscript": [367, 1049], "subsect": [367, 380, 408], "subsembl": 1013, "subsequ": [5, 30, 56, 73, 96, 109, 143, 185, 199, 261, 264, 283, 285, 339, 362, 380, 382, 386, 394, 405, 410, 411, 417, 420, 438, 497, 509, 554, 555, 560, 562, 563, 667, 669, 677, 804, 805, 833, 834, 837, 840, 841, 842, 843, 844, 862, 880, 884, 983, 992, 994, 1045, 1046, 1050, 1052, 1054], "subset": [5, 17, 18, 24, 25, 30, 68, 69, 78, 79, 116, 118, 119, 120, 136, 143, 146, 168, 170, 186, 198, 212, 213, 214, 215, 229, 231, 235, 236, 253, 257, 260, 262, 268, 269, 271, 278, 310, 311, 317, 326, 330, 351, 352, 353, 362, 375, 380, 388, 392, 394, 406, 407, 410, 411, 414, 417, 418, 420, 427, 438, 450, 465, 467, 468, 470, 489, 490, 493, 494, 498, 509, 550, 551, 552, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 603, 611, 630, 640, 641, 642, 643, 652, 656, 659, 667, 668, 669, 672, 675, 676, 677, 678, 679, 680, 698, 704, 705, 714, 717, 719, 732, 735, 756, 758, 794, 797, 800, 803, 823, 829, 831, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 871, 900, 901, 905, 907, 910, 913, 915, 921, 962, 982, 989, 993, 994, 1004, 1006, 1008, 1009, 1029, 1039, 1044, 1045, 1047, 1049, 1054], "subset_featur": 69, "subset_label": 215, "subset_mask": 275, "subsidi": 167, "subspac": [100, 413, 417, 453, 516, 556, 557, 692, 696, 942, 987, 996, 999, 1005, 1018, 1028], "substanti": [136, 285, 289, 290, 306, 380, 851, 999, 1040, 1043], "substitut": [400, 977, 1014, 1042], "subtl": [348, 362, 992, 1014], "subtleti": 1031, "subtract": [154, 167, 236, 413, 415, 444, 448, 460, 535, 645, 646, 1043, 1053], "subtre": [558, 559, 560, 561, 565, 566, 913, 914, 915, 916, 1009], "subwindow": 1009, "succe": [100, 125, 181, 273], "succeed": 380, "success": [48, 141, 164, 251, 263, 266, 267, 276, 345, 362, 404, 410, 414, 415, 417, 516, 565, 580, 801, 804, 805, 822, 910, 996, 1015, 1018, 1024, 1028, 1031, 1048], "successfulli": [2, 12, 309, 379, 384, 403, 410, 418, 1007], "successor": [451, 457, 1009, 1013], "suchak": 1049, "sudo": [378, 397], "suen": 997, "suffer": [84, 117, 169, 283, 305, 352, 366, 410, 417, 545, 764, 988, 989, 993, 996, 1028, 1045], "suffic": [55, 56, 382, 1029], "suffici": [25, 53, 130, 205, 274, 339, 366, 394, 410, 419, 533, 658, 683, 684, 820, 821, 994, 996, 1014, 1045, 1051, 1052], "suffix": [384, 397, 828, 993, 1046], "suganthan": 377, "sugar": [146, 377], "suggest": [78, 96, 112, 116, 167, 170, 259, 339, 366, 379, 380, 387, 394, 414, 415, 417, 470, 475, 566, 646, 830, 987, 989, 990, 998, 1001, 1008, 1029, 1040, 1047, 1050, 1053], "suh": 1044, "suit": [18, 93, 128, 167, 197, 198, 226, 248, 318, 319, 321, 351, 367, 380, 382, 385, 386, 388, 392, 397, 403, 413, 415, 417, 451, 453, 504, 678, 842, 886, 936, 982, 985, 990, 993, 995, 996, 1007, 1013, 1014, 1018, 1022, 1043, 1050], "suitabl": [113, 122, 181, 183, 201, 300, 353, 374, 375, 386, 389, 403, 410, 415, 418, 453, 463, 469, 488, 506, 509, 628, 636, 840, 841, 844, 879, 880, 903, 958, 962, 987, 989, 992, 1003, 1005, 1007, 1013, 1029, 1050, 1051], "sullivan": [1039, 1040, 1041], "sultan": 1050, "sum": [6, 15, 17, 24, 59, 79, 90, 96, 102, 121, 122, 142, 146, 157, 167, 178, 184, 193, 197, 201, 212, 215, 219, 221, 236, 253, 268, 283, 290, 293, 319, 323, 330, 343, 344, 346, 351, 352, 353, 360, 377, 386, 394, 406, 407, 408, 410, 412, 413, 415, 416, 417, 418, 420, 433, 443, 444, 448, 450, 460, 465, 466, 483, 484, 485, 516, 521, 524, 532, 535, 537, 538, 542, 545, 546, 547, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 591, 592, 612, 614, 624, 626, 636, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 677, 678, 679, 680, 682, 685, 691, 695, 697, 700, 710, 711, 720, 727, 742, 757, 759, 760, 764, 789, 833, 834, 838, 839, 848, 852, 856, 863, 864, 884, 885, 905, 906, 908, 911, 913, 914, 915, 916, 944, 968, 974, 979, 989, 993, 994, 995, 996, 1008, 1009, 1027, 1039, 1040, 1042, 1044, 1045, 1047, 1052, 1053], "sum_": [259, 268, 346, 406, 407, 410, 415, 416, 417, 539, 541, 548, 697, 756, 987, 989, 990, 993, 995, 997, 998, 1000, 1001, 1003, 1007, 1008, 1009], "sum_gradi": 417, "sum_h": 998, "sum_hessian": 417, "sum_i": [318, 417, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 984, 985, 989, 991, 993, 998], "sum_j": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 989, 993, 998], "sum_k": [417, 550, 1009], "sum_m": 417, "sum_n": [266, 708, 993], "sum_n_compon": [465, 864], "sum_over_featur": [1036, 1051], "sum_weight": 974, "sumit": 1050, "summar": [197, 249, 266, 268, 353, 380, 382, 396, 417, 522, 659, 695, 707, 708, 989, 990, 993, 999, 1031], "summari": [11, 146, 319, 360, 362, 377, 392, 693, 714, 789, 918, 991, 994, 1013, 1029], "summaris": [228, 316], "summat": [995, 997], "summer": [0, 2, 11, 46, 1036], "sun": [2, 125, 168, 1044, 1049, 1050], "sundai": 2, "sundaramahalingam": 1053, "sung": 1047, "sunglok": 989, "sunita": 784, "sunitha": 1048, "sunmi": 1047, "super": [17, 23, 25, 382, 418, 1044], "superflu": 415, "superimpos": 415, "superior": 417, "superposit": 181, "supersed": [379, 1041], "superset": [414, 822, 993], "supervis": [6, 17, 23, 25, 29, 35, 47, 52, 54, 56, 68, 84, 101, 107, 114, 118, 125, 128, 137, 138, 151, 157, 219, 231, 234, 245, 259, 292, 299, 307, 317, 329, 332, 336, 339, 342, 343, 352, 353, 366, 369, 375, 382, 393, 394, 407, 410, 413, 414, 415, 417, 418, 420, 438, 440, 465, 489, 504, 505, 554, 589, 591, 594, 595, 635, 677, 730, 802, 803, 806, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 831, 854, 864, 865, 869, 879, 886, 900, 901, 902, 910, 987, 990, 993, 995, 996, 999, 1003, 1004, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1020, 1021, 1023, 1029, 1031, 1036, 1042, 1048], "supp": 388, "suppli": [125, 392, 410, 647, 925, 926, 996, 1018, 1040, 1042, 1044, 1049], "support": [2, 4, 5, 6, 7, 8, 11, 22, 28, 30, 44, 68, 69, 70, 108, 113, 129, 130, 134, 142, 143, 154, 168, 198, 207, 208, 209, 211, 215, 231, 232, 233, 239, 252, 257, 264, 266, 278, 283, 302, 305, 309, 319, 323, 326, 327, 330, 331, 335, 336, 339, 340, 341, 342, 343, 344, 346, 349, 366, 367, 368, 369, 374, 378, 380, 382, 384, 385, 386, 387, 389, 390, 393, 394, 395, 403, 410, 414, 415, 418, 419, 420, 438, 441, 451, 453, 454, 465, 466, 467, 468, 470, 475, 488, 497, 513, 539, 541, 542, 545, 548, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 632, 633, 634, 644, 646, 658, 659, 660, 671, 672, 673, 675, 676, 677, 678, 679, 688, 691, 695, 700, 708, 714, 730, 731, 739, 744, 779, 780, 781, 784, 785, 788, 789, 801, 804, 805, 807, 815, 823, 828, 829, 837, 838, 843, 845, 846, 849, 851, 857, 865, 866, 870, 876, 878, 879, 881, 885, 893, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 931, 936, 937, 981, 982, 983, 985, 986, 987, 989, 992, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1007, 1011, 1013, 1014, 1015, 1016, 1018, 1020, 1023, 1025, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "support_": [232, 345, 470, 475, 594, 595, 603, 907, 908, 909, 910, 911, 1008], "support_fract": [7, 470, 475], "support_reweight": [470, 475], "support_vector": [337, 343], "support_vector_indic": 337, "support_vectors_": [5, 8, 340, 343, 344, 907, 908, 909, 910, 911, 1008], "suppos": [233, 262, 326, 366, 367, 382, 386, 412, 417, 418, 419, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 743, 851, 905, 907, 910, 913, 915, 931, 997, 1045, 1047, 1053], "suppress": [167, 366, 388, 693, 996, 1043], "suptitl": [2, 3, 11, 13, 30, 31, 32, 37, 38, 48, 51, 55, 58, 65, 73, 93, 96, 103, 109, 118, 119, 127, 130, 158, 167, 168, 170, 191, 196, 212, 213, 218, 219, 220, 235, 246, 253, 255, 273, 302, 305, 307, 315, 317, 326, 327, 331, 345, 346, 357], "surac": 1046, "sure": [24, 54, 190, 203, 233, 234, 253, 362, 366, 367, 374, 378, 379, 380, 381, 382, 384, 385, 388, 392, 407, 411, 418, 494, 524, 650, 925, 926, 936, 979, 983, 990, 1007, 1013, 1014, 1043, 1044, 1046, 1051], "suresh": 1050, "surf": 168, "surfac": [29, 88, 97, 108, 109, 110, 111, 113, 131, 134, 151, 164, 180, 189, 206, 265, 286, 335, 336, 355, 356, 358, 359, 360, 361, 417, 505, 554, 558, 565, 632, 765, 913, 919, 987, 992, 1007, 1008, 1009, 1015], "surface_": 632, "surgan12": 1045, "surpass": [109, 343, 862, 863], "surplu": 414, "surpris": [51, 168, 253, 378, 989, 1013, 1038], "surprisingli": [215, 375, 418], "surrend": 17, "surrog": [253, 1018], "surround": [234, 380, 851, 999], "survei": [167, 413], "surviv": [69, 169, 982, 1013], "surya": [1049, 1050], "suscept": 403, "susik": 1040, "suspect": 2, "suspici": 375, "sustain": 0, "sutherland": [1038, 1040, 1041, 1043, 1044, 1045, 1046], "sutiono": 1047, "suzuki": [1047, 1048], "sv": 1008, "sv_ind": 232, "sv_ratio": 232, "svc": [4, 23, 25, 28, 29, 30, 68, 72, 120, 131, 138, 150, 164, 173, 188, 201, 213, 231, 234, 238, 252, 257, 259, 261, 264, 265, 266, 269, 270, 275, 307, 309, 310, 315, 317, 329, 331, 334, 335, 336, 337, 339, 340, 341, 342, 344, 347, 348, 349, 351, 366, 382, 386, 394, 407, 411, 414, 417, 436, 437, 438, 469, 516, 556, 698, 699, 701, 703, 801, 818, 832, 834, 865, 902, 903, 905, 907, 908, 911, 981, 982, 988, 991, 993, 994, 1003, 1015, 1020, 1024, 1025, 1027, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "svc__c": [307, 865], "svc_disp": [239, 315, 1033], "svc_isoton": 23, "svc_sigmoid": 23, "svcifittedsvc": 239, "svcsvc": [238, 257, 259, 317], "svd": [32, 100, 128, 219, 352, 389, 405, 413, 422, 452, 454, 483, 484, 486, 522, 533, 534, 535, 536, 540, 541, 542, 545, 547, 550, 551, 665, 673, 674, 675, 686, 687, 688, 864, 942, 987, 1029, 1038, 1042, 1043, 1049, 1051, 1054], "svd__n_compon": 864, "svd_lapack_driv": 942, "svd_method": [17, 452, 454, 533, 1039], "svd_solver": [4, 68, 93, 100, 322, 323, 405, 415, 536, 542, 1025, 1042, 1054], "sven": [1050, 1051], "svg": 0, "svm": [1, 5, 6, 7, 8, 9, 13, 14, 23, 25, 28, 29, 30, 46, 54, 68, 70, 72, 93, 107, 118, 128, 131, 135, 137, 139, 140, 145, 146, 147, 151, 153, 157, 164, 175, 178, 180, 189, 190, 206, 207, 208, 209, 210, 216, 226, 232, 234, 235, 238, 239, 247, 252, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 269, 270, 274, 275, 289, 290, 294, 295, 299, 301, 307, 308, 315, 317, 325, 329, 330, 332, 334, 337, 345, 346, 349, 351, 366, 369, 375, 382, 386, 394, 411, 414, 415, 417, 419, 436, 437, 438, 495, 505, 513, 516, 542, 556, 557, 564, 568, 569, 578, 594, 595, 600, 601, 606, 632, 640, 644, 669, 677, 678, 679, 690, 698, 699, 701, 703, 714, 736, 743, 762, 801, 815, 821, 827, 828, 831, 833, 834, 851, 865, 866, 878, 880, 885, 901, 902, 981, 982, 985, 988, 990, 991, 993, 994, 998, 1006, 1008, 1010, 1015, 1016, 1020, 1023, 1024, 1025, 1029, 1031, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "svm1": 411, "svm2": 411, "svm__c": 72, "svm_gui": 1027, "svm_weight": 142, "svm_weights_select": 142, "svmlight": [373, 488, 509, 510, 1031, 1036, 1037, 1043, 1045], "svmlight_file_test": 510, "svmlight_file_train": 510, "svmsgd": 1007, "svr": [5, 8, 164, 225, 241, 315, 334, 349, 366, 436, 437, 557, 568, 569, 594, 595, 644, 679, 801, 807, 906, 908, 910, 986, 1015, 1027, 1036, 1038, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "svr_fit": 232, "svr_lin": 345, "svr_poli": 345, "svr_predict": 232, "svr_rbf": 345, "svrg": 1013, "sw": 283, "sw_test": [22, 316], "sw_train": [22, 316], "swap": [410, 415, 717, 737, 972, 973, 1036], "swapnil": 1050, "swart": 15, "sweep": 861, "swier": [1047, 1048], "swiss": [65, 164, 217, 218, 219, 220, 223, 224, 410, 531, 693, 694, 1015, 1050], "switch": [365, 679, 705, 718, 738, 756, 758, 796, 845, 846, 941, 942, 993, 996, 1031, 1036], "swpeas": 1049, "swu": 1040, "sy": [6, 10, 17, 205, 230, 283, 330, 353, 375, 392, 618], "syd": 1051, "sydnei": 0, "syhw": [1037, 1038], "sylvain": [0, 370, 1040, 1045, 1046, 1047, 1048, 1049, 1050], "sylvainlan": [1044, 1045, 1046, 1047, 1048], "symbol": [10, 353, 367, 382, 386, 412, 418, 500, 583, 589, 590, 592, 917, 919, 1013], "symbol_dict": 10, "symlink": 384, "symlognorm": [176, 181], "symmetr": [42, 122, 170, 199, 394, 407, 410, 453, 463, 464, 475, 520, 528, 530, 691, 695, 696, 705, 706, 716, 717, 718, 723, 725, 729, 737, 738, 756, 758, 764, 786, 796, 798, 799, 979, 982, 989, 993, 996, 1052], "symmetri": [146, 377, 700, 878, 881, 893, 991], "symmetric_arrai": 979, "symposium": [146, 377, 410, 461], "symptomat": 253, "sync": 384, "synchron": [380, 418], "syndrom": 374, "synnaev": 302, "synonym": [394, 847, 848, 849, 855, 856, 857], "synonymi": 415, "syntax": [367, 380, 385, 388, 411, 469, 864, 865, 903, 982, 1020, 1047, 1049], "synthet": [2, 12, 23, 25, 29, 32, 35, 40, 47, 116, 122, 128, 149, 154, 156, 168, 187, 199, 214, 299, 307, 346, 362, 366, 373, 383, 395, 410, 412, 419, 659, 660, 905, 906, 912, 987, 1027, 1028, 1042], "synthetic_feature_weight": [659, 660], "syonekura": 1044, "sysconfig": 378, "system": [3, 98, 181, 259, 266, 362, 366, 367, 368, 375, 377, 380, 381, 382, 383, 388, 392, 397, 403, 410, 415, 417, 421, 445, 472, 473, 479, 536, 540, 544, 551, 640, 646, 651, 652, 655, 656, 657, 683, 684, 727, 757, 770, 798, 854, 900, 901, 961, 989, 993, 996, 1005, 1013, 1014, 1018, 1029, 1036, 1044, 1045], "systemat": [2, 125, 259, 382, 713, 729, 993, 1051], "sysuresh": 1050, "szabo": [1038, 1039], "szepieniec": 1042, "szlam": [415, 941, 942], "szpak": [1043, 1046], "szyma\u0144ski": [1044, 1045], "s\u00e1nchez": 1048, "s\u00e4ger": [1039, 1042], "s\u00e9bastien": [1018, 1042, 1044], "s\u00f6nke": 1046, "s\u00f8ren": 1053, "s\u0142apek": 1047, "t": [6, 9, 10, 15, 24, 25, 32, 37, 38, 40, 41, 42, 50, 52, 56, 68, 70, 76, 77, 78, 80, 83, 90, 94, 95, 100, 102, 103, 109, 112, 113, 121, 122, 123, 124, 125, 129, 130, 146, 150, 152, 153, 154, 157, 158, 164, 167, 168, 169, 170, 176, 178, 181, 184, 191, 194, 195, 196, 197, 198, 215, 217, 219, 220, 221, 222, 224, 233, 234, 244, 247, 249, 253, 258, 259, 273, 281, 283, 295, 296, 301, 315, 318, 319, 321, 326, 327, 329, 335, 336, 339, 340, 344, 351, 352, 353, 359, 360, 362, 366, 367, 374, 375, 377, 380, 382, 384, 386, 388, 393, 394, 397, 400, 403, 407, 408, 410, 411, 413, 414, 415, 417, 418, 419, 423, 427, 433, 435, 438, 448, 449, 451, 457, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 496, 497, 514, 515, 516, 520, 521, 526, 531, 533, 535, 542, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 591, 592, 595, 608, 609, 611, 612, 628, 629, 631, 632, 633, 634, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 696, 697, 705, 711, 717, 718, 727, 737, 738, 756, 757, 758, 768, 789, 790, 795, 796, 800, 801, 804, 805, 815, 823, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 855, 856, 861, 862, 863, 871, 874, 875, 876, 878, 879, 885, 886, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 942, 943, 957, 982, 985, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1007, 1008, 1009, 1015, 1020, 1027, 1028, 1029, 1030, 1031, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "t0": [4, 6, 9, 13, 15, 37, 40, 42, 44, 46, 48, 50, 56, 60, 62, 96, 181, 183, 212, 213, 214, 220, 223, 226, 230, 232, 260, 322, 351, 352, 353, 677, 678, 679, 1025], "t1": [42, 44, 60, 212, 220, 223, 226], "t15h": 1043, "t_": [667, 668, 669, 677, 678, 679, 862, 863, 1007], "t_0": 1007, "t_batch": 62, "t_i": 995, "t_k": [417, 993, 1009], "t_m": 1009, "t_mini_batch": [40, 62], "t_p": 266, "t_post": 259, "t_sne": [218, 1044], "t_stat": 259, "t_stat_uncorrect": 259, "t_t": 1009, "taa": 157, "taac": 157, "tab": [5, 7, 32, 51, 78, 109, 125, 127, 130, 149, 154, 156, 185, 186, 253, 316, 322, 411, 1043], "tab10": [231, 248], "tab20b": 2, "tabea": [1051, 1052], "tabibian": 1042, "tabl": [56, 215, 259, 380, 381, 384, 389, 410, 418, 583, 659, 681, 801, 815, 842, 958, 989, 993, 994, 999, 1013, 1037], "tabular": [2, 11, 168, 382, 417, 1001], "tacit": 394, "tacitli": 1038, "tackl": [123, 259, 367, 380, 410, 842, 995, 1018, 1023], "tadej": [1037, 1038], "tae": 1048, "taehoon": [1043, 1044], "taemin": 989, "tag": [6, 47, 69, 226, 328, 374, 379, 383, 384, 388, 392, 394, 405, 418, 427, 433, 497, 833, 1014, 1017, 1041, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "tahar": 1043, "tahiri": 1048, "taifi": 1042, "tail": [11, 122, 162, 167, 197, 199, 259, 305, 522, 525, 989], "tail_strength": [323, 522, 525], "takanori": 1044, "take": [3, 6, 11, 18, 28, 44, 51, 53, 55, 64, 73, 78, 90, 93, 109, 118, 149, 151, 154, 158, 167, 173, 180, 201, 205, 206, 222, 233, 245, 246, 253, 254, 260, 264, 268, 269, 281, 283, 286, 289, 290, 291, 293, 294, 305, 319, 323, 329, 335, 336, 339, 348, 352, 353, 357, 366, 367, 368, 374, 375, 378, 380, 382, 385, 386, 387, 388, 392, 394, 395, 400, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 422, 438, 444, 447, 448, 450, 451, 453, 458, 459, 460, 462, 464, 470, 520, 534, 539, 540, 541, 547, 548, 582, 593, 596, 597, 599, 600, 601, 611, 612, 617, 621, 622, 625, 633, 644, 650, 672, 674, 675, 676, 677, 680, 692, 693, 700, 706, 708, 710, 720, 730, 731, 739, 743, 744, 757, 772, 775, 779, 780, 781, 782, 784, 785, 788, 789, 801, 802, 806, 807, 815, 819, 829, 847, 848, 849, 851, 853, 854, 855, 856, 857, 869, 879, 900, 901, 905, 906, 907, 908, 909, 910, 911, 929, 963, 982, 985, 989, 990, 992, 993, 994, 996, 998, 999, 1000, 1003, 1008, 1009, 1018, 1020, 1024, 1026, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "takeawai": 281, "taken": [2, 5, 29, 40, 51, 53, 124, 146, 154, 167, 230, 231, 246, 265, 278, 307, 375, 377, 379, 380, 384, 394, 408, 410, 414, 418, 422, 441, 534, 562, 563, 584, 585, 647, 648, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 678, 680, 682, 685, 696, 878, 879, 899, 902, 908, 909, 952, 993, 995, 1003, 1005, 1042, 1045, 1048, 1049], "takeshi": [1044, 1049, 1050, 1051], "takeuchi": 375, "takingitcasu": [1044, 1045], "talbot": 264, "talgatomarov": 1047, "talk": [17, 68, 260, 351, 352, 353, 369, 375, 394, 403, 1018, 1021, 1029], "talli": 416, "tallott": 1044, "talwalkar": 982, "tamara": [375, 1053], "tamer": 1051, "tami": 56, "tamir": [1047, 1050], "tamirlan1": 1047, "tamper": 6, "tampermonkei": 388, "tan": [862, 863, 997, 1043], "tandfonlin": 410, "tang": [377, 1046, 1047, 1048], "tangent": [218, 343, 690, 694, 991, 1030, 1031], "tanh": [343, 778, 862, 863, 991, 1008], "tanjina": 1053, "tann": [1044, 1049], "tao": [1052, 1053], "tar": [6, 384], "taranjeet": 1042, "tarashanski": 1053, "tarbal": [384, 1051], "tarcusx": 1044, "tarfil": 6, "target": [2, 4, 11, 15, 17, 24, 28, 30, 31, 43, 50, 67, 69, 71, 72, 74, 84, 88, 97, 99, 101, 110, 117, 118, 119, 120, 122, 123, 125, 127, 129, 130, 131, 133, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 176, 179, 180, 181, 190, 193, 197, 199, 201, 202, 205, 206, 219, 227, 229, 230, 231, 232, 235, 236, 237, 238, 245, 252, 253, 255, 257, 260, 262, 264, 265, 268, 269, 273, 278, 281, 283, 286, 291, 294, 295, 300, 304, 305, 313, 316, 317, 319, 321, 326, 327, 330, 331, 335, 336, 339, 343, 345, 351, 352, 357, 358, 359, 360, 362, 366, 368, 369, 372, 373, 374, 375, 376, 377, 382, 384, 385, 388, 389, 393, 396, 403, 410, 413, 414, 417, 420, 434, 438, 439, 440, 443, 446, 465, 466, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 511, 521, 525, 532, 533, 535, 537, 538, 540, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 574, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 698, 699, 701, 702, 703, 708, 709, 710, 713, 714, 719, 721, 722, 724, 725, 727, 728, 729, 730, 731, 736, 739, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 854, 855, 856, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 889, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 925, 955, 956, 957, 984, 985, 986, 989, 990, 993, 997, 1000, 1001, 1007, 1008, 1009, 1014, 1015, 1017, 1018, 1020, 1025, 1027, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "target_class": 310, "target_column": [490, 491, 497], "target_encod": 312, "target_filenam": [502, 506], "target_gener": 155, "target_idx": 633, "target_mean_": [886, 1003], "target_nam": [4, 17, 28, 50, 88, 97, 101, 166, 206, 219, 245, 252, 260, 268, 269, 286, 311, 330, 351, 357, 373, 375, 489, 490, 492, 493, 494, 495, 497, 498, 501, 503, 504, 505, 506, 511, 714, 993, 1009, 1020, 1025, 1029, 1046], "target_opset": 403, "target_test": [253, 510], "target_train": [253, 510], "target_typ": [311, 886, 929, 956, 1053], "target_type_": 886, "targetencod": [311, 312, 394, 878, 879, 983, 1003, 1013, 1052, 1053], "targetencodertargetencod": 311, "targets_test": 231, "targets_train": 231, "tari": 56, "tashai": [1044, 1045], "task": [2, 5, 96, 116, 117, 123, 125, 145, 157, 164, 175, 181, 183, 184, 185, 186, 196, 197, 213, 216, 218, 236, 253, 256, 273, 281, 343, 353, 366, 368, 375, 377, 379, 380, 384, 385, 386, 389, 392, 393, 394, 415, 417, 418, 419, 420, 449, 462, 494, 506, 516, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 633, 634, 647, 648, 653, 654, 661, 662, 663, 664, 675, 682, 685, 728, 730, 731, 755, 783, 785, 788, 790, 802, 806, 819, 825, 959, 960, 990, 993, 994, 995, 996, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1027, 1028, 1029, 1031, 1036, 1041, 1045, 1051], "tast": 1036, "tata": 1053, "tau": 1003, "tau_0": 537, "tavenard": 1048, "tax": 0, "taxonom": 377, "taxonomist": 1028, "taylor": [417, 1044, 1046, 1047, 1050], "tb": [388, 572, 573, 574, 575, 576, 577, 578, 579], "tc": [146, 377, 395], "tcg": 157, "tch": [146, 377], "tcompl": 56, "tcpdump": 375, "tda": 1013, "teach": 380, "teacher": 68, "teal": [198, 207, 266], "team": [375, 383, 392, 394, 395, 1011, 1013, 1018, 1036], "teas": 167, "tech": [10, 377, 843], "technic": [157, 167, 198, 219, 319, 375, 377, 380, 394, 417, 653, 665, 686, 687, 900, 989, 990, 996], "technion": [665, 686, 687, 989], "techniqu": [10, 16, 68, 70, 95, 103, 110, 120, 137, 145, 146, 162, 164, 166, 205, 220, 222, 264, 278, 287, 318, 327, 343, 356, 368, 377, 392, 394, 403, 407, 408, 410, 414, 415, 416, 417, 418, 419, 448, 449, 450, 451, 535, 555, 678, 690, 694, 695, 727, 757, 985, 989, 990, 992, 993, 996, 999, 1001, 1005, 1007, 1009, 1014, 1018, 1023, 1028, 1029, 1049], "technolog": 377, "technologi": [146, 377, 410, 1013, 1018], "technometr": [377, 412, 470, 475, 999], "tediou": [130, 253], "teen": 1003, "teevan": [842, 995], "teh": [861, 998], "tejesh95": 1040, "telecom": [22, 23, 40, 226, 1018], "telenczuk": [5, 123, 130, 146, 162, 1045, 1048, 1049, 1051], "tell": [149, 167, 168, 233, 259, 339, 344, 367, 375, 410, 418, 564, 580, 982, 987, 1000, 1029], "temp": [2, 168], "temp_fold": 959, "temperatur": [168, 418, 1000], "tempfil": [52, 285, 315, 411, 996], "templat": [380, 384, 385, 394, 395, 558, 559, 564, 565, 566, 567, 1013], "templateclassifi": 382, "tempor": [11, 125, 181, 1013, 1014], "temporari": [52, 68, 70, 366, 469, 688, 782, 903, 996, 1039, 1040, 1043, 1049, 1050], "temporarili": [410, 1041], "temporarydirectori": [285, 315], "tempt": 167, "temptat": [362, 380], "ten": [13, 17, 109, 115, 125, 146, 219, 249, 375, 377, 417, 521, 910, 1045], "tenavi": 1050, "tend": [2, 10, 25, 35, 37, 41, 50, 53, 55, 144, 146, 167, 168, 186, 197, 202, 215, 236, 243, 246, 256, 260, 281, 302, 323, 343, 353, 366, 368, 380, 382, 394, 407, 410, 412, 415, 417, 419, 438, 449, 654, 851, 882, 894, 942, 989, 990, 996, 1009, 1029], "tendenc": [125, 223, 989, 990, 992, 995, 998], "tenenbaum": [689, 990], "tenenhau": 377, "tensor": [173, 372, 405, 415, 539, 541, 548, 640, 641, 642, 1031, 1048], "tensorflow": [4, 392, 1013, 1025], "tensorsketch": 985, "tent": 386, "tenur": 1018, "teon": 1048, "terenc": [1048, 1049], "term": [2, 12, 13, 23, 30, 56, 98, 112, 115, 119, 122, 154, 166, 181, 185, 186, 197, 199, 201, 211, 214, 215, 236, 253, 257, 261, 283, 299, 318, 343, 346, 351, 353, 368, 369, 380, 382, 384, 392, 407, 408, 410, 412, 414, 415, 417, 444, 448, 450, 453, 460, 463, 525, 536, 539, 541, 545, 548, 550, 589, 590, 591, 592, 605, 608, 609, 633, 634, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 676, 677, 679, 681, 688, 696, 731, 739, 784, 785, 788, 862, 863, 880, 884, 887, 905, 906, 907, 908, 909, 910, 911, 982, 984, 985, 987, 988, 989, 990, 993, 994, 995, 997, 998, 1003, 1007, 1008, 1020, 1029, 1044, 1050, 1051, 1052], "term1": 418, "term2": 418, "term3": 418, "termin": [367, 385, 386, 388, 397, 410, 424, 449, 462, 554, 555, 559, 560, 561, 564, 566, 667, 668, 669, 677, 679, 862, 863, 914, 916, 999, 1009], "terminalipythonapp": 386, "terminalpdb": 388, "termination_condition_": 902, "terminologi": [394, 1044], "terraza": 1048, "terri": [68, 1040], "terrycojon": 1040, "tesson": 410, "test": [2, 4, 6, 8, 9, 11, 22, 23, 24, 25, 29, 30, 31, 52, 68, 69, 83, 98, 109, 112, 114, 115, 116, 117, 121, 122, 123, 124, 125, 136, 138, 140, 142, 145, 147, 149, 150, 164, 166, 167, 168, 169, 170, 173, 181, 186, 192, 193, 196, 197, 198, 199, 200, 201, 204, 205, 212, 213, 215, 222, 227, 232, 233, 235, 245, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 266, 267, 269, 270, 271, 273, 276, 281, 286, 291, 292, 299, 301, 307, 309, 310, 311, 312, 322, 330, 339, 346, 353, 362, 366, 367, 374, 375, 377, 383, 384, 385, 386, 392, 393, 394, 396, 397, 402, 404, 405, 407, 409, 411, 412, 415, 417, 418, 419, 420, 427, 429, 433, 436, 437, 438, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 489, 490, 494, 498, 499, 503, 505, 525, 532, 538, 540, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 593, 595, 596, 597, 599, 600, 601, 603, 605, 606, 607, 609, 610, 611, 612, 628, 629, 631, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 713, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 855, 856, 862, 863, 865, 890, 891, 893, 894, 895, 896, 900, 901, 903, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 924, 934, 936, 937, 988, 989, 992, 993, 996, 997, 1001, 1003, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1024, 1025, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "test_": [11, 130, 414], "test_0": 2, "test_4": 2, "test_accuraci": [245, 260, 273], "test_auc": 828, "test_ax": 98, "test_balanced_accuraci": 273, "test_best_it": 121, "test_check_estim": 937, "test_color": 121, "test_common": [380, 388], "test_dataset": 374, "test_devi": 124, "test_enable_hist_gradient_boost": 384, "test_error": 272, "test_fn": 993, "test_fold": [414, 814], "test_fract": 1036, "test_idx": [11, 394], "test_import": 169, "test_index": [245, 329, 414, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "test_indic": 1024, "test_indx": 414, "test_lin": 121, "test_logist": [380, 388], "test_ms": 322, "test_neg_mean_absolute_error": [2, 199], "test_neg_mean_squared_error": [199, 828], "test_neg_root_mean_squared_error": 2, "test_negative_likelihood_ratio": 262, "test_positive_likelihood_ratio": 262, "test_prec_macro": 414, "test_precision_macro": 414, "test_r2": 828, "test_rec_macro": 414, "test_recall_macro": 414, "test_requiring_mpl_fixtur": 380, "test_result": 169, "test_scor": [119, 121, 123, 125, 205, 258, 261, 278, 311, 346, 356, 393, 414, 807, 824, 828, 829, 832], "test_scores_nb": 261, "test_scores_svm": 261, "test_set": 407, "test_siz": [2, 3, 4, 8, 11, 22, 23, 25, 29, 30, 69, 114, 120, 121, 123, 124, 125, 129, 166, 173, 181, 192, 197, 204, 205, 212, 213, 253, 256, 257, 261, 266, 268, 272, 281, 291, 292, 299, 301, 302, 307, 309, 310, 317, 339, 346, 362, 385, 414, 699, 803, 818, 821, 822, 831, 833, 854, 983, 995, 996, 1024, 1025, 1036, 1037, 1042, 1043, 1048], "test_sklearn_compatible_estim": [315, 937], "test_sparsifi": 388, "test_stat": 6, "test_tim": [232, 351], "test_tp": 993, "test_val": 381, "test_your_test_nam": 367, "tested_neg": 273, "tested_posit": 273, "testpypi": 384, "tests_for_packag": 380, "teunp": 1050, "texa": [10, 68], "text": [1, 4, 5, 8, 9, 10, 13, 14, 15, 17, 29, 30, 35, 38, 42, 47, 51, 54, 55, 56, 58, 59, 60, 62, 68, 78, 79, 107, 115, 120, 144, 157, 170, 177, 191, 192, 226, 230, 233, 237, 238, 243, 245, 251, 252, 258, 259, 263, 265, 266, 270, 276, 288, 291, 293, 299, 307, 318, 325, 327, 332, 345, 354, 356, 366, 368, 369, 372, 373, 374, 380, 385, 392, 394, 407, 410, 411, 413, 414, 415, 417, 420, 448, 450, 465, 469, 488, 489, 490, 500, 504, 509, 522, 537, 545, 565, 616, 626, 653, 659, 667, 669, 675, 677, 698, 704, 706, 708, 714, 718, 730, 731, 738, 794, 796, 801, 815, 831, 840, 842, 844, 847, 852, 865, 866, 868, 869, 877, 901, 902, 903, 905, 917, 918, 919, 939, 982, 985, 989, 991, 993, 994, 995, 997, 1000, 1003, 1005, 1007, 1008, 1012, 1014, 1015, 1018, 1021, 1031, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "text1": 418, "text2": 418, "text2d": 222, "text3": 418, "text3d": [43, 99], "text_": 698, "text_analyt": 1029, "text_clf": 1029, "text_kw": [698, 1051], "text_preprocess": 465, "text_stat": 68, "text_stats_transform": 68, "textbook": [418, 591], "textcoord": [7, 173], "textrm": [1008, 1027], "texttt": 993, "textual": [415, 424, 1009, 1045], "textur": [146, 377, 759, 760, 991], "tf": [13, 17, 230, 351, 352, 353, 375, 415, 522, 545, 589, 590, 591, 592, 844, 852, 877, 982, 991, 995, 1003, 1013, 1029], "tf_feature_nam": 13, "tf_transform": 1029, "tf_vector": 13, "tfid": 591, "tfidf": [13, 68, 330, 418, 592, 1029], "tfidf__use_idf": 1029, "tfidf_feature_nam": 13, "tfidf_transform": 1029, "tfidf_vector": 13, "tfidftransform": [330, 352, 353, 418, 490, 592, 1029, 1043, 1044, 1050, 1052, 1053, 1054], "tfidfvector": [13, 17, 68, 260, 351, 375, 415, 418, 490, 589, 590, 591, 1029, 1036, 1038, 1044, 1045, 1046, 1049, 1050, 1054], "tfidfvectorizertfidfvector": 260, "tfifi": 1049, "tfrac": 420, "tgct": 157, "tgz": [4, 1025], "th": [109, 236, 318, 360, 393, 410, 414, 417, 425, 442, 446, 452, 454, 460, 464, 473, 558, 559, 560, 561, 562, 563, 565, 566, 567, 594, 595, 633, 649, 650, 670, 672, 681, 697, 719, 781, 822, 886, 930, 983, 989, 993, 997, 1000, 1007, 1008, 1051], "th0rwa": [1046, 1047], "thakur": [1039, 1040], "thaler": 1042, "than": [2, 3, 5, 9, 10, 12, 17, 25, 28, 29, 38, 42, 45, 51, 53, 70, 73, 78, 80, 84, 90, 93, 96, 98, 100, 109, 111, 112, 114, 115, 116, 118, 119, 122, 125, 144, 146, 149, 155, 158, 161, 167, 168, 169, 173, 176, 181, 183, 186, 197, 199, 203, 213, 214, 215, 222, 226, 232, 233, 234, 236, 244, 253, 256, 257, 259, 260, 261, 262, 265, 268, 273, 278, 281, 283, 289, 290, 302, 305, 309, 310, 311, 312, 317, 319, 321, 323, 327, 343, 351, 352, 353, 362, 366, 367, 368, 374, 375, 376, 378, 379, 380, 382, 385, 386, 388, 394, 395, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 455, 458, 461, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 494, 495, 497, 510, 515, 516, 524, 532, 535, 536, 537, 538, 539, 541, 542, 543, 545, 548, 549, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 582, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 631, 635, 641, 643, 644, 645, 647, 648, 653, 654, 656, 659, 660, 661, 662, 663, 664, 667, 668, 669, 672, 673, 675, 677, 678, 679, 680, 683, 688, 693, 695, 697, 705, 706, 713, 721, 722, 723, 724, 725, 736, 737, 740, 765, 780, 781, 782, 784, 786, 796, 798, 799, 801, 804, 805, 811, 815, 820, 822, 823, 826, 827, 828, 829, 830, 833, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 862, 863, 868, 878, 879, 880, 882, 883, 885, 888, 894, 895, 899, 902, 905, 906, 907, 910, 911, 913, 914, 915, 916, 917, 931, 942, 944, 945, 950, 956, 962, 964, 967, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1013, 1014, 1017, 1020, 1024, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "thanh": 1054, "thank": [0, 2, 15, 23, 53, 84, 169, 173, 197, 268, 351, 352, 379, 388, 1013, 1018, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tharak": 1053, "thebabush": 1053, "thedevpanda": 1051, "thei": [0, 2, 11, 24, 35, 48, 55, 80, 95, 107, 110, 116, 117, 119, 121, 123, 125, 126, 142, 145, 146, 149, 150, 154, 167, 168, 181, 183, 186, 192, 197, 198, 215, 219, 222, 226, 232, 233, 236, 252, 256, 259, 260, 262, 268, 273, 278, 283, 285, 300, 305, 310, 317, 319, 343, 351, 352, 358, 359, 362, 366, 367, 368, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 388, 389, 392, 393, 394, 395, 400, 403, 406, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 422, 441, 443, 447, 454, 455, 468, 497, 509, 510, 534, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 598, 611, 620, 630, 644, 647, 648, 653, 659, 660, 661, 662, 663, 671, 673, 677, 679, 682, 688, 763, 764, 766, 769, 775, 790, 801, 815, 834, 840, 841, 842, 843, 844, 862, 865, 867, 873, 884, 885, 907, 910, 913, 914, 915, 916, 920, 982, 983, 985, 987, 989, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1018, 1020, 1024, 1026, 1027, 1029, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "theil": [164, 175, 200, 203, 216, 305, 650, 658, 672, 679, 680, 1015], "theilsen": 203, "theilsenregressor": [203, 214, 650, 672, 679, 989, 1040, 1048, 1050], "theirs": 351, "them": [2, 3, 6, 30, 37, 38, 47, 51, 53, 54, 58, 63, 64, 68, 69, 84, 93, 95, 98, 110, 126, 141, 146, 149, 161, 162, 167, 168, 169, 173, 176, 181, 192, 198, 199, 201, 215, 230, 233, 236, 237, 253, 257, 259, 260, 262, 268, 278, 285, 305, 310, 312, 318, 330, 339, 353, 360, 366, 368, 375, 378, 380, 381, 382, 383, 384, 388, 392, 394, 395, 396, 400, 403, 407, 408, 409, 410, 411, 414, 415, 417, 418, 420, 445, 448, 450, 451, 458, 465, 468, 494, 495, 509, 568, 569, 570, 571, 608, 609, 617, 621, 622, 625, 633, 640, 665, 693, 769, 772, 775, 779, 780, 781, 782, 790, 801, 815, 822, 830, 865, 869, 874, 875, 879, 883, 885, 886, 895, 896, 902, 913, 914, 950, 959, 982, 983, 989, 992, 993, 994, 996, 997, 998, 1003, 1008, 1009, 1012, 1013, 1017, 1018, 1020, 1027, 1028, 1029, 1036, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "themat": 394, "theme": [375, 1036], "themrmax": [1042, 1043], "themselv": [25, 167, 305, 376, 382, 388, 394, 400, 406, 410, 417, 418, 420, 447, 616, 793, 1009, 1029, 1046], "theodor": 1041, "theofilo": 1043, "theoptip": [1046, 1047], "theorem": [149, 346, 408, 995], "theoret": [35, 55, 149, 253, 408, 410, 417, 554, 555, 640, 705, 727, 757, 905, 982, 989, 990, 992, 993, 995, 1005, 1007, 1008, 1018], "theori": [119, 232, 248, 346, 377, 408, 410, 414, 417, 691, 695, 727, 757, 897, 898, 942, 982, 989, 990, 992, 993, 994, 1008, 1009], "theotheo": 1046, "thereaft": [167, 176], "therebi": [2, 167, 414, 417, 985, 1046], "therefor": [2, 7, 12, 18, 22, 25, 32, 35, 50, 51, 69, 70, 73, 78, 84, 98, 102, 109, 112, 114, 122, 125, 128, 130, 145, 166, 169, 197, 201, 213, 214, 243, 248, 249, 253, 260, 262, 273, 278, 281, 286, 301, 305, 310, 326, 339, 346, 347, 351, 352, 360, 366, 374, 378, 385, 392, 400, 403, 405, 410, 411, 412, 414, 415, 417, 418, 438, 536, 542, 550, 552, 554, 555, 560, 561, 565, 566, 605, 607, 659, 660, 666, 669, 672, 677, 679, 680, 702, 713, 736, 758, 798, 865, 866, 878, 882, 886, 894, 983, 987, 989, 990, 993, 995, 996, 997, 998, 1001, 1003, 1008, 1009, 1014, 1020, 1027, 1028, 1029, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "therein": 669, "thereof": 394, "theriley106": 1044, "thesi": [0, 377, 410, 417], "theta": [150, 151, 153, 155, 157, 158, 234, 415, 420, 524, 537, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 693, 995, 1009], "theta0": 150, "theta1": 150, "theta_": [843, 995], "theta_c": [234, 524], "theta_d": 415, "theta_i": 995, "theta_l": 420, "theta_opt": [611, 612], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 483, 484, 485, 486, 488, 490, 491, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 509, 510, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 707, 708, 710, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 737, 738, 739, 740, 741, 742, 743, 744, 749, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 769, 770, 775, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 921, 925, 926, 931, 932, 934, 936, 937, 942, 944, 949, 950, 951, 952, 953, 954, 956, 959, 960, 961, 963, 964, 967, 968, 977, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "thibault": 1045, "thibaut": 1050, "thibsej": 1045, "thick": [58, 293, 996], "thierno": 1046, "thierri": [0, 243, 245, 1018, 1042, 1043, 1050], "thij": [1048, 1051, 1052], "thin": [220, 621], "thing": [7, 32, 219, 254, 351, 367, 368, 375, 379, 380, 382, 392, 395, 410, 412, 418, 560, 561, 989, 1003, 1018, 1042], "think": [3, 35, 167, 168, 351, 352, 380, 416, 992, 1014, 1018, 1020], "thinner": 65, "third": [32, 118, 123, 141, 146, 157, 215, 226, 249, 278, 288, 307, 321, 367, 375, 379, 392, 395, 403, 418, 535, 589, 590, 591, 592, 803, 804, 805, 810, 847, 848, 849, 851, 853, 883, 895, 961, 982, 1004, 1011, 1036, 1047, 1052, 1053], "thirion": [0, 398, 1036, 1042, 1043, 1049], "thirteen": 377, "thirti": 1012, "thiruvenkadam": 1050, "this_centroid": 40, "this_cov": 80, "this_cv": 254, "this_di": 10, "this_dx": 10, "this_i": [22, 203], "this_max_it": 212, "this_p": 24, "this_prec": 80, "this_scor": [342, 1024], "this_sw": 22, "this_x": [22, 195, 203, 1027], "thoma": [0, 100, 226, 305, 367, 370, 395, 398, 901, 989, 1003, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "thomas9292": 1048, "thomaz": 1047, "thomo": 56, "thompson": [1039, 1051, 1052], "thorben": 1048, "thorough": 1018, "thoroughli": 998, "thorsten": 1018, "those": [2, 5, 10, 15, 17, 53, 58, 69, 110, 122, 125, 144, 146, 158, 166, 167, 168, 169, 170, 197, 199, 201, 215, 223, 230, 233, 235, 236, 249, 252, 253, 259, 262, 265, 278, 300, 305, 310, 336, 339, 351, 352, 353, 366, 367, 374, 380, 382, 384, 385, 386, 387, 392, 394, 395, 397, 406, 407, 409, 410, 414, 415, 417, 418, 420, 449, 451, 462, 465, 469, 495, 496, 497, 504, 558, 559, 565, 566, 570, 571, 582, 693, 698, 713, 719, 737, 801, 804, 805, 813, 815, 822, 847, 848, 849, 851, 853, 854, 855, 856, 857, 905, 906, 907, 910, 913, 914, 915, 916, 953, 982, 985, 989, 992, 993, 995, 996, 997, 1000, 1003, 1009, 1012, 1013, 1018, 1020, 1029, 1036, 1039, 1042, 1043, 1044, 1049, 1050, 1051, 1052, 1053, 1054], "though": [43, 53, 115, 146, 173, 176, 236, 265, 288, 307, 309, 352, 353, 362, 366, 374, 377, 380, 382, 393, 394, 410, 415, 416, 417, 418, 419, 700, 808, 810, 905, 982, 983, 985, 990, 993, 996, 1001, 1003, 1007, 1029, 1044], "thought": [218, 288, 394, 410, 447, 990, 994], "thoui": [0, 399, 1036], "thousand": [40, 115, 125, 230, 232, 309, 352, 375, 410, 417, 862, 863, 910, 990, 1029, 1045, 1047], "thread": [283, 316, 319, 378, 392, 394, 410, 417, 837, 838, 959, 960, 961, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "threadpool": 961, "threadpoolctl": [367, 378, 397, 402], "threadsaf": 1049, "three": [2, 5, 24, 32, 38, 39, 43, 44, 53, 56, 76, 88, 89, 109, 114, 116, 119, 120, 121, 131, 132, 133, 143, 146, 157, 167, 181, 189, 194, 197, 199, 206, 208, 232, 233, 243, 246, 281, 311, 312, 316, 367, 373, 377, 384, 397, 403, 406, 410, 414, 415, 416, 418, 452, 463, 499, 710, 944, 986, 988, 989, 990, 993, 996, 1003, 1007, 1008, 1012, 1020, 1028, 1036], "thresh": 1040, "threshold": [9, 23, 40, 63, 90, 96, 102, 146, 164, 168, 170, 192, 227, 229, 251, 256, 257, 258, 263, 266, 271, 276, 281, 321, 322, 325, 332, 357, 360, 394, 404, 410, 415, 417, 419, 442, 443, 446, 447, 470, 497, 501, 509, 510, 532, 538, 543, 549, 550, 551, 552, 562, 564, 589, 592, 594, 598, 603, 604, 645, 659, 668, 672, 677, 679, 693, 699, 701, 703, 704, 707, 708, 719, 721, 727, 728, 733, 740, 741, 743, 757, 783, 785, 788, 789, 790, 795, 798, 799, 800, 801, 820, 823, 831, 840, 851, 852, 866, 868, 870, 872, 885, 888, 900, 901, 902, 903, 910, 917, 919, 967, 989, 993, 996, 997, 999, 1003, 1006, 1008, 1009, 1014, 1015, 1031, 1036, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054], "threshold_": [598, 1043], "threshold_lambda": 645, "threshold_sign": 360, "thriller": [418, 876], "thrive": [0, 380], "throat": [9, 296, 375, 499], "through": [0, 5, 11, 32, 114, 146, 157, 167, 201, 218, 231, 254, 259, 262, 288, 309, 310, 337, 344, 353, 360, 377, 378, 380, 382, 387, 389, 394, 395, 397, 400, 409, 410, 413, 415, 417, 419, 420, 427, 433, 447, 465, 468, 473, 536, 542, 558, 559, 562, 565, 566, 567, 582, 594, 595, 598, 648, 652, 654, 656, 659, 660, 662, 664, 666, 669, 677, 678, 689, 692, 721, 807, 824, 881, 893, 897, 898, 913, 914, 915, 916, 948, 951, 982, 983, 990, 993, 995, 996, 997, 999, 1001, 1003, 1007, 1008, 1009, 1018, 1020, 1027, 1029, 1036, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054], "throughout": [321, 362, 394, 628, 802, 862, 863, 1020, 1039, 1044], "throughput": [365, 1013, 1031, 1039], "throw": [301, 389, 924, 1040, 1043, 1044, 1045, 1046, 1050], "thrown": [712, 1045, 1046], "thu": [2, 3, 22, 23, 24, 25, 38, 51, 53, 58, 76, 80, 96, 98, 112, 114, 115, 117, 119, 125, 142, 149, 154, 155, 168, 181, 185, 186, 197, 199, 215, 226, 232, 237, 245, 253, 257, 259, 264, 265, 266, 273, 286, 312, 315, 318, 356, 362, 366, 367, 375, 382, 386, 392, 394, 400, 407, 409, 410, 414, 415, 417, 418, 420, 421, 438, 440, 464, 516, 528, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 604, 607, 611, 623, 628, 633, 634, 644, 646, 659, 678, 706, 719, 726, 789, 796, 803, 808, 810, 822, 836, 839, 874, 905, 984, 985, 986, 987, 988, 989, 990, 993, 994, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1014, 1018, 1036, 1038, 1042, 1044, 1045, 1046, 1048, 1052], "thuan": 1047, "thukarama": 1051, "thumb": [115, 173, 366, 380, 381, 392, 410, 659, 660, 667, 668, 669, 677, 678, 679, 905, 993], "thumbnail": 1036, "th\u00e9ophil": 1052, "ti": [68, 197, 245, 248, 257, 347, 366, 407, 410, 600, 601, 636, 721, 727, 757, 798, 799, 907, 910, 913, 992, 993, 1008, 1037, 1039, 1040, 1044, 1046, 1050, 1051, 1052], "tiago": [1037, 1041], "tialo": 1053, "tian": [410, 443, 1041, 1042, 1043], "tianqi": 417, "tiao": [1041, 1042], "tib": [683, 684], "tibshirani": [112, 113, 124, 146, 185, 258, 377, 414, 417, 521, 560, 561, 629, 657, 722, 724, 725, 835, 852, 913, 914, 983, 987, 989, 994, 1000, 1009], "tic": [146, 168, 236, 270, 995], "tic_bwd": 146, "tic_fwd": 146, "ticconi": 1042, "tick": [6, 41, 58, 152, 237, 270, 633, 829], "tick_bottom": 305, "tick_left": 305, "tick_param": [5, 13, 133, 243, 259, 309, 329], "tick_right": 5, "ticker": [218, 220, 223, 283], "ticket": [320, 380], "tidelift": 0, "tie": [164, 189, 334, 349, 392, 417, 513, 833, 910, 994, 1008, 1009, 1015, 1037, 1052], "tieleman": [861, 998], "tien": 1041, "tiernei": [1044, 1045, 1046], "tight": [38, 102, 111, 118, 138, 142, 182, 184, 189, 190, 191, 202, 206, 209, 214, 220, 223, 247, 283, 289, 290, 294, 295, 335, 339, 342, 344, 357, 583, 693, 1048], "tight_layout": [4, 6, 23, 25, 29, 38, 50, 53, 63, 71, 73, 84, 93, 94, 95, 103, 109, 111, 116, 118, 120, 123, 128, 130, 132, 151, 153, 158, 161, 166, 167, 169, 170, 176, 177, 181, 187, 195, 197, 205, 208, 212, 215, 218, 231, 236, 254, 255, 271, 281, 283, 285, 295, 306, 307, 308, 309, 310, 315, 319, 337, 352, 356, 357, 1025], "tightli": 1023, "tijanajovanov": 1048, "tikhonov": [156, 420, 673], "tild": [871, 1001, 1003], "tilen": 1046, "till": [410, 443, 789, 993], "tim": [0, 114, 129, 398, 1036, 1041, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054], "time": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 400, 403, 405, 406, 407, 408, 410, 412, 413, 415, 417, 418, 421, 438, 442, 444, 445, 446, 447, 448, 451, 453, 456, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 473, 497, 500, 502, 520, 524, 535, 537, 539, 541, 542, 548, 563, 568, 569, 570, 571, 591, 611, 620, 628, 629, 630, 631, 635, 640, 641, 644, 647, 651, 653, 655, 661, 663, 665, 667, 668, 673, 674, 675, 677, 678, 679, 686, 687, 691, 693, 695, 702, 743, 746, 747, 749, 791, 795, 798, 799, 801, 803, 804, 805, 806, 808, 810, 815, 816, 817, 820, 822, 826, 827, 828, 829, 830, 831, 833, 835, 840, 841, 842, 843, 844, 845, 846, 853, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 875, 878, 880, 884, 889, 897, 898, 902, 903, 907, 910, 911, 919, 944, 959, 982, 983, 985, 986, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1018, 1020, 1025, 1027, 1028, 1029, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "time_dens": 322, "time_spars": 322, "time_step": [181, 863], "timeit": [212, 246, 386], "timeout": [497, 959, 1050], "timer": [246, 386], "times_init": 246, "timescal": 231, "timeseri": 2, "timeseriessplit": [2, 11, 125, 181, 254, 414, 1042, 1043, 1048], "timo": 1048, "timofei": 1051, "timotheemathieu": 1049, "timothi": [1041, 1049], "timsaur": 1046, "tinertia": 56, "ting": [564, 999, 1044, 1045], "tingshan": 1049, "tini": [1038, 1051, 1054], "tinoco": 1053, "tinta": 311, "tinyclu": 0, "tip": [362, 365, 369, 380, 383, 386, 404, 418, 535, 542, 646, 693, 989, 1016, 1017, 1030, 1031, 1039], "tiphain": 1047, "tirth": [1046, 1047], "titan": [69, 169, 240, 315, 319, 320, 1001], "titl": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 30, 35, 36, 37, 39, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 76, 77, 79, 80, 83, 84, 88, 89, 93, 94, 95, 96, 97, 100, 101, 102, 110, 111, 112, 115, 117, 118, 119, 122, 123, 125, 126, 129, 132, 133, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 167, 176, 177, 179, 181, 182, 184, 185, 186, 189, 190, 196, 197, 199, 201, 202, 203, 205, 206, 211, 214, 215, 218, 219, 220, 226, 230, 231, 232, 234, 235, 236, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 258, 259, 260, 262, 263, 264, 268, 269, 274, 285, 286, 289, 290, 291, 292, 294, 295, 296, 305, 309, 310, 311, 312, 328, 331, 335, 336, 337, 338, 339, 342, 343, 347, 348, 351, 357, 358, 359, 379, 380, 384, 388, 411, 993, 1017, 1025], "title_bow": 411, "titles_opt": 252, "titov": [1044, 1046, 1049, 1050], "titu": 1047, "tiwari": 1048, "tiziano": 1036, "tjoa": 1040, "tkammi": 1042, "tkdd": 564, "tliu68": 1049, "tm": [10, 996], "tmp": 384, "tmpdir": [285, 315], "tn": [253, 713, 719, 993], "tn_c": 268, "tnr": 253, "tnwei": 1048, "to_british": 418, "to_fram": 73, "to_list": 170, "to_numpi": [11, 154, 253], "to_onnx": 403, "to_replac": [2, 168], "toarrai": [5, 322, 330, 360, 411, 418, 567, 583, 589, 591, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 878, 895, 896, 943, 964, 965, 967, 975, 976, 983, 996, 1003, 1053], "toastedcornflak": [1042, 1043], "toastedyeast": [1050, 1051], "tobia": [1044, 1049, 1051], "tobychees": [1043, 1044], "toc": [146, 236], "toc_bwd": 146, "toc_fwd": 146, "toccac": 1046, "tocsc": 183, "tocsr": 15, "tod": [410, 421, 445], "todai": [154, 1029], "todens": [968, 969, 970, 971, 972, 973, 974], "todo": [44, 230, 384, 388, 410, 1054, 1055], "toeplitz": 77, "togeth": [2, 10, 49, 58, 69, 118, 130, 149, 155, 167, 178, 219, 222, 236, 255, 311, 319, 342, 357, 362, 382, 384, 392, 393, 394, 410, 417, 418, 419, 425, 452, 454, 568, 569, 595, 690, 716, 801, 815, 865, 866, 879, 989, 990, 993, 994, 1000, 1003, 1009, 1010, 1018, 1021, 1023, 1042, 1053], "toi": [7, 18, 19, 34, 37, 38, 39, 40, 45, 47, 50, 51, 53, 55, 65, 66, 78, 84, 97, 112, 126, 131, 132, 164, 179, 187, 201, 211, 225, 236, 241, 243, 289, 290, 300, 336, 345, 373, 386, 392, 410, 417, 418, 441, 442, 443, 445, 447, 449, 450, 451, 453, 459, 470, 513, 515, 523, 564, 640, 678, 727, 757, 799, 851, 858, 866, 885, 909, 990, 992, 993, 999, 1003, 1015, 1031], "tok": [353, 418], "token": [17, 353, 366, 375, 384, 418, 537, 589, 590, 591, 592, 1036, 1044, 1048, 1054], "token_featur": 418, "token_freq": 353, "token_pattern": [353, 418, 589, 590, 592], "tokoroten": 1041, "tokyo": [873, 1004], "tol": [5, 8, 15, 71, 93, 120, 125, 146, 161, 177, 188, 190, 204, 205, 211, 213, 226, 237, 244, 246, 302, 318, 346, 351, 382, 386, 417, 422, 444, 448, 450, 453, 460, 463, 472, 473, 479, 483, 484, 485, 532, 533, 534, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 560, 561, 562, 563, 603, 628, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 673, 675, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 692, 694, 696, 798, 799, 815, 854, 862, 863, 900, 901, 905, 906, 907, 908, 909, 910, 911, 979, 989, 1007, 1008, 1025, 1029, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "tola": 1046, "told": 418, "toledano": 1044, "toler": [44, 71, 125, 161, 188, 190, 213, 214, 343, 353, 375, 382, 389, 410, 422, 444, 448, 453, 460, 463, 472, 473, 479, 483, 484, 485, 532, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 548, 549, 560, 561, 562, 563, 628, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 677, 679, 680, 682, 683, 684, 685, 689, 690, 691, 692, 694, 695, 696, 845, 846, 850, 854, 862, 863, 900, 901, 905, 906, 907, 908, 909, 910, 911, 979, 989, 993, 1007, 1008, 1025, 1048, 1049, 1050, 1051], "toleranbc": 1045, "tolist": [2, 121, 161, 258, 317, 375], "tom": [0, 189, 205, 283, 285, 307, 308, 398, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tom1092": 1049, "toma": 1040, "tomasz": 1049, "tomato": 198, "tomatti": 1051, "tomdlt": 1042, "tomiock": [1051, 1052], "toml": 384, "tommaso": 1049, "tommi": [1043, 1044, 1045], "tomographi": [1, 14, 15, 64, 164, 653, 673, 989, 1015], "tomohiro": 1049, "tomorrow": 409, "tom\u00e1": [1049, 1050], "tongyu": 1053, "toni": [4, 375, 564, 885, 999, 1049, 1050], "tonk": 1043, "tony_blair": 1025, "too": [2, 5, 10, 11, 15, 25, 42, 48, 53, 55, 60, 68, 72, 80, 97, 122, 125, 161, 167, 169, 181, 198, 201, 219, 230, 236, 244, 252, 253, 257, 266, 275, 301, 311, 339, 351, 358, 359, 366, 377, 380, 386, 388, 392, 394, 407, 410, 412, 414, 417, 418, 419, 422, 438, 450, 539, 680, 693, 708, 840, 841, 842, 843, 844, 870, 883, 885, 988, 990, 992, 993, 995, 996, 1000, 1027, 1037, 1040, 1043, 1044, 1045, 1046, 1048, 1054], "took": [0, 2, 40, 267], "tool": [7, 9, 120, 167, 233, 253, 257, 262, 362, 369, 373, 374, 375, 378, 380, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 400, 403, 410, 411, 412, 488, 693, 702, 982, 988, 989, 993, 999, 1003, 1008, 1010, 1013, 1014, 1018, 1020, 1029, 1043, 1046, 1049, 1050, 1051], "toolbox": [392, 1013, 1018], "toolchain": 378, "toolkit": [366, 1013, 1018], "toolset": 1018, "tooth": [94, 1028], "tootoonian": 1049, "top": [4, 10, 12, 13, 15, 32, 35, 37, 39, 40, 41, 42, 43, 49, 60, 62, 69, 89, 95, 107, 114, 115, 118, 125, 130, 133, 167, 197, 199, 208, 212, 226, 236, 237, 243, 245, 246, 249, 256, 260, 268, 269, 288, 305, 307, 311, 316, 322, 326, 327, 339, 343, 351, 362, 380, 382, 386, 392, 406, 407, 410, 415, 416, 417, 488, 588, 589, 592, 600, 727, 757, 795, 917, 919, 982, 985, 989, 991, 1001, 1013, 1018, 1025, 1028, 1029, 1050], "top10": 375, "top5": 351, "top_featur": 13, "top_features_ind": 13, "top_indic": 351, "top_k_accuraci": 993, "top_k_accuracy_scor": [993, 1048, 1050], "tophat": [288, 416, 845, 846, 850], "topic": [1, 4, 5, 6, 14, 68, 164, 223, 253, 319, 351, 352, 353, 375, 376, 414, 415, 418, 489, 498, 537, 539, 541, 548, 589, 592, 989, 994, 1013, 1014, 1015, 1029, 1041, 1043], "topic_d": 6, "topic_idx": 13, "topic_word_prior": [415, 537], "topic_word_prior_": 537, "topisan": 1046, "toplak": 1052, "topolog": [464, 1013], "topologi": [222, 223], "torch": 405, "torgo": 374, "toro": 311, "toronto": [535, 645, 861], "torr": 1045, "torrella": [1045, 1046, 1052], "tortois": 989, "tosequ": 1054, "toshihiro": [1042, 1043, 1049], "toshniw": 1048, "tot": 10, "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 357, 358, 359, 360, 361, 367, 374, 375, 377, 386, 394, 406, 410, 416, 418, 421, 433, 445, 466, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 513, 515, 516, 520, 523, 524, 537, 545, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 584, 585, 591, 595, 597, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 677, 678, 679, 680, 698, 705, 706, 714, 730, 731, 732, 735, 739, 740, 758, 770, 784, 785, 788, 795, 796, 797, 801, 815, 826, 827, 828, 838, 839, 840, 841, 848, 850, 856, 863, 880, 884, 906, 908, 911, 913, 914, 915, 916, 942, 982, 989, 990, 993, 994, 995, 996, 1003, 1007, 1008, 1009, 1015, 1025, 1029, 1037, 1042, 1044, 1052], "total_cel": 125, "total_fit_tim": 6, "total_sampl": [329, 537], "total_sz_mb": 6, "total_vect_tim": 6, "totalbsmtsf": 130, "totrmsabvgrd": 119, "tottim": 386, "tour": [0, 189, 205, 283, 285, 307, 308, 398, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tournament": 982, "toward": [0, 24, 25, 61, 80, 116, 122, 129, 149, 169, 176, 201, 202, 223, 236, 346, 380, 394, 410, 449, 453, 463, 677, 679, 696, 879, 992, 1007, 1009, 1012, 1014], "toyota": 10, "tp": [410, 713, 719, 730, 731, 732, 783, 784, 785, 788, 917, 993], "tp_c": 268, "tpng": 917, "tpot": 1013, "tpr": [9, 227, 236, 253, 256, 268, 269, 387, 703, 707, 790, 993, 1033, 1036, 1052], "tpr_a": 268, "tpr_b": 268, "tpr_score": 253, "tprs_lower": 269, "tprs_upper": 269, "tr": [254, 377, 384, 410, 412, 470, 471, 472, 473, 474, 475, 476, 477, 843], "trace": [388, 410, 423, 474, 476, 477, 480, 481, 482, 690, 694, 990, 1047], "traceback": [380, 385, 388, 392, 469, 1017, 1053], "traceord": 115, "tracer0tong": 1042, "trach": 1036, "track": [107, 113, 121, 327, 380, 383, 384, 405, 535, 962, 994, 1013, 1014, 1043, 1046], "tracker": [379, 383, 388, 392, 395, 397, 403, 1011, 1014], "tracking_select": 962, "tractabl": [2, 414, 542, 635, 1013, 1049], "trade": [59, 76, 115, 125, 169, 201, 258, 260, 261, 339, 351, 394, 408, 409, 410, 412, 554, 555, 560, 561, 635, 657, 693, 801, 804, 805, 815, 828, 990, 997, 1005, 1007, 1008, 1014], "tradeoff": [53, 112, 164, 231, 239, 251, 266, 267, 268, 269, 276, 351, 366, 380, 388, 416, 516, 565, 699, 703, 728, 790, 831, 866, 885, 905, 990, 1015, 1027, 1045, 1048], "tradit": [15, 53, 197, 212, 352, 368, 407, 417, 418, 633, 695, 989, 992, 1003, 1013, 1018], "tradition": 1009, "traffic": 1018, "trail": [382, 977], "train": [2, 3, 4, 5, 6, 8, 9, 11, 22, 24, 25, 28, 29, 30, 31, 52, 54, 56, 62, 63, 68, 69, 73, 83, 84, 88, 90, 93, 96, 97, 98, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 127, 130, 131, 132, 136, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 180, 181, 183, 185, 186, 188, 189, 190, 192, 193, 196, 197, 198, 199, 200, 204, 205, 206, 209, 211, 212, 215, 226, 229, 231, 235, 245, 247, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 281, 283, 286, 289, 290, 291, 292, 294, 296, 299, 300, 301, 305, 307, 309, 310, 315, 318, 322, 325, 326, 327, 330, 331, 332, 335, 336, 338, 345, 346, 353, 355, 358, 359, 361, 362, 366, 367, 368, 372, 375, 377, 382, 385, 392, 393, 394, 405, 407, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 422, 438, 441, 442, 444, 445, 448, 450, 452, 453, 454, 455, 460, 466, 470, 471, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 494, 497, 498, 499, 501, 505, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 692, 693, 697, 704, 742, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 870, 871, 874, 875, 878, 879, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 967, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1021, 1024, 1025, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "train_0": 2, "train_4": 2, "train_accuraci": [245, 273], "train_auc": 828, "train_ax": 98, "train_balanced_accuraci": 273, "train_cover_std": 9, "train_dataset": [167, 374], "train_error": 272, "train_errors_with": 120, "train_errors_without": 120, "train_fract": 1036, "train_idx": [11, 167, 394], "train_import": 169, "train_index": [245, 329, 414, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "train_indic": 1024, "train_indx": 414, "train_pr": 120, "train_prec_macro": 414, "train_r2": 828, "train_rec_macro": 414, "train_result": 169, "train_sampl": [25, 212, 213], "train_scor": [205, 311, 346, 356, 807, 824, 828, 829, 832, 988], "train_score_": [123, 417, 560, 561, 562, 563], "train_set": 407, "train_siz": [3, 5, 8, 109, 129, 150, 173, 213, 232, 236, 261, 272, 317, 320, 346, 803, 807, 818, 821, 829, 831, 988, 1024, 1036, 1037, 1042, 1043], "train_size_ab": 829, "train_size_idx": 346, "train_sizes_ab": 829, "train_test_s": 232, "train_test_scor": 1054, "train_test_split": [3, 4, 5, 8, 11, 22, 23, 25, 29, 30, 69, 73, 84, 98, 109, 114, 116, 120, 121, 122, 123, 124, 125, 126, 129, 142, 143, 166, 167, 169, 170, 173, 181, 192, 197, 204, 205, 212, 213, 215, 227, 236, 239, 240, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 330, 356, 360, 362, 385, 393, 405, 411, 414, 417, 438, 439, 559, 561, 568, 569, 698, 699, 701, 703, 800, 801, 823, 833, 836, 854, 862, 863, 865, 915, 916, 982, 983, 993, 995, 996, 1001, 1003, 1008, 1025, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1049, 1053], "train_tim": [212, 232, 351, 352], "trainabl": 382, "traine": 1018, "training_data": 149, "training_data_": 1046, "training_idx": 157, "training_indic": 156, "training_noisy_target": 149, "training_sample_indic": 149, "training_tim": [120, 351], "training_time_early_stop": 120, "training_time_ful": 120, "trajectori": 113, "tran": 77, "trans_data": 220, "transact": [61, 253, 377, 410, 412, 421, 423, 445, 449, 476, 535, 539, 541, 548, 564, 645, 665, 686, 687, 726, 727, 757, 770, 989, 993], "transax": [42, 60, 222, 226, 245, 291, 307], "transcript": 380, "transcriptom": 693, "transduc": 327, "transduct": [394, 410, 900, 901, 1014], "transduction_": [326, 327, 328, 900, 901, 902], "transfer": [125, 400, 405, 989, 1014], "transform": [2, 3, 4, 6, 8, 10, 12, 23, 42, 44, 45, 46, 49, 52, 55, 60, 67, 71, 72, 74, 84, 87, 88, 95, 96, 98, 99, 101, 102, 108, 113, 115, 119, 129, 130, 132, 134, 143, 155, 162, 164, 167, 168, 169, 173, 189, 197, 198, 205, 211, 213, 215, 219, 222, 226, 228, 229, 231, 233, 234, 236, 240, 245, 255, 256, 257, 260, 268, 281, 283, 285, 291, 292, 293, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 320, 322, 323, 339, 342, 343, 351, 353, 362, 369, 374, 375, 376, 377, 380, 382, 385, 389, 394, 400, 403, 405, 407, 408, 410, 412, 413, 414, 415, 417, 418, 419, 420, 426, 431, 434, 438, 442, 443, 444, 446, 448, 450, 453, 465, 466, 467, 468, 469, 483, 484, 485, 486, 489, 490, 497, 504, 509, 510, 515, 516, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 558, 560, 562, 565, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 637, 639, 640, 641, 642, 643, 654, 659, 664, 674, 677, 685, 689, 690, 691, 692, 693, 695, 702, 703, 714, 754, 755, 786, 801, 804, 805, 815, 831, 834, 840, 849, 854, 857, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 905, 907, 910, 911, 934, 936, 982, 983, 985, 987, 989, 990, 993, 994, 997, 1007, 1008, 1010, 1013, 1014, 1015, 1016, 1020, 1025, 1026, 1029, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "transform_algorithm": [96, 102, 532, 538, 543, 1052], "transform_alpha": [96, 102, 532, 538, 543, 1049], "transform_dur": 283, "transform_func": 260, "transform_list": 864, "transform_max_it": [532, 538, 539, 543, 1046], "transform_method": 415, "transform_n_nonzero_coef": [96, 102, 532, 538, 543], "transform_n_nozero_coef": 102, "transform_output": [240, 253, 312, 469, 903, 1051, 1052], "transformed_grid": 128, "transformedtargetregressor": [73, 167, 197, 392, 400, 411, 594, 595, 598, 994, 1044, 1046, 1049, 1054], "transformedtargetregressortransformedtargetregressor": 167, "transformer_": [233, 466], "transformer_list": [72, 411, 864, 867, 983, 1047, 1048], "transformer_nam": 283, "transformer_weight": [68, 465, 468, 864, 1041, 1048], "transformermixin": [233, 283, 382, 394, 466, 1044, 1051, 1052, 1053], "transformers_": [465, 468, 1053, 1054], "transfus": 227, "transit": [15, 346, 384, 403, 1047], "transitive_target": 15, "translat": [73, 382, 420, 528, 615, 874, 875, 891, 990, 993, 1011, 1018], "transluc": 136, "transpar": [29, 307, 978, 1018], "transpil": 1013, "transpos": [23, 259, 422, 539, 541, 548, 661, 662, 663, 664, 789, 942, 979, 985, 993, 1005, 1028, 1036, 1050], "transposit": 942, "trapezoid": [266, 707, 708, 993], "travel": 0, "travers": [360, 996, 1000, 1054], "travi": [1036, 1044], "treat": [2, 4, 69, 119, 130, 161, 167, 197, 268, 311, 317, 322, 329, 362, 380, 392, 394, 406, 417, 418, 443, 562, 563, 589, 590, 592, 608, 609, 633, 639, 646, 672, 675, 730, 731, 739, 755, 784, 785, 788, 789, 874, 875, 881, 882, 885, 886, 890, 893, 894, 896, 905, 906, 950, 983, 985, 989, 993, 994, 1000, 1003, 1007, 1009, 1025, 1040, 1048, 1052, 1053], "treatment": [79, 166, 374, 409, 415, 470, 475], "tree": [2, 5, 10, 11, 24, 25, 29, 39, 42, 53, 60, 88, 97, 108, 111, 112, 113, 115, 119, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 141, 146, 151, 157, 161, 168, 170, 180, 205, 206, 219, 233, 234, 235, 236, 237, 256, 263, 265, 278, 281, 283, 286, 288, 296, 305, 306, 308, 310, 316, 317, 319, 336, 361, 362, 366, 369, 375, 377, 386, 393, 394, 396, 407, 409, 410, 416, 421, 438, 442, 443, 444, 445, 446, 447, 449, 451, 458, 464, 496, 497, 501, 505, 515, 516, 520, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 632, 633, 634, 635, 659, 689, 693, 703, 704, 712, 743, 749, 789, 791, 807, 822, 828, 829, 831, 840, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 866, 869, 878, 937, 983, 990, 993, 994, 999, 1000, 1013, 1014, 1015, 1016, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "tree_": [315, 356, 360, 850, 913, 914, 915, 916], "tree_copi": [845, 846], "tree_disp": 237, "tree_importance_sorted_idx": 170, "tree_indic": 170, "tree_optim": 278, "tree_preprocessor": [130, 197], "tree_stat": [845, 846], "treelit": 1013, "trein": 1039, "tremend": [311, 417], "trend": [127, 154, 168, 229, 300, 1018, 1043], "trent": [1018, 1042], "trevor": [146, 185, 320, 377, 629, 657, 722, 724, 725, 983, 989, 1005, 1040, 1041, 1044, 1045, 1046, 1048], "trevorstephen": [1040, 1042], "tri": [64, 101, 218, 292, 343, 367, 382, 385, 392, 395, 407, 450, 452, 454, 632, 633, 634, 671, 693, 699, 701, 703, 815, 961, 998, 1020, 1038, 1044, 1048, 1054], "triag": [0, 369, 380, 383, 395], "trial": [2, 264, 448, 450, 461, 672, 798, 799, 989, 1042], "triangl": [394, 415, 444, 448, 460, 700, 991, 996], "triangular": [410, 464, 612, 990], "tribe": 375, "trick": [149, 232, 293, 343, 353, 365, 368, 369, 383, 392, 411, 583, 590, 644, 673, 985, 986, 997, 1007, 1008, 1027, 1028, 1031, 1037, 1045, 1053], "tricki": [407, 990], "trickiest": 380, "trigg": 567, "trigger": [69, 70, 384, 394, 403, 411, 862, 863, 865, 866, 925, 926, 942, 989, 1029, 1044, 1050, 1051], "triglycerid": [146, 377], "trim": [212, 410, 845, 846], "trimeta": 1047, "trinh": 1051, "tripl": 385, "triplet": 510, "tripramudya": 1052, "trishnendu": 1044, "tristan": 989, "triu": 10, "trivial": [7, 199, 253, 356, 380, 410, 819, 907, 910, 990, 1014, 1036], "troillard": [1052, 1053], "tropp": [536, 542], "troubl": [28, 418], "troubleshoot": [418, 1011], "troyanskaya": [629, 983], "true": [2, 3, 4, 5, 6, 8, 9, 11, 13, 15, 17, 24, 25, 28, 30, 32, 35, 42, 47, 48, 51, 52, 53, 55, 56, 58, 61, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 90, 93, 94, 95, 96, 98, 103, 107, 109, 113, 115, 119, 121, 122, 124, 125, 126, 127, 130, 131, 133, 136, 137, 142, 145, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 181, 182, 184, 185, 186, 188, 190, 192, 193, 194, 197, 199, 200, 201, 204, 205, 211, 212, 213, 215, 218, 221, 222, 226, 227, 230, 232, 233, 234, 235, 236, 239, 240, 243, 246, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 292, 296, 299, 300, 301, 302, 306, 310, 311, 312, 315, 317, 319, 320, 321, 322, 323, 327, 329, 330, 331, 342, 343, 345, 346, 347, 351, 352, 353, 356, 357, 360, 362, 366, 367, 373, 375, 376, 378, 380, 381, 382, 385, 386, 387, 389, 393, 394, 396, 400, 403, 405, 406, 407, 410, 411, 412, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 427, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 712, 713, 714, 715, 716, 719, 720, 721, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 739, 740, 741, 742, 743, 744, 751, 752, 753, 755, 757, 762, 768, 770, 779, 783, 784, 785, 786, 787, 788, 789, 790, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 924, 925, 926, 936, 942, 943, 954, 955, 958, 959, 963, 964, 965, 966, 974, 979, 981, 982, 983, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1020, 1024, 1025, 1027, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "true_coef": [166, 181, 192, 647, 648, 653, 661, 662, 663, 682, 683, 684], "true_cov": [470, 472, 473, 479], "true_den": 288, "true_fac": 235, "true_fun": 274, "true_h": 319, "true_k": 352, "true_label": [321, 326, 327], "true_nam": [4, 1025], "true_relev": [727, 757], "true_w": 319, "true_weight": 176, "trujillo": [1050, 1051], "truli": [262, 266, 368, 713, 993], "truncat": [71, 128, 219, 389, 535, 536, 540, 541, 542, 545, 677, 679, 727, 757, 798, 854, 918, 942, 982, 992, 993, 1007, 1025, 1029, 1030, 1031, 1042, 1044], "truncate_mod": 39, "truncatedsvd": [128, 219, 352, 415, 535, 536, 540, 541, 542, 693, 864, 867, 1038, 1043, 1047, 1048, 1050, 1054], "truong": 1042, "trust": [10, 24, 69, 70, 79, 109, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 170, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 384, 395, 403, 407, 1024, 1050], "trustworthi": [319, 1044, 1045, 1050, 1051, 1052, 1053], "truth": [18, 30, 38, 43, 47, 55, 56, 59, 76, 80, 84, 96, 100, 126, 157, 181, 191, 197, 198, 236, 249, 262, 352, 394, 408, 410, 704, 705, 706, 709, 713, 714, 715, 716, 718, 719, 722, 724, 725, 727, 729, 730, 731, 735, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 784, 785, 786, 787, 788, 791, 792, 796, 797, 993, 1020, 1028, 1044, 1050], "truthi": 954, "try": [2, 4, 9, 10, 11, 13, 23, 24, 37, 51, 69, 70, 96, 109, 114, 115, 116, 117, 118, 125, 126, 127, 130, 133, 143, 149, 154, 162, 166, 167, 168, 169, 173, 176, 178, 186, 227, 228, 229, 233, 237, 238, 239, 240, 244, 245, 248, 253, 257, 259, 260, 266, 271, 273, 278, 283, 296, 302, 311, 316, 317, 319, 320, 322, 328, 341, 346, 351, 352, 360, 375, 378, 379, 380, 382, 385, 386, 388, 392, 394, 400, 403, 410, 413, 414, 417, 418, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 504, 568, 578, 590, 659, 674, 676, 690, 694, 800, 801, 804, 805, 813, 815, 823, 826, 827, 828, 830, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 905, 924, 977, 982, 989, 990, 999, 1008, 1009, 1014, 1017, 1018, 1020, 1022, 1025, 1027, 1028, 1029, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "tr\u00e9segni": [0, 1038], "ts_cv": [2, 11, 125], "tscv": [414, 822], "tseng": 410, "tsetogl": 1051, "tsilhouett": 56, "tslearn": 1013, "tsne": [164, 218, 219, 220, 222, 223, 284, 285, 297, 319, 394, 424, 434, 497, 689, 690, 691, 849, 853, 866, 967, 990, 996, 1015, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "tsne_param": 283, "tsoumaka": [721, 735, 741, 993], "tspeng": [1051, 1052], "tsuga": 1049, "tsujii": 1007, "tsukada": 1048, "tsuruoka": 1007, "tsutomu": 1047, "tt": [131, 254, 466], "ttang131": 1046, "ttime": 56, "tttthomasssss": 1040, "tube": [911, 1008], "tue": [2, 125, 168, 1042], "tuft": 450, "tulio": [1044, 1045], "tulken": 1046, "tulloch": [1039, 1040], "tumor": [146, 377, 409], "tune": [2, 25, 42, 53, 69, 98, 109, 115, 125, 145, 146, 149, 161, 164, 168, 186, 201, 202, 214, 222, 227, 236, 251, 252, 262, 263, 264, 266, 276, 278, 285, 306, 329, 339, 343, 346, 351, 362, 366, 367, 368, 393, 394, 404, 407, 410, 414, 417, 419, 420, 453, 463, 497, 552, 560, 561, 562, 595, 614, 615, 616, 618, 620, 621, 623, 624, 626, 644, 659, 660, 691, 695, 701, 703, 719, 733, 743, 785, 788, 800, 801, 817, 823, 828, 831, 861, 866, 885, 903, 910, 987, 988, 989, 990, 992, 993, 996, 997, 999, 1007, 1008, 1015, 1021, 1031, 1036, 1050, 1052, 1054], "tuned_classifi": 323, "tuned_model": [253, 273], "tuned_model_coef": 273, "tuned_param": 5, "tuned_paramet": [76, 136, 257], "tunedthresholdclassifiercv": [253, 273, 409, 800, 1054], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 253, "tupl": [6, 46, 47, 53, 102, 168, 215, 373, 374, 375, 382, 394, 414, 422, 435, 452, 454, 465, 468, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 509, 511, 512, 513, 514, 515, 523, 534, 562, 563, 568, 569, 570, 571, 583, 584, 585, 588, 589, 590, 592, 628, 633, 634, 635, 712, 713, 720, 743, 782, 784, 798, 801, 815, 828, 845, 846, 864, 865, 875, 876, 880, 883, 891, 895, 907, 908, 909, 910, 911, 920, 926, 927, 929, 933, 934, 935, 936, 951, 960, 977, 1000, 1042, 1043, 1047, 1048, 1049, 1054], "turn": [2, 30, 76, 161, 162, 167, 181, 212, 213, 231, 259, 287, 353, 366, 367, 368, 375, 392, 394, 395, 408, 410, 411, 413, 415, 418, 419, 420, 582, 583, 590, 608, 609, 834, 838, 907, 910, 928, 983, 987, 995, 998, 1003, 1018, 1029, 1041, 1043, 1044, 1049], "turquois": [97, 101, 102, 124, 203, 214, 221, 245, 246, 266], "tutori": [79, 136, 137, 138, 186, 199, 215, 259, 369, 380, 381, 386, 388, 393, 403, 410, 453, 463, 692, 1008, 1027, 1039], "tutorial_hom": 1029, "tuveri": 1051, "tuzova": 1044, "tv": 56, "tw": [173, 374, 488, 509, 510, 659, 1008], "tweak": [80, 233, 414, 959, 992, 1029, 1047], "tweedi": [164, 175, 197, 216, 465, 497, 553, 649, 670, 681, 707, 725, 746, 748, 750, 751, 753, 831, 866, 869, 870, 878, 885, 989, 1015, 1046, 1047, 1049], "tweedie_pow": 215, "tweedieregressor": [2, 316, 319, 649, 670, 989, 1047, 1050, 1051], "tweet": 1018, "twelfth": 697, "twenti": [17, 230, 377, 406, 410, 1029], "twenty_test": 1029, "twenty_train": 1029, "twice": [25, 253, 271, 273, 351, 353, 382, 420, 620, 731, 733, 944, 1045, 1053], "twine": 384, "twinx": 329, "twister": 1047, "twitter": 384, "two": [2, 5, 7, 9, 13, 18, 22, 24, 28, 32, 35, 37, 38, 41, 53, 58, 62, 68, 69, 73, 78, 83, 84, 88, 89, 90, 93, 95, 96, 98, 101, 108, 109, 110, 117, 118, 119, 120, 122, 125, 126, 127, 128, 131, 134, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 167, 168, 169, 176, 180, 181, 185, 186, 187, 188, 193, 197, 198, 199, 205, 206, 209, 214, 215, 220, 222, 223, 226, 231, 233, 234, 236, 243, 244, 245, 247, 248, 249, 253, 254, 256, 260, 266, 278, 286, 288, 291, 292, 294, 296, 305, 307, 310, 315, 316, 318, 319, 323, 328, 335, 336, 339, 340, 341, 343, 347, 351, 352, 353, 357, 362, 373, 374, 375, 376, 377, 378, 380, 382, 384, 386, 387, 388, 392, 394, 395, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 458, 460, 465, 470, 471, 472, 473, 474, 475, 476, 477, 489, 491, 492, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 511, 515, 520, 523, 537, 539, 541, 545, 548, 550, 551, 554, 561, 571, 582, 585, 591, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 621, 622, 625, 629, 632, 633, 640, 644, 646, 671, 672, 674, 693, 700, 704, 705, 706, 713, 716, 717, 720, 722, 723, 724, 725, 732, 733, 736, 737, 739, 742, 744, 755, 756, 758, 764, 765, 772, 775, 778, 779, 780, 781, 782, 786, 787, 795, 796, 797, 798, 834, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 862, 863, 869, 870, 877, 878, 879, 880, 899, 900, 901, 905, 906, 913, 915, 916, 956, 972, 973, 979, 982, 983, 985, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1020, 1024, 1027, 1028, 1029, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "two_mean": 42, "two_point_correl": [845, 846], "twoclass_output": 111, "twosigmajab": 1044, "twx": 10, "tx": 413, "tx_k": [413, 987], "txn": 10, "txt": [351, 374, 494, 504], "txt_sentoken": 1029, "ty": 413, "ty_k": 413, "tyagi": 1050, "tygert": [536, 542, 942], "tyler": [310, 1043, 1049, 1050, 1051], "tylerlanigan": 310, "type": [5, 51, 52, 63, 67, 68, 74, 79, 88, 90, 102, 118, 119, 121, 154, 162, 164, 166, 167, 168, 173, 181, 197, 199, 228, 233, 238, 240, 242, 244, 245, 248, 249, 250, 253, 254, 260, 265, 266, 268, 269, 270, 273, 278, 293, 311, 322, 343, 351, 353, 360, 362, 367, 369, 373, 374, 375, 377, 380, 383, 384, 385, 386, 392, 393, 397, 403, 406, 411, 418, 434, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 497, 509, 510, 516, 568, 573, 582, 583, 589, 590, 592, 601, 605, 618, 628, 630, 631, 639, 657, 659, 673, 675, 680, 688, 690, 693, 694, 700, 702, 708, 715, 717, 730, 731, 734, 739, 784, 785, 788, 789, 798, 799, 801, 807, 815, 824, 829, 831, 832, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 865, 866, 867, 870, 872, 878, 879, 885, 886, 903, 907, 908, 909, 910, 911, 921, 923, 925, 926, 929, 933, 934, 956, 957, 964, 967, 979, 980, 983, 985, 990, 992, 993, 994, 995, 996, 997, 1003, 1005, 1009, 1015, 1017, 1018, 1022, 1027, 1028, 1029, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "type_check": 384, "type_filt": 934, "type_of_target": [394, 872, 886, 994, 1050, 1051, 1053, 1054], "type_of_target_": 886, "typed_ndarrai": 380, "typeerror": [233, 318, 385, 712, 929, 950, 977, 1043, 1044, 1047, 1049, 1053], "typic": [23, 25, 97, 107, 120, 173, 181, 197, 201, 215, 232, 261, 262, 266, 268, 269, 289, 290, 317, 339, 352, 366, 373, 374, 375, 378, 382, 383, 384, 389, 393, 394, 403, 405, 407, 408, 410, 411, 414, 415, 417, 418, 420, 444, 448, 450, 497, 542, 552, 554, 556, 557, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 630, 639, 641, 644, 655, 656, 657, 672, 683, 684, 713, 872, 879, 883, 886, 941, 942, 950, 953, 978, 982, 986, 989, 990, 992, 993, 994, 995, 999, 1001, 1018, 1029, 1045, 1049, 1052, 1053], "typo": [380, 395, 400, 1036], "tzu": 1040, "t\u00e9l\u00e9com": [0, 1011], "u": [2, 8, 9, 10, 11, 15, 32, 48, 50, 54, 88, 93, 100, 119, 120, 125, 149, 158, 166, 167, 168, 194, 198, 201, 205, 215, 219, 222, 230, 233, 239, 240, 244, 245, 249, 253, 254, 259, 262, 266, 273, 309, 311, 343, 351, 360, 367, 369, 375, 380, 384, 386, 388, 392, 397, 400, 406, 410, 413, 415, 417, 418, 433, 464, 466, 483, 484, 485, 532, 538, 546, 547, 551, 553, 555, 557, 559, 561, 563, 566, 569, 571, 589, 590, 592, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 682, 685, 690, 694, 705, 721, 741, 756, 838, 839, 848, 856, 863, 885, 899, 906, 908, 911, 914, 916, 942, 985, 987, 992, 993, 1000, 1003, 1011, 1018, 1029, 1033, 1046], "u2uwz2": [146, 377], "u_": [406, 483, 484, 485], "u_1": [406, 985], "u_2": [406, 985], "u_i": [410, 483, 484, 485, 756], "u_init": 544, "u_k": [413, 415], "uai": 1005, "ubuntu": [366, 378, 386, 388], "ucdenv": 44, "uchida": [177, 1046], "uci": [6, 146, 253, 310, 374, 377, 501, 503, 505, 511], "ucl": 1006, "ucla": [258, 989], "udi": 1036, "udit": 1050, "ufmay": 1048, "ufunc": [167, 1053], "ugli": [206, 291, 294, 335], "ugo": 1050, "ugurcaliskan": 1040, "ugurthemast": [1039, 1040], "uhmann": 1049, "uieda": 1049, "uint": 1047, "uint32": [375, 498], "uint8": [51, 96, 374, 498, 507, 508, 1048], "uk": [1006, 1029], "ulloa": 1042, "ulrik": [410, 453, 463, 692], "ulterior": 11, "ultim": [53, 222, 381], "umar": [1044, 1045], "umass": [4, 17, 375, 1025], "umberto": 1048, "umbrella": 409, "umpi": 418, "un": [10, 380, 407, 418, 422, 534, 590, 796, 868, 877, 888, 892, 1045], "unabl": [10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 166, 167, 168, 169, 178, 181, 197, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 328, 360, 368, 885, 1003, 1045], "unadjust": [410, 993, 1048], "unaffect": 996, "unalt": 993, "unambigu": [268, 994, 1042], "unanim": 395, "unavail": [394, 659, 660, 954, 1043, 1049], "unbalanc": [164, 262, 334, 337, 340, 349, 414, 513, 632, 910, 930, 931, 982, 1007, 1015], "unbias": [76, 407, 412, 415, 438, 551, 657, 673, 675, 688, 989, 1024], "unbound": [35, 992, 1050, 1054], "uncalibr": [22, 23, 24, 438], "uncent": 178, "uncertain": [259, 327, 379], "uncertainti": [23, 125, 149, 156, 176, 261, 407, 410, 568, 569, 644, 865, 983, 1005], "uncertainty_index": [326, 327], "unchang": [167, 215, 266, 417, 434, 438, 443, 444, 445, 446, 447, 448, 450, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 693, 764, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 996, 1020, 1044, 1050, 1052], "unclaim": 383, "unclear": [379, 380, 502], "unclust": 447, "uncommon": [412, 659, 905, 1008], "uncompress": [6, 509, 510, 1029], "unconstrain": [125, 127, 168, 316, 322, 375, 1007], "uncorrect": [259, 596, 599], "uncorrel": [265, 376, 529, 535, 542, 993, 1027], "uncorrupt": 3, "uncov": [103, 696], "undefin": [11, 262, 394, 713, 730, 739, 784, 962, 993, 1044, 1048, 1052], "undefinedmetricwarn": [302, 730, 731, 784, 785, 788, 1045], "under": [2, 5, 9, 22, 23, 25, 39, 65, 76, 77, 100, 119, 122, 168, 197, 226, 236, 259, 266, 268, 269, 306, 321, 369, 374, 380, 382, 384, 386, 388, 394, 397, 403, 407, 410, 412, 414, 415, 418, 419, 447, 452, 454, 471, 472, 473, 474, 475, 476, 477, 533, 540, 542, 544, 655, 656, 657, 703, 707, 708, 709, 716, 743, 755, 789, 790, 798, 799, 850, 949, 989, 990, 991, 993, 996, 1003, 1007, 1008, 1009, 1013, 1014, 1029, 1036, 1038, 1039, 1041, 1044, 1048], "underdetermin": 181, "underestim": [11, 122, 168, 197, 215, 259, 380], "underfit": [2, 32, 122, 149, 164, 169, 198, 201, 251, 275, 276, 299, 311, 346, 417, 658, 801, 804, 805, 815, 827, 828, 865, 880, 988, 989, 1015], "underflow": [1044, 1049], "undergo": 265, "undergrad": 1018, "underli": [25, 54, 78, 129, 146, 167, 170, 198, 200, 201, 233, 253, 264, 287, 288, 343, 359, 367, 380, 392, 394, 396, 400, 405, 407, 410, 412, 414, 415, 416, 417, 419, 420, 438, 452, 453, 454, 463, 465, 466, 472, 473, 479, 525, 556, 557, 565, 566, 568, 569, 570, 571, 594, 595, 598, 603, 659, 660, 666, 669, 674, 676, 681, 692, 696, 800, 801, 804, 805, 815, 823, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 848, 850, 905, 913, 914, 915, 916, 958, 989, 990, 994, 999, 1006, 1008, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1054, 1055], "underrepres": 380, "underscor": [353, 382, 394, 977, 1026, 1036, 1046, 1049], "underset": [415, 989, 996, 1009], "understand": [2, 7, 11, 39, 109, 154, 164, 168, 233, 253, 254, 257, 273, 317, 318, 336, 343, 351, 355, 356, 361, 362, 379, 380, 381, 386, 392, 396, 410, 417, 418, 505, 831, 862, 863, 913, 914, 915, 916, 919, 982, 983, 990, 992, 1009, 1012, 1013, 1015, 1018, 1036, 1050], "understood": [260, 380, 410, 950, 1026], "undertak": 392, "undesir": [55, 150, 420, 823], "undistinguish": 414, "undistort": 96, "undo": [260, 875, 1040], "undocu": 1043, "unequ": [55, 1044], "uneth": 166, "uneven": [50, 254, 410, 414], "unevenli": [55, 197, 254], "unexpect": [55, 233, 362, 380, 385, 388, 403, 536, 697, 993, 1008, 1038, 1044, 1045, 1048, 1050, 1052], "unexpectedli": [394, 1044], "unfair": 362, "unfinish": [379, 380], "unfit": [54, 411, 435, 465, 570, 571, 603, 612, 1044, 1046, 1053], "unfold": [98, 383, 990], "unfortun": [122, 166, 167, 215, 388, 392, 417, 509, 510], "unhandl": 1045, "unhelp": 380, "uni": [22, 23, 24, 25, 72, 113, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 328, 346], "unicod": [353, 418, 488, 504, 583, 589, 590, 592, 958, 1036, 1044, 1048], "unicodedata": [589, 590, 592], "unicodedecodeerror": [418, 589, 590, 592], "unifi": [278, 381, 389, 392, 393, 417, 638, 1013, 1036], "unifom": 286, "uniform": [18, 29, 35, 51, 121, 122, 126, 142, 150, 155, 158, 176, 177, 211, 223, 226, 229, 267, 286, 289, 290, 295, 299, 306, 308, 309, 312, 319, 321, 338, 382, 385, 403, 410, 439, 440, 552, 570, 571, 611, 612, 629, 640, 650, 651, 655, 669, 677, 678, 679, 700, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 805, 813, 815, 840, 841, 844, 847, 848, 855, 856, 870, 882, 884, 894, 930, 944, 982, 983, 992, 993, 996, 1042, 1044, 1046, 1050, 1052], "uniform_averag": [433, 466, 483, 484, 485, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 993, 1045], "uniform_labelings_scor": 35, "uniformli": [35, 115, 122, 141, 226, 243, 315, 382, 517, 518, 519, 552, 643, 805, 813, 815, 884, 982, 983, 993, 996, 1003, 1040, 1045], "unigram": [260, 375, 418, 589, 590, 592, 1043], "unilev": 10, "unimod": [226, 475], "unimport": [419, 1001], "uninform": [23, 25, 312, 376, 385, 418, 982, 989, 1044], "uniniti": 388, "uninstal": 378, "unintention": 1003, "unintuit": 55, "union": [68, 167, 411, 739, 755, 864, 1043], "union_not_memb": 167, "uniqu": [2, 22, 28, 40, 45, 46, 55, 56, 61, 65, 71, 116, 117, 123, 124, 125, 167, 169, 181, 212, 215, 245, 268, 292, 311, 312, 321, 329, 351, 352, 353, 374, 382, 389, 394, 410, 411, 414, 417, 418, 441, 451, 455, 457, 465, 468, 497, 550, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 611, 634, 635, 636, 667, 669, 677, 698, 710, 712, 755, 783, 801, 803, 815, 828, 833, 834, 837, 843, 852, 855, 857, 862, 864, 876, 878, 879, 886, 889, 905, 907, 913, 914, 915, 916, 930, 942, 956, 957, 989, 994, 1003, 1018, 1027, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "unique_label": [47, 53, 352, 382, 389], "unit": [24, 68, 78, 167, 173, 197, 215, 288, 301, 305, 352, 375, 380, 381, 382, 386, 388, 389, 415, 418, 422, 465, 490, 491, 520, 525, 533, 534, 535, 542, 543, 590, 591, 592, 608, 609, 612, 659, 660, 677, 686, 700, 771, 852, 861, 862, 863, 869, 875, 877, 881, 883, 885, 891, 892, 893, 895, 896, 905, 906, 989, 991, 992, 993, 998, 1003, 1009, 1013, 1027, 1040, 1044, 1050, 1051], "unit_eig_vec": 243, "unit_vari": [883, 895, 1048], "unitari": 942, "uniti": 408, "unittest": 380, "univ": [690, 694, 990], "univ_select": 72, "univari": [7, 8, 34, 45, 66, 70, 72, 140, 141, 143, 147, 164, 179, 196, 212, 272, 334, 349, 372, 408, 410, 411, 418, 446, 505, 526, 531, 593, 596, 597, 599, 600, 601, 603, 606, 607, 608, 609, 610, 628, 629, 630, 631, 646, 801, 806, 827, 831, 865, 866, 875, 880, 884, 885, 905, 910, 989, 1008, 1010, 1015, 1016, 1028, 1031, 1036, 1042], "univers": [0, 157, 167, 351, 375, 377, 383, 410, 415, 418, 591, 789, 840, 844, 900, 989, 991, 993, 995], "unix": 418, "unknown": [11, 54, 167, 233, 259, 326, 328, 368, 375, 394, 403, 406, 418, 872, 878, 879, 956, 992, 1003, 1020, 1040, 1044, 1048, 1049], "unknown_typ": 403, "unknown_v": 130, "unknown_valu": [119, 130, 169, 236, 311, 879, 1003, 1048, 1050, 1051], "unlabel": [4, 234, 317, 326, 327, 328, 330, 331, 394, 408, 410, 900, 901, 902, 992, 1020, 1023, 1025, 1027, 1048], "unlabeled_indic": 327, "unlabeled_set": 326, "unless": [166, 233, 244, 249, 380, 382, 383, 392, 394, 403, 407, 410, 413, 421, 438, 445, 447, 449, 451, 453, 458, 459, 462, 465, 468, 473, 490, 497, 509, 510, 532, 536, 537, 538, 540, 543, 544, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 612, 633, 635, 640, 647, 648, 652, 653, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 710, 715, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 862, 863, 864, 867, 886, 890, 891, 893, 894, 895, 896, 900, 901, 913, 914, 915, 916, 921, 925, 926, 942, 961, 989, 992, 994, 1036, 1038, 1042, 1044, 1047, 1048, 1053, 1054], "unlik": [53, 54, 115, 167, 168, 218, 220, 248, 305, 337, 380, 382, 386, 392, 394, 400, 403, 412, 414, 415, 418, 447, 451, 536, 651, 652, 655, 656, 657, 683, 684, 786, 822, 845, 846, 885, 896, 908, 989, 992, 993, 1000, 1008, 1036, 1042], "unlimit": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "unlucki": 362, "unmaintain": 1036, "unmarri": 167, "unmeaning": 1043, "unmix": [94, 422, 534], "unmixing_matrix": 534, "unmodifi": [382, 394], "unnecessari": [115, 243, 385, 444, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 706, 996, 1003, 1014, 1018, 1039, 1041, 1046, 1047, 1049, 1052], "unnecessarili": [222, 1043, 1046], "unnorm": [394, 537, 990, 1042, 1043], "unobserv": [125, 166, 167, 415], "unord": [410, 417, 1003], "unpack": 382, "unpen": [407, 649, 670, 681, 989], "unpickl": [394, 577, 845, 846, 1042, 1048, 1052], "unpleas": 1038, "unpract": 992, "unprefix": 1042, "unprocess": [451, 589, 590, 592], "unprotect": 959, "unprun": [558, 559, 565, 566, 913, 914, 915, 916], "unquot": 215, "unrealist": 375, "unreason": [215, 414], "unreg": 344, "unregular": [878, 901, 1027, 1045], "unrel": [311, 367, 385, 388, 418, 516], "unreli": [253, 411], "unrepresent": 920, "unrestrict": 494, "unrol": 222, "unrot": 103, "unsaf": 535, "unsampl": 985, "unscal": [305, 310, 989, 993, 1044, 1050], "unscaled_clf": 310, "unseen": [76, 120, 143, 186, 201, 205, 272, 289, 343, 368, 372, 382, 393, 394, 410, 414, 851, 882, 894, 984, 993, 999, 1001, 1003, 1009, 1020, 1039, 1044, 1048], "unseen_featur": [418, 582], "unset": [367, 394, 1044], "unsetmetadatapassederror": 400, "unshad": 415, "unshifft": 678, "unshift": 909, "unsign": [51, 97, 375, 583, 958], "unsmooth": 416, "unsort": [996, 1037, 1040, 1044], "unspecifi": [600, 601, 803, 990], "unstabl": [37, 64, 167, 410, 412, 413, 690, 694, 941, 942, 1009, 1040, 1041, 1043, 1048, 1050, 1052], "unstack": [215, 262], "unstructur": [12, 34, 37, 38, 39, 42, 45, 66, 164, 222, 301, 410, 442, 446, 464, 504, 531, 858, 1005, 1015, 1018, 1040], "unsuccess": 9, "unsupervis": [4, 10, 35, 47, 70, 71, 84, 93, 114, 128, 226, 234, 289, 290, 338, 351, 352, 362, 369, 372, 375, 382, 393, 394, 408, 410, 413, 415, 416, 417, 418, 419, 434, 443, 446, 533, 535, 537, 538, 540, 543, 544, 550, 564, 567, 568, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 631, 635, 636, 639, 640, 641, 642, 643, 678, 801, 804, 805, 807, 815, 824, 829, 832, 847, 848, 851, 853, 854, 855, 856, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 897, 898, 902, 909, 990, 993, 999, 1006, 1016, 1020, 1021, 1023, 1025, 1031, 1036, 1039, 1049, 1053], "unsupport": [400, 403, 494, 1044, 1049], "unsur": 906, "untangl": 98, "untar": 6, "unterthin": [305, 1039, 1040, 1041], "until": [53, 146, 205, 271, 317, 319, 385, 394, 395, 406, 410, 414, 419, 509, 510, 558, 559, 560, 561, 565, 566, 567, 594, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 672, 677, 678, 679, 695, 798, 799, 804, 805, 862, 863, 902, 905, 913, 914, 915, 916, 968, 982, 989, 990, 998, 1006, 1009, 1029, 1039, 1043, 1044, 1050], "untransform": [343, 465, 468, 1004], "untru": 993, "untrust": 403, "untun": 122, "unus": [88, 99, 168, 194, 218, 220, 464, 580, 764, 772, 982, 990, 1036, 1044, 1046, 1047, 1049, 1051], "unusu": [25, 406, 999, 1003, 1044], "unveil": 1042, "unvendor": 1044, "unwant": [198, 351], "unweight": [162, 210, 464, 648, 654, 679, 708, 714, 730, 731, 739, 784, 785, 788, 789, 840, 841, 842, 843, 844, 983], "unwieldi": 876, "uoa": 898, "up": [6, 9, 35, 42, 44, 45, 46, 50, 53, 55, 60, 68, 78, 79, 87, 90, 107, 114, 125, 162, 167, 168, 176, 181, 190, 198, 213, 214, 245, 253, 261, 264, 283, 296, 302, 306, 311, 319, 327, 336, 343, 346, 351, 353, 368, 374, 375, 380, 384, 386, 387, 388, 389, 392, 394, 395, 407, 410, 415, 417, 418, 444, 448, 449, 450, 451, 453, 457, 460, 461, 462, 509, 510, 537, 550, 551, 558, 559, 560, 561, 562, 563, 565, 566, 567, 611, 628, 633, 634, 640, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 682, 683, 684, 685, 693, 706, 770, 798, 799, 803, 804, 805, 807, 829, 879, 880, 883, 895, 913, 914, 915, 916, 919, 942, 945, 946, 982, 985, 989, 990, 993, 996, 1003, 1007, 1008, 1014, 1017, 1018, 1028, 1029, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "upadhyai": [1042, 1043, 1044, 1045], "upcast": [1046, 1050], "upcom": [154, 378], "updat": [6, 42, 60, 109, 115, 124, 231, 315, 353, 379, 380, 384, 388, 394, 403, 410, 415, 417, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 968, 989, 996, 997, 998, 1007, 1017, 1018, 1037, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1054, 1055], "update_from": 290, "update_func": 290, "update_h": 548, "update_layout": [115, 260], "update_legend_marker_s": 290, "update_terminal_region": 1045, "upgrad": [315, 316, 317, 318, 319, 320, 321, 322, 323, 397, 1014, 1036, 1041, 1044], "upload": [374, 378, 384, 392, 672], "upload_d": 374, "upon": [215, 223, 233, 296, 375, 380, 392, 394, 403, 562, 563, 628, 631, 672, 790, 798, 799, 845, 846, 982, 989, 1009, 1020, 1029, 1050], "upper": [2, 5, 7, 22, 70, 73, 77, 78, 79, 111, 112, 113, 121, 122, 123, 124, 130, 132, 142, 153, 155, 158, 167, 191, 197, 203, 204, 207, 211, 214, 215, 230, 234, 235, 258, 259, 260, 273, 288, 289, 300, 310, 329, 338, 341, 343, 345, 410, 416, 464, 589, 590, 592, 596, 614, 615, 616, 618, 620, 621, 623, 624, 626, 633, 634, 636, 638, 651, 655, 678, 736, 789, 878, 879, 907, 908, 909, 929, 992, 993, 996, 1003, 1007, 1008, 1009, 1044], "upperbound": 735, "uppercas": [394, 1049], "uppercase_initi": 418, "upperlimit": 705, "upright": 375, "upstream": [366, 380, 384, 388, 392, 1003, 1045], "upward": [451, 457], "ur": 1047, "urbanowicz": 993, "urbanowicz2015": 993, "urcrnrlat": [9, 296], "urcrnrlon": [9, 296], "uri": 15, "url": [10, 15, 146, 374, 377, 382, 384], "urllib": [6, 15], "urlopen": 15, "urlretriev": 6, "urlu": 1054, "urvang": [1044, 1046], "us": [0, 1, 2, 5, 6, 7, 9, 11, 12, 13, 14, 17, 18, 19, 22, 23, 24, 25, 28, 30, 32, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 84, 88, 89, 90, 92, 95, 97, 98, 100, 101, 102, 104, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 148, 149, 150, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 209, 212, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 276, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 353, 354, 356, 358, 359, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 416, 417, 420, 421, 422, 423, 426, 428, 429, 431, 432, 440, 457, 458, 460, 462, 464, 472, 479, 481, 482, 486, 488, 494, 504, 509, 510, 517, 532, 546, 547, 548, 549, 556, 573, 575, 576, 578, 579, 584, 586, 587, 593, 596, 597, 599, 602, 604, 610, 617, 621, 622, 625, 630, 637, 639, 643, 651, 652, 655, 661, 662, 664, 668, 676, 684, 686, 687, 688, 695, 696, 697, 700, 712, 715, 716, 717, 722, 724, 725, 727, 729, 731, 737, 740, 744, 752, 757, 759, 760, 764, 765, 767, 768, 769, 770, 772, 775, 776, 777, 778, 781, 782, 784, 792, 795, 808, 809, 810, 812, 813, 814, 825, 837, 839, 841, 845, 846, 855, 856, 857, 859, 867, 868, 871, 873, 876, 887, 888, 890, 892, 893, 895, 896, 897, 900, 904, 906, 907, 915, 916, 917, 918, 921, 924, 925, 926, 931, 932, 941, 942, 949, 956, 960, 961, 962, 964, 965, 969, 970, 971, 982, 983, 985, 986, 988, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "usa": [258, 375, 902, 983, 990, 1005, 1006], "usabl": [125, 374, 380, 382, 394, 403, 418, 801, 961, 1036, 1043, 1050, 1051], "usag": [40, 51, 69, 72, 83, 97, 107, 143, 167, 168, 227, 231, 233, 252, 253, 292, 294, 301, 335, 353, 366, 375, 379, 380, 382, 383, 387, 388, 390, 394, 395, 397, 403, 408, 410, 414, 415, 420, 421, 445, 447, 451, 465, 490, 495, 497, 513, 516, 520, 524, 535, 536, 542, 550, 562, 563, 592, 610, 641, 649, 659, 660, 661, 667, 668, 669, 670, 677, 678, 679, 680, 681, 691, 779, 782, 793, 794, 861, 862, 864, 905, 913, 914, 915, 916, 942, 982, 983, 985, 992, 993, 994, 996, 1008, 1016, 1017, 1020, 1024, 1031, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "usal": 173, "usd": 236, "use_encoded_valu": [119, 130, 169, 236, 311, 879, 1003, 1048], "use_idf": [415, 418, 591, 592, 1029], "usecas": [316, 319, 321, 410, 563], "useless": [13, 118, 262, 386, 419, 516, 529, 659, 713, 989, 1003, 1045], "user": [1, 11, 23, 25, 53, 67, 93, 115, 158, 164, 167, 185, 218, 233, 248, 256, 266, 268, 278, 283, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 362, 366, 367, 369, 374, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 397, 400, 403, 407, 408, 410, 411, 412, 414, 415, 417, 418, 419, 421, 422, 423, 424, 427, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 938, 942, 982, 983, 989, 990, 992, 993, 994, 996, 1003, 1007, 1011, 1013, 1014, 1018, 1022, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "user_guid": 2, "user_r": 411, "userguid": 1043, "usernam": 397, "userscript": 388, "userwarn": [42, 60, 111, 158, 189, 206, 254, 344, 357, 385, 713, 1003, 1042, 1044, 1049], "ushtanit": [1048, 1049], "usp": 3, "usr": 378, "usual": [2, 11, 38, 76, 77, 79, 121, 122, 124, 130, 166, 168, 183, 197, 198, 252, 253, 256, 259, 268, 269, 273, 306, 318, 339, 362, 366, 367, 378, 380, 382, 388, 392, 393, 394, 400, 406, 410, 411, 414, 415, 417, 418, 419, 451, 457, 539, 541, 543, 548, 560, 561, 608, 609, 631, 641, 659, 660, 667, 668, 669, 677, 678, 679, 693, 727, 759, 807, 829, 833, 905, 942, 982, 983, 985, 988, 989, 990, 992, 993, 994, 997, 998, 999, 1000, 1003, 1007, 1008, 1009, 1020, 1026, 1027, 1051], "utc": 993, "utf": [351, 353, 418, 488, 504, 583, 589, 590, 592], "util": [6, 8, 9, 46, 53, 54, 59, 87, 107, 109, 130, 197, 199, 205, 213, 220, 229, 233, 235, 246, 265, 267, 283, 307, 315, 329, 339, 343, 351, 367, 369, 374, 375, 380, 381, 382, 383, 392, 393, 394, 405, 409, 410, 411, 414, 415, 418, 438, 444, 445, 448, 450, 454, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 582, 583, 589, 591, 592, 595, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 801, 802, 803, 808, 810, 819, 823, 825, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 988, 991, 993, 994, 1003, 1004, 1013, 1018, 1021, 1031, 1036, 1037, 1039, 1040, 1042, 1043], "utilis": 1042, "utkarsh": [1042, 1043, 1044, 1045], "utl": 419, "utstat": 645, "uttam": 1049, "uv": [93, 415], "uw": [146, 377, 1048], "uwha": [1049, 1050], "v": [0, 2, 7, 11, 12, 15, 17, 25, 28, 31, 32, 34, 35, 36, 37, 38, 39, 42, 45, 47, 53, 56, 66, 68, 70, 73, 75, 78, 80, 81, 82, 83, 85, 93, 95, 96, 100, 113, 115, 116, 117, 122, 123, 124, 136, 142, 149, 164, 165, 170, 171, 175, 177, 186, 195, 196, 197, 198, 200, 201, 202, 203, 206, 212, 216, 222, 230, 244, 245, 248, 249, 251, 255, 275, 276, 278, 281, 294, 312, 315, 336, 347, 352, 362, 367, 372, 377, 380, 386, 388, 394, 405, 406, 407, 408, 412, 413, 415, 418, 433, 442, 446, 453, 463, 464, 465, 466, 471, 474, 475, 476, 477, 478, 483, 484, 485, 497, 513, 525, 531, 532, 538, 542, 546, 547, 551, 553, 555, 557, 559, 561, 563, 565, 566, 569, 571, 582, 590, 594, 595, 601, 607, 612, 631, 632, 635, 636, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 679, 680, 689, 696, 700, 702, 705, 718, 737, 738, 740, 755, 756, 758, 789, 796, 801, 806, 813, 815, 827, 831, 833, 834, 835, 838, 839, 840, 848, 856, 858, 861, 863, 865, 866, 869, 872, 878, 879, 880, 885, 886, 889, 899, 905, 906, 907, 908, 910, 911, 914, 916, 920, 987, 988, 989, 990, 993, 994, 995, 998, 1001, 1003, 1007, 1008, 1010, 1015, 1031, 1036, 1039, 1040, 1041, 1044, 1046, 1047, 1050, 1051, 1054], "v0": [384, 472, 473, 479, 513, 589, 590, 592, 801, 815, 864, 867, 1037, 1044, 1045, 1046], "v1": [253, 320, 374, 397, 562, 563, 798, 799, 1048, 1051, 1052, 1053, 1054], "v10": 253, "v11": 253, "v12": 253, "v13": 253, "v14": 253, "v15": 253, "v16": 253, "v17": 253, "v18": 253, "v19": 253, "v2": [253, 375, 498, 665, 686, 687, 989], "v20": 253, "v21": 253, "v22": 253, "v23": 253, "v24": 253, "v25": 253, "v26": 253, "v27": 253, "v28": 253, "v3": 253, "v4": 253, "v5": [253, 1044], "v6": 253, "v7": 253, "v8": 253, "v9": 253, "v_": [406, 418], "v_1": 406, "v_2": 406, "v_i": 998, "v_ih_j": 998, "v_init": 544, "v_j": [410, 756, 998], "v_k": [413, 415, 532, 538, 546, 547], "v_measur": [737, 796], "v_measure_scor": [17, 35, 36, 47, 56, 321, 352, 410, 718, 737, 738, 758, 993, 1045], "v_new": 861, "va": [6, 120, 144, 270, 291, 293, 345], "vac": 278, "vacaliuc": [1044, 1045], "vacat": 375, "vachan": 1047, "vadim": [1044, 1048, 1049], "vaerenbergh": [1051, 1052], "vaggi": [1038, 1039], "vaillant": 1048, "val": [71, 209, 259, 944], "val_errors_with": 120, "val_errors_without": 120, "val_pr": 120, "val_scor": 121, "vale": 1046, "valencia": [1050, 1052], "valentin": [1039, 1041, 1051, 1052], "valero": 10, "valgrind": 383, "valid": [6, 11, 12, 24, 25, 52, 53, 54, 55, 69, 70, 72, 73, 76, 80, 89, 100, 107, 113, 115, 118, 119, 120, 121, 122, 125, 126, 135, 139, 140, 143, 144, 146, 147, 157, 164, 167, 169, 175, 181, 183, 184, 185, 191, 197, 199, 205, 215, 216, 227, 233, 235, 239, 245, 248, 251, 256, 259, 260, 261, 263, 265, 266, 267, 268, 271, 272, 273, 274, 276, 278, 287, 302, 306, 311, 315, 317, 322, 329, 339, 346, 356, 367, 375, 380, 383, 392, 393, 394, 403, 404, 407, 410, 411, 412, 415, 416, 417, 418, 419, 424, 426, 438, 443, 444, 446, 447, 448, 450, 451, 458, 464, 465, 469, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 494, 502, 503, 505, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 576, 578, 583, 584, 590, 594, 595, 598, 603, 633, 635, 639, 640, 641, 642, 643, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 689, 690, 693, 700, 702, 703, 707, 714, 729, 763, 766, 775, 779, 780, 781, 786, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 871, 877, 885, 897, 898, 900, 901, 903, 905, 907, 910, 912, 913, 914, 915, 916, 925, 926, 927, 928, 929, 936, 948, 950, 953, 983, 992, 993, 994, 996, 997, 1001, 1003, 1005, 1007, 1008, 1009, 1013, 1014, 1015, 1018, 1020, 1023, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "valid_metr": [845, 846, 996, 1052], "valid_scor": 988, "validate_metadata": [233, 950], "validation_curv": [321, 346, 400, 824, 988, 1043, 1044, 1045, 1048, 1052], "validation_fract": [120, 125, 205, 318, 417, 560, 561, 562, 563, 667, 668, 669, 677, 679, 862, 863, 1007, 1044, 1050], "validation_score_": [125, 562, 563], "validation_scores_": [862, 863, 1051], "validationcurvedisplai": [275, 988, 1052], "validationerror": 1050, "vallei": 311, "vall\u00e9": 1043, "valu": [2, 3, 5, 9, 10, 11, 12, 15, 17, 18, 19, 24, 25, 30, 35, 38, 40, 42, 44, 51, 53, 58, 59, 60, 64, 69, 71, 73, 76, 78, 80, 93, 96, 103, 107, 109, 111, 113, 114, 115, 116, 117, 119, 122, 123, 126, 127, 129, 130, 141, 142, 144, 145, 149, 152, 153, 155, 157, 163, 166, 167, 168, 169, 170, 173, 176, 177, 179, 181, 183, 185, 186, 187, 188, 190, 195, 197, 198, 199, 201, 203, 212, 215, 217, 218, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 236, 239, 240, 243, 249, 252, 253, 255, 257, 259, 260, 262, 264, 265, 266, 268, 270, 271, 272, 273, 275, 283, 286, 296, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 317, 323, 329, 339, 343, 344, 346, 351, 352, 353, 356, 362, 366, 367, 368, 369, 372, 373, 374, 375, 377, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 396, 397, 400, 406, 407, 408, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 491, 492, 494, 497, 498, 499, 502, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 770, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 813, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923, 924, 925, 926, 929, 930, 931, 932, 934, 942, 944, 950, 953, 954, 955, 956, 957, 961, 969, 970, 971, 982, 985, 986, 987, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1004, 1006, 1007, 1008, 1015, 1016, 1018, 1020, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "valuabl": [120, 380, 983, 1018], "valuat": 417, "value_count": [2, 11, 168, 253, 273, 278], "value_kei": [392, 920], "value_typ": [420, 618], "valueerror": [233, 234, 382, 386, 400, 469, 578, 604, 618, 636, 672, 715, 837, 855, 864, 870, 884, 924, 928, 929, 978, 979, 980, 1003, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "values_format": [698, 1046], "vamsi": 1051, "van": [0, 374, 398, 412, 470, 475, 535, 628, 693, 697, 983, 990, 993, 999, 1018, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "vandana": 1047, "vander": 177, "vandermond": [198, 1003], "vanderpla": [0, 9, 156, 198, 218, 246, 288, 296, 399, 1012, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "vang": 1049, "vanilla": [197, 405, 409, 410, 448, 450, 461, 630], "vanilla_model": 253, "vanilla_model_coef": 273, "vanrel": 1042, "vanschoren": [374, 1048], "vapnik": [594, 595], "var": [83, 84, 112, 146, 177, 259, 377, 381, 419, 642, 646, 907, 908, 909, 910, 911, 993, 1044], "var_": [535, 843, 885, 1049], "var_smooth": [843, 1044], "varanasi": [1036, 1039], "vardhan": 1040, "varepsilon": [410, 1007, 1008], "vari": [5, 11, 25, 29, 32, 42, 44, 53, 60, 63, 73, 90, 115, 116, 118, 128, 138, 145, 151, 153, 164, 167, 168, 170, 186, 188, 191, 195, 204, 207, 210, 223, 231, 236, 248, 255, 259, 262, 271, 273, 298, 303, 305, 307, 308, 310, 321, 325, 331, 332, 339, 342, 344, 348, 362, 366, 368, 375, 394, 403, 442, 446, 447, 501, 509, 515, 516, 523, 560, 561, 565, 566, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 682, 685, 704, 764, 820, 824, 829, 831, 832, 862, 866, 870, 885, 902, 910, 913, 914, 967, 985, 988, 989, 993, 996, 997, 1006, 1009, 1015, 1018, 1043, 1044, 1052], "variabl": [2, 7, 9, 10, 11, 35, 68, 112, 116, 119, 122, 123, 125, 137, 138, 141, 146, 156, 157, 161, 162, 168, 169, 173, 181, 186, 197, 201, 202, 215, 220, 233, 236, 249, 253, 259, 262, 269, 278, 281, 310, 311, 312, 362, 366, 368, 375, 377, 378, 380, 382, 384, 385, 388, 394, 400, 405, 410, 411, 412, 413, 415, 417, 418, 419, 451, 483, 484, 485, 488, 500, 502, 509, 516, 533, 535, 537, 542, 545, 554, 560, 561, 605, 607, 608, 609, 641, 651, 652, 655, 656, 662, 683, 684, 696, 710, 748, 802, 803, 806, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 833, 837, 838, 868, 879, 882, 886, 894, 906, 982, 983, 985, 989, 992, 993, 994, 995, 996, 998, 1000, 1001, 1003, 1007, 1009, 1013, 1014, 1020, 1021, 1023, 1025, 1036, 1041, 1044, 1046, 1049, 1051], "varianc": [2, 3, 8, 11, 25, 42, 53, 55, 60, 71, 76, 78, 83, 84, 88, 93, 94, 95, 98, 100, 101, 103, 108, 124, 125, 134, 156, 158, 164, 167, 175, 177, 179, 181, 186, 187, 193, 197, 199, 202, 215, 216, 248, 253, 256, 259, 262, 268, 269, 272, 273, 292, 299, 305, 310, 323, 352, 362, 372, 376, 389, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 422, 442, 446, 450, 464, 522, 525, 533, 534, 535, 542, 545, 550, 551, 556, 557, 559, 560, 561, 566, 604, 608, 609, 612, 626, 644, 645, 646, 653, 657, 658, 661, 663, 673, 674, 675, 676, 677, 688, 711, 729, 786, 798, 799, 843, 854, 869, 875, 881, 883, 885, 891, 893, 895, 896, 914, 916, 968, 969, 970, 974, 987, 988, 989, 991, 996, 997, 998, 1001, 1005, 1007, 1008, 1009, 1010, 1015, 1016, 1025, 1027, 1028, 1031, 1036, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "variance_weight": [729, 786, 993], "variances_": 604, "variancethreshold": [419, 870, 983, 1039, 1046, 1049, 1052], "variant": [25, 41, 93, 160, 162, 163, 164, 228, 259, 318, 319, 352, 353, 386, 410, 413, 415, 418, 420, 450, 461, 491, 494, 495, 513, 516, 544, 560, 561, 566, 616, 620, 623, 624, 628, 631, 639, 640, 642, 646, 673, 705, 802, 806, 808, 809, 810, 819, 827, 848, 866, 902, 983, 989, 990, 991, 992, 993, 995, 996, 1007, 1014, 1015, 1029, 1036, 1044], "variat": [2, 5, 10, 35, 63, 90, 127, 146, 154, 155, 162, 164, 167, 202, 242, 244, 249, 250, 256, 270, 281, 293, 316, 339, 377, 403, 414, 415, 444, 448, 460, 537, 644, 673, 675, 676, 798, 799, 819, 820, 822, 982, 993, 1003, 1006, 1009, 1013, 1015, 1025, 1027, 1030, 1031, 1039, 1041, 1042], "variegatu": [9, 296, 375, 499], "variet": 311, "varieti": [23, 161, 245, 311, 339, 388, 408, 410, 412, 418, 644, 996, 1009, 1013, 1018, 1038, 1051, 1052], "varimax": [103, 415, 533, 1048], "variou": [2, 10, 34, 35, 37, 39, 53, 56, 58, 59, 60, 66, 79, 83, 87, 96, 164, 167, 175, 205, 207, 216, 217, 218, 219, 220, 224, 230, 278, 283, 300, 309, 316, 326, 327, 351, 353, 360, 362, 366, 374, 375, 376, 377, 380, 382, 385, 393, 395, 407, 408, 410, 412, 438, 442, 473, 503, 515, 516, 526, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 595, 603, 648, 652, 654, 656, 659, 662, 664, 666, 667, 669, 674, 676, 677, 692, 693, 700, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 865, 905, 906, 982, 983, 990, 993, 996, 1000, 1003, 1007, 1009, 1013, 1015, 1017, 1018, 1028, 1029, 1036, 1039, 1040, 1053], "varma": 1045, "varoquaux": [0, 10, 29, 30, 37, 38, 43, 44, 49, 50, 51, 64, 65, 71, 80, 87, 88, 95, 99, 180, 186, 187, 194, 195, 219, 221, 229, 231, 245, 307, 343, 344, 395, 398, 1012, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "varun": [1042, 1043, 1044, 1050, 1051], "vasani": 1047, "vasilei": [1018, 1043], "vasileva": 1050, "vasiloudi": 1041, "vassard": 1050, "vassilvitskii": [410, 448, 461], "vast": 380, "vastli": 310, "vathsala": [1043, 1044, 1045, 1046], "vatsan": 1042, "vavrova": 1043, "vazelh": [1044, 1045, 1046], "vazirgianni": 410, "vb": 537, "vbgmm": [1036, 1040, 1042], "vc": 378, "vcvarsal": 378, "vd": 1054, "ve": [352, 380, 418, 1018, 1029, 1043], "veal": 17, "veb2009": 410, "veb2010": 410, "vec": [93, 418, 539, 541, 548], "veclib": [366, 392], "vect": [6, 68, 260, 330, 418, 1029], "vect__": 260, "vect__max_df": 260, "vect__min_df": 260, "vect__ngram_rang": [260, 1029], "vect__norm": 260, "vector": [5, 6, 7, 8, 10, 13, 17, 18, 24, 28, 30, 34, 38, 46, 66, 70, 87, 93, 95, 96, 142, 149, 157, 178, 184, 201, 202, 209, 211, 213, 231, 232, 239, 257, 259, 260, 264, 289, 302, 305, 323, 331, 335, 336, 339, 340, 341, 342, 343, 344, 346, 348, 349, 352, 366, 368, 369, 375, 385, 386, 389, 392, 394, 406, 407, 410, 412, 413, 414, 415, 417, 420, 421, 422, 438, 444, 445, 446, 448, 450, 451, 452, 454, 465, 466, 468, 469, 483, 484, 485, 486, 488, 490, 498, 510, 513, 522, 525, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 552, 553, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 632, 639, 641, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 692, 693, 694, 696, 700, 720, 736, 764, 769, 770, 771, 772, 774, 775, 776, 778, 779, 800, 801, 804, 805, 815, 823, 829, 832, 833, 834, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 863, 870, 872, 877, 885, 889, 892, 903, 905, 906, 907, 908, 909, 910, 911, 912, 925, 939, 941, 942, 956, 962, 982, 985, 986, 987, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1003, 1007, 1009, 1015, 1016, 1020, 1023, 1026, 1029, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047, 1049, 1054], "vectori": [394, 1046], "vectorizer2": 589, "vectorizer_param": 330, "vectorizermixin": 1046, "vectorizing_tim": 6, "vectors_test": 375, "ved": 1053, "vedaldi": [639, 985], "veenhui": [1051, 1052, 1053], "veerkhar": 1051, "veerlosar": 1046, "veghit": 1052, "vehag": [197, 215], "vehbrand": [197, 215], "vehga": [197, 215], "vehicl": [197, 215], "vehpow": [197, 215], "vel": 377, "velkov": 1038, "veloc": 380, "vembu": 407, "vempati": 985, "vendor": [233, 1041, 1044, 1045], "venezuela": [9, 296, 375, 499], "venkat": [0, 399], "venkatachalam": [1046, 1047, 1048, 1049, 1050, 1053, 1054], "venkatesh": 1046, "venna": 697, "venthur": 1044, "venu": 394, "venv": [378, 397], "vera": [1050, 1051], "verbos": [8, 40, 48, 52, 62, 68, 70, 72, 130, 184, 260, 301, 302, 305, 318, 330, 351, 378, 384, 394, 441, 444, 448, 450, 453, 455, 460, 463, 465, 468, 472, 473, 479, 532, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 594, 595, 628, 633, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 693, 695, 766, 779, 798, 799, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 830, 832, 834, 836, 839, 854, 861, 862, 863, 864, 865, 866, 867, 902, 905, 906, 907, 908, 909, 910, 911, 959, 1014, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1054], "verbose_feature_names_out": [119, 167, 168, 169, 240, 311, 318, 319, 320, 322, 411, 465, 468, 864, 1049, 1053, 1054], "verbose_interv": [798, 799], "veri": [2, 11, 23, 25, 37, 38, 40, 42, 48, 50, 58, 60, 78, 79, 80, 83, 90, 96, 122, 128, 136, 154, 161, 167, 168, 169, 186, 197, 198, 199, 202, 205, 215, 222, 226, 232, 233, 236, 243, 261, 262, 265, 266, 268, 269, 275, 283, 301, 305, 318, 326, 329, 339, 343, 348, 351, 353, 362, 366, 375, 379, 380, 382, 385, 386, 388, 392, 393, 394, 403, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 443, 448, 453, 463, 472, 473, 479, 501, 505, 511, 542, 558, 559, 562, 563, 565, 566, 568, 569, 590, 591, 623, 651, 652, 655, 656, 657, 665, 683, 684, 686, 692, 693, 696, 706, 744, 747, 793, 798, 801, 809, 811, 815, 818, 821, 845, 846, 870, 874, 875, 876, 885, 897, 898, 907, 910, 913, 914, 915, 916, 942, 982, 985, 986, 988, 989, 990, 991, 992, 993, 996, 997, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1027, 1028, 1036, 1041, 1042, 1044, 1047, 1049, 1051, 1052, 1053], "verif": [375, 993, 1018], "verifi": [51, 58, 107, 125, 167, 197, 380, 385, 403, 405, 977, 996], "verlag": 697, "vermeil": 1044, "veronda": 1037, "verrier": 1051, "versa": [167, 256, 351, 410, 420, 443, 608, 609, 834, 1040], "versatil": [420, 1008, 1018], "versicolor": [88, 268, 269, 505], "versicolour": [43, 88, 99, 101, 377, 1027], "version": [2, 11, 28, 44, 51, 53, 69, 93, 98, 109, 125, 151, 162, 168, 169, 173, 181, 195, 198, 199, 205, 211, 213, 233, 236, 240, 281, 301, 310, 315, 316, 317, 318, 320, 321, 322, 323, 339, 351, 366, 369, 375, 379, 380, 381, 382, 383, 386, 388, 389, 392, 394, 395, 397, 400, 402, 403, 408, 410, 411, 413, 415, 417, 418, 420, 421, 422, 428, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 513, 515, 523, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 705, 708, 709, 710, 714, 715, 719, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 735, 740, 741, 742, 743, 744, 747, 751, 752, 754, 755, 758, 759, 760, 762, 767, 768, 770, 779, 783, 784, 785, 786, 788, 790, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 814, 815, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 923, 925, 926, 936, 937, 941, 942, 949, 950, 951, 952, 953, 956, 959, 960, 961, 963, 968, 974, 979, 980, 982, 985, 987, 990, 993, 995, 997, 999, 1001, 1006, 1007, 1009, 1011, 1013, 1014, 1017, 1028, 1032, 1034], "versionad": [801, 804, 805, 815], "versionchang": 380, "versionwarn": 384, "versu": [6, 8, 29, 54, 95, 107, 108, 118, 128, 130, 134, 136, 138, 151, 157, 164, 167, 175, 206, 212, 216, 226, 231, 232, 234, 246, 251, 254, 276, 278, 289, 291, 299, 307, 325, 330, 332, 336, 337, 338, 339, 342, 343, 410, 414, 417, 420, 505, 535, 557, 611, 632, 640, 659, 660, 667, 669, 675, 676, 677, 678, 784, 801, 806, 827, 837, 866, 901, 902, 909, 910, 914, 982, 989, 993, 994, 999, 1006, 1007, 1008, 1015, 1027, 1044], "vert": [123, 169, 170, 315, 1007], "vertex": [15, 24, 410, 454, 1049], "vertic": [4, 15, 58, 121, 170, 186, 230, 231, 263, 281, 305, 308, 344, 345, 394, 406, 410, 415, 516, 698, 782, 1025], "verticalalign": [10, 24, 37, 38], "vese": 1048, "vesteghem": 1046, "veto": 395, "vettigli": 1045, "vga": 17, "vh": 942, "vi": [4, 6, 375, 700, 1025, 1044, 1047], "via": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 372, 377, 378, 381, 382, 384, 388, 392, 393, 394, 395, 397, 400, 406, 407, 410, 411, 413, 414, 415, 419, 420, 438, 502, 536, 540, 542, 544, 547, 560, 561, 568, 569, 598, 612, 617, 622, 625, 628, 639, 640, 641, 642, 657, 667, 669, 672, 674, 677, 688, 690, 693, 694, 710, 801, 825, 826, 827, 828, 829, 833, 834, 835, 837, 843, 851, 862, 864, 865, 866, 885, 886, 982, 987, 989, 990, 992, 993, 994, 1000, 1001, 1007, 1008, 1014, 1015, 1018, 1020, 1031, 1036, 1040, 1041, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "viacheslav": 1042, "viard": 1047, "vibrantabhi19": 1043, "vicdemand": 125, "vice": [167, 256, 351, 410, 420, 443, 608, 609, 834, 1040], "vicent": [1049, 1050, 1051], "vicpric": 125, "victoireloui": 1050, "victor": [410, 453, 463, 1043, 1046], "victoria": 125, "video": [320, 369, 374, 383, 504, 994, 1018, 1021], "vie": 1042, "viega": 993, "view": [2, 40, 44, 76, 95, 125, 168, 194, 238, 366, 368, 380, 410, 418, 537, 646, 658, 845, 846, 920, 989, 990], "view_init": [168, 218, 220, 222], "viewabl": 380, "vighnesh": [1041, 1042, 1044], "vignesh": 1052, "vigni": 1053, "vijai": [1018, 1039], "vijalapuram": 1044, "vijeth": [1052, 1053], "vijitbenjaronk": [1043, 1044], "vika": [1048, 1050], "vikram": [1042, 1051, 1052], "vikrant": 1050, "vila": [1046, 1048], "vilhelm": [1043, 1044], "villalba": [1041, 1044, 1048], "villanova": [1048, 1049], "villaz\u00f3n": 1048, "villu": 1042, "vil\u00e9m": 1049, "vinayak": [1040, 1041, 1042, 1044, 1045, 1051, 1052], "vincent": [0, 45, 65, 152, 156, 399, 1018, 1036, 1038, 1040, 1041, 1043, 1046, 1051, 1052, 1053], "vineet": 1054, "vineyard": 311, "vinh": [410, 705], "vinh10a": 410, "viniciu": [1048, 1049], "vinit": 1044, "vink": [1047, 1049], "vinod": 1044, "vin\u00edciu": 1044, "viola": [375, 1044], "violat": [23, 339, 388, 392, 394, 636, 929, 1000, 1007, 1009], "violet": [100, 1052], "violeta": 1048, "vipin": 410, "viraj": 1044, "virgil": [0, 7, 399, 1036, 1037, 1039], "virgilefritsch": 1036, "virginica": [43, 88, 99, 101, 268, 269, 377, 505, 993, 1027], "viridi": [28, 36, 283, 698], "viridis_r": 260, "virshup": 1053, "virtanen": 1041, "virtual": [381, 397, 414, 1018], "virtualenv": [378, 380, 397], "visag": 1018, "visconti": 1040, "vishaal": [1044, 1045], "vishal": 1051, "vishwakarma": 1050, "visibl": [11, 167, 168, 199, 348, 374, 380, 410, 861, 998, 1041, 1051], "vision": [535, 759, 760, 985, 989, 991, 1009, 1013, 1018, 1037], "visit": [360, 380, 1000, 1017], "visual": [1, 2, 7, 11, 14, 18, 23, 28, 30, 41, 44, 47, 50, 55, 58, 59, 64, 78, 83, 89, 92, 93, 95, 97, 100, 102, 104, 114, 115, 123, 125, 126, 128, 132, 133, 144, 157, 162, 164, 168, 170, 181, 188, 197, 199, 215, 218, 219, 222, 223, 225, 228, 231, 237, 238, 241, 248, 251, 252, 253, 255, 256, 260, 261, 264, 266, 268, 269, 276, 288, 292, 293, 298, 300, 303, 305, 309, 310, 315, 317, 327, 343, 369, 372, 376, 378, 386, 387, 406, 412, 414, 415, 416, 417, 439, 442, 446, 447, 455, 473, 497, 503, 505, 508, 511, 515, 523, 533, 535, 542, 565, 567, 572, 632, 634, 646, 659, 690, 693, 698, 699, 701, 702, 703, 719, 728, 783, 790, 802, 803, 806, 807, 818, 819, 820, 821, 822, 824, 831, 862, 866, 870, 874, 875, 877, 881, 882, 883, 885, 905, 907, 908, 910, 911, 919, 938, 988, 990, 991, 996, 997, 999, 1000, 1003, 1009, 1013, 1015, 1020, 1031, 1039, 1046, 1047, 1048, 1050], "visualis": [93, 96, 103, 234, 545, 802, 803, 806, 818, 819, 820, 821, 822, 996, 1014], "visualize_group": 254, "vitor": 1051, "vivek": [1043, 1044, 1045, 1053], "viz": [269, 387], "vjacheslav": 1040, "vlad": [0, 93, 234, 302, 398, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "vladimir": [536, 942, 989, 1046, 1050, 1053], "vlahava": [721, 741, 993], "vlajic": [1047, 1048], "vlasio": [1018, 1043], "vlasovet": 1049, "vlb": 17, "vliet": 1048, "vline": [76, 95, 184, 185, 186, 198, 259, 272, 306], "vlines_": 633, "vlo": 10, "vmax": [28, 49, 80, 93, 96, 103, 152, 155, 176, 181, 188, 213, 231, 247, 254, 301, 339], "vmin": [28, 38, 80, 93, 96, 103, 152, 155, 176, 181, 188, 213, 231, 247, 254, 301, 339], "vnherdeiro": 1046, "vo": [1042, 1050], "voc": 993, "vocabulari": [90, 212, 351, 352, 392, 418, 589, 590, 591, 592, 995, 1020, 1029, 1036, 1038, 1041, 1044, 1047, 1049], "vocabulary_": [353, 418, 582, 589, 592, 1029, 1036], "void": 381, "vol": [25, 157, 181, 253, 265, 377, 410, 475, 560, 561, 629, 636, 646, 665, 686, 687, 798, 830, 842, 983, 995, 996], "voltag": 17, "volum": [0, 64, 77, 146, 154, 375, 377, 410, 412, 474, 535, 770, 989, 1008, 1018], "volume11": 410, "volume2": 677, "volume7": [667, 668], "volunt": 388, "voluntari": 351, "von": [410, 453, 463, 692, 1013, 1043, 1044], "voronoi": [44, 64, 410], "voss": 1044, "vote": [108, 110, 115, 129, 130, 131, 132, 134, 164, 193, 281, 343, 394, 395, 408, 502, 556, 557, 558, 561, 565, 566, 570, 571, 658, 833, 847, 848, 853, 855, 994, 996, 1015, 1016, 1027, 1031, 1036, 1039, 1041, 1046], "votingclassifi": [22, 24, 108, 134, 164, 206, 357, 400, 417, 505, 565, 571, 632, 659, 843, 847, 910, 913, 982, 983, 1015, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1054], "votingregressor": [133, 400, 417, 570, 983, 1045, 1046, 1047, 1050, 1053, 1054], "votingregressorifittedvotingregressor": 133, "voxel": [44, 64, 586], "vp": 1018, "vq": [46, 56], "vqean3": [1044, 1045], "vredevoogd": [1038, 1039], "vrigazov": 1051, "vrishank": [1043, 1044], "vs_buildtool": 378, "vstack": [10, 24, 55, 63, 152, 153, 179, 243, 247, 283, 296, 344, 632, 994, 1044], "vstolbunov": 1041, "vt": 551, "vufg": 1044, "vukolov": [1044, 1045], "vulner": 403, "vuw": 531, "vvz2010": 985, "vx": 35, "vya": [1044, 1045, 1046], "vyom": [1051, 1052], "vz2010": 985, "v\u00e1zquez": 1039, "v\u0103n": 1051, "w": [4, 10, 12, 28, 32, 38, 40, 43, 46, 56, 62, 99, 102, 146, 161, 196, 201, 214, 233, 234, 243, 244, 245, 248, 249, 270, 302, 318, 319, 343, 344, 346, 353, 362, 367, 375, 377, 386, 403, 410, 411, 415, 417, 418, 422, 427, 433, 438, 466, 470, 473, 475, 483, 484, 485, 524, 539, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 589, 590, 592, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 694, 700, 726, 727, 757, 800, 801, 815, 823, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 855, 856, 862, 863, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 939, 944, 989, 993, 997, 998, 1003, 1005, 1007, 1008, 1025, 1029, 1046, 1050, 1051, 1052, 1053], "w0": 90, "w1": [90, 417, 658], "w1992": 417, "w2": 417, "w3": 417, "w_": [415, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 989, 993, 995, 998], "w_0": 989, "w_1": [417, 989, 997], "w_1x_1": 997, "w_2": [417, 989, 997], "w_2x_2": 997, "w_3": 989, "w_4": 989, "w_5": 989, "w_i": [417, 984, 993], "w_ij": 661, "w_init": [422, 534], "w_intercept": [905, 906], "w_j": [647, 653, 993, 1007], "w_k": [410, 417, 989], "w_l": 989, "w_mx_m": 997, "w_n": 417, "w_new": 415, "w_p": 989, "w_pad": [93, 118, 357], "w_x_1": [905, 906], "w_x_n": [905, 906], "wa": [0, 2, 6, 12, 25, 38, 68, 69, 78, 84, 90, 127, 130, 146, 158, 167, 173, 201, 222, 233, 236, 249, 252, 253, 255, 257, 259, 265, 266, 273, 278, 301, 310, 315, 316, 320, 328, 329, 351, 353, 360, 362, 366, 375, 377, 378, 380, 384, 385, 394, 397, 400, 403, 405, 406, 409, 410, 413, 414, 418, 422, 434, 441, 442, 443, 444, 446, 447, 448, 450, 451, 455, 458, 461, 465, 469, 470, 475, 483, 484, 485, 486, 516, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 660, 665, 673, 675, 677, 678, 686, 687, 689, 690, 693, 714, 730, 731, 784, 785, 788, 798, 799, 801, 804, 805, 815, 828, 830, 842, 849, 852, 854, 857, 861, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 902, 903, 936, 937, 960, 981, 982, 983, 992, 993, 996, 999, 1003, 1006, 1009, 1013, 1020, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "wadawson": 1040, "wadsworth": [913, 914, 1009], "waelbenamara": 1047, "wagner": 1050, "wai": [0, 2, 15, 25, 48, 58, 69, 72, 114, 121, 126, 128, 146, 156, 167, 169, 170, 198, 201, 202, 212, 215, 228, 229, 232, 233, 236, 237, 254, 259, 266, 268, 305, 306, 318, 320, 321, 362, 366, 367, 368, 374, 376, 378, 379, 382, 383, 388, 389, 394, 395, 397, 400, 403, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 425, 444, 445, 452, 453, 454, 460, 461, 463, 464, 470, 497, 556, 557, 564, 573, 590, 600, 601, 612, 633, 667, 668, 677, 678, 679, 700, 705, 707, 718, 737, 738, 755, 756, 758, 764, 775, 779, 789, 796, 826, 834, 851, 872, 878, 883, 889, 915, 916, 964, 967, 982, 983, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1013, 1014, 1017, 1018, 1020, 1028, 1029, 1036, 1038, 1044, 1049, 1050, 1054], "waijean": 1049, "wainwright": [722, 724, 725], "waist": 377, "wait": [15, 378, 380, 384, 394, 667, 668, 669, 677, 679, 1048], "waithera": 1046, "wal": 10, "waldo": 320, "wale": 125, "walk": [410, 416, 1039], "walker": 1040, "wall": 410, "wallach": [1040, 1041], "walli": 1044, "wallygauz": 1044, "walsh": [246, 1048, 1050], "walt": [1039, 1040, 1044], "walter": 1042, "walton": 320, "wan": 1044, "wang": [415, 537, 680, 690, 694, 727, 757, 989, 990, 993, 1039, 1041, 1042, 1043, 1044, 1048, 1051, 1052, 1054], "wangz10": 1041, "want": [0, 2, 10, 18, 22, 23, 24, 53, 62, 69, 146, 162, 167, 197, 198, 199, 233, 236, 249, 253, 259, 274, 278, 286, 301, 331, 336, 351, 362, 366, 367, 368, 378, 379, 381, 382, 384, 385, 386, 392, 393, 394, 395, 397, 400, 403, 407, 408, 409, 410, 411, 412, 417, 418, 419, 501, 504, 505, 511, 536, 550, 655, 656, 657, 659, 660, 667, 669, 675, 676, 677, 765, 800, 823, 851, 854, 870, 877, 898, 905, 982, 989, 992, 993, 994, 997, 999, 1003, 1004, 1008, 1013, 1014, 1020, 1028, 1036, 1050, 1054], "ward": [0, 12, 19, 34, 37, 38, 39, 40, 42, 44, 50, 51, 52, 54, 60, 66, 164, 170, 222, 399, 418, 442, 446, 464, 531, 858, 1015, 1036, 1039, 1041], "ward__n_clust": 52, "ward_tre": [52, 442, 446, 1036, 1040], "wardagglom": 1041, "wardagglomer": 1039, "wardclust": 1039, "wareh": 735, "warm": [383, 394, 532, 538, 544, 546, 547, 611, 654, 660, 667, 668, 669, 677, 678, 679, 989, 1014, 1046, 1048, 1050], "warm_start": [113, 153, 190, 318, 382, 386, 394, 417, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 611, 647, 649, 650, 653, 659, 661, 663, 667, 668, 669, 670, 677, 678, 679, 681, 798, 799, 854, 862, 863, 999, 1016, 1031, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1050, 1052], "warn": [42, 60, 70, 197, 212, 233, 262, 283, 300, 301, 309, 366, 367, 369, 380, 383, 384, 385, 394, 403, 411, 418, 497, 539, 541, 548, 551, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 572, 573, 574, 575, 576, 577, 579, 603, 637, 694, 713, 714, 730, 731, 739, 784, 785, 788, 855, 869, 870, 908, 909, 910, 911, 913, 914, 915, 916, 925, 926, 932, 942, 950, 959, 963, 979, 980, 982, 993, 1003, 1027, 1036, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "warn_for": 784, "warn_on_dtyp": 1045, "warn_when_not_sort": 860, "warner": [10, 1051, 1052], "warshal": [689, 990], "warshaw": 1042, "warut": [1043, 1044], "wase": 1053, "washington": [9, 156, 218, 246, 288, 296], "wasn": [68, 233, 1045], "waspa": 539, "wast": [115, 386, 414, 415, 982], "watanab": 1053, "watch": [11, 367], "watchtheblur": 1048, "water": 9, "waterburi": [1044, 1045], "waterland": 1039, "waterponei": [1042, 1043], "watson": [311, 411], "wattai": 1051, "wav": 374, "wave": [191, 380, 992], "waveform": 38, "wavelet": [12, 102, 415], "wavfil": 374, "waweru": 1053, "wb": [15, 403], "wchathura": 1051, "wclf": 341, "wconnel": 1047, "wdbc": [146, 377], "wderos": 1047, "wdevazelh": 1044, "wdisp": 341, "we": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 22, 23, 24, 25, 28, 30, 32, 35, 38, 39, 40, 42, 45, 47, 48, 51, 53, 54, 55, 56, 60, 62, 63, 64, 68, 69, 70, 71, 73, 76, 78, 79, 80, 84, 87, 88, 90, 93, 94, 95, 96, 98, 100, 101, 103, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 132, 133, 136, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 180, 181, 183, 185, 186, 188, 190, 192, 194, 197, 198, 199, 200, 201, 203, 205, 206, 209, 210, 211, 212, 213, 215, 218, 219, 222, 223, 226, 227, 229, 230, 231, 233, 234, 236, 237, 239, 240, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 273, 274, 278, 281, 283, 285, 286, 288, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 400, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 451, 470, 471, 472, 473, 474, 475, 476, 477, 502, 524, 532, 533, 535, 538, 546, 547, 550, 562, 563, 564, 570, 571, 583, 584, 590, 612, 618, 628, 633, 634, 639, 641, 652, 656, 659, 660, 667, 669, 674, 675, 676, 677, 678, 693, 712, 719, 721, 727, 747, 757, 765, 782, 800, 807, 823, 824, 826, 847, 848, 849, 851, 853, 854, 855, 856, 857, 868, 877, 878, 879, 885, 890, 891, 893, 894, 895, 896, 898, 901, 905, 909, 957, 959, 982, 983, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054], "wea": 407, "weak": [83, 120, 123, 201, 215, 265, 414, 560, 631, 996, 1018, 1052], "weak_learn": 109, "weak_learners_info": 109, "weak_learners_misclassification_error": 109, "weaker": [73, 562, 563], "weakest": [356, 1009], "weaklearn": 554, "weakli": 64, "weather": [2, 11, 154, 168, 409, 989, 993], "web": [146, 374, 375, 377, 380, 383, 388, 403, 410, 418, 522, 898, 993, 1003, 1032, 1036], "weber": 1043, "weblog": 410, "webpag": [15, 173, 380], "websit": [374, 375, 377, 380, 395, 997, 1007, 1017, 1018, 1029, 1037, 1038, 1039], "wed": [2, 125, 168], "weed": 605, "week": [2, 11, 125, 322, 379, 380, 395, 497, 1018, 1050], "weekdai": [2, 168], "weekday_co": 2, "weekday_sin": 2, "weekend": [2, 125], "weezel": [1051, 1052], "wegelin": 413, "wehenkel": [417, 558, 559, 566, 567, 915, 916], "wei": [0, 399, 1007, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1049, 1052], "weibul": 309, "weidemann": 1050, "weigh": [414, 1043], "weight": [4, 9, 12, 13, 17, 22, 30, 52, 68, 103, 122, 131, 132, 138, 142, 143, 153, 154, 162, 164, 167, 175, 181, 186, 188, 197, 201, 202, 204, 207, 208, 209, 211, 212, 213, 215, 216, 233, 238, 243, 247, 253, 257, 262, 266, 268, 286, 289, 295, 296, 298, 299, 300, 302, 303, 310, 312, 315, 318, 322, 323, 326, 327, 334, 339, 341, 343, 344, 346, 347, 349, 351, 352, 353, 360, 362, 376, 377, 389, 392, 394, 409, 410, 412, 413, 415, 416, 419, 421, 427, 433, 438, 441, 444, 445, 447, 448, 450, 454, 460, 461, 464, 465, 466, 468, 470, 475, 483, 484, 485, 497, 516, 525, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 590, 591, 592, 594, 598, 603, 604, 611, 612, 629, 633, 634, 635, 636, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 690, 694, 698, 699, 701, 703, 704, 708, 709, 710, 713, 714, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 760, 770, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 867, 870, 884, 885, 886, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 930, 931, 944, 968, 974, 983, 984, 989, 990, 992, 993, 995, 996, 997, 998, 1000, 1003, 1006, 1007, 1008, 1009, 1014, 1015, 1020, 1027, 1029, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "weight_concentration_": 798, "weight_concentration_prior": [243, 249, 798, 992], "weight_concentration_prior_": 798, "weight_concentration_prior_typ": [243, 249, 798, 992, 1042], "weight_vector": [1036, 1046], "weighted_acc": 400, "weighted_mod": 389, "weighted_n_node_sampl": 360, "weightedmetaregressor": 233, "weights_": [243, 798, 799, 1050], "weights_handl": 210, "weights_init": 799, "weijiadu": 1050, "weinberg": 418, "weinsberg": 1036, "weinstein": 1037, "weisberg": 989, "weiss": [0, 245, 399, 410, 692, 1036], "weitzenfeld": 1018, "weka": 842, "welch": 1042, "welcom": [369, 379, 380, 388, 395, 1014], "welind": 1036, "well": [0, 2, 7, 10, 18, 22, 23, 25, 32, 37, 46, 51, 55, 56, 60, 68, 76, 84, 109, 110, 112, 115, 120, 122, 128, 130, 146, 154, 156, 166, 167, 168, 169, 173, 181, 185, 195, 197, 198, 199, 201, 205, 218, 219, 220, 223, 226, 230, 233, 236, 245, 253, 259, 266, 268, 270, 275, 278, 283, 286, 288, 289, 290, 312, 316, 317, 318, 319, 320, 321, 322, 323, 343, 346, 351, 352, 353, 362, 375, 377, 379, 380, 384, 386, 388, 389, 392, 393, 394, 395, 403, 407, 410, 412, 414, 415, 417, 419, 421, 424, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 460, 461, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 701, 722, 723, 724, 725, 786, 789, 793, 796, 798, 799, 800, 801, 804, 805, 815, 823, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 940, 941, 961, 982, 983, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1006, 1007, 1009, 1010, 1013, 1014, 1018, 1028, 1029, 1036, 1037, 1040, 1042, 1043, 1044, 1047, 1054], "wen": 1051, "wenbo": [1046, 1048], "wendi": 1046, "wendling": 1043, "weng": 1008, "wenhao": [258, 1044, 1045], "wenhaoz": 258, "wenhua": 1042, "wenjian": 1042, "wenliwyan": 1047, "went": [384, 993], "were": [0, 2, 30, 68, 69, 72, 78, 79, 115, 119, 122, 125, 143, 146, 154, 162, 197, 198, 201, 227, 236, 268, 270, 301, 302, 310, 316, 317, 319, 320, 321, 322, 323, 329, 343, 351, 353, 360, 362, 374, 375, 377, 380, 381, 384, 392, 394, 400, 406, 411, 417, 418, 465, 468, 469, 497, 562, 563, 603, 804, 805, 820, 829, 852, 902, 903, 982, 985, 993, 994, 1009, 1028, 1029, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "weren": [351, 879, 1045], "werman": 1048, "werneck": 1044, "werner": [1043, 1048], "werror": 388, "wersd\u00f6rfer": 1038, "weslei": [591, 731], "westermann": [0, 370, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "western": 418, "weston": [3, 415, 536, 594, 595, 901], "westov": 1044, "wetter": 168, "wfc": 10, "wget": 388, "wh": [415, 539, 541, 548], "wh_i": 415, "what": [0, 2, 7, 10, 11, 38, 43, 50, 51, 84, 94, 98, 118, 166, 167, 186, 203, 205, 213, 228, 233, 240, 301, 351, 353, 356, 362, 367, 375, 378, 380, 381, 382, 384, 386, 388, 393, 394, 395, 396, 409, 410, 416, 417, 418, 504, 537, 589, 590, 592, 647, 653, 697, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 992, 993, 994, 996, 1009, 1014, 1020, 1036, 1043], "whatnot": 351, "whats_miss": 384, "whats_new": [384, 388], "wheel": [378, 380, 384, 397, 1046, 1048, 1050], "wheeler": [1047, 1048], "wheelhouse_upload": 384, "when": [0, 2, 7, 8, 9, 11, 18, 22, 23, 24, 25, 32, 37, 38, 41, 54, 58, 65, 68, 69, 70, 76, 78, 79, 84, 93, 96, 97, 98, 100, 112, 115, 118, 119, 120, 122, 125, 126, 130, 131, 132, 143, 149, 161, 166, 167, 168, 169, 170, 176, 177, 181, 186, 188, 190, 194, 197, 199, 201, 202, 213, 226, 227, 228, 232, 233, 240, 244, 246, 255, 258, 259, 260, 261, 262, 266, 268, 269, 273, 278, 283, 285, 286, 289, 290, 291, 305, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 322, 328, 329, 331, 339, 342, 343, 346, 351, 352, 353, 356, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 400, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 426, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 516, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 579, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 702, 703, 705, 706, 708, 709, 713, 714, 717, 728, 729, 730, 731, 733, 735, 736, 739, 747, 749, 752, 755, 756, 758, 762, 764, 768, 769, 770, 772, 775, 779, 782, 783, 784, 785, 786, 788, 789, 790, 792, 793, 794, 796, 798, 799, 800, 801, 804, 805, 806, 807, 815, 819, 820, 823, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 892, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 921, 924, 925, 926, 932, 936, 940, 941, 942, 943, 945, 946, 951, 954, 961, 962, 982, 983, 985, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1014, 1017, 1018, 1020, 1026, 1027, 1028, 1029, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "whenev": [156, 166, 253, 362, 374, 388, 394, 397, 407, 483, 484, 485, 497, 629, 631, 984, 992, 1014, 1046], "where": [6, 9, 10, 12, 15, 17, 18, 22, 23, 24, 30, 51, 53, 55, 78, 84, 90, 93, 96, 102, 103, 109, 111, 113, 115, 119, 120, 122, 125, 127, 143, 144, 146, 149, 155, 158, 162, 167, 176, 181, 189, 198, 201, 206, 207, 208, 210, 214, 215, 218, 220, 221, 226, 227, 230, 233, 234, 236, 238, 249, 253, 255, 256, 259, 261, 265, 266, 268, 270, 271, 273, 278, 281, 302, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 327, 328, 337, 343, 346, 347, 348, 351, 356, 357, 362, 366, 367, 368, 374, 376, 377, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 395, 397, 400, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 433, 438, 445, 448, 449, 453, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 497, 527, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 610, 611, 612, 614, 616, 620, 623, 624, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 689, 692, 693, 694, 697, 708, 712, 713, 717, 726, 730, 731, 732, 740, 742, 756, 764, 769, 770, 771, 774, 782, 783, 784, 785, 788, 789, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 875, 878, 880, 881, 884, 885, 891, 893, 899, 900, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 933, 934, 935, 936, 942, 950, 953, 978, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1014, 1020, 1021, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "wherea": [11, 32, 46, 51, 65, 78, 126, 211, 236, 260, 261, 262, 268, 286, 310, 343, 346, 347, 368, 395, 414, 417, 445, 447, 566, 659, 660, 803, 819, 833, 985, 992, 994, 996, 1003, 1009, 1049, 1054], "wherein": 394, "whether": [6, 8, 11, 69, 107, 126, 152, 155, 157, 167, 168, 197, 201, 215, 219, 227, 233, 253, 257, 305, 360, 362, 367, 375, 378, 379, 380, 382, 384, 385, 386, 394, 400, 409, 410, 411, 412, 414, 415, 417, 419, 422, 441, 443, 452, 454, 455, 460, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 484, 485, 486, 488, 489, 492, 493, 497, 498, 504, 509, 510, 515, 523, 528, 532, 533, 538, 539, 540, 541, 543, 546, 547, 549, 553, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 582, 589, 590, 591, 592, 598, 603, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 632, 633, 634, 636, 637, 638, 639, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 691, 695, 696, 698, 699, 701, 703, 705, 713, 743, 762, 768, 775, 779, 783, 790, 801, 804, 805, 806, 807, 815, 819, 820, 823, 824, 825, 828, 829, 831, 834, 836, 839, 840, 841, 842, 844, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 869, 886, 892, 905, 906, 907, 908, 909, 910, 911, 917, 919, 923, 925, 926, 927, 929, 941, 942, 949, 950, 966, 977, 981, 982, 983, 988, 989, 993, 998, 999, 1005, 1007, 1008, 1018, 1043, 1044, 1045, 1053], "whi": [167, 169], "which": [0, 2, 5, 8, 10, 11, 12, 13, 15, 17, 18, 19, 23, 24, 25, 32, 35, 37, 38, 41, 42, 44, 47, 51, 53, 54, 55, 56, 63, 65, 68, 69, 70, 73, 76, 78, 79, 84, 88, 90, 95, 97, 98, 103, 109, 112, 113, 114, 115, 119, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 136, 141, 143, 145, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 168, 170, 173, 176, 177, 181, 186, 190, 197, 198, 199, 201, 203, 205, 211, 213, 214, 215, 218, 219, 220, 222, 226, 227, 230, 231, 232, 233, 234, 236, 237, 243, 244, 248, 249, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 278, 281, 283, 288, 289, 290, 300, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 330, 339, 343, 346, 348, 351, 352, 353, 356, 360, 362, 366, 367, 368, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 488, 524, 532, 533, 534, 535, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 580, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 618, 620, 623, 628, 629, 630, 631, 633, 634, 635, 641, 643, 644, 645, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 662, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 710, 717, 718, 720, 721, 724, 726, 727, 735, 736, 737, 738, 743, 744, 747, 757, 759, 779, 780, 781, 782, 783, 784, 790, 798, 799, 800, 801, 804, 805, 806, 807, 809, 811, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 862, 865, 869, 872, 876, 878, 879, 880, 883, 884, 885, 886, 887, 889, 897, 898, 900, 901, 902, 905, 907, 910, 911, 913, 914, 915, 916, 917, 921, 934, 937, 941, 942, 944, 949, 950, 951, 953, 961, 962, 965, 968, 974, 977, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1018, 1020, 1022, 1024, 1027, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "whichev": [410, 417, 447, 545, 562, 563, 634, 651, 655, 657, 665, 683, 684, 698], "whidou": 1049, "while": [0, 2, 5, 6, 8, 10, 15, 18, 22, 25, 32, 35, 37, 41, 42, 46, 53, 60, 64, 68, 71, 73, 90, 97, 98, 109, 112, 115, 116, 120, 125, 127, 130, 146, 150, 155, 157, 158, 161, 166, 167, 168, 169, 173, 176, 178, 181, 186, 191, 197, 199, 201, 213, 226, 229, 230, 233, 234, 244, 245, 249, 252, 253, 254, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 285, 305, 306, 307, 310, 311, 312, 315, 318, 321, 322, 336, 339, 351, 353, 360, 362, 367, 372, 373, 374, 375, 376, 379, 380, 382, 384, 385, 386, 388, 389, 392, 394, 395, 403, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 422, 445, 465, 468, 469, 484, 486, 497, 522, 533, 553, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 576, 583, 589, 590, 591, 592, 595, 598, 603, 607, 635, 644, 647, 648, 650, 657, 658, 659, 660, 677, 678, 679, 680, 709, 731, 755, 775, 779, 789, 795, 798, 801, 802, 803, 806, 807, 808, 809, 810, 811, 815, 816, 817, 819, 824, 826, 827, 828, 829, 830, 832, 840, 851, 853, 855, 856, 857, 864, 865, 866, 867, 868, 881, 893, 898, 903, 905, 906, 913, 914, 915, 916, 921, 946, 982, 983, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 999, 1000, 1003, 1005, 1008, 1009, 1013, 1014, 1020, 1026, 1027, 1028, 1029, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "whilst": [113, 220], "whisker": 8, "white": [56, 58, 93, 154, 167, 211, 218, 289, 302, 307, 331, 338, 415, 418, 626, 1009, 1036, 1039, 1042, 1046, 1050], "whitekernel": [149, 154, 155, 420, 612, 613, 615, 1047], "whiten": [4, 93, 94, 95, 287, 415, 422, 534, 535, 542, 883, 885, 1003, 1025, 1040, 1042, 1050, 1051, 1054], "whiten_solv": [422, 534, 1051], "whitening_": 534, "whitespac": 418, "whl": 384, "who": [0, 68, 167, 367, 369, 375, 380, 387, 395, 397, 847, 848, 849, 851, 853, 855, 856, 857, 1011, 1013, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whole": [8, 48, 72, 125, 133, 162, 198, 236, 256, 263, 339, 343, 356, 366, 380, 392, 393, 411, 413, 417, 420, 450, 484, 539, 556, 557, 558, 559, 564, 565, 566, 567, 571, 686, 687, 801, 804, 805, 815, 829, 840, 841, 842, 843, 844, 982, 993, 1003, 1029, 1044, 1046], "whose": [53, 77, 78, 79, 146, 154, 197, 337, 375, 388, 389, 394, 407, 410, 412, 417, 419, 420, 423, 438, 439, 440, 449, 462, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 516, 535, 539, 541, 542, 545, 548, 550, 573, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 641, 672, 696, 719, 801, 808, 815, 830, 851, 870, 897, 898, 941, 972, 973, 987, 994, 998, 999, 1000, 1008, 1039, 1044, 1045, 1047, 1050], "why": [25, 35, 50, 93, 109, 115, 125, 167, 169, 173, 186, 253, 256, 259, 278, 351, 352, 380, 388, 394, 410, 412, 415, 421, 445, 448, 452, 993, 995, 1008, 1024, 1027, 1039], "wick": 1048, "wide": [25, 58, 59, 88, 112, 230, 306, 392, 410, 415, 418, 982, 989, 1013, 1018, 1029, 1036, 1038, 1052], "widehat": 152, "wider": [11, 199, 418, 918, 989], "widetild": 1009, "width": [6, 8, 11, 43, 51, 78, 88, 95, 96, 101, 102, 103, 112, 118, 119, 122, 132, 142, 151, 157, 180, 240, 243, 258, 286, 305, 307, 308, 311, 317, 320, 336, 377, 411, 439, 440, 453, 465, 494, 495, 507, 522, 587, 870, 918, 1003, 1007, 1009, 1026, 1027, 1044], "wiesel": [412, 423, 476], "wignal": [1039, 1040, 1046, 1047], "wijewardena": [0, 1039, 1040, 1041], "wiki": [15, 22, 386, 388, 596, 637, 669, 672, 696, 706, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 989, 1009], "wikic": 985, "wikipedia": [1, 14, 22, 164, 388, 408, 410, 596, 608, 609, 637, 657, 669, 672, 683, 684, 696, 705, 706, 708, 710, 713, 717, 719, 727, 730, 731, 732, 735, 736, 739, 744, 757, 784, 786, 787, 789, 790, 793, 794, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 985, 989, 993, 996, 1005, 1009, 1015, 1029, 1036, 1043], "wikipedia_principal_eigenvector": [14, 15, 1015], "wikipediadet2017": 993, "wil": 1048, "wild": [4, 373, 494, 495, 509, 510, 1025, 1031, 1036], "wilderness_area": 236, "wildli": [288, 992], "wilei": [377, 983], "wilhelm": [214, 1040, 1042, 1046], "wilk": 407, "wilksch": 1051, "willamett": 311, "willard": 1048, "willdarnel": 1046, "willduan": 1043, "william": [146, 375, 377, 420, 611, 612, 615, 620, 623, 640, 985, 993, 997, 1043, 1044, 1045, 1046, 1051, 1052], "williamson": 1046, "willing": [166, 256, 409], "willocx": 1046, "willpeppo": 1048, "wilson": [78, 377, 1036, 1039], "wiman": 1036, "wimld": 1050, "winata": [1046, 1048], "wind": [168, 994], "windber": 1047, "windiana42": 1052, "window": [17, 330, 375, 380, 382, 383, 418, 1013, 1036, 1039, 1043, 1047, 1049, 1050, 1054], "windowsapp": 397, "windowserror": 1052, "windspe": [2, 168], "wine": [7, 239, 310, 311, 373, 511, 1031], "wine_review": 311, "wineri": 311, "winn": 993, "winter": [2, 11], "winterman": 1037, "wip": [380, 388, 397], "wipf": [646, 989], "wire": [386, 535, 542], "wiryadi": 1048, "wisc": [146, 377, 900], "wisconsin": [146, 170, 373, 501, 1001, 1031, 1041], "wise": [5, 24, 46, 157, 198, 226, 269, 305, 352, 366, 394, 407, 410, 414, 415, 419, 459, 532, 535, 538, 542, 546, 547, 550, 551, 554, 556, 557, 560, 561, 593, 596, 597, 599, 600, 601, 607, 641, 653, 701, 755, 833, 852, 882, 895, 896, 899, 966, 968, 969, 970, 971, 974, 985, 987, 989, 993, 994, 1007, 1014, 1036, 1041, 1044, 1045, 1046], "wish": [374, 380, 387, 389, 397, 410, 942, 1021, 1029, 1043], "wishart": 798, "wissen": 451, "with_cent": [883, 895], "with_error": 702, "with_mean": [385, 885, 896, 1003, 1044, 1049], "with_scal": [883, 895], "with_std": [885, 896, 1003, 1044], "with_traceback": [572, 573, 574, 575, 576, 577, 578, 579], "withheld": 414, "within": [2, 18, 58, 114, 116, 117, 120, 125, 129, 143, 145, 146, 193, 198, 199, 209, 215, 233, 237, 257, 258, 262, 272, 305, 306, 317, 337, 340, 343, 346, 353, 362, 366, 375, 380, 384, 389, 392, 394, 395, 400, 406, 407, 408, 410, 411, 414, 416, 417, 421, 445, 449, 462, 464, 465, 467, 470, 475, 516, 550, 568, 569, 570, 571, 594, 595, 633, 693, 697, 700, 711, 726, 782, 798, 799, 806, 807, 819, 820, 829, 830, 845, 846, 847, 848, 853, 855, 856, 857, 864, 865, 866, 878, 886, 890, 891, 893, 894, 895, 896, 907, 908, 909, 910, 911, 913, 914, 915, 916, 982, 987, 989, 990, 996, 999, 1003, 1006, 1008, 1009, 1014, 1018, 1020, 1024, 1027, 1029, 1038, 1039, 1043, 1044, 1049, 1050, 1052, 1053, 1054], "without": [2, 3, 11, 12, 22, 34, 40, 42, 45, 50, 53, 54, 60, 64, 65, 66, 73, 98, 115, 120, 121, 124, 125, 127, 130, 137, 142, 146, 156, 164, 166, 167, 168, 181, 186, 205, 226, 230, 233, 234, 236, 237, 239, 252, 253, 260, 264, 266, 278, 284, 285, 286, 292, 293, 294, 295, 297, 305, 306, 310, 312, 315, 343, 346, 352, 368, 375, 376, 378, 380, 381, 382, 384, 385, 386, 389, 392, 393, 394, 400, 403, 410, 411, 415, 417, 418, 419, 420, 435, 440, 442, 447, 459, 470, 475, 497, 505, 516, 533, 535, 556, 557, 564, 580, 581, 612, 628, 632, 635, 640, 660, 693, 701, 782, 804, 805, 806, 813, 815, 830, 831, 847, 854, 858, 864, 865, 868, 871, 874, 875, 877, 881, 882, 883, 885, 890, 905, 921, 962, 982, 983, 985, 987, 989, 990, 993, 996, 999, 1003, 1007, 1008, 1009, 1013, 1014, 1015, 1020, 1021, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054], "withstrok": 38, "witten": 414, "wittenau": 1041, "wk": 706, "wl": 378, "wminkowski": [1048, 1050], "wmt": 10, "wnl": 418, "wo": 418, "wojdyla": [1051, 1052], "wolberg": [146, 377], "wolf": [8, 13, 27, 32, 33, 75, 76, 79, 80, 81, 164, 292, 474, 476, 480, 481, 513, 550, 987, 1015, 1043], "wolframalpha": 1046, "wolodzko": 1049, "wolosonovich": 1044, "wolpert": [417, 568, 569], "wompner": 1044, "won": [130, 301, 352, 384, 410, 469, 497, 628, 629, 631, 688, 705, 718, 737, 738, 756, 758, 796, 992, 1003, 1041, 1042, 1047], "wonder": [351, 378], "wonpil": 989, "wood": 1045, "woolam": [326, 327, 328, 331, 1036], "word": [6, 13, 17, 68, 149, 230, 234, 339, 352, 353, 366, 375, 376, 380, 382, 385, 394, 406, 409, 410, 412, 413, 414, 415, 454, 512, 524, 535, 537, 542, 589, 590, 592, 697, 834, 844, 902, 987, 991, 995, 998, 1003, 1006, 1007, 1018, 1027, 1028, 1036, 1044], "word_col": 17, "word_scor": 17, "word_token": 418, "wordnetlemmat": 418, "work": [0, 2, 7, 11, 15, 30, 42, 43, 46, 50, 65, 76, 112, 119, 133, 146, 155, 156, 166, 167, 168, 186, 201, 214, 233, 243, 245, 257, 278, 289, 290, 311, 316, 318, 319, 321, 341, 343, 352, 353, 362, 367, 368, 369, 374, 375, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 395, 403, 405, 406, 407, 410, 411, 412, 415, 417, 418, 419, 422, 423, 424, 425, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 461, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 505, 509, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 709, 743, 775, 779, 780, 781, 782, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 942, 946, 961, 982, 983, 985, 987, 988, 989, 990, 992, 993, 995, 996, 999, 1000, 1003, 1006, 1007, 1013, 1014, 1018, 1020, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "work_directori": 1029, "workabl": 385, "workaround": [311, 380, 801, 815], "workclass": [322, 497], "worker": [367, 394, 418, 959, 960, 961, 1051], "workflow": [380, 383, 384, 393, 414, 1017, 1031], "working_memori": [366, 367, 469, 782, 903, 1044], "workingdai": [2, 168], "workload": [961, 1013], "workshop": [0, 410, 418, 840, 995, 1012], "workspac": 1029, "workstat": 388, "world": [0, 53, 68, 72, 167, 201, 222, 236, 253, 351, 366, 369, 373, 377, 410, 415, 418, 958, 983, 993, 995, 1012, 1014, 1018, 1023, 1031, 1036], "worldwid": 1018, "wornbb": 1047, "worri": [52, 990, 1021], "wors": [2, 84, 109, 150, 168, 203, 259, 267, 281, 310, 362, 407, 410, 420, 433, 466, 483, 484, 485, 553, 555, 557, 559, 561, 563, 566, 569, 571, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 681, 706, 722, 723, 724, 725, 729, 786, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 993, 1003, 1045], "worse_prob": 259, "worsen": 120, "worst": [146, 197, 311, 377, 410, 445, 448, 709, 730, 731, 784, 785, 788, 793, 794, 830, 993, 1018, 1036, 1049], "worth": [53, 118, 168, 197, 380, 388, 1018], "worthwhil": [70, 394], "would": [0, 2, 4, 7, 11, 24, 25, 30, 43, 51, 53, 56, 68, 76, 78, 79, 84, 90, 98, 109, 122, 146, 149, 154, 155, 167, 168, 169, 170, 173, 181, 187, 197, 198, 199, 212, 215, 226, 233, 236, 245, 253, 255, 259, 260, 265, 267, 269, 273, 278, 283, 289, 301, 305, 306, 310, 311, 318, 321, 329, 339, 343, 346, 347, 351, 353, 360, 362, 366, 375, 376, 380, 381, 382, 386, 388, 389, 392, 393, 394, 395, 400, 403, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 433, 447, 466, 469, 483, 484, 485, 490, 528, 533, 535, 537, 542, 545, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 584, 585, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 701, 703, 709, 713, 714, 721, 757, 779, 783, 786, 790, 801, 803, 815, 830, 838, 839, 848, 856, 863, 890, 891, 893, 894, 895, 896, 897, 898, 903, 905, 906, 908, 911, 913, 914, 915, 916, 950, 953, 982, 983, 986, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1003, 1008, 1013, 1014, 1018, 1020, 1025, 1027, 1029, 1033, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "wp": [418, 658, 672], "wpd": 351, "wprd": 418, "wrap": [93, 114, 122, 283, 323, 374, 382, 394, 403, 434, 509, 658, 677, 831, 889, 983, 993, 996, 1008, 1013, 1036, 1041, 1044, 1046, 1047, 1049, 1051], "wraparound": 381, "wrapped_classifi": 323, "wrapper": [25, 283, 386, 389, 414, 420, 545, 621, 669, 672, 743, 905, 989, 1009, 1013, 1040, 1048], "wrapt": [659, 660], "wrath": 411, "write": [6, 15, 162, 233, 351, 366, 367, 374, 378, 379, 380, 384, 385, 386, 388, 389, 392, 394, 403, 405, 411, 415, 418, 1004, 1014, 1029, 1037, 1049, 1053], "writer": 351, "written": [3, 5, 27, 33, 49, 51, 87, 96, 144, 164, 204, 252, 287, 318, 326, 327, 367, 377, 380, 381, 382, 386, 388, 392, 394, 408, 411, 416, 488, 503, 509, 698, 714, 831, 910, 917, 987, 989, 993, 997, 998, 1007, 1012, 1015, 1020, 1021, 1026, 1029, 1045], "wrong": [58, 197, 253, 289, 351, 362, 377, 380, 382, 418, 505, 727, 757, 794, 993, 999, 1008, 1039, 1041, 1043, 1044, 1045, 1046, 1049, 1053], "wrongli": [197, 339, 1054], "wrote": [130, 375], "ws2001": 985, "wspace": [12, 13, 37, 42, 43, 60, 78, 93, 111, 197, 215, 226, 243, 245, 246, 249, 288, 296, 327, 336], "wstate": 1049, "wtv": 386, "wtw": 386, "wu": [1008, 1040, 1048], "wurp": [1050, 1051], "wuthrich": [197, 215], "ww": 415, "www": [4, 69, 173, 197, 213, 215, 227, 273, 281, 301, 374, 375, 380, 388, 397, 410, 414, 443, 450, 488, 509, 510, 532, 535, 538, 542, 645, 659, 665, 672, 686, 687, 854, 861, 913, 914, 989, 1006, 1025], "www4": [146, 377], "wyseguy7": 1042, "w\u00fcthrich": 407, "x": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 22, 23, 24, 25, 28, 29, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 77, 78, 79, 80, 83, 84, 89, 90, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 218, 219, 220, 223, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 373, 374, 375, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 400, 403, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 494, 495, 496, 499, 501, 502, 503, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 711, 712, 726, 733, 736, 743, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 789, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 929, 939, 941, 942, 943, 944, 953, 954, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 982, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1014, 1020, 1024, 1025, 1027, 1028, 1029, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "x0": [10, 189, 206, 221, 305, 336, 394, 431, 465, 568, 569, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886], "x00": 418, "x006": 1037, "x00a": 418, "x00b": 418, "x00c": 418, "x00d": 418, "x00e": 418, "x00f": 418, "x00g": 418, "x00h": 418, "x00i": 418, "x00l": 418, "x00n": 418, "x00o": 418, "x00r": 418, "x00t": 418, "x00u": 418, "x00z": 418, "x0_cat": [319, 1003], "x0_infrequent_sklearn": [319, 1003], "x0_label": 305, "x0_rabbit": [319, 1003], "x0_str_femal": 878, "x0_str_male": 878, "x0l": 1040, "x1": [10, 83, 89, 111, 121, 152, 209, 221, 305, 336, 382, 394, 431, 465, 510, 568, 569, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 700, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 1028], "x110": 1051, "x1_int_1": 878, "x1_int_2": 878, "x1_int_3": 878, "x1_label": 305, "x2": [83, 89, 111, 121, 152, 209, 382, 411, 589, 630, 700, 1028], "x27": [24, 69, 70, 114, 130, 133, 143, 167, 168, 169, 227, 228, 237, 238, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 328], "x2_tr": 630, "x3": [121, 411, 1028], "x64": 378, "x8": 51, "x86": 378, "x86_64": [383, 397], "x9ft": 418, "x_": [141, 150, 249, 259, 315, 382, 410, 413, 415, 628, 636, 765, 860, 900, 901, 989, 995, 1000, 1042], "x_0": [198, 658], "x_1": [93, 141, 152, 194, 198, 413, 415, 417, 420, 614, 626, 658, 878, 905, 906, 989, 995, 997, 1003, 1007], "x_1d": 319, "x_1x_2": 1003, "x_1x_2x_3": 1003, "x_1x_3": 1003, "x_2": [141, 152, 194, 415, 417, 418, 420, 614, 626, 989, 997, 1003], "x_20": 330, "x_2d": 339, "x_2x_3": 1003, "x_3": [141, 1003], "x_6": 878, "x_7": 878, "x_a": 309, "x_adult": 322, "x_aniso": [42, 55, 60], "x_approx": 1028, "x_axi": [95, 205, 263], "x_b": 309, "x_bimod": 309, "x_bin": 306, "x_bound": [420, 618], "x_c": [483, 484, 486, 1000], "x_calib": 438, "x_california": 162, "x_cardiotocographi": 236, "x_center": 178, "x_check": 926, "x_chisq": 309, "x_cluster": 857, "x_convert": 925, "x_copi": 1047, "x_cu": 405, "x_d": [420, 615], "x_dens": [322, 545], "x_df": 127, "x_diabet": [162, 1024], "x_different_covari": 32, "x_digit": [71, 137, 300, 411, 1024, 1025, 1027], "x_dist_graph": 849, "x_embed": [292, 293, 693, 697, 854, 996], "x_error": 203, "x_errors_larg": 203, "x_featur": [72, 641, 642, 643, 985], "x_filter": 55, "x_fit": 689, "x_fit_": [536, 644], "x_fold": 1024, "x_forestcov": 236, "x_full": [161, 162, 305], "x_full_train": 114, "x_gaussian": 309, "x_hashed_lsa": 352, "x_hat": [532, 538, 546, 547], "x_hetero": 100, "x_homo": 100, "x_i": [11, 78, 113, 141, 167, 198, 318, 346, 410, 415, 416, 417, 420, 615, 616, 620, 623, 624, 626, 840, 841, 844, 984, 985, 989, 995, 996, 997, 1003, 1007, 1008, 1009], "x_idx_sort": 1048, "x_imput": 631, "x_indic": 142, "x_inform": 312, "x_inlier": 290, "x_inv": [589, 592], "x_ipca": 97, "x_iri": [264, 1028], "x_isotropic_covari": 32, "x_j": [410, 420, 615, 616, 620, 623, 624, 626, 984, 985, 989, 996, 1008, 1009], "x_k": [413, 415, 987, 996], "x_label": 162, "x_leav": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "x_left_lower_corn": [9, 296, 375, 499], "x_legend": 6, "x_list": 308, "x_loadings_": [483, 484, 485], "x_lognorm": [309, 1003], "x_lsa": 352, "x_m": 997, "x_max": [29, 50, 56, 111, 118, 128, 138, 151, 231, 299, 307, 331, 343, 344], "x_max_": 636, "x_mean": 422, "x_mean_": 1048, "x_min": [29, 50, 56, 111, 118, 122, 128, 138, 151, 186, 231, 299, 307, 331, 343, 344], "x_min_": 636, "x_miss": [125, 161, 162], "x_miss_california": 162, "x_miss_diabet": 162, "x_n": [93, 415, 905, 906, 995, 997, 1007], "x_near_unique_categori": 312, "x_new": [54, 411, 415, 419, 434, 443, 444, 446, 448, 450, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 550, 568, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 631, 636, 639, 640, 641, 642, 643, 689, 690, 691, 692, 693, 854, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 897, 898, 1005, 1020], "x_new_again": 1005, "x_new_count": 1029, "x_new_invers": 1005, "x_new_tfidf": 1029, "x_norm_squar": [764, 1041, 1053], "x_normal": 1003, "x_np": 405, "x_offset": 178, "x_offset_": [645, 646, 1048], "x_origin": [535, 540, 542, 544, 545, 631, 897, 898], "x_out": [320, 869, 878, 879], "x_outlier": [179, 211, 289, 290, 338], "x_p": [410, 989], "x_pca": 97, "x_plot": [176, 198, 203, 232, 262, 288, 310], "x_plot_ext": 198, "x_plot_scal": 310, "x_po": 281, "x_q": 410, "x_r": [101, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "x_r2": 101, "x_rand": 265, "x_random": 186, "x_reconstruct": [319, 483, 484, 485, 584], "x_reconstructed_kernel_pca": [3, 98], "x_reconstructed_pca": [3, 98], "x_red": 50, "x_reduc": [49, 88, 128, 446, 1028], "x_restor": 49, "x_right": 32, "x_rope": 259, "x_rotations_": [413, 483, 484, 485], "x_scale": [178, 875, 891, 1003], "x_scale_": [645, 646, 1048], "x_scaler": 8, "x_score": [290, 483, 484, 485, 486], "x_scores_": [485, 1048], "x_select": 362, "x_shared_covari": 32, "x_shuffl": 312, "x_size": 79, "x_sp": 183, "x_spars": [322, 535, 964, 967], "x_sparse_embed": 567, "x_squared_norm": [246, 461], "x_src": 288, "x_std": [875, 891, 1003], "x_std_": 1048, "x_t": [465, 628, 864], "x_test": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 76, 83, 84, 98, 109, 112, 114, 116, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 170, 173, 177, 181, 187, 192, 194, 195, 203, 204, 205, 211, 212, 213, 215, 227, 229, 235, 239, 240, 245, 252, 253, 256, 257, 262, 266, 268, 272, 274, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 329, 330, 338, 351, 356, 358, 359, 360, 362, 366, 374, 382, 385, 393, 403, 411, 414, 417, 439, 471, 472, 473, 474, 475, 476, 477, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 879, 915, 916, 983, 993, 995, 996, 997, 999, 1003, 1007, 1008, 1009, 1024, 1025, 1027, 1033, 1036], "x_test_df": 240, "x_test_kernel_pca": 98, "x_test_maxab": 1003, "x_test_minmax": 1003, "x_test_miss": 125, "x_test_no_cf_encod": 312, "x_test_noisi": 3, "x_test_np": 240, "x_test_pca": [4, 98, 1025], "x_test_r": 83, "x_test_scal": 240, "x_test_sel": 170, "x_test_select": 362, "x_test_text": 6, "x_test_tran": 1003, "x_test_transform": [362, 414], "x_text": 6, "x_tfidf": 352, "x_thresholds_": [229, 636, 1048], "x_torch": 405, "x_tr": [868, 874, 877, 878, 879, 883, 885, 888, 890, 891, 895, 896], "x_train": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 76, 83, 84, 98, 109, 112, 116, 120, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 211, 212, 213, 215, 227, 235, 239, 240, 245, 247, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 329, 330, 338, 351, 356, 360, 362, 366, 374, 382, 385, 393, 411, 414, 417, 438, 439, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 879, 915, 916, 983, 993, 995, 996, 997, 999, 1001, 1003, 1007, 1008, 1024, 1025, 1033], "x_train_": 612, "x_train_count": 1029, "x_train_ensembl": 114, "x_train_linear": 114, "x_train_maxab": 1003, "x_train_minmax": 1003, "x_train_miss": 125, "x_train_no_cf_encod": 312, "x_train_noisi": 3, "x_train_pca": [4, 1025], "x_train_preprocess": 167, "x_train_r": 83, "x_train_sel": 170, "x_train_select": 362, "x_train_std_transform": 310, "x_train_text": 6, "x_train_tf": 1029, "x_train_tfidf": 1029, "x_train_tran": 1003, "x_train_transform": [310, 362, 414], "x_train_valid": 24, "x_tran": [309, 321, 382, 405, 443, 465, 881, 886, 893, 1003], "x_trans_bc": 309, "x_trans_qt": 309, "x_trans_yj": 309, "x_transform": [97, 128, 233, 486, 532, 533, 534, 535, 536, 538, 540, 544, 567, 639, 640, 689, 690, 691, 692], "x_transformed_fit_": 536, "x_true": 221, "x_type": 382, "x_uniform": 309, "x_val": [120, 1001], "x_valid": 24, "x_valu": 329, "x_vari": 55, "x_weibul": 309, "x_weights_": [413, 483, 484, 485, 486], "x_wrong": 32, "xa": 582, "xanchor": 260, "xarg": 1036, "xarrai": 1013, "xavier": [862, 863, 1044, 1045, 1046, 1048, 1049], "xaxi": [43, 88, 99, 115, 194, 218, 220, 223, 283, 288, 351], "xaxis2": 115, "xb": [83, 884], "xbar_": 550, "xbc": 418, "xc3": 418, "xcjason": 1046, "xcode": 378, "xd": 527, "xdang": 680, "xerox": 10, "xerr": [161, 162, 352], "xethan": 1048, "xfail": [382, 388], "xfc": 418, "xfcche": 418, "xfea": 418, "xff": 418, "xgamma": 686, "xgboost": [125, 127, 417, 1013], "xgrid": [9, 296], "xhan": 1045, "xhy": 1043, "xi": [42, 63, 377, 410, 413, 418, 451, 457, 510, 1007, 1047], "xi_i": 1007, "xi_k": 413, "xiangyin": 1049, "xiao": [0, 391, 398, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054], "xiaojin": 900, "xiaoyu": 1048, "xiaoyuchai": 1049, "xin": [680, 989, 1044], "xinfan": [1036, 1037, 1040], "xing": [1044, 1045], "xinv": 870, "xinyu": 410, "xinyuliu12": 1045, "xiong": [1044, 1045, 1050], "xj": 407, "xk": [63, 551], "xlabel": [2, 6, 7, 11, 22, 23, 24, 25, 31, 35, 39, 59, 76, 77, 79, 80, 83, 84, 88, 95, 100, 110, 111, 113, 119, 121, 122, 123, 124, 125, 129, 133, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 202, 204, 206, 207, 211, 215, 230, 232, 234, 236, 254, 258, 259, 263, 264, 268, 269, 272, 274, 285, 286, 289, 290, 311, 312, 336, 338, 339, 342, 351, 357, 358, 359, 632, 1024, 1028], "xlim": [10, 24, 42, 56, 60, 71, 76, 77, 78, 95, 111, 112, 113, 129, 136, 150, 151, 167, 176, 187, 189, 196, 203, 206, 211, 226, 234, 244, 249, 254, 268, 274, 289, 290, 338, 343, 344, 347, 359], "xm": [10, 221], "xmax": [9, 76, 187, 189, 206, 207, 296], "xmin": [9, 76, 187, 189, 206, 207, 296], "xn": 510, "xom": 10, "xor": [148, 150, 151, 152, 154, 155, 156, 159, 164, 207, 208, 210, 247, 308, 344, 348, 611, 615, 623, 989, 1009, 1015, 1043], "xp": [413, 880], "xpreprocessor": 378, "xrang": 1042, "xred": [446, 1052], "xrot": 12, "xrx": 10, "xs_sp": 183, "xsat": 1046, "xscale": [150, 155, 232], "xt": [133, 283, 394, 446, 539, 541, 628, 630, 801, 804, 805, 815, 849, 857, 865, 870, 875, 882, 894, 923, 1052, 1054], "xtick": [2, 4, 6, 9, 28, 32, 38, 42, 44, 48, 49, 50, 56, 57, 60, 80, 83, 96, 119, 121, 125, 151, 152, 153, 157, 180, 187, 193, 210, 226, 234, 244, 245, 246, 249, 258, 259, 274, 287, 296, 302, 311, 326, 339, 342, 344, 698, 1025], "xtick_period": 168, "xtick_start": 168, "xticklabel": [2, 8, 119, 125, 168, 311], "xticks_label": 121, "xticks_po": 121, "xticks_rot": [4, 698, 1025], "xtrain": 296, "xu": [410, 413, 421, 445, 1007, 1049, 1050, 1053, 1054], "xue": [0, 1040, 1041, 1042, 1044, 1045, 1048], "xuefeng": [1053, 1054], "xueqin": [680, 989], "xun": [1046, 1048], "xuniu": 1051, "xval": 162, "xw": [196, 318, 647, 648, 650, 653, 654, 655, 656, 657, 661, 662, 663, 664, 673, 682, 683, 684, 685, 989], "xx": [40, 56, 78, 118, 122, 128, 138, 151, 152, 153, 168, 184, 204, 207, 208, 209, 210, 211, 223, 226, 234, 247, 289, 299, 307, 308, 331, 338, 339, 343, 344, 347, 348, 384], "xx0": [111, 632], "xx1": [111, 632], "xx_coarser": 118, "xxx": 394, "xy": [7, 24, 47, 266, 296, 344, 397, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 665, 682, 683, 684, 685, 687], "xycoord": [7, 24], "xyguo": [1042, 1044], "xytext": [7, 24, 173], "xyz": 379, "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 22, 23, 24, 25, 28, 29, 31, 32, 37, 38, 40, 41, 42, 43, 50, 52, 54, 55, 58, 59, 60, 63, 64, 69, 70, 72, 73, 79, 83, 84, 89, 90, 95, 97, 98, 99, 101, 102, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 218, 219, 220, 223, 227, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 243, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 356, 357, 358, 359, 360, 362, 372, 373, 374, 375, 378, 380, 382, 385, 387, 389, 393, 394, 400, 403, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 486, 488, 499, 501, 503, 506, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 707, 712, 727, 733, 736, 742, 743, 757, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 789, 790, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 925, 930, 931, 953, 955, 956, 957, 961, 964, 967, 980, 982, 983, 984, 985, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1000, 1003, 1007, 1008, 1009, 1014, 1020, 1024, 1025, 1027, 1028, 1031, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "y0": [10, 221], "y1": [10, 89, 111, 221, 510, 717, 994, 995], "y1_label": 5, "y2": [89, 111, 717, 994], "y2_label": 5, "y3": 994, "y_": [229, 244, 248, 249, 295, 382, 413, 415, 638, 649, 670, 681, 730, 731, 739, 765, 784, 785, 788, 989, 993, 1042], "y_1": [110, 358, 359, 413, 993, 997, 1007], "y_2": [110, 358, 359, 997], "y_20": 330, "y_2d": 339, "y_3": 359, "y_30": 331, "y_50": 331, "y_adult": 322, "y_all": [667, 669, 677, 833, 834, 862], "y_ard": 176, "y_ard_std": 176, "y_axi": [95, 205], "y_bia": 112, "y_brr": 176, "y_brr_std": 176, "y_c": [483, 484, 486], "y_calib": 438, "y_california": 162, "y_coclust": 17, "y_convert": 925, "y_cov": 612, "y_cu": 405, "y_decis": [322, 836], "y_dens": 994, "y_diabet": [162, 1024], "y_different_covari": 32, "y_digit": [71, 137, 300, 411, 1024, 1025, 1027], "y_error": [112, 203], "y_errors_larg": 203, "y_filter": 55, "y_fold": 1024, "y_full": [161, 162, 305], "y_full_train": 114, "y_grid_pr": 128, "y_hat": 466, "y_high": 122, "y_i": [113, 318, 346, 407, 417, 984, 985, 989, 993, 997, 1007, 1008, 1009], "y_indic": 876, "y_iri": [264, 1028], "y_isotropic_covari": 32, "y_j": [985, 993, 995, 1003, 1008], "y_k": [413, 1003], "y_kmean": 17, "y_kr": 232, "y_l": 993, "y_label": 215, "y_left_lower_corn": [9, 296, 375, 499], "y_limit": 119, "y_loadings_": [483, 484, 485], "y_loc": 351, "y_log_prob": 836, "y_log_proba": 865, "y_low": 122, "y_lower": [58, 122], "y_mask": 330, "y_max": [29, 56, 111, 118, 128, 138, 151, 215, 231, 299, 307, 331, 343, 344, 636, 638], "y_mean": [154, 155, 158, 612, 645, 646], "y_mean_": 1048, "y_med": 122, "y_min": [29, 56, 111, 118, 128, 138, 151, 231, 299, 307, 331, 343, 344, 636, 638], "y_miss": [161, 162], "y_miss_california": 162, "y_miss_diabet": 162, "y_multirf": 129, "y_n": [993, 997, 1007], "y_new": 54, "y_nois": 112, "y_noisi": 196, "y_norm_squar": 764, "y_normal": 199, "y_np": 405, "y_numer": 925, "y_onehot_test": 268, "y_org": 930, "y_outlier": 179, "y_pareto": 199, "y_plot": [176, 198, 203, 262], "y_plot_ext": 198, "y_po": 353, "y_pred": [2, 4, 5, 11, 23, 28, 30, 32, 42, 55, 60, 68, 73, 109, 122, 123, 125, 130, 143, 167, 197, 199, 204, 207, 212, 214, 215, 226, 227, 236, 253, 255, 257, 262, 290, 294, 302, 310, 329, 330, 362, 380, 387, 394, 417, 433, 440, 466, 483, 484, 485, 550, 553, 555, 557, 558, 559, 561, 563, 565, 566, 568, 569, 571, 612, 632, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 698, 699, 701, 702, 703, 704, 709, 713, 714, 719, 722, 723, 724, 725, 729, 730, 731, 735, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 784, 785, 786, 788, 789, 791, 792, 797, 801, 804, 805, 815, 826, 836, 838, 839, 848, 856, 863, 865, 905, 906, 907, 908, 909, 910, 911, 914, 916, 993, 995, 1025, 1042, 1043, 1045, 1047, 1051, 1052, 1053], "y_pred_ard": 181, "y_pred_bin": 197, "y_pred_chain": 281, "y_pred_empti": [730, 731], "y_pred_enet": 181, "y_pred_ensembl": 281, "y_pred_lasso": 181, "y_pred_lr": 199, "y_pred_nnl": 192, "y_pred_ol": 192, "y_pred_outli": [211, 289, 338], "y_pred_outliers_sgd": 211, "y_pred_ovr": 281, "y_pred_product": 215, "y_pred_qr": 199, "y_pred_ridg": 73, "y_pred_ridge_with_trans_target": 73, "y_pred_scal": 310, "y_pred_seg": 197, "y_pred_test": [211, 289, 338], "y_pred_test_sgd": 211, "y_pred_tot": 215, "y_pred_train": [211, 338], "y_pred_train_sgd": 211, "y_pred_with_": 166, "y_pred_without_": 166, "y_predict": [112, 382, 1036], "y_prob": [23, 25, 152, 439, 440, 710, 836, 862, 993, 1050, 1054], "y_proba": [121, 124, 310, 394, 710, 865, 1054], "y_proba_sc": 310, "y_rand": 331, "y_reconstruct": [483, 484, 485], "y_rf": 129, "y_right": 32, "y_rotations_": [413, 483, 484, 485], "y_sampl": [158, 612], "y_scaler": 8, "y_score": [227, 266, 268, 394, 483, 484, 485, 708, 721, 727, 728, 740, 741, 757, 783, 789, 790, 795, 801, 804, 805, 815, 865, 993, 1042, 1050, 1052, 1054], "y_scores_": [485, 1048], "y_shared_covari": 32, "y_spars": 994, "y_std": [155, 158, 553, 612, 645, 646, 1049], "y_std_": 1048, "y_svr": 232, "y_test": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 83, 84, 98, 109, 112, 114, 116, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 157, 166, 167, 168, 169, 170, 173, 181, 192, 194, 197, 203, 204, 205, 212, 213, 215, 227, 235, 239, 240, 245, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 329, 330, 351, 356, 360, 362, 374, 385, 393, 411, 414, 417, 439, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 915, 916, 993, 995, 996, 1003, 1008, 1024, 1025, 1033, 1036], "y_test_pr": 245, "y_test_predict": 235, "y_test_r": 83, "y_test_tru": 329, "y_thresholds_": [229, 636, 1048], "y_torch": 405, "y_train": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 83, 84, 98, 109, 112, 116, 120, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 212, 213, 227, 235, 239, 240, 245, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 326, 327, 329, 330, 331, 351, 356, 360, 362, 366, 374, 382, 385, 393, 411, 414, 417, 438, 439, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 915, 916, 983, 993, 995, 996, 1001, 1003, 1008, 1024, 1025, 1033], "y_train_": 612, "y_train_ensembl": 114, "y_train_linear": 114, "y_train_noisi": 156, "y_train_pr": 245, "y_train_r": 83, "y_train_valid": 24, "y_tran": 73, "y_transform": 486, "y_true": [2, 11, 17, 30, 57, 73, 109, 130, 152, 197, 207, 215, 236, 246, 253, 329, 380, 433, 439, 440, 466, 483, 484, 485, 553, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 698, 699, 701, 702, 703, 704, 708, 709, 710, 713, 714, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 797, 800, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 993, 1037, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1053], "y_true_bin": 197, "y_true_categor": [710, 993], "y_true_empti": 730, "y_true_mean": 199, "y_true_seg": 197, "y_type_": 872, "y_uniqu": 22, "y_upper": [58, 122], "y_val": [120, 1001], "y_valid": 24, "y_var": 112, "y_vari": 55, "y_weights_": [413, 483, 484, 485, 486], "y_wrong": 32, "yacin": 1044, "yadav": 1050, "yagi": 1048, "yahoo": 10, "yair": [410, 692], "yakov": 1048, "yalburgi": [1043, 1044], "yaman": 1051, "yamanishi": 375, "yamin": 1036, "yaml": 384, "yan": [1040, 1048], "yanchor": 260, "yang": [375, 410, 415, 535, 640, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053], "yangarbit": 1043, "yanhong": 1051, "yanlend": 1042, "yann": [302, 1036, 1038], "yanni": 410, "yannick": [1036, 1038], "yao": [0, 377, 391, 398, 1042, 1043, 1044, 1045, 1052, 1053, 1054], "yap": 1043, "yar": 1050, "yaroslav": [0, 398, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1052, 1053], "yarowski": [317, 902, 1006], "yashika": 1048, "yasmeen": 1049, "yat2016": 410, "yate": [591, 731], "yates2011": 591, "yau": [13, 1039, 1040, 1041, 1042, 1043], "yaxi": [5, 8, 43, 58, 88, 99, 115, 194, 218, 220, 223, 243, 283, 288, 351], "ye": [351, 388, 394, 403, 659, 660, 872, 889, 989], "year": [0, 2, 133, 146, 154, 166, 167, 168, 197, 198, 215, 377, 379, 384, 392, 414, 418, 803, 808, 810, 884, 989, 993, 1014, 1018, 1027], "yearli": 2, "yearremodadd": 130, "yeast": [281, 836], "yee": [1043, 1044], "yegelwel": 1048, "yeh": 1049, "yelit": 1042, "yellow": [32, 90, 339, 994], "yellowbrick": 1013, "yellowgreen": [198, 200, 207, 358], "yen": [1042, 1043], "yenchen": [0, 1042], "yenchenlin": 1042, "yenugula": 1054, "yeo": [305, 309, 881, 893, 1003, 1044, 1050, 1052], "yep": 383, "yerr": [71, 77, 79, 116, 119, 145, 285, 311, 329], "yet": [7, 55, 181, 215, 248, 260, 353, 368, 375, 379, 384, 392, 396, 397, 400, 414, 415, 417, 418, 420, 449, 453, 462, 463, 466, 554, 555, 578, 594, 595, 603, 779, 902, 977, 982, 989, 993, 999, 1007, 1014, 1045, 1053], "yeung": 1042, "ygrid": [9, 296], "yhat": 1011, "yhoo": 10, "yi": [510, 995, 1040, 1044, 1045, 1048], "yichuan": [1042, 1043], "yield": [6, 7, 23, 43, 53, 76, 77, 78, 79, 122, 181, 192, 197, 212, 215, 264, 281, 299, 305, 336, 341, 351, 352, 362, 366, 368, 374, 385, 394, 406, 410, 412, 414, 415, 417, 418, 419, 438, 450, 469, 473, 509, 510, 538, 539, 540, 542, 547, 554, 555, 560, 561, 562, 563, 568, 569, 595, 603, 648, 652, 653, 654, 656, 662, 664, 666, 674, 676, 687, 727, 782, 789, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 832, 836, 839, 897, 898, 936, 943, 945, 946, 951, 985, 987, 989, 990, 993, 1008, 1009, 1024, 1041, 1042, 1044, 1047, 1049], "yifan": 997, "yime": 1044, "ying": [410, 453, 463, 1050], "yinglr": 1046, "yisheng": 1053, "yiyangq": 1050, "yj": [83, 309], "ylabel": [2, 6, 7, 11, 22, 23, 24, 25, 31, 35, 59, 76, 77, 79, 80, 83, 84, 88, 95, 100, 110, 111, 113, 121, 122, 123, 124, 125, 129, 133, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 202, 204, 206, 207, 215, 230, 232, 234, 254, 258, 259, 262, 263, 264, 268, 269, 272, 274, 286, 312, 336, 339, 342, 351, 357, 358, 359, 632, 1024, 1028], "ylim": [10, 22, 24, 31, 35, 42, 56, 60, 76, 77, 78, 95, 111, 112, 119, 122, 129, 132, 150, 151, 167, 184, 186, 187, 189, 190, 191, 203, 206, 207, 211, 226, 234, 244, 249, 254, 258, 262, 268, 272, 274, 289, 290, 338, 343, 344, 347, 351, 359, 1024], "ylorbr_r": 78, "ym": [10, 221], "ymax": [6, 8, 9, 76, 184, 186, 189, 190, 198, 206, 259, 296], "ymazari": 1044, "ymean": 177, "ymin": [9, 76, 184, 186, 189, 190, 198, 206, 259, 296], "yn": [510, 994, 995], "yoav": 1042, "yoch": 1049, "yogendrasingh": 1051, "yojana": 1051, "yokasr": 1046, "yoni": 1039, "yoon": 1047, "yoram": [278, 736], "york": [258, 789, 798, 983, 993, 1005], "yoshihiro": [177, 1046], "yoshiki": [1039, 1042], "yoshizawa": 1044, "yoshua": [862, 863, 1006], "yosshi999": 1050, "yosuk": [1048, 1049], "yotam": 1052, "you": [0, 13, 18, 22, 69, 88, 117, 118, 121, 123, 143, 146, 162, 168, 185, 198, 199, 201, 228, 233, 240, 246, 254, 259, 260, 266, 275, 289, 315, 316, 319, 321, 322, 327, 330, 343, 351, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 394, 397, 400, 403, 405, 407, 408, 409, 410, 411, 412, 414, 417, 418, 419, 421, 422, 427, 438, 444, 445, 447, 448, 450, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 485, 501, 504, 505, 510, 511, 533, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 581, 582, 583, 589, 590, 591, 592, 595, 608, 609, 611, 612, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 700, 701, 786, 799, 800, 802, 803, 804, 805, 806, 808, 810, 816, 817, 819, 820, 821, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 862, 863, 864, 865, 868, 869, 870, 871, 872, 877, 878, 879, 884, 885, 890, 891, 893, 894, 895, 896, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 942, 959, 961, 982, 983, 988, 989, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1009, 1012, 1013, 1017, 1018, 1020, 1021, 1024, 1027, 1029, 1036, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "youden": 993, "younger": 215, "your": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 378, 379, 380, 381, 383, 384, 386, 388, 389, 392, 393, 394, 397, 403, 405, 408, 409, 410, 411, 412, 417, 418, 421, 422, 445, 447, 504, 534, 562, 563, 603, 635, 647, 688, 712, 801, 804, 805, 807, 815, 824, 828, 830, 936, 990, 997, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1022, 1029, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "your_regex_goes_her": 380, "yourlogin": 380, "yourself": [69, 379, 380, 381, 385, 388, 997], "ypred": 1043, "yrsold": 130, "yscale": [150, 155, 197, 232, 351], "ystd": 177, "yt": 876, "ython": 0, "ytick": [4, 9, 28, 32, 38, 42, 44, 48, 49, 50, 56, 57, 60, 80, 83, 96, 123, 142, 151, 152, 153, 157, 180, 187, 193, 210, 226, 234, 244, 245, 246, 249, 254, 274, 287, 296, 302, 326, 339, 344, 351, 1024, 1025], "yticklabel": [254, 351], "ytrain": 296, "ytrue": 1043, "yu": [181, 410, 453, 463, 659, 989, 997, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "yuan": [1050, 1051, 1052, 1053, 1054], "yuchen": [1052, 1053], "yucheng": 1041, "yue": 1048, "yufeng": 1044, "yuichi": 1043, "yuki": 1050, "yule": [451, 458, 779, 780, 781], "yulia": 1046, "yum": 378, "yun": [1051, 1052], "yung": [1039, 1042], "yunqian": 989, "yurchak": [0, 398, 418, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "yuri": [1039, 1041], "yusuf": [1051, 1052], "yusuk": 1049, "yusukenagasaka": 1049, "yutaro": 1048, "yuusuk": 1053, "yuval": [406, 452], "yv": 413, "yve": 1049, "yy": [40, 56, 78, 118, 128, 138, 151, 153, 168, 204, 208, 209, 210, 211, 223, 226, 234, 289, 299, 307, 308, 331, 338, 339, 343, 344, 347, 348], "yy_": 204, "yy_coars": 118, "yy_down": 344, "yy_up": 344, "yzhenman": 1049, "z": [9, 56, 118, 138, 151, 153, 168, 207, 209, 210, 218, 220, 226, 231, 247, 289, 296, 299, 307, 310, 331, 339, 344, 348, 377, 406, 415, 417, 554, 555, 586, 640, 665, 672, 686, 687, 690, 694, 700, 725, 786, 885, 989, 990, 997, 998, 1028, 1051], "z_": 415, "z_1": 989, "z_2": 989, "z_3": 989, "z_4": 989, "z_5": 989, "z_i": [113, 997], "z_l": 997, "z_points_coars": 118, "zablit": 1051, "zac": 1041, "zacchari": 1048, "zach": [1044, 1045, 1050], "zachariah": 1044, "zadrozni": [25, 407, 438, 677], "zaffalon": 259, "zahlii": 1049, "zain": [0, 398, 1050, 1051, 1052, 1053], "zalkow": 1041, "zambelli": 1039, "zamrii": 1046, "zanouda": 1043, "zaxi": [43, 88, 99, 194, 218], "zayd": 1045, "zaytsev": 1039, "zdzieblo": 1053, "zebra": 713, "zedan": 1052, "zeel": 1050, "zeeshan": [1051, 1052], "zempleni": 1050, "zen": 930, "zenin": 1042, "zentrum": 993, "zero": [8, 9, 12, 25, 32, 35, 38, 39, 50, 52, 77, 79, 80, 93, 96, 98, 111, 112, 121, 123, 124, 129, 143, 146, 162, 176, 181, 183, 188, 190, 191, 196, 197, 198, 201, 202, 203, 207, 212, 215, 230, 233, 234, 236, 243, 247, 249, 256, 259, 264, 268, 269, 288, 305, 316, 317, 343, 346, 352, 353, 356, 360, 366, 367, 375, 382, 386, 394, 407, 408, 410, 412, 415, 417, 418, 419, 420, 423, 447, 453, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 488, 498, 509, 510, 524, 527, 528, 532, 533, 536, 538, 539, 540, 541, 543, 544, 548, 549, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 582, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 612, 637, 640, 644, 645, 646, 651, 659, 660, 665, 666, 667, 668, 669, 672, 677, 678, 679, 686, 687, 704, 710, 713, 714, 716, 717, 726, 730, 731, 735, 739, 741, 747, 784, 785, 786, 788, 797, 798, 816, 817, 820, 821, 834, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 868, 875, 877, 878, 880, 881, 882, 884, 885, 891, 892, 893, 894, 898, 905, 913, 914, 915, 916, 940, 968, 979, 983, 989, 991, 992, 995, 996, 997, 1003, 1004, 1005, 1007, 1008, 1009, 1020, 1027, 1029, 1036, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "zero_bas": [488, 509, 510], "zero_class": 234, "zero_divis": [302, 714, 730, 731, 739, 784, 785, 788, 993, 1046, 1048, 1052], "zero_impute_scor": 162, "zero_on": [380, 1037], "zero_one_loss": [380, 405, 704, 735, 993, 1037, 1038, 1039, 1053], "zero_one_scor": 1037, "zerodivisionerror": [1043, 1046, 1052], "zeros_lik": [47, 199, 268], "zeta": 1008, "zeta_i": 1008, "zev": [1042, 1043, 1044, 1045], "zeyusun": 1049, "zha": [690, 694, 990], "zhai_pro": 1041, "zhan": 1051, "zhang": [258, 410, 443, 665, 680, 686, 687, 690, 694, 759, 760, 989, 990, 991, 995, 1007, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1052, 1053, 1054], "zhang02c": 677, "zhang96": [410, 443], "zhao": [1046, 1048, 1049, 1050, 1051], "zhaowei": 1048, "zhaoweiwang": 1049, "zhauniarovich": 1041, "zhdanovich": 1044, "zhechev": 1051, "zhehao": [1049, 1050, 1051, 1052, 1054], "zhenfish": 1050, "zheng": [1042, 1043, 1048], "zhenq": 1044, "zhi": [564, 999], "zhiqe": 1044, "zhou": [564, 640, 901, 999, 1044, 1052, 1053], "zht2007": 185, "zhu": [109, 417, 520, 554, 659, 900], "zhuyi": [1044, 1045], "zhuzhunashvili": [410, 463], "zibulevski": [665, 686, 687], "zichen": 1041, "zielinska": 1047, "zihna": 1049, "ziji": [1044, 1045], "zijlstra": 1039, "zike": 1042, "zimek": 447, "zimmer": [1040, 1050], "zinkov": [204, 1036, 1037, 1038, 1040, 1041], "zip": [2, 3, 6, 7, 10, 11, 22, 24, 29, 30, 32, 35, 36, 38, 40, 43, 47, 53, 61, 62, 73, 84, 90, 93, 94, 97, 101, 102, 103, 111, 113, 120, 130, 131, 155, 161, 164, 167, 168, 169, 182, 188, 189, 197, 205, 206, 218, 230, 236, 244, 248, 249, 253, 257, 261, 262, 263, 266, 268, 283, 286, 288, 291, 299, 300, 301, 307, 309, 310, 311, 330, 336, 346, 347, 357, 378, 417, 829, 1003, 1029, 1032], "zisserman": [639, 985, 993], "zito": [1036, 1049], "ziv": 1042, "zivori": 1042, "zj": [1044, 1045], "zlabel": 1028, "zoj613": 1048, "zolisa": 1048, "zoom": [2, 114, 305], "zoom_in_percentile_rang": 305, "zopa": 1011, "zorder": [10, 56, 95, 127, 138, 150, 158, 187, 195, 219, 221, 229, 232, 243, 316, 322, 344], "zou": [109, 185, 417, 520, 554, 657, 989, 1007], "zou_et_al_criterion_resc": 185, "zoubin": 900, "zoubir": 79, "zouhar": 1049, "zsh": 367, "zuckerberg": 0, "zwinck": 1038, "zxcvbniu": 1043, "zz": 78, "zzrh2009": 417, "z\u00e9": 1044, "\u00e4yr\u00e4m\u00f6": 989, "\u00f3scar": [1040, 1041, 1042, 1043], "\u00f6zer": 1049, "\u0142ukasz": 1051, "\u015fahin": 1050, "\u675c\u4e16\u6a4b": [0, 399], "\u8d75\u4e30": 1050}, "titles": ["About us", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "Computation times", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_log_loss_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.FixedThresholdClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TunedThresholdClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [169, 310, 312, 383, 392, 417, 993], "0": [162, 315, 316, 317, 318, 1009, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "1": [168, 194, 318, 319, 320, 321, 322, 323, 392, 1029, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "10": [65, 1036], "11": 1036, "12": 1036, "13": 1037, "14": 1038, "15": 1039, "16": 1040, "17": 1041, "18": 1042, "19": 1043, "1d": 288, "2": [194, 320, 1029, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "20": [68, 351, 375, 1029, 1044], "2018": 1014, "20newgroup": 212, "21": 1045, "22": [315, 1046], "23": [316, 1047], "24": [317, 1048], "2d": [10, 50, 95, 101, 168], "3": [24, 180, 321, 1029, 1044, 1045, 1050, 1052], "3d": 168, "4": [322, 1036, 1044, 1053], "5": [323, 1009, 1036, 1054], "6": [1036, 1055], "7": 1036, "8": 1036, "9": 1036, "99": 375, "A": [11, 18, 19, 45, 56, 61, 197, 318, 379, 386, 414, 1023, 1026], "And": [222, 395], "In": 266, "NOT": 385, "Of": 369, "One": [189, 211, 268, 318, 338, 414, 999, 1007], "The": [0, 84, 87, 88, 166, 167, 197, 223, 230, 253, 257, 266, 273, 278, 375, 384, 388, 414, 418, 992, 993, 1005, 1027, 1028], "Will": 392, "With": [237, 1029], "__sklearn_is_fitted__": 107, "_safe_index": 921, "abil": 155, "ablat": 236, "about": [0, 167, 392], "absolut": 993, "access": 411, "accuraci": [169, 231, 351, 356, 993], "accuracy_scor": 704, "across": 362, "action": 380, "activ": 327, "ad": 410, "adaboost": [109, 110, 111, 417], "adaboostclassifi": [109, 554], "adaboostregressor": 555, "add": [322, 392], "add_dummy_featur": 887, "addit": [417, 985], "additive_chi2_kernel": 759, "additivechi2sampl": 639, "address": 253, "adjac": 15, "adjust": 35, "adjusted_mutual_info_scor": 705, "adjusted_rand_scor": 706, "advanc": 237, "advantag": 410, "affin": [10, 36, 410, 991], "affinity_propag": 455, "affinitypropag": 441, "agglom": [37, 38, 50, 1028], "agglomer": [49, 52, 1010, 1028], "agglomerativeclust": 442, "aggress": [982, 989], "aic": [186, 989], "algebra": [366, 389], "algorithm": [17, 18, 19, 36, 42, 47, 53, 61, 62, 63, 218, 226, 386, 392, 987, 989, 994, 996, 997, 1001, 1009, 1027], "alias": 388, "align": 990, "all": [259, 268, 319, 397, 1025, 1051, 1052, 1053], "all_displai": 933, "all_estim": 934, "all_funct": 935, "alloc": [13, 415], "alpha": [136, 356], "alpin": 397, "alreadi": 15, "also": [264, 384, 411], "altern": [378, 982], "am": [119, 236], "amount": [271, 982], "an": [45, 57, 107, 162, 178, 186, 293, 315, 319, 392, 418, 982, 999, 1020, 1026, 1027], "anaconda": 397, "analysi": [2, 25, 31, 32, 58, 93, 100, 103, 109, 122, 168, 181, 243, 261, 262, 269, 291, 292, 293, 351, 408, 413, 415, 987, 996, 1010, 1028, 1029], "analyz": [11, 982], "angl": [186, 989], "ani": 392, "anomali": 226, "anova": [143, 342], "api": [107, 239, 240, 315, 318, 320, 367, 382, 387, 394, 400, 405, 408, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1053, 1054, 1055], "appli": 136, "applic": [418, 1028], "approach": [76, 186, 259], "approxim": [164, 172, 173, 231, 283, 317, 408, 412, 985], "ar": [65, 253, 318, 392], "arch": 397, "architectur": 1014, "ard": [181, 989], "ardregress": 645, "arff": 374, "argument": [318, 382, 1047, 1049], "arm64": 388, "arrai": [320, 323, 360, 389, 405, 408, 1020, 1053, 1054, 1055], "arrayfunc": 922, "artifact": 403, "artwork": 0, "as_float_arrai": 923, "ask": 392, "assert": 382, "assert_all_finit": 924, "assign": 410, "assumpt": 55, "atom": [8, 366], "attent": 392, "attribut": [382, 394, 405, 982], "auc": [315, 707], "author": 1036, "automat": [181, 393, 989], "avail": [319, 982, 1032, 1033], "available_if": 954, "averag": [266, 268, 410, 417, 993], "average_precision_scor": 708, "avoid": [362, 411], "aweb": 1018, "ax": 387, "b": 83, "backend": 388, "backward": 380, "bag": [112, 121, 351, 417, 418, 982, 1029], "baggingclassifi": 556, "baggingregressor": 557, "balanc": [258, 993], "balanced_accuracy_scor": 709, "ball": 996, "balltre": [845, 996], "base": [1, 2, 83, 116, 117, 146, 164, 181, 232, 315, 316, 318, 320, 321, 322, 380, 408, 410, 414, 417, 419, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 989, 1001, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "baseestim": [382, 424], "baselin": [173, 197], "basi": [3, 158, 420, 985, 989, 1027], "basic": [156, 215, 393, 412, 420], "batch": [410, 415], "bay": [22, 23, 408, 995], "bayesian": [176, 177, 243, 259, 408, 989, 992], "bayesiangaussianmixtur": 798, "bayesianridg": 646, "befor": [162, 384], "behavior": 254, "behind": 0, "being": 167, "benchmark": [5, 8, 56, 351], "bernoulli": [995, 998], "bernoullinb": 840, "bernoullirbm": 861, "best": [248, 381, 392], "bestofmedia": 1018, "beta": 415, "betawork": 1018, "between": [62, 270, 989], "bia": 112, "bic": [186, 248, 989], "biclust": [16, 17, 18, 164, 376, 406, 408], "biclustermixin": 425, "bigger": 368, "bike": [2, 11, 168], "bin": 1003, "binar": [868, 888, 1003, 1004], "binari": [266, 281, 323, 989, 993], "birch": [40, 410, 443], "birchbox": 1018, "bisect": [41, 410], "bisectingkmean": [319, 444], "blind": 94, "bnp": 1018, "boil": 385, "boltzmann": [302, 998], "bonu": 136, "book": 1018, "boost": [2, 115, 119, 120, 121, 122, 123, 124, 125, 168, 197, 315, 316, 318, 320, 321, 417], "bouldin": 410, "bound": 230, "boundari": [126, 131, 286, 331, 343], "branch": 388, "break": 347, "breast": [170, 377], "brier": 993, "brier_score_loss": 710, "brute": [982, 996], "bug": [379, 380, 384, 1017, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "build": [154, 162, 378, 380, 388, 411, 1029, 1054], "bulk": [8, 366], "bunch": [392, 920], "busi": 253, "c": 386, "c4": 1009, "c5": 1009, "cach": [70, 285, 411], "calcul": [120, 132], "calibr": [21, 22, 23, 24, 25, 122, 164, 197, 407, 408, 438, 439, 440, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "calibratedclassifiercv": 438, "calibration_curv": 440, "calibrationdisplai": 439, "california": 375, "calinski": 410, "calinski_harabasz_scor": 711, "call": [362, 379], "callgrind": 386, "can": [136, 392], "cancer": [170, 377], "candid": [271, 982], "canon": [83, 413], "card": 253, "cardif": 1018, "cardiotocographi": 236, "cart": 1009, "case": [346, 989, 993], "cast": 1020, "categor": [119, 311, 317, 322, 392, 417, 995, 1003], "categori": [2, 319, 321, 1003], "categoricalnb": 841, "caus": 397, "causal": [166, 167], "cautiou": 167, "cca": [83, 483], "center": [93, 1003], "central": 15, "centroid": [294, 996], "chain": [71, 238, 281, 393, 411], "chanc": 35, "chang": [233, 380, 395, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "changelog": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "characterist": [268, 269, 993], "check": [167, 261, 315, 388, 405, 1044, 1045, 1046], "check_arrai": 926, "check_consistent_length": 927, "check_cv": 825, "check_estim": 936, "check_increas": 637, "check_is_fit": [382, 977], "check_memori": 978, "check_random_st": 928, "check_scalar": 929, "check_scor": 712, "check_symmetr": 979, "check_x_i": 925, "checker": 408, "checklist": [380, 384], "chi": [985, 991], "chi2": 605, "chi2_kernel": 760, "choic": 415, "choos": [5, 982, 1020, 1022, 1024], "ci": 380, "circl": 64, "cite": 0, "claim": [197, 215], "class": [24, 35, 109, 111, 132, 180, 206, 211, 262, 266, 268, 318, 338, 341, 394, 408, 409, 414, 417, 418, 993, 996, 999, 1007, 1008, 1036, 1037], "class_likelihood_ratio": 713, "class_weight": [930, 931], "classic": 408, "classif": [6, 24, 27, 28, 30, 31, 68, 89, 137, 150, 151, 152, 153, 157, 164, 213, 234, 262, 265, 266, 269, 281, 286, 294, 302, 315, 325, 330, 343, 351, 376, 408, 420, 989, 993, 994, 996, 997, 1007, 1008, 1009, 1027, 1029], "classifi": [22, 23, 25, 29, 107, 133, 180, 238, 256, 273, 281, 286, 315, 323, 331, 336, 339, 351, 360, 407, 408, 417, 987, 996, 1027, 1029], "classification_report": 714, "classifierchain": [836, 994], "classifiermixin": 427, "classnameprefixfeaturesoutmixin": 426, "clear": 1046, "clear_data_hom": 487, "cli": 1029, "clone": [382, 435], "close": 379, "cloud": 95, "cloudpickl": 403, "cluster": [10, 17, 19, 34, 35, 36, 37, 38, 39, 42, 43, 45, 47, 50, 53, 54, 56, 58, 61, 62, 63, 64, 65, 93, 164, 319, 321, 352, 376, 406, 408, 410, 415, 421, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 715, 716, 993, 1028, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "cluster_optics_dbscan": 456, "cluster_optics_xi": 457, "clustermixin": 428, "co": [17, 19, 406], "co2": 154, "code": [5, 93, 102, 380, 382, 385, 386, 388, 415, 1040, 1041, 1042, 1043, 1044], "coeffici": [146, 167, 176, 201, 202, 410, 993], "cohen": 993, "cohen_kappa_scor": 717, "coin": [44, 45], "color": 46, "column": [68, 69, 238], "column_or_1d": 980, "columntransform": [323, 411, 465], "com": 1018, "combin": [130, 227], "comment": 385, "committe": 395, "common": [167, 362, 394, 405, 418, 993], "commun": [0, 380], "compact": 228, "compar": [24, 40, 42, 60, 76, 83, 115, 129, 142, 173, 176, 183, 199, 204, 226, 232, 259, 267, 291, 300, 305, 311, 392], "comparison": [25, 29, 32, 41, 62, 78, 101, 119, 120, 141, 149, 218, 219, 232, 259, 270, 278, 353, 989], "compat": [315, 380, 382, 405, 408], "compil": [378, 386], "complement": 995, "complementnb": 842, "complet": [235, 410], "completeness_scor": 718, "complex": [5, 228, 238, 258, 261, 328, 356, 366, 989, 996, 997, 1007, 1008, 1009], "compon": [84, 93, 291, 292, 293, 415, 996, 1010, 1028], "compos": [408, 465, 466, 467, 468, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "composit": [67, 164, 408, 411, 982], "compoundkernel": 613, "compress": [12, 51, 366], "comput": [14, 15, 20, 26, 33, 36, 45, 47, 61, 62, 65, 66, 74, 76, 81, 85, 91, 104, 106, 115, 134, 139, 147, 159, 163, 171, 174, 190, 202, 216, 224, 241, 250, 272, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 354, 361, 365, 366, 408, 411, 414, 1000, 1015], "computation": 368, "compute_class_weight": 930, "compute_optics_graph": 458, "compute_sample_weight": 931, "con": 992, "concaten": 72, "concentr": 243, "concept": [394, 989], "conclud": [2, 222], "conclus": [5, 11, 149, 181, 186, 278, 286, 312, 343], "conda": 378, "condit": [168, 317, 1000], "confid": 122, "config_context": 469, "configur": [366, 367], "confus": [252, 410, 993], "confusion_matrix": 719, "confusionmatrixdisplai": [227, 698], "connect": [410, 418, 1028], "consensu": 989, "consensus_scor": 720, "consider": [253, 375], "constant": [197, 253, 983], "constantkernel": 614, "constrain": 1028, "constraint": [125, 127, 320, 322, 410, 417], "construct": 232, "consum": 233, "content": [369, 392, 1020], "conting": 410, "contingency_matrix": 715, "continu": [306, 380], "contribut": [380, 392], "contributor": [0, 379, 380, 395, 1040, 1041, 1042, 1043, 1044], "control": [362, 417, 997], "convent": [381, 1020], "converg": 109, "convergencewarn": 572, "convex": 207, "cookbook": 158, "coordin": 186, "core": [0, 6, 368, 379, 384, 386, 392, 395, 995], "corpu": 418, "correl": [167, 170, 413, 993, 1001], "cosin": 991, "cosine_dist": 761, "cosine_similar": 762, "cost": [253, 356, 1009], "countvector": 589, "covari": [32, 75, 76, 78, 79, 80, 164, 245, 408, 412, 423, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 987, 1044, 1048, 1049, 1050, 1052, 1053], "coverag": [380, 388, 993], "coverage_error": 721, "covertyp": [236, 375], "craft": 385, "crash": 392, "creat": [68, 100, 109, 201, 227, 266, 312, 342, 343, 392], "credit": 253, "criteria": [185, 392, 989, 1009], "criterion": [186, 317, 982, 1007], "cross": [2, 82, 83, 136, 145, 164, 186, 253, 254, 255, 257, 258, 262, 264, 269, 312, 342, 362, 408, 409, 413, 414, 982, 989, 1024], "cross_decomposit": [408, 483, 484, 485, 486, 1046, 1048, 1050, 1052, 1054], "cross_val_predict": 826, "cross_val_scor": [263, 827], "cross_valid": [414, 828], "cubic": 177, "cumul": 993, "curat": 379, "curs": 1027, "curv": [23, 25, 177, 232, 239, 249, 256, 261, 266, 268, 275, 407, 988], "custom": [107, 257, 323, 335, 418, 1003, 1008], "cut": [253, 273], "cv": [254, 362], "cv_results_": 982, "cython": [381, 386, 388], "d": [414, 996], "d2_absolute_error_scor": 722, "d2_log_loss_scor": 723, "d2_pinball_scor": 724, "d2_tweedie_scor": 725, "data": [2, 5, 7, 10, 15, 18, 22, 24, 32, 36, 45, 47, 48, 53, 55, 56, 61, 62, 64, 65, 68, 73, 76, 78, 80, 83, 84, 94, 95, 98, 99, 100, 110, 116, 117, 120, 123, 125, 126, 130, 142, 145, 146, 155, 157, 162, 166, 169, 170, 173, 177, 183, 190, 191, 201, 227, 232, 239, 248, 254, 256, 260, 265, 266, 268, 269, 272, 286, 290, 295, 302, 305, 309, 310, 311, 322, 326, 339, 342, 345, 346, 352, 353, 362, 366, 368, 375, 385, 392, 394, 410, 411, 414, 419, 1003, 1007, 1018, 1020, 1023, 1026, 1028, 1029], "dataconversionwarn": 573, "datadimensionalitywarn": 574, "datafram": [315, 322, 392, 1053], "dataiku": 1018, "datarobot": 1018, "dataset": [1, 2, 3, 6, 11, 22, 23, 25, 30, 42, 56, 60, 68, 83, 86, 87, 88, 89, 90, 93, 101, 109, 115, 118, 119, 130, 136, 149, 151, 153, 154, 156, 158, 164, 166, 167, 168, 176, 179, 181, 186, 197, 199, 206, 215, 218, 219, 226, 231, 236, 237, 253, 257, 265, 266, 273, 278, 281, 312, 330, 331, 336, 343, 351, 357, 372, 373, 374, 375, 376, 377, 385, 392, 408, 420, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 1020, 1026, 1027, 1029, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "davi": 410, "davies_bouldin_scor": 726, "dbscan": [47, 410, 421, 445], "dbscan_clust": 53, "dcg_score": 727, "deal": [392, 408], "debian": 397, "debug": 388, "debugg": 386, "decis": [109, 110, 118, 126, 131, 164, 231, 253, 273, 286, 321, 323, 331, 343, 355, 356, 357, 358, 359, 360, 392, 395, 408, 409, 1009], "decisionboundarydisplai": 632, "decisiontre": 110, "decisiontreeclassifi": 913, "decisiontreeregressor": [317, 914], "decod": 418, "decompos": 415, "decomposit": [82, 83, 92, 93, 112, 164, 376, 408, 413, 415, 422, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 1028, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "decreas": [116, 117, 169], "deep": 392, "default": [233, 290, 380], "defin": [35, 45, 56, 65, 218, 254, 256, 257, 353, 993], "definit": [215, 302, 1000, 1046], "deflat": 83, "delai": 960, "demand": [2, 11], "demo": [18, 19, 36, 45, 47, 53, 56, 61, 63], "demonstr": [55, 263, 308, 326], "dendrogram": 39, "denois": [3, 96], "dens": 183, "densiti": [247, 287, 288, 296, 321, 416, 939, 1008], "densitymixin": 429, "depend": [168, 233, 237, 378, 1000, 1036, 1049, 1050], "deploi": 392, "deploy": 397, "deprec": [233, 380, 408, 932, 1046], "descent": [186, 205, 211, 989, 1007], "descript": 166, "design": 154, "det": [256, 993], "det_curv": 728, "detail": [985, 1007, 1008], "detcurvedisplai": 699, "detect": [7, 226, 236, 256, 289, 290, 993, 999, 1008], "determin": [79, 181, 412, 989, 993], "develop": [0, 105, 107, 164, 233, 378, 381, 382, 383, 384, 387, 388, 389, 982, 1031, 1052], "devianc": [123, 993], "devic": 405, "diabet": [136, 237, 273, 377, 1027], "diagnost": 377, "dict": 418, "dict_learn": 546, "dict_learning_onlin": 547, "dictionari": [48, 93, 96, 102, 415], "dictionarylearn": 532, "dictvector": [353, 582], "did": 392, "diff": 388, "differ": [38, 42, 60, 76, 158, 168, 305, 308, 311, 336, 343, 382, 392, 400, 410, 989, 1027], "digit": [30, 50, 56, 87, 137, 219, 302, 326, 327, 377, 1026], "dimension": [70, 218, 221, 238, 292, 310, 352, 987, 990, 996, 1010, 1027], "direct": 214, "directli": 392, "dirichlet": [13, 415, 992], "discount": 993, "discoveri": [408, 933, 934, 935], "discret": [126, 157, 306, 307, 1003], "discrimin": [31, 32, 408, 987], "discriminant_analysi": [408, 550, 551, 1044, 1045, 1048, 1050, 1051, 1052], "discuss": 379, "disk": 15, "dispatch": 390, "displai": [96, 202, 227, 228, 238, 320, 321, 322, 388, 1033, 1052], "distanc": [78, 323, 408], "distance_metr": 763, "distancemetr": 700, "distort": 96, "distribut": [9, 215, 218, 296, 309, 375, 397, 990, 1003], "diverg": 415, "divid": 319, "do": [385, 392], "document": [0, 6, 17, 164, 317, 318, 350, 351, 352, 380, 1013, 1014, 1017, 1032, 1036, 1039, 1040, 1043, 1044], "doe": 392, "domain": 1013, "donat": 0, "dot": [158, 420], "dotproduct": 615, "down": 385, "download": [15, 130, 162, 374], "drawback": 410, "drop": 119, "dtype": 322, "dummi": [408, 552, 553, 993, 1044, 1045, 1046, 1049, 1050, 1054], "dummyclassifi": 552, "dummyregressor": 553, "dump_svmlight_fil": 488, "dure": 362, "d\u00b2": 993, "each": [266, 271, 351, 982], "earli": [120, 125, 205], "earlier": 1036, "eas": 381, "easi": 380, "effect": [73, 125, 166, 223, 305, 310, 329, 356], "effici": [320, 322, 389], "efficiencywarn": 575, "eigenfac": [4, 93, 1025], "eigenmap": 990, "eigenvector": 15, "elast": [178, 182, 989], "elasticnet": [181, 316, 647], "elasticnetcv": 648, "element": 394, "elimin": [144, 145, 419, 982], "ellipsoid": [32, 244], "ellipt": 999, "ellipticenvelop": 470, "embed": [10, 50, 218, 219, 230, 293, 417, 990], "emeritu": 0, "empir": [59, 79, 230, 412], "empirical_covari": 478, "empiricalcovari": 471, "enable_halving_search_cv": 580, "enable_iterative_imput": 581, "encod": [51, 119, 311, 312, 321, 1003, 1004], "enet_path": 682, "enforc": [1047, 1049], "engin": [2, 11, 169, 1013, 1018], "enhanc": [320, 395, 1013, 1039, 1040, 1041, 1042, 1043], "enrich": 322, "ensembl": [108, 114, 118, 164, 319, 408, 417, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "enthought": 397, "entir": 392, "entri": 1006, "envelop": 999, "environ": [367, 403], "equival": 259, "error": [109, 113, 120, 122, 136, 176, 201, 256, 272, 388, 397, 989, 993], "establish": [62, 173], "estim": [67, 75, 76, 77, 78, 79, 80, 105, 107, 112, 119, 121, 129, 155, 162, 164, 176, 200, 203, 228, 233, 235, 236, 247, 267, 278, 287, 288, 296, 315, 316, 317, 320, 322, 362, 382, 392, 393, 394, 405, 408, 411, 412, 414, 416, 417, 982, 983, 987, 989, 993, 1008, 1013, 1022, 1024, 1026, 1037, 1044, 1045, 1046], "estimate_bandwidth": 459, "estimator_check": [936, 937], "estimator_html_repr": 938, "euclidean_dist": 764, "evalu": [11, 35, 56, 59, 79, 197, 236, 253, 260, 263, 302, 311, 352, 393, 404, 406, 410, 414, 417, 982, 988, 993, 1029], "evernot": 1018, "exact": 415, "exampl": [1, 4, 7, 51, 57, 73, 86, 99, 107, 126, 156, 164, 193, 194, 201, 344, 347, 368, 374, 375, 385, 392, 396, 400, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 427, 430, 433, 434, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 507, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 585, 588, 589, 590, 591, 592, 594, 595, 598, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 629, 631, 632, 633, 634, 635, 636, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 692, 693, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 718, 719, 720, 728, 730, 733, 735, 736, 738, 739, 742, 743, 746, 747, 749, 750, 751, 753, 754, 756, 758, 762, 779, 780, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 862, 863, 864, 865, 866, 869, 870, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 891, 894, 898, 899, 901, 902, 903, 905, 908, 909, 910, 911, 912, 913, 914, 919, 920, 928, 937, 939, 946, 950, 951, 952, 953, 954, 967, 977, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1020, 1026, 1027, 1028, 1033, 1036], "except": [389, 408, 572, 573, 574, 575, 576, 577, 578, 579, 1048, 1052], "execut": [362, 392], "exercis": [135, 136, 137, 138, 164, 1024, 1027, 1029], "exhaust": 982, "exist": 380, "exp": [158, 420], "expans": 176, "expect": [168, 317, 1000], "experi": [0, 35, 379], "experiment": [320, 384, 405, 408, 580, 581, 1052], "explain": 993, "explained_variance_scor": 729, "explicit": 231, "explor": 2, "exponenti": 617, "export": 392, "export_graphviz": 917, "export_text": 918, "expsinesquar": 616, "extend": 989, "extens": [386, 397], "extern": [374, 1012, 1020, 1036, 1045], "extmath": [939, 940, 941, 942, 943, 944], "extract": [13, 72, 96, 215, 260, 352, 366, 368, 408, 418, 1029], "extract_patches_2d": 585, "extrapol": 154, "extratreeclassifi": 915, "extratreeregressor": 916, "extratreesclassifi": 558, "extratreesregressor": 559, "extrem": [385, 417], "f": [141, 993], "f1": 266, "f1_score": 730, "f_classif": 606, "f_regress": 607, "fa": [93, 100], "face": [4, 48, 93, 235, 375, 1018, 1025], "factor": [13, 93, 100, 103, 289, 290, 415, 999], "factoranalysi": 533, "fail": 385, "failur": [166, 982], "fast_logdet": 940, "faster": [320, 417], "fastica": [93, 94, 95, 422, 534], "fbeta_scor": 731, "featur": [2, 11, 49, 52, 72, 98, 114, 116, 117, 119, 123, 125, 127, 128, 140, 142, 144, 145, 146, 164, 169, 170, 173, 176, 191, 194, 215, 231, 237, 260, 302, 306, 307, 310, 311, 315, 317, 318, 342, 351, 352, 366, 368, 380, 384, 400, 408, 411, 417, 418, 419, 983, 1001, 1003, 1010, 1028, 1029, 1039, 1040, 1041, 1042, 1043], "feature_extract": [408, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "feature_select": [408, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "featureagglomer": [410, 446], "featurehash": [353, 583], "featureunion": [411, 864], "fedora": 397, "fetch_20newsgroup": 489, "fetch_20newsgroups_vector": 490, "fetch_california_h": 491, "fetch_covtyp": 492, "fetch_kddcup99": 493, "fetch_lfw_pair": 494, "fetch_lfw_peopl": 495, "fetch_olivetti_fac": 496, "fetch_openml": [320, 497], "fetch_rcv1": 498, "fetch_species_distribut": 499, "file": [15, 397, 418, 1029], "final": [55, 149], "find": 996, "first": [7, 35, 380], "fit": [18, 24, 55, 94, 100, 116, 117, 122, 123, 154, 176, 177, 178, 191, 194, 199, 203, 266, 281, 290, 295, 312, 345, 362, 382, 393, 400, 405, 408, 417, 995, 999, 1020], "fitfailedwarn": 576, "fix": [35, 384, 1036, 1039, 1040, 1041, 1042, 1043, 1049], "fixedthresholdclassifi": [323, 800], "flag": 388, "flexibl": [318, 983], "fold": [388, 414], "footprint": 51, "forc": [982, 996], "forecast": [11, 154], "forest": [113, 115, 116, 117, 129, 169, 170, 236, 239, 322, 375, 417, 999], "forg": 378, "format": [374, 385, 392, 994], "formul": [406, 417, 987, 996, 1007, 1008, 1009], "four": 64, "fowlk": 410, "fowlkes_mallows_scor": 732, "framework": 1013, "free": 156, "freebsd": 378, "freez": 392, "french": 197, "frequenc": [215, 1029], "frequent": 392, "frequentist": 259, "frobeniu": 415, "from": [10, 96, 146, 169, 311, 315, 367, 374, 378, 392, 408, 418, 993, 1020, 1027, 1028, 1029, 1046], "from_estim": [439, 632, 633, 698, 699, 701, 702, 703, 807, 824], "from_predict": [698, 701, 702, 703], "fruit": 379, "fulli": 166, "function": [8, 32, 158, 187, 201, 202, 207, 219, 254, 272, 273, 317, 342, 353, 389, 408, 414, 417, 420, 985, 989, 993, 1008, 1027, 1053], "functiontransform": 869, "fund": 0, "futur": 392, "futurewarn": 1046, "gain": [253, 993], "gamma": [215, 321, 993], "gammaregressor": 649, "gaussian": [22, 23, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 242, 243, 244, 247, 248, 249, 305, 408, 420, 992, 995, 1003, 1005], "gaussian_process": [408, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "gaussianmixtur": 799, "gaussiannb": 843, "gaussianprocessclassifi": 611, "gaussianprocessregressor": 612, "gaussianrandomproject": 897, "gdb": 386, "gen_batch": 945, "gen_even_slic": 946, "gener": [11, 18, 22, 32, 36, 45, 47, 53, 55, 61, 62, 64, 65, 76, 78, 80, 89, 90, 94, 95, 96, 116, 126, 142, 145, 149, 155, 156, 158, 164, 175, 176, 177, 181, 191, 197, 199, 232, 248, 256, 272, 290, 295, 302, 316, 326, 345, 346, 362, 376, 380, 394, 408, 415, 417, 989, 1003, 1014, 1024], "genericunivariateselect": 593, "german": 253, "get": [362, 392, 393], "get_config": 627, "get_data_hom": 500, "get_feature_names_out": 319, "get_param": 382, "get_routing_for_object": 952, "get_scor": 733, "get_scorer_nam": 734, "git": 380, "github": 380, "gitter": 1017, "glm": 408, "glossari": 394, "gmm": [245, 246], "goal": 1014, "good": [380, 385], "govern": [0, 395], "gpc": [150, 151, 152, 153, 420], "gperftool": 386, "gpr": [154, 155, 420], "gprof": 386, "gpu": 392, "gradient": [2, 115, 119, 120, 121, 122, 123, 124, 125, 168, 197, 205, 211, 315, 316, 318, 320, 321, 417, 989, 1007], "gradientboostingclassifi": [417, 560], "gradientboostingregressor": [417, 561], "gram": 178, "graph": [10, 315, 389, 392, 408, 410, 418, 947], "graphic": [392, 998], "graphical_lasso": 479, "graphicallasso": 472, "graphicallassocv": 473, "greek": 44, "grid": [238, 257, 259, 267, 270, 982, 1024, 1029], "grid_to_graph": 586, "gridsearchcv": [70, 136, 263, 801], "ground": [35, 176], "group": [319, 321, 414, 1018, 1028], "groupkfold": 802, "groupshufflesplit": 803, "grow": 35, "guid": [383, 1031], "guidelin": [380, 382], "halv": [270, 271, 317, 982], "halvinggridsearchcv": 804, "halvingrandomsearchcv": 805, "ham": 993, "hamming_loss": 735, "hand": 30, "handl": [170, 408, 983], "handwritten": [56, 219, 377], "harabasz": 410, "hard": 417, "has_fit_paramet": 981, "hash": [128, 389, 418], "hashingvector": [352, 590], "haversine_dist": 765, "hdbscan": [53, 321, 410, 447], "help": [379, 380, 392], "helper": [8, 158, 219, 389], "here": [360, 1029], "hessian": 990, "heterogen": [68, 411], "hierarch": [39, 45, 60, 65, 321, 410, 1028], "hierarchi": 410, "high": 1027, "higher": 367, "highlight": [164, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 1036, 1039, 1040, 1043, 1044], "hing": 993, "hinge_loss": 736, "histgradientboost": [317, 322], "histgradientboostingclassifi": [417, 562], "histgradientboostingregressor": [319, 563], "histogram": [115, 125, 316, 318, 320, 416, 417], "histori": [0, 1034], "hmm": 392, "hoc": 273, "hole": 222, "home": 259, "homebrew": 378, "homogen": 410, "homogeneity_completeness_v_measur": 737, "homogeneity_scor": 738, "hot": 119, "hour": 11, "hourli": 166, "hous": [119, 236, 375], "how": [136, 362, 380, 386, 392], "howaboutw": 1018, "html": [228, 382], "huber": 989, "huberregressor": [179, 650], "hug": 1018, "hyper": [122, 257, 317, 408, 982], "hyperparamet": [53, 154, 155, 260, 267, 278, 618], "hyperplan": [209, 340, 341], "i": [323, 360, 385, 392, 414, 1018], "ic": [168, 1000], "ica": [94, 415, 1028], "id3": 1009, "identif": 1029, "idf": 418, "illustr": [70, 153, 158, 293, 420], "imag": [3, 45, 48, 51, 64, 96, 374, 392, 408, 418, 584, 585, 586, 587, 588], "img_to_graph": 587, "impact": [2, 59, 1051, 1052, 1053, 1054], "implement": [107, 183, 392, 993, 996, 1007, 1008], "import": [116, 117, 123, 146, 169, 170, 231, 278, 310, 315, 409, 417, 1001], "improv": [316, 317, 318, 319, 320, 322, 323, 379, 380, 1039, 1040], "impur": [116, 117, 169, 356, 1001], "imput": [160, 161, 162, 164, 315, 323, 408, 628, 629, 630, 631, 983, 1003, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "includ": 392, "inclus": 392, "incom": 166, "inconsist": 362, "inconsistentversionwarn": 577, "incr_mean_variance_axi": 968, "increment": [97, 368, 415], "incrementalpca": 535, "independ": [93, 415, 1028], "index": [410, 948], "indic": 254, "individu": [133, 168, 317, 1000], "induct": 54, "infer": 166, "influenc": [5, 8, 366], "infonea": 1018, "inform": [141, 162, 185, 186, 384, 408, 410, 982, 989], "infrastructur": 0, "infrequ": [319, 321, 1003], "init": 382, "initi": [57, 59, 246], "inplace_column_scal": 969, "inplace_csr_column_scal": 970, "inplace_csr_row_normalize_l1": 975, "inplace_csr_row_normalize_l2": 976, "inplace_row_scal": 971, "inplace_swap_column": 972, "inplace_swap_row": 973, "input": [366, 382, 405, 408, 410, 1003], "inria": 1018, "inspect": [164, 165, 396, 408, 632, 633, 634, 635, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "instal": [378, 397], "instanc": [362, 368], "instanti": 382, "instead": 253, "instruct": 378, "insur": 215, "integr": 380, "intel": 397, "interact": [2, 168, 320, 417, 1027], "interfac": [400, 408], "intern": [312, 409], "internet": 10, "interoper": 1013, "interpol": 198, "interpret": [154, 167, 201, 236, 281, 415, 417], "interv": 122, "introduc": 240, "introduct": [990, 1020], "introductori": 156, "invari": [53, 262], "invers": [80, 412, 1005], "inverse_transform": 1028, "io": 403, "iri": [88, 99, 101, 118, 151, 206, 331, 336, 357, 377, 420, 1026], "iris": 1027, "is_classifi": 436, "is_multilabel": 955, "is_regressor": 437, "iso": [152, 266], "isol": 999, "isolationforest": [126, 564], "isomap": [218, 219, 689, 990], "isoton": [229, 407, 408, 636, 637, 638, 984, 1044, 1045, 1046, 1048, 1050, 1051], "isotonic_regress": 638, "isotonicregress": 636, "issu": [379, 380], "iter": [162, 271, 414, 982], "iterativeimput": [161, 628, 983], "j": 1018, "jaccard": 993, "jaccard_scor": 739, "job": 392, "joblib": [367, 386, 403], "johnson": [230, 1005], "johnson_lindenstrauss_min_dim": 899, "joint": 191, "k": [41, 43, 46, 55, 56, 57, 59, 62, 65, 83, 286, 310, 352, 410, 414, 993, 996, 1003, 1027, 1028], "k_mean": 460, "kappa": 993, "kbinsdiscret": [306, 308, 870], "kcachegrind": 386, "kddcup": 375, "kddcup99": 236, "kdtree": [846, 996], "keep": 983, "kei": 403, "kernel": [2, 3, 98, 149, 154, 155, 157, 158, 164, 172, 173, 231, 232, 287, 288, 296, 317, 335, 338, 343, 345, 408, 415, 416, 420, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 985, 986, 991, 1003, 1008, 1027], "kernel_approxim": [408, 639, 640, 641, 642, 643, 1046, 1048, 1049, 1050, 1051, 1052], "kernel_metr": 766, "kernel_ridg": [408, 644, 1053], "kernelcenter": 871, "kerneldens": 850, "kernelpca": [98, 536], "kernelridg": 644, "keyword": [318, 1047, 1049], "kfold": 806, "kmean": [58, 62, 316, 448], "kmeans_plusplu": 461, "kneighbors_graph": 858, "kneighborsclassifi": 847, "kneighborsregressor": 848, "kneighborstransform": 849, "knn": [162, 315], "knnimput": 629, "knowledg": 381, "known": [384, 1044, 1045], "kpca": 415, "l": 177, "l1": [12, 181, 188, 190, 213, 346, 419], "l1_min_c": 912, "l2": [201, 346], "label": [35, 266, 326, 327, 328, 375, 376, 408, 410, 414, 417, 993, 1004, 1006], "label_binar": 889, "label_ranking_average_precision_scor": 740, "label_ranking_loss": 741, "labelbinar": [872, 1004], "labelencod": 873, "labelpropag": 900, "labelspread": 901, "lag": 11, "languag": 1029, "laplacian": 991, "laplacian_kernel": 767, "lar": [184, 651, 989], "larg": 418, "lars_path": 683, "lars_path_gram": 684, "larscv": 652, "lasso": [12, 181, 182, 183, 184, 185, 186, 191, 316, 653, 989], "lasso_path": 685, "lassocv": 654, "lassolar": 655, "lassolars": 657, "lassolarscv": 656, "latenc": [8, 366], "latent": [13, 83, 415], "latentdirichletalloc": 537, "latest": 397, "layer": [168, 299, 997], "lda": [32, 101, 415, 987], "leakag": 362, "learn": [0, 3, 10, 48, 93, 96, 148, 164, 166, 167, 168, 173, 217, 218, 219, 220, 232, 233, 253, 254, 261, 293, 300, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 365, 366, 368, 376, 378, 380, 381, 382, 384, 385, 392, 395, 397, 408, 415, 417, 988, 990, 998, 1006, 1011, 1013, 1014, 1016, 1018, 1020, 1021, 1023, 1026, 1027, 1028, 1029, 1030, 1032], "learner": [109, 417], "learning_curv": 829, "learningcurvedisplai": 807, "least": [84, 122, 186, 192, 195, 989], "leav": [356, 414, 989], "leaveonegroupout": 808, "leaveoneout": 809, "leavepgroupsout": 810, "leavepout": 811, "ledoit": [31, 77, 412], "ledoit_wolf": 480, "ledoit_wolf_shrinkag": 481, "ledoitwolf": [76, 474], "lemma": 1005, "length": [126, 397], "lesson": [166, 167], "level": [154, 155, 367, 410, 417], "liabil": 197, "librari": [366, 367], "libsvm": 374, "likelihood": [76, 176, 177, 262, 993, 998], "limit": [119, 149, 366, 397, 403, 418], "lindenstrauss": [230, 1005], "line": [136, 152], "linear": [2, 23, 31, 32, 122, 149, 164, 167, 175, 176, 193, 197, 200, 203, 218, 219, 231, 316, 338, 343, 345, 366, 389, 392, 408, 987, 989, 990, 991, 1003, 1027], "linear_kernel": 768, "linear_model": [408, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "lineardiscriminantanalysi": [320, 550], "linearregress": [199, 658], "linearsvc": [337, 905], "linearsvr": 906, "link": [366, 374, 993], "linkag": [60, 410], "linnerrud": 377, "linux": [378, 392, 397], "list": [35, 1017], "loa": 154, "load": [3, 5, 15, 48, 56, 88, 115, 117, 119, 123, 136, 146, 169, 190, 215, 219, 227, 231, 239, 260, 268, 269, 281, 286, 310, 311, 339, 342, 351, 352, 353, 373, 374, 385, 392, 418, 1020, 1028, 1029], "load_breast_canc": 501, "load_diabet": 502, "load_digit": 503, "load_fil": 504, "load_iri": 505, "load_linnerud": 506, "load_sample_imag": [507, 508], "load_svmlight_fil": [509, 510], "load_win": 511, "loader": 408, "local": [218, 219, 289, 290, 990, 999], "locally_linear_embed": 694, "locallylinearembed": 690, "localoutlierfactor": 851, "lof": [289, 290], "log": [176, 177, 993], "log_loss": 742, "logarithm": 993, "logist": [71, 180, 187, 188, 189, 190, 212, 213, 989, 1027], "logisticregress": [281, 659], "logisticregressioncv": 660, "loo": 414, "look": [11, 232, 345], "loss": [125, 197, 207, 316, 319, 321, 417, 993, 1053], "lot": 392, "love": 1018, "low": [410, 417, 419], "lower": 367, "lpo": 414, "lsa": 352, "mac": 397, "machin": [148, 164, 166, 167, 168, 302, 334, 388, 408, 998, 1008, 1020, 1027], "machinali": 1018, "maco": 378, "macport": 397, "macro": 268, "mahalanobi": 78, "mail": 1017, "main": [6, 197], "maintain": [0, 380, 384, 403], "major": [384, 417, 1044, 1045], "make": [130, 133, 162, 380, 384, 395], "make_biclust": 512, "make_blob": [385, 513], "make_checkerboard": 514, "make_circl": 515, "make_classif": [385, 516], "make_column_selector": 467, "make_column_transform": 468, "make_friedman1": 517, "make_friedman2": 518, "make_friedman3": 519, "make_gaussian_quantil": 520, "make_hastie_10_2": 521, "make_low_rank_matrix": 522, "make_moon": 523, "make_multilabel_classif": 524, "make_pipelin": 866, "make_regress": [385, 525], "make_s_curv": 526, "make_scor": 743, "make_sparse_coded_sign": 527, "make_sparse_spd_matrix": 528, "make_sparse_uncorrel": 529, "make_spd_matrix": 530, "make_swiss_rol": 531, "make_union": 867, "mallow": 410, "manag": [367, 397], "manhattan_dist": 769, "mani": [254, 320, 367, 392, 1053, 1054], "manifold": [164, 217, 218, 219, 220, 376, 408, 689, 690, 691, 692, 693, 694, 695, 696, 697, 990, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "manual": [253, 409], "map": [231, 309, 1003], "mar": 1018, "margin": [176, 177, 209, 340, 344], "mark": 983, "markdown": 385, "market": [10, 1025], "match": [196, 989], "matern": 620, "mathemat": [406, 408, 417, 985, 987, 996, 1000, 1007, 1008, 1009], "matric": [389, 408, 1003], "matrix": [13, 15, 157, 178, 252, 408, 410, 415, 993], "matter": 167, "matthew": 993, "matthews_corrcoef": 744, "mat\u00e9rn": [158, 420], "max": [76, 993], "max_error": 745, "maxabs_scal": 890, "maxabsscal": [305, 874], "maximum": [209, 340, 998], "md": [691, 990], "mdi": [117, 169], "mean": [41, 43, 46, 55, 56, 57, 59, 61, 62, 116, 117, 162, 169, 201, 352, 410, 993, 1003, 1028], "mean_absolute_error": 746, "mean_absolute_percentage_error": 747, "mean_gamma_devi": 748, "mean_pinball_loss": 749, "mean_poisson_devi": 750, "mean_shift": 462, "mean_squared_error": 751, "mean_squared_log_error": 752, "mean_tweedie_devi": 753, "mean_variance_axi": 974, "meanshift": [61, 449], "measur": [130, 262, 410, 993], "media": 1017, "median": [989, 993], "median_absolute_error": 754, "member": 379, "memori": [51, 322, 366, 386, 388], "merg": 384, "meson": [388, 1054], "messag": 259, "meta": [129, 233, 278, 317, 408, 417], "metadata": [233, 321, 322, 351, 394, 400, 408, 1053, 1054, 1055], "metadata_rout": [949, 950, 951, 952, 953], "metadatarequest": 949, "metadatarout": 950, "metaestim": 954, "metaestimatormixin": 430, "method": [60, 72, 83, 108, 149, 164, 218, 220, 246, 277, 280, 394, 408, 410, 985, 999, 1000, 1028], "methodmap": 951, "metric": [35, 38, 122, 253, 263, 405, 408, 410, 414, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 982, 991, 993, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "micro": [266, 268], "min_cluster_s": 53, "min_po": 922, "min_resourc": 982, "min_sampl": 53, "mincovdet": 475, "mini": [410, 415], "minibatchdictionarylearn": 538, "minibatchkmean": [40, 62, 93, 450], "minibatchnmf": [319, 539], "minibatchsparsepca": [93, 415, 540], "minim": [385, 1009, 1049, 1050], "minimum": [79, 412], "minmax_scal": 891, "minmaxscal": [305, 875], "minor": 384, "misc": 1036, "miscellan": [164, 225, 408, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "mislead": 1001, "miss": [125, 160, 161, 162, 164, 315, 321, 322, 417, 983, 1003, 1009], "missingind": 630, "mix": 69, "mixin": 382, "mixtur": [164, 242, 243, 244, 247, 248, 249, 408, 798, 799, 992, 1044, 1045, 1049, 1050, 1052, 1054], "mlp": 301, "mlpclassifi": [300, 862], "mlpregressor": 863, "mnist": [213, 301], "mode": [83, 366], "model": [2, 5, 9, 11, 55, 73, 83, 94, 100, 115, 116, 117, 119, 120, 123, 126, 145, 146, 149, 154, 164, 167, 168, 169, 173, 175, 176, 181, 185, 186, 191, 197, 200, 215, 227, 232, 236, 237, 242, 244, 248, 249, 251, 253, 258, 259, 261, 266, 281, 290, 295, 302, 310, 316, 318, 322, 343, 345, 351, 366, 382, 392, 393, 395, 403, 404, 408, 414, 982, 988, 989, 992, 993, 995, 997, 998, 1020, 1024, 1027, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "model_select": [321, 408, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "modifi": 990, "modul": [1036, 1044, 1045, 1051, 1052, 1053, 1054], "mona": 154, "monitor": 380, "monoton": [125, 127, 322, 417], "more": [318, 392, 997], "morgan": 1018, "most": 326, "motor": 197, "movi": 1029, "mp": 405, "much": 136, "multi": [53, 109, 129, 168, 191, 206, 221, 235, 263, 266, 299, 359, 386, 408, 989, 990, 993, 997, 1008, 1009], "multiclass": [164, 212, 268, 277, 278, 315, 389, 407, 408, 833, 834, 835, 955, 956, 957, 993, 994, 1020, 1027, 1045, 1048, 1049, 1050], "multicollinear": 170, "multidimension": 218, "multilabel": [90, 234, 281, 376, 389, 408, 993, 994, 1020], "multilabel_confusion_matrix": 755, "multilabelbinar": [876, 1004], "multinomi": [189, 213, 989, 995], "multinomialnb": 844, "multioutput": [164, 280, 408, 836, 837, 838, 839, 994, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054], "multioutputclassifi": [837, 994], "multioutputregressor": [838, 994], "multipl": [72, 238, 263, 362, 387, 414, 982, 983, 993, 1044, 1045], "multitaskelasticnet": 661, "multitaskelasticnetcv": 662, "multitasklasso": 663, "multitasklassocv": 664, "multivari": [83, 983], "murmurhash3_32": 958, "mutual": [141, 410], "mutual_info_classif": 608, "mutual_info_regress": 609, "mutual_info_scor": 756, "my": 392, "n_featur": 8, "n_job": 392, "naiv": [2, 11, 22, 23, 408, 995], "naive_bay": [408, 840, 841, 842, 843, 844, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "name": [127, 318, 392, 411], "nan": 983, "nan_euclidean_dist": 770, "nativ": [119, 311, 315, 317, 322], "ndcg_score": 757, "nearest": [65, 164, 283, 284, 285, 286, 291, 294, 295, 315, 408, 983, 996, 1027], "nearestcentroid": 852, "nearestneighbor": 853, "necessari": 385, "need": 392, "neg": [13, 93, 146, 192, 415, 989], "neighbor": [65, 164, 218, 283, 284, 285, 286, 291, 295, 310, 315, 408, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 983, 990, 996, 1027, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "neighborhood": [291, 292, 293, 996], "neighborhoodcomponentsanalysi": 854, "nest": [264, 411, 1024], "net": [178, 182, 989], "netbsd": 397, "network": [164, 168, 298, 408, 997, 998], "neural": [164, 168, 298, 408, 997, 998], "neural_network": [408, 861, 862, 863, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "new": [315, 317, 318, 320, 321, 380, 392, 1012, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "newsgroup": [68, 351, 375, 1029], "next": [11, 393], "nightli": 378, "nmf": [93, 319, 415, 541], "nnmf": 415, "nois": [155, 156, 177], "noisi": [96, 156, 201], "non": [2, 13, 93, 122, 192, 197, 201, 218, 264, 323, 338, 345, 415, 989, 1003], "non_negative_factor": 548, "none": 362, "norm": 415, "normal": [31, 173, 197, 305, 309, 408, 877, 892, 993, 1003], "normalized_mutual_info_scor": 758, "note": [368, 405, 409, 414], "notfittederror": 578, "novelti": [289, 999, 1008], "now": [315, 318, 1046], "number": [35, 58, 119, 125, 145, 271, 366, 382, 982, 983], "numer": [167, 323, 367, 382], "numpi": [367, 385], "nusvc": 907, "nusvr": 908, "nystroem": [640, 985], "oa": [31, 76, 77, 423, 476], "object": [227, 254, 382, 392, 408, 982, 993, 1026, 1033], "observ": [166, 1027, 1028], "obtain": [392, 414], "occurr": 1029, "off": [253, 273, 989], "okcupid": 1018, "older": 1036, "olivetti": 375, "omp": 989, "one": [84, 119, 237, 989, 993], "oneclasssvm": 909, "onehotencod": [319, 878], "onetoonefeaturemixin": 431, "onevsoneclassifi": [833, 994], "onevsrestclassifi": [281, 834, 994], "onli": [194, 214, 1047, 1049], "onlin": [48, 204, 318, 319, 1007], "onnx": 403, "oob": 113, "open": 1025, "openml": [3, 311, 315, 374], "openmp": [367, 381], "oper": [268, 269, 379, 389, 408, 420, 993], "optic": [63, 377, 410, 451], "optim": [386, 408, 982], "optimis": 155, "option": [382, 409], "oracl": 412, "ordin": 119, "ordinalencod": [321, 879], "ordinari": [195, 989], "org": [374, 384, 1018], "origin": [51, 98, 265, 293, 305], "orthogon": [196, 989], "orthogonal_mp": 686, "orthogonal_mp_gram": 687, "orthogonalmatchingpursuit": 665, "orthogonalmatchingpursuitcv": 666, "osx": [392, 397], "other": [311, 374, 392, 417, 1013, 1036], "otto": 1018, "our": [56, 254, 257, 273, 380], "out": [6, 121, 368, 388, 414, 982, 989, 995], "outdat": 388, "outlier": [7, 179, 214, 226, 236, 289, 290, 305, 408, 989, 999, 1003], "outliermixin": 432, "outlin": 1001, "output": [129, 235, 305, 320, 322, 359, 1009, 1027], "outputcodeclassifi": [835, 994], "over": 238, "overfit": 274, "overhead": 366, "oversubscript": 367, "overview": [278, 387, 403, 410, 999], "ovo": 268, "ovr": 268, "own": [382, 392, 993], "p": [414, 1018], "packag": [231, 1013, 1048], "pair": 410, "pair_confusion_matrix": 716, "paired_cosine_dist": 771, "paired_dist": 772, "paired_euclidean_dist": 773, "paired_manhattan_dist": 774, "pairwis": [2, 259, 323, 408, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 991], "pairwise_dist": 779, "pairwise_distances_argmin": 780, "pairwise_distances_argmin_min": 781, "pairwise_distances_chunk": 782, "pairwise_kernel": 775, "pairwisekernel": 621, "panda": [320, 385, 392], "parallel": [117, 367, 386, 408, 410, 417, 959, 960, 982], "parallel_backend": 961, "paramet": [5, 76, 122, 257, 317, 339, 346, 380, 382, 393, 394, 408, 411, 417, 982, 989, 993, 1008, 1020, 1024, 1029], "parametergrid": 812, "parametersampl": 813, "parametr": 998, "parametrize_with_check": 937, "pariba": 1018, "paristech": 1018, "pariti": 62, "parser": [320, 374], "part": [48, 419], "parti": [197, 233, 397], "partial": [84, 166, 168, 237, 1000], "partial_depend": 634, "partialdependencedisplai": 633, "partit": 173, "passiv": 989, "passiveaggressiveclassifi": 667, "passiveaggressiveregressor": 668, "past": 0, "patch": [96, 418], "patchextractor": 584, "path": [126, 184, 190, 202, 360, 397], "pattern": 103, "pca": [3, 56, 71, 88, 93, 94, 97, 98, 99, 100, 101, 310, 322, 323, 415, 542, 1010, 1028], "pdp": 168, "peerindex": 1018, "penalti": [188, 208, 346], "peopl": [0, 392, 1036, 1037, 1038, 1039], "per": 352, "percentag": 993, "percentil": 342, "perceptron": [168, 299, 669, 989, 997], "perform": [35, 41, 262, 310, 317, 319, 323, 326, 352, 366, 380, 381, 410, 414, 1029], "period": [2, 198], "permiss": 392, "permut": [116, 169, 170, 265, 315, 414, 1001], "permutation_import": 635, "permutation_test_scor": 830, "perplex": 223, "persist": 403, "phimeca": 1018, "pickl": 403, "pictur": 44, "pinbal": 993, "pipelin": [67, 68, 70, 71, 130, 143, 164, 167, 228, 233, 238, 260, 311, 342, 382, 392, 393, 408, 411, 419, 864, 865, 866, 867, 1010, 1025, 1029, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "pitfal": [167, 362], "pixel": 117, "pl": 83, "plai": 342, "plan": 392, "plant": 377, "platform": [378, 388, 397], "plot": [5, 6, 8, 18, 22, 28, 32, 36, 39, 45, 47, 48, 55, 61, 62, 64, 65, 76, 80, 83, 88, 89, 90, 94, 95, 110, 115, 118, 123, 126, 130, 131, 132, 133, 136, 145, 162, 168, 176, 177, 181, 189, 190, 191, 201, 202, 206, 219, 227, 231, 236, 237, 239, 248, 255, 256, 261, 263, 266, 268, 272, 275, 281, 290, 302, 311, 315, 317, 318, 326, 336, 337, 342, 343, 351, 357, 387, 408, 988, 1000, 1033], "plot_tre": 919, "pls1": 83, "pls2": 83, "plscanon": [413, 484], "plsregress": [413, 485], "plssvd": [413, 486], "point": [95, 253, 273, 293, 403], "poisson": [197, 215, 316, 317, 993], "poissonregressor": 670, "polar": [11, 322], "polynomi": [2, 173, 176, 177, 198, 343, 985, 989, 991, 1003, 1027], "polynomial_kernel": 776, "polynomialcountsketch": [317, 641], "polynomialfeatur": 880, "posit": [93, 318], "possibl": [55, 385], "post": [253, 262, 273, 356, 408, 409], "post1": 1046, "posterior": 158, "power": [84, 197], "power_transform": 893, "powertransform": [305, 881], "pr": [379, 384], "practic": [259, 362, 381, 385, 990, 997, 1007, 1008, 1009], "pre": [262, 362, 393], "precis": [266, 993], "precision_recall_curv": 783, "precision_recall_fscore_support": 784, "precision_scor": 785, "precisionrecalldisplai": [227, 701], "precomput": [102, 178, 315, 415], "predefin": [414, 993], "predefinedsplit": 814, "predict": [2, 8, 11, 22, 84, 110, 122, 133, 150, 166, 177, 197, 232, 253, 255, 266, 326, 366, 392, 393, 409, 414, 420, 993, 1004, 1020, 1027], "predictionerrordisplai": 702, "predictor": 130, "premium": 215, "prepar": [93, 110, 120, 125, 173, 218, 268, 269, 310, 339, 384], "preprocess": [123, 130, 164, 167, 168, 236, 238, 304, 321, 353, 362, 392, 408, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 1003, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "preprocessor": 168, "preserv": 388, "preval": 262, "princip": [15, 84, 415, 1010, 1028], "prior": [12, 158, 243], "privat": 1053, "pro": 992, "probabilist": [100, 150, 415, 420], "probabl": [22, 23, 24, 28, 132, 152, 407, 408, 417, 1008], "problem": [167, 253, 415, 1008, 1009, 1020, 1025, 1027, 1028], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 167, 362, 395, 408, 420, 992, 1023], "process_rout": 953, "processor": 393, "product": [158, 215, 388, 392, 403, 420, 622], "profil": 386, "project": [0, 84, 98, 101, 230, 382, 392, 408, 1005, 1010, 1013], "pronounc": 392, "propag": [10, 36, 326, 327, 328, 410, 1006], "proper": [11, 154], "properti": 394, "propos": 395, "provid": 385, "prune": [315, 356, 1009], "public": 1046, "publica": 1018, "pull": [380, 384, 388, 392], "pure": 215, "purpos": [201, 353, 1014], "pursuit": [196, 989], "put": 1025, "pypi": 392, "pytest": 388, "python": [231, 367, 386, 1012, 1013], "pytorch": 405, "qda": [32, 987], "quadradt": 158, "quadrat": [32, 420, 987], "quadraticdiscriminantanalysi": 551, "qualit": [2, 11], "qualiti": [352, 993], "quantifi": [352, 993], "quantil": [11, 122, 125, 199, 318, 319, 989], "quantile_transform": 894, "quantileregressor": [199, 671], "quantiletransform": [305, 882], "quantiz": [46, 51, 1028], "question": [392, 1017], "r2_score": 786, "r_regress": 610, "radial": [158, 420, 985, 1027], "radius_neighbors_graph": 859, "radiusneighborsclassifi": 855, "radiusneighborsregressor": 856, "radiusneighborstransform": 857, "rand": 410, "rand_scor": 787, "random": [15, 93, 113, 115, 128, 129, 169, 170, 230, 239, 265, 267, 322, 362, 382, 389, 408, 414, 415, 417, 962, 982, 989, 1005, 1010], "random_project": [408, 897, 898, 899, 1050], "random_st": 392, "randomforestclassifi": 565, "randomforestregressor": 566, "randomized_range_find": 941, "randomized_svd": 942, "randomizedsearchcv": 815, "randomli": [89, 90], "randomst": 362, "randomtreesembed": 567, "rang": 1003, "rangespan": 1018, "rank": [197, 408, 993], "ransac": [200, 989], "ransacregressor": 672, "rate": 417, "ratio": [262, 993], "ration": [158, 420], "rationalquadrat": 624, "rbf": [231, 338, 339, 343, 420, 623, 991, 1008, 1027], "rbf_kernel": 777, "rbfsampler": 642, "rcv1": 375, "reachabl": 410, "read": 380, "real": [1, 7, 73, 164, 375], "recal": [266, 993], "recall_scor": 788, "receiv": [268, 269, 993], "recent": 408, "recogn": 30, "recognit": [4, 375, 377, 1025], "recommend": [362, 375, 1013], "reconstruct": [3, 12, 96], "reconstruct_from_patches_2d": 588, "recov": 176, "recurs": [144, 145, 419], "redirect": 15, "reduc": [56, 366], "reduct": [70, 218, 222, 238, 292, 310, 352, 987, 996, 1010], "refer": [3, 9, 23, 25, 78, 79, 96, 109, 112, 169, 173, 181, 185, 259, 264, 265, 278, 296, 374, 375, 406, 407, 408, 410, 412, 415, 417, 418, 419, 420, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008], "refit": [253, 257, 1020], "regard": [253, 409], "region": [44, 259], "register_parallel_backend": 963, "regress": [2, 11, 71, 73, 83, 84, 110, 122, 123, 133, 149, 154, 155, 156, 157, 176, 177, 180, 186, 188, 189, 190, 193, 195, 197, 199, 212, 214, 215, 229, 232, 295, 345, 358, 359, 376, 408, 411, 420, 984, 986, 989, 993, 994, 996, 997, 1007, 1008, 1009, 1027], "regressor": [8, 110, 122, 176, 201, 312, 315, 318, 408, 417], "regressorchain": [839, 994], "regressormixin": 433, "regular": [41, 76, 124, 167, 190, 201, 202, 299, 346, 989, 997], "reinforc": 392, "relat": [2, 6, 374, 1001, 1013, 1043], "releas": [164, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 384, 397, 1034], "relev": [78, 181, 989], "remark": [2, 55, 222, 230], "remot": 388, "remov": [392, 419, 1003, 1036], "repeat": [362, 411, 414], "repeatedkfold": 816, "repeatedstratifiedkfold": 817, "replac": 162, "repli": 388, "replic": 403, "report": [380, 385, 993], "repositori": 374, "represent": [88, 168, 228, 316, 366, 382, 418, 1028], "reproduc": [362, 385], "request": [380, 384, 388, 392], "resampl": 964, "rescal": 310, "reshap": [366, 1026], "resourc": [271, 367, 380, 982, 1012, 1017], "respect": 262, "respons": [83, 395], "rest": [189, 268], "restart": 386, "restrict": [302, 998], "result": [5, 6, 18, 25, 36, 45, 47, 48, 55, 56, 61, 62, 65, 76, 78, 80, 94, 95, 110, 115, 130, 133, 162, 173, 181, 202, 232, 236, 263, 272, 281, 290, 311, 345, 352, 362, 982], "retriev": [10, 315], "return": 405, "reuter": 6, "review": [379, 380, 388, 1029], "rfe": 594, "rfecv": 595, "rich": [228, 316], "ridg": [149, 177, 179, 195, 201, 202, 232, 312, 408, 673, 986, 989], "ridge_regress": 688, "ridgeclassifi": 675, "ridgeclassifiercv": 676, "ridgecv": 674, "right": 1022, "roadmap": 1014, "robust": [53, 78, 79, 176, 200, 203, 362, 408, 412, 982, 989], "robust_scal": 895, "robustscal": [305, 883], "roc": [239, 256, 268, 269, 315, 993], "roc_auc_scor": 789, "roc_curv": 790, "roccurvedisplai": [227, 703], "role": 395, "roll": [222, 382], "root_mean_squared_error": 791, "root_mean_squared_log_error": 792, "rotat": 103, "rout": [233, 321, 322, 394, 400, 408, 1053, 1054, 1055], "routin": [6, 367, 389], "rule": 993, "run": [5, 56, 263], "runtim": [322, 378], "r\u00b2": 993, "sa": 236, "safe_mask": 965, "safe_sparse_dot": 943, "safe_sqr": 966, "same": 1027, "sampl": [18, 36, 53, 61, 76, 94, 95, 142, 178, 210, 232, 260, 272, 295, 316, 345, 348, 374, 389, 394, 408, 417, 989], "sample_without_replac": 962, "saniti": 388, "save": 392, "scalabl": [173, 261, 316], "scale": [53, 167, 218, 221, 310, 346, 368, 896, 990, 999, 1003, 1010], "scaler": 305, "scatter": [83, 88], "scenario": 989, "scientif": [1012, 1023], "scikit": [0, 233, 254, 315, 316, 317, 318, 319, 320, 321, 322, 323, 365, 366, 378, 381, 382, 384, 385, 392, 395, 397, 408, 1011, 1013, 1014, 1018, 1020, 1021, 1026, 1029, 1032], "scipi": [367, 1053], "score": [15, 83, 115, 136, 145, 162, 176, 248, 258, 265, 266, 342, 400, 410, 414, 988, 993, 1008, 1024], "script": 385, "search": [238, 257, 259, 267, 270, 278, 393, 982, 1024, 1029], "second": [7, 35], "section": 1020, "secur": [403, 1054], "see": [264, 411], "seek": 1028, "segment": [44, 64], "select": [52, 58, 70, 100, 136, 140, 142, 145, 146, 164, 185, 186, 191, 248, 251, 342, 392, 400, 404, 408, 414, 419, 982, 989, 1024, 1042], "selectfdr": 596, "selectfpr": 597, "selectfrommodel": [419, 598], "selectfw": 599, "selectkbest": 600, "selectormixin": 602, "selectpercentil": 601, "self": [317, 329, 1006], "selftrainingclassifi": 902, "semant": 415, "semi": [164, 325, 326, 330, 331, 408, 1006], "semi_supervis": [408, 900, 901, 902, 1046, 1047, 1048, 1052], "sen": [214, 989], "sens": 12, "sensit": 253, "sentiment": 1029, "separ": [94, 209, 340, 341], "sequenc": [157, 392], "sequenti": [146, 419], "sequentialfeatureselector": [317, 603], "seri": [11, 191, 414], "serv": 403, "set": [7, 73, 76, 99, 130, 162, 201, 253, 266, 323, 339, 356, 392, 408, 409, 414, 989, 1020, 1026, 1027, 1029], "set_config": 903, "set_output": [240, 320, 322, 382], "set_param": 382, "setup": 1029, "sever": [215, 220], "sgd": [206, 207, 208, 209, 210, 989, 1007], "sgdclassifi": 677, "sgdoneclasssvm": 678, "sgdregressor": 679, "shape": [223, 1020], "share": [2, 11, 168], "shift": [61, 410], "ship": 1026, "should": 392, "show": [136, 268], "show_vers": 904, "shrinkag": [76, 412, 417, 987, 1027], "shrunk": 412, "shrunk_covari": 482, "shrunkcovari": 477, "shrunken": 996, "shuffl": [414, 967], "shufflesplit": 818, "sigmoid": [343, 407, 991, 1027], "sigmoid_kernel": 778, "signal": [181, 415, 1028], "signific": 265, "silhouett": [58, 410], "silhouette_sampl": 793, "silhouette_scor": 794, "similar": [157, 991, 993], "simpl": [107, 149, 233, 288, 386, 1026], "simpleimput": [323, 631], "simul": 166, "sine": [158, 249, 420], "singl": [112, 130, 215, 227, 376, 410, 983], "single_source_shortest_path_length": 947, "singular": [15, 415], "sinusoid": 177, "site": 384, "size": 417, "sketch": 985, "skew": 985, "skewedchi2sampl": 643, "sklearn": [408, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "sklearn_assume_finit": 367, "sklearn_build_enable_debug_symbol": 367, "sklearn_enable_debug_cython_direct": 367, "sklearn_pairwise_dist_chunk_s": 367, "sklearn_run_float32_test": 367, "sklearn_se": 367, "sklearn_skip_network_test": 367, "sklearn_tests_global_random_se": 367, "sklearn_warnings_as_error": 367, "sklearn_working_memori": 367, "skop": 403, "slep": 395, "smacof": 695, "small": 385, "sne": [223, 990], "so": 392, "social": 1017, "soft": 417, "solido": 1018, "solut": 55, "solv": [1027, 1028], "solver": [204, 415, 989], "some": 342, "someth": 385, "sometim": 392, "sort_graph_by_row_valu": 860, "sourc": [68, 94, 378], "space": [10, 98, 411, 982, 990], "spars": [80, 93, 102, 167, 181, 183, 212, 315, 322, 351, 352, 389, 408, 412, 415, 419, 1003, 1005, 1007, 1053], "sparse_encod": 549, "sparsecod": 543, "sparsefunc": [968, 969, 970, 971, 972, 973, 974, 1045], "sparsefuncs_fast": [975, 976], "sparsepca": [415, 544], "sparserandomproject": 898, "sparsiti": [188, 194, 418, 1027], "spawn": 367, "speci": [9, 296, 375], "special": 353, "specif": [268, 378, 382, 982, 1013, 1014], "specifi": [127, 392, 982], "spectral": [17, 18, 19, 64, 218, 406, 410, 990], "spectral_clust": 463, "spectral_embed": 696, "spectralbiclust": [18, 452], "spectralclust": 453, "spectralcoclust": 454, "spectralembed": 692, "speed": [8, 386], "sphere": 220, "spline": [2, 198, 318, 1003], "splinetransform": 884, "split": [119, 317, 362, 414], "splitter": [362, 408], "sponsor": 0, "spotifi": 1018, "sprint": 0, "squar": [84, 122, 158, 192, 195, 201, 420, 985, 989, 991, 993], "stabil": 316, "stabl": 318, "stack": [130, 315, 417], "stackingclassifi": 568, "stackingregressor": 569, "stall": 380, "standard": [388, 1003], "standardscal": [305, 885], "start": 393, "statement": 1014, "statist": [259, 1013, 1023, 1026], "statlog": 253, "statu": 400, "std": [136, 176], "step": [2, 238, 393, 411], "stochast": [205, 211, 218, 300, 989, 990, 998, 1007], "stock": [10, 1025], "stop": [120, 125, 205, 418, 1007], "strategi": [51, 257, 278, 300, 308, 321, 323, 368, 408, 410, 993], "stratif": 414, "stratifi": 414, "stratifiedgroupkfold": [414, 819], "stratifiedkfold": 820, "stratifiedshufflesplit": 821, "stream": 368, "string": 392, "strip": 351, "strong": 179, "strongli": 1001, "structur": [10, 37, 45, 65, 157, 328, 360, 1025], "studi": 236, "submit": 380, "subpackag": 1014, "subsampl": 417, "subscript": 323, "subtleti": 362, "success": [270, 271, 317, 982], "sum": 625, "summar": 403, "summari": [23, 120, 186, 352, 353, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "supervis": [164, 325, 326, 330, 331, 408, 997, 1006, 1016, 1027], "support": [0, 23, 119, 125, 164, 191, 311, 315, 316, 317, 318, 320, 321, 322, 334, 337, 345, 392, 397, 400, 405, 407, 408, 417, 1008, 1009, 1017, 1027, 1053, 1054, 1055], "surfac": [118, 231, 357], "svc": [239, 343, 346, 910, 1008], "svd": [15, 93, 415], "svm": [4, 138, 142, 143, 173, 211, 231, 318, 331, 335, 336, 338, 339, 340, 341, 342, 343, 344, 347, 348, 408, 905, 906, 907, 908, 909, 910, 911, 912, 989, 999, 1007, 1027, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "svmlight": 374, "svr": [232, 345, 911, 1008], "swiss": 222, "switch": 367, "symmetr": 83, "synthet": [22, 73, 176, 181, 256, 312, 385], "system": 378, "t": [218, 223, 990], "tabl": [369, 392], "tag": [378, 380, 382], "take": 259, "takeawai": 197, "talk": 1012, "tangent": 990, "target": [73, 156, 215, 311, 312, 392, 394, 408, 411, 994, 1003, 1004], "targetencod": [321, 886], "task": [191, 408, 989, 1013], "team": [0, 379], "technic": 395, "techniqu": 219, "templat": 382, "tensor": 985, "term": [352, 394, 418], "test": [3, 76, 141, 262, 265, 272, 351, 356, 378, 380, 382, 388, 389, 414, 1020, 1027, 1029], "text": [6, 164, 228, 260, 330, 350, 351, 352, 353, 375, 408, 418, 589, 590, 591, 592, 1029], "tf": 418, "tfidftransform": 591, "tfidfvector": [352, 353, 592], "than": 392, "theil": [214, 989], "theilsenregressor": 680, "them": [96, 379], "theoret": 230, "thi": [201, 1014], "third": [197, 233, 397], "thread": 367, "threshold": [253, 273, 323, 329, 409], "throughput": [8, 366], "tie": 347, "time": [2, 11, 14, 20, 26, 33, 66, 74, 81, 85, 91, 104, 106, 115, 134, 139, 147, 159, 163, 171, 174, 191, 216, 224, 231, 232, 241, 250, 276, 279, 282, 297, 303, 313, 324, 332, 333, 349, 351, 354, 361, 414, 1015], "timeseriessplit": 822, "tip": [366, 381, 388, 982, 990, 997, 1007, 1008, 1009], "togeth": [237, 268, 1025, 1028], "toi": [42, 60, 226, 377], "token": 1029, "toler": 146, "tomographi": 12, "too": 367, "tool": [389, 392, 405, 408], "top": [352, 993], "top_k_accuracy_scor": 795, "topic": 13, "total": [128, 356, 417], "tough": 379, "track": [388, 411], "tracker": [380, 1017], "trade": 989, "tradeoff": [256, 993], "train": [109, 110, 120, 123, 126, 133, 145, 201, 227, 232, 236, 237, 239, 248, 272, 278, 302, 311, 312, 317, 329, 339, 343, 351, 356, 357, 360, 403, 414, 996, 1006, 1020, 1027, 1029], "train_test_split": 831, "transform": [68, 69, 70, 73, 83, 114, 128, 238, 317, 318, 319, 372, 392, 393, 411, 996, 1003, 1004, 1005, 1028], "transformedtargetregressor": 466, "transformermixin": 434, "translat": 1013, "tree": [109, 110, 114, 116, 117, 118, 125, 128, 164, 169, 197, 315, 320, 321, 322, 355, 356, 357, 358, 359, 360, 392, 408, 417, 419, 913, 914, 915, 916, 917, 918, 919, 996, 1001, 1009, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "triag": 379, "trick": [366, 386, 388, 418], "trigonometr": 2, "troubleshoot": 397, "true": [176, 177], "truncat": 415, "truncatedsvd": 545, "trust": 136, "trustworthi": 697, "truth": [35, 176], "tsne": [283, 693], "tune": [122, 253, 257, 260, 273, 317, 323, 408, 409, 982, 1029], "tunedthresholdclassifiercv": [323, 823], "tutori": [135, 164, 1012, 1021, 1023, 1029], "tweedi": [215, 993], "tweedieregressor": [215, 681], "two": [64, 111, 183, 237, 259], "type": [69, 243, 381, 382, 394, 405, 410, 1020], "type_of_target": 956, "typic": 379, "t\u00e9l\u00e9com": 1018, "u": 0, "ubuntu": 397, "uci": 278, "unbalanc": [341, 1008], "uncertain": 326, "uncertainti": 11, "unclaim": 380, "undefinedmetricwarn": 579, "under": [157, 392, 1031, 1052], "underfit": 274, "understand": 360, "unfold": 388, "uniform": [305, 1003], "unique_label": 957, "univari": [52, 83, 142, 342, 419, 983], "univers": 382, "unlabel": 1006, "unless": 385, "unstructur": 65, "unsupervis": [996, 998, 1010, 1028, 1030], "unweight": 400, "up": 999, "updat": [1020, 1046], "us": [3, 4, 10, 15, 46, 93, 94, 96, 127, 128, 130, 146, 154, 184, 200, 211, 213, 259, 263, 268, 281, 306, 345, 351, 352, 360, 362, 368, 381, 385, 386, 388, 392, 408, 414, 415, 418, 419, 424, 427, 430, 433, 434, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 507, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 585, 588, 589, 590, 591, 592, 594, 595, 598, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 629, 631, 632, 633, 634, 635, 636, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 692, 693, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 718, 719, 720, 728, 730, 733, 735, 736, 738, 739, 742, 743, 746, 747, 749, 750, 751, 753, 754, 756, 758, 762, 779, 780, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 862, 863, 864, 865, 866, 869, 870, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 891, 894, 898, 899, 901, 902, 903, 905, 908, 909, 910, 911, 912, 913, 914, 919, 920, 928, 937, 939, 946, 950, 951, 952, 953, 954, 967, 977, 987, 989, 990, 993, 997, 1007, 1008, 1009, 1018, 1027, 1029, 1046], "usabl": 392, "usag": [386, 392, 400, 405, 407, 411, 417, 418, 989], "user": [1017, 1031], "util": [373, 385, 389, 408, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1029, 1033, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "v": [52, 65, 76, 77, 79, 84, 98, 145, 168, 169, 179, 189, 215, 262, 268, 272, 274, 356, 410, 417, 983, 1020], "v_measure_scor": 796, "valgrind": [386, 388], "valid": [2, 136, 145, 186, 230, 253, 254, 255, 257, 258, 262, 264, 269, 275, 342, 362, 366, 382, 389, 408, 409, 414, 977, 978, 979, 980, 981, 982, 988, 989, 1024], "validation_curv": 832, "validationcurvedisplai": [321, 824], "valu": [125, 146, 160, 161, 162, 164, 223, 233, 315, 321, 322, 360, 380, 405, 415, 417, 983, 993, 1001, 1003, 1009], "vanilla": [253, 273], "vari": [35, 299, 329, 410], "variabl": [83, 166, 167, 367, 392, 408, 1027], "varianc": [112, 195, 419, 993, 1003], "variancethreshold": 604, "variant": 161, "variat": [243, 992], "variou": [8, 50, 204, 223], "vector": [15, 23, 51, 164, 334, 337, 345, 351, 353, 408, 418, 1008, 1027, 1028], "version": [319, 374, 378, 384, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "versu": [112, 211, 264, 331, 366], "via": [3, 11, 51, 185, 186, 215, 417, 985], "video": [380, 1012], "visual": [10, 56, 103, 120, 227, 232, 239, 254, 301, 316, 339, 408, 410, 411, 993, 1033], "vocabulari": 1027, "vote": [133, 417], "votingclassifi": [131, 132, 570], "votingregressor": 571, "wage": [166, 167], "wai": [168, 380, 392], "want": 380, "ward": [45, 65, 410, 1028], "ward_tre": 464, "warm": 386, "warm_start": 997, "warn": [389, 408], "we": 65, "weak": [109, 417], "web": 384, "websit": 1046, "weight": [109, 176, 178, 210, 301, 316, 348, 400, 408, 417, 418], "weighted_mod": 944, "welcom": 1011, "what": [360, 392], "when": 253, "where": 1029, "which": 989, "whitekernel": 626, "who": 1018, "why": [392, 417], "wikipedia": 15, "wild": 375, "window": [378, 397], "wine": 377, "winpython": 397, "wisconsin": 377, "within": 70, "without": [37, 291, 351], "wolf": [31, 77, 412], "word": [351, 418, 1029], "work": [164, 350, 366, 379, 392, 408, 1029], "workflow": [379, 403], "world": [1, 73, 164, 375], "would": 1026, "wrap": 281, "written": 30, "wrong": [167, 392], "x": 214, "x86_64": 388, "xor": [153, 343, 420], "y": [214, 392, 1004, 1006], "yeast": 278, "yep": 386, "yhat": 1018, "you": [136, 392], "your": [382, 385, 993], "zero": 993, "zero_one_loss": 797, "zopa": 1018}})