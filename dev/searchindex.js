Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.if_delegate_has_method", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 413, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 463, 464, 465, 466, 468, 470, 471, 474, 477, 478, 479, 480, 482, 483, 484, 486, 489, 490, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 684, 685, 687, 688, 690, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 716, 717, 718, 719, 720, 721, 722, 723, 728, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 748, 749, 754, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 898, 899, 904, 905, 907, 909, 910, 915, 917, 922, 923, 925, 928, 929, 930, 932, 933, 936, 937, 946, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 988, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "wa": [0, 4, 8, 13, 16, 40, 69, 70, 79, 85, 91, 125, 128, 157, 166, 172, 221, 247, 250, 252, 254, 256, 262, 263, 294, 303, 306, 307, 311, 316, 317, 339, 341, 348, 350, 354, 363, 365, 366, 368, 372, 373, 381, 384, 387, 389, 390, 393, 396, 397, 401, 405, 422, 423, 427, 431, 435, 438, 441, 450, 455, 496, 504, 516, 517, 519, 521, 534, 535, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 566, 567, 569, 571, 572, 583, 608, 611, 622, 631, 632, 635, 636, 637, 639, 645, 646, 657, 666, 667, 748, 775, 776, 777, 780, 781, 791, 802, 804, 816, 826, 852, 853, 871, 875, 881, 882, 884, 886, 887, 888, 889, 909, 910, 929, 950, 951, 952, 961, 962, 965, 968, 972, 975, 978, 982, 988, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "start": [0, 4, 7, 10, 12, 26, 53, 57, 63, 66, 73, 85, 97, 108, 114, 119, 121, 142, 145, 153, 155, 167, 172, 176, 177, 185, 196, 197, 198, 204, 214, 217, 221, 230, 244, 256, 264, 276, 310, 315, 339, 348, 350, 354, 355, 356, 357, 361, 368, 369, 370, 372, 373, 374, 379, 381, 384, 390, 393, 397, 398, 402, 403, 405, 422, 424, 431, 435, 437, 514, 519, 591, 598, 613, 626, 634, 640, 647, 649, 657, 658, 659, 671, 675, 761, 762, 775, 776, 777, 780, 781, 791, 821, 822, 823, 825, 827, 835, 920, 946, 951, 958, 961, 966, 967, 976, 983, 986, 988, 996, 997, 1007, 1009, 1012, 1014, 1016, 1017, 1018, 1019, 1020], "2007": [0, 38, 184, 363, 393, 402, 422, 433, 435, 441, 443, 547, 637, 672, 698, 714, 717, 738, 739, 773, 954, 958, 960, 962], "googl": [0, 17, 379, 393, 424, 981, 993, 1004], "summer": [0, 4, 48, 1004], "codedavid": [0, 2, 37, 56, 80, 175, 198, 257, 259, 303, 339, 340, 341, 363, 393, 400, 403, 443, 513, 517, 548, 549, 603, 604, 609, 705, 775, 875, 952, 958, 966, 975, 986, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "cournapeau": [0, 2, 1004, 1007], "later": [0, 11, 53, 114, 122, 148, 167, 172, 175, 289, 341, 350, 374, 379, 380, 384, 387, 825, 848, 849, 857, 859, 972, 992, 997, 1007, 1010, 1012, 1016], "year": [0, 4, 131, 145, 153, 165, 166, 167, 196, 197, 214, 365, 367, 379, 397, 401, 403, 779, 784, 786, 858, 958, 962, 983, 986, 995], "matthieu": [0, 2, 1004, 1008, 1019], "brucher": [0, 2, 1004], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 66, 77, 112, 118, 131, 145, 154, 155, 165, 166, 167, 185, 213, 241, 243, 254, 282, 283, 307, 309, 310, 328, 340, 341, 350, 355, 356, 357, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 376, 380, 381, 382, 384, 389, 390, 391, 393, 394, 395, 398, 400, 401, 402, 405, 406, 407, 408, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 489, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 689, 722, 754, 758, 759, 760, 761, 768, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 915, 919, 951, 952, 954, 956, 957, 958, 959, 961, 962, 964, 965, 968, 969, 972, 975, 976, 982, 983, 986, 988, 989, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "part": [0, 31, 36, 60, 67, 70, 81, 112, 117, 121, 126, 134, 135, 136, 137, 142, 153, 163, 175, 244, 251, 253, 270, 292, 300, 303, 341, 356, 363, 365, 368, 370, 374, 376, 380, 381, 384, 393, 397, 398, 400, 401, 403, 430, 474, 475, 476, 502, 512, 518, 523, 555, 565, 566, 567, 594, 606, 771, 844, 861, 863, 864, 865, 866, 867, 868, 869, 951, 952, 954, 959, 963, 981, 982, 983, 984, 986, 990, 997, 999, 1004, 1012, 1013, 1015, 1017, 1019], "hi": [0, 394, 962, 997], "thesi": [0, 365, 393, 400], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 56, 57, 59, 65, 66, 70, 71, 73, 74, 77, 79, 80, 81, 85, 88, 94, 96, 99, 102, 103, 108, 112, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 128, 131, 141, 142, 144, 145, 148, 152, 153, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 184, 185, 187, 191, 196, 197, 198, 199, 200, 201, 204, 213, 214, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 244, 246, 250, 252, 253, 254, 256, 257, 258, 259, 261, 262, 265, 266, 268, 270, 271, 274, 276, 282, 283, 285, 295, 298, 299, 300, 303, 306, 307, 308, 310, 311, 316, 318, 326, 334, 339, 340, 341, 344, 348, 350, 354, 355, 356, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 419, 422, 423, 424, 425, 426, 428, 429, 430, 433, 443, 444, 445, 450, 453, 456, 474, 477, 484, 489, 490, 492, 504, 515, 517, 519, 521, 522, 523, 525, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 569, 572, 583, 587, 590, 591, 592, 611, 613, 614, 615, 617, 624, 625, 626, 628, 629, 630, 632, 634, 636, 639, 640, 642, 644, 646, 647, 649, 650, 655, 656, 657, 660, 661, 665, 666, 667, 677, 680, 684, 693, 699, 701, 706, 708, 709, 714, 715, 718, 720, 722, 734, 736, 737, 761, 763, 765, 768, 772, 774, 775, 776, 777, 780, 781, 783, 791, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 844, 846, 852, 853, 857, 858, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 883, 886, 888, 893, 897, 899, 915, 930, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 983, 985, 986, 988, 995, 996, 997, 1001, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "2010": [0, 47, 66, 78, 167, 261, 262, 390, 393, 395, 397, 398, 406, 456, 517, 685, 689, 700, 701, 720, 804, 836, 837, 954, 958, 962, 966, 976, 981, 1004], "fabian": [0, 2, 183, 201, 218, 288, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1013], "pedregosa": [0, 2, 183, 201, 218, 288, 1004, 1005, 1006, 1007, 1008, 1010], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 65, 66, 81, 96, 100, 185, 186, 218, 230, 243, 981, 983, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 65, 66, 72, 81, 88, 89, 96, 100, 101, 179, 185, 186, 193, 194, 218, 220, 228, 230, 243, 300, 330, 331, 382, 981, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 66, 94, 96, 102, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 382, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 66, 94, 96, 102, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 382, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "vincent": [0, 2, 47, 66, 151, 155, 986, 1004, 1006, 1008, 1009, 1011, 1014, 1019, 1020], "michel": [0, 2, 47, 66, 1004, 1006, 1007, 1009, 1011, 1018, 1019], "inria": [0, 5, 9, 30, 37, 52, 54, 56, 74, 81, 154, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 303, 334, 339, 340, 341, 639, 980, 1004], "took": [0, 42, 264], "leadership": 0, "made": [0, 69, 80, 88, 99, 131, 155, 166, 167, 196, 214, 247, 260, 307, 326, 345, 354, 363, 365, 368, 372, 381, 382, 393, 401, 405, 425, 428, 430, 440, 477, 484, 569, 570, 572, 611, 612, 637, 646, 666, 667, 715, 763, 777, 780, 781, 791, 795, 796, 797, 816, 819, 820, 963, 968, 978, 982, 986, 994, 996, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1017, 1018], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 79, 84, 85, 88, 89, 90, 99, 103, 110, 114, 115, 116, 117, 118, 120, 122, 125, 128, 129, 130, 131, 141, 142, 145, 148, 149, 150, 153, 154, 155, 156, 161, 165, 166, 167, 169, 172, 175, 177, 179, 185, 192, 193, 194, 197, 198, 204, 205, 210, 218, 221, 229, 230, 232, 233, 235, 237, 238, 243, 247, 251, 256, 258, 259, 263, 265, 267, 268, 274, 276, 278, 279, 281, 285, 286, 287, 292, 294, 298, 300, 303, 307, 308, 315, 318, 322, 323, 326, 328, 339, 340, 341, 344, 345, 348, 350, 355, 356, 362, 363, 365, 366, 367, 370, 372, 373, 374, 376, 379, 381, 390, 391, 393, 396, 397, 398, 400, 401, 402, 403, 405, 425, 428, 431, 440, 441, 445, 453, 464, 468, 469, 471, 472, 473, 475, 478, 481, 483, 485, 489, 490, 491, 509, 514, 515, 519, 522, 534, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 563, 565, 569, 570, 571, 572, 574, 591, 592, 598, 602, 605, 612, 613, 614, 615, 627, 633, 640, 647, 649, 655, 657, 669, 676, 679, 680, 681, 683, 693, 697, 716, 743, 744, 762, 772, 775, 776, 780, 781, 782, 784, 789, 791, 798, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 844, 852, 856, 857, 858, 860, 867, 868, 880, 883, 886, 887, 888, 889, 891, 893, 898, 899, 900, 917, 919, 923, 929, 933, 936, 948, 951, 952, 956, 957, 958, 959, 961, 962, 963, 964, 965, 969, 972, 973, 976, 977, 978, 986, 988, 994, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "public": [0, 78, 362, 368, 370, 372, 373, 379, 380, 381, 382, 397, 400, 645, 652, 666, 667, 673, 958, 966, 1004, 1009, 1010, 1015, 1016, 1017], "releas": [0, 312, 355, 357, 366, 368, 369, 371, 376, 379, 381, 401, 425, 428, 445, 448, 471, 472, 477, 482, 485, 493, 496, 505, 519, 542, 543, 545, 546, 548, 580, 583, 609, 611, 615, 621, 627, 629, 633, 639, 650, 661, 669, 698, 728, 768, 777, 780, 781, 791, 805, 821, 823, 840, 844, 849, 852, 853, 854, 858, 859, 875, 876, 878, 883, 887, 910, 930, 978, 980, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "februari": [0, 395, 454, 962, 1005, 1009], "1st": [0, 4, 59, 89, 156, 197, 303, 857, 858], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 65, 69, 70, 71, 95, 118, 134, 142, 145, 148, 153, 166, 167, 172, 178, 196, 198, 213, 226, 230, 231, 243, 246, 252, 256, 258, 259, 265, 266, 276, 278, 309, 310, 319, 323, 326, 334, 339, 340, 341, 350, 355, 363, 366, 368, 369, 370, 372, 373, 376, 379, 380, 381, 384, 393, 394, 395, 396, 397, 398, 400, 401, 403, 405, 410, 419, 423, 427, 428, 430, 431, 434, 437, 450, 477, 507, 514, 517, 518, 519, 520, 521, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 550, 569, 570, 572, 583, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 619, 631, 632, 635, 636, 637, 639, 640, 645, 646, 647, 649, 652, 655, 656, 657, 660, 673, 680, 688, 690, 715, 721, 748, 769, 780, 781, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 837, 844, 852, 868, 869, 873, 874, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 909, 912, 915, 923, 951, 954, 955, 956, 958, 959, 963, 964, 965, 966, 968, 970, 972, 976, 977, 978, 986, 988, 997, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 60, 73, 90, 112, 119, 126, 128, 131, 142, 148, 153, 154, 163, 166, 172, 185, 196, 216, 217, 223, 229, 243, 251, 256, 261, 278, 293, 298, 309, 339, 340, 354, 362, 363, 365, 368, 370, 373, 379, 381, 390, 392, 393, 394, 397, 399, 400, 401, 403, 428, 430, 445, 468, 480, 489, 490, 519, 536, 537, 540, 541, 544, 545, 546, 551, 569, 570, 572, 591, 626, 627, 633, 669, 670, 671, 672, 673, 674, 775, 776, 777, 780, 781, 791, 807, 808, 814, 815, 816, 817, 818, 838, 839, 846, 862, 886, 887, 888, 889, 901, 930, 951, 954, 959, 962, 963, 965, 970, 972, 976, 978, 979, 981, 982, 985, 986, 988, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1017], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 56, 59, 61, 63, 64, 69, 70, 77, 79, 84, 85, 88, 90, 91, 99, 101, 109, 115, 117, 118, 119, 121, 141, 142, 145, 148, 149, 153, 154, 155, 161, 165, 166, 167, 168, 169, 172, 175, 196, 197, 198, 214, 221, 225, 227, 232, 234, 235, 242, 243, 244, 246, 250, 256, 257, 259, 262, 263, 270, 276, 278, 282, 283, 298, 303, 306, 308, 309, 315, 316, 317, 323, 329, 331, 339, 340, 348, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 473, 475, 476, 477, 489, 490, 495, 504, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 680, 685, 686, 693, 696, 701, 706, 711, 716, 722, 736, 737, 738, 739, 762, 765, 766, 770, 773, 775, 776, 777, 780, 781, 782, 783, 788, 791, 795, 800, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 900, 902, 904, 915, 937, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 982, 983, 986, 988, 989, 992, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "appear": [0, 8, 46, 48, 112, 166, 251, 253, 254, 282, 283, 292, 294, 299, 315, 339, 340, 341, 363, 366, 368, 373, 381, 395, 398, 469, 470, 536, 548, 549, 560, 591, 608, 609, 611, 678, 683, 693, 697, 699, 769, 778, 795, 814, 815, 816, 817, 818, 880, 883, 917, 958, 964, 968, 1004, 1012, 1016, 1017], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 56, 62, 66, 70, 71, 91, 94, 104, 109, 112, 121, 125, 140, 153, 160, 165, 166, 167, 168, 175, 177, 184, 185, 194, 196, 197, 211, 214, 226, 232, 234, 247, 256, 265, 266, 298, 306, 307, 309, 310, 311, 323, 334, 339, 340, 341, 344, 348, 350, 354, 355, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 413, 415, 423, 425, 427, 428, 429, 430, 434, 442, 444, 445, 446, 449, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 496, 515, 519, 521, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 612, 614, 615, 627, 633, 639, 640, 651, 652, 661, 673, 675, 680, 686, 690, 694, 699, 796, 816, 821, 822, 823, 825, 827, 829, 830, 831, 838, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 876, 878, 879, 886, 887, 888, 889, 893, 894, 914, 930, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 988, 997, 1001, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 140, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 166, 167, 168, 172, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 229, 230, 231, 232, 234, 236, 238, 241, 242, 243, 245, 246, 247, 251, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 317, 318, 319, 322, 323, 325, 326, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 345, 346, 348, 350, 355, 356, 362, 363, 365, 366, 368, 369, 370, 373, 374, 379, 380, 381, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 416, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 443, 445, 447, 448, 450, 451, 452, 453, 455, 456, 457, 463, 464, 465, 466, 474, 475, 477, 478, 485, 486, 487, 488, 491, 493, 497, 498, 499, 500, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 558, 562, 564, 565, 568, 574, 575, 583, 584, 588, 589, 591, 593, 598, 608, 609, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 673, 674, 675, 680, 684, 685, 686, 690, 694, 697, 698, 702, 703, 704, 706, 708, 711, 714, 715, 716, 717, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 736, 737, 748, 749, 755, 761, 763, 765, 766, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 843, 844, 845, 850, 851, 852, 853, 854, 855, 857, 858, 859, 866, 870, 871, 872, 873, 874, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 904, 909, 913, 914, 915, 917, 918, 919, 920, 923, 925, 926, 928, 929, 930, 936, 951, 952, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 968, 969, 972, 973, 975, 977, 978, 980, 981, 985, 988, 989, 992, 993, 995, 996, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1016, 1017, 1019], "month": [0, 4, 153, 167, 363, 368, 372, 382, 1004], "cycl": [0, 4, 42, 44, 50, 61, 94, 181, 242, 247, 263, 265, 309, 310, 368, 372, 392, 398, 560, 561, 608, 780, 781, 894, 951, 952, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "thrive": [0, 368], "intern": [0, 26, 70, 81, 99, 122, 134, 149, 160, 196, 276, 278, 316, 341, 350, 355, 363, 365, 370, 374, 377, 379, 381, 387, 390, 393, 397, 398, 400, 401, 403, 404, 419, 421, 426, 446, 449, 492, 515, 516, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 574, 575, 591, 592, 619, 621, 624, 627, 633, 649, 657, 659, 677, 689, 711, 714, 738, 739, 763, 819, 820, 835, 836, 837, 858, 873, 874, 876, 878, 879, 880, 883, 886, 887, 888, 889, 930, 958, 959, 960, 962, 965, 968, 974, 977, 978, 986, 1004, 1007, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 59, 73, 79, 80, 84, 85, 94, 114, 117, 119, 121, 125, 130, 144, 148, 153, 154, 155, 161, 166, 167, 168, 172, 189, 193, 196, 197, 198, 202, 213, 214, 217, 225, 229, 231, 235, 238, 241, 242, 244, 246, 247, 251, 254, 255, 256, 259, 260, 262, 267, 268, 274, 282, 283, 284, 286, 294, 298, 299, 301, 303, 306, 307, 308, 309, 310, 314, 317, 326, 331, 333, 339, 348, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 376, 377, 379, 380, 381, 382, 387, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 442, 443, 444, 446, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 474, 475, 478, 479, 489, 490, 497, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 600, 608, 609, 610, 611, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 676, 692, 694, 701, 721, 743, 754, 758, 771, 775, 776, 777, 778, 780, 781, 782, 783, 784, 791, 795, 798, 803, 804, 807, 808, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 897, 898, 899, 917, 923, 931, 947, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 983, 986, 988, 992, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "been": [0, 4, 9, 16, 26, 44, 53, 59, 80, 99, 145, 148, 153, 155, 166, 221, 225, 227, 232, 254, 256, 262, 306, 307, 308, 309, 310, 316, 339, 350, 355, 362, 363, 365, 366, 367, 368, 370, 372, 374, 376, 377, 379, 380, 381, 382, 387, 390, 391, 393, 395, 397, 398, 400, 403, 416, 419, 450, 452, 453, 455, 459, 468, 504, 515, 517, 530, 531, 548, 549, 562, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 614, 615, 639, 640, 647, 649, 654, 656, 657, 658, 659, 701, 771, 777, 780, 781, 783, 791, 803, 804, 828, 875, 878, 952, 954, 955, 957, 958, 959, 962, 963, 965, 968, 972, 974, 976, 977, 983, 986, 988, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lead": [0, 7, 25, 31, 37, 52, 60, 71, 118, 121, 144, 145, 166, 167, 168, 175, 185, 187, 196, 200, 230, 256, 257, 259, 263, 281, 282, 294, 298, 300, 303, 308, 326, 340, 344, 350, 354, 355, 362, 367, 376, 377, 380, 381, 387, 390, 393, 395, 397, 398, 399, 400, 402, 433, 443, 446, 449, 477, 496, 508, 516, 519, 520, 521, 524, 528, 532, 538, 539, 540, 541, 544, 545, 546, 547, 587, 611, 627, 628, 631, 633, 634, 635, 641, 642, 643, 644, 660, 672, 676, 726, 775, 780, 781, 807, 819, 820, 824, 843, 850, 870, 871, 876, 878, 886, 887, 888, 889, 951, 956, 958, 959, 961, 962, 963, 965, 966, 968, 970, 972, 975, 976, 978, 986, 988, 1007, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 90, 91, 92, 94, 97, 99, 102, 103, 104, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 131, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 167, 168, 169, 172, 175, 177, 178, 179, 181, 184, 185, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 204, 205, 213, 214, 216, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 246, 247, 250, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 281, 282, 283, 284, 285, 286, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 316, 317, 323, 324, 326, 330, 331, 332, 334, 335, 336, 339, 340, 341, 344, 346, 347, 348, 350, 354, 355, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 732, 733, 734, 735, 736, 737, 738, 739, 742, 744, 745, 746, 747, 750, 751, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 925, 927, 928, 929, 930, 931, 932, 933, 936, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 992, 993, 994, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "decis": [0, 4, 16, 25, 27, 31, 34, 55, 57, 59, 107, 108, 111, 112, 114, 126, 132, 152, 166, 178, 179, 188, 205, 206, 209, 210, 225, 226, 228, 235, 259, 279, 284, 287, 292, 298, 299, 300, 303, 313, 320, 322, 323, 324, 325, 326, 327, 328, 332, 335, 336, 339, 349, 354, 357, 364, 365, 368, 381, 391, 393, 400, 419, 450, 481, 485, 500, 517, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 574, 575, 612, 613, 614, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 679, 681, 683, 684, 688, 701, 706, 707, 715, 719, 720, 722, 736, 762, 768, 769, 772, 777, 780, 781, 791, 805, 807, 808, 810, 821, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 956, 962, 963, 964, 965, 966, 968, 969, 970, 975, 976, 977, 980, 982, 983, 984, 986, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1020], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 55, 60, 61, 66, 72, 99, 118, 121, 126, 142, 145, 148, 153, 156, 165, 166, 167, 168, 175, 182, 185, 188, 189, 190, 192, 196, 197, 198, 202, 214, 218, 227, 229, 231, 232, 241, 243, 246, 247, 251, 256, 258, 259, 265, 266, 267, 285, 294, 298, 299, 310, 326, 336, 339, 340, 341, 350, 354, 355, 356, 357, 362, 363, 366, 367, 369, 370, 371, 373, 374, 376, 379, 381, 384, 387, 390, 391, 393, 394, 395, 397, 398, 400, 401, 402, 403, 405, 422, 423, 424, 425, 427, 428, 430, 432, 433, 434, 439, 440, 441, 443, 469, 484, 495, 496, 503, 504, 508, 513, 515, 522, 532, 533, 536, 537, 564, 565, 588, 589, 612, 630, 636, 637, 652, 672, 676, 717, 722, 748, 749, 761, 775, 776, 777, 779, 782, 788, 792, 793, 794, 796, 797, 801, 802, 809, 810, 813, 846, 855, 858, 859, 862, 866, 868, 869, 870, 871, 884, 892, 898, 899, 909, 915, 921, 922, 923, 948, 951, 952, 954, 956, 958, 959, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 975, 976, 977, 978, 980, 981, 982, 983, 985, 986, 988, 993, 995, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "process": [0, 4, 5, 26, 30, 31, 45, 46, 47, 48, 50, 65, 69, 71, 73, 78, 80, 95, 96, 98, 118, 125, 134, 135, 136, 137, 158, 165, 175, 198, 232, 241, 242, 247, 256, 258, 259, 268, 298, 308, 315, 340, 341, 344, 354, 355, 356, 357, 363, 367, 368, 370, 372, 374, 377, 379, 380, 381, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 406, 429, 430, 456, 477, 485, 504, 515, 516, 517, 518, 519, 542, 543, 544, 569, 570, 572, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 613, 614, 620, 624, 645, 653, 666, 667, 684, 703, 721, 761, 775, 777, 780, 781, 791, 800, 801, 802, 811, 812, 828, 842, 846, 848, 849, 850, 859, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 928, 930, 951, 954, 958, 962, 965, 972, 974, 976, 978, 980, 981, 982, 983, 984, 986, 988, 989, 996, 997, 999, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 67, 81, 105, 124, 147, 158, 163, 217, 221, 227, 247, 251, 262, 281, 303, 307, 310, 313, 320, 326, 343, 345, 349, 354, 363, 365, 368, 370, 373, 379, 381, 382, 384, 390, 393, 395, 396, 397, 398, 400, 401, 402, 403, 423, 424, 427, 431, 432, 433, 434, 435, 438, 443, 444, 453, 477, 484, 485, 489, 492, 494, 495, 502, 511, 516, 522, 525, 544, 591, 592, 593, 597, 598, 599, 670, 677, 690, 694, 805, 827, 832, 859, 870, 871, 874, 886, 887, 888, 889, 892, 914, 915, 933, 936, 959, 961, 962, 965, 967, 968, 972, 975, 978, 982, 983, 991, 996, 997, 1004, 1005, 1007, 1008, 1010, 1014], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 331, 332, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 380, 381, 382, 383, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 943, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 988, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "laid": [0, 165, 368], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 69, 70, 102, 107, 113, 115, 122, 132, 137, 163, 165, 168, 196, 198, 204, 214, 241, 243, 254, 256, 259, 264, 268, 274, 303, 309, 317, 319, 322, 323, 326, 339, 353, 363, 365, 366, 368, 370, 371, 372, 374, 379, 381, 393, 396, 398, 400, 403, 409, 417, 418, 424, 425, 427, 428, 430, 453, 463, 464, 465, 466, 480, 496, 497, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 569, 570, 572, 585, 588, 589, 615, 620, 621, 622, 623, 632, 636, 647, 649, 654, 656, 657, 669, 670, 682, 707, 721, 722, 777, 779, 780, 781, 782, 784, 785, 786, 787, 791, 805, 814, 815, 816, 817, 818, 823, 828, 831, 835, 836, 837, 845, 849, 856, 867, 870, 871, 893, 924, 926, 931, 952, 956, 957, 961, 962, 963, 965, 970, 972, 983, 984, 985, 986, 992, 995, 997, 999, 1004, 1006, 1008, 1010, 1012, 1013, 1016, 1017, 1020], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 56, 70, 72, 88, 89, 91, 94, 125, 177, 179, 193, 194, 211, 229, 232, 238, 257, 294, 318, 331, 341, 342, 354, 355, 356, 357, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 384, 387, 390, 392, 393, 398, 401, 404, 426, 428, 429, 430, 431, 434, 438, 445, 469, 470, 480, 482, 492, 502, 504, 517, 525, 545, 569, 570, 571, 572, 575, 585, 612, 620, 624, 639, 640, 647, 649, 654, 655, 656, 657, 677, 684, 686, 692, 698, 717, 738, 739, 749, 758, 759, 760, 771, 773, 777, 780, 781, 791, 801, 803, 806, 809, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 840, 851, 878, 883, 894, 897, 899, 912, 928, 951, 958, 960, 962, 963, 964, 965, 966, 970, 976, 979, 980, 981, 986, 990, 995, 997, 1005, 1006, 1010], "peopl": [0, 6, 69, 166, 233, 259, 339, 340, 355, 356, 363, 365, 367, 368, 372, 399, 474, 475, 622, 816, 982, 993], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 65, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 91, 94, 96, 99, 102, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 141, 142, 144, 145, 148, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 200, 205, 207, 214, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 238, 242, 243, 244, 246, 250, 251, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 281, 282, 286, 289, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 310, 311, 314, 316, 317, 318, 319, 324, 326, 328, 330, 334, 335, 339, 340, 341, 344, 348, 350, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 413, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 469, 470, 474, 476, 477, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 496, 497, 498, 499, 500, 501, 504, 505, 507, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 690, 693, 694, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 723, 725, 726, 728, 730, 731, 733, 734, 736, 737, 741, 742, 743, 745, 747, 748, 749, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 783, 784, 789, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 902, 903, 904, 907, 909, 914, 915, 916, 919, 920, 923, 925, 926, 928, 930, 933, 936, 937, 941, 942, 943, 946, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "current": [0, 8, 46, 84, 153, 166, 214, 298, 306, 355, 356, 363, 366, 368, 369, 370, 373, 377, 379, 381, 382, 389, 390, 392, 393, 397, 400, 401, 402, 403, 422, 431, 449, 450, 451, 452, 453, 454, 455, 456, 457, 513, 516, 522, 534, 535, 538, 539, 540, 541, 543, 545, 546, 547, 557, 572, 574, 591, 598, 607, 608, 627, 639, 648, 652, 656, 657, 658, 659, 768, 775, 776, 824, 828, 836, 837, 855, 866, 876, 886, 887, 888, 889, 892, 929, 937, 951, 956, 958, 962, 965, 966, 972, 983, 995, 1012, 1016, 1018, 1019, 1020], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 77, 78, 81, 84, 89, 90, 91, 94, 95, 96, 99, 100, 103, 104, 105, 108, 109, 111, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 129, 137, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 166, 167, 169, 172, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 194, 196, 198, 202, 203, 205, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 231, 232, 234, 241, 243, 244, 246, 251, 256, 257, 258, 259, 260, 263, 267, 269, 270, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 301, 306, 308, 309, 310, 311, 315, 316, 323, 324, 325, 326, 327, 330, 331, 332, 333, 336, 339, 340, 341, 345, 346, 347, 348, 350, 354, 355, 356, 357, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 381, 382, 383, 384, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 405, 407, 413, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 470, 477, 479, 481, 485, 491, 492, 500, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 689, 692, 697, 701, 715, 721, 722, 738, 739, 759, 760, 775, 776, 777, 779, 780, 781, 786, 791, 795, 796, 801, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 896, 898, 899, 902, 915, 917, 946, 950, 951, 953, 954, 956, 958, 959, 960, 963, 964, 965, 966, 967, 969, 970, 972, 974, 975, 976, 977, 978, 982, 983, 986, 988, 992, 993, 995, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mainten": [0, 368, 376, 379, 384, 386, 958, 983, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "j\u00e9r\u00e9mie": [0, 1, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "du": [0, 1, 2, 1004, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "boisberrang": [0, 1, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "jori": [0, 1, 1011, 1012, 1013, 1016, 1017], "van": [0, 1, 362, 395, 450, 455, 515, 608, 673, 677, 952, 959, 962, 968, 986, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020], "den": [0, 1, 1005, 1006, 1011, 1012, 1013, 1016, 1017], "bossch": [0, 1, 1011, 1012, 1013, 1017], "lo\u00efc": [0, 1, 1012, 1015, 1017, 1018, 1019], "est\u00e8v": [0, 1, 1012, 1015, 1017, 1018, 1019], "thoma": [0, 1, 102, 225, 298, 355, 358, 382, 874, 958, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "j": [0, 1, 11, 17, 37, 38, 40, 43, 60, 69, 78, 79, 80, 108, 112, 113, 123, 149, 161, 167, 208, 220, 233, 241, 255, 256, 261, 267, 280, 286, 289, 302, 311, 348, 355, 362, 363, 365, 372, 374, 379, 390, 391, 393, 395, 397, 398, 400, 401, 403, 404, 419, 422, 426, 434, 435, 450, 455, 479, 494, 497, 498, 499, 501, 509, 512, 515, 517, 518, 519, 521, 522, 528, 540, 541, 574, 575, 613, 614, 618, 625, 626, 629, 630, 647, 648, 650, 661, 669, 670, 671, 673, 674, 675, 677, 686, 689, 691, 695, 697, 699, 702, 703, 704, 706, 735, 736, 738, 739, 754, 758, 768, 769, 770, 771, 808, 809, 816, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 850, 859, 886, 887, 951, 952, 956, 958, 959, 960, 962, 963, 964, 965, 966, 968, 969, 970, 974, 976, 977, 978, 980, 997, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "fan": [0, 1, 355, 382, 977, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "olivi": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 339, 340, 341, 382, 874, 975, 981, 983, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "grisel": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 339, 340, 341, 382, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "yaroslav": [0, 1, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "halchenko": [0, 1, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "tim": [0, 1, 114, 127, 1004, 1009, 1010, 1013, 1014, 1015, 1017, 1019, 1020], "head": [0, 1, 26, 70, 114, 127, 153, 166, 184, 185, 214, 238, 246, 306, 311, 368, 376, 398, 986, 1009, 1010, 1019, 1020], "nicola": [0, 1, 145, 302, 639, 958, 975, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "hug": [0, 1, 145, 302, 980, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "adrin": [0, 1, 64, 335, 382, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "jalali": [0, 1, 64, 335, 382, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "julien": [0, 1, 639, 958, 986, 1004, 1007, 1011, 1012, 1016, 1017, 1018, 1019, 1020], "jerphanion": [0, 1, 1016, 1017, 1018, 1019, 1020], "guillaum": [0, 1, 5, 7, 71, 74, 99, 128, 148, 153, 154, 155, 157, 184, 185, 198, 218, 298, 986, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lemaitr": [0, 1, 5, 7, 71, 74, 99, 128, 148, 153, 154, 155, 157, 184, 185, 198, 218, 298, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "christian": [0, 1, 19, 196, 197, 198, 214, 339, 340, 363, 986, 997, 1004, 1005, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lorentzen": [0, 1, 196, 197, 198, 214, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "jan": [0, 1, 24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 197, 231, 858, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1020], "hendrik": [0, 1, 24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231, 1004, 1007, 1008, 1009, 1010], "metzen": [0, 1, 24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231, 1004, 1007, 1008, 1009, 1010], "andrea": [0, 1, 31, 73, 99, 113, 187, 230, 299, 300, 316, 334, 335, 382, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mueller": [0, 1, 73, 99, 113, 187, 230, 316, 334, 335, 986, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "vlad": [0, 1, 94, 232, 295, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "nicula": [0, 1, 94, 232, 295, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "joel": [0, 1, 71, 382, 401, 516, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "nothman": [0, 1, 71, 382, 401, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "hanmin": [0, 1, 299, 1011, 1012, 1013, 1014, 1015], "qin": [0, 1, 299, 365, 401, 1011, 1012, 1013, 1014, 1015], "bertrand": [0, 1, 1004, 1010, 1011, 1016, 1017], "thirion": [0, 1, 1004, 1010, 1011, 1017], "tom": [0, 1, 188, 204, 276, 278, 300, 301, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "dupr\u00e9": [0, 1, 300, 301, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "la": [0, 1, 188, 204, 276, 278, 300, 301, 365, 986, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "tour": [0, 1, 188, 204, 276, 278, 300, 301, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "nell": [0, 1, 39, 220, 228, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016], "roman": [0, 1, 196, 214, 608, 892, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "yurchak": [0, 1, 196, 214, 401, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "meekail": [0, 1, 1018, 1019, 1020], "zain": [0, 1, 1018, 1019, 1020], "pleas": [0, 12, 17, 26, 70, 71, 108, 114, 115, 116, 122, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 200, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 286, 295, 306, 307, 308, 309, 310, 311, 316, 348, 355, 362, 363, 366, 368, 369, 370, 372, 376, 379, 380, 381, 384, 387, 389, 392, 393, 400, 401, 431, 477, 548, 549, 612, 613, 614, 631, 632, 635, 636, 637, 645, 646, 780, 781, 802, 856, 867, 880, 883, 886, 887, 888, 889, 951, 962, 966, 972, 976, 977, 982, 983, 985, 988, 995, 997, 1004, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "do": [0, 4, 10, 25, 42, 60, 66, 73, 89, 98, 100, 101, 104, 113, 115, 117, 119, 121, 122, 128, 135, 142, 153, 160, 166, 167, 168, 193, 196, 214, 217, 219, 232, 247, 251, 254, 257, 259, 274, 276, 278, 282, 309, 319, 323, 326, 331, 334, 339, 340, 341, 348, 350, 354, 355, 356, 363, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 381, 382, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 431, 442, 484, 517, 519, 523, 525, 533, 536, 562, 563, 569, 570, 572, 626, 627, 633, 636, 637, 640, 647, 649, 657, 717, 743, 758, 762, 794, 797, 811, 812, 816, 843, 844, 846, 857, 859, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 897, 936, 951, 954, 956, 958, 959, 962, 963, 965, 966, 970, 972, 977, 978, 982, 983, 986, 988, 995, 996, 997, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "email": [0, 339, 368, 379, 401, 814, 964, 986], "directli": [0, 6, 19, 27, 45, 46, 55, 70, 114, 145, 156, 184, 196, 202, 214, 226, 261, 295, 298, 310, 341, 350, 354, 366, 368, 369, 370, 372, 374, 380, 381, 382, 390, 391, 393, 394, 395, 396, 397, 401, 403, 424, 433, 443, 445, 450, 455, 508, 548, 549, 550, 551, 578, 592, 601, 613, 624, 627, 628, 633, 634, 641, 642, 643, 644, 645, 658, 662, 665, 671, 754, 758, 761, 770, 771, 777, 780, 781, 791, 824, 838, 839, 840, 846, 856, 858, 860, 867, 930, 951, 958, 960, 965, 967, 969, 972, 977, 978, 983, 989, 992, 993, 1004, 1012, 1013, 1015, 1016, 1017], "ask": [0, 160, 161, 256, 357, 367, 368, 372, 373, 376, 381, 382, 402, 821, 822, 823, 825, 827, 829, 830, 831, 980, 985, 1020], "assist": [0, 368, 379, 972, 986], "report": [0, 4, 8, 32, 69, 74, 142, 156, 184, 254, 264, 306, 314, 350, 363, 367, 369, 370, 371, 374, 376, 379, 381, 384, 387, 393, 397, 592, 630, 639, 645, 666, 667, 681, 694, 709, 710, 718, 763, 764, 767, 808, 817, 836, 837, 873, 891, 909, 958, 965, 982, 983, 985, 1005, 1008, 1011, 1012, 1014, 1015, 1017, 1019, 1020], "issu": [0, 4, 25, 78, 85, 196, 214, 261, 355, 357, 362, 371, 372, 373, 376, 377, 379, 381, 382, 383, 384, 387, 389, 393, 395, 396, 401, 403, 430, 433, 443, 454, 463, 464, 465, 515, 520, 524, 554, 566, 567, 569, 570, 572, 592, 608, 672, 676, 749, 850, 855, 866, 905, 951, 952, 959, 965, 970, 972, 977, 982, 983, 985, 996, 997, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "instead": [0, 4, 5, 6, 48, 53, 55, 56, 70, 99, 112, 116, 125, 142, 145, 148, 196, 198, 211, 214, 221, 247, 252, 253, 257, 258, 274, 281, 298, 306, 307, 308, 309, 310, 326, 328, 339, 341, 350, 354, 355, 362, 363, 366, 367, 368, 369, 370, 372, 373, 376, 377, 379, 380, 381, 387, 389, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 414, 419, 422, 423, 424, 426, 427, 428, 431, 437, 440, 446, 448, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 490, 491, 514, 516, 518, 520, 521, 522, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 541, 543, 545, 546, 549, 551, 563, 564, 570, 571, 588, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 611, 613, 616, 619, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 657, 659, 660, 668, 671, 675, 680, 688, 726, 754, 758, 763, 775, 776, 777, 781, 789, 791, 796, 797, 812, 813, 822, 830, 836, 837, 840, 841, 842, 851, 852, 857, 859, 868, 869, 872, 879, 881, 883, 884, 886, 887, 888, 889, 891, 892, 904, 910, 915, 923, 937, 951, 952, 954, 958, 959, 961, 962, 963, 966, 967, 972, 976, 977, 978, 982, 985, 993, 995, 997, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 56, 57, 61, 63, 64, 66, 68, 79, 85, 88, 89, 94, 99, 101, 105, 110, 111, 112, 115, 116, 117, 118, 120, 122, 125, 128, 134, 141, 142, 143, 145, 148, 153, 154, 155, 160, 163, 166, 167, 169, 172, 175, 176, 177, 187, 197, 198, 199, 202, 213, 214, 217, 219, 227, 229, 235, 236, 238, 242, 243, 244, 250, 251, 253, 255, 256, 257, 258, 259, 263, 265, 266, 267, 270, 271, 276, 282, 283, 285, 289, 298, 306, 307, 308, 309, 310, 311, 316, 326, 339, 340, 341, 344, 345, 346, 347, 350, 354, 355, 356, 360, 361, 362, 363, 365, 366, 367, 368, 370, 372, 374, 375, 376, 379, 380, 381, 384, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 415, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 463, 464, 465, 466, 468, 469, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 595, 600, 603, 604, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 687, 689, 692, 694, 723, 743, 754, 758, 759, 760, 761, 768, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 914, 915, 931, 933, 936, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 986, 988, 990, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "what": [0, 4, 9, 12, 40, 45, 52, 53, 85, 95, 99, 117, 165, 166, 185, 202, 204, 212, 227, 238, 294, 339, 341, 344, 350, 355, 363, 368, 369, 370, 372, 374, 376, 380, 381, 382, 383, 393, 399, 400, 401, 484, 517, 569, 570, 572, 627, 633, 677, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 961, 962, 963, 965, 978, 983, 985, 988, 1004, 1011], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 60, 69, 70, 71, 72, 77, 84, 94, 98, 102, 103, 104, 112, 118, 119, 120, 121, 122, 128, 131, 145, 148, 149, 154, 160, 166, 175, 180, 184, 185, 192, 210, 211, 212, 217, 220, 225, 230, 231, 234, 243, 247, 250, 254, 255, 256, 257, 260, 263, 264, 267, 268, 270, 271, 274, 280, 285, 299, 308, 309, 326, 329, 334, 339, 340, 341, 347, 354, 355, 357, 362, 365, 367, 368, 371, 374, 380, 381, 384, 390, 391, 393, 397, 398, 400, 401, 402, 403, 414, 425, 428, 430, 432, 433, 434, 440, 443, 446, 453, 463, 464, 465, 519, 526, 527, 533, 535, 537, 538, 539, 540, 541, 543, 545, 546, 547, 549, 551, 574, 575, 578, 583, 591, 592, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 656, 657, 659, 660, 661, 669, 670, 671, 674, 675, 684, 689, 700, 701, 702, 703, 704, 708, 709, 719, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 763, 764, 765, 767, 770, 771, 772, 774, 775, 776, 777, 780, 781, 791, 802, 804, 807, 812, 813, 822, 830, 836, 837, 879, 881, 884, 886, 887, 888, 889, 951, 956, 957, 958, 959, 962, 965, 966, 968, 976, 978, 982, 983, 986, 988, 993, 997, 1004, 1007, 1010, 1012, 1013, 1014, 1017, 1018, 1019], "wai": [0, 4, 17, 27, 50, 59, 70, 73, 114, 120, 124, 126, 145, 155, 166, 168, 169, 197, 201, 211, 227, 228, 231, 235, 251, 256, 263, 265, 298, 299, 309, 311, 350, 354, 355, 356, 362, 364, 366, 367, 370, 371, 376, 377, 381, 382, 384, 387, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 408, 425, 426, 432, 433, 434, 440, 441, 443, 444, 450, 477, 536, 537, 544, 553, 570, 580, 581, 592, 613, 647, 648, 657, 658, 659, 685, 687, 698, 716, 717, 734, 735, 737, 743, 754, 758, 768, 773, 800, 808, 825, 846, 852, 857, 862, 888, 889, 933, 936, 951, 952, 956, 957, 958, 959, 960, 961, 962, 963, 965, 967, 968, 969, 970, 972, 974, 976, 977, 978, 982, 983, 985, 986, 988, 996, 997, 1004, 1006, 1012, 1017, 1018], "question": [0, 134, 165, 256, 334, 357, 367, 368, 373, 376, 397, 400, 808, 880, 883, 958, 961, 962, 968, 980, 986], "faq": [0, 376, 397, 673, 959, 972], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 56, 59, 68, 69, 70, 73, 77, 79, 85, 100, 104, 109, 110, 113, 116, 117, 118, 119, 121, 122, 126, 128, 142, 153, 155, 163, 166, 167, 168, 169, 172, 177, 185, 186, 192, 197, 198, 199, 200, 203, 204, 210, 214, 221, 222, 227, 230, 233, 234, 235, 237, 247, 251, 252, 254, 256, 257, 258, 263, 265, 266, 268, 269, 270, 276, 278, 280, 282, 283, 294, 303, 307, 308, 309, 323, 324, 326, 329, 334, 339, 340, 344, 348, 354, 355, 356, 357, 363, 366, 367, 369, 370, 371, 373, 376, 380, 381, 382, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 415, 419, 424, 425, 426, 427, 428, 430, 433, 445, 449, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 540, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 603, 604, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 672, 673, 685, 701, 737, 770, 777, 780, 781, 791, 802, 823, 825, 828, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 883, 951, 952, 956, 957, 958, 959, 961, 962, 968, 969, 970, 972, 974, 975, 977, 978, 981, 983, 985, 986, 988, 990, 992, 997, 999, 1004, 1006, 1009, 1015, 1018, 1019], "you": [0, 14, 16, 24, 70, 116, 117, 120, 122, 142, 145, 161, 167, 184, 197, 198, 227, 238, 244, 251, 256, 257, 263, 271, 282, 306, 307, 310, 315, 318, 339, 350, 354, 355, 356, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 380, 381, 384, 387, 391, 392, 393, 394, 395, 397, 400, 401, 402, 404, 405, 410, 419, 426, 430, 445, 448, 450, 477, 481, 484, 485, 490, 491, 513, 514, 517, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 549, 550, 551, 560, 561, 569, 570, 572, 588, 589, 591, 608, 627, 628, 631, 632, 633, 635, 636, 637, 639, 640, 645, 646, 647, 649, 653, 655, 656, 657, 658, 659, 668, 681, 765, 776, 779, 780, 781, 782, 792, 793, 794, 796, 797, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 836, 838, 839, 843, 844, 851, 852, 853, 863, 864, 866, 867, 868, 869, 871, 873, 874, 878, 880, 883, 886, 887, 888, 889, 915, 928, 951, 952, 957, 958, 962, 963, 966, 968, 969, 972, 973, 976, 977, 978, 981, 982, 985, 986, 988, 989, 992, 995, 997, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 59, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 79, 80, 81, 85, 95, 97, 98, 99, 100, 102, 104, 105, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 142, 144, 145, 148, 153, 154, 155, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 181, 184, 185, 187, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 212, 213, 214, 217, 218, 219, 225, 226, 227, 228, 229, 231, 235, 238, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263, 265, 267, 268, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 293, 294, 295, 298, 299, 300, 302, 303, 306, 307, 308, 309, 310, 311, 315, 316, 318, 319, 323, 324, 326, 329, 334, 339, 340, 341, 346, 347, 348, 350, 354, 355, 356, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 380, 381, 382, 383, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 414, 416, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 453, 463, 464, 465, 468, 477, 480, 484, 489, 490, 493, 502, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 560, 561, 562, 563, 564, 565, 569, 570, 572, 573, 575, 578, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 615, 616, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 685, 688, 690, 692, 693, 699, 701, 702, 703, 704, 706, 707, 709, 710, 712, 713, 717, 718, 719, 720, 722, 723, 726, 732, 735, 736, 737, 738, 739, 743, 759, 760, 762, 763, 764, 765, 767, 768, 769, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 836, 837, 838, 839, 842, 843, 844, 846, 847, 848, 852, 853, 854, 857, 858, 859, 863, 870, 871, 876, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 891, 894, 896, 898, 902, 904, 909, 914, 915, 921, 923, 925, 928, 930, 932, 933, 936, 943, 946, 947, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 985, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "contribut": [0, 13, 122, 153, 265, 303, 357, 365, 366, 370, 371, 372, 376, 381, 382, 384, 398, 399, 400, 403, 428, 430, 534, 535, 540, 541, 706, 709, 736, 956, 962, 965, 970, 977, 980, 982, 983, 986, 995, 1004, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "activ": [0, 163, 204, 241, 247, 257, 313, 320, 341, 362, 363, 366, 368, 369, 374, 376, 379, 381, 382, 384, 394, 477, 483, 507, 613, 616, 618, 631, 632, 634, 635, 636, 644, 645, 646, 663, 664, 665, 666, 667, 694, 699, 775, 835, 836, 837, 874, 928, 958, 959, 960, 961, 965, 966, 967, 975], "who": [0, 69, 355, 357, 363, 368, 375, 382, 384, 821, 822, 823, 825, 827, 829, 830, 831, 980, 982, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 56, 57, 59, 63, 69, 70, 77, 79, 84, 85, 94, 102, 104, 112, 116, 118, 120, 121, 122, 126, 128, 141, 142, 143, 145, 148, 150, 153, 161, 166, 167, 168, 169, 172, 176, 177, 179, 185, 188, 189, 192, 196, 197, 198, 201, 205, 213, 214, 217, 228, 230, 235, 247, 254, 256, 257, 258, 259, 262, 263, 265, 266, 267, 276, 279, 284, 287, 289, 292, 298, 299, 300, 302, 303, 306, 307, 308, 309, 319, 322, 323, 324, 326, 328, 339, 340, 341, 344, 345, 348, 350, 354, 355, 356, 361, 362, 363, 365, 366, 367, 368, 370, 371, 374, 376, 377, 379, 380, 381, 384, 387, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 419, 420, 421, 423, 424, 427, 428, 429, 431, 433, 443, 444, 446, 448, 463, 465, 473, 477, 479, 484, 489, 513, 514, 516, 517, 522, 527, 530, 532, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 603, 613, 614, 616, 624, 625, 626, 627, 628, 631, 633, 634, 635, 637, 641, 642, 643, 644, 653, 657, 659, 662, 665, 668, 672, 675, 676, 680, 691, 694, 703, 709, 710, 718, 723, 743, 759, 760, 763, 764, 767, 775, 776, 777, 780, 781, 791, 794, 797, 801, 802, 804, 805, 806, 808, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 835, 836, 837, 839, 841, 842, 847, 848, 852, 856, 859, 863, 867, 880, 883, 886, 887, 888, 889, 898, 917, 926, 930, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 975, 976, 977, 978, 982, 983, 985, 986, 988, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "help": [0, 4, 9, 11, 16, 69, 73, 99, 105, 167, 214, 217, 257, 259, 295, 323, 326, 341, 350, 354, 355, 366, 369, 370, 371, 372, 373, 374, 376, 377, 381, 382, 383, 387, 393, 394, 397, 401, 403, 415, 517, 558, 608, 631, 635, 646, 666, 667, 673, 695, 815, 886, 887, 888, 889, 952, 956, 957, 959, 961, 962, 964, 966, 973, 978, 981, 982, 983, 985, 986, 997, 1010, 1011, 1012, 1015, 1018], "triag": [0, 357, 368, 371], "pr": [0, 130, 355, 368, 371, 376, 401, 721, 962, 1014, 1016], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 69, 70, 71, 72, 73, 74, 78, 80, 84, 85, 87, 88, 89, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 142, 143, 145, 149, 150, 151, 152, 153, 156, 160, 161, 165, 166, 167, 168, 169, 172, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 354, 355, 357, 360, 361, 363, 365, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 387, 390, 391, 393, 397, 399, 401, 402, 403, 405, 409, 413, 414, 419, 422, 425, 428, 430, 433, 435, 439, 440, 441, 443, 445, 446, 448, 450, 453, 455, 463, 464, 465, 469, 472, 473, 476, 477, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 519, 521, 522, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 595, 596, 599, 600, 601, 603, 604, 608, 609, 610, 611, 613, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 666, 667, 670, 671, 672, 673, 674, 675, 676, 682, 685, 687, 698, 702, 703, 704, 717, 723, 737, 758, 761, 765, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 809, 810, 811, 812, 813, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 835, 836, 837, 839, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 878, 879, 880, 881, 883, 884, 887, 889, 890, 891, 892, 909, 910, 914, 915, 918, 919, 927, 931, 933, 936, 951, 952, 954, 956, 957, 959, 961, 962, 963, 965, 967, 968, 969, 970, 974, 975, 977, 978, 980, 982, 984, 985, 986, 988, 991, 995, 996, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020], "arturo": [0, 37, 56, 175, 257, 259, 303, 339, 340, 341, 358, 1018, 1019], "amor": [0, 37, 56, 175, 257, 259, 303, 339, 340, 341, 358, 1018, 1019], "juan": [0, 358, 1004, 1015, 1016, 1017, 1018, 1019], "carlo": [0, 230, 358, 400, 403, 592, 622, 623, 954, 967, 1004, 1015, 1016, 1017, 1018, 1019], "alfaro": [0, 358, 1015, 1016, 1017, 1018, 1019], "jim\u00e9nez": [0, 358, 1012, 1015, 1016, 1017, 1018, 1019], "luci": [0, 262, 358, 1015, 1016, 1017, 1018, 1019], "liu": [0, 262, 358, 544, 706, 736, 962, 968, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019], "martin": [0, 358, 702, 703, 704, 958, 962, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "loyola": [0, 358, 1017, 1018], "sylvain": [0, 358, 1008, 1013, 1014, 1015, 1016, 1017, 1018], "mari\u00e9": [0, 358, 1013, 1014, 1015, 1016, 1017, 1018], "chiara": [0, 358, 359, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "marmo": [0, 358, 359, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "maxwel": [0, 358, 1014, 1017, 1018, 1019], "norbert": [0, 358, 1006, 1016, 1017, 1018], "prein": [0, 358, 1016, 1017, 1018], "reshama": [0, 352, 358, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "shaikh": [0, 352, 358, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "albert": [0, 225, 358, 1011, 1012, 1013, 1016, 1017], "around": [0, 4, 26, 37, 52, 84, 112, 121, 154, 167, 172, 259, 295, 314, 316, 317, 326, 329, 339, 340, 341, 350, 363, 365, 368, 374, 379, 393, 397, 398, 401, 403, 452, 453, 496, 525, 601, 621, 630, 685, 775, 783, 825, 827, 829, 830, 831, 859, 958, 959, 961, 962, 968, 972, 976, 982, 983, 986, 995, 997, 1008, 1009], "lauren": [0, 351, 673, 677, 959, 1016, 1019], "burk": [0, 351, 1019], "francoisgoupil": [0, 351, 1018], "longer": [0, 4, 53, 112, 167, 181, 294, 309, 368, 370, 397, 400, 401, 403, 430, 517, 957, 961, 962, 964, 967, 977, 986, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mathieu": [0, 2, 24, 48, 99, 187, 197, 218, 232, 257, 339, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1017], "blondel": [0, 2, 24, 48, 99, 187, 197, 218, 232, 257, 339, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1017], "lar": [0, 2, 14, 97, 145, 163, 174, 185, 215, 339, 340, 341, 365, 452, 453, 459, 482, 512, 518, 520, 523, 524, 526, 527, 529, 632, 633, 634, 635, 636, 637, 644, 645, 646, 659, 663, 664, 665, 666, 667, 984, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017], "buitinck": [0, 2, 14, 339, 340, 341, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "noel": [0, 2, 108, 109, 110, 111, 1004, 1005, 1006, 1007, 1008, 1016], "daw": [0, 2, 108, 109, 110, 111, 1004, 1005, 1006, 1007, 1008], "dubourg": [0, 2, 151, 155, 986, 1004, 1008], "edouard": [0, 2, 1004], "duchesnai": [0, 2, 1004], "alexand": [0, 2, 393, 398, 516, 845, 1006, 1007, 1008, 1010, 1011, 1012, 1016, 1017, 1018], "fabisch": [0, 2, 1006, 1007, 1008, 1010], "virgil": [0, 2, 9, 1004, 1005, 1007], "fritsch": [0, 2, 9, 1004, 1005, 1007], "satrajit": [0, 2, 1004, 1005], "ghosh": [0, 2, 393, 1004, 1005], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1004, 1007, 1012, 1013, 1014, 1015, 1018], "gorgolewski": [0, 2, 1004, 1007], "jaqu": [0, 2, 31, 45, 51, 53, 72, 88, 89, 100, 179, 192, 193, 194, 219, 331, 334, 1004, 1005, 1006, 1007], "grobler": [0, 2, 31, 45, 51, 53, 72, 88, 89, 100, 179, 192, 193, 194, 219, 331, 334, 1004, 1005, 1006, 1007], "brian": [0, 2, 46, 689, 962, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018], "holt": [0, 2, 1004], "arnaud": [0, 2, 1005, 1006, 1007, 1008, 1009, 1010], "joli": [0, 2, 1005, 1006, 1007, 1008, 1009, 1010], "thoui": [0, 2, 1004], "rai": [0, 2, 930, 962, 1004, 1014, 1016, 1017], "jone": [0, 2, 363, 1004], "kyle": [0, 2, 98, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016], "kastner": [0, 2, 98, 1006, 1007, 1008, 1015, 1016], "manoj": [0, 2, 42, 145, 178, 1007, 1008, 1009, 1010, 1011], "kumar": [0, 2, 42, 145, 178, 363, 393, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "robert": [0, 2, 48, 71, 145, 184, 365, 398, 509, 516, 609, 637, 702, 703, 704, 715, 845, 952, 958, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1019], "layton": [0, 2, 48, 1004, 1005, 1006, 1007, 1009], "wei": [0, 2, 976, 1004, 1005, 1008, 1009, 1010, 1011, 1013, 1017], "li": [0, 2, 317, 363, 620, 623, 677, 706, 736, 871, 951, 954, 962, 965, 972, 974, 977, 1004, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "paolo": [0, 2, 1004, 1008, 1014], "losi": [0, 2, 1004], "gill": [0, 2, 112, 113, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "loupp": [0, 2, 112, 113, 400, 536, 537, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "jarrod": [0, 2, 1013], "millman": [0, 2, 1013], "passo": [0, 2, 1004, 1005], "peter": [0, 2, 11, 16, 62, 108, 120, 122, 123, 257, 339, 340, 393, 429, 431, 438, 630, 770, 771, 958, 962, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019], "prettenhof": [0, 2, 11, 16, 108, 120, 122, 123, 257, 339, 340, 1004, 1005, 1006, 1007, 1008, 1009], "venkat": [0, 2], "raghav": [0, 2, 119, 260, 298, 1008, 1009, 1010, 1011, 1012, 1016], "rajagopalan": [0, 2, 1012, 1016], "jacob": [0, 2, 1009, 1010, 1011], "schreiber": [0, 2, 1009, 1010, 1011], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1004, 1005], "jake": [0, 2, 11, 155, 197, 217, 244, 281, 289, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018], "vanderpla": [0, 2, 11, 155, 197, 217, 244, 281, 289, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ward": [0, 2, 36, 39, 44, 52, 54, 55, 61, 67, 163, 169, 401, 423, 427, 444, 511, 832, 1004, 1007, 1009], "farlei": [0, 2, 1004], "ron": [0, 2, 243, 1004], "weiss": [0, 2, 243, 393, 672, 1004], "respons": [0, 145, 167, 192, 196, 199, 266, 339, 365, 374, 381, 392, 393, 394, 400, 403, 445, 463, 464, 465, 612, 613, 614, 655, 656, 679, 681, 683, 775, 776, 963, 969, 980, 988], "If": [0, 4, 11, 16, 27, 32, 42, 49, 70, 81, 97, 116, 121, 128, 157, 161, 166, 177, 196, 211, 213, 256, 263, 271, 281, 289, 298, 303, 326, 334, 335, 339, 340, 341, 348, 350, 354, 355, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 384, 387, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 413, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 495, 496, 500, 503, 504, 505, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 694, 695, 697, 698, 699, 706, 707, 708, 709, 710, 711, 712, 716, 718, 721, 722, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 789, 791, 794, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 907, 913, 915, 917, 919, 923, 925, 928, 930, 931, 933, 936, 937, 943, 946, 947, 948, 949, 951, 952, 954, 956, 957, 958, 959, 960, 962, 965, 966, 968, 969, 972, 974, 976, 977, 978, 979, 982, 983, 985, 988, 989, 995, 996, 997, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1018], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 93, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 134, 135, 136, 137, 141, 142, 144, 145, 148, 149, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 208, 211, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 294, 295, 297, 298, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 314, 315, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 341, 342, 344, 346, 347, 348, 353, 354, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 375, 377, 380, 381, 382, 383, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 403, 404, 405, 406, 409, 411, 412, 413, 414, 420, 421, 437, 438, 440, 442, 444, 452, 459, 461, 462, 466, 474, 484, 489, 490, 497, 512, 524, 526, 527, 528, 529, 536, 553, 555, 556, 558, 559, 564, 566, 567, 573, 576, 577, 579, 582, 584, 590, 597, 601, 602, 605, 610, 617, 619, 623, 628, 631, 632, 635, 641, 642, 644, 648, 656, 664, 666, 667, 668, 675, 676, 677, 679, 680, 692, 695, 696, 697, 702, 703, 704, 706, 708, 710, 712, 715, 716, 719, 723, 726, 731, 736, 738, 739, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 760, 761, 763, 772, 784, 785, 786, 787, 788, 789, 790, 799, 807, 809, 811, 813, 815, 819, 820, 829, 830, 831, 833, 841, 842, 845, 847, 850, 860, 861, 863, 865, 866, 868, 869, 870, 873, 877, 879, 888, 889, 890, 891, 894, 897, 898, 899, 904, 905, 914, 915, 923, 925, 929, 930, 931, 933, 934, 938, 939, 940, 944, 945, 951, 952, 954, 955, 957, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 979, 980, 981, 982, 983, 984, 985, 988, 989, 991, 992, 993, 994, 996, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "scientif": [0, 32, 134, 135, 136, 137, 230, 357, 362, 366, 379, 384, 393, 433, 443, 482, 986, 989], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 61, 63, 64, 65, 69, 70, 71, 72, 74, 77, 79, 80, 81, 85, 88, 89, 91, 94, 95, 96, 97, 99, 102, 103, 105, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 128, 130, 131, 134, 140, 141, 142, 144, 145, 148, 150, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 179, 182, 184, 185, 187, 189, 191, 193, 196, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 212, 214, 217, 218, 221, 222, 225, 226, 228, 229, 230, 232, 235, 237, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 281, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 326, 327, 328, 329, 331, 334, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 379, 380, 381, 382, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 431, 450, 451, 452, 453, 454, 455, 456, 457, 482, 504, 512, 513, 515, 518, 530, 542, 543, 544, 550, 551, 563, 564, 570, 592, 598, 608, 613, 614, 619, 621, 632, 636, 639, 640, 647, 649, 654, 655, 656, 657, 658, 673, 692, 699, 701, 706, 726, 736, 744, 761, 800, 821, 822, 823, 825, 827, 828, 829, 830, 831, 842, 851, 852, 853, 859, 863, 864, 866, 867, 868, 869, 871, 874, 878, 882, 926, 928, 951, 952, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 986, 988, 992, 993, 994, 995, 996, 997, 1001, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "would": [0, 4, 6, 9, 26, 32, 45, 53, 57, 69, 77, 79, 80, 85, 91, 99, 100, 121, 145, 148, 153, 154, 166, 167, 168, 169, 172, 186, 196, 197, 198, 211, 214, 225, 243, 252, 256, 257, 262, 264, 266, 276, 282, 294, 298, 299, 303, 309, 317, 326, 335, 339, 341, 350, 354, 363, 364, 368, 369, 370, 374, 376, 377, 379, 380, 381, 382, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 414, 446, 449, 463, 464, 465, 470, 513, 515, 517, 522, 525, 533, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 551, 564, 565, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 656, 657, 659, 660, 683, 689, 693, 694, 701, 736, 765, 769, 777, 779, 791, 804, 812, 813, 822, 830, 837, 863, 864, 866, 867, 868, 869, 870, 871, 876, 878, 879, 881, 884, 886, 887, 888, 889, 951, 952, 955, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 977, 982, 983, 986, 988, 993, 995, 997, 1001, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "appreci": [0, 368], "citat": [0, 362, 365, 379], "paper": [0, 145, 172, 256, 365, 374, 379, 393, 395, 424, 430, 459, 485, 515, 522, 544, 622, 639, 647, 648, 652, 657, 660, 673, 768, 816, 825, 828, 870, 871, 958, 962, 965, 968, 977, 997, 1004, 1011, 1012], "machin": [0, 4, 6, 8, 9, 27, 62, 141, 142, 148, 153, 164, 168, 170, 208, 237, 256, 259, 262, 291, 296, 298, 303, 308, 311, 322, 327, 334, 339, 341, 354, 355, 357, 361, 362, 363, 365, 366, 368, 371, 374, 375, 379, 380, 381, 383, 387, 391, 393, 397, 398, 400, 401, 403, 419, 421, 429, 459, 483, 485, 491, 497, 498, 499, 511, 513, 515, 522, 525, 536, 537, 538, 539, 540, 541, 545, 546, 547, 574, 575, 591, 592, 595, 600, 603, 615, 619, 620, 622, 624, 625, 626, 631, 632, 635, 636, 637, 638, 639, 640, 657, 663, 664, 673, 689, 694, 705, 715, 721, 723, 765, 768, 775, 804, 805, 819, 820, 825, 828, 835, 836, 837, 839, 857, 859, 864, 878, 879, 880, 881, 883, 884, 888, 889, 951, 952, 954, 955, 958, 959, 960, 962, 963, 965, 968, 969, 970, 972, 976, 978, 981, 982, 983, 984, 985, 986, 989, 990, 991, 993, 997, 998, 999, 1001, 1004, 1006, 1016, 1017, 1018, 1019], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 354, 356, 362, 366, 368, 369, 370, 371, 372, 373, 376, 377, 379, 381, 382, 384, 394, 401, 477, 489, 490, 562, 680, 788, 853, 930, 962, 972, 978, 980, 983, 985, 986, 988, 989, 991, 997, 999, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "et": [0, 11, 77, 78, 108, 109, 123, 184, 289, 365, 390, 393, 395, 398, 400, 401, 402, 432, 479, 500, 501, 509, 516, 522, 525, 544, 663, 664, 700, 701, 814, 816, 836, 837, 871, 914, 915, 958, 959, 962, 968, 972, 974, 977, 978, 1012], "al": [0, 11, 77, 78, 108, 109, 123, 184, 289, 365, 390, 393, 395, 398, 400, 401, 402, 432, 479, 500, 501, 509, 516, 522, 525, 544, 663, 664, 700, 701, 814, 816, 836, 837, 871, 914, 915, 958, 959, 962, 968, 972, 974, 977, 978, 1012, 1017], "jmlr": [0, 393, 647, 648, 657, 685, 958, 977], "12": [0, 4, 6, 14, 15, 40, 42, 43, 53, 55, 56, 72, 73, 84, 117, 118, 122, 151, 152, 153, 161, 162, 166, 167, 169, 170, 176, 182, 196, 204, 211, 214, 217, 220, 221, 223, 225, 226, 228, 229, 235, 238, 239, 243, 244, 255, 256, 258, 259, 262, 268, 272, 302, 303, 311, 334, 341, 365, 366, 373, 380, 382, 393, 397, 401, 425, 428, 430, 463, 464, 465, 466, 513, 515, 522, 551, 645, 650, 652, 666, 667, 670, 673, 674, 775, 776, 778, 795, 798, 810, 831, 847, 951, 952, 958, 960, 963, 972, 976, 977, 980, 988, 993, 1002, 1005, 1007, 1011, 1012, 1014, 1015], "pp": [0, 62, 255, 365, 393, 395, 401, 404, 405, 426, 429, 433, 443, 492, 514, 515, 522, 571, 616, 624, 645, 666, 667, 701, 706, 710, 720, 736, 749, 763, 814, 816, 818, 835, 855, 866, 955, 962, 964, 965, 975], "2825": 0, "2830": 0, "2011": [0, 47, 167, 218, 374, 398, 401, 516, 519, 521, 522, 528, 571, 608, 619, 639, 710, 952, 966, 976, 981, 1004], "bibtex": 0, "entri": [0, 16, 70, 74, 128, 161, 166, 167, 252, 306, 340, 350, 372, 374, 376, 380, 381, 390, 391, 393, 398, 400, 403, 444, 453, 512, 513, 518, 526, 527, 542, 543, 569, 572, 575, 592, 601, 613, 619, 621, 628, 632, 634, 636, 637, 640, 642, 644, 645, 646, 654, 656, 663, 664, 666, 667, 680, 685, 688, 690, 693, 696, 697, 699, 706, 709, 710, 711, 714, 715, 718, 723, 736, 738, 739, 763, 765, 768, 769, 770, 771, 790, 803, 819, 820, 827, 828, 829, 830, 831, 850, 856, 867, 948, 951, 952, 958, 962, 965, 972, 977, 983, 988, 1011, 1014, 1015, 1017], "articl": [0, 17, 69, 339, 363, 367, 368, 376, 397, 406, 456, 686, 958, 962, 997, 1017], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 77, 78, 80, 81, 84, 85, 90, 94, 95, 96, 97, 98, 102, 103, 104, 110, 111, 112, 116, 117, 118, 121, 122, 124, 127, 130, 131, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 166, 175, 176, 178, 180, 181, 183, 184, 185, 188, 189, 195, 196, 198, 200, 201, 202, 204, 205, 210, 213, 214, 217, 218, 219, 225, 229, 230, 231, 232, 233, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 259, 260, 261, 265, 266, 270, 271, 278, 279, 282, 283, 284, 285, 287, 288, 289, 298, 302, 303, 316, 319, 322, 323, 324, 325, 326, 329, 335, 336, 339, 345, 346, 347, 367, 368, 372, 376, 394, 962, 985, 993], "p": [0, 11, 13, 24, 26, 27, 41, 60, 79, 80, 84, 91, 102, 120, 141, 151, 172, 208, 213, 214, 217, 219, 229, 244, 256, 262, 263, 289, 362, 363, 365, 366, 373, 376, 390, 391, 393, 395, 396, 398, 400, 402, 403, 404, 406, 424, 426, 428, 431, 438, 450, 452, 455, 456, 459, 479, 509, 515, 519, 521, 522, 528, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 545, 546, 547, 571, 573, 574, 575, 576, 577, 579, 580, 581, 585, 586, 587, 588, 589, 590, 596, 597, 608, 621, 624, 669, 671, 673, 675, 680, 686, 696, 704, 721, 732, 766, 768, 779, 785, 786, 787, 790, 804, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 835, 839, 840, 855, 866, 872, 888, 889, 890, 955, 956, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 972, 976, 977, 980, 992, 995, 1004, 1005, 1007, 1010, 1012, 1019], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 57, 63, 66, 70, 74, 85, 97, 112, 115, 116, 118, 121, 128, 129, 136, 139, 141, 144, 145, 146, 148, 154, 155, 157, 163, 165, 166, 167, 168, 172, 180, 182, 185, 196, 197, 198, 206, 214, 218, 229, 231, 234, 238, 246, 254, 256, 257, 258, 259, 262, 263, 265, 266, 268, 276, 292, 293, 294, 300, 303, 306, 308, 310, 314, 315, 334, 339, 340, 341, 350, 363, 368, 369, 370, 372, 374, 379, 391, 394, 398, 400, 401, 402, 403, 468, 489, 490, 512, 513, 518, 519, 547, 562, 563, 564, 573, 576, 577, 579, 580, 581, 585, 586, 587, 588, 589, 590, 598, 608, 613, 616, 639, 694, 703, 706, 709, 710, 736, 763, 764, 767, 768, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 803, 836, 837, 841, 850, 853, 854, 858, 859, 893, 898, 899, 954, 957, 966, 969, 970, 972, 976, 1006, 1012, 1013, 1014, 1016, 1018], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 64, 69, 72, 81, 85, 102, 112, 113, 120, 121, 128, 135, 148, 149, 150, 151, 153, 155, 156, 157, 161, 165, 178, 181, 196, 197, 198, 214, 218, 222, 231, 241, 256, 260, 261, 267, 274, 282, 298, 303, 317, 333, 341, 350, 354, 360, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 379, 381, 387, 391, 392, 393, 395, 397, 398, 400, 401, 402, 403, 405, 484, 509, 512, 514, 515, 518, 522, 536, 537, 538, 539, 540, 545, 546, 548, 549, 550, 551, 562, 563, 569, 570, 572, 574, 575, 578, 585, 592, 598, 603, 604, 611, 614, 615, 645, 655, 658, 661, 667, 673, 678, 701, 708, 718, 720, 743, 765, 777, 780, 781, 783, 791, 795, 800, 801, 802, 803, 806, 809, 814, 818, 821, 822, 823, 826, 828, 829, 830, 831, 835, 842, 844, 849, 852, 855, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 878, 886, 887, 888, 889, 914, 915, 930, 951, 952, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 976, 977, 978, 983, 985, 986, 997, 1004, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 59, 67, 74, 77, 80, 85, 91, 95, 96, 97, 102, 110, 111, 115, 116, 118, 127, 131, 134, 135, 136, 137, 142, 143, 144, 148, 151, 153, 155, 156, 157, 163, 166, 167, 184, 197, 206, 210, 211, 214, 218, 256, 257, 259, 263, 270, 292, 298, 300, 303, 306, 308, 311, 315, 317, 319, 326, 331, 339, 340, 341, 346, 348, 350, 354, 356, 357, 362, 363, 365, 366, 368, 370, 371, 373, 376, 379, 380, 381, 382, 383, 388, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414, 419, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 469, 471, 472, 473, 475, 478, 481, 482, 483, 484, 485, 489, 491, 492, 493, 494, 495, 501, 503, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 562, 569, 570, 571, 572, 574, 575, 578, 583, 588, 589, 592, 598, 601, 608, 611, 613, 614, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 656, 657, 658, 659, 660, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 685, 686, 691, 692, 693, 697, 698, 700, 702, 703, 704, 705, 706, 711, 716, 717, 720, 723, 724, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 744, 746, 747, 754, 755, 756, 757, 758, 761, 768, 771, 773, 775, 776, 777, 780, 781, 783, 788, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 846, 850, 855, 859, 862, 863, 864, 866, 867, 868, 869, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 891, 913, 914, 915, 947, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 975, 976, 977, 978, 981, 982, 983, 988, 989, 995, 996, 997, 999, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 57, 67, 69, 74, 76, 79, 82, 83, 84, 86, 94, 96, 97, 100, 113, 121, 163, 164, 167, 169, 170, 174, 185, 196, 211, 215, 229, 242, 243, 246, 247, 249, 252, 271, 272, 306, 323, 340, 350, 355, 360, 365, 368, 374, 376, 381, 390, 392, 395, 396, 398, 400, 401, 414, 423, 427, 433, 443, 444, 445, 446, 451, 454, 455, 456, 457, 458, 463, 464, 465, 477, 493, 505, 511, 512, 518, 522, 526, 527, 531, 533, 535, 537, 539, 541, 543, 545, 546, 549, 551, 562, 570, 574, 575, 581, 587, 592, 611, 615, 616, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 659, 660, 669, 676, 680, 682, 685, 698, 716, 717, 719, 734, 735, 737, 768, 773, 777, 782, 789, 791, 801, 805, 807, 808, 809, 812, 813, 814, 822, 830, 832, 835, 837, 839, 840, 843, 846, 852, 853, 854, 859, 862, 872, 878, 879, 880, 881, 883, 884, 887, 889, 893, 956, 957, 958, 959, 962, 963, 964, 967, 970, 976, 977, 979, 999, 1004, 1007, 1008, 1009, 1012, 1014, 1015, 1018, 1019], "b": [0, 8, 9, 10, 24, 26, 58, 64, 79, 100, 102, 109, 111, 112, 117, 121, 122, 131, 134, 135, 149, 150, 151, 156, 161, 178, 181, 196, 197, 202, 214, 232, 234, 255, 259, 261, 266, 270, 274, 309, 317, 350, 363, 365, 368, 372, 373, 374, 390, 391, 393, 396, 397, 398, 401, 419, 463, 481, 522, 527, 547, 569, 570, 571, 572, 588, 589, 591, 592, 609, 627, 628, 629, 630, 639, 650, 653, 655, 657, 661, 668, 669, 686, 700, 710, 711, 770, 771, 788, 789, 826, 852, 854, 855, 858, 859, 866, 893, 915, 916, 925, 952, 954, 958, 959, 960, 962, 965, 967, 972, 976, 977, 992, 1004, 1012, 1015, 1017, 1018, 1019], "o": [0, 17, 19, 27, 30, 38, 49, 59, 60, 62, 63, 81, 84, 90, 96, 125, 156, 184, 189, 194, 196, 211, 231, 241, 256, 258, 265, 298, 299, 303, 307, 310, 318, 344, 354, 363, 365, 368, 384, 393, 395, 398, 400, 404, 406, 426, 428, 429, 431, 454, 456, 515, 585, 608, 647, 648, 673, 807, 835, 850, 890, 930, 931, 954, 956, 958, 959, 962, 963, 965, 966, 976, 977, 978, 1004, 1007, 1010, 1012, 1013, 1016, 1017, 1019], "m": [0, 8, 9, 11, 19, 26, 27, 44, 57, 58, 62, 63, 64, 79, 80, 94, 131, 153, 178, 180, 196, 214, 256, 260, 289, 318, 322, 333, 339, 354, 355, 362, 363, 365, 366, 372, 374, 381, 384, 390, 391, 393, 395, 398, 400, 402, 404, 426, 427, 431, 438, 454, 455, 481, 494, 509, 513, 515, 517, 522, 620, 626, 630, 645, 652, 666, 667, 670, 674, 689, 697, 706, 721, 736, 738, 739, 775, 776, 825, 850, 915, 941, 942, 952, 954, 956, 958, 959, 960, 962, 963, 964, 965, 966, 970, 972, 976, 978, 986, 1012, 1013, 1014, 1015, 1018, 1019, 1020], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 64, 74, 77, 78, 79, 80, 85, 94, 102, 105, 109, 112, 113, 117, 121, 122, 123, 131, 141, 149, 150, 151, 155, 156, 157, 160, 161, 166, 178, 180, 181, 185, 196, 203, 206, 214, 222, 228, 231, 241, 244, 247, 255, 256, 259, 261, 262, 263, 266, 269, 271, 274, 278, 283, 287, 289, 310, 328, 341, 350, 363, 365, 369, 372, 379, 381, 390, 391, 393, 395, 396, 397, 398, 400, 401, 410, 414, 419, 432, 434, 446, 450, 455, 459, 463, 464, 465, 479, 485, 494, 501, 515, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 569, 570, 571, 572, 587, 590, 591, 592, 608, 616, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 666, 667, 673, 677, 697, 702, 703, 704, 708, 710, 761, 765, 768, 777, 791, 794, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 828, 829, 830, 836, 837, 850, 855, 866, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 891, 928, 952, 954, 956, 958, 959, 962, 963, 964, 965, 966, 969, 970, 972, 976, 977, 978, 982, 997, 1004, 1008, 1011, 1014, 1015, 1016, 1017, 1019], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 59, 60, 62, 69, 70, 81, 88, 91, 94, 97, 102, 104, 119, 148, 156, 196, 204, 210, 212, 214, 222, 226, 228, 229, 230, 231, 244, 255, 256, 264, 274, 282, 283, 289, 294, 314, 315, 318, 325, 326, 331, 341, 362, 363, 365, 370, 374, 379, 391, 393, 395, 396, 398, 400, 401, 403, 404, 426, 428, 433, 441, 444, 469, 474, 484, 507, 515, 517, 538, 539, 546, 547, 562, 563, 571, 595, 596, 600, 603, 604, 625, 626, 629, 650, 651, 652, 661, 669, 670, 673, 674, 678, 680, 686, 689, 702, 703, 704, 706, 736, 744, 748, 758, 761, 768, 789, 814, 816, 818, 819, 820, 835, 846, 850, 852, 855, 866, 871, 888, 889, 893, 954, 956, 958, 959, 960, 961, 962, 964, 970, 972, 974, 977, 978, 985, 993, 994, 995, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018], "perrot": [0, 1004], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 56, 60, 69, 77, 79, 80, 81, 84, 85, 97, 99, 100, 112, 118, 120, 121, 124, 134, 141, 144, 145, 156, 165, 166, 167, 172, 176, 185, 186, 196, 197, 198, 214, 217, 218, 231, 252, 256, 257, 259, 261, 262, 270, 271, 282, 289, 300, 303, 306, 308, 334, 341, 346, 347, 348, 350, 354, 355, 356, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 379, 380, 381, 384, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 419, 421, 423, 426, 427, 428, 431, 435, 444, 450, 451, 452, 453, 454, 456, 457, 477, 479, 481, 482, 483, 484, 505, 514, 516, 517, 519, 521, 522, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 558, 562, 563, 569, 570, 571, 572, 574, 575, 578, 584, 585, 587, 588, 589, 590, 591, 592, 598, 603, 604, 611, 614, 615, 616, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 668, 669, 671, 673, 675, 678, 680, 682, 685, 686, 689, 690, 708, 709, 710, 711, 718, 721, 722, 735, 743, 747, 765, 768, 775, 776, 777, 780, 781, 783, 790, 791, 795, 800, 801, 802, 803, 804, 806, 818, 819, 820, 821, 822, 823, 825, 829, 830, 831, 835, 836, 837, 842, 844, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 878, 879, 885, 886, 887, 888, 889, 893, 909, 914, 915, 917, 920, 921, 930, 937, 948, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 972, 973, 976, 977, 978, 983, 985, 986, 995, 996, 997, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "journal": [0, 80, 167, 256, 262, 362, 363, 365, 393, 395, 400, 433, 443, 454, 515, 522, 608, 616, 626, 670, 673, 674, 686, 696, 711, 714, 715, 738, 739, 766, 804, 809, 855, 866, 951, 952, 956, 958, 959, 960, 963, 969, 974, 976, 977], "research": [0, 165, 256, 262, 363, 365, 379, 393, 482, 494, 616, 626, 673, 715, 804, 809, 951, 959, 963, 965, 977, 982, 983, 986], "volum": [0, 65, 78, 153, 363, 365, 393, 395, 403, 454, 515, 749, 958, 977, 986], "page": [0, 12, 17, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 217, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 354, 363, 365, 368, 370, 372, 374, 376, 382, 392, 393, 395, 454, 497, 498, 499, 609, 625, 809, 873, 915, 952, 962, 963, 988, 997, 1002, 1004, 1008, 1009], "want": [0, 4, 12, 24, 25, 26, 63, 70, 145, 161, 166, 196, 197, 198, 247, 256, 270, 294, 319, 323, 339, 340, 350, 354, 355, 356, 366, 367, 369, 370, 372, 373, 374, 379, 380, 381, 382, 384, 387, 391, 392, 393, 394, 395, 400, 401, 402, 481, 484, 485, 491, 516, 530, 635, 636, 637, 639, 640, 647, 649, 655, 656, 657, 744, 825, 828, 844, 851, 871, 878, 951, 958, 961, 962, 963, 966, 968, 972, 973, 977, 982, 983, 988, 996, 1004, 1018], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 64, 65, 77, 79, 81, 85, 90, 91, 99, 117, 121, 134, 145, 148, 153, 155, 166, 167, 169, 172, 175, 185, 209, 213, 214, 219, 225, 233, 236, 238, 241, 246, 247, 255, 259, 261, 263, 265, 276, 278, 282, 283, 300, 309, 317, 323, 336, 339, 340, 344, 348, 350, 355, 356, 361, 362, 363, 364, 368, 369, 370, 372, 373, 376, 379, 380, 381, 382, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 409, 422, 423, 424, 426, 427, 431, 435, 437, 441, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 478, 484, 504, 512, 514, 515, 518, 519, 521, 522, 523, 525, 531, 536, 537, 538, 539, 540, 541, 545, 546, 547, 564, 566, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 625, 626, 652, 653, 655, 666, 667, 668, 669, 673, 677, 689, 705, 709, 710, 716, 717, 721, 758, 761, 763, 775, 776, 777, 800, 807, 808, 821, 822, 823, 825, 826, 827, 829, 830, 831, 838, 839, 843, 848, 851, 852, 854, 870, 871, 874, 878, 879, 886, 888, 898, 899, 904, 910, 930, 932, 951, 957, 958, 959, 961, 962, 963, 964, 965, 968, 969, 970, 975, 976, 977, 978, 982, 986, 988, 990, 992, 995, 996, 997, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "api": [0, 12, 50, 163, 224, 226, 235, 239, 276, 340, 341, 356, 357, 361, 362, 368, 369, 371, 372, 377, 378, 379, 380, 382, 384, 387, 398, 400, 401, 411, 412, 415, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 477, 485, 489, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 544, 545, 547, 548, 549, 550, 551, 560, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 639, 658, 669, 670, 671, 672, 775, 776, 780, 781, 805, 823, 825, 827, 828, 831, 835, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 882, 883, 928, 930, 951, 960, 961, 962, 965, 972, 976, 982, 983, 986, 988, 992, 994, 999, 1001, 1002, 1003, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "design": [0, 13, 79, 128, 151, 165, 166, 177, 246, 298, 348, 356, 362, 368, 373, 379, 380, 381, 382, 383, 393, 400, 402, 403, 496, 509, 613, 614, 629, 646, 650, 657, 661, 666, 777, 795, 796, 814, 816, 952, 958, 959, 962, 963, 972, 982, 983, 986, 990, 1006, 1013], "mai": [0, 8, 19, 25, 39, 44, 46, 55, 70, 85, 94, 108, 118, 145, 152, 154, 156, 157, 166, 172, 176, 185, 202, 222, 259, 261, 263, 264, 292, 303, 315, 326, 339, 340, 341, 350, 354, 355, 356, 360, 362, 363, 364, 365, 367, 368, 370, 372, 373, 376, 379, 381, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 414, 421, 422, 423, 425, 426, 427, 428, 430, 432, 433, 434, 435, 440, 443, 446, 450, 453, 463, 464, 465, 468, 469, 470, 477, 489, 490, 496, 515, 516, 519, 521, 525, 528, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 555, 562, 575, 578, 583, 591, 592, 598, 601, 615, 616, 618, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 657, 658, 659, 660, 662, 665, 667, 669, 670, 672, 673, 674, 676, 678, 686, 693, 696, 697, 699, 700, 702, 703, 704, 706, 718, 736, 743, 765, 766, 777, 779, 780, 781, 782, 791, 792, 793, 794, 796, 797, 800, 804, 807, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 827, 829, 830, 831, 837, 838, 839, 842, 844, 854, 856, 857, 858, 859, 861, 867, 870, 871, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 896, 918, 919, 930, 951, 952, 954, 956, 958, 959, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 983, 988, 994, 995, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "consid": [0, 4, 12, 13, 25, 39, 65, 70, 80, 94, 98, 118, 119, 121, 140, 144, 145, 161, 167, 196, 198, 256, 259, 263, 267, 276, 282, 283, 298, 308, 323, 331, 334, 339, 350, 354, 355, 356, 360, 367, 368, 370, 374, 376, 379, 381, 389, 393, 398, 399, 400, 401, 402, 403, 404, 405, 420, 426, 431, 438, 455, 489, 490, 502, 514, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 566, 567, 569, 570, 572, 574, 588, 589, 601, 613, 614, 627, 633, 639, 640, 641, 643, 652, 660, 669, 670, 671, 673, 674, 675, 677, 681, 683, 686, 688, 690, 696, 706, 710, 714, 736, 766, 768, 772, 821, 822, 823, 825, 827, 829, 830, 831, 834, 836, 837, 842, 852, 873, 874, 883, 884, 886, 887, 888, 889, 946, 951, 957, 958, 959, 960, 962, 963, 965, 968, 969, 970, 972, 976, 977, 978, 983, 988, 995, 1007, 1008, 1012, 1016, 1017, 1019], "softwar": [0, 354, 365, 368, 376, 379, 381, 401, 608, 616, 639, 952, 986], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 356, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 485, 487, 488, 489, 490, 491, 493, 496, 500, 502, 504, 505, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 696, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 743, 744, 748, 749, 751, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 907, 908, 909, 910, 913, 915, 917, 918, 919, 920, 922, 924, 925, 926, 927, 929, 930, 931, 933, 936, 950, 951, 952, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 986, 989, 991, 992, 993, 994, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "2013": [0, 172, 365, 397, 398, 517, 706, 736, 954, 962, 981, 1005, 1006], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 65, 66, 80, 112, 168, 188, 191, 205, 206, 261, 262, 263, 293, 302, 334, 365, 366, 374, 376, 390, 391, 393, 397, 398, 400, 403, 455, 497, 498, 499, 519, 521, 528, 536, 537, 538, 539, 546, 547, 571, 588, 589, 591, 592, 596, 600, 603, 604, 615, 629, 630, 639, 650, 653, 655, 661, 668, 670, 673, 674, 686, 696, 705, 706, 711, 736, 766, 816, 850, 886, 887, 888, 889, 951, 956, 958, 959, 962, 964, 965, 966, 970, 974, 976, 978, 996, 1007, 1012, 1016, 1017, 1018, 1019], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 401, 814, 964, 981], "languag": [0, 341, 373, 387, 398, 401, 976, 982, 983, 986, 989], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 58, 59, 61, 64, 67, 68, 70, 71, 73, 75, 78, 80, 89, 91, 93, 94, 97, 98, 103, 105, 106, 111, 112, 114, 117, 118, 119, 120, 121, 125, 126, 127, 129, 131, 134, 135, 136, 137, 142, 147, 148, 149, 150, 152, 155, 157, 158, 160, 163, 166, 167, 174, 175, 178, 179, 181, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 225, 228, 229, 230, 233, 235, 238, 241, 242, 243, 244, 245, 247, 250, 254, 256, 258, 259, 260, 261, 264, 270, 274, 276, 279, 280, 282, 283, 284, 285, 286, 287, 289, 293, 294, 297, 299, 300, 301, 304, 306, 308, 310, 311, 315, 316, 318, 319, 322, 323, 325, 330, 331, 334, 339, 345, 346, 347, 348, 353, 355, 357, 360, 361, 362, 364, 365, 368, 370, 371, 374, 375, 376, 377, 380, 384, 387, 389, 390, 391, 392, 395, 398, 399, 400, 401, 404, 405, 406, 408, 410, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 501, 502, 503, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 596, 598, 599, 603, 604, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 691, 692, 694, 698, 699, 701, 705, 707, 708, 709, 710, 711, 714, 716, 717, 718, 720, 721, 722, 734, 735, 737, 741, 743, 744, 749, 763, 764, 765, 767, 768, 769, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 902, 903, 904, 914, 915, 925, 928, 933, 934, 936, 937, 938, 939, 940, 943, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 989, 990, 992, 993, 995, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mine": [0, 256, 340, 363, 393, 404, 426, 492, 544, 701, 714, 720, 763, 958, 962, 968, 974], "108": [0, 8, 236, 239, 1005], "122": [0, 111, 153, 161, 167, 200, 230, 374, 963], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 56, 61, 64, 69, 73, 79, 80, 96, 97, 112, 114, 115, 116, 121, 122, 124, 126, 136, 137, 145, 148, 154, 161, 165, 167, 168, 169, 191, 197, 198, 210, 217, 218, 219, 225, 229, 241, 247, 254, 258, 262, 263, 271, 282, 283, 292, 294, 300, 302, 303, 317, 323, 325, 326, 339, 340, 346, 347, 354, 363, 365, 368, 373, 376, 377, 379, 380, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 426, 428, 430, 431, 433, 450, 463, 464, 465, 534, 535, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 625, 651, 652, 660, 670, 673, 674, 706, 711, 722, 726, 736, 769, 770, 785, 787, 819, 820, 824, 853, 854, 858, 880, 882, 883, 886, 887, 888, 889, 931, 951, 956, 957, 958, 959, 961, 962, 965, 966, 968, 970, 972, 974, 977, 978, 979, 982, 983, 988, 989, 991, 997, 1004, 1005, 1007, 1008, 1012, 1015, 1016, 1017, 1018, 1019], "qualiti": [0, 6, 24, 37, 46, 48, 49, 57, 97, 117, 166, 202, 250, 254, 263, 264, 265, 368, 376, 379, 381, 387, 388, 392, 393, 395, 398, 433, 443, 450, 455, 538, 539, 540, 541, 545, 546, 723, 791, 870, 871, 886, 887, 888, 889, 915, 957, 959, 967, 974, 978, 982, 983, 986, 992, 993, 999], "png": [0, 32, 890], "svg": 0, "logo": [0, 397, 784], "avail": [0, 5, 11, 12, 13, 41, 55, 56, 97, 116, 119, 120, 145, 148, 153, 157, 165, 166, 167, 185, 196, 204, 214, 218, 234, 253, 254, 259, 260, 263, 281, 282, 283, 289, 303, 306, 307, 308, 309, 311, 317, 319, 350, 354, 362, 363, 365, 366, 367, 368, 369, 373, 377, 380, 381, 384, 387, 390, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 428, 431, 432, 433, 434, 450, 451, 452, 453, 454, 455, 456, 457, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 489, 516, 530, 536, 537, 538, 539, 540, 541, 545, 546, 569, 572, 574, 575, 591, 592, 613, 614, 638, 646, 651, 653, 654, 655, 657, 670, 677, 680, 712, 713, 777, 780, 781, 791, 801, 802, 807, 808, 810, 811, 812, 813, 825, 836, 837, 846, 855, 862, 866, 871, 922, 923, 930, 952, 956, 959, 961, 962, 963, 964, 965, 968, 972, 975, 976, 977, 981, 982, 983, 986, 988, 992, 997, 999, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1020], "doc": [0, 4, 8, 19, 339, 341, 355, 366, 368, 372, 373, 376, 381, 384, 386, 387, 401, 569, 570, 572, 758, 761, 770, 771, 802, 997, 1004, 1008, 1018], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 362, 365, 367, 368, 369, 371, 372, 374, 376, 377, 379, 380, 384, 387, 390, 394, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 959, 972, 978, 982, 986, 996, 997, 1014, 1018], "directori": [0, 8, 278, 362, 366, 368, 370, 374, 376, 381, 384, 394, 423, 427, 431, 467, 480, 839, 840, 1018], "driven": [0, 982, 986], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 59, 71, 74, 77, 81, 84, 99, 102, 112, 114, 118, 121, 122, 128, 142, 145, 148, 153, 154, 167, 168, 177, 185, 196, 218, 221, 222, 225, 231, 256, 263, 270, 274, 276, 281, 293, 298, 308, 334, 339, 340, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 370, 374, 376, 379, 381, 387, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 422, 425, 428, 430, 432, 435, 440, 477, 489, 513, 532, 548, 562, 563, 564, 570, 587, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 611, 613, 614, 619, 624, 636, 637, 653, 668, 673, 676, 681, 743, 745, 777, 780, 781, 791, 802, 806, 807, 818, 836, 837, 842, 851, 852, 857, 880, 881, 883, 894, 931, 951, 952, 955, 956, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 972, 976, 977, 978, 988, 992, 995, 1013, 1014, 1016, 1017], "institut": [0, 365, 965], "privat": [0, 372, 381, 382, 894, 986, 1004, 1012, 1014, 1015, 1017, 1018], "grant": [0, 368], "assur": [0, 381, 775, 776, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "sustain": 0, "like": [0, 4, 12, 19, 52, 57, 59, 69, 88, 91, 97, 102, 104, 111, 115, 121, 124, 148, 154, 166, 176, 196, 247, 256, 259, 260, 263, 264, 270, 285, 295, 298, 303, 306, 317, 326, 339, 340, 350, 354, 356, 360, 362, 363, 366, 367, 368, 370, 372, 375, 376, 377, 379, 380, 381, 387, 389, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 496, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 560, 562, 563, 564, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 748, 749, 750, 752, 753, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 903, 904, 912, 917, 925, 926, 930, 933, 934, 935, 947, 949, 951, 954, 956, 957, 958, 959, 962, 964, 965, 966, 968, 969, 972, 977, 978, 982, 983, 985, 986, 988, 995, 997, 1001, 1004, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "thank": [0, 4, 17, 25, 85, 168, 172, 196, 265, 339, 340, 367, 376, 986, 1004, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "funder": 0, "member": [0, 339, 340, 363, 368, 371, 382, 393, 408, 424, 429, 432, 434, 473, 536, 537, 544, 562, 639, 640, 647, 649, 657, 658, 659, 685, 686, 696, 698, 711, 716, 717, 737, 766, 773, 777, 878, 958, 965, 988, 1004, 1016, 1019], "consortium": [0, 986], "foundat": [0, 128, 368, 965], "face": [0, 3, 15, 36, 53, 67, 93, 97, 106, 116, 163, 224, 239, 361, 368, 372, 393, 398, 400, 402, 430, 453, 474, 475, 476, 502, 513, 514, 518, 520, 521, 522, 539, 565, 638, 654, 694, 791, 805, 822, 859, 883, 901, 965, 978, 979, 980, 991, 996, 999, 1004, 1012], "2022": [0, 355, 400, 686, 1018, 1019], "microsoft": [0, 12, 366, 369, 384], "m\u00fcller": [0, 31, 299, 300, 382, 398, 516, 845, 966, 972, 976, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018], "2020": [0, 363, 1014, 1015, 1016, 1017], "quansight": 0, "lab": [0, 363, 449, 517, 876, 986, 1015], "2021": [0, 366, 368, 384, 652, 1016, 1017], "columbia": 0, "univers": [0, 156, 339, 363, 365, 371, 393, 398, 401, 571, 768, 814, 818, 873, 958, 960, 962, 964], "2016": [0, 222, 362, 393, 951, 1009, 1010], "sydnei": 0, "2017": [0, 256, 362, 391, 393, 404, 426, 962, 1010, 1011], "receiv": [0, 19, 134, 163, 249, 253, 272, 341, 350, 368, 370, 376, 381, 397, 400, 485, 639, 683, 687, 689, 707, 762, 768, 769, 796, 805, 807, 808, 846, 883, 963, 966, 967, 976, 1014, 1015], "improv": [0, 4, 24, 25, 33, 77, 78, 81, 99, 105, 109, 110, 117, 119, 120, 121, 123, 128, 141, 161, 166, 172, 182, 196, 204, 214, 257, 259, 276, 295, 303, 329, 340, 350, 355, 366, 371, 373, 374, 376, 377, 379, 381, 382, 387, 392, 398, 400, 402, 430, 431, 512, 513, 515, 518, 519, 520, 522, 523, 524, 527, 535, 538, 539, 540, 541, 542, 543, 545, 546, 583, 591, 592, 624, 633, 645, 647, 648, 649, 653, 654, 655, 656, 657, 659, 666, 668, 673, 709, 710, 764, 767, 768, 828, 836, 837, 853, 855, 866, 886, 887, 889, 915, 956, 958, 959, 962, 965, 966, 976, 977, 978, 981, 982, 983, 986, 995, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 66, 105, 125, 130, 157, 165, 166, 181, 191, 196, 197, 198, 214, 220, 229, 234, 253, 256, 259, 263, 265, 266, 298, 307, 308, 339, 348, 354, 363, 367, 368, 370, 375, 377, 381, 382, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 405, 420, 421, 424, 428, 430, 445, 448, 475, 479, 481, 485, 489, 490, 491, 506, 508, 510, 511, 512, 514, 516, 517, 518, 523, 526, 527, 529, 530, 531, 542, 543, 544, 573, 574, 575, 576, 577, 579, 580, 581, 587, 591, 592, 601, 613, 624, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 650, 653, 654, 655, 656, 658, 661, 662, 663, 664, 665, 668, 671, 679, 681, 683, 688, 690, 693, 694, 696, 699, 701, 704, 707, 709, 710, 711, 715, 716, 718, 719, 720, 721, 722, 723, 724, 732, 734, 738, 762, 763, 764, 767, 768, 769, 775, 776, 780, 781, 802, 819, 820, 825, 842, 843, 846, 852, 855, 858, 862, 866, 870, 871, 873, 874, 878, 879, 882, 883, 884, 895, 913, 915, 927, 929, 953, 954, 958, 960, 962, 963, 965, 966, 967, 969, 972, 977, 993, 995, 997, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 53, 57, 71, 77, 79, 81, 94, 97, 98, 104, 112, 114, 117, 121, 128, 145, 153, 154, 155, 160, 161, 166, 167, 168, 176, 184, 185, 193, 196, 210, 213, 214, 217, 218, 225, 230, 251, 252, 254, 256, 257, 259, 262, 263, 276, 279, 282, 283, 284, 286, 287, 289, 298, 302, 303, 306, 322, 326, 334, 339, 340, 341, 348, 350, 354, 355, 356, 361, 363, 365, 366, 368, 370, 372, 373, 374, 376, 377, 379, 380, 381, 384, 387, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 416, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 433, 440, 443, 448, 450, 455, 459, 466, 468, 477, 489, 496, 505, 514, 516, 517, 519, 521, 522, 530, 531, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 570, 577, 583, 587, 588, 589, 592, 595, 596, 600, 601, 603, 604, 608, 611, 612, 613, 614, 622, 623, 624, 627, 628, 631, 633, 634, 635, 636, 639, 641, 642, 643, 644, 647, 648, 649, 651, 652, 653, 655, 657, 658, 659, 662, 663, 664, 665, 668, 670, 672, 673, 674, 676, 677, 678, 679, 681, 683, 685, 689, 690, 691, 697, 703, 714, 722, 723, 727, 738, 739, 742, 745, 761, 763, 777, 779, 780, 781, 783, 789, 790, 791, 815, 816, 821, 822, 823, 825, 828, 829, 830, 831, 835, 836, 837, 841, 842, 843, 847, 848, 849, 853, 856, 858, 867, 870, 871, 875, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 902, 915, 930, 933, 936, 938, 939, 940, 941, 942, 943, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 975, 976, 977, 978, 982, 986, 988, 994, 995, 996, 997, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 59, 80, 94, 111, 115, 116, 126, 128, 148, 154, 166, 167, 175, 182, 184, 185, 188, 197, 205, 218, 222, 226, 227, 246, 256, 257, 258, 262, 286, 289, 294, 298, 302, 306, 307, 309, 311, 324, 331, 339, 340, 344, 345, 350, 354, 356, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 376, 377, 379, 380, 381, 383, 384, 387, 389, 390, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 405, 413, 419, 422, 424, 425, 426, 428, 430, 431, 433, 474, 475, 477, 479, 482, 513, 514, 515, 519, 521, 528, 532, 533, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 569, 572, 574, 575, 582, 586, 592, 608, 613, 614, 615, 624, 627, 628, 633, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 652, 654, 657, 658, 659, 662, 675, 680, 692, 715, 721, 744, 754, 758, 768, 772, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 796, 797, 798, 808, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 849, 850, 854, 856, 874, 878, 879, 882, 883, 886, 887, 888, 889, 893, 904, 909, 923, 938, 939, 940, 951, 952, 954, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 979, 982, 983, 986, 988, 992, 995, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "2012": [0, 80, 391, 400, 536, 537, 544, 620, 723, 951, 955, 962, 981, 1004], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 354, 355, 356, 361, 363, 366, 368, 373, 376, 379, 381, 382, 384, 392, 393, 395, 397, 398, 401, 423, 427, 428, 430, 440, 469, 470, 473, 477, 478, 481, 482, 483, 484, 485, 486, 488, 491, 516, 518, 522, 540, 541, 548, 549, 613, 629, 631, 635, 650, 661, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 775, 776, 788, 816, 904, 951, 958, 961, 964, 965, 969, 972, 975, 983, 995, 1004, 1008, 1010, 1012, 1014, 1015, 1017, 1018], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 379, 381, 382, 384, 389, 390, 391, 392, 393, 395, 396, 398, 400, 401, 403, 404, 419, 423, 425, 426, 427, 428, 431, 433, 436, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 453, 477, 480, 482, 500, 504, 515, 517, 519, 521, 528, 543, 548, 549, 550, 551, 571, 591, 600, 608, 609, 610, 611, 615, 620, 621, 624, 627, 631, 633, 635, 641, 643, 645, 647, 648, 654, 657, 658, 659, 666, 667, 671, 673, 675, 772, 775, 776, 777, 779, 780, 781, 782, 784, 786, 791, 792, 793, 796, 798, 800, 801, 802, 803, 804, 807, 809, 814, 815, 816, 817, 818, 819, 820, 827, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 849, 852, 853, 854, 858, 862, 870, 871, 875, 876, 880, 883, 884, 892, 917, 928, 951, 952, 954, 955, 958, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 974, 975, 976, 977, 978, 982, 986, 988, 993, 995, 996, 997, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "host": [0, 339, 363, 368, 372, 376, 377, 871, 930, 997], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 56, 65, 68, 71, 84, 85, 96, 97, 99, 102, 112, 114, 117, 118, 122, 124, 130, 140, 160, 161, 163, 165, 166, 167, 168, 172, 175, 189, 196, 214, 217, 218, 219, 221, 225, 226, 227, 229, 231, 235, 238, 243, 246, 251, 253, 256, 257, 258, 265, 266, 281, 282, 283, 298, 302, 303, 306, 307, 309, 314, 326, 333, 336, 339, 340, 344, 348, 350, 354, 360, 361, 363, 364, 365, 368, 370, 372, 373, 374, 376, 377, 380, 381, 382, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 426, 429, 431, 433, 438, 450, 469, 478, 484, 515, 516, 522, 530, 532, 533, 541, 542, 543, 548, 549, 562, 569, 570, 572, 578, 583, 591, 592, 593, 594, 601, 608, 609, 611, 620, 624, 633, 639, 640, 652, 653, 654, 655, 656, 657, 660, 668, 673, 677, 680, 685, 699, 743, 754, 758, 765, 770, 777, 780, 781, 782, 783, 784, 786, 791, 794, 796, 799, 800, 801, 802, 803, 804, 806, 808, 826, 834, 839, 851, 855, 859, 866, 878, 879, 880, 881, 882, 883, 884, 909, 951, 952, 954, 955, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 980, 983, 985, 986, 988, 992, 995, 996, 999, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1019], "event": [0, 4, 16, 196, 214, 259, 393, 569, 570, 617, 814, 903, 958, 963, 964, 982, 986, 1010], "pari": [0, 365, 394, 447, 744, 847, 973, 1018], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 58, 59, 60, 62, 63, 80, 90, 99, 101, 104, 119, 120, 121, 122, 145, 161, 167, 177, 188, 190, 196, 197, 207, 208, 220, 221, 225, 226, 241, 244, 245, 251, 257, 267, 281, 284, 286, 293, 298, 300, 301, 310, 316, 324, 326, 327, 328, 333, 340, 341, 363, 364, 365, 373, 392, 393, 395, 396, 398, 399, 400, 406, 422, 424, 425, 428, 429, 430, 433, 435, 440, 441, 442, 443, 444, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 482, 493, 505, 515, 516, 522, 525, 531, 587, 590, 591, 592, 613, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 659, 671, 675, 775, 844, 845, 848, 857, 859, 868, 869, 878, 879, 956, 958, 959, 961, 969, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018], "scienc": [0, 38, 79, 156, 362, 365, 379, 393, 422, 435, 519, 521, 528, 669, 670, 674, 826, 952, 954, 958, 959, 962, 965, 974, 983, 986, 991, 1012], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 56, 57, 59, 60, 63, 65, 70, 80, 88, 90, 94, 97, 99, 100, 104, 109, 114, 121, 124, 128, 131, 144, 145, 148, 155, 156, 160, 165, 166, 167, 168, 169, 172, 175, 176, 185, 186, 188, 189, 190, 192, 196, 198, 200, 205, 206, 211, 214, 219, 225, 232, 243, 246, 252, 253, 254, 256, 257, 259, 260, 263, 264, 265, 266, 274, 276, 281, 295, 299, 300, 303, 306, 308, 309, 310, 317, 325, 326, 335, 339, 340, 341, 344, 348, 350, 354, 355, 356, 362, 363, 364, 365, 367, 368, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 423, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 445, 450, 455, 468, 469, 471, 472, 473, 474, 475, 476, 477, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 495, 515, 520, 521, 524, 528, 532, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 562, 564, 565, 569, 570, 571, 572, 591, 592, 596, 597, 601, 608, 611, 613, 614, 615, 616, 624, 628, 629, 630, 631, 635, 638, 639, 640, 642, 647, 649, 650, 652, 654, 655, 656, 657, 659, 661, 669, 673, 676, 680, 684, 690, 701, 714, 730, 731, 734, 743, 751, 754, 758, 759, 760, 761, 763, 768, 770, 771, 774, 775, 776, 777, 780, 781, 783, 784, 785, 787, 789, 791, 795, 796, 800, 802, 803, 805, 806, 807, 808, 809, 811, 812, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 835, 839, 842, 843, 844, 846, 847, 849, 850, 851, 852, 853, 858, 859, 862, 864, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 894, 904, 907, 917, 933, 951, 952, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 981, 982, 986, 988, 992, 994, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "2014": [0, 52, 362, 398, 400, 403, 511, 588, 589, 603, 604, 639, 673, 836, 837, 914, 915, 959, 966, 986, 1007], "2015": [0, 8, 167, 362, 403, 689, 702, 703, 704, 836, 837, 962, 969, 986, 1008, 1009], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 58, 59, 64, 65, 69, 70, 84, 91, 94, 97, 104, 112, 121, 126, 127, 149, 151, 152, 153, 154, 165, 166, 167, 176, 180, 191, 196, 199, 203, 204, 208, 210, 212, 214, 217, 221, 222, 228, 229, 231, 238, 239, 251, 256, 258, 259, 269, 276, 295, 298, 302, 308, 310, 315, 317, 319, 324, 333, 334, 340, 363, 365, 368, 373, 397, 400, 401, 402, 405, 424, 454, 481, 485, 504, 514, 520, 525, 534, 535, 550, 574, 575, 596, 598, 639, 640, 647, 649, 651, 657, 658, 659, 673, 694, 777, 791, 808, 828, 878, 887, 957, 958, 962, 963, 965, 968, 972, 1004], "2018": [0, 8, 196, 214, 401, 431, 951, 962, 980, 986, 1011, 1012], "nyu": [0, 119, 178, 828], "moor": [0, 715, 962, 986], "environ": [0, 12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 354, 363, 365, 366, 368, 374, 376, 379, 384, 387, 394, 480, 982, 983, 986, 1011, 1012], "student": [0, 96, 256, 959, 983, 986], "t\u00e9l\u00e9com": [0, 980], "paristech": [0, 24, 25, 42, 225, 980], "rv": [0, 119, 260, 298, 781, 789, 791, 951, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "thierri": [0, 241, 243, 986, 1010, 1011, 1018], "guillemot": [0, 241, 243, 1010, 1011], "labex": 0, "digicosm": 0, "goix": [0, 1008, 1010, 1011, 1012, 1013], "mathurin": [0, 1015, 1017, 1018], "massia": [0, 1015, 1017, 1018], "2019": [0, 167, 366, 393, 433, 443, 673, 959, 969, 972, 1012, 1013, 1014], "dure": [0, 4, 5, 12, 50, 57, 71, 74, 85, 99, 113, 118, 125, 142, 148, 153, 166, 167, 169, 185, 197, 204, 254, 258, 276, 308, 309, 354, 356, 366, 368, 370, 373, 381, 382, 393, 394, 398, 400, 401, 403, 404, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 609, 610, 611, 613, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 769, 775, 776, 777, 780, 781, 791, 800, 801, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 866, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 952, 954, 958, 959, 965, 972, 974, 992, 997, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "phd": [0, 393, 400, 983, 986], "chan": [0, 817, 859], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 56, 57, 59, 63, 67, 80, 122, 129, 130, 131, 149, 154, 163, 166, 176, 189, 211, 217, 218, 222, 240, 243, 248, 256, 276, 308, 316, 326, 340, 350, 355, 363, 368, 370, 376, 377, 379, 381, 393, 398, 400, 402, 403, 405, 424, 425, 428, 429, 430, 431, 432, 433, 434, 440, 441, 442, 443, 459, 493, 496, 512, 513, 514, 518, 519, 521, 524, 526, 527, 528, 529, 534, 535, 540, 541, 574, 588, 589, 591, 592, 600, 601, 608, 621, 626, 627, 628, 629, 633, 634, 639, 641, 642, 643, 644, 647, 648, 649, 650, 652, 657, 658, 659, 661, 662, 665, 671, 672, 673, 675, 676, 775, 776, 809, 828, 835, 836, 837, 874, 901, 914, 915, 931, 936, 937, 954, 958, 959, 966, 967, 968, 976, 978, 982, 994, 996, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "were": [0, 4, 32, 69, 70, 73, 79, 80, 118, 121, 142, 145, 153, 161, 196, 197, 226, 265, 267, 294, 295, 303, 307, 308, 310, 311, 317, 339, 341, 348, 350, 362, 363, 365, 368, 369, 372, 379, 381, 390, 394, 400, 401, 445, 448, 449, 477, 542, 543, 569, 572, 583, 780, 781, 796, 803, 875, 876, 912, 951, 962, 963, 978, 985, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "through": [0, 7, 114, 118, 156, 166, 217, 230, 251, 256, 259, 281, 302, 303, 324, 331, 341, 348, 365, 366, 368, 370, 375, 377, 381, 382, 384, 393, 396, 398, 400, 402, 403, 445, 448, 453, 516, 538, 539, 542, 545, 546, 547, 562, 574, 575, 578, 628, 632, 634, 636, 639, 640, 642, 644, 646, 649, 657, 658, 669, 672, 701, 783, 855, 866, 870, 871, 886, 887, 888, 889, 921, 951, 952, 959, 962, 964, 965, 966, 968, 970, 972, 976, 977, 978, 986, 988, 995, 997, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019], "program": [0, 50, 340, 350, 355, 356, 365, 366, 368, 374, 379, 489, 616, 651, 868, 869, 958, 977, 978, 982, 983, 1004, 1006], "immanuel": [0, 1004, 1005, 1009], "bayer": [0, 1004, 1005, 1009], "kemal": [0, 20, 21, 1006, 1007], "eren": [0, 20, 21, 1006, 1007], "tr\u00e9segni": [0, 1006], "hamzeh": [0, 1007, 1008], "alsalhi": [0, 1007, 1008], "issam": [0, 292, 1010], "laradji": [0, 292, 1010], "maheshakya": [0, 1007, 1008, 1009], "wijewardena": [0, 1007, 1008, 1009], "xue": [0, 1008, 1009, 1010, 1012, 1013, 1016], "nelson": [0, 1010, 1011, 1016], "yenchen": [0, 1010], "lin": [0, 515, 639, 977, 1009, 1010, 1011, 1012], "neurodebian": 0, "debian": [0, 354, 366, 374], "packag": [0, 19, 46, 53, 160, 276, 355, 361, 362, 365, 366, 368, 369, 370, 372, 374, 377, 379, 381, 384, 395, 400, 401, 433, 459, 627, 628, 930, 952, 958, 961, 965, 972, 978, 986, 991, 1004, 1010, 1012, 1013, 1014], "dr": [0, 365, 393, 1018], "jame": [0, 365, 397, 809, 963, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017], "haxbi": 0, "dartmouth": 0, "colleg": [0, 165], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 57, 61, 66, 70, 73, 77, 79, 80, 85, 89, 94, 110, 111, 121, 124, 125, 128, 129, 141, 148, 150, 153, 154, 155, 156, 157, 160, 161, 163, 166, 167, 168, 169, 172, 175, 177, 179, 184, 185, 186, 190, 191, 196, 197, 204, 205, 210, 213, 214, 217, 219, 225, 229, 234, 242, 243, 244, 250, 251, 256, 257, 258, 259, 262, 264, 279, 282, 283, 287, 293, 294, 298, 303, 307, 308, 309, 310, 311, 322, 323, 325, 326, 334, 336, 339, 340, 341, 348, 350, 354, 355, 356, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 425, 428, 430, 432, 434, 440, 444, 446, 463, 464, 465, 480, 489, 490, 496, 504, 505, 515, 517, 522, 529, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 551, 553, 555, 569, 587, 590, 592, 613, 614, 616, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 663, 664, 670, 673, 674, 678, 679, 681, 682, 683, 688, 689, 696, 701, 706, 707, 718, 719, 720, 726, 734, 736, 737, 743, 762, 764, 767, 768, 769, 772, 775, 795, 796, 812, 813, 814, 815, 816, 817, 818, 822, 830, 837, 839, 846, 879, 881, 884, 886, 887, 888, 889, 898, 899, 930, 951, 952, 954, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 972, 975, 976, 977, 978, 981, 982, 983, 985, 986, 988, 993, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "particip": [0, 367, 368, 382, 986], "could": [0, 4, 9, 13, 27, 37, 42, 53, 70, 71, 94, 97, 110, 111, 118, 121, 142, 148, 153, 161, 165, 166, 167, 196, 197, 205, 214, 221, 230, 231, 250, 256, 279, 284, 287, 309, 322, 323, 339, 344, 356, 368, 374, 376, 381, 384, 387, 391, 397, 400, 401, 405, 455, 514, 519, 588, 589, 610, 652, 779, 784, 786, 951, 952, 958, 959, 969, 970, 972, 977, 983, 996, 1001, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "attend": 0, "psf": [0, 368], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 70, 77, 94, 112, 125, 148, 166, 167, 168, 196, 200, 213, 214, 230, 256, 257, 258, 259, 261, 262, 263, 265, 266, 274, 306, 326, 334, 339, 340, 350, 354, 355, 356, 361, 362, 363, 366, 368, 369, 370, 371, 372, 374, 376, 379, 380, 381, 384, 387, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 407, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 443, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 477, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 685, 690, 702, 703, 704, 708, 736, 737, 758, 763, 765, 768, 775, 776, 777, 779, 780, 781, 783, 789, 790, 791, 795, 796, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 896, 898, 899, 902, 907, 930, 933, 936, 951, 954, 957, 958, 959, 961, 962, 963, 964, 965, 970, 972, 977, 978, 983, 986, 988, 995, 996, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020], "tinyclu": 0, "french": [0, 214], "associ": [0, 11, 24, 25, 79, 148, 165, 166, 244, 314, 316, 339, 376, 393, 395, 397, 398, 400, 401, 430, 450, 451, 452, 453, 454, 455, 456, 457, 474, 475, 476, 505, 538, 542, 545, 586, 587, 611, 626, 639, 640, 647, 649, 655, 656, 657, 670, 676, 680, 711, 719, 802, 822, 830, 844, 856, 867, 875, 884, 886, 888, 904, 961, 962, 965, 972, 975, 986, 996, 1004, 1016], "fond": [0, 986], "de": [0, 12, 24, 25, 26, 27, 73, 113, 128, 148, 149, 151, 152, 153, 154, 155, 157, 187, 230, 231, 316, 334, 365, 616, 669, 744, 958, 959, 983, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 61, 65, 71, 116, 121, 128, 142, 145, 153, 160, 167, 168, 185, 196, 197, 198, 214, 218, 230, 250, 253, 256, 257, 259, 265, 326, 334, 340, 348, 354, 363, 365, 368, 373, 374, 376, 379, 382, 393, 395, 398, 401, 403, 474, 475, 481, 485, 491, 627, 628, 878, 952, 958, 959, 962, 967, 968, 969, 983, 986, 993, 995, 996, 1004], "our": [0, 4, 5, 7, 11, 12, 42, 53, 55, 69, 70, 79, 80, 85, 94, 95, 108, 110, 115, 118, 121, 122, 140, 145, 148, 153, 155, 165, 166, 167, 168, 169, 196, 214, 219, 221, 250, 256, 259, 262, 263, 294, 298, 307, 309, 319, 323, 329, 330, 331, 334, 339, 340, 341, 350, 355, 367, 372, 373, 376, 379, 380, 381, 382, 393, 397, 400, 401, 404, 426, 431, 544, 625, 673, 689, 701, 706, 718, 736, 821, 822, 823, 825, 827, 829, 830, 831, 951, 952, 958, 959, 962, 968, 972, 975, 976, 977, 983, 986, 988, 995, 996, 997, 1011, 1012, 1014, 1015, 1018, 1019], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 360, 365, 366, 369, 370, 372, 376, 379, 380, 381, 382, 384, 387, 390, 391, 393, 394, 396, 397, 398, 402, 403, 419, 482, 516, 520, 522, 524, 527, 540, 541, 592, 597, 602, 605, 619, 620, 621, 622, 637, 647, 649, 654, 657, 668, 670, 673, 674, 680, 690, 777, 799, 807, 808, 809, 811, 817, 825, 836, 840, 859, 951, 956, 958, 959, 961, 962, 963, 969, 970, 976, 977, 983, 986, 988, 999, 1004, 1008, 1009, 1012, 1016, 1017, 1018, 1019, 1020], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 59, 63, 74, 81, 90, 94, 96, 97, 109, 114, 116, 117, 121, 130, 131, 145, 153, 154, 156, 163, 165, 166, 167, 175, 182, 188, 189, 190, 196, 197, 198, 199, 205, 207, 211, 213, 214, 217, 218, 225, 231, 235, 238, 242, 244, 246, 254, 257, 258, 259, 260, 262, 263, 264, 266, 268, 274, 276, 281, 294, 298, 299, 303, 306, 307, 308, 309, 311, 314, 316, 317, 318, 323, 326, 331, 335, 339, 340, 341, 345, 348, 350, 354, 355, 356, 361, 363, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 379, 380, 381, 382, 389, 390, 391, 392, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 414, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 489, 490, 496, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 681, 682, 683, 686, 690, 694, 695, 696, 697, 698, 699, 701, 702, 703, 706, 708, 709, 710, 712, 713, 715, 716, 717, 718, 725, 726, 728, 730, 731, 733, 736, 741, 749, 754, 758, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 789, 791, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 904, 906, 907, 908, 909, 920, 925, 930, 937, 946, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 972, 975, 976, 977, 978, 982, 983, 986, 988, 989, 991, 992, 994, 995, 996, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "handl": [0, 4, 70, 118, 124, 128, 172, 231, 258, 263, 265, 276, 306, 339, 341, 354, 360, 362, 366, 368, 369, 370, 377, 379, 381, 401, 477, 525, 558, 562, 563, 566, 567, 569, 570, 572, 591, 616, 627, 628, 633, 639, 640, 641, 642, 643, 649, 656, 657, 659, 662, 701, 768, 843, 852, 853, 878, 883, 890, 916, 959, 962, 963, 964, 965, 968, 970, 977, 978, 982, 983, 986, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 56, 61, 70, 74, 79, 81, 95, 96, 97, 99, 108, 111, 118, 125, 126, 128, 141, 142, 144, 152, 154, 161, 163, 166, 167, 168, 174, 175, 182, 189, 190, 195, 197, 198, 200, 202, 211, 212, 214, 215, 220, 221, 226, 227, 228, 229, 231, 241, 243, 247, 249, 250, 256, 265, 272, 276, 280, 295, 298, 300, 302, 303, 307, 308, 309, 310, 318, 321, 323, 328, 329, 334, 335, 337, 339, 340, 341, 348, 350, 354, 355, 360, 363, 364, 368, 369, 370, 373, 374, 376, 377, 379, 381, 382, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 405, 419, 423, 427, 431, 433, 437, 443, 444, 445, 446, 448, 449, 469, 477, 478, 484, 485, 489, 507, 513, 516, 517, 519, 521, 525, 528, 530, 532, 533, 534, 538, 539, 540, 541, 542, 543, 545, 546, 547, 553, 569, 570, 572, 573, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 616, 619, 624, 631, 633, 638, 639, 640, 641, 645, 646, 647, 649, 650, 653, 657, 658, 659, 666, 667, 668, 669, 670, 671, 672, 673, 675, 679, 680, 683, 687, 688, 693, 696, 698, 700, 701, 706, 707, 708, 715, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 739, 762, 765, 768, 769, 772, 775, 776, 777, 778, 782, 784, 785, 786, 787, 789, 795, 801, 805, 808, 827, 829, 830, 831, 834, 839, 840, 842, 843, 844, 847, 851, 852, 853, 854, 855, 856, 858, 859, 865, 866, 867, 868, 869, 871, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 913, 915, 919, 921, 925, 951, 952, 953, 954, 955, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 973, 974, 975, 976, 977, 978, 983, 995, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "profit": 0, "organ": [0, 11, 69, 79, 339, 362, 367, 368, 382, 827, 982], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 64, 66, 69, 70, 71, 74, 77, 79, 80, 85, 91, 96, 98, 99, 100, 105, 112, 113, 114, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 134, 140, 142, 144, 145, 148, 149, 153, 154, 155, 160, 161, 165, 166, 167, 169, 172, 175, 176, 185, 189, 196, 197, 198, 202, 204, 210, 212, 213, 214, 217, 218, 219, 221, 225, 226, 229, 230, 231, 232, 234, 235, 241, 242, 246, 247, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 276, 281, 282, 283, 293, 298, 300, 301, 302, 303, 306, 308, 309, 310, 311, 314, 316, 317, 318, 326, 336, 339, 340, 341, 344, 348, 350, 354, 355, 356, 360, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 443, 444, 445, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 504, 512, 513, 514, 515, 518, 519, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 560, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 598, 600, 603, 608, 609, 610, 611, 613, 614, 615, 621, 623, 624, 625, 628, 629, 630, 633, 635, 636, 637, 639, 640, 642, 647, 649, 650, 652, 654, 655, 656, 657, 658, 659, 661, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 697, 698, 700, 701, 703, 705, 706, 714, 715, 716, 717, 723, 726, 736, 738, 758, 759, 760, 761, 762, 763, 769, 775, 776, 777, 780, 781, 782, 783, 785, 787, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 836, 839, 843, 846, 850, 852, 854, 857, 858, 859, 860, 862, 870, 871, 873, 874, 875, 878, 880, 883, 884, 886, 887, 888, 889, 890, 894, 907, 910, 914, 915, 917, 930, 931, 934, 937, 943, 946, 951, 952, 953, 954, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 981, 982, 983, 986, 988, 990, 992, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "manag": [0, 85, 238, 353, 362, 366, 369, 370, 372, 376, 379, 381, 382, 400, 431, 449, 607, 876, 956, 978, 983, 986, 997, 999, 1017], "board": [0, 19], "scipi": [0, 13, 17, 19, 34, 41, 46, 47, 53, 54, 77, 78, 81, 95, 97, 100, 102, 120, 166, 169, 182, 186, 198, 242, 246, 247, 253, 256, 264, 268, 276, 281, 286, 295, 307, 308, 314, 315, 354, 362, 363, 366, 368, 370, 374, 377, 379, 380, 381, 384, 386, 393, 398, 401, 431, 432, 433, 434, 438, 443, 444, 477, 484, 489, 513, 515, 516, 522, 525, 562, 563, 566, 567, 569, 570, 591, 592, 629, 630, 634, 638, 639, 640, 644, 647, 649, 650, 651, 653, 655, 657, 658, 659, 661, 665, 668, 672, 673, 676, 680, 740, 743, 758, 759, 760, 761, 770, 771, 781, 789, 791, 805, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 842, 851, 857, 858, 859, 861, 865, 868, 869, 878, 880, 881, 883, 884, 917, 933, 936, 951, 952, 958, 960, 963, 965, 966, 972, 976, 977, 981, 983, 991, 996, 997, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "mission": [0, 340, 986], "foster": [0, 1012], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 56, 57, 59, 60, 69, 71, 78, 79, 80, 81, 95, 104, 108, 112, 115, 116, 120, 121, 122, 123, 144, 148, 153, 155, 156, 160, 166, 167, 168, 169, 172, 176, 177, 181, 182, 183, 184, 185, 196, 198, 204, 210, 213, 214, 218, 221, 226, 228, 229, 231, 234, 235, 237, 252, 254, 256, 257, 258, 259, 263, 265, 267, 276, 278, 280, 282, 283, 285, 286, 289, 298, 306, 310, 311, 315, 317, 326, 334, 339, 340, 341, 348, 355, 356, 357, 362, 363, 365, 368, 373, 374, 375, 377, 379, 380, 381, 383, 384, 387, 388, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 438, 440, 442, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 497, 512, 513, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 563, 566, 567, 570, 571, 572, 574, 575, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 714, 716, 718, 719, 720, 722, 723, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 844, 845, 848, 849, 854, 855, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 912, 913, 914, 915, 927, 928, 935, 937, 943, 951, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 974, 975, 976, 977, 978, 982, 983, 986, 992, 993, 996, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "particular": [0, 4, 11, 13, 37, 39, 40, 59, 70, 77, 91, 99, 103, 118, 121, 124, 152, 160, 166, 167, 196, 198, 204, 230, 234, 253, 257, 259, 265, 276, 285, 289, 298, 306, 307, 310, 340, 341, 350, 354, 362, 363, 366, 367, 368, 370, 372, 373, 374, 376, 377, 380, 381, 384, 393, 397, 398, 400, 401, 402, 403, 450, 454, 477, 525, 544, 590, 634, 639, 644, 653, 655, 665, 668, 693, 708, 765, 811, 826, 897, 899, 952, 954, 956, 958, 962, 965, 966, 967, 968, 970, 972, 983, 986, 996, 1004, 1007, 1011, 1012, 1013, 1015, 1017, 1018, 1019], "As": [0, 4, 7, 25, 27, 30, 40, 43, 53, 56, 57, 65, 81, 85, 99, 109, 110, 115, 118, 120, 122, 127, 140, 148, 153, 161, 166, 168, 172, 175, 178, 185, 187, 196, 200, 204, 214, 222, 244, 251, 253, 254, 256, 257, 259, 269, 274, 281, 299, 309, 317, 326, 340, 341, 344, 346, 347, 350, 354, 355, 363, 366, 367, 368, 370, 372, 373, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 474, 535, 543, 547, 600, 613, 636, 637, 653, 655, 668, 715, 738, 744, 821, 822, 823, 825, 827, 858, 951, 956, 958, 959, 961, 962, 963, 965, 969, 972, 976, 977, 978, 983, 986, 988, 992, 995, 996, 997, 1004, 1010, 1015, 1020], "fiscal": 0, "home": [0, 12, 27, 84, 111, 128, 152, 154, 156, 157, 188, 205, 311, 331, 345, 363, 366, 376, 384, 392, 467, 480, 660, 986], "ensur": [0, 41, 56, 81, 91, 115, 169, 196, 218, 251, 259, 294, 348, 350, 354, 355, 368, 370, 372, 373, 374, 382, 384, 391, 393, 394, 397, 405, 450, 514, 515, 522, 592, 608, 677, 686, 762, 769, 800, 871, 898, 899, 915, 921, 928, 958, 959, 962, 972, 978, 992, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "monei": [0, 214, 986], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 55, 59, 66, 69, 70, 71, 77, 79, 80, 85, 94, 97, 98, 99, 102, 112, 117, 118, 119, 121, 124, 128, 129, 130, 142, 148, 160, 165, 166, 167, 168, 169, 175, 176, 185, 187, 189, 193, 196, 198, 201, 212, 225, 226, 227, 231, 238, 242, 244, 252, 255, 256, 257, 258, 259, 263, 265, 266, 276, 278, 282, 283, 284, 298, 300, 302, 303, 306, 307, 308, 309, 310, 316, 317, 319, 326, 329, 330, 334, 339, 340, 341, 344, 350, 354, 355, 356, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 384, 387, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 409, 414, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 465, 466, 470, 471, 472, 473, 477, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 496, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 559, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 682, 683, 685, 686, 688, 689, 693, 694, 697, 707, 708, 709, 710, 712, 714, 715, 718, 722, 726, 728, 731, 734, 735, 737, 741, 743, 747, 748, 749, 751, 754, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 776, 777, 780, 781, 782, 783, 791, 795, 796, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 897, 898, 899, 905, 909, 913, 914, 915, 916, 918, 919, 922, 930, 931, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 983, 986, 988, 994, 995, 996, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "need": [0, 4, 9, 12, 32, 46, 48, 53, 56, 81, 96, 118, 120, 121, 122, 128, 145, 148, 153, 160, 161, 166, 184, 198, 213, 214, 218, 225, 228, 230, 235, 241, 242, 246, 247, 254, 256, 258, 259, 261, 276, 278, 303, 306, 317, 326, 334, 339, 340, 350, 354, 355, 356, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 387, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 409, 419, 423, 427, 430, 446, 484, 522, 532, 553, 563, 564, 569, 570, 571, 572, 608, 616, 619, 620, 621, 623, 630, 647, 649, 652, 657, 660, 673, 701, 702, 703, 704, 761, 765, 775, 776, 777, 780, 781, 791, 792, 793, 800, 808, 811, 819, 820, 836, 839, 842, 846, 851, 852, 856, 873, 880, 883, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 975, 976, 977, 978, 983, 986, 994, 995, 996, 997, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "keep": [0, 6, 42, 74, 97, 99, 144, 160, 165, 166, 167, 168, 169, 196, 197, 198, 204, 214, 246, 251, 254, 302, 303, 309, 315, 326, 339, 340, 344, 350, 354, 355, 360, 368, 372, 380, 381, 393, 394, 395, 396, 397, 398, 414, 431, 446, 463, 464, 465, 466, 474, 475, 515, 521, 522, 525, 528, 535, 537, 539, 541, 543, 546, 549, 551, 576, 579, 581, 583, 584, 592, 615, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 658, 659, 660, 689, 795, 812, 813, 822, 830, 836, 837, 874, 879, 881, 884, 887, 889, 958, 963, 967, 970, 972, 983, 986, 988, 993, 995, 997, 999, 1004, 1009, 1012, 1013, 1017, 1018], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 61, 65, 69, 72, 74, 91, 98, 99, 109, 112, 115, 125, 128, 145, 149, 154, 156, 157, 160, 165, 166, 167, 168, 172, 175, 177, 185, 190, 196, 198, 212, 225, 228, 229, 232, 242, 243, 247, 250, 251, 255, 256, 257, 259, 263, 264, 265, 266, 267, 269, 278, 298, 299, 300, 303, 306, 309, 323, 326, 339, 341, 348, 350, 355, 360, 361, 362, 363, 364, 367, 368, 370, 372, 373, 374, 376, 377, 379, 381, 382, 387, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 426, 445, 448, 449, 464, 466, 477, 502, 513, 533, 538, 539, 540, 541, 545, 546, 547, 548, 549, 550, 551, 556, 563, 569, 570, 571, 572, 575, 578, 587, 615, 624, 627, 628, 630, 637, 638, 639, 640, 657, 658, 659, 660, 689, 709, 710, 718, 734, 754, 758, 763, 764, 767, 768, 772, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 806, 814, 825, 827, 829, 830, 831, 838, 839, 840, 841, 842, 855, 866, 871, 876, 878, 879, 886, 887, 888, 889, 894, 919, 951, 952, 955, 956, 958, 959, 961, 962, 963, 964, 965, 968, 969, 972, 974, 977, 978, 982, 983, 988, 994, 995, 997, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 69, 196, 214, 303, 376, 379, 381, 398, 400, 401, 502, 759, 760, 977, 982, 986, 1012, 1013, 1014], "go": [0, 26, 128, 145, 161, 166, 167, 184, 256, 309, 339, 348, 363, 368, 370, 373, 377, 382, 384, 394, 398, 400, 402, 425, 542, 543, 566, 567, 701, 918, 919, 972, 982, 983, 988, 997, 1015], "toward": [0, 26, 27, 62, 81, 115, 121, 127, 148, 168, 175, 200, 201, 222, 368, 381, 393, 429, 433, 443, 657, 659, 676, 853, 961, 976, 978, 981, 983], "cover": [0, 52, 172, 196, 214, 350, 360, 363, 368, 380, 616, 701, 772, 962, 963, 981], "travel": 0, "expens": [0, 55, 128, 148, 165, 167, 226, 253, 265, 326, 339, 340, 341, 356, 374, 381, 393, 394, 397, 400, 401, 430, 449, 489, 777, 780, 781, 791, 802, 876, 878, 959, 961, 977, 982, 986, 997, 1008], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 56, 57, 61, 69, 77, 85, 110, 112, 119, 121, 126, 128, 145, 153, 155, 165, 166, 167, 168, 172, 184, 194, 196, 197, 198, 200, 204, 217, 218, 219, 222, 225, 229, 234, 243, 256, 263, 265, 267, 271, 276, 281, 282, 283, 307, 308, 309, 310, 311, 334, 339, 340, 341, 350, 363, 365, 367, 368, 372, 374, 376, 377, 379, 380, 381, 382, 391, 393, 395, 397, 398, 400, 403, 404, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 440, 441, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 681, 702, 703, 704, 765, 768, 770, 773, 775, 776, 777, 780, 781, 791, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 913, 914, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 972, 975, 976, 978, 979, 982, 983, 986, 996, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1015], "budget": [0, 118, 814, 815, 816, 817, 818, 951], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 380, 381, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 413, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 474, 476, 477, 478, 481, 482, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 743, 744, 746, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 904, 909, 912, 913, 915, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 933, 936, 937, 943, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 980, 982, 983, 985, 986, 988, 989, 992, 993, 994, 995, 996, 1000, 1002, 1006], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 65, 70, 71, 79, 81, 84, 85, 91, 97, 112, 113, 117, 121, 122, 125, 145, 148, 155, 160, 165, 166, 167, 168, 172, 184, 185, 189, 196, 197, 198, 200, 204, 210, 212, 214, 217, 218, 219, 221, 225, 226, 228, 230, 231, 232, 242, 251, 252, 256, 259, 262, 263, 264, 274, 276, 278, 282, 283, 293, 298, 299, 302, 306, 307, 308, 309, 310, 311, 315, 317, 319, 326, 339, 348, 354, 355, 362, 365, 366, 368, 369, 370, 372, 374, 375, 379, 380, 381, 384, 388, 391, 392, 393, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 445, 446, 449, 450, 453, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 468, 471, 477, 479, 485, 490, 496, 500, 508, 511, 515, 519, 520, 521, 522, 524, 525, 528, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 566, 567, 569, 570, 571, 572, 574, 575, 578, 580, 581, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 613, 614, 616, 617, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 680, 681, 684, 688, 689, 694, 696, 701, 702, 703, 704, 708, 709, 710, 712, 714, 718, 721, 722, 726, 734, 735, 738, 743, 744, 748, 750, 754, 758, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 804, 806, 808, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 894, 904, 905, 914, 915, 925, 930, 937, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 979, 981, 982, 983, 985, 988, 995, 996, 997, 999, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "regard": [0, 5, 7, 11, 53, 70, 99, 136, 148, 153, 167, 168, 185, 193, 198, 219, 231, 258, 265, 266, 334, 340, 364, 368, 369, 373, 379, 381, 387, 392, 393, 398, 400, 401, 403, 425, 428, 433, 440, 443, 482, 595, 600, 637, 639, 682, 723, 776, 783, 803, 821, 822, 955, 958, 962, 964, 965, 967, 969, 976, 977, 978, 990, 997, 1011, 1014], "might": [0, 4, 5, 31, 42, 44, 59, 61, 69, 109, 117, 126, 142, 154, 161, 166, 167, 168, 172, 196, 214, 225, 256, 258, 293, 308, 336, 350, 354, 355, 362, 366, 368, 369, 370, 372, 373, 374, 376, 379, 381, 384, 387, 394, 397, 398, 399, 400, 401, 403, 416, 425, 469, 477, 482, 484, 489, 496, 504, 517, 536, 537, 538, 545, 560, 561, 563, 591, 592, 608, 631, 635, 636, 637, 639, 640, 657, 659, 673, 737, 772, 780, 781, 803, 828, 844, 859, 871, 890, 892, 894, 898, 899, 915, 931, 951, 952, 954, 956, 958, 959, 961, 962, 964, 965, 969, 970, 972, 977, 978, 997, 1005, 1007, 1012, 1013, 1015, 1018, 1019], "pai": [0, 214, 368, 958], "dn": [0, 965], "continu": [0, 17, 19, 42, 118, 119, 148, 163, 167, 197, 204, 214, 218, 221, 237, 242, 246, 247, 294, 297, 303, 304, 308, 309, 348, 363, 366, 370, 371, 372, 373, 376, 379, 381, 382, 384, 393, 398, 400, 473, 573, 576, 577, 580, 581, 588, 589, 590, 613, 627, 628, 633, 634, 638, 641, 642, 643, 644, 706, 722, 736, 789, 791, 842, 844, 846, 848, 849, 858, 859, 875, 887, 925, 951, 958, 959, 962, 963, 965, 966, 972, 978, 983, 985, 986, 988, 995, 1001, 1004, 1006, 1007, 1012, 1017, 1018, 1019], "integr": [0, 42, 70, 142, 156, 185, 294, 308, 366, 370, 371, 372, 374, 376, 381, 384, 398, 403, 696, 735, 766, 937, 961, 969, 986, 991, 1005, 1007, 1008, 1016, 1017], "servic": [0, 4, 226, 368, 372, 986, 1012], "azur": [0, 368], "cirru": [0, 368], "cl": [0, 8, 12, 16, 375, 381, 888], "circlecl": 0, "free": [0, 5, 153, 154, 161, 195, 246, 298, 362, 367, 368, 369, 376, 379, 384, 401, 403, 433, 590, 652, 835, 884, 951, 954, 958, 962, 983, 1012], "cpu": [0, 60, 257, 276, 311, 354, 355, 366, 374, 381, 384, 401, 477, 613, 628, 632, 634, 636, 639, 640, 642, 644, 646, 647, 649, 657, 660, 777, 791, 800, 801, 802, 823, 831, 871, 930, 962, 988, 992, 997, 1009, 1018, 1019], "server": [0, 354, 365, 366, 477, 1012], "anaconda": [0, 355, 366, 372], "inc": [0, 69, 255, 952, 974, 986], "storag": [0, 341, 381, 639, 640, 647, 649, 657, 658, 659, 878, 965, 977, 1007, 1012], "thei": [0, 4, 26, 27, 37, 50, 56, 81, 96, 110, 115, 116, 118, 120, 122, 124, 141, 144, 148, 149, 153, 166, 167, 182, 185, 191, 196, 197, 214, 218, 221, 225, 231, 250, 253, 256, 257, 259, 265, 276, 278, 293, 298, 303, 308, 310, 339, 340, 346, 347, 350, 354, 355, 356, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 376, 377, 379, 380, 381, 382, 390, 392, 393, 394, 395, 396, 398, 400, 402, 403, 405, 422, 424, 428, 434, 435, 440, 448, 477, 489, 490, 514, 516, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 569, 572, 591, 600, 610, 624, 627, 628, 633, 639, 640, 641, 642, 643, 651, 653, 657, 659, 662, 668, 742, 743, 745, 748, 754, 769, 777, 791, 808, 814, 815, 816, 817, 818, 836, 839, 841, 847, 858, 859, 880, 883, 886, 887, 888, 889, 893, 951, 952, 954, 956, 958, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 986, 988, 992, 994, 995, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "stage": [0, 7, 26, 71, 114, 119, 122, 366, 372, 389, 393, 400, 429, 534, 535, 540, 541, 542, 543, 569, 570, 572, 583, 959, 972, 981, 1012, 1016], "nightli": [0, 355, 371, 372], "build": [0, 4, 7, 17, 32, 43, 66, 73, 98, 117, 119, 125, 131, 142, 144, 159, 160, 162, 163, 166, 204, 261, 264, 276, 294, 295, 299, 341, 350, 354, 355, 356, 364, 370, 371, 372, 373, 374, 381, 384, 386, 392, 393, 394, 397, 400, 401, 424, 471, 482, 484, 505, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 566, 567, 569, 570, 572, 608, 609, 611, 672, 694, 695, 778, 782, 786, 795, 799, 801, 840, 857, 859, 886, 887, 888, 889, 891, 911, 951, 952, 959, 962, 966, 968, 972, 977, 978, 982, 983, 986, 989, 991, 995, 996, 1004, 1007, 1009, 1010, 1011, 1013, 1016], "applic": [3, 5, 19, 49, 79, 163, 172, 196, 213, 219, 250, 259, 298, 354, 356, 363, 365, 368, 370, 374, 376, 377, 379, 381, 393, 397, 398, 399, 400, 403, 405, 426, 433, 477, 479, 513, 514, 515, 534, 535, 610, 669, 670, 671, 675, 693, 709, 710, 718, 763, 764, 767, 805, 951, 958, 959, 960, 961, 962, 966, 968, 974, 978, 982, 983, 986, 995, 997, 1004, 1005, 1010, 1012, 1015], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 56, 65, 94, 109, 112, 116, 121, 122, 148, 163, 168, 172, 175, 182, 185, 189, 190, 196, 198, 213, 214, 219, 225, 226, 232, 237, 254, 256, 261, 265, 266, 270, 276, 281, 288, 302, 309, 323, 326, 334, 335, 339, 340, 350, 354, 363, 364, 365, 366, 367, 369, 370, 373, 374, 377, 379, 381, 391, 392, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 426, 428, 430, 431, 433, 438, 443, 446, 459, 484, 489, 490, 496, 497, 498, 499, 504, 505, 509, 512, 514, 518, 520, 523, 524, 525, 526, 527, 528, 529, 532, 533, 538, 542, 545, 548, 552, 554, 570, 591, 612, 624, 629, 631, 633, 635, 636, 637, 638, 639, 640, 645, 646, 647, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 666, 667, 668, 669, 670, 672, 674, 676, 689, 697, 709, 710, 715, 719, 764, 767, 768, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 799, 807, 808, 809, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 845, 846, 852, 862, 868, 869, 878, 879, 886, 888, 904, 915, 952, 953, 957, 958, 959, 961, 962, 963, 964, 965, 966, 970, 972, 976, 979, 983, 984, 986, 989, 990, 991, 997, 998, 999, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "medium": [3, 163, 231, 271, 326, 393, 398, 403, 624, 955, 958], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 56, 57, 59, 60, 61, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 91, 94, 95, 96, 97, 98, 100, 102, 104, 112, 120, 121, 124, 125, 141, 148, 150, 151, 154, 155, 163, 165, 167, 168, 175, 176, 177, 178, 180, 182, 186, 191, 194, 197, 198, 199, 202, 209, 210, 217, 222, 225, 228, 229, 230, 231, 233, 234, 243, 250, 252, 254, 256, 258, 259, 261, 262, 282, 283, 284, 292, 295, 299, 300, 301, 302, 307, 310, 315, 319, 322, 324, 325, 326, 336, 339, 340, 341, 344, 354, 355, 356, 363, 364, 368, 373, 377, 379, 380, 381, 384, 390, 391, 392, 395, 397, 398, 401, 403, 404, 426, 427, 429, 430, 431, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 474, 475, 476, 496, 508, 515, 517, 519, 521, 528, 538, 539, 540, 541, 542, 543, 545, 546, 568, 569, 572, 575, 613, 614, 624, 638, 647, 648, 660, 664, 673, 676, 686, 700, 718, 720, 723, 761, 771, 779, 782, 783, 787, 794, 797, 798, 800, 803, 805, 814, 815, 816, 818, 821, 822, 823, 824, 825, 827, 829, 830, 831, 836, 837, 854, 856, 867, 872, 876, 880, 881, 882, 883, 884, 886, 887, 888, 889, 892, 914, 918, 919, 925, 926, 928, 931, 937, 952, 954, 955, 957, 958, 959, 961, 962, 963, 964, 965, 966, 969, 972, 974, 976, 977, 978, 986, 991, 993, 995, 996, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1019, 1020], "interact": [3, 89, 122, 163, 196, 222, 227, 257, 307, 367, 369, 370, 372, 374, 379, 381, 382, 394, 540, 541, 542, 543, 613, 614, 854, 858, 951, 954, 958, 959, 960, 967, 969, 972, 981, 983, 1006, 1011, 1018, 1019], "user": [3, 25, 68, 94, 157, 163, 166, 184, 217, 246, 253, 263, 265, 276, 282, 283, 286, 306, 307, 308, 309, 310, 311, 350, 354, 355, 357, 362, 366, 367, 368, 370, 372, 374, 375, 376, 379, 380, 381, 384, 387, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 404, 405, 406, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 915, 951, 952, 958, 959, 961, 962, 963, 965, 972, 976, 980, 983, 986, 990, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "interfac": [3, 108, 163, 361, 362, 369, 370, 377, 379, 381, 397, 403, 404, 423, 427, 431, 477, 680, 777, 780, 781, 791, 839, 840, 864, 947, 951, 965, 977, 982, 983, 986, 1004, 1006, 1009, 1010, 1012, 1013, 1018], "compress": [3, 11, 15, 19, 48, 163, 298, 363, 393, 398, 401, 633, 653, 673, 809, 933, 936, 958, 972, 996, 1004, 1013], "sens": [3, 4, 15, 25, 154, 163, 166, 172, 229, 298, 315, 326, 339, 350, 354, 369, 381, 393, 395, 397, 443, 450, 451, 452, 453, 454, 455, 456, 457, 633, 636, 637, 653, 778, 788, 875, 956, 958, 965, 966, 968, 972, 975], "tomographi": [3, 15, 163, 633, 653, 958], "reconstruct": [3, 15, 94, 95, 99, 163, 195, 220, 221, 310, 398, 401, 463, 464, 465, 512, 514, 516, 518, 519, 520, 521, 523, 524, 529, 564, 568, 633, 653, 669, 670, 674, 870, 871, 958, 959, 1018], "l1": [3, 7, 15, 30, 40, 81, 84, 163, 174, 181, 185, 207, 211, 215, 227, 257, 276, 309, 377, 379, 392, 393, 395, 398, 423, 427, 431, 438, 445, 450, 451, 452, 453, 454, 455, 456, 457, 459, 477, 483, 485, 512, 518, 519, 520, 521, 523, 524, 528, 529, 539, 546, 570, 571, 572, 578, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 653, 657, 658, 659, 660, 662, 669, 715, 742, 748, 753, 758, 759, 760, 791, 805, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 851, 859, 865, 878, 879, 885, 887, 889, 901, 944, 958, 960, 962, 965, 972, 976, 977, 978, 995, 1009, 1011, 1017], "prior": [3, 15, 46, 47, 56, 66, 147, 148, 158, 163, 168, 175, 177, 240, 242, 246, 247, 248, 256, 368, 370, 372, 381, 384, 393, 396, 398, 400, 403, 446, 504, 517, 529, 530, 531, 532, 540, 566, 567, 592, 594, 595, 596, 600, 603, 604, 611, 625, 626, 627, 628, 632, 633, 635, 636, 637, 641, 642, 643, 653, 659, 662, 697, 775, 814, 815, 816, 817, 818, 839, 840, 854, 880, 883, 929, 951, 954, 956, 958, 961, 962, 964, 970, 978, 979, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1020], "lasso": [3, 15, 104, 128, 134, 163, 166, 174, 215, 309, 354, 379, 395, 396, 398, 400, 401, 402, 452, 453, 459, 482, 505, 512, 518, 520, 523, 524, 526, 527, 529, 578, 627, 628, 630, 631, 632, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 659, 662, 663, 664, 665, 666, 667, 702, 703, 704, 765, 800, 801, 802, 840, 859, 951, 962, 976, 984, 992, 995, 999, 1004, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1018], "recognit": [3, 9, 15, 163, 295, 303, 361, 373, 398, 400, 402, 475, 483, 513, 515, 522, 689, 694, 721, 749, 768, 769, 775, 791, 805, 859, 883, 954, 958, 962, 963, 967, 977, 979, 988, 991, 999, 1004], "eigenfac": [3, 15, 163, 363, 398, 475, 522, 694, 791, 805, 859, 883, 979, 991, 1004], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 69, 71, 73, 129, 133, 135, 138, 139, 143, 146, 163, 174, 189, 215, 225, 231, 232, 236, 237, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 271, 300, 306, 308, 313, 317, 320, 321, 324, 333, 334, 337, 339, 354, 357, 363, 370, 374, 381, 387, 394, 397, 398, 400, 402, 419, 475, 485, 493, 496, 522, 536, 537, 544, 548, 549, 558, 574, 575, 580, 581, 586, 620, 624, 649, 657, 658, 659, 670, 678, 679, 681, 683, 694, 715, 722, 777, 791, 797, 801, 802, 805, 807, 808, 825, 839, 840, 852, 859, 874, 875, 950, 951, 954, 957, 959, 960, 962, 963, 967, 975, 977, 979, 984, 988, 991, 992, 993, 997, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "imag": [3, 6, 13, 15, 19, 32, 36, 46, 48, 51, 54, 57, 67, 69, 88, 93, 94, 106, 116, 143, 152, 163, 187, 218, 227, 230, 233, 254, 285, 294, 295, 307, 314, 315, 339, 340, 360, 361, 363, 365, 368, 373, 376, 379, 381, 384, 386, 393, 398, 423, 427, 433, 443, 474, 475, 476, 477, 483, 484, 487, 488, 515, 516, 518, 522, 588, 589, 672, 678, 718, 805, 849, 958, 962, 963, 965, 967, 974, 978, 982, 986, 988, 993, 994, 996, 997, 999, 1004, 1007, 1012, 1013, 1017, 1019, 1020], "denois": [3, 15, 93, 106, 163, 398, 477, 516, 518, 522, 565, 568, 805, 849], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 73, 93, 104, 106, 129, 135, 137, 143, 147, 149, 150, 151, 152, 155, 158, 160, 173, 197, 210, 224, 225, 232, 236, 239, 250, 254, 256, 258, 261, 262, 266, 271, 277, 290, 309, 316, 319, 321, 323, 326, 327, 328, 331, 332, 335, 337, 350, 354, 357, 360, 370, 379, 381, 391, 393, 394, 397, 400, 401, 414, 422, 429, 433, 442, 443, 446, 463, 464, 465, 472, 477, 479, 483, 485, 495, 514, 515, 516, 522, 525, 535, 537, 539, 541, 543, 546, 549, 551, 574, 575, 591, 592, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 658, 659, 660, 669, 671, 672, 673, 676, 715, 738, 739, 741, 746, 747, 754, 755, 756, 757, 777, 788, 791, 805, 807, 812, 813, 819, 820, 822, 824, 830, 837, 839, 840, 845, 849, 851, 852, 859, 873, 874, 878, 879, 880, 881, 882, 883, 884, 887, 889, 951, 957, 958, 959, 962, 963, 965, 968, 975, 976, 982, 984, 988, 992, 993, 998, 999, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "pca": [3, 6, 15, 68, 71, 73, 75, 85, 89, 93, 96, 105, 106, 163, 218, 220, 230, 232, 236, 255, 276, 280, 285, 309, 350, 360, 370, 381, 392, 393, 394, 399, 409, 454, 457, 477, 483, 485, 495, 513, 514, 515, 516, 520, 521, 524, 525, 530, 624, 639, 669, 671, 673, 777, 801, 805, 828, 835, 838, 839, 841, 849, 857, 859, 954, 956, 959, 965, 972, 976, 978, 993, 998, 999, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1019], "libsvm": [3, 15, 163, 172, 324, 361, 374, 468, 489, 544, 878, 879, 880, 881, 882, 883, 884, 977, 982, 999, 1004, 1006, 1012, 1015, 1018], "gui": [3, 15, 163, 468, 882, 883, 995, 1004, 1005, 1015], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 57, 60, 68, 70, 75, 77, 81, 85, 93, 94, 106, 109, 112, 114, 117, 119, 120, 121, 123, 125, 127, 128, 131, 134, 135, 137, 139, 141, 146, 151, 152, 154, 155, 156, 157, 161, 164, 165, 169, 170, 176, 178, 180, 182, 186, 187, 189, 191, 192, 193, 197, 198, 200, 202, 204, 208, 209, 211, 212, 213, 215, 225, 228, 232, 241, 243, 244, 245, 248, 250, 251, 252, 254, 257, 259, 261, 262, 264, 265, 269, 270, 272, 274, 276, 278, 280, 282, 283, 285, 289, 299, 302, 306, 308, 310, 311, 314, 315, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 340, 341, 345, 346, 347, 350, 357, 360, 362, 363, 371, 374, 381, 383, 389, 390, 391, 393, 394, 396, 398, 399, 400, 401, 402, 403, 412, 414, 416, 419, 424, 430, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 469, 470, 477, 479, 482, 483, 484, 490, 503, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 569, 570, 572, 574, 575, 578, 583, 587, 590, 591, 592, 596, 608, 615, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 682, 687, 692, 702, 703, 704, 714, 715, 721, 722, 730, 733, 765, 768, 769, 770, 775, 776, 777, 780, 781, 783, 791, 792, 793, 794, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 824, 825, 826, 828, 830, 835, 836, 837, 839, 840, 842, 844, 846, 851, 852, 854, 855, 856, 858, 859, 863, 864, 866, 867, 868, 869, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 952, 954, 955, 956, 959, 960, 963, 965, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 984, 986, 989, 991, 993, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009], "complex": [3, 9, 14, 15, 16, 148, 153, 160, 163, 210, 213, 224, 231, 239, 249, 265, 272, 299, 306, 309, 310, 313, 320, 326, 341, 343, 349, 364, 368, 373, 379, 394, 398, 400, 403, 404, 422, 426, 428, 429, 431, 448, 470, 481, 482, 483, 495, 515, 522, 532, 538, 539, 540, 541, 543, 545, 546, 585, 611, 619, 637, 639, 657, 658, 714, 730, 777, 805, 807, 835, 839, 840, 844, 852, 859, 874, 878, 881, 884, 886, 887, 888, 889, 951, 952, 954, 955, 957, 961, 963, 968, 972, 975, 983, 984, 986, 999, 1005, 1007, 1013, 1014, 1017], "influenc": [3, 9, 15, 79, 80, 163, 166, 178, 241, 264, 298, 326, 334, 350, 356, 395, 398, 400, 414, 422, 435, 446, 463, 464, 465, 470, 482, 535, 537, 539, 541, 543, 546, 549, 551, 592, 609, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 657, 659, 660, 714, 730, 805, 812, 813, 821, 822, 829, 830, 837, 856, 857, 867, 879, 881, 884, 887, 889, 898, 951, 956, 957, 965, 968, 972, 976, 977, 986, 1007, 1012, 1013], "core": [3, 15, 49, 64, 70, 116, 117, 163, 166, 167, 311, 353, 355, 357, 366, 368, 371, 376, 381, 384, 393, 398, 400, 404, 426, 430, 431, 436, 438, 480, 519, 570, 575, 639, 640, 647, 649, 657, 814, 815, 816, 817, 818, 823, 831, 958, 965, 968, 977, 980, 983, 984, 986, 995, 997, 999, 1006, 1008, 1009, 1011, 1014, 1018, 1019], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 35, 45, 70, 71, 72, 87, 92, 97, 108, 109, 111, 113, 115, 116, 117, 119, 122, 126, 133, 138, 141, 142, 143, 144, 147, 158, 166, 167, 172, 174, 188, 189, 196, 204, 215, 224, 226, 230, 234, 237, 239, 244, 249, 253, 254, 255, 256, 257, 265, 271, 272, 277, 278, 284, 286, 289, 290, 291, 296, 300, 314, 320, 322, 326, 329, 332, 334, 335, 338, 340, 341, 342, 350, 354, 356, 357, 361, 362, 363, 365, 370, 373, 377, 380, 381, 388, 391, 393, 394, 397, 398, 401, 402, 410, 419, 450, 456, 463, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 491, 493, 495, 496, 500, 501, 503, 504, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 590, 591, 592, 594, 595, 603, 613, 614, 624, 639, 640, 647, 649, 655, 656, 657, 678, 684, 686, 688, 689, 693, 694, 696, 697, 699, 706, 707, 709, 710, 714, 718, 721, 722, 723, 734, 736, 738, 739, 762, 763, 764, 766, 767, 768, 769, 772, 774, 777, 778, 780, 781, 782, 783, 791, 795, 796, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 821, 826, 828, 829, 835, 836, 837, 839, 843, 846, 851, 852, 859, 862, 864, 873, 874, 875, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 901, 904, 912, 951, 952, 954, 955, 956, 959, 960, 964, 967, 969, 970, 972, 973, 975, 981, 982, 984, 985, 986, 988, 989, 993, 994, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 56, 59, 61, 63, 69, 79, 80, 119, 176, 190, 191, 225, 229, 235, 236, 241, 243, 249, 262, 263, 267, 272, 281, 284, 286, 292, 300, 309, 313, 315, 320, 333, 342, 344, 354, 356, 357, 360, 361, 362, 368, 373, 379, 381, 393, 394, 396, 397, 398, 400, 403, 428, 430, 449, 468, 469, 470, 480, 484, 489, 502, 517, 525, 545, 596, 606, 633, 639, 647, 649, 655, 657, 678, 684, 686, 688, 694, 698, 709, 717, 771, 773, 777, 791, 805, 814, 816, 818, 821, 826, 839, 840, 842, 843, 851, 874, 875, 876, 878, 890, 891, 892, 912, 951, 954, 958, 960, 962, 963, 964, 966, 969, 972, 974, 976, 977, 981, 983, 986, 989, 999, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "outlier": [3, 15, 44, 79, 80, 121, 124, 163, 174, 198, 199, 202, 215, 224, 239, 277, 290, 297, 304, 336, 363, 381, 393, 395, 400, 450, 451, 454, 455, 456, 457, 471, 472, 473, 477, 491, 493, 503, 505, 544, 620, 630, 651, 652, 653, 657, 658, 659, 660, 673, 683, 825, 829, 840, 846, 848, 849, 851, 855, 856, 857, 859, 864, 867, 881, 882, 884, 962, 976, 977, 982, 984, 998, 999, 1004, 1009, 1010, 1012], "detect": [3, 8, 10, 15, 62, 64, 79, 81, 115, 124, 163, 177, 224, 239, 249, 256, 259, 272, 277, 290, 325, 363, 366, 368, 372, 379, 381, 392, 393, 395, 397, 401, 430, 450, 451, 454, 455, 456, 457, 469, 470, 472, 473, 477, 491, 493, 496, 503, 518, 519, 520, 527, 544, 545, 569, 572, 577, 620, 658, 683, 707, 769, 805, 825, 829, 840, 846, 859, 878, 882, 954, 958, 983, 984, 986, 992, 997, 998, 999, 1004, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1019], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 56, 57, 59, 61, 63, 64, 65, 69, 70, 72, 79, 80, 81, 85, 89, 93, 94, 99, 106, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 130, 134, 141, 142, 145, 148, 154, 155, 156, 157, 163, 165, 166, 167, 168, 169, 175, 180, 181, 184, 185, 187, 189, 191, 192, 195, 196, 197, 198, 200, 201, 204, 209, 210, 214, 217, 218, 219, 225, 226, 227, 228, 230, 231, 238, 241, 243, 245, 246, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 274, 278, 282, 283, 284, 285, 286, 289, 293, 294, 295, 298, 300, 302, 303, 306, 308, 309, 314, 315, 318, 319, 323, 325, 328, 334, 339, 340, 341, 346, 347, 350, 354, 355, 356, 360, 361, 363, 365, 366, 368, 370, 372, 373, 375, 376, 380, 381, 382, 384, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 469, 470, 474, 476, 477, 478, 480, 483, 484, 485, 489, 490, 491, 496, 504, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 681, 682, 683, 684, 694, 695, 700, 702, 703, 706, 707, 708, 709, 710, 711, 714, 718, 720, 721, 725, 726, 728, 730, 731, 733, 736, 759, 760, 762, 763, 764, 765, 767, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 898, 899, 909, 910, 915, 919, 930, 931, 932, 933, 936, 937, 943, 946, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 989, 991, 992, 993, 996, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 55, 57, 61, 69, 70, 71, 72, 74, 84, 105, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 122, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 142, 145, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 166, 167, 168, 172, 175, 178, 179, 180, 188, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 210, 211, 213, 214, 225, 226, 228, 230, 233, 242, 243, 244, 245, 246, 247, 249, 250, 254, 256, 258, 259, 262, 265, 266, 270, 272, 274, 279, 282, 283, 284, 287, 288, 295, 298, 299, 303, 306, 307, 308, 309, 310, 315, 317, 318, 319, 322, 323, 325, 326, 332, 333, 334, 335, 339, 340, 345, 346, 347, 348, 350, 353, 355, 357, 360, 363, 365, 368, 370, 375, 377, 381, 383, 387, 388, 389, 391, 392, 393, 394, 398, 400, 401, 402, 410, 414, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 446, 450, 463, 464, 465, 468, 482, 489, 505, 515, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 563, 574, 575, 583, 587, 591, 592, 594, 595, 596, 597, 603, 606, 608, 609, 611, 612, 613, 614, 615, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 695, 696, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 718, 721, 722, 723, 726, 728, 730, 732, 736, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 830, 836, 837, 839, 846, 859, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 936, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 963, 964, 965, 966, 968, 969, 970, 975, 976, 977, 978, 981, 982, 983, 985, 986, 989, 991, 992, 993, 997, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "latenc": [3, 7, 15, 119, 163, 353, 505, 546, 653, 659, 805, 859, 884, 927, 936, 982, 999, 1007], "speci": [3, 15, 163, 277, 290, 339, 363, 399, 479, 687, 769, 824, 882, 893, 962, 968, 1004], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 56, 61, 74, 78, 79, 80, 91, 109, 111, 121, 124, 140, 148, 157, 163, 165, 166, 172, 175, 196, 198, 200, 219, 221, 225, 229, 241, 246, 247, 252, 256, 262, 264, 277, 281, 290, 297, 298, 300, 303, 304, 314, 315, 331, 334, 339, 354, 355, 363, 364, 365, 366, 368, 369, 372, 373, 374, 381, 387, 391, 392, 393, 395, 397, 398, 399, 403, 405, 428, 430, 450, 451, 452, 453, 454, 455, 456, 457, 469, 479, 484, 496, 497, 498, 499, 500, 504, 513, 514, 517, 531, 532, 533, 544, 592, 606, 621, 623, 625, 626, 629, 639, 640, 650, 660, 661, 669, 670, 671, 673, 687, 689, 704, 732, 769, 775, 776, 781, 782, 789, 791, 795, 796, 805, 815, 818, 824, 828, 835, 842, 855, 856, 857, 858, 859, 866, 867, 868, 873, 874, 882, 893, 917, 930, 951, 956, 958, 960, 961, 962, 964, 965, 967, 968, 974, 975, 980, 982, 983, 988, 992, 996, 998, 999, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "relat": [3, 7, 12, 15, 17, 44, 61, 95, 97, 99, 163, 164, 166, 191, 234, 249, 263, 311, 339, 348, 357, 363, 364, 367, 371, 372, 373, 375, 376, 377, 379, 381, 382, 383, 387, 392, 393, 394, 395, 396, 397, 398, 400, 403, 431, 445, 450, 477, 530, 531, 543, 544, 620, 654, 658, 673, 703, 723, 798, 802, 837, 838, 840, 843, 844, 849, 852, 853, 854, 855, 858, 866, 882, 951, 956, 962, 963, 965, 966, 969, 972, 977, 978, 979, 980, 983, 999, 1004, 1008, 1009, 1010, 1012, 1013, 1016, 1017], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 57, 59, 62, 67, 68, 69, 70, 71, 75, 79, 80, 85, 88, 89, 90, 91, 94, 96, 98, 102, 103, 105, 107, 108, 117, 123, 127, 128, 129, 131, 132, 140, 142, 146, 148, 149, 150, 153, 154, 156, 160, 161, 164, 165, 166, 167, 170, 174, 179, 182, 183, 185, 192, 196, 197, 198, 200, 201, 205, 211, 212, 213, 215, 224, 227, 229, 237, 238, 239, 249, 253, 256, 262, 263, 265, 266, 270, 272, 274, 279, 284, 285, 287, 291, 294, 296, 297, 298, 301, 304, 305, 307, 310, 311, 321, 322, 323, 326, 334, 337, 338, 341, 342, 345, 347, 348, 350, 357, 360, 361, 362, 363, 364, 365, 366, 370, 371, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 391, 393, 395, 396, 397, 398, 399, 403, 404, 405, 406, 409, 413, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 560, 561, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 599, 600, 601, 603, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 684, 694, 702, 703, 704, 721, 738, 739, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 761, 765, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 899, 912, 927, 937, 938, 939, 943, 951, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 986, 988, 989, 993, 994, 995, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "engin": [3, 15, 19, 40, 114, 153, 163, 354, 362, 365, 393, 399, 401, 403, 445, 477, 543, 620, 654, 798, 802, 837, 838, 840, 843, 844, 849, 852, 853, 854, 858, 952, 962, 972, 980, 1010], "topic": [3, 7, 8, 15, 69, 163, 339, 340, 341, 363, 364, 397, 398, 401, 469, 478, 517, 519, 521, 528, 569, 572, 958, 963, 982, 983, 997, 1009, 1011], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 68, 69, 70, 75, 84, 94, 163, 200, 211, 249, 272, 295, 339, 341, 350, 357, 360, 363, 365, 370, 374, 377, 379, 393, 394, 397, 398, 431, 433, 436, 437, 443, 445, 469, 470, 474, 475, 484, 485, 512, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 564, 565, 569, 570, 572, 574, 575, 578, 580, 612, 699, 768, 777, 791, 816, 838, 839, 883, 915, 926, 951, 959, 963, 967, 972, 976, 982, 986, 989, 993, 994, 999, 1004, 1005, 1013, 1016], "neg": [3, 4, 15, 16, 24, 59, 74, 77, 85, 120, 121, 125, 163, 166, 174, 196, 214, 215, 245, 246, 253, 256, 259, 263, 265, 266, 276, 298, 302, 310, 339, 374, 381, 382, 393, 397, 400, 401, 402, 404, 405, 414, 422, 426, 433, 446, 450, 463, 464, 465, 469, 512, 514, 516, 517, 518, 519, 521, 523, 525, 528, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 569, 572, 573, 576, 577, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 658, 659, 660, 661, 668, 679, 680, 685, 686, 693, 694, 696, 699, 700, 702, 703, 704, 707, 709, 710, 711, 715, 718, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 762, 763, 764, 765, 767, 771, 775, 776, 800, 805, 812, 813, 822, 825, 830, 837, 846, 855, 857, 858, 862, 866, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 913, 915, 930, 960, 962, 963, 965, 966, 967, 968, 976, 977, 997, 998, 999, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 61, 69, 78, 79, 80, 81, 84, 94, 95, 96, 105, 155, 163, 169, 174, 182, 197, 201, 215, 226, 229, 230, 246, 249, 263, 272, 294, 310, 314, 315, 339, 340, 341, 348, 354, 357, 363, 364, 365, 368, 370, 374, 377, 379, 380, 381, 390, 394, 395, 396, 401, 402, 403, 404, 405, 414, 420, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 435, 438, 440, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 473, 477, 478, 481, 482, 483, 484, 485, 486, 489, 490, 491, 500, 502, 504, 505, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 566, 567, 569, 570, 571, 572, 574, 575, 584, 585, 586, 587, 588, 589, 590, 592, 601, 610, 611, 612, 616, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 694, 695, 696, 697, 699, 709, 710, 711, 714, 718, 719, 720, 721, 734, 735, 738, 739, 740, 741, 743, 744, 746, 747, 748, 752, 754, 755, 757, 758, 759, 760, 761, 763, 764, 767, 768, 774, 775, 776, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 848, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 896, 897, 898, 899, 904, 913, 914, 915, 916, 919, 920, 921, 925, 926, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 952, 954, 956, 958, 959, 963, 964, 965, 966, 972, 973, 974, 975, 976, 978, 979, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "factor": [3, 15, 26, 31, 44, 46, 53, 61, 93, 99, 104, 106, 126, 163, 166, 222, 225, 234, 267, 268, 276, 277, 290, 292, 293, 298, 300, 308, 310, 354, 355, 374, 377, 381, 390, 392, 393, 400, 401, 403, 422, 424, 435, 450, 454, 455, 457, 459, 469, 485, 495, 496, 508, 513, 516, 517, 519, 521, 522, 525, 526, 527, 528, 530, 531, 542, 543, 544, 569, 572, 578, 594, 630, 631, 632, 635, 636, 637, 663, 664, 673, 700, 763, 777, 780, 781, 801, 825, 859, 872, 874, 882, 914, 915, 951, 958, 959, 965, 975, 979, 982, 998, 999, 1004, 1005, 1007, 1008, 1010, 1018, 1020], "latent": [3, 15, 17, 105, 163, 295, 340, 396, 401, 403, 469, 513, 517, 519, 520, 521, 524, 525, 569, 572, 835, 961, 982, 997, 998, 999, 1006, 1009], "dirichlet": [3, 15, 163, 241, 242, 247, 251, 401, 469, 517, 519, 521, 569, 572, 775, 982, 998, 999, 1004, 1009, 1010], "alloc": [3, 15, 25, 60, 163, 268, 308, 364, 368, 369, 393, 401, 425, 428, 440, 469, 517, 519, 521, 565, 569, 572, 627, 633, 641, 643, 780, 781, 783, 803, 806, 951, 972, 982, 998, 999, 1008, 1009, 1014, 1015], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 56, 59, 60, 79, 90, 93, 96, 98, 104, 106, 122, 124, 126, 130, 131, 156, 161, 163, 167, 169, 180, 187, 196, 198, 214, 222, 224, 227, 230, 235, 236, 239, 246, 249, 250, 252, 253, 257, 266, 272, 281, 285, 286, 291, 293, 296, 298, 302, 303, 306, 308, 315, 357, 360, 364, 366, 374, 375, 390, 395, 397, 398, 399, 400, 420, 423, 427, 435, 453, 477, 483, 485, 488, 491, 495, 503, 513, 515, 522, 545, 547, 552, 612, 614, 639, 670, 673, 678, 679, 681, 682, 683, 699, 707, 762, 769, 778, 779, 782, 783, 794, 795, 796, 797, 798, 805, 836, 840, 859, 883, 892, 911, 957, 959, 960, 965, 966, 968, 969, 972, 978, 982, 988, 999, 1007, 1014, 1015, 1016, 1018], "stock": [3, 15, 163, 393, 395, 435, 453, 670, 991], "market": [3, 15, 163, 393, 395, 435, 453, 670, 986, 991], "wikipedia": [3, 15, 24, 163, 376, 392, 393, 576, 588, 589, 617, 637, 649, 652, 663, 664, 676, 685, 686, 688, 690, 693, 697, 699, 706, 709, 710, 711, 714, 715, 718, 723, 736, 763, 765, 766, 768, 769, 770, 771, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 954, 958, 962, 965, 974, 978, 997, 1004, 1011], "princip": [3, 15, 83, 86, 93, 96, 98, 99, 101, 103, 106, 126, 163, 217, 230, 232, 285, 303, 308, 360, 393, 396, 405, 465, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 531, 638, 669, 670, 671, 673, 674, 805, 828, 840, 859, 914, 915, 959, 965, 998, 999, 1004], "eigenvector": [3, 15, 46, 85, 89, 163, 241, 393, 433, 443, 515, 516, 522, 531, 669, 670, 672, 676, 959, 1004, 1008, 1018], "click": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 368, 376, 986, 988, 990], "here": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 376, 379, 380, 387, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 404, 406, 419, 422, 423, 424, 425, 426, 427, 428, 430, 433, 445, 453, 456, 517, 519, 520, 524, 525, 548, 549, 550, 551, 562, 563, 565, 569, 572, 575, 583, 609, 611, 628, 632, 634, 636, 642, 644, 646, 654, 656, 670, 672, 676, 680, 693, 706, 726, 736, 772, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 815, 819, 820, 843, 851, 854, 857, 870, 871, 881, 928, 951, 954, 958, 959, 960, 961, 962, 965, 968, 972, 974, 975, 976, 977, 982, 983, 985, 986, 988, 989, 995, 1004, 1012, 1017], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 361, 363, 365, 366, 372, 373, 376, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 491, 978, 993, 995, 997, 999, 1008, 1009, 1012, 1016, 1017, 1018], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 354, 355, 357, 365, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 384, 386, 387, 392, 404, 405, 409, 420, 421, 437, 442, 452, 466, 488, 489, 512, 524, 528, 536, 553, 554, 558, 564, 573, 576, 577, 579, 582, 584, 593, 597, 601, 602, 605, 610, 619, 623, 628, 631, 632, 635, 641, 642, 644, 648, 656, 679, 680, 689, 696, 702, 703, 704, 706, 708, 710, 711, 715, 719, 723, 724, 726, 727, 731, 734, 736, 743, 744, 748, 749, 751, 753, 761, 763, 772, 784, 785, 786, 787, 788, 789, 790, 807, 809, 811, 813, 815, 819, 820, 829, 830, 831, 833, 841, 842, 845, 847, 850, 860, 863, 865, 866, 868, 869, 870, 873, 879, 888, 889, 890, 891, 904, 913, 915, 917, 918, 920, 924, 925, 926, 933, 950, 952, 960, 983, 984, 986, 989, 992, 993, 997, 999, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1019, 1020], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 366, 368, 369, 370, 372, 373, 374, 375, 376, 379, 381, 382, 384, 389, 393, 395, 397, 400, 403, 404, 405, 419, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 443, 445, 448, 452, 453, 512, 513, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 563, 573, 575, 576, 577, 579, 580, 581, 583, 591, 592, 615, 621, 627, 628, 630, 632, 633, 634, 636, 637, 641, 642, 643, 644, 663, 664, 669, 670, 671, 672, 673, 674, 675, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 837, 838, 841, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 909, 910, 930, 933, 936, 951, 961, 963, 966, 975, 977, 978, 982, 983, 986, 988, 995, 997, 1004, 1007, 1009, 1011, 1012, 1013, 1014, 1018, 1019], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 366, 367, 368, 369, 371, 372, 374, 376, 377, 379, 380, 381, 384, 387, 392, 393, 394, 395, 401, 404, 405, 426, 484, 514, 542, 543, 583, 615, 627, 668, 777, 780, 781, 783, 791, 802, 804, 909, 959, 966, 972, 975, 976, 977, 978, 979, 981, 982, 985, 986, 990, 997, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 368, 376, 972], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 369, 374, 394, 449, 876, 978, 981, 982, 983, 1015, 1018], "introduc": [4, 77, 79, 80, 99, 144, 163, 168, 175, 224, 229, 239, 263, 311, 341, 361, 364, 366, 368, 370, 372, 373, 376, 379, 381, 384, 391, 393, 395, 397, 398, 400, 401, 415, 423, 424, 425, 427, 428, 430, 440, 445, 449, 463, 464, 465, 466, 477, 485, 496, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 536, 537, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 639, 645, 666, 667, 669, 670, 805, 823, 828, 831, 835, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 872, 876, 956, 958, 961, 964, 965, 968, 972, 974, 976, 977, 988, 995, 1004, 1005, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 79, 84, 85, 89, 90, 91, 94, 96, 97, 99, 102, 103, 104, 108, 112, 114, 117, 118, 121, 123, 128, 129, 130, 131, 134, 137, 140, 145, 147, 148, 149, 150, 153, 154, 155, 158, 160, 161, 163, 165, 166, 168, 172, 175, 176, 182, 183, 184, 185, 187, 193, 196, 197, 198, 200, 201, 202, 203, 204, 214, 217, 218, 219, 222, 225, 227, 230, 231, 234, 241, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 270, 271, 276, 282, 283, 285, 292, 293, 297, 302, 303, 304, 306, 321, 325, 326, 330, 334, 335, 337, 339, 340, 341, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 371, 373, 375, 377, 380, 381, 384, 387, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 416, 419, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 439, 440, 443, 445, 456, 459, 471, 474, 475, 477, 484, 485, 489, 490, 493, 495, 503, 518, 519, 520, 521, 527, 528, 530, 531, 536, 537, 544, 569, 570, 571, 572, 575, 592, 594, 595, 596, 600, 603, 604, 608, 613, 614, 615, 619, 624, 625, 628, 630, 632, 634, 636, 639, 642, 647, 648, 649, 657, 658, 659, 661, 671, 673, 675, 679, 680, 681, 682, 685, 686, 687, 688, 690, 696, 698, 699, 707, 708, 709, 710, 711, 714, 717, 723, 737, 738, 739, 748, 758, 762, 763, 764, 766, 767, 769, 770, 771, 773, 776, 777, 779, 780, 781, 782, 783, 786, 791, 792, 793, 794, 795, 796, 797, 800, 802, 803, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 832, 835, 839, 844, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869, 878, 880, 883, 886, 887, 888, 889, 926, 951, 952, 954, 955, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 979, 982, 983, 986, 988, 990, 991, 992, 996, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "strategi": [4, 52, 54, 57, 60, 70, 118, 123, 128, 144, 160, 161, 163, 168, 185, 196, 204, 214, 227, 236, 249, 257, 259, 261, 265, 266, 272, 291, 296, 297, 304, 306, 307, 310, 341, 353, 370, 374, 380, 381, 397, 400, 401, 402, 405, 419, 420, 421, 433, 443, 453, 483, 485, 493, 495, 503, 514, 519, 532, 533, 542, 543, 548, 549, 552, 569, 570, 572, 573, 575, 583, 608, 609, 611, 615, 626, 628, 632, 634, 636, 642, 644, 646, 654, 656, 672, 676, 685, 694, 735, 737, 773, 777, 780, 781, 783, 791, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 836, 844, 849, 873, 878, 880, 883, 886, 887, 888, 889, 933, 951, 952, 961, 963, 964, 965, 966, 968, 970, 972, 976, 977, 978, 982, 992, 997, 999, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "leverag": [4, 8, 37, 49, 85, 214, 339, 340, 354, 355, 366, 397, 400, 854, 951, 958, 988, 1007, 1019], "task": [4, 7, 97, 108, 115, 116, 122, 143, 144, 156, 163, 174, 196, 212, 215, 217, 253, 341, 354, 356, 363, 365, 366, 367, 368, 372, 373, 374, 377, 379, 380, 381, 398, 400, 401, 402, 403, 429, 442, 474, 486, 496, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 613, 614, 627, 628, 633, 634, 641, 642, 643, 644, 655, 662, 665, 688, 707, 709, 710, 734, 762, 764, 767, 769, 778, 782, 795, 799, 928, 929, 959, 962, 963, 964, 965, 973, 975, 977, 978, 980, 981, 983, 984, 985, 986, 988, 995, 996, 997, 999, 1004, 1009, 1013, 1019], "highli": [4, 9, 71, 79, 80, 96, 105, 124, 191, 201, 256, 259, 265, 293, 340, 354, 355, 368, 370, 374, 391, 393, 397, 400, 401, 433, 443, 477, 544, 652, 673, 789, 791, 835, 958, 962, 965, 966, 968, 976, 977, 981], "depend": [4, 5, 7, 37, 53, 74, 98, 118, 121, 122, 125, 128, 140, 144, 154, 160, 163, 164, 166, 170, 172, 176, 200, 214, 218, 224, 225, 231, 239, 246, 256, 257, 261, 262, 263, 276, 293, 298, 303, 308, 311, 323, 334, 340, 341, 350, 354, 355, 356, 361, 368, 370, 371, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 392, 393, 395, 397, 398, 400, 401, 402, 403, 404, 420, 421, 422, 426, 428, 430, 431, 433, 435, 438, 440, 441, 443, 445, 450, 465, 470, 471, 472, 474, 477, 481, 482, 483, 485, 486, 491, 515, 516, 522, 525, 532, 540, 541, 543, 569, 570, 571, 572, 583, 585, 588, 589, 592, 608, 613, 614, 619, 621, 629, 639, 640, 650, 652, 654, 657, 658, 659, 661, 668, 671, 672, 675, 676, 709, 721, 758, 761, 770, 771, 775, 776, 796, 804, 821, 822, 823, 825, 827, 828, 829, 830, 831, 837, 838, 840, 852, 853, 856, 859, 872, 879, 880, 883, 887, 896, 951, 952, 954, 955, 956, 958, 959, 961, 962, 964, 965, 966, 967, 970, 974, 976, 977, 978, 988, 995, 997, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1019], "busi": [4, 196, 256, 376, 379, 768, 958, 962, 986], "dai": [4, 12, 153, 167, 197, 355, 365, 368, 858, 986, 1010, 1011, 1018, 1019], "week": [4, 367, 368, 382, 986, 1018], "yearli": 4, "season": [4, 153, 167, 197, 367, 403], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 56, 57, 61, 63, 65, 66, 67, 69, 70, 73, 77, 85, 97, 104, 108, 109, 116, 118, 120, 122, 123, 127, 128, 134, 144, 145, 149, 160, 161, 163, 166, 167, 168, 169, 172, 185, 196, 198, 202, 203, 204, 213, 214, 218, 219, 221, 225, 230, 232, 234, 243, 246, 249, 251, 252, 253, 254, 256, 257, 258, 261, 262, 264, 265, 267, 269, 271, 272, 274, 276, 289, 295, 298, 300, 302, 306, 313, 320, 326, 329, 332, 339, 341, 350, 353, 355, 356, 363, 365, 370, 371, 372, 374, 376, 377, 379, 380, 381, 383, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 411, 422, 424, 425, 426, 428, 429, 431, 433, 435, 436, 440, 442, 449, 450, 463, 464, 465, 466, 475, 483, 493, 496, 512, 513, 514, 516, 518, 520, 523, 524, 525, 526, 527, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 582, 583, 584, 591, 592, 608, 611, 619, 621, 626, 632, 635, 636, 637, 639, 645, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 663, 664, 666, 668, 670, 671, 674, 675, 684, 685, 686, 688, 689, 693, 694, 706, 709, 710, 718, 720, 722, 735, 736, 737, 758, 763, 764, 766, 767, 768, 772, 773, 774, 775, 776, 777, 780, 781, 788, 789, 791, 795, 800, 801, 802, 804, 805, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 826, 828, 834, 835, 836, 837, 839, 840, 842, 845, 846, 848, 849, 851, 852, 853, 855, 856, 859, 861, 863, 864, 865, 866, 867, 868, 869, 873, 874, 876, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 935, 946, 951, 952, 954, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 982, 983, 986, 988, 989, 992, 995, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 354, 355, 356, 357, 361, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 379, 380, 381, 383, 384, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 988, 992, 993, 994, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 57, 61, 69, 70, 71, 72, 74, 85, 94, 105, 114, 118, 141, 153, 157, 168, 172, 175, 177, 184, 185, 187, 196, 197, 202, 212, 214, 218, 226, 227, 235, 238, 253, 263, 265, 270, 284, 285, 292, 293, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 318, 326, 329, 340, 356, 357, 360, 362, 365, 368, 373, 380, 381, 390, 393, 394, 397, 401, 402, 445, 446, 447, 448, 470, 548, 562, 563, 569, 570, 571, 572, 611, 639, 640, 653, 655, 657, 659, 668, 721, 808, 839, 840, 878, 879, 880, 881, 883, 884, 952, 958, 963, 966, 973, 976, 977, 979, 982, 985, 986, 988, 993, 994, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "splinetransform": [4, 197, 309, 854, 972, 1017, 1019, 1020], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 57, 70, 71, 90, 91, 99, 103, 107, 108, 116, 124, 129, 132, 148, 149, 152, 156, 157, 160, 163, 166, 167, 172, 174, 186, 187, 188, 204, 208, 211, 212, 215, 218, 225, 232, 234, 241, 242, 243, 249, 250, 251, 256, 258, 262, 266, 267, 272, 274, 276, 279, 281, 284, 285, 286, 287, 303, 306, 310, 314, 316, 317, 321, 322, 326, 327, 335, 337, 339, 340, 341, 356, 357, 360, 362, 363, 364, 365, 368, 369, 370, 372, 373, 374, 375, 377, 379, 380, 384, 389, 391, 393, 394, 396, 398, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 442, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 483, 484, 485, 489, 490, 491, 493, 495, 496, 500, 503, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 707, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 734, 735, 737, 762, 763, 764, 766, 767, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 903, 904, 905, 906, 907, 909, 910, 922, 928, 930, 932, 933, 946, 951, 952, 953, 954, 956, 957, 958, 959, 963, 964, 966, 969, 970, 972, 973, 975, 978, 983, 984, 986, 988, 992, 995, 997, 999, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "extrapol": [4, 148, 175, 197, 228, 259, 858, 962, 972, 978, 1017, 1019], "option": [4, 30, 46, 52, 102, 122, 154, 161, 177, 197, 259, 265, 307, 339, 344, 350, 356, 362, 363, 364, 366, 368, 369, 371, 373, 374, 376, 377, 379, 381, 382, 384, 387, 393, 394, 396, 397, 398, 400, 401, 404, 415, 423, 424, 426, 427, 428, 429, 430, 433, 440, 442, 443, 444, 477, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 530, 538, 539, 543, 545, 546, 548, 549, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 609, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 627, 633, 638, 639, 640, 651, 654, 656, 657, 658, 659, 661, 663, 664, 668, 669, 670, 673, 675, 676, 685, 692, 694, 698, 702, 704, 715, 716, 717, 737, 738, 739, 744, 746, 747, 751, 754, 755, 756, 757, 758, 761, 770, 771, 773, 780, 781, 783, 803, 805, 806, 810, 811, 812, 813, 819, 820, 823, 828, 831, 835, 838, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 878, 886, 887, 888, 889, 890, 892, 905, 948, 951, 952, 958, 961, 962, 965, 972, 975, 977, 978, 983, 985, 995, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 70, 71, 88, 94, 105, 108, 114, 115, 117, 124, 125, 128, 129, 131, 142, 143, 153, 166, 167, 172, 177, 192, 193, 196, 204, 212, 227, 228, 233, 234, 235, 236, 238, 246, 252, 254, 256, 261, 263, 268, 274, 276, 280, 285, 293, 294, 295, 307, 308, 310, 311, 316, 317, 318, 345, 348, 354, 357, 360, 363, 365, 371, 374, 380, 387, 392, 396, 397, 398, 400, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 513, 515, 524, 819, 820, 915, 972, 983, 989, 991, 993, 999, 1004, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "openml": [4, 70, 128, 153, 166, 196, 204, 212, 214, 226, 274, 294, 361, 384, 477, 999, 1012, 1014, 1017], "repositori": [4, 8, 172, 361, 363, 365, 366, 368, 370, 372, 376, 382, 384, 485, 982, 985, 999], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 363, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 465, 466, 469, 476, 477, 481, 483, 484, 485, 487, 488, 489, 491, 493, 496, 502, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 560, 561, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 669, 670, 671, 672, 673, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 696, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 743, 744, 748, 749, 751, 753, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 866, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 905, 910, 913, 915, 917, 918, 919, 920, 922, 924, 925, 926, 930, 933, 936, 950, 951, 952, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 976, 977, 978, 983, 986, 988, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "fetch_openml": [4, 5, 70, 74, 118, 128, 153, 166, 167, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 306, 310, 362, 372, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "bike_shar": 4, "bike_sharing_demand": [4, 167], "version": [4, 46, 53, 70, 84, 94, 99, 150, 161, 167, 168, 172, 194, 197, 198, 204, 210, 212, 234, 238, 274, 294, 303, 306, 307, 308, 309, 311, 326, 339, 354, 357, 363, 367, 368, 369, 370, 371, 374, 376, 377, 379, 381, 382, 384, 386, 387, 392, 393, 396, 398, 400, 401, 403, 404, 405, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 485, 486, 489, 490, 491, 493, 495, 503, 504, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 694, 695, 699, 702, 703, 704, 705, 707, 708, 709, 710, 711, 714, 719, 720, 721, 723, 726, 733, 734, 736, 737, 738, 739, 741, 746, 747, 748, 749, 758, 764, 765, 767, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 790, 791, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 896, 898, 899, 909, 910, 912, 914, 915, 923, 925, 928, 929, 930, 932, 937, 943, 948, 949, 951, 954, 956, 959, 962, 964, 966, 968, 970, 975, 976, 978, 980, 983, 985, 996, 1000, 1002], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 134, 137, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 362, 363, 365, 366, 368, 370, 372, 373, 374, 375, 377, 379, 380, 381, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 440, 441, 443, 444, 445, 446, 449, 450, 452, 453, 454, 455, 456, 459, 463, 464, 465, 466, 474, 477, 481, 482, 485, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 584, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 687, 689, 694, 696, 697, 698, 699, 702, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 743, 744, 748, 749, 751, 753, 756, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 862, 866, 871, 872, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 898, 899, 904, 912, 913, 914, 915, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 930, 933, 935, 936, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 980, 988, 989, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1020], "as_fram": [4, 5, 70, 74, 118, 128, 153, 166, 167, 168, 184, 185, 196, 204, 212, 214, 234, 238, 276, 294, 303, 306, 308, 310, 311, 362, 363, 470, 471, 472, 473, 477, 481, 482, 483, 485, 486, 491, 1014, 1015, 1016, 1017], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 56, 57, 59, 62, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 91, 94, 95, 96, 97, 99, 105, 108, 113, 118, 119, 120, 121, 123, 124, 125, 128, 129, 131, 134, 135, 136, 141, 144, 148, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 172, 180, 181, 183, 184, 185, 187, 189, 191, 192, 193, 196, 198, 199, 200, 203, 204, 210, 211, 212, 214, 217, 220, 221, 225, 226, 229, 231, 232, 233, 234, 237, 238, 241, 244, 246, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 281, 282, 285, 289, 292, 293, 294, 295, 299, 303, 306, 308, 310, 311, 315, 317, 318, 319, 329, 333, 334, 335, 339, 340, 341, 344, 345, 348, 350, 354, 355, 361, 363, 364, 368, 369, 370, 373, 374, 375, 377, 380, 381, 383, 387, 389, 390, 391, 393, 394, 395, 397, 398, 400, 401, 402, 403, 405, 406, 407, 410, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 500, 503, 504, 505, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 693, 694, 695, 696, 699, 701, 704, 706, 707, 708, 709, 710, 711, 714, 715, 718, 719, 720, 721, 722, 723, 730, 731, 732, 734, 736, 741, 747, 748, 749, 758, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 788, 789, 791, 795, 796, 799, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 898, 899, 909, 915, 916, 922, 923, 924, 927, 928, 932, 933, 935, 943, 948, 950, 951, 952, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 982, 988, 992, 993, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "parser": [4, 5, 8, 70, 74, 118, 128, 153, 166, 167, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 306, 310, 477, 1019], "panda": [4, 5, 12, 25, 69, 70, 71, 72, 74, 115, 118, 121, 125, 128, 153, 160, 165, 166, 167, 168, 175, 185, 196, 204, 212, 214, 226, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 274, 276, 294, 303, 306, 309, 310, 334, 339, 340, 362, 363, 366, 367, 368, 370, 371, 381, 384, 386, 394, 415, 424, 425, 427, 428, 430, 445, 447, 449, 463, 464, 465, 466, 470, 471, 472, 473, 477, 481, 482, 483, 485, 486, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 613, 614, 616, 619, 620, 621, 622, 623, 669, 670, 777, 780, 781, 791, 805, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 894, 951, 952, 972, 982, 983, 997, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "df": [4, 25, 27, 128, 165, 167, 175, 196, 214, 246, 256, 302, 340, 373, 401, 571, 572, 951, 952], "frame": [4, 16, 70, 153, 166, 167, 196, 363, 368, 379, 382, 470, 471, 472, 473, 477, 481, 482, 483, 485, 486, 491, 982, 993, 1016], "To": [4, 8, 16, 26, 27, 32, 46, 56, 77, 79, 81, 85, 89, 99, 118, 121, 122, 130, 134, 145, 153, 154, 157, 160, 161, 165, 166, 172, 177, 184, 196, 197, 198, 204, 214, 229, 230, 236, 238, 246, 251, 253, 254, 256, 258, 259, 261, 263, 274, 294, 298, 303, 306, 307, 308, 309, 310, 311, 336, 340, 344, 350, 354, 355, 361, 362, 366, 368, 369, 370, 372, 373, 374, 376, 379, 381, 387, 390, 393, 394, 395, 396, 397, 398, 400, 401, 429, 430, 431, 442, 445, 448, 473, 477, 483, 484, 488, 489, 512, 518, 519, 520, 522, 524, 525, 526, 527, 538, 539, 540, 541, 545, 546, 550, 578, 583, 608, 613, 627, 628, 633, 634, 637, 639, 640, 641, 642, 643, 644, 665, 681, 693, 708, 743, 765, 771, 780, 781, 801, 808, 850, 868, 869, 878, 879, 886, 887, 888, 889, 905, 915, 930, 949, 951, 952, 957, 958, 959, 960, 962, 963, 964, 965, 968, 969, 972, 976, 977, 978, 985, 986, 988, 992, 994, 995, 997, 1004, 1007, 1009, 1010, 1011, 1013, 1015], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 55, 95, 99, 121, 130, 142, 145, 148, 153, 154, 160, 166, 167, 168, 169, 189, 198, 211, 214, 217, 232, 254, 257, 258, 260, 264, 267, 274, 276, 281, 289, 299, 306, 315, 318, 323, 326, 328, 331, 336, 339, 341, 344, 355, 357, 361, 362, 363, 366, 368, 369, 370, 373, 374, 375, 376, 381, 384, 387, 389, 393, 394, 395, 397, 398, 400, 401, 402, 403, 407, 408, 409, 413, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 443, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 680, 702, 703, 704, 706, 712, 713, 722, 736, 743, 744, 749, 765, 768, 775, 776, 777, 780, 781, 791, 800, 801, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 906, 907, 908, 914, 915, 951, 957, 958, 959, 961, 962, 972, 975, 976, 977, 978, 983, 985, 992, 995, 996, 997, 1001, 1004, 1007, 1010, 1012, 1015, 1017, 1018], "quick": [4, 99, 237, 368, 370, 374, 384, 587, 805, 962, 963, 972, 986, 995, 1001], "understand": [4, 9, 89, 153, 163, 167, 251, 254, 308, 309, 323, 339, 343, 349, 350, 367, 368, 369, 374, 379, 383, 393, 400, 401, 485, 805, 836, 837, 886, 887, 888, 889, 892, 951, 952, 959, 961, 978, 981, 982, 986, 1004, 1018], "pattern": [4, 16, 62, 81, 93, 106, 148, 160, 163, 167, 309, 339, 340, 341, 350, 365, 368, 370, 390, 393, 394, 398, 400, 401, 429, 445, 447, 485, 513, 515, 522, 536, 537, 619, 689, 705, 721, 749, 768, 769, 775, 859, 954, 956, 958, 962, 963, 969, 977, 979, 983, 986, 1016], "let": [4, 5, 53, 63, 70, 74, 94, 99, 108, 115, 118, 121, 122, 125, 148, 154, 155, 161, 166, 167, 168, 177, 185, 196, 198, 214, 217, 221, 251, 256, 259, 263, 339, 341, 348, 350, 363, 368, 370, 374, 379, 390, 393, 397, 400, 401, 481, 485, 491, 515, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 662, 665, 845, 852, 853, 958, 959, 960, 961, 962, 969, 970, 972, 977, 978, 986, 995, 997, 1014], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 55, 94, 102, 118, 119, 148, 157, 165, 166, 167, 193, 197, 204, 214, 218, 221, 229, 237, 238, 242, 243, 247, 251, 256, 259, 263, 302, 339, 348, 355, 357, 363, 368, 372, 374, 376, 379, 384, 390, 393, 396, 398, 400, 401, 414, 444, 446, 463, 464, 465, 512, 518, 526, 527, 531, 533, 535, 537, 539, 541, 543, 546, 549, 551, 569, 570, 572, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 662, 665, 670, 674, 685, 701, 720, 735, 812, 813, 822, 830, 837, 859, 872, 879, 881, 884, 887, 889, 915, 956, 961, 962, 969, 972, 980, 986, 997, 1001, 1014], "look": [4, 5, 53, 94, 97, 99, 121, 122, 148, 153, 154, 161, 166, 167, 198, 217, 221, 225, 247, 251, 256, 258, 294, 339, 350, 355, 356, 362, 363, 366, 368, 370, 372, 374, 376, 379, 380, 393, 396, 398, 399, 400, 401, 429, 469, 470, 538, 539, 540, 541, 545, 546, 583, 584, 612, 640, 673, 859, 886, 887, 888, 889, 958, 959, 972, 976, 977, 979, 997, 1004, 1012, 1014], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 59, 61, 112, 113, 117, 121, 124, 129, 130, 131, 145, 153, 167, 177, 185, 196, 203, 214, 234, 259, 261, 264, 266, 274, 298, 306, 318, 339, 350, 354, 363, 365, 370, 390, 391, 395, 397, 401, 403, 404, 405, 419, 420, 423, 426, 427, 428, 430, 471, 474, 475, 504, 512, 513, 514, 518, 519, 521, 522, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 568, 613, 614, 629, 639, 640, 647, 648, 650, 653, 655, 657, 658, 659, 661, 668, 681, 684, 685, 687, 688, 689, 694, 701, 702, 703, 705, 706, 708, 709, 710, 714, 715, 716, 718, 719, 720, 723, 725, 726, 728, 730, 731, 733, 736, 744, 761, 762, 763, 764, 765, 767, 768, 773, 774, 775, 776, 803, 825, 845, 948, 952, 957, 958, 963, 966, 968, 969, 976, 977, 978, 995, 997, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "per": [4, 10, 48, 53, 63, 90, 114, 118, 153, 155, 166, 167, 196, 211, 214, 238, 242, 252, 263, 265, 298, 308, 334, 339, 341, 354, 363, 364, 368, 373, 374, 377, 379, 381, 391, 393, 397, 398, 399, 400, 401, 403, 429, 431, 438, 442, 445, 449, 468, 481, 483, 484, 485, 489, 491, 493, 496, 504, 513, 515, 516, 517, 520, 522, 524, 530, 531, 542, 543, 550, 564, 569, 572, 591, 592, 613, 614, 622, 623, 639, 640, 647, 649, 652, 654, 655, 656, 657, 659, 673, 677, 694, 697, 701, 721, 734, 738, 739, 761, 763, 775, 776, 800, 807, 808, 809, 811, 812, 815, 817, 835, 838, 844, 846, 848, 849, 852, 853, 859, 876, 878, 879, 880, 881, 882, 883, 884, 903, 904, 915, 937, 951, 954, 958, 961, 962, 963, 966, 969, 976, 977, 978, 982, 983, 995, 997, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020], "hour": [4, 166, 167, 368, 374, 959, 981], "sundai": 4, "weekend": 4, "clearli": [4, 59, 97, 167, 230, 367, 368, 379, 381, 398, 400, 963, 969], "distinguish": [4, 40, 79, 91, 99, 198, 253, 363, 370, 381, 400, 403, 951, 962, 965, 968], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 74, 85, 97, 121, 154, 166, 167, 168, 185, 196, 197, 204, 214, 221, 222, 231, 242, 262, 298, 300, 302, 303, 319, 339, 340, 341, 350, 356, 363, 367, 368, 369, 370, 372, 373, 376, 379, 381, 391, 392, 393, 395, 397, 398, 400, 401, 403, 423, 425, 427, 428, 429, 430, 440, 442, 513, 516, 538, 539, 540, 541, 545, 546, 563, 570, 575, 608, 609, 611, 620, 639, 640, 676, 686, 693, 723, 741, 747, 754, 758, 761, 766, 768, 802, 870, 871, 886, 887, 888, 889, 915, 931, 951, 952, 954, 956, 958, 961, 962, 965, 967, 968, 970, 972, 974, 976, 977, 978, 986, 997, 1011, 1012, 1013, 1016, 1018], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 43, 44, 46, 49, 52, 53, 56, 59, 66, 74, 79, 88, 89, 91, 94, 97, 101, 102, 110, 112, 115, 116, 118, 120, 121, 122, 123, 124, 128, 145, 148, 154, 157, 161, 166, 167, 172, 175, 176, 182, 185, 187, 190, 194, 196, 197, 198, 211, 212, 213, 214, 217, 221, 225, 230, 231, 232, 236, 241, 243, 244, 246, 247, 250, 254, 256, 257, 258, 259, 263, 265, 276, 278, 286, 292, 293, 295, 298, 299, 300, 303, 306, 307, 308, 310, 311, 315, 323, 326, 331, 334, 336, 339, 340, 341, 344, 345, 350, 354, 355, 356, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 380, 381, 382, 384, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 913, 915, 917, 925, 928, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 984, 985, 986, 988, 992, 993, 994, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "spread": [4, 40, 219, 257, 298, 314, 315, 316, 319, 354, 368, 393, 433, 443, 496, 856, 867, 875, 962], "peak": [4, 27, 167, 391, 397, 1018], "middl": [4, 24, 59, 99, 109, 335, 365, 969, 972], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 362, 371, 375, 384, 386, 420, 483, 612, 613, 678, 679, 681, 682, 683, 783, 892, 982, 991, 993, 994, 995, 1001, 1013, 1016, 1017, 1018, 1019], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 368, 375, 420, 483, 612, 613, 678, 679, 681, 682, 683, 783, 993, 994, 995, 1001, 1018], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 375, 420, 483, 612, 613, 678, 679, 681, 682, 683, 783, 892, 969, 993, 994, 995, 1001], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 56, 59, 63, 65, 72, 77, 79, 85, 89, 94, 99, 100, 101, 105, 108, 114, 115, 118, 121, 122, 125, 126, 128, 130, 151, 157, 160, 167, 169, 172, 176, 184, 187, 190, 191, 193, 194, 196, 197, 204, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 228, 234, 235, 246, 251, 252, 253, 256, 257, 258, 259, 262, 265, 266, 267, 274, 276, 278, 280, 281, 289, 293, 294, 298, 299, 300, 302, 303, 306, 310, 311, 323, 333, 334, 335, 336, 339, 340, 341, 344, 375, 993], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 63, 65, 71, 72, 74, 79, 81, 85, 89, 91, 94, 100, 101, 105, 108, 111, 114, 115, 118, 125, 126, 128, 129, 130, 151, 152, 157, 160, 165, 166, 167, 168, 169, 172, 175, 176, 179, 185, 187, 188, 191, 193, 194, 196, 197, 198, 200, 201, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 231, 234, 235, 237, 241, 243, 246, 251, 252, 253, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 280, 281, 284, 286, 287, 292, 293, 294, 298, 300, 301, 302, 303, 306, 307, 310, 311, 322, 323, 324, 327, 328, 333, 334, 335, 336, 339, 340, 341, 344, 345, 370, 371, 398, 403, 420, 515, 522, 531, 612, 613, 678, 679, 681, 682, 683, 699, 783, 892, 962, 965, 969, 1001, 1014], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 59, 61, 64, 65, 72, 74, 78, 79, 80, 81, 84, 85, 90, 91, 94, 95, 96, 97, 99, 104, 105, 109, 111, 112, 114, 115, 117, 118, 122, 125, 126, 128, 129, 130, 140, 150, 152, 157, 160, 161, 166, 167, 169, 172, 176, 179, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 204, 209, 212, 214, 217, 218, 221, 222, 225, 226, 228, 230, 231, 232, 233, 234, 235, 241, 242, 243, 244, 246, 247, 251, 252, 253, 256, 258, 259, 261, 262, 263, 265, 266, 267, 269, 270, 274, 276, 278, 279, 280, 281, 284, 285, 287, 288, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 310, 311, 317, 319, 323, 324, 326, 333, 334, 335, 336, 339, 340, 341, 344, 345, 375, 993], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 72, 74, 79, 81, 84, 85, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 104, 105, 109, 111, 112, 118, 119, 120, 121, 122, 126, 128, 129, 140, 150, 152, 156, 157, 160, 161, 166, 167, 169, 172, 175, 176, 179, 186, 190, 193, 194, 195, 196, 197, 198, 200, 202, 204, 207, 210, 212, 214, 217, 218, 219, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 241, 243, 244, 247, 251, 252, 253, 258, 259, 260, 263, 265, 266, 270, 274, 276, 278, 292, 293, 295, 298, 299, 300, 301, 302, 303, 310, 311, 314, 316, 324, 326, 330, 331, 333, 334, 335, 336, 339, 340, 341, 892, 993], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 70, 71, 72, 73, 80, 81, 84, 85, 90, 91, 95, 96, 97, 98, 99, 100, 101, 103, 104, 108, 110, 112, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 141, 151, 153, 154, 156, 157, 160, 161, 166, 167, 169, 172, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 202, 203, 204, 206, 209, 210, 214, 217, 225, 229, 230, 231, 232, 233, 234, 236, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 267, 270, 274, 276, 278, 280, 281, 282, 283, 286, 289, 292, 294, 295, 298, 299, 301, 302, 306, 307, 309, 311, 314, 315, 316, 317, 318, 323, 325, 329, 330, 331, 334, 335, 336, 339, 340, 341, 348, 350, 355, 362, 363, 365, 366, 368, 373, 374, 377, 379, 380, 381, 384, 385, 386, 391, 393, 394, 395, 397, 398, 400, 401, 402, 403, 405, 419, 421, 422, 423, 425, 427, 428, 429, 430, 432, 433, 434, 440, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 477, 485, 493, 494, 497, 498, 499, 509, 513, 514, 515, 516, 518, 519, 520, 521, 525, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 551, 558, 562, 563, 570, 571, 572, 574, 575, 584, 588, 589, 595, 598, 600, 603, 608, 609, 610, 611, 614, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 658, 660, 661, 665, 668, 670, 671, 673, 674, 679, 680, 683, 687, 688, 696, 697, 706, 707, 714, 723, 724, 726, 727, 728, 729, 731, 732, 736, 748, 749, 761, 762, 768, 769, 772, 774, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 805, 808, 809, 810, 813, 814, 815, 816, 818, 827, 836, 837, 838, 844, 845, 846, 851, 852, 854, 855, 857, 862, 866, 872, 878, 879, 881, 882, 884, 886, 887, 888, 904, 912, 914, 915, 917, 919, 920, 926, 930, 933, 951, 952, 955, 956, 957, 958, 960, 962, 963, 964, 965, 972, 973, 976, 977, 980, 988, 992, 993, 994, 995, 997, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1017, 1018, 1019], "average_week_demand": 4, "groupbi": [4, 72, 167, 204, 214], "weekdai": [4, 167], "count": [4, 14, 25, 27, 41, 49, 53, 69, 70, 91, 129, 130, 166, 167, 196, 198, 229, 238, 265, 276, 307, 308, 340, 341, 363, 365, 372, 377, 381, 382, 391, 392, 393, 398, 400, 401, 430, 470, 517, 525, 562, 569, 570, 571, 572, 575, 585, 598, 621, 678, 686, 696, 699, 709, 710, 718, 734, 763, 764, 766, 767, 814, 818, 819, 820, 828, 831, 842, 890, 892, 917, 927, 951, 954, 958, 962, 964, 965, 972, 978, 986, 997, 1004, 1007, 1009, 1012, 1013, 1015, 1016], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 67, 70, 78, 79, 80, 81, 85, 91, 94, 97, 98, 99, 101, 102, 111, 112, 117, 118, 121, 122, 128, 129, 130, 135, 144, 145, 148, 153, 155, 157, 160, 163, 166, 167, 176, 178, 185, 187, 189, 192, 196, 198, 200, 202, 203, 205, 211, 212, 213, 214, 220, 222, 225, 228, 229, 230, 231, 232, 234, 235, 236, 238, 241, 242, 243, 244, 246, 247, 252, 253, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 287, 298, 301, 303, 306, 309, 317, 326, 329, 334, 336, 338, 339, 341, 342, 350, 354, 360, 362, 363, 365, 368, 369, 370, 372, 373, 374, 376, 377, 379, 380, 381, 390, 391, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 414, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 469, 482, 483, 485, 487, 493, 500, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 569, 570, 571, 572, 575, 578, 583, 587, 588, 589, 590, 591, 592, 594, 603, 608, 609, 611, 613, 615, 616, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 685, 686, 688, 690, 693, 694, 697, 698, 704, 706, 709, 710, 711, 716, 717, 718, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 754, 758, 759, 761, 763, 764, 765, 767, 768, 770, 771, 773, 775, 776, 777, 780, 781, 783, 791, 795, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 832, 833, 835, 836, 837, 838, 840, 841, 843, 844, 848, 849, 851, 855, 857, 859, 864, 866, 867, 869, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 894, 898, 899, 901, 936, 937, 943, 947, 951, 952, 953, 956, 958, 959, 961, 964, 965, 966, 967, 969, 970, 975, 976, 977, 978, 982, 986, 992, 995, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 57, 58, 59, 60, 61, 64, 67, 71, 72, 74, 78, 79, 80, 85, 87, 89, 92, 94, 97, 102, 103, 104, 105, 107, 109, 111, 112, 113, 114, 115, 120, 121, 123, 125, 126, 127, 132, 135, 137, 140, 141, 143, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 163, 164, 165, 166, 168, 169, 170, 172, 174, 178, 179, 181, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 220, 221, 222, 224, 225, 228, 229, 231, 232, 233, 238, 239, 241, 242, 243, 245, 247, 249, 250, 251, 256, 257, 259, 261, 262, 266, 267, 268, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 307, 310, 311, 315, 316, 319, 321, 322, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 346, 347, 348, 349, 357, 368, 371, 377, 379, 383, 384, 388, 391, 393, 395, 397, 399, 400, 420, 423, 431, 437, 445, 452, 477, 482, 483, 485, 493, 496, 500, 504, 505, 534, 538, 541, 543, 545, 546, 550, 551, 591, 603, 612, 613, 614, 638, 639, 653, 657, 678, 679, 681, 682, 683, 684, 699, 707, 730, 762, 764, 767, 768, 769, 783, 794, 800, 801, 802, 803, 806, 817, 821, 837, 840, 852, 853, 856, 859, 878, 883, 886, 887, 892, 955, 956, 958, 959, 961, 962, 965, 966, 968, 976, 977, 978, 982, 983, 992, 993, 995, 999, 1005, 1007, 1008, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 57, 62, 66, 69, 81, 91, 94, 99, 100, 102, 104, 112, 113, 114, 140, 148, 153, 154, 155, 165, 166, 167, 172, 175, 179, 180, 181, 183, 184, 185, 188, 193, 194, 196, 198, 209, 213, 218, 221, 226, 231, 238, 251, 256, 258, 259, 260, 262, 263, 265, 279, 284, 287, 295, 300, 303, 307, 310, 311, 315, 316, 334, 339, 341, 345, 370, 374, 381, 398, 400, 401, 513, 514, 515, 516, 517, 519, 520, 521, 524, 528, 547, 578, 633, 634, 644, 665, 669, 670, 671, 672, 677, 679, 681, 744, 777, 791, 823, 831, 852, 952, 958, 959, 962, 964, 965, 966, 969, 970, 972, 977, 978, 995, 1011], "hourli": [4, 166], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 97, 118, 119, 120, 150, 151, 152, 156, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 255, 256, 270, 280, 289, 295, 314, 326, 329, 330, 331, 332, 678, 993], "24": [4, 5, 19, 65, 163, 167, 211, 276, 305, 306, 312, 314, 315, 318, 372, 384, 393, 400, 401, 419, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 441, 443, 445, 450, 451, 452, 453, 454, 455, 456, 457, 470, 471, 472, 473, 477, 485, 496, 497, 498, 499, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 562, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 594, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 679, 681, 683, 689, 695, 707, 726, 733, 775, 776, 777, 780, 781, 791, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 840, 842, 843, 844, 845, 848, 849, 851, 853, 854, 855, 856, 857, 859, 868, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 909, 910, 937, 943, 951, 969, 972, 980, 1000, 1002, 1004, 1012, 1013, 1014, 1015, 1017], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 59, 60, 62, 63, 64, 77, 78, 80, 81, 109, 111, 112, 113, 115, 121, 127, 140, 144, 149, 166, 167, 172, 185, 186, 190, 194, 196, 197, 203, 204, 212, 214, 218, 220, 228, 229, 233, 241, 243, 246, 247, 251, 255, 256, 257, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 274, 280, 286, 289, 295, 298, 303, 306, 310, 311, 315, 326, 339, 340, 345, 348, 355, 362, 363, 365, 368, 370, 374, 377, 381, 387, 393, 397, 400, 403, 422, 442, 450, 452, 453, 454, 455, 456, 457, 459, 462, 472, 475, 476, 495, 508, 522, 534, 535, 540, 541, 544, 569, 570, 572, 610, 613, 619, 621, 629, 630, 650, 652, 657, 661, 673, 693, 711, 726, 768, 805, 811, 825, 827, 829, 830, 835, 849, 856, 857, 858, 863, 864, 867, 868, 871, 872, 914, 915, 930, 951, 958, 962, 966, 976, 983, 986, 991, 992, 993, 995, 1009, 1010, 1011, 1012, 1014, 1017], "7": [4, 6, 11, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 59, 63, 64, 66, 70, 71, 73, 79, 81, 84, 97, 108, 109, 112, 117, 121, 124, 128, 129, 157, 165, 166, 167, 169, 172, 177, 178, 180, 189, 195, 196, 197, 198, 210, 214, 217, 225, 230, 231, 236, 238, 241, 242, 245, 246, 251, 256, 260, 262, 263, 267, 269, 274, 276, 278, 281, 282, 284, 294, 295, 298, 302, 306, 309, 310, 311, 314, 315, 317, 318, 323, 325, 330, 334, 335, 340, 341, 350, 363, 365, 366, 368, 372, 373, 374, 384, 385, 386, 397, 398, 400, 401, 402, 403, 421, 426, 429, 431, 432, 433, 434, 443, 452, 453, 472, 513, 514, 515, 516, 517, 519, 525, 542, 543, 569, 572, 581, 608, 609, 611, 628, 630, 639, 642, 673, 702, 703, 704, 706, 708, 724, 725, 726, 730, 731, 733, 765, 772, 775, 778, 779, 784, 787, 794, 795, 798, 802, 805, 809, 819, 820, 828, 837, 838, 851, 852, 873, 874, 915, 918, 919, 926, 951, 952, 957, 958, 960, 962, 963, 965, 966, 968, 972, 976, 977, 980, 988, 992, 995, 1000, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1017], "xticklabel": [4, 10, 118, 167], "sun": [4, 167, 1012, 1017, 1018], "mon": [4, 167], "tue": [4, 167, 1010], "wed": [4, 167], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 59, 77, 81, 97, 99, 112, 114, 116, 118, 141, 148, 153, 154, 167, 184, 185, 196, 198, 214, 225, 231, 235, 243, 254, 256, 261, 262, 263, 306, 309, 344, 350, 354, 355, 363, 370, 374, 379, 381, 391, 393, 397, 398, 400, 401, 403, 404, 419, 421, 444, 496, 508, 534, 535, 536, 537, 538, 539, 544, 545, 546, 584, 587, 591, 603, 608, 613, 614, 624, 626, 639, 658, 686, 699, 705, 768, 773, 779, 784, 786, 798, 810, 813, 848, 878, 953, 954, 955, 956, 957, 958, 959, 962, 963, 968, 969, 970, 972, 974, 975, 976, 977, 983, 985, 986, 1004, 1006, 1010, 1012, 1013, 1014, 1016, 1020], "fri": [4, 167, 363], "sat": [4, 167, 401], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 60, 77, 78, 80, 81, 84, 85, 89, 96, 102, 109, 110, 111, 113, 118, 119, 120, 121, 122, 123, 127, 131, 134, 135, 140, 141, 144, 148, 149, 150, 151, 153, 154, 155, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 210, 214, 229, 231, 232, 251, 255, 256, 260, 261, 265, 266, 269, 270, 271, 278, 279, 282, 283, 323, 325, 326, 329, 339, 345, 346, 347, 612], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 60, 77, 78, 80, 81, 84, 85, 89, 96, 102, 109, 110, 111, 113, 119, 120, 121, 122, 123, 127, 131, 134, 135, 140, 141, 144, 148, 149, 150, 151, 153, 154, 155, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 214, 229, 231, 232, 251, 255, 256, 259, 260, 261, 265, 266, 269, 270, 271, 279, 323, 326, 329, 339, 345, 346, 347, 612], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 60, 61, 62, 66, 67, 69, 70, 71, 72, 74, 81, 84, 85, 90, 91, 94, 96, 98, 99, 102, 108, 109, 110, 112, 116, 117, 119, 120, 121, 122, 124, 128, 130, 141, 142, 145, 156, 157, 161, 163, 166, 167, 172, 185, 195, 196, 197, 198, 203, 204, 210, 211, 212, 213, 214, 217, 225, 229, 232, 235, 241, 242, 244, 246, 247, 250, 251, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 276, 278, 282, 283, 298, 300, 301, 306, 307, 308, 309, 310, 311, 318, 326, 330, 331, 334, 340, 341, 344, 348, 350, 355, 356, 360, 362, 363, 364, 365, 366, 368, 371, 372, 374, 375, 376, 377, 379, 380, 381, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 688, 693, 694, 695, 697, 699, 701, 704, 708, 709, 710, 711, 714, 715, 718, 720, 732, 735, 754, 758, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 899, 902, 914, 915, 918, 919, 930, 931, 933, 936, 937, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 976, 977, 978, 979, 982, 983, 985, 988, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "rental": [4, 167, 969], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 68, 73, 75, 85, 89, 98, 101, 103, 108, 110, 116, 117, 118, 121, 122, 125, 127, 128, 129, 131, 137, 140, 143, 145, 148, 150, 153, 154, 161, 163, 165, 166, 167, 168, 169, 175, 179, 189, 192, 196, 198, 201, 204, 205, 218, 226, 228, 229, 230, 231, 233, 234, 235, 243, 250, 254, 257, 259, 261, 262, 265, 266, 276, 279, 284, 287, 288, 293, 298, 307, 308, 310, 314, 315, 318, 319, 322, 323, 326, 330, 332, 333, 339, 340, 345, 346, 347, 348, 350, 354, 356, 357, 360, 361, 362, 363, 364, 365, 370, 372, 373, 376, 377, 380, 383, 393, 397, 400, 403, 415, 419, 420, 421, 424, 427, 445, 446, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 489, 491, 501, 505, 512, 513, 515, 517, 518, 520, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 554, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 678, 679, 681, 682, 683, 688, 689, 690, 693, 694, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 715, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 828, 829, 830, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 862, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 924, 925, 926, 953, 954, 955, 958, 959, 962, 966, 969, 970, 976, 977, 978, 983, 985, 986, 988, 993, 995, 997, 999, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "absolut": [4, 74, 98, 118, 145, 166, 196, 198, 202, 214, 370, 393, 395, 397, 398, 400, 401, 402, 403, 404, 426, 431, 437, 438, 512, 518, 523, 526, 527, 529, 530, 531, 539, 541, 542, 543, 546, 569, 571, 572, 574, 578, 583, 600, 608, 613, 627, 630, 631, 633, 635, 637, 652, 657, 659, 663, 664, 680, 685, 698, 702, 716, 717, 725, 726, 728, 733, 735, 737, 748, 773, 779, 783, 794, 797, 803, 805, 817, 819, 820, 824, 843, 848, 851, 863, 887, 889, 948, 958, 959, 972, 976, 978, 995, 996, 1005, 1010, 1015, 1016, 1017, 1018], "basi": [4, 6, 13, 99, 148, 153, 155, 197, 294, 309, 326, 360, 366, 369, 393, 398, 400, 433, 515, 603, 613, 620, 672, 858, 960, 972, 977, 984, 992, 993, 996, 999, 1012, 1014, 1017], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 57, 61, 66, 71, 76, 81, 82, 89, 94, 97, 105, 109, 111, 117, 126, 134, 136, 137, 140, 141, 150, 152, 153, 161, 163, 166, 178, 183, 184, 185, 189, 191, 198, 199, 202, 210, 212, 214, 220, 229, 232, 254, 255, 256, 267, 269, 274, 276, 278, 282, 283, 289, 292, 294, 298, 300, 301, 303, 309, 317, 319, 325, 332, 335, 354, 393, 395, 398, 450, 451, 452, 453, 454, 455, 456, 457, 458, 493, 517, 536, 537, 538, 539, 540, 541, 544, 545, 546, 587, 608, 612, 613, 629, 630, 650, 661, 672, 673, 677, 680, 685, 686, 721, 737, 769, 770, 771, 777, 836, 837, 848, 849, 851, 858, 864, 865, 886, 887, 888, 889, 930, 958, 960, 965, 972, 976, 977, 995, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "977": [4, 397], "rescal": [4, 46, 47, 99, 177, 184, 220, 298, 336, 395, 405, 450, 451, 452, 453, 454, 455, 456, 457, 514, 519, 627, 630, 633, 851, 857, 880, 881, 882, 883, 884, 962, 972, 996, 1008, 1009], "variabl": [4, 9, 11, 12, 16, 37, 69, 112, 115, 118, 121, 122, 136, 137, 140, 145, 155, 156, 160, 161, 167, 168, 172, 185, 196, 200, 201, 214, 219, 247, 256, 259, 266, 303, 350, 354, 356, 363, 365, 366, 368, 370, 372, 373, 376, 381, 393, 394, 395, 396, 398, 400, 401, 402, 431, 463, 464, 465, 468, 480, 482, 489, 496, 513, 515, 517, 522, 525, 534, 540, 541, 585, 587, 588, 589, 621, 631, 632, 635, 636, 642, 663, 664, 676, 690, 727, 778, 779, 782, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 807, 811, 812, 842, 856, 867, 879, 951, 952, 954, 958, 961, 962, 963, 964, 965, 967, 969, 970, 972, 976, 978, 982, 983, 985, 988, 989, 991, 993, 1004, 1009, 1012, 1014, 1017, 1019], "rel": [4, 6, 8, 17, 27, 60, 99, 115, 153, 172, 176, 196, 214, 244, 282, 283, 299, 307, 310, 326, 339, 340, 363, 367, 370, 376, 381, 391, 393, 397, 400, 401, 403, 422, 425, 428, 430, 440, 502, 505, 512, 515, 518, 522, 538, 539, 540, 541, 545, 546, 547, 585, 630, 639, 640, 652, 671, 675, 709, 727, 777, 780, 781, 783, 791, 803, 806, 819, 820, 824, 836, 837, 848, 849, 859, 874, 878, 879, 880, 883, 885, 886, 887, 888, 889, 958, 959, 962, 964, 965, 966, 968, 985, 993], "so": [4, 9, 12, 16, 17, 42, 48, 55, 60, 64, 80, 117, 120, 127, 148, 153, 166, 168, 172, 176, 196, 197, 225, 256, 276, 282, 283, 286, 293, 294, 299, 307, 317, 326, 334, 339, 341, 348, 350, 354, 355, 356, 362, 363, 367, 368, 370, 372, 373, 374, 376, 377, 381, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 477, 489, 490, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 686, 689, 697, 706, 721, 736, 768, 775, 776, 777, 780, 781, 783, 784, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 868, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 915, 928, 937, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 972, 974, 975, 976, 977, 983, 986, 995, 996, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "error": [4, 5, 7, 13, 17, 27, 74, 77, 78, 80, 98, 104, 107, 108, 109, 112, 115, 118, 122, 132, 148, 160, 163, 166, 185, 192, 196, 198, 200, 202, 203, 210, 214, 228, 231, 247, 249, 252, 256, 257, 261, 270, 272, 282, 283, 310, 325, 334, 339, 340, 365, 366, 368, 370, 371, 372, 373, 377, 379, 381, 387, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 425, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 477, 484, 496, 505, 512, 518, 523, 524, 526, 529, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 548, 556, 573, 576, 577, 579, 580, 581, 587, 610, 613, 624, 627, 628, 629, 632, 634, 636, 642, 644, 646, 650, 652, 654, 656, 658, 659, 661, 666, 669, 670, 673, 674, 677, 679, 682, 683, 690, 693, 701, 702, 703, 707, 720, 723, 724, 725, 726, 727, 728, 730, 731, 733, 736, 744, 758, 762, 768, 769, 777, 780, 781, 783, 791, 801, 802, 803, 805, 806, 807, 808, 809, 814, 815, 816, 818, 819, 820, 826, 827, 829, 830, 831, 834, 837, 840, 852, 853, 858, 859, 876, 878, 880, 881, 882, 887, 889, 896, 897, 898, 899, 902, 925, 946, 949, 951, 952, 953, 955, 956, 957, 959, 963, 966, 970, 972, 976, 977, 978, 984, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "easili": [4, 9, 31, 142, 169, 199, 212, 230, 235, 238, 256, 258, 265, 281, 300, 368, 370, 381, 382, 394, 400, 401, 403, 430, 956, 958, 959, 972, 976, 977, 978, 989, 992, 997, 1010], "interpret": [4, 27, 145, 155, 163, 164, 165, 167, 170, 196, 197, 212, 214, 250, 256, 258, 259, 295, 299, 302, 308, 339, 341, 354, 366, 368, 369, 374, 376, 377, 381, 383, 391, 393, 394, 399, 401, 433, 445, 446, 448, 477, 522, 553, 592, 620, 624, 634, 653, 654, 672, 673, 676, 682, 709, 733, 738, 739, 763, 770, 771, 783, 792, 802, 803, 805, 808, 840, 852, 859, 930, 956, 958, 962, 963, 969, 972, 978, 982, 988, 996, 1004, 1005, 1009, 1012, 1017, 1019], "fraction": [4, 25, 27, 119, 121, 196, 204, 214, 334, 340, 391, 397, 400, 420, 421, 430, 431, 437, 438, 496, 508, 538, 539, 540, 541, 545, 546, 547, 571, 574, 583, 647, 648, 649, 652, 657, 658, 659, 684, 702, 703, 704, 714, 772, 774, 779, 783, 803, 804, 818, 846, 880, 881, 882, 886, 887, 888, 889, 928, 958, 962, 965, 969, 970, 972, 977, 978, 983, 1005, 1006, 1007, 1018], "maximum": [4, 8, 11, 27, 33, 37, 56, 77, 78, 79, 80, 81, 96, 114, 117, 119, 149, 155, 163, 174, 184, 215, 266, 278, 282, 283, 289, 298, 321, 337, 340, 344, 346, 347, 354, 373, 374, 380, 381, 390, 391, 393, 395, 396, 398, 400, 401, 403, 404, 405, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 438, 440, 442, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 479, 490, 492, 493, 494, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 564, 565, 578, 591, 608, 612, 613, 616, 618, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 657, 658, 659, 660, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 697, 724, 761, 775, 777, 780, 781, 783, 791, 798, 803, 828, 835, 836, 837, 843, 844, 848, 849, 851, 854, 855, 856, 858, 866, 867, 872, 873, 874, 875, 878, 879, 883, 886, 887, 888, 889, 890, 892, 895, 902, 951, 957, 958, 959, 961, 962, 964, 965, 966, 968, 972, 976, 977, 978, 996, 1011, 1012, 1014, 1015, 1018, 1019], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 137, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 163, 165, 166, 167, 168, 169, 172, 174, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 220, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 339, 340, 344, 345, 346, 347, 348, 354, 356, 357, 360, 363, 365, 368, 371, 373, 374, 377, 379, 381, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 409, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 482, 490, 491, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 558, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 679, 681, 682, 683, 692, 703, 715, 730, 768, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 907, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 984, 986, 992, 993, 994, 995, 996, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 55, 56, 57, 60, 64, 67, 68, 75, 78, 79, 83, 86, 94, 97, 99, 103, 104, 105, 114, 115, 116, 122, 128, 140, 145, 160, 172, 183, 185, 197, 204, 213, 216, 218, 223, 225, 231, 238, 240, 248, 258, 263, 265, 276, 282, 283, 285, 298, 302, 306, 308, 309, 339, 340, 341, 348, 350, 354, 355, 356, 357, 360, 365, 366, 368, 369, 370, 374, 375, 377, 379, 380, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 440, 443, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 485, 493, 495, 503, 506, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 691, 692, 711, 712, 715, 716, 721, 722, 743, 748, 749, 754, 758, 763, 768, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 901, 915, 922, 923, 928, 931, 946, 947, 950, 951, 952, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 970, 972, 974, 975, 976, 977, 978, 979, 982, 984, 986, 988, 992, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "minim": [4, 12, 56, 65, 77, 78, 121, 148, 156, 175, 192, 194, 196, 198, 204, 214, 217, 228, 229, 241, 246, 257, 265, 266, 298, 306, 309, 323, 334, 344, 357, 367, 368, 371, 376, 379, 381, 391, 393, 395, 398, 400, 422, 423, 427, 431, 444, 519, 521, 528, 538, 539, 540, 541, 545, 546, 590, 591, 592, 622, 627, 630, 638, 639, 648, 652, 653, 655, 659, 660, 668, 673, 675, 676, 728, 760, 826, 828, 837, 855, 866, 872, 886, 887, 888, 889, 953, 958, 959, 962, 965, 966, 972, 974, 975, 976, 977, 982, 984, 995, 996, 999, 1008, 1013, 1014], "squar": [4, 5, 60, 70, 78, 79, 80, 83, 86, 95, 105, 112, 122, 124, 145, 148, 153, 163, 166, 174, 175, 177, 185, 192, 196, 198, 200, 201, 206, 213, 214, 215, 228, 229, 231, 244, 265, 266, 270, 302, 308, 309, 311, 323, 339, 360, 365, 368, 374, 377, 381, 391, 393, 395, 396, 398, 399, 400, 404, 405, 414, 422, 424, 425, 426, 428, 430, 431, 438, 440, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 482, 512, 518, 520, 522, 524, 528, 530, 533, 535, 537, 539, 540, 541, 543, 546, 549, 551, 571, 572, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 592, 596, 603, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 667, 668, 669, 671, 673, 675, 677, 680, 690, 702, 703, 704, 730, 731, 738, 739, 743, 749, 750, 765, 805, 812, 813, 821, 822, 825, 827, 829, 830, 837, 840, 859, 878, 879, 881, 883, 884, 885, 887, 889, 913, 935, 948, 953, 955, 956, 965, 966, 970, 976, 978, 984, 995, 996, 999, 1004, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 60, 62, 70, 71, 73, 82, 84, 85, 94, 95, 96, 102, 104, 107, 108, 109, 114, 115, 117, 119, 121, 125, 128, 129, 130, 131, 132, 134, 135, 143, 144, 145, 147, 148, 153, 155, 158, 159, 160, 162, 165, 166, 174, 177, 180, 184, 185, 191, 196, 198, 200, 201, 203, 204, 213, 214, 215, 224, 225, 226, 231, 236, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 272, 276, 277, 283, 290, 298, 300, 309, 310, 329, 334, 340, 341, 345, 354, 355, 356, 357, 360, 366, 368, 371, 372, 375, 376, 377, 378, 384, 387, 388, 391, 393, 396, 398, 401, 402, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 442, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 476, 477, 479, 482, 483, 505, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 560, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 668, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 688, 689, 692, 693, 694, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 775, 776, 777, 780, 781, 782, 783, 788, 789, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 866, 867, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 897, 898, 899, 901, 903, 904, 907, 909, 910, 911, 923, 946, 950, 957, 959, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 983, 984, 986, 988, 989, 991, 993, 995, 996, 997, 998, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020], "condit": [4, 12, 25, 27, 81, 116, 121, 163, 164, 166, 170, 185, 198, 201, 214, 259, 309, 348, 374, 379, 383, 390, 393, 395, 398, 400, 402, 432, 445, 453, 454, 459, 477, 494, 504, 505, 517, 520, 521, 522, 524, 526, 528, 530, 531, 543, 608, 613, 614, 624, 631, 632, 633, 635, 636, 637, 651, 653, 654, 655, 656, 663, 664, 668, 678, 693, 698, 699, 716, 717, 773, 814, 815, 816, 817, 818, 837, 840, 843, 852, 853, 856, 915, 956, 958, 959, 960, 962, 964, 965, 967, 972, 978, 982, 995, 999, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1018, 1019], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 65, 67, 69, 70, 71, 72, 74, 77, 78, 79, 80, 88, 94, 95, 96, 97, 98, 99, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 131, 135, 136, 137, 141, 145, 148, 149, 150, 153, 154, 155, 157, 159, 160, 162, 163, 165, 166, 167, 168, 172, 174, 175, 176, 179, 180, 184, 191, 196, 197, 198, 201, 203, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 232, 238, 241, 242, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 271, 274, 276, 279, 282, 283, 284, 287, 289, 298, 303, 307, 308, 309, 311, 315, 319, 322, 323, 325, 326, 328, 329, 339, 340, 341, 344, 347, 348, 350, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 413, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 482, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 556, 557, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 591, 592, 593, 600, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 690, 692, 693, 699, 701, 702, 707, 709, 710, 714, 715, 717, 722, 723, 725, 726, 728, 730, 731, 733, 736, 738, 739, 743, 744, 746, 747, 748, 749, 750, 753, 755, 756, 757, 758, 761, 762, 763, 764, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 905, 909, 910, 911, 913, 914, 915, 917, 919, 922, 923, 925, 926, 927, 930, 932, 933, 936, 937, 943, 946, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 986, 989, 991, 992, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "median": [4, 37, 70, 74, 79, 80, 121, 160, 161, 166, 198, 202, 213, 227, 298, 307, 309, 310, 363, 395, 400, 402, 422, 435, 439, 442, 455, 533, 535, 539, 546, 578, 608, 611, 616, 651, 652, 660, 702, 733, 826, 857, 868, 887, 889, 952, 972, 978, 1007, 1008], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 57, 59, 60, 95, 112, 113, 121, 124, 131, 145, 148, 153, 163, 165, 166, 167, 172, 185, 190, 195, 196, 202, 214, 249, 254, 256, 262, 263, 269, 272, 303, 339, 340, 354, 363, 365, 370, 374, 381, 390, 391, 392, 395, 397, 398, 399, 400, 401, 430, 433, 443, 479, 496, 519, 521, 528, 532, 538, 539, 540, 541, 544, 545, 546, 585, 588, 589, 592, 608, 639, 671, 673, 679, 680, 683, 685, 686, 688, 690, 693, 694, 697, 698, 701, 705, 706, 707, 709, 711, 716, 717, 719, 720, 723, 727, 735, 736, 737, 762, 763, 764, 766, 767, 769, 770, 773, 800, 802, 805, 825, 856, 867, 886, 887, 888, 889, 952, 958, 960, 965, 967, 968, 970, 976, 978, 992, 995, 1004, 1007, 1009, 1010, 1012, 1014], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 69, 70, 84, 99, 108, 109, 112, 114, 115, 116, 119, 120, 121, 122, 123, 134, 137, 139, 141, 144, 146, 148, 149, 163, 165, 166, 167, 168, 169, 172, 180, 185, 191, 192, 196, 197, 198, 203, 204, 211, 212, 214, 221, 226, 231, 233, 243, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 267, 268, 272, 274, 284, 285, 292, 294, 300, 303, 318, 326, 334, 341, 350, 354, 355, 362, 363, 365, 371, 372, 373, 374, 379, 380, 381, 383, 384, 386, 388, 391, 394, 395, 398, 400, 401, 402, 403, 410, 412, 414, 417, 418, 419, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 469, 470, 474, 478, 479, 483, 485, 505, 512, 518, 520, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 573, 575, 576, 577, 579, 580, 581, 583, 585, 586, 587, 589, 590, 591, 592, 608, 609, 611, 616, 617, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 680, 693, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 829, 830, 836, 837, 839, 863, 864, 866, 867, 868, 869, 873, 874, 876, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 907, 909, 910, 957, 958, 961, 962, 965, 966, 970, 972, 976, 977, 978, 982, 983, 985, 986, 989, 992, 993, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "discuss": [4, 53, 57, 166, 185, 217, 222, 259, 339, 350, 356, 363, 365, 368, 373, 374, 376, 379, 381, 382, 393, 395, 399, 400, 403, 479, 663, 664, 821, 822, 827, 829, 830, 952, 956, 958, 959, 962, 965, 972, 979, 983, 1007], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 59, 61, 65, 77, 100, 101, 117, 128, 134, 135, 145, 166, 169, 189, 232, 234, 251, 261, 268, 344, 350, 354, 355, 356, 357, 370, 373, 376, 381, 393, 395, 397, 400, 401, 403, 404, 425, 426, 428, 430, 440, 504, 513, 519, 540, 541, 563, 583, 639, 640, 653, 655, 660, 668, 669, 670, 674, 706, 736, 777, 780, 781, 791, 846, 886, 887, 888, 889, 952, 953, 957, 958, 959, 960, 961, 965, 972, 975, 976, 977, 989, 991, 995, 996, 1006, 1007, 1011, 1013, 1015], "focu": [4, 9, 27, 94, 148, 247, 286, 354, 373, 391, 400, 534, 535, 540, 542, 543, 659, 959, 965, 972, 982, 983], "intuit": [4, 31, 44, 52, 61, 99, 112, 118, 140, 148, 166, 167, 197, 198, 219, 225, 257, 281, 300, 303, 323, 326, 340, 368, 381, 391, 393, 395, 397, 399, 762, 763, 764, 767, 850, 954, 958, 959, 962, 963, 969, 972, 973, 977, 986, 995, 997, 1004], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 71, 74, 79, 81, 85, 91, 94, 97, 99, 102, 108, 109, 111, 112, 114, 115, 117, 118, 121, 145, 148, 154, 157, 160, 166, 167, 168, 172, 175, 182, 185, 196, 198, 202, 212, 213, 214, 221, 225, 231, 232, 242, 253, 254, 256, 257, 258, 259, 262, 265, 274, 276, 282, 283, 295, 298, 302, 303, 308, 310, 315, 339, 340, 341, 350, 354, 355, 356, 362, 363, 364, 367, 368, 370, 373, 374, 376, 381, 382, 387, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 433, 435, 438, 441, 444, 445, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 474, 475, 477, 490, 495, 496, 504, 512, 515, 516, 517, 518, 519, 521, 522, 523, 525, 528, 529, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 608, 609, 611, 615, 621, 623, 624, 625, 626, 627, 628, 633, 634, 636, 639, 640, 641, 642, 643, 644, 647, 648, 649, 652, 653, 655, 657, 658, 659, 660, 663, 668, 673, 675, 677, 685, 686, 693, 701, 702, 703, 704, 715, 716, 719, 744, 759, 760, 761, 763, 765, 773, 775, 776, 777, 780, 781, 787, 791, 796, 798, 800, 801, 802, 803, 804, 807, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 833, 836, 837, 842, 852, 854, 856, 857, 859, 861, 867, 868, 872, 875, 878, 879, 880, 883, 884, 886, 887, 888, 889, 890, 904, 915, 917, 918, 925, 931, 933, 936, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 976, 977, 978, 982, 983, 988, 992, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "root": [4, 16, 79, 145, 177, 348, 365, 368, 376, 393, 424, 482, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 620, 731, 886, 887, 888, 889, 890, 892, 968, 978, 1006, 1012, 1013, 1014, 1015, 1018, 1019], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 57, 59, 63, 67, 69, 74, 81, 108, 109, 114, 120, 122, 123, 128, 142, 149, 160, 163, 165, 166, 168, 180, 185, 191, 192, 196, 198, 200, 202, 214, 220, 226, 229, 230, 234, 237, 249, 250, 252, 253, 254, 256, 257, 259, 263, 265, 266, 272, 274, 276, 278, 286, 289, 295, 298, 303, 306, 307, 309, 310, 311, 314, 315, 317, 318, 339, 340, 350, 354, 357, 360, 363, 368, 370, 379, 380, 381, 383, 388, 391, 398, 399, 400, 403, 404, 410, 419, 423, 426, 427, 431, 438, 450, 501, 516, 530, 531, 532, 534, 536, 538, 539, 540, 542, 543, 545, 546, 548, 550, 559, 583, 591, 601, 609, 615, 619, 620, 621, 622, 623, 624, 639, 640, 644, 647, 649, 655, 656, 657, 669, 671, 673, 675, 677, 777, 780, 781, 783, 791, 800, 801, 802, 804, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 845, 851, 873, 874, 878, 880, 883, 886, 888, 952, 954, 957, 963, 968, 970, 982, 983, 992, 993, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "studi": [4, 59, 121, 196, 214, 259, 262, 263, 339, 363, 365, 397, 402, 677, 689, 738, 739, 804, 960, 962, 976, 988], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 55, 56, 59, 60, 61, 64, 65, 70, 71, 72, 73, 74, 80, 84, 85, 89, 90, 91, 96, 98, 99, 100, 101, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 217, 218, 219, 222, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 348, 350, 360, 361, 362, 363, 366, 368, 370, 373, 375, 377, 380, 381, 387, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 406, 410, 411, 412, 414, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 479, 481, 483, 486, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 687, 692, 706, 715, 721, 722, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 768, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 898, 903, 904, 924, 925, 926, 933, 936, 949, 951, 952, 953, 954, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 969, 972, 976, 977, 978, 983, 988, 992, 993, 995, 999, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "hist": [4, 25, 27, 53, 74, 111, 196, 198, 229, 262, 281, 298, 302, 310], "bin": [4, 24, 25, 27, 53, 74, 111, 196, 229, 262, 281, 298, 299, 300, 301, 302, 366, 376, 384, 391, 399, 400, 420, 421, 429, 442, 542, 543, 842, 844, 858, 917, 996, 1012, 1013, 1014, 1018], "30": [4, 8, 10, 14, 39, 40, 54, 59, 70, 72, 77, 100, 102, 117, 121, 127, 134, 148, 149, 152, 154, 167, 172, 175, 190, 194, 196, 214, 217, 218, 222, 230, 233, 245, 256, 261, 270, 276, 285, 286, 302, 303, 311, 314, 315, 319, 324, 327, 329, 332, 354, 363, 365, 373, 374, 397, 401, 404, 426, 431, 438, 481, 516, 519, 520, 522, 524, 551, 573, 576, 577, 579, 629, 673, 715, 763, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 874, 887, 951, 956, 962, 963, 965, 970, 993, 1004, 1005, 1011, 1012, 1013], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 72, 94, 98, 108, 117, 121, 122, 154, 155, 156, 166, 172, 175, 196, 199, 200, 204, 211, 214, 228, 229, 231, 238, 251, 280, 281, 294, 299, 300, 301, 302, 306, 309, 311, 326, 332, 335, 341, 362, 365, 368, 371, 373, 377, 378, 379, 380, 381, 390, 391, 394, 397, 398, 399, 400, 401, 402, 403, 405, 411, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 435, 438, 439, 442, 445, 446, 448, 449, 450, 453, 463, 464, 465, 470, 484, 490, 497, 498, 499, 501, 505, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 601, 603, 608, 609, 610, 611, 612, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 702, 703, 704, 708, 725, 726, 728, 730, 731, 733, 734, 741, 747, 748, 751, 752, 754, 758, 759, 760, 761, 765, 775, 776, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 895, 896, 897, 898, 899, 900, 904, 909, 914, 926, 935, 937, 943, 948, 949, 952, 954, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 969, 970, 974, 975, 976, 977, 978, 982, 983, 986, 988, 992, 993, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "annot": [4, 9, 26, 130, 172, 218, 260, 263, 339, 368, 369, 370, 393, 697, 892, 962, 978, 1013], "log": [4, 20, 25, 26, 27, 77, 94, 121, 128, 141, 145, 149, 150, 152, 153, 154, 157, 181, 184, 185, 189, 196, 200, 201, 206, 214, 229, 231, 245, 286, 303, 339, 363, 365, 366, 368, 372, 376, 377, 381, 390, 391, 393, 394, 395, 398, 400, 401, 403, 429, 432, 441, 446, 451, 452, 453, 454, 455, 456, 457, 513, 517, 522, 530, 531, 532, 534, 536, 538, 540, 543, 545, 571, 572, 574, 575, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 623, 626, 629, 639, 640, 650, 652, 657, 661, 721, 731, 735, 775, 776, 777, 780, 781, 791, 814, 815, 816, 817, 818, 819, 820, 824, 835, 836, 843, 844, 872, 875, 880, 883, 885, 886, 888, 913, 951, 954, 956, 958, 959, 964, 965, 967, 970, 972, 976, 978, 982, 983, 995, 1006, 1007, 1008, 1013, 1014, 1015, 1018], "describ": [4, 55, 128, 166, 214, 230, 256, 265, 350, 354, 355, 361, 363, 365, 367, 368, 370, 373, 376, 381, 382, 390, 393, 395, 396, 397, 398, 400, 401, 443, 450, 454, 455, 472, 474, 476, 477, 478, 481, 482, 483, 484, 485, 486, 491, 497, 498, 499, 509, 588, 589, 626, 640, 695, 775, 776, 814, 816, 854, 915, 951, 954, 957, 958, 961, 962, 964, 968, 976, 977, 978, 985, 988, 994, 995, 1012, 1014], "weather": [4, 153, 167, 403, 958, 962], "includ": [4, 32, 79, 118, 120, 165, 166, 168, 196, 214, 257, 276, 293, 298, 309, 310, 326, 331, 339, 341, 350, 354, 355, 362, 364, 366, 368, 369, 370, 372, 373, 374, 376, 377, 381, 382, 384, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 426, 431, 437, 447, 450, 451, 452, 453, 454, 455, 456, 457, 470, 471, 472, 477, 481, 482, 483, 485, 486, 491, 515, 522, 538, 545, 555, 613, 619, 627, 628, 633, 641, 642, 643, 646, 662, 669, 670, 678, 694, 709, 710, 715, 717, 718, 751, 763, 764, 767, 773, 777, 779, 780, 781, 790, 791, 794, 797, 802, 805, 827, 829, 830, 831, 852, 853, 854, 858, 875, 886, 888, 890, 892, 898, 899, 902, 904, 907, 951, 958, 961, 962, 963, 965, 966, 972, 976, 977, 978, 982, 983, 985, 986, 995, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 63, 70, 77, 79, 84, 85, 99, 102, 108, 112, 115, 118, 127, 128, 131, 140, 141, 145, 148, 155, 157, 165, 166, 167, 168, 175, 182, 184, 185, 196, 197, 198, 201, 202, 204, 214, 221, 231, 232, 241, 242, 243, 244, 245, 246, 256, 257, 258, 259, 263, 265, 267, 271, 276, 288, 298, 302, 303, 306, 308, 316, 317, 323, 328, 334, 339, 340, 341, 348, 350, 354, 355, 356, 361, 362, 363, 364, 366, 368, 370, 374, 375, 377, 379, 380, 381, 382, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 406, 419, 428, 433, 440, 443, 449, 456, 463, 464, 465, 466, 469, 470, 477, 478, 481, 483, 486, 488, 489, 490, 515, 519, 521, 528, 532, 536, 537, 538, 544, 545, 546, 547, 548, 558, 569, 570, 572, 578, 588, 589, 608, 613, 614, 624, 638, 639, 640, 653, 655, 657, 659, 668, 680, 685, 693, 697, 711, 716, 737, 741, 747, 754, 758, 763, 768, 769, 773, 780, 781, 783, 808, 836, 837, 851, 855, 866, 871, 876, 878, 879, 886, 888, 902, 916, 925, 937, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 982, 983, 985, 986, 992, 995, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "numer": [4, 19, 65, 70, 74, 116, 118, 128, 145, 153, 156, 167, 168, 185, 196, 214, 236, 238, 286, 309, 341, 362, 363, 365, 371, 373, 374, 379, 380, 381, 393, 395, 400, 401, 402, 403, 405, 406, 422, 425, 428, 440, 452, 453, 456, 459, 470, 471, 472, 477, 481, 482, 483, 485, 486, 491, 512, 514, 516, 521, 528, 548, 562, 571, 592, 598, 601, 608, 611, 613, 614, 627, 633, 635, 653, 668, 671, 675, 695, 768, 772, 777, 780, 781, 783, 791, 801, 802, 803, 806, 814, 815, 816, 817, 818, 836, 837, 842, 847, 852, 853, 890, 891, 892, 898, 899, 914, 915, 951, 952, 958, 959, 963, 970, 972, 973, 978, 985, 986, 988, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "categor": [4, 70, 107, 114, 128, 132, 163, 166, 167, 168, 196, 214, 236, 238, 309, 311, 356, 360, 362, 363, 370, 373, 381, 394, 401, 447, 448, 470, 471, 477, 486, 542, 543, 562, 563, 588, 589, 613, 614, 629, 639, 640, 650, 661, 690, 802, 814, 815, 816, 817, 818, 840, 842, 846, 847, 850, 852, 853, 873, 874, 952, 958, 969, 970, 978, 982, 983, 984, 985, 986, 997, 999, 1004, 1005, 1008, 1009, 1012, 1014, 1016, 1019], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 57, 65, 66, 69, 70, 85, 88, 89, 90, 101, 115, 116, 139, 141, 142, 144, 145, 146, 148, 153, 163, 166, 167, 169, 172, 174, 175, 176, 197, 211, 213, 214, 215, 235, 243, 244, 246, 251, 253, 256, 257, 258, 261, 263, 265, 282, 283, 286, 309, 329, 334, 339, 340, 341, 345, 348, 350, 354, 357, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 376, 379, 380, 381, 382, 387, 390, 397, 398, 400, 401, 402, 403, 433, 443, 473, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 491, 496, 505, 509, 515, 516, 519, 520, 522, 524, 538, 542, 543, 545, 568, 570, 571, 573, 574, 575, 576, 577, 580, 581, 587, 588, 589, 590, 620, 621, 637, 639, 668, 672, 676, 678, 682, 685, 686, 696, 706, 710, 723, 735, 736, 737, 766, 768, 773, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 791, 795, 802, 814, 818, 819, 820, 824, 828, 840, 851, 856, 859, 863, 864, 866, 867, 868, 869, 874, 877, 880, 883, 886, 888, 890, 892, 952, 954, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 973, 976, 978, 983, 986, 994, 995, 996, 997, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "alreadi": [4, 6, 10, 16, 57, 99, 128, 145, 166, 226, 232, 237, 257, 263, 276, 309, 368, 369, 373, 379, 381, 391, 395, 397, 399, 400, 405, 419, 480, 504, 514, 548, 549, 615, 627, 630, 645, 646, 647, 648, 649, 655, 657, 658, 659, 666, 667, 680, 748, 814, 834, 842, 848, 849, 851, 856, 861, 863, 864, 865, 867, 868, 869, 875, 878, 879, 901, 951, 968, 972, 973, 983, 988, 993, 997, 1001, 1005, 1009, 1012, 1016, 1017, 1018, 1019], "expand": [4, 16, 49, 64, 227, 307, 350, 360, 400, 426, 431, 480, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 962, 1005, 1012, 1013], "complementari": [4, 401], "column": [4, 20, 21, 59, 68, 71, 74, 75, 89, 115, 117, 118, 121, 125, 128, 145, 153, 160, 163, 165, 166, 167, 168, 185, 196, 197, 204, 214, 233, 235, 246, 256, 257, 267, 268, 294, 303, 308, 309, 310, 311, 339, 340, 341, 354, 362, 363, 365, 368, 370, 374, 377, 379, 380, 381, 390, 393, 394, 396, 398, 400, 401, 402, 405, 408, 432, 434, 445, 447, 448, 452, 453, 459, 468, 469, 470, 471, 472, 473, 475, 477, 481, 482, 483, 485, 486, 489, 490, 491, 492, 494, 496, 507, 512, 515, 518, 523, 525, 529, 536, 538, 539, 545, 546, 547, 548, 562, 563, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 608, 611, 613, 614, 615, 627, 629, 633, 639, 641, 643, 645, 646, 650, 661, 666, 667, 678, 694, 699, 700, 709, 710, 718, 734, 743, 748, 749, 750, 753, 763, 764, 767, 768, 777, 780, 781, 791, 800, 805, 810, 813, 814, 815, 816, 817, 818, 819, 820, 839, 843, 844, 845, 846, 852, 853, 854, 858, 859, 860, 862, 878, 880, 883, 886, 888, 894, 898, 899, 904, 915, 925, 938, 939, 941, 949, 951, 952, 958, 960, 962, 963, 970, 972, 977, 983, 1004, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 217, 218, 219, 222, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 361, 362, 363, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 387, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 468, 474, 475, 476, 479, 481, 482, 483, 486, 487, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 687, 691, 692, 705, 715, 722, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 902, 914, 915, 917, 922, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 983, 988, 992, 993, 995, 996, 997, 1001, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "drop": [4, 5, 70, 74, 85, 153, 165, 166, 167, 169, 196, 214, 238, 266, 308, 311, 340, 372, 376, 394, 398, 400, 445, 448, 548, 549, 550, 551, 676, 683, 769, 838, 852, 858, 952, 958, 962, 970, 972, 982, 1004, 1005, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 60, 70, 71, 74, 81, 85, 90, 91, 94, 95, 96, 97, 98, 104, 109, 111, 112, 115, 117, 124, 127, 131, 137, 141, 152, 153, 157, 160, 165, 166, 177, 181, 183, 185, 188, 189, 190, 196, 200, 201, 205, 208, 210, 211, 213, 214, 218, 219, 222, 225, 229, 230, 233, 234, 241, 243, 245, 246, 252, 253, 257, 258, 263, 265, 266, 271, 274, 276, 281, 282, 283, 286, 287, 288, 295, 298, 302, 315, 317, 319, 322, 325, 326, 329, 330, 331, 332, 333, 334, 336, 339, 340, 345, 346, 347, 348, 370, 377, 381, 391, 393, 401, 405, 420, 427, 445, 448, 512, 514, 517, 518, 520, 522, 524, 531, 566, 593, 612, 613, 666, 667, 682, 743, 759, 760, 761, 762, 783, 807, 848, 849, 856, 857, 859, 861, 863, 864, 865, 867, 868, 869, 892, 894, 898, 899, 917, 937, 943, 952, 962, 969, 972, 977, 994, 996, 1012, 1014, 1016], "holidai": [4, 167], "workingdai": [4, 167], "temp": [4, 167], "feel_temp": [4, 167], "humid": [4, 167, 969], "windspe": [4, 167], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 354, 355, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 753, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 898, 899, 904, 909, 910, 912, 914, 915, 917, 918, 919, 920, 922, 924, 925, 927, 928, 930, 931, 932, 933, 936, 937, 943, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 980, 983, 984, 988, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002], "spring": [4, 167], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 63, 66, 69, 70, 71, 72, 78, 80, 91, 98, 100, 103, 104, 108, 115, 118, 121, 122, 131, 134, 148, 153, 154, 155, 156, 166, 167, 168, 169, 175, 176, 182, 196, 197, 201, 202, 204, 212, 214, 217, 220, 232, 234, 238, 241, 253, 254, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 276, 280, 286, 289, 293, 294, 298, 299, 306, 308, 309, 310, 311, 316, 326, 328, 334, 335, 339, 340, 362, 368, 369, 370, 373, 381, 391, 393, 394, 395, 397, 398, 400, 401, 402, 403, 405, 406, 416, 417, 418, 419, 422, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 440, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 496, 504, 505, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 618, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 675, 676, 678, 679, 680, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 699, 706, 707, 708, 709, 710, 711, 718, 722, 723, 730, 731, 734, 736, 741, 743, 747, 748, 749, 754, 758, 762, 763, 764, 765, 767, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 788, 791, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 890, 891, 892, 896, 897, 898, 899, 909, 916, 922, 924, 927, 928, 932, 933, 936, 943, 948, 949, 951, 952, 958, 962, 965, 972, 976, 977, 996, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "6": [4, 6, 8, 9, 10, 11, 12, 16, 26, 31, 32, 33, 40, 44, 46, 49, 50, 52, 55, 56, 59, 60, 61, 62, 63, 64, 66, 69, 72, 73, 74, 77, 78, 79, 81, 89, 94, 96, 104, 110, 121, 122, 125, 127, 134, 140, 145, 148, 151, 153, 155, 156, 157, 160, 161, 166, 167, 172, 175, 176, 177, 185, 189, 194, 196, 197, 198, 200, 210, 214, 217, 218, 221, 225, 228, 229, 232, 235, 236, 241, 242, 243, 244, 246, 247, 250, 251, 254, 255, 256, 257, 258, 259, 265, 266, 267, 268, 271, 274, 278, 281, 289, 292, 294, 295, 298, 300, 302, 303, 306, 309, 310, 311, 314, 315, 317, 318, 319, 326, 327, 329, 331, 334, 336, 339, 340, 341, 347, 350, 362, 363, 365, 366, 373, 374, 380, 384, 385, 386, 391, 393, 394, 397, 398, 400, 401, 402, 425, 429, 430, 431, 432, 433, 434, 443, 463, 464, 465, 466, 486, 505, 511, 519, 521, 522, 528, 544, 550, 551, 574, 575, 592, 595, 596, 606, 608, 609, 611, 625, 626, 651, 670, 674, 702, 708, 718, 725, 726, 730, 731, 733, 749, 765, 768, 775, 776, 778, 779, 784, 786, 787, 789, 794, 795, 798, 803, 805, 814, 815, 816, 818, 819, 820, 827, 829, 830, 831, 846, 847, 849, 852, 854, 857, 858, 862, 893, 915, 918, 920, 925, 951, 952, 956, 958, 959, 962, 972, 973, 976, 977, 980, 988, 992, 993, 995, 1000, 1002, 1005, 1006, 1007, 1012, 1017], "clear": [4, 16, 59, 71, 166, 167, 303, 363, 367, 368, 370, 379, 380, 381, 394, 399, 892, 893, 951, 956, 1015, 1016, 1017], "9": [4, 5, 7, 8, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 57, 61, 63, 73, 81, 84, 90, 94, 97, 108, 117, 118, 119, 120, 121, 126, 128, 134, 136, 137, 151, 155, 157, 161, 165, 166, 167, 177, 178, 187, 196, 209, 210, 213, 214, 217, 220, 229, 230, 231, 234, 238, 241, 242, 243, 244, 250, 254, 259, 263, 265, 274, 278, 280, 281, 284, 285, 286, 292, 293, 295, 298, 300, 301, 302, 311, 314, 315, 317, 318, 319, 326, 330, 336, 339, 341, 350, 365, 366, 374, 380, 384, 385, 386, 391, 394, 395, 397, 400, 401, 421, 431, 438, 463, 464, 465, 466, 471, 501, 508, 515, 519, 520, 521, 528, 541, 548, 551, 564, 572, 588, 589, 608, 611, 615, 620, 628, 639, 642, 673, 690, 703, 706, 721, 728, 749, 758, 759, 760, 775, 778, 780, 781, 795, 798, 803, 805, 808, 816, 817, 821, 822, 827, 830, 836, 837, 845, 851, 854, 915, 919, 951, 958, 962, 966, 972, 976, 977, 980, 988, 992, 997, 1002, 1005, 1006, 1007, 1009, 1018], "84": [4, 6, 69, 142, 187, 214, 295, 300, 314, 350, 365, 400, 401, 768, 791, 957, 962, 972, 993], "14": [4, 11, 38, 49, 59, 61, 62, 65, 73, 80, 99, 140, 167, 185, 187, 214, 219, 225, 230, 255, 261, 262, 270, 274, 276, 295, 301, 302, 311, 333, 336, 355, 363, 365, 380, 384, 393, 397, 479, 491, 534, 535, 566, 567, 616, 624, 673, 791, 795, 845, 955, 958, 962, 972, 977, 980, 988, 1002, 1004, 1005, 1007, 1008, 1012, 1017], "395": 4, "81": [4, 19, 50, 238, 314, 315, 393, 768, 777, 791, 962, 963, 965, 972], "0000": [4, 311], "02": [4, 8, 12, 35, 44, 50, 52, 57, 61, 63, 67, 81, 82, 84, 94, 97, 106, 111, 117, 150, 155, 158, 165, 166, 170, 177, 214, 225, 229, 232, 239, 251, 257, 263, 272, 275, 281, 290, 292, 295, 296, 298, 300, 319, 322, 337, 340, 345, 362, 365, 373, 397, 423, 427, 578, 639, 657, 777, 791, 858, 873, 887, 958], "13": [4, 6, 10, 11, 15, 19, 44, 73, 99, 104, 117, 119, 120, 122, 160, 166, 172, 182, 205, 250, 257, 260, 262, 298, 302, 308, 312, 326, 339, 341, 342, 363, 365, 368, 374, 380, 397, 405, 491, 494, 513, 514, 532, 533, 563, 616, 620, 714, 795, 823, 838, 845, 870, 871, 958, 962, 963, 968, 969, 972, 977, 980, 988, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1016], "635": [4, 597], "80": [4, 6, 11, 16, 27, 66, 80, 100, 128, 137, 142, 167, 175, 232, 295, 300, 314, 329, 330, 331, 339, 346, 350, 363, 365, 368, 391, 397, 402, 426, 491, 522, 694, 777, 791, 872, 891, 951, 957, 958, 962, 969, 975, 978, 997], "75": [4, 6, 7, 10, 33, 44, 81, 112, 142, 155, 156, 161, 166, 172, 175, 178, 187, 203, 214, 238, 243, 244, 256, 265, 269, 281, 298, 309, 336, 339, 350, 532, 639, 687, 693, 714, 719, 725, 733, 736, 772, 777, 857, 868, 875, 891, 962, 964, 972, 978, 981, 993, 1006], "17374": 4, "19": [4, 9, 153, 166, 234, 239, 246, 264, 302, 303, 315, 365, 372, 381, 393, 394, 401, 404, 426, 473, 497, 498, 499, 517, 521, 522, 528, 530, 531, 538, 539, 540, 541, 545, 546, 547, 563, 570, 629, 639, 640, 647, 648, 649, 652, 653, 655, 657, 659, 668, 688, 761, 765, 777, 791, 802, 807, 808, 810, 811, 825, 826, 845, 856, 876, 880, 883, 886, 887, 888, 889, 951, 962, 972, 980, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1012], "misti": [4, 167], "10": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 19, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 71, 73, 77, 78, 79, 80, 81, 84, 85, 91, 96, 97, 98, 99, 100, 104, 105, 108, 109, 111, 112, 114, 115, 117, 118, 119, 121, 122, 125, 126, 129, 131, 135, 137, 142, 145, 149, 150, 152, 154, 155, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 180, 186, 187, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 212, 213, 214, 218, 219, 225, 228, 229, 230, 231, 233, 234, 235, 237, 244, 245, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 267, 270, 274, 281, 283, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 306, 307, 308, 309, 310, 314, 315, 316, 318, 324, 326, 328, 329, 330, 331, 333, 334, 336, 339, 340, 341, 350, 354, 362, 363, 364, 365, 366, 368, 370, 373, 374, 379, 380, 381, 384, 385, 386, 390, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 406, 420, 425, 428, 430, 432, 433, 434, 440, 441, 443, 456, 473, 474, 481, 482, 483, 485, 491, 492, 493, 494, 497, 501, 502, 505, 509, 512, 516, 517, 518, 519, 520, 522, 523, 525, 527, 529, 533, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 549, 551, 563, 574, 575, 580, 581, 592, 598, 600, 608, 611, 613, 615, 616, 621, 623, 624, 625, 630, 640, 645, 646, 647, 648, 650, 651, 653, 654, 656, 657, 658, 659, 666, 667, 672, 673, 686, 696, 706, 722, 736, 749, 775, 776, 777, 778, 779, 780, 781, 788, 791, 792, 793, 794, 795, 797, 798, 803, 805, 807, 808, 814, 815, 816, 818, 819, 820, 826, 835, 836, 837, 845, 849, 852, 853, 856, 867, 875, 881, 884, 886, 887, 891, 915, 919, 926, 930, 932, 948, 951, 952, 958, 959, 960, 962, 963, 965, 966, 968, 969, 972, 976, 977, 980, 988, 992, 993, 995, 996, 997, 1001, 1002, 1005, 1006, 1007, 1012, 1014, 1015, 1016, 1018, 1019], "66": [4, 91, 221, 365, 393, 513, 613, 693, 763, 764, 773, 858, 962, 974], "880": 4, "60": [4, 6, 8, 16, 42, 58, 72, 81, 196, 208, 214, 217, 218, 238, 244, 264, 269, 295, 315, 329, 339, 362, 393, 397, 431, 438, 694, 777, 962, 972, 993, 1004, 1007], "11": [4, 9, 19, 35, 73, 80, 96, 121, 132, 138, 145, 151, 166, 167, 196, 197, 198, 201, 219, 253, 261, 262, 268, 280, 282, 295, 302, 308, 311, 325, 329, 362, 365, 366, 374, 380, 393, 396, 397, 400, 431, 438, 463, 464, 465, 466, 482, 498, 499, 593, 631, 637, 651, 696, 702, 703, 704, 758, 759, 760, 778, 781, 795, 798, 804, 831, 887, 926, 958, 960, 972, 976, 977, 980, 988, 995, 997, 1002, 1006, 1010, 1012, 1013, 1015, 1018, 1019], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 60, 66, 77, 81, 91, 94, 97, 100, 102, 104, 109, 111, 117, 118, 121, 124, 128, 129, 131, 137, 140, 141, 142, 154, 165, 167, 168, 178, 185, 186, 188, 192, 193, 195, 196, 197, 200, 205, 208, 209, 210, 211, 213, 215, 220, 229, 234, 243, 245, 246, 256, 257, 259, 260, 262, 267, 268, 270, 276, 280, 281, 282, 283, 284, 287, 295, 302, 303, 307, 308, 309, 310, 314, 315, 318, 323, 325, 329, 331, 336, 337, 340, 341, 346, 347, 361, 365, 368, 370, 372, 373, 374, 384, 393, 400, 401, 423, 428, 430, 445, 446, 450, 452, 453, 459, 469, 470, 471, 472, 473, 475, 477, 478, 481, 483, 485, 486, 493, 496, 497, 504, 512, 517, 518, 523, 526, 527, 529, 533, 536, 537, 540, 541, 542, 543, 544, 550, 551, 563, 570, 573, 575, 578, 580, 610, 611, 626, 630, 639, 647, 648, 649, 657, 659, 677, 685, 689, 694, 697, 705, 706, 719, 736, 737, 747, 770, 771, 775, 776, 777, 791, 801, 802, 803, 806, 808, 811, 812, 813, 816, 817, 824, 825, 836, 837, 838, 839, 841, 843, 844, 852, 853, 854, 855, 873, 874, 876, 877, 882, 890, 896, 898, 899, 951, 958, 962, 965, 968, 969, 972, 975, 980, 985, 986, 989, 995, 999, 1000, 1002, 1004, 1010, 1013, 1016, 1018, 1019], "17376": 4, "21": [4, 166, 185, 197, 214, 246, 276, 295, 300, 302, 312, 365, 366, 370, 372, 384, 390, 400, 401, 423, 427, 455, 513, 542, 543, 544, 550, 551, 569, 570, 572, 608, 650, 668, 734, 777, 779, 791, 802, 845, 852, 854, 876, 892, 958, 963, 972, 980, 1000, 1002, 1004, 1005, 1007, 1011, 1012, 1014], "17377": 4, "22": [4, 42, 163, 166, 167, 170, 213, 222, 246, 295, 296, 298, 302, 305, 312, 315, 341, 366, 368, 372, 373, 384, 385, 386, 390, 419, 429, 453, 469, 470, 476, 477, 485, 496, 505, 512, 518, 523, 526, 527, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 575, 608, 609, 613, 615, 626, 628, 632, 634, 636, 639, 640, 642, 644, 646, 650, 669, 673, 685, 694, 737, 749, 758, 763, 764, 768, 777, 778, 782, 791, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 823, 825, 827, 829, 830, 831, 836, 837, 838, 840, 843, 859, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 909, 910, 962, 972, 980, 1000, 1002, 1004, 1007, 1012, 1015, 1017], "56": [4, 214, 229, 374, 694, 715, 962, 972, 1000, 1004], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 59, 61, 63, 64, 69, 71, 73, 74, 80, 84, 89, 90, 91, 94, 95, 98, 99, 103, 105, 112, 114, 118, 120, 121, 123, 126, 129, 130, 134, 144, 145, 149, 151, 153, 154, 156, 157, 161, 165, 166, 167, 169, 172, 175, 176, 181, 182, 187, 190, 196, 197, 203, 204, 206, 212, 214, 217, 218, 219, 221, 222, 226, 229, 230, 231, 232, 234, 236, 237, 238, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 266, 267, 274, 278, 280, 284, 288, 292, 294, 295, 298, 300, 301, 302, 303, 306, 311, 314, 315, 316, 318, 319, 323, 326, 330, 331, 333, 335, 339, 340, 341, 347, 350, 355, 362, 363, 365, 366, 368, 373, 374, 384, 385, 386, 391, 393, 397, 398, 400, 401, 402, 403, 421, 425, 426, 428, 430, 431, 433, 443, 450, 451, 452, 453, 454, 455, 456, 457, 464, 465, 466, 468, 471, 483, 484, 495, 512, 515, 519, 521, 524, 526, 528, 530, 531, 536, 537, 546, 551, 563, 569, 570, 571, 572, 609, 610, 629, 639, 651, 657, 670, 673, 674, 675, 676, 680, 683, 687, 688, 690, 696, 702, 707, 708, 709, 721, 725, 726, 730, 731, 733, 762, 763, 765, 768, 769, 773, 775, 778, 779, 784, 787, 794, 795, 798, 805, 808, 817, 819, 820, 826, 836, 837, 838, 844, 851, 880, 883, 913, 915, 919, 951, 952, 958, 959, 960, 962, 965, 970, 972, 976, 980, 986, 988, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1005, 1006, 1007, 1011, 1012, 1017, 1018, 1020], "9981": 4, "17378": 4, "23": [4, 19, 26, 34, 50, 91, 97, 163, 222, 238, 246, 295, 302, 305, 308, 309, 312, 315, 365, 374, 384, 400, 406, 414, 422, 428, 433, 435, 443, 446, 448, 449, 456, 463, 464, 465, 471, 473, 481, 482, 483, 485, 486, 491, 493, 495, 503, 505, 519, 520, 521, 524, 528, 535, 537, 539, 541, 542, 543, 546, 549, 550, 551, 588, 589, 592, 608, 611, 613, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 656, 659, 660, 661, 698, 710, 758, 805, 811, 812, 813, 822, 830, 837, 840, 852, 859, 866, 867, 876, 879, 881, 884, 887, 889, 896, 898, 899, 909, 910, 915, 962, 980, 1000, 1002, 1004, 1005, 1011, 1012, 1013, 1016], "65": [4, 33, 167, 196, 265, 393, 421, 483, 578, 721, 770, 771, 969, 993, 1000, 1004, 1005, 1006], "17379": [4, 1016], "row": [4, 19, 20, 21, 25, 27, 44, 59, 74, 89, 91, 117, 126, 129, 160, 196, 197, 198, 226, 229, 234, 235, 300, 348, 354, 363, 370, 377, 380, 381, 390, 393, 396, 401, 408, 424, 425, 428, 430, 431, 432, 434, 437, 438, 440, 445, 449, 469, 471, 472, 473, 474, 475, 476, 481, 482, 483, 485, 486, 491, 492, 494, 515, 523, 529, 532, 571, 572, 601, 613, 624, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 673, 677, 678, 691, 699, 700, 705, 738, 739, 743, 746, 748, 749, 750, 751, 753, 754, 756, 758, 759, 760, 761, 775, 776, 808, 814, 815, 816, 817, 818, 824, 827, 828, 829, 830, 831, 834, 845, 849, 851, 854, 865, 868, 869, 872, 876, 894, 898, 899, 915, 933, 936, 940, 942, 944, 945, 949, 951, 952, 956, 958, 960, 962, 963, 965, 972, 973, 976, 977, 983, 1011, 1012, 1013, 1014, 1019], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 57, 65, 69, 70, 71, 73, 74, 80, 89, 97, 98, 105, 109, 111, 115, 116, 117, 118, 120, 127, 128, 140, 141, 142, 145, 148, 150, 153, 155, 157, 161, 163, 165, 166, 167, 172, 174, 179, 185, 192, 196, 197, 199, 202, 204, 205, 214, 215, 217, 218, 225, 227, 229, 231, 235, 238, 241, 242, 243, 246, 247, 252, 254, 256, 258, 259, 262, 263, 264, 265, 267, 268, 276, 279, 282, 284, 287, 289, 294, 298, 299, 303, 308, 309, 314, 315, 317, 322, 323, 326, 331, 334, 335, 339, 340, 341, 344, 345, 348, 350, 354, 355, 356, 361, 362, 363, 365, 366, 368, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 384, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 470, 471, 472, 473, 475, 477, 478, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 497, 500, 504, 505, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 688, 690, 694, 706, 709, 710, 714, 716, 717, 718, 721, 722, 723, 736, 738, 740, 754, 758, 759, 760, 761, 763, 764, 767, 768, 770, 771, 772, 775, 776, 777, 779, 780, 781, 783, 791, 795, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 896, 898, 899, 902, 904, 907, 915, 917, 920, 922, 928, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 982, 983, 986, 995, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "present": [4, 5, 43, 49, 91, 94, 102, 114, 121, 124, 144, 154, 157, 175, 178, 185, 196, 225, 228, 246, 254, 259, 262, 265, 266, 276, 298, 301, 303, 340, 365, 366, 370, 373, 379, 381, 393, 395, 398, 400, 401, 411, 412, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 470, 471, 472, 473, 477, 481, 482, 483, 484, 485, 486, 491, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 530, 531, 544, 547, 550, 551, 562, 563, 564, 569, 570, 572, 598, 608, 609, 610, 611, 631, 635, 658, 669, 670, 671, 672, 693, 709, 710, 718, 722, 749, 763, 764, 767, 775, 776, 777, 780, 781, 789, 791, 803, 821, 822, 823, 825, 827, 829, 830, 831, 838, 843, 851, 852, 853, 854, 855, 857, 870, 871, 882, 890, 892, 893, 915, 946, 961, 962, 963, 964, 969, 972, 981, 983, 1007, 1012, 1014, 1015, 1016, 1018, 1019], "date": [4, 69, 153, 167, 363, 365, 368, 372, 382, 394, 983], "datetim": [4, 17, 153, 167], "http": [4, 6, 7, 8, 12, 17, 24, 70, 122, 128, 145, 157, 161, 172, 196, 204, 212, 214, 222, 226, 234, 274, 276, 294, 362, 363, 365, 366, 368, 372, 373, 374, 376, 379, 381, 384, 393, 397, 402, 424, 430, 433, 443, 468, 473, 477, 481, 483, 489, 490, 491, 511, 512, 515, 517, 518, 522, 576, 617, 622, 625, 630, 639, 645, 647, 648, 649, 652, 657, 660, 663, 664, 666, 667, 672, 673, 676, 686, 702, 703, 704, 738, 739, 749, 814, 816, 817, 818, 821, 822, 827, 828, 829, 830, 835, 857, 871, 872, 873, 886, 887, 958, 960, 962, 965, 975, 978, 985, 986, 993, 1009, 1014], "pydata": [4, 981, 986], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 60, 65, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 157, 166, 167, 168, 172, 177, 187, 188, 196, 204, 212, 214, 218, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 259, 263, 268, 274, 294, 295, 307, 308, 310, 311, 314, 315, 316, 319, 339, 340, 341, 348, 355, 361, 366, 368, 371, 374, 376, 382, 384, 397, 576, 617, 649, 652, 657, 676, 686, 749, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 958, 962, 978, 980, 999, 1012, 1016], "stabl": [4, 157, 166, 190, 194, 198, 276, 307, 340, 366, 368, 372, 374, 377, 381, 384, 397, 401, 405, 452, 453, 459, 514, 636, 653, 655, 668, 673, 704, 732, 914, 915, 958, 964, 965, 972, 983, 1000, 1004, 1005, 1010, 1015, 1017], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 145, 153, 157, 166, 167, 168, 172, 177, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 363, 365, 368, 369, 372, 376, 394, 397, 401, 468, 489, 490, 639, 814, 818, 911, 960, 982, 983, 1015, 1016, 1017, 1018, 1019], "compon": [4, 5, 17, 44, 57, 61, 69, 72, 83, 84, 86, 93, 95, 96, 98, 99, 101, 102, 103, 105, 106, 126, 153, 163, 165, 217, 229, 230, 232, 241, 242, 245, 246, 247, 255, 257, 277, 290, 295, 303, 308, 354, 360, 363, 368, 370, 374, 377, 379, 392, 393, 394, 396, 401, 403, 405, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 443, 444, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 483, 485, 496, 502, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 676, 709, 710, 718, 763, 764, 767, 775, 776, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 914, 915, 954, 959, 972, 974, 977, 982, 983, 984, 986, 991, 997, 998, 999, 1004, 1006, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "now": [4, 5, 7, 17, 53, 56, 70, 85, 99, 108, 110, 114, 115, 117, 118, 121, 122, 128, 131, 145, 148, 153, 154, 155, 161, 165, 166, 167, 168, 172, 175, 177, 182, 184, 185, 197, 198, 221, 230, 252, 256, 259, 267, 268, 303, 307, 308, 310, 311, 316, 326, 334, 339, 340, 341, 350, 354, 356, 363, 368, 369, 370, 374, 379, 380, 381, 390, 397, 398, 400, 401, 405, 474, 489, 490, 493, 517, 530, 560, 561, 563, 608, 611, 630, 634, 639, 644, 665, 706, 736, 775, 776, 780, 781, 811, 826, 937, 951, 952, 958, 962, 968, 971, 972, 977, 978, 981, 983, 988, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "introspect": [4, 6, 70, 374, 540, 541, 569, 570, 572, 972, 993], "value_count": [4, 167], "11413": 4, "4544": 4, "rain": [4, 167, 958], "1419": 4, "heavy_rain": [4, 167], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 57, 61, 70, 72, 74, 81, 95, 101, 112, 113, 114, 118, 119, 121, 128, 166, 167, 168, 185, 194, 196, 198, 202, 203, 211, 213, 214, 217, 218, 225, 231, 233, 234, 238, 243, 251, 253, 254, 257, 259, 260, 263, 265, 266, 276, 284, 285, 292, 293, 300, 302, 310, 311, 318, 331, 339, 340, 341, 355, 356, 362, 363, 366, 368, 370, 372, 373, 375, 376, 381, 384, 387, 390, 393, 394, 397, 400, 401, 403, 407, 409, 413, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 557, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 678, 679, 680, 681, 683, 689, 690, 694, 712, 713, 759, 760, 775, 776, 777, 780, 781, 783, 789, 791, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 897, 898, 899, 902, 906, 907, 908, 910, 923, 925, 932, 946, 950, 951, 956, 958, 962, 963, 969, 970, 972, 978, 983, 992, 993, 995, 997, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 64, 69, 70, 120, 122, 123, 124, 149, 150, 151, 161, 166, 167, 198, 214, 234, 238, 241, 254, 260, 264, 283, 289, 309, 310, 315, 348, 362, 363, 368, 370, 379, 381, 394, 397, 408, 411, 424, 425, 428, 429, 430, 431, 432, 434, 445, 447, 448, 450, 453, 455, 469, 470, 471, 472, 477, 478, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 495, 503, 523, 538, 539, 540, 541, 544, 545, 546, 547, 562, 563, 566, 567, 569, 570, 572, 574, 575, 583, 587, 608, 609, 610, 611, 613, 614, 621, 622, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 652, 654, 656, 678, 695, 696, 718, 721, 735, 766, 783, 800, 802, 803, 815, 819, 820, 822, 830, 844, 850, 852, 853, 859, 872, 880, 881, 882, 883, 884, 886, 887, 888, 889, 895, 896, 898, 899, 927, 937, 938, 939, 940, 943, 949, 952, 972, 975, 977, 988, 1005, 1007, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "int64": [4, 13, 54, 70, 166, 167, 348, 381, 401, 411, 424, 429, 431, 569, 621, 695, 696, 815, 1012, 1015, 1017, 1019], "cannot": [4, 40, 55, 74, 81, 94, 99, 116, 166, 167, 196, 214, 298, 326, 356, 367, 369, 374, 381, 382, 393, 394, 395, 397, 398, 400, 401, 403, 446, 502, 519, 520, 521, 524, 528, 591, 594, 595, 596, 598, 600, 601, 603, 604, 606, 632, 636, 663, 673, 692, 698, 758, 780, 781, 826, 827, 829, 830, 831, 839, 840, 849, 850, 860, 896, 898, 899, 951, 952, 956, 958, 959, 963, 968, 972, 977, 978, 983, 986, 992, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 55, 57, 63, 69, 70, 74, 84, 85, 89, 94, 97, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 134, 142, 148, 149, 150, 153, 154, 155, 156, 157, 163, 165, 166, 167, 168, 169, 172, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 196, 197, 198, 200, 203, 204, 205, 208, 210, 211, 214, 225, 228, 230, 233, 234, 243, 245, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 276, 279, 282, 283, 284, 285, 287, 289, 292, 293, 294, 298, 300, 302, 303, 306, 309, 313, 314, 315, 318, 319, 320, 322, 325, 333, 334, 341, 343, 346, 347, 349, 350, 354, 355, 356, 360, 365, 370, 373, 379, 380, 381, 387, 389, 391, 393, 394, 395, 396, 398, 400, 401, 402, 403, 405, 419, 422, 423, 425, 426, 428, 430, 432, 433, 434, 435, 440, 446, 450, 451, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 469, 470, 474, 478, 479, 481, 485, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 608, 609, 611, 612, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 672, 673, 677, 684, 721, 768, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 844, 845, 848, 849, 852, 853, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 936, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 972, 976, 977, 978, 982, 983, 984, 986, 989, 992, 993, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 55, 66, 67, 69, 74, 80, 81, 84, 93, 99, 104, 106, 108, 112, 113, 114, 116, 117, 123, 125, 126, 127, 128, 134, 135, 136, 137, 142, 145, 148, 151, 153, 157, 160, 161, 164, 168, 170, 171, 173, 182, 184, 185, 210, 214, 221, 223, 224, 225, 230, 232, 237, 238, 249, 253, 255, 256, 259, 261, 262, 264, 270, 272, 276, 280, 281, 282, 283, 284, 289, 291, 294, 295, 296, 298, 299, 303, 305, 312, 313, 317, 319, 320, 325, 332, 334, 339, 340, 341, 344, 345, 346, 347, 350, 355, 357, 360, 361, 362, 363, 365, 367, 371, 374, 375, 376, 377, 380, 381, 383, 387, 388, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 407, 408, 410, 411, 412, 414, 415, 419, 420, 421, 424, 425, 428, 430, 431, 438, 440, 445, 446, 448, 449, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 503, 505, 506, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 552, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 580, 583, 584, 591, 592, 595, 600, 603, 607, 609, 611, 615, 619, 621, 622, 624, 625, 626, 627, 629, 633, 638, 639, 649, 650, 657, 658, 659, 661, 669, 670, 671, 672, 673, 677, 681, 682, 689, 694, 698, 699, 702, 703, 704, 706, 715, 721, 723, 728, 736, 758, 759, 760, 765, 768, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 813, 814, 815, 816, 817, 818, 821, 823, 828, 835, 836, 837, 838, 840, 842, 844, 846, 849, 851, 852, 853, 854, 857, 858, 859, 862, 870, 871, 873, 874, 875, 876, 878, 879, 880, 883, 886, 887, 888, 889, 901, 909, 910, 928, 929, 951, 952, 954, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 976, 977, 978, 979, 981, 985, 990, 992, 993, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "simplifi": [4, 70, 184, 326, 367, 369, 373, 396, 496, 543, 838, 839, 962, 964, 972], "represent": [4, 12, 17, 20, 26, 53, 70, 71, 94, 97, 108, 114, 115, 116, 124, 125, 126, 128, 131, 142, 153, 166, 167, 168, 172, 177, 217, 218, 219, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 286, 295, 308, 310, 311, 316, 340, 341, 348, 350, 360, 362, 370, 381, 387, 393, 394, 398, 399, 400, 444, 512, 516, 518, 521, 523, 529, 547, 569, 571, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 611, 624, 627, 633, 639, 640, 641, 643, 647, 649, 657, 658, 659, 749, 775, 776, 783, 835, 848, 852, 853, 857, 859, 871, 878, 890, 892, 895, 911, 928, 954, 959, 961, 963, 965, 966, 967, 969, 972, 977, 983, 988, 989, 991, 995, 997, 1004, 1005, 1008, 1015, 1016, 1017, 1018, 1019, 1020], "collaps": [4, 167, 298, 326, 379], "those": [4, 7, 12, 17, 19, 59, 70, 110, 121, 145, 157, 165, 167, 168, 169, 196, 198, 214, 222, 229, 233, 234, 247, 250, 256, 259, 262, 293, 298, 303, 323, 326, 339, 340, 341, 354, 355, 362, 368, 370, 372, 373, 374, 375, 379, 381, 384, 390, 391, 393, 397, 398, 400, 401, 403, 429, 431, 442, 445, 449, 475, 476, 477, 484, 538, 539, 545, 546, 550, 551, 562, 673, 678, 693, 699, 716, 777, 780, 781, 789, 791, 798, 821, 822, 823, 825, 827, 828, 829, 830, 831, 880, 883, 886, 887, 888, 889, 951, 954, 958, 961, 962, 964, 965, 966, 969, 972, 978, 981, 982, 986, 988, 997, 1004, 1007, 1010, 1011, 1012, 1017, 1018, 1019], "replac": [4, 25, 79, 98, 148, 155, 160, 167, 182, 197, 234, 259, 276, 300, 308, 328, 366, 368, 370, 372, 374, 377, 381, 387, 394, 397, 400, 401, 423, 427, 484, 496, 536, 537, 544, 563, 569, 570, 571, 572, 588, 589, 608, 611, 615, 620, 622, 708, 765, 789, 791, 838, 839, 842, 861, 874, 881, 931, 933, 936, 951, 952, 958, 962, 972, 977, 978, 982, 983, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "to_replac": [4, 167], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 59, 60, 61, 65, 70, 72, 74, 77, 79, 81, 94, 97, 105, 111, 113, 114, 115, 116, 118, 121, 122, 124, 125, 127, 128, 140, 141, 144, 145, 148, 151, 152, 154, 156, 157, 162, 165, 166, 167, 168, 169, 172, 175, 176, 178, 182, 184, 185, 186, 187, 189, 194, 196, 197, 198, 200, 202, 211, 214, 216, 220, 223, 225, 226, 227, 228, 229, 230, 231, 234, 237, 238, 241, 247, 250, 252, 254, 256, 257, 259, 261, 262, 263, 265, 267, 268, 269, 271, 276, 289, 292, 293, 295, 298, 299, 300, 301, 302, 303, 308, 317, 326, 331, 334, 339, 340, 341, 344, 348, 350, 354, 355, 356, 357, 360, 361, 362, 363, 365, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 471, 472, 474, 477, 478, 479, 482, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 749, 751, 754, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 791, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 907, 915, 917, 922, 924, 925, 926, 930, 938, 939, 940, 951, 954, 955, 956, 957, 958, 959, 961, 963, 964, 965, 966, 967, 968, 969, 973, 975, 976, 977, 978, 986, 988, 993, 995, 996, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "inplac": [4, 167, 214, 268, 435, 463, 464, 465, 466, 834, 842, 845, 848, 849, 851, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 935, 938, 939, 940, 944, 945, 1013], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 85, 91, 99, 112, 114, 115, 118, 121, 142, 148, 154, 163, 164, 168, 170, 182, 187, 196, 197, 198, 204, 214, 229, 235, 242, 243, 246, 247, 263, 276, 303, 339, 340, 350, 354, 355, 368, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 389, 391, 393, 394, 395, 397, 400, 401, 402, 414, 445, 446, 448, 449, 450, 463, 464, 465, 477, 504, 513, 517, 519, 522, 533, 535, 536, 537, 539, 541, 543, 544, 546, 548, 549, 551, 553, 566, 567, 569, 570, 572, 576, 578, 587, 592, 608, 613, 614, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 655, 656, 659, 660, 676, 685, 686, 697, 715, 768, 772, 812, 813, 814, 815, 816, 817, 818, 822, 825, 830, 837, 840, 845, 852, 853, 856, 859, 868, 869, 876, 878, 879, 880, 881, 882, 883, 884, 887, 889, 925, 951, 958, 962, 964, 968, 972, 976, 977, 978, 985, 993, 996, 997, 999, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "balanc": [4, 6, 53, 65, 163, 201, 249, 259, 272, 298, 356, 379, 381, 397, 398, 400, 483, 496, 515, 521, 522, 528, 538, 542, 545, 621, 639, 640, 647, 649, 655, 656, 657, 684, 689, 709, 723, 762, 767, 777, 778, 795, 839, 878, 880, 883, 886, 888, 903, 904, 951, 977, 978, 993, 1004, 1006, 1009, 1010, 1013, 1014, 1018], "fall": [4, 121, 155, 255, 256, 368, 370, 392, 393, 401, 416, 428, 489, 490, 707, 708, 772, 856, 867, 961, 962, 972, 988, 996, 1013], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 63, 64, 71, 77, 88, 104, 116, 117, 118, 122, 137, 153, 165, 166, 169, 172, 185, 189, 192, 196, 197, 202, 210, 214, 219, 229, 243, 251, 254, 256, 263, 274, 295, 298, 303, 308, 309, 334, 339, 341, 350, 354, 355, 363, 368, 370, 373, 374, 377, 381, 384, 387, 393, 394, 395, 397, 398, 399, 400, 401, 403, 405, 422, 425, 428, 430, 431, 436, 437, 438, 440, 445, 469, 470, 471, 476, 478, 496, 515, 516, 520, 521, 522, 524, 528, 532, 534, 536, 537, 538, 540, 544, 545, 548, 562, 569, 572, 574, 575, 578, 587, 588, 589, 591, 603, 608, 612, 621, 639, 640, 646, 657, 666, 667, 669, 670, 674, 678, 680, 683, 685, 693, 694, 699, 706, 709, 710, 718, 720, 721, 734, 736, 758, 763, 764, 767, 768, 769, 772, 777, 778, 780, 781, 782, 784, 788, 791, 795, 796, 800, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 829, 836, 839, 850, 852, 853, 854, 858, 859, 862, 863, 864, 866, 867, 868, 869, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 898, 899, 904, 915, 926, 931, 952, 958, 959, 962, 963, 965, 966, 972, 975, 976, 977, 978, 983, 992, 994, 995, 997, 1004, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "sensit": [4, 44, 79, 80, 112, 121, 167, 198, 199, 225, 298, 326, 355, 356, 382, 395, 400, 433, 443, 673, 693, 694, 768, 957, 958, 959, 961, 962, 966, 968, 976, 977, 988, 996, 1008], "splitter": [4, 381, 397, 419, 453, 548, 549, 575, 583, 628, 632, 634, 636, 642, 644, 646, 654, 656, 777, 779, 780, 781, 782, 783, 791, 792, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 806, 810, 813, 886, 887, 888, 889, 983, 1010, 1011, 1012, 1013], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 67, 70, 71, 97, 108, 115, 116, 118, 119, 121, 141, 151, 163, 169, 172, 176, 185, 198, 203, 214, 224, 239, 249, 250, 253, 254, 256, 259, 261, 262, 263, 265, 267, 268, 270, 272, 274, 285, 289, 303, 308, 326, 339, 350, 357, 361, 363, 370, 374, 381, 383, 392, 394, 401, 402, 403, 428, 430, 469, 472, 473, 474, 477, 490, 501, 517, 532, 542, 543, 544, 548, 549, 572, 575, 583, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 612, 613, 614, 615, 628, 634, 640, 654, 656, 678, 680, 682, 683, 684, 685, 686, 692, 694, 695, 696, 698, 699, 706, 707, 716, 717, 722, 734, 735, 736, 737, 766, 773, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 810, 816, 819, 820, 825, 837, 839, 846, 863, 864, 866, 867, 868, 869, 880, 883, 886, 901, 909, 936, 954, 958, 960, 964, 965, 968, 969, 970, 973, 976, 978, 982, 986, 988, 989, 992, 993, 995, 998, 999, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "forecast": [4, 256, 391, 962, 982], "realist": [4, 8, 258, 265, 266, 323, 962], "gap": [4, 339, 363, 397, 452, 453, 459, 569, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 798, 886, 887, 888, 889, 958, 959, 1012, 1016, 1018], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 59, 60, 65, 84, 97, 99, 103, 108, 112, 118, 121, 140, 148, 153, 154, 156, 163, 165, 166, 167, 168, 175, 182, 187, 191, 192, 196, 197, 198, 200, 201, 204, 214, 217, 225, 230, 234, 249, 252, 255, 256, 257, 258, 259, 261, 262, 263, 265, 272, 278, 282, 283, 285, 286, 298, 303, 309, 317, 326, 334, 339, 340, 341, 348, 350, 354, 355, 363, 368, 370, 377, 379, 380, 381, 387, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 422, 423, 426, 427, 431, 433, 434, 435, 437, 438, 439, 444, 450, 451, 452, 453, 454, 455, 456, 457, 472, 474, 475, 476, 477, 478, 479, 483, 495, 496, 502, 505, 508, 515, 517, 518, 519, 520, 521, 522, 527, 528, 530, 534, 535, 540, 541, 543, 544, 565, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 601, 608, 613, 614, 615, 620, 623, 626, 627, 628, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 657, 659, 660, 662, 665, 669, 671, 673, 675, 676, 677, 680, 682, 684, 685, 686, 688, 690, 691, 695, 696, 697, 698, 700, 704, 705, 706, 709, 710, 711, 714, 716, 717, 723, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 770, 771, 773, 774, 775, 776, 777, 779, 780, 786, 794, 795, 797, 804, 805, 807, 809, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 843, 846, 847, 849, 850, 852, 853, 856, 857, 858, 864, 867, 868, 872, 883, 886, 887, 888, 889, 891, 912, 931, 951, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 983, 995, 996, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "side": [4, 16, 27, 58, 121, 189, 214, 219, 228, 298, 339, 350, 363, 379, 391, 394, 397, 398, 401, 496, 958, 959, 962, 964, 977, 1013], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 69, 99, 108, 114, 115, 117, 120, 121, 122, 123, 124, 134, 141, 165, 166, 180, 191, 192, 196, 199, 204, 214, 226, 242, 243, 250, 251, 254, 256, 261, 263, 266, 285, 292, 294, 299, 300, 310, 317, 326, 339, 341, 348, 363, 375, 380, 381, 384, 391, 393, 398, 400, 401, 419, 424, 425, 453, 454, 460, 461, 478, 512, 518, 520, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 569, 570, 572, 575, 583, 628, 632, 634, 636, 642, 644, 646, 654, 656, 676, 685, 686, 698, 711, 717, 737, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 819, 820, 836, 837, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 933, 951, 958, 959, 965, 968, 969, 970, 976, 978, 983, 988, 992, 993, 995, 996, 997, 999, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "limit": [4, 8, 17, 37, 42, 56, 65, 81, 115, 116, 122, 128, 160, 166, 167, 168, 175, 196, 197, 213, 229, 263, 300, 309, 341, 350, 355, 369, 370, 373, 379, 381, 382, 393, 396, 398, 402, 444, 449, 540, 541, 542, 543, 613, 631, 639, 640, 660, 663, 664, 669, 758, 798, 827, 829, 830, 831, 852, 876, 880, 881, 882, 883, 884, 930, 951, 958, 959, 961, 962, 969, 970, 972, 983, 988, 999, 1012, 1014, 1017, 1018], "cv": [4, 12, 24, 25, 26, 54, 70, 71, 72, 73, 77, 102, 118, 120, 134, 135, 144, 160, 161, 166, 185, 195, 198, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 270, 311, 326, 334, 380, 381, 391, 397, 400, 419, 453, 548, 549, 575, 583, 628, 632, 634, 636, 640, 642, 644, 646, 654, 656, 777, 779, 780, 781, 782, 783, 791, 792, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 806, 810, 813, 886, 887, 951, 954, 957, 958, 962, 983, 992, 993, 997, 1006, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020], "fold": [4, 66, 73, 77, 117, 120, 134, 144, 166, 185, 243, 251, 252, 254, 256, 257, 259, 266, 317, 334, 350, 363, 371, 372, 380, 381, 393, 402, 419, 453, 474, 517, 548, 549, 575, 583, 628, 632, 634, 636, 640, 642, 644, 646, 654, 656, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 810, 813, 880, 883, 951, 958, 962, 977, 992, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 71, 74, 84, 104, 112, 114, 115, 120, 121, 125, 130, 136, 140, 154, 172, 182, 188, 199, 219, 228, 229, 231, 241, 245, 254, 256, 262, 265, 267, 281, 283, 299, 302, 307, 308, 310, 327, 328, 335, 339, 340, 373, 374, 380, 391, 401, 419, 454, 460, 461, 512, 513, 518, 523, 524, 526, 527, 529, 534, 545, 613, 627, 628, 632, 633, 634, 636, 641, 642, 643, 644, 647, 648, 649, 653, 657, 658, 659, 668, 673, 679, 682, 744, 856, 867, 873, 878, 879, 951, 955, 977, 992, 995, 1011, 1013], "datapoint": [4, 42, 52, 55, 152, 155, 179, 230, 231, 251, 256, 274, 332, 403, 483, 538, 539, 540, 541, 545, 546, 547, 592, 886, 887, 888, 889, 955], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 112, 118, 121, 145, 160, 166, 172, 175, 176, 196, 198, 214, 225, 230, 231, 256, 259, 262, 263, 265, 276, 299, 300, 316, 326, 334, 340, 350, 354, 355, 356, 363, 366, 367, 368, 370, 372, 373, 375, 376, 377, 380, 381, 384, 387, 391, 393, 395, 397, 398, 400, 401, 402, 403, 404, 405, 407, 422, 424, 425, 426, 427, 428, 430, 431, 433, 435, 438, 439, 440, 443, 444, 445, 448, 455, 463, 464, 465, 466, 468, 477, 484, 489, 490, 497, 502, 504, 505, 508, 513, 514, 517, 530, 538, 539, 542, 543, 544, 545, 546, 548, 562, 563, 566, 567, 569, 570, 572, 574, 575, 578, 583, 588, 589, 601, 608, 609, 610, 612, 613, 614, 616, 619, 620, 621, 624, 626, 627, 628, 629, 630, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 665, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 690, 707, 708, 751, 754, 758, 759, 760, 761, 762, 765, 768, 769, 779, 785, 787, 794, 795, 796, 797, 801, 805, 807, 808, 819, 820, 821, 822, 823, 824, 825, 827, 829, 836, 837, 842, 843, 846, 847, 848, 850, 851, 852, 853, 861, 865, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 898, 902, 904, 907, 915, 922, 928, 931, 933, 936, 937, 938, 939, 940, 941, 942, 943, 951, 952, 956, 957, 958, 959, 962, 963, 965, 967, 968, 969, 972, 975, 976, 977, 978, 983, 985, 986, 993, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "enough": [4, 37, 44, 61, 117, 148, 160, 167, 168, 185, 196, 230, 232, 302, 339, 341, 350, 366, 368, 372, 382, 391, 392, 393, 395, 397, 400, 548, 549, 570, 777, 780, 781, 783, 791, 803, 915, 951, 956, 959, 961, 968, 972, 977, 982, 986, 1010], "quantifi": [4, 37, 49, 77, 153, 214, 263, 370, 381, 388, 392, 554, 842, 957, 970, 972, 999], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 90, 94, 96, 103, 104, 115, 116, 124, 166, 175, 183, 188, 198, 200, 201, 205, 219, 221, 230, 234, 244, 250, 253, 256, 259, 263, 281, 300, 339, 341, 348, 356, 360, 363, 365, 370, 379, 380, 381, 382, 387, 391, 393, 397, 398, 399, 400, 401, 402, 420, 424, 433, 444, 451, 452, 453, 454, 455, 456, 457, 469, 471, 472, 473, 475, 477, 479, 481, 482, 483, 485, 486, 491, 515, 517, 519, 521, 522, 528, 536, 544, 562, 569, 572, 610, 613, 615, 621, 657, 659, 678, 682, 723, 769, 777, 779, 790, 791, 794, 797, 802, 804, 805, 808, 809, 815, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 837, 846, 852, 875, 898, 899, 919, 952, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 970, 972, 973, 975, 976, 978, 988, 993, 994, 996, 1010, 1012, 1015, 1016, 1019], "bit": [4, 48, 53, 77, 97, 194, 198, 298, 326, 340, 350, 354, 363, 366, 400, 401, 563, 570, 639, 809, 898, 899, 959, 963, 981, 990, 997, 1004, 1007, 1010, 1012, 1013, 1016, 1017, 1018], "less": [4, 5, 8, 52, 53, 59, 91, 94, 97, 105, 115, 121, 122, 148, 155, 166, 178, 196, 198, 200, 231, 242, 244, 256, 257, 265, 267, 270, 299, 302, 303, 308, 310, 339, 340, 350, 354, 356, 363, 368, 370, 379, 381, 393, 397, 398, 400, 401, 405, 421, 423, 425, 427, 429, 431, 433, 438, 441, 443, 444, 463, 464, 465, 477, 496, 512, 516, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 571, 577, 600, 608, 615, 628, 642, 657, 659, 673, 682, 702, 703, 704, 705, 716, 732, 744, 759, 760, 765, 773, 775, 776, 779, 780, 781, 787, 803, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 842, 854, 856, 857, 859, 861, 867, 868, 878, 879, 886, 887, 888, 889, 904, 918, 951, 952, 954, 955, 956, 959, 961, 962, 965, 967, 972, 976, 977, 978, 982, 995, 997, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019], "half": [4, 24, 97, 230, 233, 254, 256, 268, 363, 364, 398, 444, 503, 543, 574, 578, 583, 750, 838, 846, 962, 965, 978], "contigu": [4, 21, 370, 379, 390, 397, 401, 425, 428, 430, 440, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 761, 796, 819, 820, 878, 880, 881, 882, 883, 884, 977, 1007, 1014, 1018], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 70, 71, 72, 73, 74, 77, 85, 99, 102, 108, 114, 115, 118, 119, 120, 121, 122, 123, 124, 127, 128, 134, 135, 141, 142, 144, 148, 160, 161, 163, 165, 166, 168, 169, 172, 191, 196, 198, 203, 204, 211, 212, 214, 226, 231, 236, 237, 238, 243, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 278, 280, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 311, 317, 318, 326, 329, 334, 344, 348, 350, 357, 368, 370, 373, 380, 381, 394, 397, 400, 419, 420, 539, 541, 548, 549, 560, 640, 678, 679, 681, 683, 722, 807, 810, 828, 836, 837, 839, 886, 887, 888, 889, 951, 952, 957, 962, 964, 965, 970, 972, 977, 983, 992, 993, 997, 1001, 1010, 1011], "timeseriessplit": [4, 251, 397, 1010, 1011, 1016], "ts_cv": 4, "n_split": [4, 109, 120, 160, 161, 166, 243, 251, 256, 258, 261, 266, 317, 326, 334, 350, 397, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 802, 992, 1010, 1012], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 100, 101, 102, 104, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 134, 135, 137, 140, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 317, 318, 319, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 363, 365, 366, 368, 370, 373, 374, 379, 380, 381, 384, 385, 386, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 419, 420, 421, 422, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435, 439, 443, 445, 447, 450, 453, 463, 464, 465, 466, 471, 474, 475, 485, 497, 498, 502, 504, 505, 507, 509, 512, 514, 515, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 533, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 563, 573, 574, 575, 578, 583, 591, 594, 595, 596, 597, 600, 601, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 619, 622, 624, 627, 628, 632, 633, 634, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 653, 657, 658, 659, 661, 662, 665, 669, 670, 672, 673, 676, 677, 680, 684, 686, 690, 693, 694, 702, 703, 704, 706, 707, 708, 710, 715, 718, 719, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 749, 761, 762, 764, 765, 767, 768, 769, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 836, 837, 838, 839, 844, 845, 846, 848, 849, 851, 852, 854, 855, 856, 858, 859, 866, 867, 872, 878, 879, 880, 881, 882, 883, 884, 886, 888, 904, 913, 914, 915, 917, 919, 920, 925, 926, 930, 933, 951, 952, 954, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 974, 976, 977, 980, 984, 988, 992, 993, 995, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1019, 1020], "48": [4, 8, 45, 101, 153, 238, 365, 374, 393, 491, 578, 726, 803, 814, 951, 964, 972, 1000], "max_train_s": [4, 397, 798, 1011], "10000": [4, 11, 30, 43, 62, 71, 72, 122, 134, 182, 189, 196, 204, 212, 229, 231, 269, 308, 323, 350, 356, 400, 401, 542, 543, 625, 660, 856, 884, 974, 993, 997], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 70, 108, 114, 119, 120, 122, 123, 127, 165, 172, 191, 196, 203, 204, 211, 212, 253, 254, 258, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 308, 326, 334, 350, 373, 397, 679, 779, 794, 797, 798, 805, 807, 828, 952, 964, 965, 992, 993, 1004, 1005, 1010, 1011, 1016], "manual": [4, 46, 166, 167, 169, 180, 197, 207, 258, 276, 317, 324, 339, 341, 354, 355, 363, 368, 372, 373, 380, 384, 393, 397, 398, 399, 419, 430, 548, 829, 852, 858, 951, 956, 958, 961, 962, 965, 972, 983, 988, 989, 997, 1012, 1014], "inspect": [4, 31, 55, 60, 111, 115, 122, 124, 125, 129, 142, 148, 153, 154, 166, 167, 168, 169, 179, 188, 205, 235, 256, 259, 268, 279, 284, 287, 303, 306, 307, 308, 309, 311, 322, 323, 324, 327, 328, 339, 345, 355, 357, 370, 381, 393, 394, 400, 401, 445, 534, 535, 538, 539, 540, 541, 545, 546, 547, 808, 839, 840, 886, 887, 888, 889, 950, 962, 963, 966, 969, 970, 977, 982, 997, 999, 1007], "variou": [4, 12, 36, 37, 57, 59, 60, 67, 80, 84, 97, 163, 166, 174, 206, 215, 216, 217, 218, 223, 229, 302, 307, 339, 341, 348, 350, 354, 362, 363, 364, 365, 368, 370, 373, 380, 382, 391, 392, 393, 395, 419, 423, 453, 483, 495, 496, 506, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 575, 583, 628, 632, 634, 636, 639, 642, 644, 646, 647, 649, 654, 656, 657, 672, 673, 680, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 805, 806, 839, 878, 879, 951, 952, 959, 962, 965, 969, 972, 976, 978, 982, 986, 996, 997, 1004, 1007, 1008], "check": [4, 5, 8, 17, 46, 53, 55, 98, 128, 148, 163, 165, 167, 168, 182, 184, 185, 196, 218, 249, 265, 272, 309, 316, 334, 348, 354, 355, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 379, 381, 384, 387, 394, 425, 432, 433, 446, 483, 489, 490, 512, 517, 518, 529, 542, 543, 627, 628, 633, 634, 641, 642, 643, 644, 657, 659, 662, 668, 670, 673, 674, 783, 794, 803, 817, 835, 843, 883, 886, 887, 888, 889, 898, 899, 900, 909, 910, 921, 922, 924, 946, 947, 948, 950, 957, 958, 959, 962, 977, 983, 986, 1004, 1005, 1007, 1011, 1015, 1016, 1017, 1018, 1019], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 61, 69, 104, 105, 113, 120, 128, 135, 169, 235, 251, 254, 256, 257, 259, 260, 265, 269, 285, 300, 306, 307, 308, 309, 310, 311, 318, 329, 340, 341, 356, 362, 363, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 391, 392, 393, 394, 397, 399, 400, 401, 414, 416, 419, 431, 437, 438, 445, 446, 447, 453, 459, 463, 464, 465, 469, 470, 471, 472, 473, 477, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 504, 513, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 569, 570, 572, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 613, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 662, 665, 673, 677, 678, 680, 691, 693, 694, 697, 699, 705, 713, 726, 734, 758, 761, 763, 768, 772, 775, 776, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 847, 850, 852, 853, 858, 875, 879, 881, 884, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 900, 904, 906, 907, 908, 910, 918, 919, 921, 923, 933, 936, 946, 951, 952, 958, 962, 964, 965, 966, 969, 970, 973, 978, 980, 982, 983, 986, 988, 992, 994, 997, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "train_0": 4, "test_0": 4, "iloc": [4, 128, 166, 167, 214, 256], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 50, 54, 79, 84, 90, 100, 102, 104, 109, 113, 121, 128, 132, 141, 142, 149, 160, 166, 176, 186, 204, 215, 225, 243, 256, 289, 292, 295, 298, 300, 311, 314, 315, 339, 347, 350, 354, 374, 397, 400, 401, 426, 458, 482, 485, 551, 578, 659, 714, 774, 794, 805, 831, 849, 854, 856, 857, 867, 868, 870, 871, 957, 958, 962, 963, 965, 972, 993, 1004, 1006, 1012, 1015], "760": 4, "68": [4, 46, 187, 295, 314, 393, 516, 522, 571, 1004], "27": [4, 6, 19, 31, 47, 54, 215, 314, 315, 335, 342, 365, 393, 401, 403, 505, 694, 768, 769, 879, 962, 996, 1004, 1006], "9993": [4, 634, 636, 1012], "12380": 4, "32": [4, 5, 51, 165, 168, 233, 257, 310, 315, 362, 366, 373, 381, 390, 400, 401, 427, 545, 546, 563, 570, 615, 657, 858, 898, 899, 927, 970, 996, 1004, 1007, 1010, 1012, 1013, 1016, 1017, 1018], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 73, 149, 168, 172, 229, 254, 256, 258, 276, 290, 303, 309, 334, 337, 339, 340, 350, 363, 374, 400, 401, 471, 542, 543, 625, 658, 976, 997, 1015], "77": [4, 6, 44, 172, 265, 315, 362, 365, 515], "0028": 4, "12381": 4, "72": [4, 6, 7, 151, 373, 803], "9995": 4, "12382": 4, "240": [4, 44, 190, 215, 970, 1004], "82": [4, 30, 53, 57, 91, 142, 199, 287, 295, 314, 768, 777, 791, 962, 965, 993, 1004], "9980": [4, 1012], "12383": 4, "13374": 4, "34": [4, 91, 121, 148, 257, 272, 281, 295, 314, 315, 365, 397, 403, 501, 551, 578, 630, 648, 697, 744, 993, 1004], "44": [4, 84, 153, 166, 167, 280, 403, 761, 879, 882, 962, 969, 1004], "40": [4, 14, 54, 65, 77, 89, 94, 100, 124, 130, 148, 187, 188, 190, 213, 219, 221, 232, 245, 257, 282, 288, 294, 300, 314, 315, 324, 325, 327, 329, 331, 333, 348, 355, 363, 397, 476, 498, 499, 819, 820, 824, 836, 837, 951, 963, 972, 1004, 1005], "150": [4, 6, 89, 91, 113, 121, 134, 218, 222, 225, 269, 365, 397, 402, 485, 583, 800, 801, 802, 962, 992, 993, 994], "53": [4, 53, 393, 400, 516, 522, 770, 771], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 60, 61, 65, 72, 73, 79, 81, 91, 97, 104, 109, 113, 117, 118, 121, 140, 142, 144, 148, 152, 160, 165, 166, 167, 185, 193, 198, 210, 214, 219, 222, 225, 243, 244, 251, 259, 261, 264, 267, 268, 270, 279, 280, 284, 287, 290, 292, 293, 295, 298, 300, 302, 315, 320, 324, 326, 329, 333, 336, 345, 362, 363, 368, 380, 397, 400, 401, 422, 435, 471, 478, 512, 518, 536, 537, 579, 625, 633, 642, 644, 649, 657, 659, 673, 721, 795, 808, 831, 951, 957, 958, 959, 962, 965, 966, 972, 977, 980, 988, 993, 1000, 1002, 1006, 1016, 1018, 1019], "0013": 4, "13375": 4, "39": [4, 67, 234, 238, 363, 365, 366, 372, 393, 401, 476, 887], "49": [4, 8, 91, 362, 363, 365, 373, 393, 431, 438, 694, 706, 736, 744, 775, 777, 957, 962, 972, 1007], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 15, 96, 154, 166, 214, 329, 365, 374, 400, 401, 536, 537, 551, 715, 962, 997, 1004], "08": [4, 22, 44, 50, 97, 132, 162, 166, 167, 215, 248, 295, 342, 365, 512, 524, 526, 544, 622, 639, 777, 836, 837, 858, 968], "910": 4, "42": [4, 6, 19, 24, 25, 26, 27, 31, 46, 55, 77, 91, 96, 102, 115, 116, 118, 121, 122, 124, 128, 141, 142, 161, 166, 168, 169, 172, 175, 180, 185, 188, 190, 191, 198, 202, 203, 204, 210, 211, 213, 218, 225, 231, 234, 237, 255, 257, 260, 276, 282, 283, 284, 292, 299, 300, 301, 303, 306, 308, 310, 317, 318, 324, 326, 339, 340, 350, 355, 370, 373, 374, 381, 393, 397, 400, 401, 404, 419, 426, 469, 473, 505, 512, 518, 525, 538, 539, 546, 547, 548, 549, 551, 658, 775, 779, 803, 805, 819, 820, 824, 828, 831, 870, 871, 873, 874, 875, 888, 889, 965, 972, 993, 997, 1000, 1001, 1004], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 70, 91, 111, 130, 166, 167, 175, 184, 225, 303, 314, 315, 525, 629, 630, 637, 683, 687, 688, 707, 721, 736, 762, 769, 812, 951, 958, 962, 968, 969, 972, 993, 997, 1004, 1006], "26": [4, 46, 54, 79, 96, 153, 166, 222, 233, 269, 315, 374, 551, 629, 709, 763, 855, 866, 915, 962, 972, 1004, 1007, 1008, 1016], "47": [4, 46, 84, 192, 363, 474, 475, 516, 522, 957], "16": [4, 5, 10, 15, 19, 27, 43, 50, 51, 54, 65, 73, 79, 94, 97, 108, 132, 140, 157, 167, 172, 173, 189, 195, 196, 197, 214, 217, 218, 222, 223, 230, 233, 258, 259, 260, 280, 295, 298, 302, 306, 340, 346, 363, 365, 366, 374, 380, 384, 385, 386, 397, 398, 401, 424, 459, 478, 483, 515, 516, 551, 570, 576, 577, 588, 589, 620, 631, 632, 635, 636, 637, 638, 663, 664, 790, 795, 805, 854, 879, 887, 951, 958, 962, 972, 977, 980, 988, 997, 1000, 1002, 1004, 1005, 1009, 1010, 1012, 1013], "9979": 4, "2331": 4, "31": [4, 69, 78, 214, 222, 281, 309, 314, 315, 390, 401, 481, 542, 543, 578, 630, 652, 660, 927, 963, 1004], "060": [4, 150, 158, 731], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 97, 172, 214, 295, 300, 315, 474, 475, 634, 636, 645, 646, 777, 783, 803, 962, 983, 993], "275": [4, 315, 1007], "2334": 4, "96": [4, 32, 48, 61, 155, 225, 295, 300, 303, 314, 315, 365, 397, 951, 957, 962, 972, 1004], "515": [4, 31, 35], "64": [4, 32, 48, 53, 57, 88, 94, 153, 166, 218, 229, 230, 233, 254, 265, 280, 285, 345, 354, 355, 365, 366, 374, 398, 476, 483, 580, 581, 627, 639, 669, 670, 671, 672, 879, 965, 994, 1000, 1004, 1006, 1012, 1013, 1016, 1017, 1018], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1013], "12329": 4, "46": [4, 8, 53, 170, 188, 196, 350, 374, 574, 575, 697, 882, 887, 957, 972, 1000], "12330": [4, 1012], "52": [4, 132, 153, 196, 264, 339, 614, 775, 957, 1004], "last": [4, 44, 57, 88, 119, 121, 166, 175, 196, 197, 204, 209, 225, 247, 259, 267, 268, 303, 308, 310, 317, 344, 354, 363, 366, 370, 372, 373, 376, 381, 384, 393, 394, 401, 405, 420, 424, 428, 440, 445, 449, 496, 514, 540, 541, 542, 543, 564, 565, 568, 574, 575, 578, 591, 663, 664, 666, 667, 678, 679, 681, 682, 683, 688, 762, 775, 776, 780, 781, 796, 819, 820, 824, 839, 844, 852, 858, 893, 918, 937, 951, 957, 958, 959, 961, 962, 963, 966, 976, 983, 988, 995, 1004, 1011, 1012, 1013, 1018], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 8, 11, 32, 54, 96, 117, 195, 232, 269, 295, 300, 314, 315, 400, 644, 768, 957, 962, 963, 972, 997, 1004], "665": [4, 92], "16380": 4, "71": [4, 8, 214, 365, 491, 710, 962, 995, 1006], "16381": 4, "76": [4, 172, 196, 295, 315, 318, 339, 350, 365, 374, 761, 995], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 59, 61, 73, 91, 102, 109, 121, 157, 158, 166, 207, 222, 225, 230, 256, 272, 295, 302, 315, 339, 340, 341, 368, 374, 394, 397, 398, 401, 428, 440, 473, 481, 482, 483, 485, 486, 491, 516, 517, 519, 521, 522, 538, 539, 540, 541, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 558, 559, 570, 575, 580, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 627, 630, 639, 640, 652, 695, 699, 711, 714, 715, 721, 723, 775, 776, 798, 812, 835, 836, 837, 843, 849, 857, 858, 868, 878, 879, 886, 887, 888, 889, 890, 914, 915, 951, 960, 962, 972, 980, 1000, 1002, 1004, 1005, 1008, 1009, 1011, 1012, 1014, 1015], "940": 4, "6331": 4, "28": [4, 65, 97, 106, 121, 166, 212, 222, 265, 294, 314, 315, 365, 374, 393, 397, 431, 438, 972, 993, 1004, 1007, 1010], "790": [4, 69], "89": [4, 32, 153, 187, 295, 314, 315, 962, 972, 997, 1004, 1007, 1015], "6332": 4, "6333": 4, "88": [4, 6, 32, 187, 255, 295, 314, 315, 344, 363, 365, 395, 454, 839, 993, 1004], "820": [4, 819, 820], "79": [4, 6, 30, 32, 79, 80, 97, 172, 295, 315, 365, 373, 395, 455, 505, 578, 817, 1004, 1006], "6334": 4, "6335": 4, "70": [4, 6, 8, 11, 65, 70, 72, 167, 241, 256, 315, 363, 365, 397, 474, 475, 694, 706, 736, 777, 791, 951, 972, 993], "33": [4, 79, 196, 311, 315, 363, 365, 366, 372, 373, 374, 384, 385, 386, 401, 513, 629, 693, 694, 709, 710, 718, 723, 763, 764, 767, 783, 803, 805, 807, 889, 958, 962, 972, 993, 1004, 1012], "335": 4, "74": [4, 111, 212, 314, 315, 365, 571, 777, 791, 858], "16326": [4, 1016], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 153, 197, 363, 372, 376], "tree": [4, 7, 26, 27, 31, 41, 44, 61, 107, 108, 111, 112, 113, 118, 119, 120, 121, 122, 124, 128, 129, 132, 156, 160, 167, 169, 218, 233, 235, 260, 276, 281, 289, 298, 299, 303, 308, 349, 350, 354, 357, 363, 365, 374, 380, 381, 383, 391, 393, 399, 404, 419, 423, 424, 425, 426, 427, 429, 431, 438, 444, 476, 481, 485, 495, 496, 500, 525, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 612, 613, 614, 615, 639, 669, 673, 684, 768, 783, 803, 805, 814, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 840, 843, 852, 910, 952, 959, 962, 963, 968, 969, 982, 983, 984, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "often": [4, 19, 24, 25, 33, 69, 73, 126, 152, 160, 166, 167, 197, 214, 218, 243, 258, 261, 298, 303, 326, 336, 339, 340, 341, 354, 355, 362, 363, 365, 368, 370, 373, 376, 379, 380, 381, 383, 387, 391, 393, 394, 395, 397, 398, 400, 401, 403, 405, 449, 502, 505, 514, 517, 613, 627, 628, 633, 634, 641, 642, 643, 644, 653, 655, 668, 708, 849, 857, 864, 876, 951, 952, 954, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 972, 975, 976, 978, 988, 990, 995, 996, 997, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "flexibl": [4, 25, 118, 160, 196, 299, 323, 341, 370, 375, 397, 403, 655, 878, 879, 951, 956, 958, 962, 966, 972, 983, 986, 1013, 1017], "effici": [4, 5, 12, 13, 42, 46, 53, 94, 126, 172, 185, 189, 198, 204, 281, 339, 354, 360, 362, 368, 370, 371, 373, 374, 379, 381, 387, 390, 392, 393, 398, 399, 400, 403, 405, 424, 425, 428, 430, 431, 433, 435, 438, 440, 442, 443, 477, 514, 515, 516, 519, 521, 522, 525, 544, 547, 555, 569, 572, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 619, 621, 636, 639, 640, 645, 647, 649, 654, 656, 657, 658, 659, 660, 666, 667, 669, 680, 706, 736, 743, 759, 760, 775, 776, 777, 791, 808, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 844, 856, 867, 871, 878, 887, 889, 915, 930, 951, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 970, 972, 973, 974, 975, 976, 977, 982, 986, 988, 992, 995, 996, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "heteorogen": 4, "tabular": [4, 167, 370, 970], "mix": [4, 61, 68, 75, 95, 96, 163, 196, 298, 362, 370, 379, 381, 394, 398, 405, 445, 447, 448, 477, 514, 519, 521, 528, 581, 585, 611, 627, 628, 633, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 777, 791, 805, 839, 852, 853, 859, 926, 933, 936, 958, 967, 996, 1016, 1018, 1019], "long": [4, 11, 12, 44, 61, 109, 121, 153, 161, 166, 168, 196, 232, 259, 289, 298, 307, 339, 340, 350, 355, 368, 376, 379, 381, 382, 387, 392, 393, 403, 434, 479, 519, 657, 658, 659, 780, 781, 814, 815, 816, 817, 818, 836, 837, 847, 962, 968, 972, 973, 975, 976, 981, 985, 1006, 1010, 1016, 1018], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 59, 64, 79, 80, 81, 85, 89, 91, 94, 98, 99, 103, 104, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 124, 129, 130, 131, 142, 144, 148, 153, 154, 155, 157, 160, 163, 166, 167, 172, 174, 182, 184, 185, 196, 198, 200, 204, 210, 212, 213, 214, 215, 217, 225, 229, 230, 232, 234, 241, 242, 244, 245, 246, 247, 249, 251, 256, 258, 259, 260, 262, 264, 268, 270, 272, 274, 276, 279, 280, 281, 282, 283, 285, 286, 287, 298, 300, 301, 302, 303, 306, 308, 309, 311, 314, 316, 317, 318, 319, 321, 322, 324, 326, 328, 334, 337, 339, 340, 345, 348, 354, 357, 361, 363, 364, 367, 368, 370, 371, 379, 380, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 410, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 437, 438, 439, 442, 443, 444, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 668, 669, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 743, 744, 748, 749, 750, 751, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 903, 904, 915, 919, 931, 933, 936, 937, 940, 943, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 982, 983, 985, 988, 994, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 72, 74, 94, 98, 112, 114, 121, 124, 126, 141, 153, 154, 168, 175, 176, 185, 187, 196, 198, 201, 202, 214, 230, 253, 259, 262, 265, 278, 285, 294, 298, 300, 309, 310, 326, 331, 340, 341, 354, 363, 368, 374, 377, 379, 380, 381, 384, 387, 392, 395, 397, 398, 399, 400, 402, 403, 404, 406, 424, 426, 428, 431, 432, 433, 434, 439, 443, 454, 456, 480, 495, 515, 517, 519, 521, 525, 528, 530, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 563, 569, 570, 572, 615, 622, 624, 631, 635, 638, 639, 640, 645, 652, 653, 655, 658, 660, 666, 668, 670, 672, 673, 674, 676, 726, 759, 760, 777, 785, 787, 791, 795, 804, 814, 815, 816, 817, 818, 819, 820, 825, 836, 837, 844, 848, 849, 857, 859, 870, 871, 878, 879, 883, 884, 886, 887, 888, 889, 914, 915, 951, 954, 956, 958, 959, 961, 964, 965, 966, 970, 975, 976, 977, 978, 982, 983, 986, 993, 995, 996, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ordin": [4, 53, 70, 128, 301, 308, 311, 362, 381, 400, 477, 548, 690, 844, 847, 852, 853, 958, 959, 972, 983, 1012, 1018], "encod": [4, 8, 11, 48, 70, 94, 114, 128, 166, 167, 168, 195, 196, 265, 299, 300, 301, 308, 310, 311, 326, 339, 341, 360, 362, 364, 370, 373, 379, 381, 394, 397, 398, 400, 401, 403, 468, 477, 484, 507, 512, 518, 520, 521, 523, 525, 526, 527, 529, 532, 542, 543, 547, 548, 550, 562, 569, 570, 572, 611, 629, 639, 640, 650, 661, 715, 779, 784, 786, 842, 844, 846, 847, 850, 852, 853, 862, 951, 952, 958, 959, 962, 964, 965, 967, 976, 982, 983, 999, 1005, 1006, 1012, 1016, 1018, 1019], "know": [4, 53, 65, 118, 142, 145, 148, 157, 166, 214, 232, 256, 274, 310, 314, 334, 340, 354, 368, 379, 387, 393, 396, 397, 398, 401, 481, 485, 491, 627, 633, 639, 640, 706, 736, 777, 791, 863, 864, 866, 867, 868, 869, 886, 887, 888, 889, 951, 961, 962, 963, 965, 974, 1010, 1011, 1014, 1016], "treat": [4, 6, 70, 118, 128, 160, 166, 196, 265, 308, 317, 350, 368, 379, 381, 390, 400, 401, 424, 542, 543, 569, 570, 572, 588, 589, 613, 619, 626, 652, 655, 734, 768, 848, 849, 855, 856, 859, 863, 866, 867, 869, 952, 954, 958, 962, 963, 969, 972, 976, 978, 993, 1008, 1016, 1020], "dedic": [4, 254, 336, 366, 372, 374, 379, 382, 384, 389, 393, 565, 653, 655, 668, 951, 982, 988, 1012], "rule": [4, 172, 345, 348, 350, 354, 365, 368, 369, 370, 379, 381, 382, 388, 392, 393, 397, 398, 400, 402, 517, 530, 531, 532, 533, 534, 542, 543, 550, 551, 583, 615, 626, 639, 640, 647, 649, 657, 658, 659, 687, 688, 777, 780, 781, 783, 791, 802, 804, 828, 878, 891, 951, 956, 964, 965, 976, 978, 983, 988, 995, 999, 1006, 1009, 1016], "pass": [4, 7, 8, 20, 21, 38, 118, 125, 142, 177, 197, 226, 228, 229, 235, 237, 246, 254, 257, 306, 309, 331, 341, 350, 354, 355, 356, 363, 368, 369, 370, 373, 374, 375, 376, 377, 379, 381, 387, 393, 394, 397, 398, 400, 401, 403, 404, 405, 419, 420, 422, 425, 426, 428, 430, 431, 433, 435, 438, 440, 441, 443, 445, 446, 448, 450, 453, 455, 469, 472, 473, 476, 478, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 562, 563, 569, 570, 572, 574, 575, 578, 588, 589, 591, 592, 598, 601, 607, 612, 613, 615, 620, 621, 622, 623, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 652, 653, 657, 658, 659, 660, 662, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 712, 713, 722, 743, 754, 758, 759, 760, 761, 768, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 843, 844, 846, 850, 852, 853, 854, 856, 859, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 905, 909, 910, 914, 915, 917, 919, 921, 922, 930, 932, 933, 936, 951, 952, 958, 960, 962, 963, 964, 965, 966, 969, 972, 975, 976, 977, 983, 986, 988, 992, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "explicitli": [4, 46, 115, 148, 155, 160, 161, 197, 228, 341, 350, 355, 362, 364, 368, 369, 370, 372, 379, 381, 389, 397, 401, 403, 530, 531, 560, 561, 578, 608, 629, 639, 640, 650, 661, 690, 707, 762, 768, 769, 780, 781, 810, 813, 819, 820, 845, 868, 869, 930, 951, 952, 954, 956, 958, 959, 962, 964, 965, 972, 986, 997, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018], "logic": [4, 355, 369, 370, 375, 389, 400, 978, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "integ": [4, 17, 48, 53, 70, 166, 196, 214, 307, 308, 350, 354, 362, 363, 365, 370, 373, 377, 380, 381, 393, 394, 397, 398, 400, 401, 416, 419, 443, 445, 448, 453, 468, 477, 479, 482, 483, 484, 486, 489, 490, 493, 495, 496, 500, 503, 531, 540, 541, 542, 543, 544, 548, 549, 553, 563, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 613, 614, 625, 632, 636, 640, 646, 654, 656, 657, 680, 695, 715, 777, 779, 780, 781, 782, 784, 786, 791, 792, 793, 794, 796, 797, 799, 802, 810, 813, 815, 818, 819, 820, 844, 852, 853, 858, 859, 862, 872, 874, 886, 887, 888, 889, 894, 925, 926, 927, 931, 952, 958, 963, 965, 972, 975, 977, 978, 988, 995, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "lexicograph": [4, 381, 548, 768, 772, 821, 829], "ad": [4, 13, 74, 102, 104, 108, 119, 141, 148, 154, 155, 175, 198, 221, 231, 256, 257, 258, 298, 307, 308, 309, 310, 311, 318, 340, 367, 368, 372, 374, 379, 381, 382, 398, 400, 401, 402, 403, 423, 424, 425, 427, 428, 430, 433, 440, 443, 445, 495, 503, 513, 516, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 563, 570, 571, 572, 574, 583, 588, 589, 592, 594, 608, 610, 622, 623, 629, 631, 635, 639, 640, 650, 657, 659, 661, 676, 695, 755, 757, 775, 776, 777, 791, 800, 807, 817, 836, 837, 838, 852, 858, 860, 875, 886, 887, 888, 889, 905, 951, 955, 957, 958, 959, 963, 965, 966, 968, 983, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "benefit": [4, 55, 73, 74, 166, 210, 221, 228, 230, 278, 310, 354, 368, 377, 381, 391, 393, 429, 442, 449, 489, 548, 549, 639, 640, 647, 649, 657, 658, 659, 876, 878, 951, 957, 965, 970, 972, 983, 986, 1004, 1007, 1008, 1009, 1016, 1017, 1018, 1019], "prevent": [4, 109, 121, 142, 165, 197, 298, 326, 339, 344, 350, 368, 370, 372, 379, 380, 393, 398, 401, 424, 430, 469, 470, 571, 572, 592, 708, 765, 836, 837, 863, 864, 866, 867, 868, 869, 962, 964, 967, 968, 978, 995, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 56, 66, 125, 140, 145, 153, 154, 155, 165, 166, 167, 168, 185, 196, 214, 225, 228, 229, 242, 246, 247, 256, 257, 259, 262, 265, 289, 298, 299, 302, 306, 308, 309, 311, 326, 341, 350, 354, 355, 356, 362, 363, 365, 366, 368, 370, 372, 373, 374, 376, 380, 381, 382, 384, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 416, 422, 429, 430, 431, 433, 435, 437, 438, 442, 445, 448, 469, 470, 489, 490, 504, 515, 518, 520, 527, 532, 538, 539, 540, 541, 545, 546, 547, 548, 549, 550, 551, 560, 561, 563, 569, 570, 572, 574, 584, 591, 592, 601, 608, 613, 614, 629, 639, 640, 647, 649, 650, 657, 658, 659, 660, 661, 673, 677, 680, 681, 685, 697, 698, 700, 704, 716, 717, 732, 735, 737, 754, 758, 759, 760, 761, 770, 771, 773, 777, 780, 781, 789, 790, 808, 811, 819, 820, 825, 829, 838, 839, 843, 844, 848, 850, 852, 853, 868, 869, 872, 875, 878, 886, 887, 888, 889, 890, 892, 894, 898, 899, 932, 946, 951, 952, 954, 957, 958, 959, 962, 963, 964, 965, 968, 969, 970, 972, 974, 975, 976, 977, 978, 982, 988, 990, 994, 995, 997, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "unknown": [4, 16, 55, 166, 256, 314, 316, 356, 363, 381, 387, 390, 401, 846, 852, 853, 925, 961, 972, 988, 1008, 1012, 1016, 1017], "sake": [4, 121, 161, 166, 196, 303, 339, 341, 376, 379, 651, 680], "simplic": [4, 13, 31, 339, 341, 381, 399, 965, 966, 967, 977], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 70, 71, 97, 108, 114, 115, 116, 117, 124, 125, 128, 131, 142, 148, 153, 161, 165, 166, 167, 168, 172, 175, 177, 185, 226, 227, 228, 235, 236, 237, 238, 242, 243, 246, 254, 256, 257, 263, 268, 276, 289, 295, 307, 308, 310, 311, 316, 328, 339, 340, 348, 363, 366, 367, 368, 370, 373, 374, 376, 379, 381, 387, 393, 396, 397, 401, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 484, 548, 558, 570, 639, 654, 656, 670, 674, 777, 780, 781, 789, 791, 800, 801, 802, 804, 857, 859, 878, 951, 958, 959, 968, 977, 978, 983, 985, 986, 988, 990, 993, 995, 996, 997, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 58, 94, 141, 148, 160, 167, 175, 176, 185, 196, 197, 214, 227, 229, 236, 238, 244, 251, 259, 265, 274, 276, 283, 298, 302, 306, 307, 311, 335, 339, 340, 341, 344, 350, 354, 355, 362, 363, 366, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 384, 387, 391, 393, 394, 397, 398, 400, 401, 402, 404, 405, 406, 407, 409, 410, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 688, 689, 690, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 902, 904, 905, 907, 909, 914, 915, 916, 917, 918, 919, 920, 925, 927, 930, 931, 932, 933, 935, 936, 937, 943, 946, 948, 949, 951, 952, 954, 956, 958, 961, 962, 963, 965, 966, 968, 969, 972, 974, 976, 977, 988, 992, 995, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hyper": [4, 70, 250, 256, 261, 295, 326, 350, 370, 379, 380, 381, 388, 397, 400, 402, 625, 626, 781, 789, 791, 835, 957, 958, 962, 965, 976, 977, 988, 999, 1004, 1018], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 57, 59, 60, 61, 70, 71, 72, 78, 80, 81, 91, 94, 111, 113, 117, 122, 123, 134, 135, 142, 145, 148, 152, 153, 154, 155, 156, 157, 160, 161, 163, 166, 167, 175, 176, 177, 178, 181, 183, 184, 185, 187, 188, 196, 198, 200, 201, 204, 205, 213, 214, 221, 222, 225, 227, 230, 231, 234, 241, 243, 244, 246, 247, 250, 255, 256, 257, 260, 261, 264, 267, 268, 269, 271, 276, 278, 282, 283, 289, 292, 293, 295, 298, 299, 300, 306, 307, 309, 310, 311, 318, 321, 323, 328, 331, 335, 336, 337, 339, 340, 341, 344, 345, 346, 347, 350, 354, 355, 356, 357, 360, 361, 363, 371, 373, 374, 375, 376, 377, 379, 388, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 978, 982, 983, 989, 991, 993, 994, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "pipelin": [4, 31, 54, 57, 70, 73, 75, 85, 114, 118, 139, 141, 146, 160, 161, 167, 168, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 224, 225, 226, 230, 235, 238, 239, 249, 253, 255, 263, 270, 272, 276, 278, 284, 285, 292, 295, 300, 303, 306, 307, 308, 309, 310, 311, 318, 339, 340, 350, 354, 357, 360, 362, 363, 368, 371, 381, 397, 401, 403, 407, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 469, 483, 496, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 588, 591, 592, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 694, 775, 776, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 952, 958, 965, 966, 971, 972, 976, 977, 982, 983, 984, 986, 989, 991, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "make_pipelin": [4, 31, 57, 85, 114, 118, 128, 141, 142, 160, 161, 166, 167, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 225, 226, 227, 235, 236, 238, 253, 263, 276, 285, 292, 300, 303, 306, 307, 308, 309, 310, 311, 340, 350, 380, 394, 397, 548, 657, 659, 831, 839, 863, 864, 866, 867, 868, 869, 878, 879, 880, 881, 883, 884, 952, 965, 972, 976, 977, 1007, 1014, 1017], "ordinalencod": [4, 118, 128, 167, 168, 196, 311, 362, 381, 400, 562, 815, 847, 852, 964, 972, 1012, 1013, 1016, 1017, 1018, 1019, 1020], "compos": [4, 5, 25, 68, 69, 70, 74, 85, 111, 118, 128, 163, 166, 167, 168, 196, 198, 214, 227, 236, 238, 307, 309, 310, 311, 357, 380, 382, 393, 394, 397, 403, 496, 593, 961, 1004], "columntransform": [4, 69, 70, 128, 166, 167, 168, 196, 214, 227, 236, 238, 307, 309, 310, 311, 360, 362, 379, 380, 447, 448, 610, 844, 951, 952, 983, 999, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ensembl": [4, 7, 10, 26, 27, 31, 55, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 160, 161, 167, 168, 169, 196, 218, 225, 233, 234, 236, 237, 253, 268, 274, 300, 306, 307, 308, 309, 311, 339, 350, 354, 357, 372, 373, 380, 381, 391, 393, 397, 402, 419, 485, 496, 613, 614, 616, 639, 780, 781, 805, 809, 840, 843, 852, 882, 886, 888, 889, 951, 962, 963, 968, 969, 978, 982, 983, 984, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "histgradientboostingregressor": [4, 7, 118, 121, 122, 125, 128, 160, 167, 196, 306, 307, 308, 309, 311, 372, 400, 541, 613, 614, 616, 952, 969, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "cross_valid": [4, 118, 128, 166, 198, 252, 259, 368, 380, 556, 800, 801, 962, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020], "categorical_column": [4, 118, 166, 168, 448], "ordinal_encod": [4, 118], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 56, 61, 68, 73, 75, 85, 88, 96, 97, 99, 101, 103, 104, 107, 118, 128, 132, 142, 154, 161, 163, 166, 167, 168, 172, 188, 196, 197, 204, 210, 212, 214, 218, 221, 225, 227, 230, 232, 238, 243, 253, 254, 257, 265, 276, 278, 284, 285, 286, 298, 299, 300, 301, 302, 303, 306, 307, 311, 326, 329, 339, 341, 350, 357, 362, 363, 364, 365, 368, 370, 373, 377, 381, 389, 391, 392, 393, 395, 398, 400, 401, 402, 403, 409, 413, 415, 419, 423, 424, 425, 427, 428, 430, 433, 445, 446, 447, 448, 449, 463, 464, 465, 466, 469, 470, 477, 484, 489, 490, 495, 496, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 538, 540, 542, 545, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 617, 619, 620, 621, 622, 623, 634, 639, 644, 654, 657, 665, 669, 670, 671, 672, 673, 675, 694, 733, 734, 765, 777, 780, 781, 791, 805, 808, 814, 823, 828, 831, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 878, 880, 883, 884, 907, 909, 951, 952, 954, 956, 958, 959, 962, 963, 966, 976, 977, 979, 982, 983, 984, 988, 993, 994, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "remaind": [4, 118, 166, 185, 196, 198, 214, 311, 334, 344, 394, 445, 448, 1004, 1011, 1012, 1013, 1016, 1017], "passthrough": [4, 71, 118, 166, 167, 196, 214, 311, 394, 445, 448, 548, 549, 838, 839, 972, 1013, 1015, 1018, 1019], "short": [4, 5, 118, 124, 187, 254, 294, 339, 368, 376, 397, 401, 405, 958, 959, 965, 1009, 1014, 1015, 1016, 1017, 1018, 1019], "easier": [4, 44, 61, 65, 81, 118, 175, 181, 227, 253, 254, 298, 326, 339, 350, 363, 368, 370, 373, 376, 379, 384, 395, 397, 449, 496, 876, 909, 957, 962, 969, 978, 983, 986, 997, 1013, 1018], "specifi": [4, 94, 118, 119, 149, 152, 154, 155, 156, 157, 185, 197, 204, 241, 264, 354, 355, 362, 366, 368, 370, 377, 380, 381, 387, 393, 394, 397, 398, 400, 402, 403, 405, 407, 419, 423, 427, 431, 433, 444, 445, 448, 450, 451, 453, 454, 455, 456, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 496, 512, 514, 518, 519, 521, 522, 527, 528, 533, 538, 540, 541, 542, 543, 545, 548, 549, 564, 565, 574, 575, 578, 583, 591, 592, 601, 612, 613, 614, 619, 624, 627, 628, 629, 632, 633, 634, 636, 637, 639, 640, 641, 642, 643, 644, 646, 649, 650, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 668, 672, 679, 680, 681, 683, 690, 692, 709, 710, 718, 734, 751, 759, 760, 763, 764, 767, 777, 779, 780, 781, 783, 784, 786, 790, 791, 794, 799, 800, 801, 802, 803, 804, 806, 810, 813, 814, 815, 817, 818, 819, 820, 824, 852, 854, 857, 858, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 910, 917, 946, 952, 958, 959, 961, 962, 965, 969, 970, 972, 975, 976, 977, 992, 996, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "next": [4, 7, 25, 59, 79, 117, 118, 122, 131, 155, 165, 169, 189, 193, 196, 226, 233, 237, 238, 243, 251, 262, 274, 303, 308, 315, 339, 344, 348, 350, 357, 366, 368, 370, 372, 390, 393, 394, 397, 400, 489, 490, 591, 615, 673, 679, 681, 683, 761, 775, 776, 805, 928, 951, 955, 961, 962, 972, 986, 1001, 1004, 1017, 1018], "verbose_feature_names_out": [4, 118, 166, 167, 168, 238, 309, 310, 311, 394, 445, 448, 1017], "categorical_featur": [4, 70, 118, 167, 308, 309, 310, 311, 373, 400, 542, 543, 613, 614, 969, 1012, 1016, 1019], "set_output": [4, 118, 163, 167, 224, 239, 303, 371, 415, 424, 425, 427, 428, 430, 445, 449, 463, 464, 465, 466, 477, 485, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 639, 669, 670, 805, 823, 828, 831, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 1019], "across": [4, 60, 66, 84, 134, 166, 185, 190, 218, 251, 253, 256, 276, 298, 303, 369, 370, 377, 381, 387, 392, 393, 397, 401, 405, 419, 422, 431, 433, 435, 438, 441, 443, 450, 453, 455, 469, 472, 473, 476, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 548, 549, 569, 572, 575, 583, 588, 589, 591, 592, 613, 614, 615, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 657, 659, 660, 666, 667, 670, 671, 672, 673, 674, 675, 676, 685, 686, 698, 711, 737, 768, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 824, 828, 835, 836, 837, 844, 848, 849, 856, 857, 859, 867, 870, 871, 873, 874, 878, 879, 880, 883, 886, 887, 914, 915, 933, 936, 951, 958, 960, 962, 972, 976, 978, 983, 986, 997, 1004, 1007, 1010, 1011, 1012, 1013, 1014], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 57, 60, 69, 74, 91, 94, 96, 97, 100, 102, 104, 112, 114, 118, 119, 120, 121, 128, 151, 154, 156, 157, 161, 176, 184, 185, 188, 193, 196, 197, 204, 205, 206, 214, 217, 218, 232, 234, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 259, 264, 267, 270, 276, 281, 286, 289, 293, 295, 298, 300, 303, 306, 318, 322, 326, 336, 339, 340, 341, 354, 363, 368, 370, 374, 375, 379, 394, 397, 401, 405, 489, 514, 578, 591, 592, 761, 852, 905, 910, 922, 962, 969, 977, 993], "cv_result": [4, 70, 254, 255, 257, 259, 791, 802, 962], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 57, 59, 69, 70, 71, 72, 73, 74, 77, 81, 85, 102, 108, 111, 117, 118, 120, 121, 124, 127, 128, 135, 136, 141, 142, 145, 160, 163, 165, 166, 167, 168, 169, 172, 187, 188, 191, 196, 198, 202, 204, 212, 214, 225, 230, 231, 234, 238, 245, 249, 254, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 274, 283, 284, 285, 292, 293, 294, 295, 300, 303, 306, 307, 308, 309, 314, 315, 317, 318, 326, 334, 339, 340, 344, 350, 363, 368, 370, 373, 380, 381, 387, 388, 390, 391, 392, 394, 396, 398, 400, 402, 410, 412, 414, 419, 425, 428, 430, 433, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 483, 485, 513, 517, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 573, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 590, 591, 592, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 722, 735, 736, 737, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 780, 781, 783, 791, 796, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 824, 825, 826, 828, 829, 830, 835, 836, 837, 839, 859, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 917, 951, 954, 958, 960, 965, 968, 970, 972, 976, 983, 991, 993, 995, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "neg_mean_absolute_error": [4, 128, 198, 962], "neg_root_mean_squared_error": [4, 962], "mae": [4, 128, 196, 198, 539, 546, 725, 887, 889, 962, 978, 1011, 1012, 1016, 1017], "test_neg_mean_absolute_error": [4, 198], "rmse": [4, 80, 730, 1015], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 57, 59, 60, 62, 66, 69, 70, 72, 73, 74, 79, 84, 85, 91, 94, 97, 102, 103, 105, 112, 115, 116, 117, 118, 120, 122, 134, 136, 141, 142, 144, 145, 148, 149, 151, 153, 157, 165, 167, 168, 169, 172, 180, 181, 182, 183, 187, 188, 191, 192, 196, 198, 199, 203, 204, 211, 212, 214, 218, 219, 222, 227, 229, 231, 234, 238, 244, 250, 254, 255, 256, 257, 259, 261, 264, 265, 269, 276, 280, 287, 289, 293, 294, 295, 300, 303, 306, 307, 308, 310, 314, 315, 318, 326, 339, 340, 341, 344, 348, 350, 354, 362, 363, 366, 369, 370, 376, 381, 387, 394, 397, 400, 401, 403, 445, 448, 449, 453, 459, 483, 493, 522, 525, 530, 531, 540, 541, 542, 543, 545, 546, 550, 551, 558, 564, 565, 569, 570, 572, 593, 598, 611, 627, 628, 630, 631, 633, 634, 635, 637, 641, 642, 643, 644, 647, 648, 657, 658, 665, 694, 698, 717, 773, 775, 776, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 849, 855, 859, 866, 876, 877, 878, 879, 880, 883, 891, 902, 922, 930, 952, 962, 963, 964, 965, 970, 978, 988, 992, 993, 995, 996, 997, 1004, 1006, 1012, 1013, 1015, 1019], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 57, 70, 72, 74, 85, 115, 116, 141, 145, 148, 149, 150, 152, 157, 165, 167, 168, 176, 180, 182, 188, 196, 198, 202, 211, 212, 214, 218, 229, 231, 254, 256, 257, 259, 262, 264, 267, 276, 292, 318, 339, 340, 341, 970, 993], "std": [4, 11, 12, 37, 46, 50, 54, 60, 65, 78, 80, 81, 95, 96, 97, 115, 117, 118, 128, 135, 157, 160, 161, 166, 176, 181, 205, 229, 254, 255, 256, 258, 259, 261, 264, 266, 270, 271, 317, 329, 340, 350, 381, 393, 397, 400, 496, 587, 590, 859, 869, 972, 996, 1012, 1016], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 57, 69, 74, 79, 84, 91, 94, 97, 99, 102, 104, 105, 111, 112, 115, 119, 130, 140, 145, 148, 152, 157, 167, 176, 192, 196, 197, 211, 213, 214, 217, 228, 229, 230, 232, 241, 243, 244, 254, 256, 259, 261, 262, 263, 265, 266, 276, 281, 295, 300, 302, 303, 308, 311, 315, 334, 348, 354, 362, 365, 366, 368, 372, 374, 377, 381, 384, 390, 391, 393, 396, 397, 398, 399, 400, 401, 403, 404, 426, 427, 428, 429, 431, 450, 452, 455, 459, 470, 496, 497, 498, 499, 504, 509, 519, 521, 522, 528, 538, 539, 540, 541, 544, 545, 546, 547, 569, 570, 571, 572, 588, 589, 595, 608, 630, 652, 660, 673, 677, 680, 687, 688, 735, 782, 785, 787, 792, 793, 796, 815, 819, 820, 824, 844, 870, 872, 886, 887, 888, 889, 913, 918, 919, 937, 941, 942, 951, 954, 956, 958, 959, 962, 963, 964, 965, 966, 968, 969, 972, 974, 976, 977, 978, 988, 995, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "044": [4, 6, 254, 731, 962], "003": 4, "068": [4, 256], "005": [4, 256, 260, 264, 281, 298, 340, 374], "quit": [4, 53, 56, 85, 112, 134, 145, 166, 167, 194, 214, 264, 309, 339, 354, 373, 380, 393, 401, 957, 959, 964, 986, 1012], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 57, 73, 80, 85, 104, 117, 120, 121, 149, 153, 160, 166, 185, 196, 197, 202, 211, 222, 225, 229, 234, 242, 244, 250, 256, 262, 271, 295, 303, 308, 314, 319, 326, 339, 340, 350, 354, 355, 356, 367, 369, 370, 371, 374, 379, 381, 387, 390, 391, 393, 395, 397, 398, 400, 401, 402, 403, 419, 421, 426, 515, 540, 542, 543, 571, 611, 621, 628, 629, 637, 639, 640, 642, 650, 661, 671, 675, 703, 711, 722, 744, 804, 872, 915, 951, 957, 958, 959, 962, 963, 965, 966, 967, 969, 970, 972, 976, 977, 978, 983, 986, 988, 992, 995, 997, 1010], "trial": [4, 261, 428, 430, 441, 652, 775, 776, 958, 1010], "without": [4, 5, 13, 24, 36, 42, 55, 66, 67, 74, 99, 120, 123, 125, 128, 141, 145, 155, 163, 165, 166, 167, 185, 204, 225, 229, 232, 235, 237, 250, 257, 261, 263, 277, 290, 298, 299, 303, 306, 334, 340, 356, 363, 364, 366, 368, 369, 370, 372, 373, 374, 377, 379, 380, 381, 387, 393, 394, 398, 400, 401, 402, 403, 416, 421, 423, 439, 450, 455, 477, 485, 496, 513, 515, 536, 537, 544, 560, 561, 592, 608, 615, 620, 640, 673, 681, 761, 780, 781, 782, 789, 791, 804, 805, 821, 828, 832, 838, 839, 842, 845, 848, 849, 851, 855, 856, 857, 859, 863, 878, 894, 930, 931, 951, 952, 956, 958, 959, 962, 965, 968, 972, 976, 977, 978, 982, 983, 988, 989, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "tune": [4, 44, 70, 99, 144, 148, 160, 167, 185, 201, 213, 221, 250, 261, 278, 299, 326, 339, 350, 354, 355, 356, 380, 381, 388, 392, 393, 397, 400, 402, 403, 433, 443, 540, 541, 575, 594, 595, 596, 598, 600, 601, 603, 604, 606, 624, 640, 671, 675, 835, 956, 957, 958, 959, 961, 962, 965, 966, 968, 976, 989, 999, 1004, 1018], "just": [4, 31, 69, 85, 94, 118, 145, 186, 193, 218, 230, 256, 263, 267, 276, 292, 326, 339, 340, 350, 363, 367, 368, 369, 370, 372, 373, 376, 379, 380, 381, 390, 393, 394, 397, 400, 402, 403, 405, 449, 514, 523, 527, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 560, 565, 591, 592, 627, 633, 638, 639, 641, 643, 647, 648, 649, 657, 658, 659, 828, 836, 837, 951, 958, 961, 962, 963, 966, 970, 972, 976, 983, 995, 1004, 1008, 1010, 1012, 1016], "had": [4, 9, 47, 121, 153, 298, 309, 350, 368, 369, 401, 404, 426, 952, 962, 986, 988, 1004, 1005, 1011, 1012, 1013, 1014, 1015, 1019], "explicit": [4, 163, 167, 172, 224, 239, 354, 355, 356, 367, 369, 379, 381, 382, 394, 401, 407, 453, 480, 482, 483, 522, 532, 533, 619, 620, 622, 657, 777, 778, 785, 823, 831, 839, 878, 883, 926, 930, 954, 956, 958, 962, 972, 978, 982, 1004, 1008, 1013, 1014, 1017], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 59, 64, 65, 69, 70, 85, 94, 96, 99, 108, 109, 110, 124, 140, 145, 148, 160, 161, 166, 167, 168, 172, 175, 191, 197, 198, 214, 229, 235, 254, 256, 257, 259, 265, 278, 298, 303, 309, 318, 326, 341, 348, 354, 356, 363, 366, 368, 369, 370, 371, 372, 376, 379, 381, 382, 383, 387, 391, 392, 393, 394, 397, 398, 400, 401, 403, 426, 428, 430, 431, 438, 445, 448, 474, 475, 489, 527, 548, 549, 550, 551, 588, 589, 597, 601, 602, 605, 613, 620, 645, 673, 748, 751, 754, 758, 759, 760, 761, 769, 777, 791, 798, 804, 843, 853, 857, 859, 868, 869, 875, 886, 887, 928, 951, 952, 958, 961, 962, 963, 965, 966, 967, 972, 977, 978, 981, 982, 985, 986, 988, 995, 996, 997, 1004, 1005, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "But": [4, 9, 53, 165, 197, 198, 256, 276, 298, 368, 379, 393, 396, 399, 400, 443, 726, 886, 887, 951, 962, 977, 983], "much": [4, 6, 7, 9, 19, 25, 39, 40, 79, 81, 91, 97, 104, 114, 121, 122, 128, 129, 130, 148, 160, 161, 166, 167, 168, 169, 172, 193, 194, 198, 229, 256, 258, 259, 262, 267, 294, 299, 303, 308, 309, 311, 326, 331, 339, 340, 350, 354, 356, 363, 368, 369, 370, 373, 376, 379, 380, 384, 392, 395, 396, 397, 398, 399, 400, 401, 402, 428, 429, 477, 515, 516, 517, 519, 540, 541, 542, 543, 639, 640, 647, 649, 657, 658, 659, 673, 759, 760, 780, 781, 795, 854, 871, 878, 951, 954, 957, 958, 959, 961, 962, 963, 965, 966, 968, 970, 974, 975, 977, 978, 983, 986, 992, 993, 995, 996, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "monoton": [4, 25, 107, 132, 163, 167, 214, 228, 307, 391, 542, 543, 616, 617, 675, 687, 855, 866, 880, 883, 959, 963, 972, 977, 1011, 1015, 1019], "relationship": [4, 110, 154, 165, 166, 175, 196, 198, 199, 263, 299, 381, 393, 395, 397, 403, 443, 617, 695, 959, 962, 964, 965, 969, 970, 995, 1009], "case": [4, 7, 8, 25, 27, 37, 49, 52, 56, 60, 65, 70, 71, 80, 85, 99, 102, 112, 114, 121, 122, 128, 142, 144, 145, 148, 155, 166, 167, 182, 185, 187, 196, 197, 198, 201, 204, 210, 212, 213, 214, 225, 229, 230, 231, 235, 246, 250, 253, 255, 256, 257, 259, 262, 263, 265, 276, 283, 294, 298, 300, 303, 306, 309, 339, 340, 341, 348, 350, 354, 355, 356, 362, 363, 366, 368, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 382, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 419, 422, 425, 426, 428, 432, 434, 444, 445, 448, 455, 477, 489, 490, 496, 520, 522, 523, 524, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 563, 569, 572, 574, 575, 578, 583, 587, 590, 591, 592, 606, 608, 609, 611, 613, 628, 629, 634, 637, 638, 639, 640, 642, 644, 647, 649, 650, 653, 655, 656, 657, 661, 663, 664, 665, 666, 667, 668, 680, 684, 689, 690, 693, 699, 701, 702, 703, 706, 708, 709, 714, 715, 718, 722, 723, 725, 726, 728, 730, 733, 734, 736, 743, 758, 761, 763, 765, 768, 772, 774, 776, 777, 780, 781, 783, 791, 795, 799, 800, 801, 802, 803, 804, 806, 808, 816, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 839, 846, 848, 849, 852, 853, 854, 857, 858, 859, 862, 868, 869, 870, 871, 878, 880, 883, 886, 887, 893, 894, 904, 915, 916, 930, 951, 952, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 968, 969, 972, 976, 977, 978, 982, 983, 985, 986, 988, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "usual": [4, 40, 77, 78, 80, 120, 121, 123, 128, 165, 167, 182, 196, 197, 250, 253, 256, 265, 266, 299, 309, 326, 350, 354, 355, 366, 368, 370, 376, 379, 380, 381, 390, 393, 394, 397, 398, 400, 401, 402, 431, 437, 519, 521, 523, 528, 540, 541, 588, 589, 611, 621, 639, 640, 647, 649, 657, 658, 659, 673, 706, 738, 783, 803, 807, 878, 915, 951, 952, 954, 957, 958, 959, 961, 962, 963, 966, 967, 968, 969, 972, 976, 977, 978, 988, 994, 995, 1019], "hot": [4, 70, 114, 116, 128, 166, 196, 265, 299, 300, 308, 326, 381, 400, 401, 532, 547, 562, 629, 639, 640, 650, 661, 842, 844, 846, 847, 850, 852, 853, 958, 972, 1012, 1018, 1019], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 56, 57, 59, 66, 72, 79, 85, 90, 95, 112, 114, 116, 121, 122, 124, 126, 141, 142, 145, 148, 150, 155, 160, 161, 166, 167, 184, 185, 196, 197, 200, 201, 204, 213, 214, 217, 219, 222, 225, 226, 228, 229, 230, 238, 246, 253, 256, 257, 263, 271, 274, 276, 286, 292, 294, 295, 300, 302, 303, 306, 307, 308, 309, 310, 311, 317, 319, 326, 328, 334, 339, 340, 341, 344, 345, 348, 350, 354, 356, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 387, 389, 390, 391, 392, 393, 394, 397, 398, 400, 401, 402, 403, 404, 409, 414, 419, 422, 424, 425, 426, 427, 428, 430, 431, 432, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 453, 455, 463, 464, 465, 466, 470, 477, 479, 484, 495, 496, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 562, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 578, 583, 588, 589, 590, 591, 592, 595, 600, 603, 604, 608, 609, 610, 611, 612, 613, 614, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 673, 674, 676, 680, 682, 685, 687, 688, 709, 710, 718, 721, 722, 743, 749, 758, 763, 764, 767, 768, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 791, 799, 800, 801, 802, 803, 804, 806, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 845, 848, 849, 851, 852, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 898, 904, 925, 946, 951, 952, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 981, 985, 986, 988, 995, 996, 997, 1004, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "consist": [4, 7, 26, 32, 37, 55, 56, 69, 79, 84, 89, 91, 94, 118, 124, 131, 145, 151, 153, 156, 161, 196, 214, 231, 262, 265, 294, 303, 306, 309, 334, 340, 350, 354, 361, 363, 365, 368, 370, 374, 375, 376, 377, 380, 381, 382, 391, 393, 395, 399, 400, 401, 403, 411, 412, 414, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 471, 478, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 572, 592, 608, 609, 610, 611, 616, 619, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 655, 658, 659, 660, 668, 669, 670, 671, 672, 680, 681, 715, 775, 776, 784, 807, 808, 809, 811, 812, 813, 814, 822, 823, 825, 827, 830, 831, 837, 842, 843, 844, 846, 850, 851, 854, 855, 857, 858, 870, 871, 874, 878, 879, 881, 882, 884, 887, 889, 898, 900, 921, 933, 936, 951, 954, 955, 956, 958, 959, 961, 962, 963, 965, 966, 972, 975, 977, 978, 981, 982, 983, 986, 988, 995, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 55, 57, 60, 70, 71, 78, 81, 85, 96, 99, 100, 125, 145, 148, 149, 150, 153, 154, 155, 157, 163, 167, 172, 176, 177, 184, 196, 198, 210, 211, 212, 214, 216, 219, 223, 225, 231, 246, 253, 256, 257, 258, 263, 293, 294, 295, 297, 298, 304, 307, 310, 319, 321, 323, 326, 337, 350, 353, 354, 360, 361, 362, 365, 368, 373, 377, 379, 380, 381, 392, 393, 394, 398, 400, 402, 403, 428, 431, 432, 438, 445, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 482, 491, 495, 496, 505, 515, 519, 521, 522, 528, 530, 531, 542, 543, 563, 571, 572, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 613, 622, 625, 626, 627, 628, 630, 633, 639, 640, 641, 642, 643, 653, 655, 657, 658, 659, 662, 668, 669, 670, 671, 673, 675, 680, 684, 697, 721, 727, 737, 739, 749, 755, 757, 783, 791, 794, 805, 806, 807, 819, 820, 821, 836, 837, 840, 843, 848, 849, 851, 854, 856, 857, 859, 863, 864, 865, 867, 868, 870, 871, 878, 879, 880, 881, 882, 883, 884, 938, 939, 940, 951, 954, 955, 958, 962, 963, 964, 965, 966, 970, 976, 977, 983, 986, 988, 995, 996, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 56, 57, 63, 69, 70, 71, 91, 94, 96, 99, 102, 104, 110, 112, 115, 118, 119, 121, 122, 126, 145, 148, 166, 167, 169, 182, 184, 185, 190, 196, 197, 198, 204, 214, 234, 235, 246, 251, 252, 253, 254, 256, 257, 259, 261, 262, 264, 269, 276, 281, 294, 298, 299, 301, 303, 306, 308, 317, 326, 334, 339, 340, 341, 348, 350, 354, 355, 356, 362, 363, 365, 367, 368, 370, 372, 374, 377, 379, 380, 381, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 413, 416, 420, 421, 431, 437, 446, 450, 451, 452, 453, 454, 455, 456, 457, 459, 474, 476, 477, 479, 485, 489, 490, 512, 513, 517, 518, 519, 520, 521, 524, 528, 530, 532, 533, 534, 535, 538, 540, 541, 542, 543, 545, 546, 548, 549, 570, 571, 583, 584, 587, 591, 592, 594, 603, 608, 609, 610, 613, 614, 627, 630, 633, 634, 636, 639, 640, 644, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 665, 668, 680, 685, 686, 693, 694, 696, 698, 706, 711, 712, 716, 735, 736, 737, 758, 759, 760, 766, 768, 770, 772, 773, 775, 776, 777, 778, 780, 781, 783, 785, 786, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 821, 822, 823, 827, 829, 830, 831, 842, 843, 844, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 867, 878, 879, 886, 888, 900, 904, 915, 923, 928, 933, 936, 937, 947, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 976, 977, 978, 983, 992, 997, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "minmaxscal": [4, 5, 71, 141, 172, 218, 293, 308, 356, 394, 445, 864, 952, 972, 1006, 1009, 1012, 1014, 1015, 1016, 1020], "although": [4, 9, 25, 115, 128, 165, 193, 214, 225, 243, 274, 350, 356, 370, 381, 393, 394, 398, 401, 477, 794, 797, 850, 961, 963, 964, 965, 968, 978, 988, 995, 996, 997, 1004, 1012, 1019], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 56, 69, 71, 72, 85, 105, 114, 117, 123, 128, 145, 154, 166, 167, 193, 196, 202, 214, 217, 218, 219, 222, 225, 228, 229, 230, 232, 243, 244, 251, 256, 258, 259, 263, 265, 266, 274, 276, 289, 298, 300, 302, 309, 310, 317, 318, 324, 326, 334, 336, 339, 340, 341, 354, 362, 366, 368, 369, 370, 372, 376, 380, 381, 387, 391, 392, 393, 394, 397, 398, 400, 401, 402, 403, 416, 422, 424, 428, 430, 431, 435, 437, 448, 454, 460, 468, 480, 484, 489, 508, 516, 518, 519, 520, 522, 525, 527, 530, 531, 538, 539, 540, 541, 542, 543, 545, 546, 562, 563, 564, 569, 570, 572, 574, 575, 578, 583, 587, 591, 613, 619, 630, 631, 632, 635, 636, 637, 640, 652, 663, 664, 679, 681, 683, 688, 708, 709, 710, 714, 716, 718, 723, 726, 758, 763, 764, 767, 768, 772, 777, 780, 781, 791, 836, 840, 841, 842, 844, 846, 848, 851, 852, 853, 856, 859, 867, 870, 871, 875, 878, 879, 886, 887, 888, 889, 893, 898, 902, 915, 918, 919, 928, 930, 946, 951, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 970, 972, 976, 977, 978, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 59, 61, 65, 70, 72, 74, 80, 85, 94, 97, 99, 101, 105, 112, 113, 114, 115, 118, 121, 122, 124, 126, 127, 137, 144, 145, 148, 150, 152, 156, 160, 166, 167, 168, 169, 176, 181, 182, 185, 186, 191, 197, 198, 200, 204, 210, 211, 214, 217, 218, 221, 225, 228, 230, 235, 241, 246, 247, 250, 251, 254, 256, 257, 259, 262, 263, 264, 265, 267, 268, 271, 276, 278, 282, 292, 293, 294, 298, 299, 300, 303, 306, 308, 310, 311, 314, 317, 319, 326, 330, 331, 334, 339, 341, 346, 347, 354, 355, 356, 362, 363, 365, 368, 370, 372, 373, 374, 376, 379, 380, 381, 382, 387, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 416, 422, 423, 425, 427, 428, 431, 432, 433, 434, 435, 436, 438, 440, 443, 445, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 470, 489, 490, 492, 494, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 560, 561, 562, 563, 565, 569, 570, 572, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 617, 621, 624, 633, 634, 639, 645, 646, 647, 648, 657, 658, 659, 667, 670, 671, 672, 673, 674, 675, 676, 689, 691, 693, 698, 705, 706, 708, 709, 710, 711, 712, 716, 717, 718, 734, 736, 737, 744, 751, 754, 758, 759, 760, 761, 763, 764, 765, 767, 771, 772, 775, 776, 777, 779, 780, 781, 782, 787, 791, 792, 793, 794, 796, 797, 800, 806, 807, 808, 810, 811, 812, 813, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 843, 844, 852, 853, 856, 857, 867, 871, 875, 878, 880, 883, 886, 887, 888, 889, 890, 891, 898, 899, 914, 915, 917, 921, 927, 933, 936, 952, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 976, 977, 978, 982, 983, 985, 988, 992, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 70, 81, 85, 114, 116, 121, 145, 149, 152, 155, 166, 167, 169, 176, 182, 189, 196, 202, 204, 214, 231, 242, 253, 256, 257, 262, 274, 276, 293, 294, 295, 298, 302, 303, 316, 326, 334, 339, 340, 341, 344, 350, 354, 355, 363, 370, 373, 376, 379, 380, 381, 387, 390, 391, 393, 397, 398, 399, 400, 401, 403, 406, 414, 428, 429, 442, 446, 456, 463, 464, 465, 515, 517, 533, 535, 537, 539, 541, 543, 546, 549, 551, 569, 572, 588, 589, 592, 613, 614, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 653, 654, 657, 658, 659, 660, 661, 670, 680, 690, 693, 694, 702, 703, 704, 726, 743, 765, 768, 772, 777, 791, 803, 807, 812, 813, 822, 825, 827, 829, 830, 831, 837, 848, 849, 857, 859, 863, 864, 866, 867, 868, 869, 879, 881, 884, 887, 889, 926, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 965, 967, 969, 972, 977, 978, 986, 996, 1010, 1011, 1013, 1014, 1015, 1016, 1018], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 56, 57, 63, 67, 71, 80, 83, 85, 86, 97, 102, 104, 107, 109, 110, 112, 117, 118, 121, 126, 128, 132, 145, 152, 160, 161, 163, 166, 168, 169, 174, 178, 180, 184, 185, 191, 193, 196, 199, 202, 204, 206, 213, 214, 215, 217, 218, 221, 224, 227, 230, 235, 237, 239, 243, 244, 249, 251, 253, 261, 263, 265, 267, 272, 277, 281, 285, 286, 290, 291, 296, 297, 299, 303, 304, 308, 339, 340, 341, 348, 350, 356, 363, 365, 368, 370, 390, 391, 393, 395, 396, 397, 398, 400, 402, 403, 422, 423, 424, 426, 427, 429, 430, 431, 433, 439, 444, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 471, 483, 485, 493, 495, 503, 505, 509, 512, 518, 532, 533, 542, 543, 544, 546, 552, 620, 625, 626, 634, 636, 638, 639, 644, 647, 649, 657, 658, 665, 676, 686, 693, 696, 711, 718, 723, 766, 776, 777, 791, 805, 812, 821, 825, 828, 832, 836, 839, 840, 847, 848, 849, 851, 854, 855, 856, 857, 859, 864, 867, 880, 882, 883, 951, 954, 955, 956, 958, 959, 961, 962, 963, 964, 965, 966, 968, 972, 973, 976, 977, 978, 981, 982, 995, 996, 1004, 1006, 1011, 1012, 1017], "onehotencod": [4, 70, 114, 118, 128, 166, 167, 196, 214, 227, 236, 238, 307, 309, 362, 381, 394, 400, 447, 448, 547, 562, 563, 842, 846, 847, 850, 853, 972, 1005, 1008, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 70, 72, 74, 85, 114, 128, 130, 131, 134, 136, 144, 145, 148, 160, 163, 165, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 225, 226, 227, 228, 233, 236, 238, 252, 259, 264, 265, 269, 270, 274, 295, 299, 300, 303, 306, 307, 308, 309, 310, 318, 339, 350, 354, 356, 357, 367, 368, 370, 374, 376, 377, 380, 381, 394, 400, 420, 446, 518, 520, 523, 524, 526, 527, 529, 548, 549, 550, 551, 578, 612, 613, 615, 616, 619, 621, 622, 623, 624, 681, 682, 768, 791, 800, 801, 802, 810, 811, 812, 813, 837, 854, 858, 878, 879, 882, 885, 910, 954, 957, 958, 962, 963, 968, 970, 972, 976, 992, 993, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ridgecv": [4, 74, 128, 145, 166, 233, 381, 400, 549, 624, 653, 656, 958, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 137, 140, 141, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 345, 346, 347, 348, 350, 354, 361, 362, 363, 366, 368, 369, 370, 371, 372, 374, 376, 377, 379, 380, 381, 384, 386, 387, 389, 390, 393, 394, 397, 398, 399, 400, 401, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 466, 471, 474, 475, 477, 484, 487, 489, 490, 512, 515, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 550, 551, 562, 563, 569, 570, 572, 608, 609, 610, 611, 612, 613, 614, 624, 627, 628, 630, 633, 634, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 653, 657, 658, 659, 665, 669, 672, 673, 674, 676, 680, 683, 684, 687, 688, 690, 693, 695, 706, 707, 714, 715, 718, 719, 734, 736, 753, 759, 761, 762, 763, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 842, 843, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 880, 881, 883, 884, 886, 901, 913, 915, 919, 920, 921, 924, 925, 931, 933, 936, 949, 951, 952, 957, 958, 960, 962, 963, 965, 968, 972, 974, 977, 981, 983, 985, 988, 991, 992, 993, 995, 996, 997, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 137, 140, 141, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 345, 346, 347, 348, 350, 354, 362, 363, 368, 370, 373, 374, 377, 379, 381, 390, 393, 394, 397, 398, 399, 400, 401, 403, 406, 408, 411, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 466, 477, 478, 489, 490, 501, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 538, 539, 540, 541, 542, 544, 545, 546, 547, 550, 551, 562, 563, 566, 567, 569, 570, 574, 575, 578, 587, 590, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 652, 653, 655, 656, 657, 658, 659, 662, 663, 664, 665, 672, 673, 676, 683, 684, 687, 688, 690, 693, 695, 696, 706, 707, 714, 715, 718, 719, 721, 734, 736, 743, 749, 753, 758, 761, 762, 763, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 805, 806, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 830, 831, 835, 836, 843, 844, 846, 852, 853, 854, 855, 856, 858, 859, 866, 867, 870, 871, 873, 874, 875, 878, 880, 881, 883, 884, 886, 887, 888, 889, 896, 898, 899, 901, 903, 904, 913, 915, 920, 924, 925, 927, 931, 933, 936, 938, 939, 940, 951, 952, 957, 958, 960, 962, 963, 965, 966, 968, 972, 973, 974, 976, 977, 978, 988, 992, 993, 995, 996, 997, 1005, 1007, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "one_hot_encod": [4, 118], "handle_unknown": [4, 70, 114, 118, 128, 167, 168, 227, 236, 238, 307, 310, 852, 853, 972, 1008, 1012, 1016, 1017], "ignor": [4, 6, 8, 17, 44, 49, 61, 70, 111, 114, 118, 125, 128, 167, 184, 188, 196, 205, 211, 227, 236, 238, 247, 293, 294, 303, 307, 310, 331, 340, 345, 368, 370, 372, 374, 381, 384, 393, 394, 400, 401, 411, 412, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 442, 445, 448, 450, 451, 452, 453, 454, 455, 456, 457, 464, 465, 469, 484, 489, 490, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 538, 539, 540, 541, 544, 545, 546, 547, 560, 562, 563, 564, 569, 570, 571, 572, 583, 584, 608, 609, 610, 611, 613, 614, 616, 620, 624, 630, 631, 632, 635, 636, 637, 639, 645, 646, 657, 658, 659, 669, 670, 671, 672, 673, 688, 694, 695, 706, 709, 710, 718, 735, 736, 743, 749, 754, 758, 763, 764, 767, 768, 775, 776, 778, 779, 780, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 823, 824, 825, 827, 828, 831, 838, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 912, 937, 958, 959, 962, 964, 968, 972, 977, 993, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "sparse_output": [4, 118, 238, 310, 547, 846, 850, 852, 862, 972, 1019], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 55, 59, 64, 74, 81, 85, 94, 96, 97, 99, 100, 101, 103, 104, 109, 111, 112, 117, 121, 124, 125, 127, 128, 129, 145, 148, 151, 153, 154, 155, 156, 157, 160, 161, 166, 175, 176, 177, 178, 180, 181, 182, 184, 185, 190, 191, 193, 194, 196, 197, 198, 200, 201, 205, 208, 209, 214, 217, 218, 221, 230, 231, 237, 241, 256, 257, 258, 259, 260, 263, 264, 266, 268, 269, 271, 274, 276, 279, 281, 284, 286, 292, 294, 298, 299, 300, 301, 303, 307, 309, 310, 316, 318, 323, 324, 327, 328, 331, 335, 336, 339, 354, 363, 370, 374, 379, 395, 396, 398, 400, 402, 403, 405, 452, 453, 459, 508, 512, 514, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 541, 576, 577, 579, 592, 594, 596, 597, 604, 612, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 668, 703, 728, 814, 815, 816, 818, 836, 837, 874, 886, 887, 888, 889, 951, 957, 958, 962, 964, 966, 970, 975, 976, 977, 978, 992, 995, 997, 1001, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1018, 1019], "logspac": [4, 12, 72, 77, 102, 134, 135, 145, 149, 154, 166, 189, 200, 201, 229, 231, 245, 257, 269, 271, 280, 292, 300, 303, 326, 334, 951, 957, 958, 992, 993, 995], "naive_linear_pipelin": 4, "142": [4, 57, 400], "014": [4, 340, 374], "184": [4, 196, 253, 272, 295, 374, 995], "020": [4, 970], "three": [4, 7, 26, 40, 41, 46, 57, 77, 89, 90, 109, 114, 115, 118, 120, 129, 130, 131, 142, 156, 166, 188, 193, 196, 198, 205, 207, 231, 241, 244, 307, 330, 355, 361, 365, 372, 384, 390, 393, 397, 398, 399, 401, 432, 443, 479, 690, 917, 955, 957, 958, 959, 962, 965, 972, 976, 977, 981, 988, 996, 1004], "higher": [4, 56, 79, 97, 102, 112, 114, 121, 124, 148, 150, 155, 156, 166, 167, 168, 172, 196, 197, 214, 221, 222, 247, 250, 254, 256, 259, 270, 281, 303, 326, 339, 340, 341, 350, 354, 363, 366, 370, 390, 393, 395, 400, 402, 403, 404, 426, 429, 430, 452, 459, 490, 513, 520, 524, 529, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 554, 569, 572, 588, 589, 600, 608, 612, 616, 618, 627, 628, 633, 634, 641, 642, 643, 644, 657, 659, 660, 685, 704, 708, 732, 765, 775, 777, 780, 781, 783, 791, 798, 803, 806, 825, 828, 854, 870, 871, 872, 880, 881, 882, 883, 884, 891, 954, 958, 959, 961, 962, 965, 969, 972, 976, 977, 995, 997, 1005, 1010, 1012, 1019], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 55, 57, 73, 74, 94, 96, 97, 104, 126, 141, 142, 148, 150, 152, 153, 160, 161, 167, 172, 184, 185, 217, 218, 219, 221, 222, 229, 230, 231, 247, 253, 259, 284, 295, 299, 303, 315, 332, 339, 341, 350, 363, 365, 367, 368, 370, 372, 373, 379, 381, 387, 390, 394, 397, 398, 400, 401, 403, 404, 405, 406, 416, 423, 425, 426, 427, 428, 431, 440, 444, 445, 446, 456, 463, 464, 465, 474, 475, 476, 482, 500, 512, 515, 516, 518, 519, 520, 521, 522, 524, 525, 534, 535, 536, 537, 540, 542, 543, 544, 546, 548, 549, 550, 551, 554, 557, 562, 565, 575, 588, 589, 595, 611, 613, 619, 622, 623, 624, 630, 652, 673, 677, 682, 708, 743, 749, 804, 825, 839, 843, 844, 847, 848, 852, 853, 855, 856, 857, 859, 867, 870, 871, 872, 875, 880, 883, 896, 898, 899, 903, 904, 933, 936, 955, 956, 958, 959, 961, 962, 965, 968, 973, 974, 975, 976, 979, 982, 986, 988, 997, 1007, 1008, 1010, 1012, 1014, 1016, 1018], "mere": [4, 256, 381, 806, 976], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 57, 74, 89, 94, 97, 111, 117, 120, 121, 126, 137, 150, 152, 153, 154, 161, 166, 178, 184, 185, 191, 198, 199, 202, 210, 218, 229, 230, 232, 274, 282, 283, 289, 292, 294, 298, 300, 301, 303, 319, 325, 332, 335, 377, 393, 396, 398, 463, 464, 465, 466, 493, 515, 516, 519, 521, 522, 530, 531, 544, 608, 612, 613, 635, 636, 637, 638, 663, 664, 685, 721, 737, 760, 780, 781, 828, 836, 837, 849, 858, 864, 915, 927, 958, 962, 965, 972, 1010, 1013, 1015, 1016, 1019], "properli": [4, 25, 125, 153, 251, 306, 356, 366, 368, 372, 376, 384, 399, 878, 879, 880, 881, 882, 883, 884, 951, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "automat": [4, 8, 12, 46, 62, 64, 70, 102, 134, 144, 175, 199, 241, 242, 254, 257, 298, 307, 311, 318, 328, 355, 357, 363, 366, 368, 370, 372, 376, 381, 384, 389, 393, 394, 395, 398, 400, 401, 402, 415, 431, 433, 437, 443, 445, 446, 448, 477, 480, 496, 522, 530, 532, 538, 542, 545, 569, 572, 575, 583, 624, 626, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 647, 648, 649, 653, 655, 656, 657, 659, 662, 665, 668, 669, 672, 676, 779, 794, 797, 805, 815, 836, 837, 840, 841, 843, 852, 853, 870, 871, 878, 880, 883, 886, 888, 892, 904, 933, 936, 951, 953, 956, 961, 966, 972, 976, 978, 982, 983, 992, 1004, 1007, 1008, 1009, 1015, 1018, 1019], "term": [4, 13, 14, 25, 32, 57, 99, 112, 118, 121, 153, 165, 184, 185, 196, 198, 200, 210, 213, 214, 254, 258, 276, 292, 309, 334, 339, 341, 356, 357, 368, 370, 372, 379, 387, 392, 393, 395, 397, 398, 400, 403, 425, 428, 430, 433, 440, 443, 505, 516, 519, 521, 525, 528, 530, 569, 570, 571, 572, 585, 588, 589, 613, 614, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 659, 661, 668, 676, 836, 837, 854, 858, 860, 878, 879, 880, 881, 882, 883, 884, 951, 953, 956, 957, 958, 959, 962, 963, 964, 966, 967, 972, 976, 977, 988, 997, 1012, 1018, 1019], "raw": [4, 12, 14, 37, 80, 96, 128, 153, 166, 172, 295, 316, 341, 354, 363, 376, 381, 391, 392, 393, 395, 398, 401, 450, 455, 482, 483, 484, 540, 541, 542, 544, 563, 569, 570, 571, 572, 615, 658, 671, 675, 686, 766, 825, 882, 959, 962, 966, 968, 969, 972, 975, 994, 996, 1005, 1009, 1012, 1015], "recogn": [4, 29, 35, 85, 116, 163, 197, 309, 374, 393, 401, 483, 678, 694, 805, 883, 962, 988], "increas": [4, 7, 14, 26, 37, 43, 56, 57, 60, 74, 97, 110, 112, 117, 125, 141, 148, 152, 153, 154, 157, 166, 167, 172, 176, 178, 187, 196, 197, 198, 200, 214, 222, 229, 243, 256, 257, 258, 263, 269, 292, 299, 300, 303, 308, 315, 326, 334, 340, 341, 344, 354, 355, 356, 367, 376, 377, 391, 393, 395, 398, 400, 401, 404, 422, 426, 433, 444, 459, 513, 517, 534, 535, 540, 541, 542, 543, 548, 549, 569, 572, 608, 616, 617, 618, 626, 631, 632, 635, 636, 637, 639, 640, 647, 649, 657, 658, 659, 663, 664, 666, 667, 673, 687, 688, 693, 762, 769, 780, 781, 808, 827, 829, 830, 831, 834, 836, 837, 878, 879, 915, 951, 953, 957, 958, 959, 961, 962, 965, 976, 977, 978, 986, 1004, 1006, 1009, 1013, 1015, 1016, 1019], "strong": [4, 163, 165, 166, 174, 189, 193, 200, 202, 215, 231, 392, 398, 400, 403, 505, 630, 653, 955, 956, 958, 959, 961, 969, 977, 995], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 56, 59, 74, 85, 94, 98, 121, 144, 148, 155, 165, 166, 167, 168, 196, 198, 210, 217, 219, 220, 221, 225, 231, 247, 253, 256, 259, 262, 263, 264, 274, 276, 298, 309, 325, 334, 340, 341, 350, 354, 360, 362, 364, 366, 367, 368, 370, 373, 374, 377, 379, 381, 387, 390, 391, 393, 396, 397, 398, 400, 401, 402, 403, 404, 422, 423, 425, 426, 427, 431, 433, 435, 436, 484, 489, 490, 517, 563, 570, 571, 572, 591, 658, 673, 676, 684, 686, 696, 700, 705, 708, 709, 711, 714, 718, 720, 735, 740, 741, 766, 770, 771, 774, 775, 776, 801, 806, 851, 871, 874, 878, 879, 880, 881, 899, 951, 954, 955, 957, 958, 959, 961, 963, 965, 966, 968, 969, 972, 974, 975, 976, 977, 978, 982, 983, 988, 996, 999, 1004, 1008, 1009, 1010, 1012, 1016, 1017], "magnitud": [4, 104, 111, 149, 161, 166, 213, 261, 298, 303, 309, 354, 363, 374, 393, 400, 403, 594, 633, 685, 859, 958, 962, 966, 972, 976, 978, 1006, 1013], "discret": [4, 46, 104, 107, 132, 147, 158, 163, 167, 196, 214, 297, 301, 304, 356, 360, 363, 364, 372, 380, 381, 393, 398, 400, 401, 403, 420, 421, 429, 433, 441, 442, 443, 473, 495, 496, 501, 503, 534, 540, 552, 569, 570, 573, 576, 577, 580, 581, 588, 589, 591, 592, 593, 597, 598, 599, 638, 639, 722, 774, 777, 788, 805, 814, 815, 818, 840, 844, 852, 853, 856, 859, 867, 878, 883, 886, 887, 925, 951, 958, 959, 960, 962, 963, 965, 978, 982, 988, 999, 1006, 1009, 1017, 1018, 1019], "manner": [4, 74, 94, 142, 167, 172, 243, 310, 311, 355, 368, 374, 393, 398, 400, 401, 690, 819, 820, 951, 962, 978, 1007, 1014], "uniqu": [4, 16, 24, 30, 42, 47, 48, 56, 57, 62, 66, 115, 116, 122, 123, 166, 168, 211, 214, 243, 265, 285, 317, 339, 340, 341, 362, 370, 377, 381, 393, 394, 397, 400, 401, 422, 431, 435, 437, 445, 448, 477, 530, 531, 532, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 591, 614, 615, 616, 647, 649, 657, 678, 690, 734, 762, 777, 779, 791, 802, 807, 808, 811, 817, 826, 831, 836, 850, 852, 853, 862, 878, 880, 886, 887, 888, 889, 903, 915, 925, 926, 958, 963, 986, 995, 1012, 1015, 1016, 1018, 1019, 1020], "decid": [4, 11, 56, 59, 70, 247, 253, 256, 263, 363, 368, 382, 401, 403, 431, 438, 540, 541, 616, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 652, 662, 665, 775, 821, 822, 823, 825, 827, 829, 830, 831, 842, 961, 968, 986, 1017], "therebi": [4, 166, 397, 400, 954, 1014], "assumpt": [4, 9, 25, 27, 36, 67, 77, 78, 97, 153, 163, 165, 196, 225, 298, 374, 379, 380, 383, 391, 392, 393, 395, 397, 398, 401, 403, 428, 432, 434, 469, 484, 493, 513, 515, 522, 631, 635, 776, 777, 780, 781, 791, 816, 870, 871, 956, 958, 962, 963, 964, 965, 967, 968, 969, 972, 975, 978, 1011, 1017], "impli": [4, 148, 339, 340, 341, 398, 400, 403, 455, 554, 563, 591, 592, 603, 715, 902, 958, 959, 997, 1015], "give": [4, 12, 13, 24, 25, 39, 44, 49, 59, 61, 63, 69, 70, 74, 96, 120, 148, 153, 157, 160, 166, 167, 185, 187, 193, 196, 197, 198, 225, 247, 253, 258, 265, 278, 282, 285, 295, 309, 310, 318, 354, 356, 363, 365, 367, 368, 370, 374, 376, 379, 380, 381, 382, 387, 390, 391, 392, 393, 394, 395, 398, 400, 401, 405, 416, 428, 430, 432, 440, 453, 477, 480, 484, 514, 519, 530, 531, 532, 533, 538, 539, 545, 546, 547, 574, 575, 578, 588, 589, 619, 628, 642, 646, 657, 701, 716, 719, 772, 777, 780, 781, 791, 800, 801, 802, 804, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 856, 857, 859, 867, 958, 962, 965, 966, 967, 969, 970, 972, 976, 977, 978, 982, 986, 988, 990, 995, 996, 997, 1004, 1008, 1011, 1012, 1014, 1015, 1016, 1018], "lot": [4, 81, 166, 363, 368, 369, 370, 376, 398, 400, 780, 781, 870, 871, 951, 974, 976, 977, 982, 983, 986, 996, 997, 1004, 1009, 1011, 1012, 1013, 1014, 1016], "addit": [4, 5, 7, 12, 13, 14, 65, 70, 81, 94, 97, 109, 113, 115, 118, 119, 144, 153, 154, 155, 161, 166, 167, 175, 180, 185, 197, 198, 221, 235, 258, 265, 270, 274, 298, 307, 308, 316, 341, 346, 350, 354, 355, 360, 361, 362, 363, 364, 366, 367, 368, 370, 373, 374, 376, 379, 380, 382, 384, 387, 392, 393, 395, 397, 398, 401, 402, 403, 404, 415, 423, 424, 426, 427, 431, 438, 450, 455, 477, 484, 513, 515, 517, 518, 520, 522, 523, 524, 530, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 593, 600, 609, 611, 612, 616, 619, 620, 621, 622, 623, 624, 625, 626, 651, 668, 669, 673, 679, 680, 683, 722, 738, 739, 768, 775, 776, 783, 808, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 860, 870, 871, 878, 879, 909, 915, 930, 951, 956, 958, 962, 963, 965, 966, 969, 972, 974, 975, 976, 977, 978, 982, 988, 999, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "level": [4, 9, 11, 12, 16, 27, 41, 53, 94, 114, 117, 137, 145, 147, 152, 153, 155, 158, 163, 166, 167, 207, 208, 209, 210, 211, 214, 225, 229, 230, 245, 256, 259, 265, 266, 282, 289, 324, 325, 327, 328, 330, 332, 340, 348, 354, 363, 365, 366, 368, 374, 381, 383, 384, 391, 398, 401, 407, 435, 474, 475, 484, 502, 512, 517, 518, 528, 542, 543, 548, 549, 592, 603, 606, 647, 648, 649, 657, 658, 659, 668, 671, 673, 675, 697, 703, 708, 765, 800, 801, 802, 804, 807, 808, 835, 836, 837, 891, 951, 958, 962, 963, 965, 970, 976, 978, 982, 983, 997, 1007, 1015, 1018, 1019], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 178, 215], "011": [4, 40, 67, 264, 276, 374], "131": [4, 13, 55, 109, 374, 962, 1005], "rate": [4, 108, 113, 118, 140, 167, 196, 203, 214, 229, 234, 253, 256, 263, 265, 266, 293, 294, 295, 356, 368, 393, 394, 398, 402, 447, 517, 534, 535, 540, 541, 542, 543, 573, 576, 577, 579, 580, 581, 587, 625, 626, 649, 657, 658, 659, 673, 679, 683, 707, 762, 769, 835, 836, 837, 872, 951, 958, 959, 962, 965, 966, 976, 978, 986, 1008, 1012, 1013], "better": [4, 5, 9, 19, 24, 31, 50, 73, 74, 77, 78, 79, 80, 85, 89, 94, 97, 112, 120, 121, 128, 140, 152, 153, 154, 156, 157, 160, 168, 176, 182, 185, 196, 197, 198, 204, 211, 213, 214, 221, 230, 231, 246, 250, 256, 258, 259, 262, 265, 266, 295, 302, 303, 310, 311, 326, 339, 340, 341, 344, 350, 354, 363, 367, 368, 369, 370, 372, 373, 374, 376, 381, 383, 387, 391, 393, 395, 397, 398, 399, 400, 401, 403, 430, 431, 519, 521, 528, 540, 541, 542, 543, 588, 589, 611, 652, 658, 673, 690, 705, 714, 719, 722, 743, 776, 804, 814, 815, 816, 817, 818, 819, 820, 825, 836, 837, 856, 857, 867, 870, 871, 878, 879, 930, 951, 952, 954, 955, 956, 958, 959, 961, 962, 964, 965, 966, 970, 972, 975, 976, 978, 983, 985, 986, 990, 992, 997, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "confirm": [4, 85, 112, 118, 121, 168, 196, 198, 259, 262, 265, 303, 341, 372, 951, 972, 1012], "progress": [4, 7, 8, 94, 131, 145, 161, 189, 281, 310, 365, 368, 372, 373, 382, 384, 389, 393, 540, 541, 673, 808, 810, 813, 828, 836, 837, 986, 995, 997, 1004, 1006, 1013, 1018], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 59, 61, 79, 80, 81, 84, 91, 97, 100, 121, 126, 134, 153, 160, 166, 167, 168, 185, 196, 197, 198, 201, 204, 214, 221, 225, 231, 241, 258, 259, 262, 263, 265, 266, 271, 276, 294, 298, 309, 314, 317, 326, 336, 339, 341, 350, 354, 363, 367, 368, 370, 373, 374, 376, 379, 380, 381, 387, 391, 393, 395, 397, 398, 399, 400, 401, 402, 403, 424, 428, 433, 443, 452, 453, 459, 481, 485, 491, 538, 539, 542, 543, 545, 546, 548, 549, 570, 571, 603, 631, 632, 635, 636, 637, 645, 663, 664, 666, 672, 673, 676, 686, 723, 726, 770, 775, 777, 785, 787, 791, 794, 797, 819, 820, 844, 848, 849, 850, 859, 870, 871, 880, 883, 886, 887, 888, 889, 915, 951, 954, 955, 957, 958, 959, 960, 961, 962, 965, 966, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 985, 986, 995, 996, 1004, 1009, 1010, 1012, 1015, 1017, 1019], "new": [4, 7, 8, 10, 50, 55, 57, 59, 69, 70, 102, 108, 111, 113, 114, 121, 127, 128, 142, 145, 148, 154, 161, 168, 169, 196, 202, 210, 225, 255, 258, 263, 280, 282, 307, 310, 315, 318, 325, 350, 355, 356, 362, 363, 365, 366, 367, 370, 371, 372, 374, 376, 377, 380, 381, 382, 384, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 485, 486, 489, 490, 491, 493, 504, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 685, 689, 694, 695, 699, 702, 703, 704, 705, 707, 708, 711, 714, 719, 720, 721, 723, 726, 733, 734, 737, 741, 746, 747, 749, 758, 765, 768, 769, 775, 776, 777, 780, 781, 783, 790, 791, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 896, 898, 899, 901, 909, 910, 914, 915, 925, 928, 930, 932, 937, 943, 949, 951, 952, 954, 958, 962, 963, 965, 966, 967, 968, 972, 974, 975, 976, 977, 983, 986, 988, 989, 992, 995, 997, 1002, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 363, 368, 959, 981], "1440": 4, "caus": [4, 25, 27, 121, 149, 166, 194, 196, 201, 214, 341, 350, 366, 373, 391, 393, 398, 399, 401, 403, 425, 428, 430, 440, 490, 513, 563, 570, 591, 592, 814, 815, 816, 818, 843, 852, 854, 857, 858, 898, 899, 951, 952, 958, 962, 970, 972, 975, 983, 988, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "signific": [4, 121, 141, 163, 214, 249, 256, 272, 274, 276, 339, 350, 362, 363, 379, 393, 396, 397, 400, 485, 513, 515, 530, 531, 608, 639, 640, 647, 649, 657, 658, 659, 796, 804, 878, 880, 881, 882, 883, 884, 961, 962, 965, 1004, 1006, 1007, 1008, 1012], "overfit": [4, 114, 121, 163, 167, 168, 175, 225, 243, 249, 251, 257, 261, 271, 272, 292, 299, 300, 302, 303, 326, 344, 346, 347, 363, 381, 391, 397, 400, 419, 469, 470, 548, 549, 638, 777, 780, 781, 791, 801, 802, 836, 837, 839, 854, 858, 957, 966, 968, 970, 978, 986, 995, 1007], "avoid": [4, 7, 12, 44, 56, 61, 71, 114, 166, 167, 198, 205, 214, 220, 238, 251, 257, 261, 279, 284, 286, 287, 302, 303, 322, 323, 340, 355, 366, 368, 369, 370, 372, 373, 374, 381, 382, 384, 387, 391, 393, 395, 397, 400, 401, 404, 422, 424, 426, 433, 443, 449, 474, 475, 476, 480, 489, 490, 515, 520, 524, 527, 566, 567, 615, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 670, 672, 674, 676, 693, 777, 778, 782, 788, 791, 800, 801, 802, 839, 842, 848, 849, 851, 856, 857, 858, 859, 861, 863, 864, 865, 867, 868, 869, 871, 876, 915, 956, 959, 961, 962, 965, 966, 968, 970, 972, 977, 978, 983, 997, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "kbinsdiscret": [4, 53, 163, 196, 214, 297, 300, 304, 311, 493, 638, 842, 858, 887, 972, 1012, 1016, 1017, 1018, 1020], "re": [4, 8, 13, 26, 55, 69, 70, 118, 151, 165, 214, 242, 246, 259, 261, 265, 307, 339, 341, 355, 368, 369, 372, 376, 380, 382, 397, 401, 450, 451, 452, 453, 454, 455, 456, 457, 536, 537, 542, 543, 544, 627, 633, 641, 643, 779, 794, 797, 886, 887, 888, 889, 958, 963, 965, 972, 977, 983, 986, 997, 1004, 1008, 1009, 1011, 1013], "fine": [4, 37, 117, 212, 247, 254, 346, 347, 365, 372, 381, 401, 915, 965, 968, 983, 1014], "grain": [4, 31, 37, 230, 247, 300, 374, 401, 983], "still": [4, 32, 44, 53, 56, 61, 81, 98, 116, 118, 121, 128, 148, 154, 165, 166, 168, 175, 196, 198, 214, 230, 259, 265, 298, 308, 309, 339, 340, 350, 356, 362, 367, 368, 370, 372, 373, 374, 376, 379, 381, 393, 397, 400, 401, 404, 422, 426, 435, 455, 477, 608, 613, 616, 618, 698, 736, 758, 761, 770, 771, 780, 781, 794, 797, 857, 859, 878, 896, 951, 952, 956, 958, 961, 965, 968, 970, 977, 978, 981, 983, 986, 1004, 1006, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1019], "express": [4, 7, 12, 148, 153, 166, 256, 257, 308, 323, 341, 362, 363, 368, 369, 374, 393, 398, 401, 431, 437, 438, 569, 570, 572, 697, 777, 783, 791, 800, 801, 802, 803, 806, 826, 958, 962, 966, 972, 973, 978, 1012], "advantag": [4, 5, 39, 56, 94, 99, 196, 197, 225, 242, 257, 310, 350, 381, 391, 397, 398, 401, 403, 423, 427, 441, 515, 570, 630, 655, 656, 743, 807, 808, 809, 839, 840, 878, 879, 880, 881, 882, 883, 884, 951, 954, 957, 958, 959, 962, 963, 965, 966, 972, 976, 977, 978, 1007], "final": [4, 26, 40, 42, 69, 70, 79, 81, 85, 90, 99, 108, 110, 112, 114, 118, 119, 122, 128, 131, 142, 153, 161, 165, 167, 172, 175, 184, 185, 193, 196, 198, 213, 214, 218, 225, 238, 245, 254, 262, 276, 306, 307, 326, 354, 356, 366, 368, 369, 372, 380, 381, 390, 391, 393, 394, 397, 400, 401, 419, 424, 428, 429, 433, 440, 443, 445, 517, 536, 537, 548, 549, 551, 608, 628, 634, 640, 660, 671, 675, 700, 777, 807, 808, 839, 840, 875, 878, 951, 952, 958, 959, 962, 965, 968, 969, 972, 975, 986, 995, 1009, 1012, 1013, 1014, 1015, 1017], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 61, 70, 77, 79, 80, 81, 95, 96, 99, 102, 108, 112, 113, 115, 121, 124, 127, 136, 137, 145, 148, 151, 153, 154, 155, 157, 166, 167, 168, 175, 176, 191, 192, 194, 196, 197, 198, 200, 210, 214, 221, 222, 228, 229, 252, 256, 258, 259, 263, 276, 282, 289, 303, 317, 325, 326, 331, 334, 339, 340, 341, 346, 347, 363, 365, 381, 391, 393, 394, 395, 396, 397, 398, 399, 402, 403, 423, 425, 427, 428, 430, 440, 450, 451, 452, 453, 454, 455, 456, 457, 505, 513, 532, 533, 544, 591, 592, 627, 633, 638, 682, 697, 699, 738, 798, 817, 825, 858, 958, 961, 962, 966, 967, 968, 969, 975, 976, 977, 978, 985, 989, 991, 992, 994, 1005, 1017, 1018, 1019], "complet": [4, 37, 38, 39, 44, 49, 52, 57, 61, 85, 126, 140, 142, 145, 163, 168, 169, 202, 224, 225, 239, 254, 303, 306, 340, 350, 363, 368, 372, 373, 376, 379, 394, 397, 398, 400, 401, 423, 427, 430, 433, 443, 444, 445, 448, 476, 517, 518, 519, 520, 525, 527, 539, 550, 551, 562, 568, 569, 570, 572, 608, 609, 610, 611, 630, 638, 652, 654, 685, 686, 696, 697, 698, 711, 716, 717, 737, 766, 773, 807, 810, 813, 822, 838, 839, 840, 841, 901, 947, 951, 956, 958, 962, 963, 965, 977, 978, 988, 997, 1004, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "induct": [4, 36, 67, 121, 163, 381, 393, 400, 407, 423, 493, 545, 608, 873, 874, 922, 946, 958, 975, 1006], "bia": [4, 27, 77, 107, 115, 116, 121, 132, 163, 166, 168, 175, 176, 178, 200, 261, 292, 334, 350, 363, 370, 381, 391, 395, 399, 400, 403, 505, 537, 540, 541, 588, 589, 595, 623, 629, 630, 639, 640, 650, 651, 661, 836, 837, 852, 854, 858, 863, 864, 866, 867, 868, 869, 887, 957, 958, 961, 962, 966, 967, 970, 976, 995], "preserv": [4, 48, 99, 221, 229, 251, 370, 371, 392, 397, 398, 401, 562, 569, 570, 572, 627, 633, 677, 680, 754, 758, 795, 796, 797, 862, 898, 899, 952, 958, 959, 972, 974, 992, 1004, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "smooth": [4, 46, 47, 54, 153, 189, 197, 212, 326, 365, 382, 393, 399, 403, 429, 430, 518, 519, 520, 527, 538, 539, 540, 541, 545, 546, 547, 571, 572, 600, 603, 657, 814, 815, 816, 818, 856, 867, 886, 887, 888, 889, 958, 964, 972, 976, 977, 978, 997], "local": [4, 39, 56, 60, 94, 97, 125, 153, 154, 163, 167, 197, 216, 219, 221, 223, 225, 234, 277, 290, 346, 347, 355, 365, 366, 368, 372, 374, 376, 384, 393, 398, 400, 401, 403, 428, 433, 443, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 483, 519, 521, 525, 528, 530, 540, 541, 544, 547, 591, 592, 669, 670, 671, 672, 673, 674, 676, 677, 738, 739, 822, 825, 828, 830, 840, 849, 871, 874, 882, 928, 960, 961, 965, 966, 978, 996, 998, 999, 1008, 1012, 1016, 1019], "attempt": [4, 54, 167, 192, 202, 251, 339, 354, 367, 381, 393, 405, 431, 438, 449, 612, 669, 670, 674, 795, 821, 822, 823, 825, 827, 829, 830, 831, 857, 859, 876, 898, 899, 958, 959, 965, 978, 988, 1011, 1016], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 57, 59, 60, 69, 70, 72, 73, 74, 84, 85, 88, 90, 91, 94, 95, 99, 102, 103, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 141, 143, 145, 150, 152, 157, 160, 161, 165, 166, 167, 169, 172, 175, 182, 183, 185, 190, 194, 196, 197, 198, 200, 201, 204, 211, 214, 218, 225, 226, 229, 230, 231, 232, 235, 236, 238, 241, 244, 246, 250, 251, 252, 254, 256, 257, 259, 261, 262, 265, 266, 274, 276, 279, 281, 285, 287, 289, 292, 293, 295, 298, 299, 300, 301, 303, 306, 308, 309, 310, 314, 315, 316, 319, 326, 332, 334, 340, 341, 344, 345, 348, 350, 354, 355, 356, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 379, 380, 381, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 410, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 500, 503, 504, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 688, 689, 691, 694, 700, 705, 708, 709, 710, 718, 719, 725, 726, 728, 730, 731, 733, 734, 738, 739, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 756, 758, 759, 760, 761, 763, 764, 765, 767, 768, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 904, 909, 910, 915, 917, 918, 930, 938, 939, 940, 943, 952, 954, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 986, 988, 992, 994, 995, 996, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "sine": [4, 148, 153, 154, 163, 190, 202, 240, 248, 346, 364, 596, 775, 776, 961, 978], "cosin": [4, 40, 270, 276, 281, 360, 363, 381, 393, 398, 399, 423, 427, 431, 438, 516, 571, 572, 601, 677, 740, 741, 742, 745, 750, 751, 754, 758, 759, 760, 819, 820, 824, 851, 965, 978, 999, 1014], "match": [4, 37, 45, 94, 97, 101, 163, 172, 174, 196, 215, 219, 228, 341, 363, 366, 370, 372, 393, 398, 400, 401, 413, 430, 445, 447, 489, 490, 496, 507, 512, 518, 523, 529, 532, 548, 549, 553, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 639, 645, 646, 666, 667, 680, 684, 685, 686, 694, 696, 700, 714, 766, 819, 820, 824, 828, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 878, 885, 891, 902, 930, 959, 961, 962, 964, 965, 984, 988, 997, 999, 1004, 1010, 1011, 1012, 1014, 1016, 1017], "togeth": [4, 12, 51, 59, 70, 117, 128, 148, 154, 166, 177, 218, 221, 252, 310, 329, 345, 350, 370, 372, 379, 380, 381, 387, 393, 400, 401, 408, 432, 434, 548, 549, 670, 696, 777, 791, 839, 840, 958, 959, 963, 969, 972, 978, 979, 986, 989, 991, 1010], "equival": [4, 14, 56, 118, 124, 144, 148, 153, 166, 214, 246, 265, 276, 303, 341, 350, 354, 366, 374, 377, 380, 381, 393, 394, 395, 396, 397, 398, 400, 402, 403, 423, 425, 426, 427, 428, 430, 431, 438, 450, 455, 490, 515, 522, 539, 542, 543, 544, 546, 569, 572, 594, 597, 600, 602, 605, 627, 628, 629, 633, 635, 639, 640, 647, 648, 649, 650, 653, 657, 658, 661, 664, 668, 669, 674, 689, 690, 703, 714, 721, 727, 728, 729, 741, 750, 759, 760, 775, 776, 780, 781, 785, 787, 810, 813, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 842, 848, 849, 851, 854, 855, 856, 857, 859, 866, 868, 869, 902, 913, 948, 951, 956, 958, 959, 960, 962, 968, 972, 976, 977, 978, 1012, 1013, 1014, 1015, 1017, 1018], "importantli": [4, 13, 95, 167, 172, 298, 393], "jump": [4, 197, 298, 365, 368, 401, 858], "functiontransform": [4, 69, 114, 196, 214, 318, 446, 972, 1009, 1010, 1012, 1017, 1018, 1019], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 55, 60, 69, 74, 91, 100, 102, 104, 112, 114, 120, 121, 124, 128, 151, 154, 156, 161, 175, 176, 184, 185, 188, 196, 197, 204, 205, 206, 214, 234, 237, 238, 244, 246, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 270, 276, 281, 286, 289, 295, 298, 300, 303, 306, 322, 326, 339, 341, 344, 348, 354, 361, 362, 363, 368, 369, 370, 374, 375, 377, 379, 381, 391, 392, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 943, 946, 947, 948, 949, 950, 952, 962, 965, 969, 970, 977, 978, 983, 988, 993, 995, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lambda": [4, 7, 8, 10, 19, 55, 72, 120, 135, 176, 214, 256, 257, 302, 318, 389, 393, 398, 400, 401, 625, 626, 627, 628, 843, 855, 958, 972, 992, 1012, 1018], "sin": [4, 13, 19, 39, 95, 110, 120, 121, 125, 127, 140, 148, 154, 155, 157, 175, 176, 190, 197, 202, 219, 231, 247, 288, 299, 307, 333, 346, 347, 403, 497, 596, 680, 744, 996], "pi": [4, 13, 34, 39, 40, 95, 104, 125, 127, 140, 148, 176, 184, 190, 197, 219, 241, 242, 243, 246, 247, 270, 289, 307, 347, 384, 399, 403, 497, 498, 499, 596, 623, 956, 957, 958, 964, 996], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 125, 127, 153, 163, 166, 197, 219, 256, 270, 310, 347, 372, 399, 401, 430, 432, 434, 469, 492, 572, 680, 700, 744, 773, 957, 972, 986, 998, 999], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 56, 61, 68, 75, 85, 97, 99, 121, 123, 125, 144, 148, 149, 153, 155, 163, 164, 166, 167, 169, 170, 196, 197, 198, 201, 202, 216, 221, 223, 238, 242, 246, 256, 257, 258, 261, 264, 265, 295, 297, 299, 304, 307, 313, 320, 326, 331, 334, 335, 336, 339, 340, 341, 350, 355, 366, 368, 370, 373, 379, 381, 391, 393, 394, 398, 399, 400, 401, 403, 404, 431, 446, 471, 477, 481, 495, 505, 506, 538, 539, 540, 541, 545, 546, 547, 569, 570, 571, 572, 587, 590, 630, 638, 639, 640, 653, 654, 655, 668, 672, 673, 684, 733, 765, 775, 782, 788, 796, 805, 825, 836, 837, 843, 848, 849, 851, 855, 856, 857, 859, 864, 867, 875, 878, 879, 883, 886, 887, 888, 889, 898, 899, 915, 928, 936, 951, 956, 958, 959, 961, 962, 963, 969, 972, 975, 977, 978, 993, 995, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "expans": [4, 160, 308, 431, 854, 1013], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 115, 121, 126, 148, 153, 155, 167, 186, 198, 213, 292, 300, 334, 350, 354, 361, 371, 382, 393, 395, 402, 639, 640, 878, 879, 885, 956, 995, 1010], "beyond": [4, 27, 197, 198, 354, 356, 367, 368, 379, 391, 400, 883, 959, 963, 972, 977, 983, 1012], "pd": [4, 12, 25, 70, 71, 72, 115, 121, 125, 153, 160, 165, 166, 167, 168, 175, 185, 196, 204, 214, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 303, 309, 310, 334, 339, 340, 373, 381, 394, 445, 447, 608, 609, 610, 611, 613, 758, 896, 898, 899, 951, 952, 969, 972, 1015, 1017, 1018, 1019], "hour_df": 4, "datafram": [4, 25, 69, 70, 71, 72, 118, 121, 125, 153, 160, 165, 166, 167, 168, 175, 185, 204, 214, 235, 238, 246, 254, 256, 257, 259, 267, 268, 303, 309, 310, 311, 334, 339, 340, 362, 363, 368, 370, 373, 381, 394, 415, 424, 425, 427, 428, 430, 445, 447, 448, 449, 463, 464, 465, 466, 470, 471, 472, 473, 477, 481, 482, 483, 485, 486, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 669, 670, 777, 780, 781, 791, 805, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 894, 921, 933, 936, 951, 952, 983, 997, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "arang": [4, 11, 13, 16, 40, 57, 59, 64, 72, 78, 79, 102, 105, 108, 117, 118, 119, 120, 122, 123, 126, 130, 141, 148, 150, 155, 156, 160, 161, 169, 180, 196, 199, 201, 205, 220, 228, 230, 251, 256, 259, 264, 267, 274, 276, 289, 292, 300, 309, 314, 315, 317, 319, 326, 333, 339, 341, 346, 347, 348, 350, 379, 390, 397, 401, 446, 525, 805, 854, 858, 957, 958, 966, 972, 976, 993], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 57, 71, 79, 84, 94, 97, 104, 112, 116, 117, 126, 137, 143, 148, 150, 151, 152, 153, 154, 155, 157, 175, 187, 193, 209, 210, 212, 213, 218, 220, 222, 225, 230, 233, 245, 254, 280, 282, 289, 292, 294, 295, 299, 300, 301, 306, 309, 310, 319, 325, 326, 330, 331, 332, 335, 336, 379, 390, 398, 400, 401, 427, 446, 565, 612, 805, 854, 858, 958, 972, 993, 996, 1009], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 57, 61, 89, 95, 98, 105, 126, 172, 187, 212, 214, 217, 218, 219, 220, 221, 222, 228, 229, 232, 234, 238, 276, 280, 293, 298, 299, 303, 306, 309, 311, 326, 339, 340, 341, 350, 360, 363, 370, 373, 374, 381, 389, 394, 398, 401, 402, 409, 415, 424, 425, 427, 428, 430, 445, 447, 449, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 671, 672, 673, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 952, 954, 958, 963, 965, 972, 973, 974, 988, 993, 996, 997, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1020], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 60, 61, 67, 93, 106, 126, 163, 190, 197, 202, 217, 219, 222, 225, 228, 229, 323, 326, 362, 364, 368, 370, 377, 381, 393, 394, 398, 401, 403, 423, 433, 443, 445, 448, 469, 471, 472, 473, 474, 475, 481, 482, 483, 485, 491, 495, 514, 522, 530, 565, 567, 616, 624, 638, 653, 672, 718, 759, 800, 804, 808, 846, 894, 898, 899, 914, 925, 948, 949, 956, 958, 959, 962, 969, 973, 978, 988, 994, 1004, 1008, 1011, 1012, 1013, 1016, 1018], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 55, 56, 57, 58, 59, 61, 66, 79, 85, 89, 90, 91, 96, 98, 99, 100, 101, 103, 110, 111, 117, 124, 126, 127, 129, 137, 140, 148, 149, 150, 152, 154, 155, 156, 157, 165, 166, 172, 176, 179, 186, 188, 192, 193, 194, 197, 198, 199, 205, 208, 209, 210, 213, 217, 218, 219, 220, 221, 222, 225, 230, 231, 232, 241, 242, 243, 244, 245, 246, 247, 251, 257, 259, 270, 276, 282, 283, 284, 285, 286, 287, 288, 292, 298, 300, 301, 303, 310, 316, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 339, 345, 346, 347, 395, 612, 682, 956, 958, 995], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 77, 78, 79, 80, 81, 85, 90, 91, 94, 95, 96, 98, 101, 102, 103, 104, 108, 110, 117, 118, 119, 120, 123, 124, 125, 126, 128, 130, 134, 137, 148, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 166, 168, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 213, 214, 218, 219, 220, 222, 225, 229, 230, 231, 232, 235, 241, 242, 243, 244, 245, 246, 247, 251, 255, 257, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 274, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 298, 299, 300, 302, 303, 307, 316, 317, 319, 324, 325, 326, 327, 328, 330, 332, 333, 335, 345, 346, 362, 363, 365, 376, 393, 400, 401, 428, 474, 475, 487, 564, 565, 759, 936, 976, 978, 1009, 1014, 1016], "map": [4, 5, 10, 11, 17, 19, 26, 53, 99, 113, 120, 123, 126, 135, 148, 163, 172, 196, 217, 219, 224, 239, 257, 260, 265, 279, 284, 287, 289, 297, 298, 304, 318, 326, 332, 340, 341, 362, 369, 379, 381, 391, 392, 393, 394, 397, 398, 400, 401, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 477, 479, 483, 490, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 742, 745, 775, 776, 777, 780, 781, 788, 789, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 866, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 920, 951, 954, 959, 962, 964, 974, 977, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "space": [4, 8, 10, 19, 31, 46, 48, 53, 56, 57, 59, 60, 62, 64, 69, 70, 73, 85, 94, 96, 103, 105, 114, 117, 121, 126, 142, 148, 154, 172, 197, 217, 218, 219, 221, 229, 230, 231, 234, 235, 242, 247, 264, 267, 268, 276, 285, 286, 300, 308, 339, 340, 341, 348, 350, 354, 360, 363, 364, 365, 368, 375, 379, 380, 381, 390, 392, 393, 396, 398, 399, 400, 401, 403, 425, 428, 429, 430, 433, 443, 445, 446, 447, 448, 463, 464, 465, 479, 513, 515, 516, 519, 520, 521, 522, 524, 525, 530, 554, 563, 569, 570, 572, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 619, 621, 622, 623, 624, 669, 670, 671, 673, 674, 675, 677, 680, 777, 780, 781, 791, 809, 819, 820, 827, 828, 829, 830, 839, 844, 845, 851, 856, 870, 871, 872, 891, 919, 954, 955, 956, 957, 958, 960, 962, 963, 965, 966, 967, 968, 972, 973, 974, 975, 976, 977, 978, 982, 983, 988, 995, 997, 998, 999, 1004, 1005, 1007, 1012, 1013, 1014, 1018, 1019], "akin": [4, 197, 381], "sort": [4, 8, 10, 12, 19, 20, 24, 59, 69, 112, 118, 121, 127, 145, 175, 196, 197, 214, 233, 256, 257, 260, 270, 288, 333, 339, 346, 347, 368, 372, 376, 377, 381, 397, 400, 401, 403, 515, 522, 536, 547, 562, 591, 598, 678, 693, 699, 709, 710, 718, 734, 763, 764, 767, 769, 777, 802, 814, 815, 816, 817, 818, 819, 820, 827, 829, 830, 831, 834, 844, 850, 852, 853, 856, 858, 867, 880, 883, 915, 920, 958, 965, 968, 972, 986, 997, 1004, 1008, 1014, 1015, 1016, 1018, 1019], "analog": [4, 123, 374, 400, 962, 963, 977, 1013], "clock": 4, "25th": [4, 857], "back": [4, 99, 236, 355, 368, 370, 382, 387, 394, 401, 416, 425, 428, 440, 463, 464, 465, 489, 490, 514, 515, 516, 519, 521, 522, 525, 562, 611, 639, 640, 647, 649, 657, 658, 659, 708, 844, 846, 847, 848, 852, 853, 854, 856, 857, 859, 870, 871, 878, 958, 962, 966, 983, 988, 997, 1007, 1012, 1014, 1015, 1018], "natur": [4, 31, 121, 155, 166, 167, 172, 196, 197, 213, 214, 221, 241, 247, 265, 339, 368, 370, 381, 398, 400, 401, 404, 426, 431, 438, 532, 571, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 673, 685, 721, 735, 737, 821, 822, 823, 825, 827, 829, 830, 831, 858, 913, 958, 959, 961, 962, 965, 967, 972, 976, 982, 985, 1004, 1012], "sp": [4, 166, 952, 996], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 55, 56, 58, 59, 60, 64, 70, 71, 73, 85, 89, 90, 91, 99, 100, 101, 109, 111, 112, 117, 118, 124, 126, 127, 129, 130, 135, 137, 143, 149, 150, 151, 152, 156, 172, 179, 181, 186, 187, 188, 189, 191, 193, 194, 200, 203, 205, 207, 208, 209, 210, 212, 213, 217, 218, 219, 221, 222, 230, 231, 232, 236, 242, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 259, 261, 265, 267, 276, 279, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 316, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 339, 345, 346, 347, 354, 355, 362, 363, 365, 366, 368, 369, 370, 371, 373, 376, 377, 379, 384, 390, 391, 393, 394, 395, 396, 397, 398, 400, 402, 406, 419, 424, 425, 428, 430, 440, 449, 456, 504, 509, 515, 519, 521, 522, 528, 530, 531, 571, 588, 589, 591, 612, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 654, 660, 666, 667, 669, 670, 673, 674, 689, 695, 696, 699, 711, 715, 721, 722, 738, 739, 777, 791, 804, 814, 815, 816, 817, 818, 819, 820, 826, 828, 835, 850, 852, 853, 854, 858, 873, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 893, 898, 899, 925, 951, 954, 955, 958, 959, 960, 962, 964, 965, 967, 969, 972, 974, 976, 977, 978, 982, 986, 988, 992, 993, 995, 996, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017], "colorbar": [4, 11, 30, 40, 94, 105, 116, 124, 143, 149, 151, 152, 154, 167, 217, 229, 245, 267, 298, 326, 678, 1016], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 8, 15, 53, 79, 309, 430, 515, 951, 962, 972], "166": [4, 64, 67, 295, 374, 962, 1004], "simpl": [4, 16, 27, 70, 74, 77, 84, 85, 94, 119, 155, 163, 167, 197, 213, 237, 257, 277, 290, 310, 322, 339, 341, 345, 350, 366, 368, 370, 371, 372, 373, 375, 379, 380, 381, 382, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 407, 413, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 443, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 495, 503, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 766, 768, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 954, 956, 957, 958, 959, 961, 962, 965, 972, 974, 976, 978, 983, 986, 988, 997, 1001, 1004], "wors": [4, 85, 149, 167, 202, 256, 264, 303, 350, 393, 403, 414, 446, 463, 464, 465, 533, 535, 537, 539, 541, 543, 546, 549, 551, 591, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 659, 660, 661, 686, 702, 703, 704, 708, 765, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 972, 1013], "further": [4, 25, 42, 70, 77, 85, 94, 112, 117, 119, 144, 148, 153, 166, 168, 175, 217, 222, 253, 256, 257, 263, 311, 326, 340, 348, 354, 368, 379, 381, 392, 393, 395, 398, 400, 401, 403, 433, 443, 496, 513, 516, 563, 595, 603, 609, 639, 640, 647, 649, 657, 658, 659, 672, 676, 717, 754, 758, 761, 770, 771, 815, 821, 822, 829, 830, 857, 859, 878, 880, 883, 915, 961, 962, 964, 965, 966, 968, 972, 976, 977, 995, 997, 1013, 1017], "analyz": [4, 7, 17, 258, 265, 311, 339, 341, 373, 374, 393, 401, 484, 569, 570, 572, 768, 959, 962, 969, 970, 978, 997, 1004, 1013], "reason": [4, 8, 12, 42, 53, 69, 121, 145, 166, 167, 172, 196, 197, 204, 214, 225, 229, 230, 234, 253, 256, 257, 262, 276, 299, 303, 340, 341, 350, 354, 355, 356, 363, 367, 368, 370, 372, 376, 379, 380, 381, 382, 393, 394, 395, 398, 400, 401, 403, 489, 513, 555, 619, 627, 633, 635, 653, 668, 673, 743, 777, 791, 823, 828, 835, 854, 875, 951, 952, 957, 958, 959, 962, 964, 965, 966, 968, 972, 976, 977, 986, 997, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "disappoint": 4, "outcom": [4, 166, 381, 550, 639, 690, 722, 772, 807, 873, 874, 875, 880, 883, 958, 962, 978, 985, 997, 1008, 1012, 1014], "end": [4, 11, 26, 52, 73, 80, 85, 114, 128, 201, 204, 244, 251, 256, 260, 308, 309, 314, 317, 318, 340, 366, 368, 370, 372, 379, 381, 384, 390, 393, 394, 396, 400, 431, 437, 449, 469, 470, 489, 490, 518, 527, 538, 539, 540, 541, 545, 546, 547, 626, 627, 628, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 662, 663, 664, 665, 777, 780, 781, 791, 798, 800, 837, 839, 876, 886, 887, 888, 889, 919, 920, 946, 951, 958, 959, 961, 962, 972, 974, 976, 982, 986, 994, 997, 1009, 1011, 1014, 1017, 1018], "altern": [4, 26, 70, 85, 115, 116, 122, 128, 168, 180, 196, 214, 226, 244, 247, 265, 306, 339, 340, 341, 350, 363, 371, 372, 374, 379, 381, 382, 384, 388, 390, 391, 393, 394, 395, 397, 398, 400, 401, 403, 423, 424, 427, 428, 433, 439, 444, 480, 519, 521, 522, 528, 534, 535, 538, 539, 540, 541, 545, 546, 547, 563, 569, 570, 572, 598, 601, 624, 673, 687, 689, 751, 754, 758, 761, 779, 808, 843, 849, 852, 864, 871, 873, 886, 887, 888, 889, 929, 930, 956, 958, 959, 961, 962, 965, 966, 970, 972, 974, 975, 977, 978, 983, 992, 997, 999, 1009, 1011, 1017, 1018], "larger": [4, 7, 27, 37, 39, 42, 47, 79, 81, 91, 104, 112, 122, 149, 154, 155, 161, 166, 167, 172, 176, 211, 212, 213, 222, 229, 231, 241, 247, 257, 259, 265, 266, 276, 278, 292, 293, 295, 298, 326, 340, 341, 361, 363, 368, 374, 379, 381, 390, 391, 393, 394, 395, 397, 398, 400, 401, 403, 422, 425, 430, 431, 433, 435, 437, 496, 508, 522, 525, 542, 543, 544, 548, 549, 563, 570, 624, 633, 653, 654, 655, 656, 660, 668, 673, 685, 700, 716, 775, 824, 825, 856, 858, 859, 867, 872, 914, 915, 933, 936, 954, 955, 958, 959, 961, 962, 965, 966, 970, 972, 976, 977, 995, 997, 1008, 1009, 1012, 1013, 1014, 1017, 1018], "periodic_spline_transform": 4, "n_spline": [4, 858], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 54, 55, 61, 96, 99, 104, 113, 117, 118, 120, 123, 137, 149, 155, 156, 169, 175, 196, 197, 204, 207, 214, 217, 231, 232, 250, 256, 257, 268, 281, 283, 287, 302, 308, 309, 315, 318, 324, 326, 327, 330, 331, 333, 339, 340, 363, 365, 368, 370, 375, 377, 381, 393, 397, 400, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 692, 693, 694, 695, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 714, 715, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 901, 902, 903, 904, 907, 909, 914, 915, 918, 919, 920, 921, 925, 928, 930, 931, 933, 936, 937, 943, 946, 947, 949, 951, 958, 962, 972, 975, 978, 988, 992, 997, 999, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "degre": [4, 16, 34, 96, 111, 153, 160, 165, 167, 172, 175, 184, 185, 197, 231, 236, 241, 242, 243, 246, 247, 256, 270, 295, 308, 309, 323, 333, 398, 402, 433, 479, 516, 522, 620, 621, 624, 637, 755, 775, 777, 825, 854, 858, 880, 881, 882, 883, 884, 954, 955, 957, 958, 959, 960, 962, 963, 965, 968, 969, 972, 975, 977, 995, 1007, 1013, 1017, 1018], "n_knot": [4, 197, 309, 858, 972, 1017], "include_bia": [4, 175, 270, 854, 858, 1018], "knot": [4, 197, 309, 858, 972, 1017], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 79, 80, 95, 104, 110, 119, 121, 148, 149, 151, 152, 153, 154, 155, 157, 167, 175, 176, 178, 186, 190, 196, 197, 198, 202, 206, 207, 208, 209, 210, 214, 222, 225, 228, 229, 231, 232, 245, 256, 258, 259, 263, 264, 265, 266, 270, 281, 282, 288, 289, 299, 301, 310, 311, 325, 326, 329, 331, 332, 334, 335, 336, 612, 613, 783, 803, 819, 820, 996], "again": [4, 66, 71, 121, 152, 154, 156, 157, 166, 221, 257, 339, 350, 372, 377, 381, 382, 393, 394, 395, 400, 401, 453, 548, 549, 615, 628, 632, 634, 636, 642, 644, 646, 673, 951, 958, 962, 976, 1001, 1004, 1012], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 57, 59, 60, 65, 69, 73, 74, 79, 84, 94, 95, 97, 100, 110, 115, 116, 117, 118, 121, 122, 123, 126, 127, 137, 141, 143, 149, 150, 152, 154, 155, 160, 161, 163, 167, 168, 180, 184, 185, 196, 198, 203, 205, 208, 209, 210, 211, 212, 216, 218, 220, 223, 225, 228, 229, 230, 231, 233, 234, 241, 243, 245, 246, 247, 254, 256, 258, 259, 262, 263, 265, 266, 276, 281, 282, 286, 289, 292, 294, 300, 301, 306, 308, 311, 316, 317, 319, 323, 325, 326, 329, 330, 331, 332, 335, 336, 339, 340, 348, 354, 361, 362, 363, 368, 370, 381, 390, 391, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 900, 903, 904, 909, 913, 915, 917, 920, 924, 926, 931, 933, 937, 938, 939, 940, 941, 942, 943, 952, 957, 958, 962, 963, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 993, 994, 996, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018], "concat": [4, 160, 165, 185, 214, 852], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 57, 79, 81, 88, 89, 94, 97, 101, 105, 111, 116, 117, 137, 143, 151, 152, 167, 175, 179, 187, 188, 205, 208, 209, 210, 212, 218, 219, 220, 229, 230, 233, 250, 251, 276, 279, 280, 282, 284, 285, 287, 289, 292, 294, 295, 298, 300, 314, 315, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 336, 345, 678, 993, 994], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 25, 27, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 66, 79, 81, 88, 89, 94, 97, 101, 111, 116, 117, 137, 143, 151, 152, 167, 179, 188, 205, 208, 209, 210, 212, 218, 219, 220, 226, 229, 230, 233, 238, 250, 251, 276, 280, 282, 286, 289, 292, 294, 295, 298, 300, 308, 311, 314, 315, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 336, 345, 365, 394, 678, 891, 962, 972, 978, 993, 994], "tab20b": 4, "stai": [4, 26, 37, 104, 166, 340, 367, 368, 372, 381, 382, 967, 1010], "midnight": 4, "fewer": [4, 13, 26, 109, 117, 119, 196, 354, 369, 402, 403, 429, 442, 534, 575, 677, 809, 919, 958, 963, 965, 1009, 1010, 1011], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 61, 77, 84, 85, 103, 115, 122, 128, 140, 141, 142, 144, 145, 153, 161, 165, 166, 167, 168, 169, 172, 196, 197, 214, 235, 241, 247, 253, 254, 259, 263, 264, 266, 285, 298, 306, 309, 315, 326, 339, 340, 341, 350, 354, 355, 356, 363, 364, 366, 368, 370, 372, 373, 374, 376, 379, 381, 382, 384, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 425, 426, 431, 437, 438, 441, 449, 477, 484, 502, 505, 513, 515, 520, 524, 530, 532, 542, 543, 547, 548, 569, 570, 572, 574, 585, 592, 608, 611, 630, 639, 653, 655, 657, 659, 668, 669, 673, 676, 705, 708, 726, 738, 739, 743, 765, 772, 775, 776, 780, 781, 796, 807, 808, 821, 822, 823, 825, 827, 828, 829, 830, 831, 854, 856, 863, 864, 866, 867, 868, 869, 876, 914, 915, 917, 925, 930, 951, 952, 956, 957, 958, 959, 960, 961, 962, 963, 965, 968, 969, 970, 975, 976, 977, 978, 981, 982, 983, 986, 993, 995, 997, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 206, 215, 365], "132": [4, 8, 13, 55, 109, 400], "013": [4, 340], "successfulli": [4, 13, 302, 367, 372, 401, 976], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 70, 71, 77, 112, 119, 121, 123, 126, 142, 166, 175, 176, 194, 201, 204, 227, 229, 234, 257, 263, 285, 300, 303, 311, 340, 341, 350, 360, 362, 365, 368, 374, 379, 381, 391, 392, 393, 395, 397, 398, 400, 401, 402, 404, 426, 427, 431, 438, 441, 474, 515, 525, 530, 536, 537, 538, 539, 544, 545, 546, 554, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 608, 624, 633, 653, 654, 655, 656, 668, 673, 676, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 806, 856, 867, 870, 871, 886, 887, 888, 889, 951, 954, 956, 957, 958, 959, 962, 965, 974, 975, 979, 988, 996, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1020], "choic": [4, 7, 40, 46, 64, 69, 77, 102, 148, 149, 155, 160, 185, 197, 234, 250, 254, 256, 259, 281, 308, 339, 340, 350, 354, 366, 370, 373, 379, 384, 393, 395, 397, 399, 400, 402, 403, 433, 443, 452, 453, 454, 455, 456, 457, 459, 519, 521, 522, 528, 540, 619, 628, 629, 637, 639, 640, 642, 650, 661, 673, 686, 808, 821, 822, 827, 829, 830, 856, 859, 867, 869, 878, 879, 902, 951, 956, 958, 959, 960, 962, 963, 968, 970, 975, 976, 977, 978, 1011, 1014, 1015, 1019], "arbitrari": [4, 85, 94, 95, 96, 114, 155, 175, 196, 213, 214, 254, 298, 302, 308, 339, 348, 355, 368, 379, 381, 394, 397, 398, 400, 401, 405, 431, 436, 438, 446, 513, 514, 540, 541, 562, 620, 629, 650, 661, 669, 778, 779, 784, 786, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 843, 845, 858, 951, 953, 954, 958, 959, 962, 965, 972, 983, 997, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1018], "held": [4, 8, 70, 102, 122, 168, 204, 243, 259, 264, 274, 400, 540, 541, 542, 543, 682, 777, 780, 781, 791, 836, 837, 849, 951, 952, 961, 970, 997], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 57, 59, 63, 66, 79, 80, 84, 89, 90, 91, 93, 97, 99, 100, 106, 111, 117, 118, 126, 150, 155, 156, 163, 166, 167, 168, 175, 179, 185, 188, 190, 192, 194, 196, 197, 198, 202, 205, 208, 209, 213, 214, 217, 218, 219, 220, 221, 225, 228, 230, 234, 243, 247, 250, 253, 257, 258, 263, 265, 266, 274, 276, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 299, 300, 302, 314, 315, 319, 322, 325, 326, 327, 328, 330, 331, 335, 336, 339, 340, 341, 345, 350, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 379, 381, 382, 392, 393, 398, 399, 400, 401, 404, 405, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 441, 442, 450, 453, 455, 479, 485, 493, 495, 496, 500, 503, 506, 511, 514, 516, 522, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 591, 592, 609, 612, 613, 614, 618, 619, 620, 625, 626, 632, 636, 638, 651, 652, 654, 656, 657, 659, 660, 663, 664, 669, 670, 671, 672, 673, 674, 675, 680, 682, 687, 688, 691, 694, 698, 703, 705, 711, 716, 717, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 744, 759, 760, 775, 776, 777, 791, 800, 809, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 844, 858, 872, 873, 874, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 896, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 972, 974, 975, 977, 978, 982, 983, 992, 995, 996, 997, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 114, 298], "insight": [4, 7, 166, 167, 197, 198, 214, 294, 298, 339, 348, 391, 777, 780, 781, 791, 802, 969, 978, 986], "last_hour": 4, "slice": [4, 17, 117, 205, 219, 222, 230, 279, 284, 287, 309, 310, 322, 363, 369, 370, 377, 394, 445, 448, 474, 475, 489, 527, 620, 754, 758, 761, 894, 918, 919, 933, 1016, 1018], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 56, 59, 66, 74, 94, 97, 105, 117, 118, 125, 128, 157, 166, 167, 190, 195, 211, 212, 217, 218, 219, 233, 244, 252, 295, 298, 300, 306, 308, 314, 315, 319, 333, 334, 345], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 57, 59, 62, 63, 64, 65, 66, 72, 74, 77, 78, 79, 80, 84, 85, 90, 91, 96, 98, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 135, 141, 148, 149, 153, 154, 155, 156, 157, 160, 163, 166, 169, 172, 175, 176, 178, 179, 180, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 211, 213, 214, 218, 219, 220, 225, 230, 231, 232, 234, 235, 243, 250, 251, 254, 255, 257, 258, 259, 260, 262, 265, 266, 267, 268, 269, 270, 271, 274, 281, 283, 285, 288, 293, 295, 298, 299, 303, 306, 307, 310, 313, 317, 318, 319, 320, 333, 334, 339, 340, 344, 345, 346, 347, 356, 360, 361, 362, 367, 368, 370, 373, 377, 381, 382, 390, 391, 392, 403, 404, 410, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 443, 446, 450, 468, 469, 470, 474, 475, 476, 477, 483, 484, 489, 490, 493, 495, 496, 500, 503, 504, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 550, 551, 573, 574, 575, 576, 577, 579, 580, 581, 585, 586, 587, 590, 591, 612, 639, 640, 647, 648, 649, 654, 655, 656, 657, 658, 659, 678, 679, 681, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 734, 735, 736, 737, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 828, 829, 836, 837, 839, 843, 846, 847, 850, 852, 853, 862, 873, 874, 875, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 898, 903, 904, 925, 926, 933, 951, 958, 959, 963, 964, 965, 966, 968, 969, 972, 976, 977, 978, 982, 984, 988, 993, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "actual": [4, 27, 46, 59, 74, 85, 109, 172, 185, 196, 204, 243, 252, 259, 341, 350, 354, 356, 365, 366, 368, 370, 373, 374, 379, 380, 381, 391, 393, 398, 401, 402, 416, 490, 496, 497, 508, 519, 521, 528, 543, 544, 626, 629, 639, 640, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 661, 668, 672, 676, 682, 685, 690, 696, 702, 703, 704, 765, 775, 780, 781, 796, 797, 825, 856, 878, 884, 906, 907, 908, 937, 954, 961, 962, 965, 969, 970, 1011, 1012, 1018, 1019, 1020], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 79, 80, 91, 94, 109, 117, 140, 148, 149, 153, 154, 157, 161, 166, 167, 175, 184, 185, 186, 188, 192, 196, 197, 198, 202, 205, 208, 209, 214, 225, 241, 244, 279, 281, 292, 293, 295, 319, 336, 345, 346, 347, 368, 384, 386, 393, 400, 403, 536, 537, 612, 968, 969, 978, 982, 988], "One": [4, 9, 12, 24, 30, 49, 90, 99, 102, 116, 118, 121, 124, 163, 166, 169, 174, 211, 215, 225, 235, 246, 256, 263, 266, 285, 299, 321, 323, 337, 340, 354, 365, 368, 380, 381, 393, 396, 398, 399, 400, 401, 404, 426, 430, 453, 455, 459, 493, 547, 620, 639, 647, 649, 654, 656, 657, 658, 768, 784, 785, 807, 808, 809, 840, 841, 852, 882, 925, 952, 954, 958, 959, 960, 961, 962, 963, 965, 966, 969, 970, 972, 977, 984, 999, 1008, 1010, 1017, 1019], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 60, 71, 72, 74, 77, 78, 79, 80, 84, 85, 96, 98, 102, 103, 104, 108, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 141, 148, 149, 153, 154, 155, 156, 157, 166, 167, 172, 175, 176, 178, 180, 181, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 220, 228, 229, 230, 231, 232, 235, 243, 251, 253, 255, 256, 258, 259, 260, 261, 263, 265, 266, 268, 269, 270, 271, 281, 282, 283, 288, 293, 299, 303, 307, 310, 316, 325, 328, 333, 339, 344, 345, 346, 347, 681], "draw": [4, 7, 16, 59, 157, 166, 192, 235, 258, 263, 326, 375, 396, 398, 399, 400, 536, 537, 538, 539, 544, 545, 546, 547, 592, 615, 682, 783, 890, 892, 961, 982, 991, 1017, 1018], "conclus": [4, 99, 166, 168, 196, 198, 256, 258, 350, 400, 991], "abov": [4, 25, 26, 37, 44, 65, 69, 111, 114, 119, 121, 131, 144, 145, 166, 167, 169, 182, 196, 198, 202, 207, 229, 232, 256, 262, 281, 300, 303, 307, 309, 340, 341, 348, 350, 354, 355, 356, 362, 363, 365, 366, 367, 368, 370, 372, 374, 379, 381, 382, 393, 394, 395, 397, 398, 399, 401, 403, 423, 427, 445, 448, 470, 476, 477, 478, 504, 571, 615, 685, 735, 777, 789, 791, 800, 842, 843, 856, 861, 867, 875, 925, 951, 952, 954, 956, 958, 959, 962, 965, 967, 969, 972, 976, 977, 978, 983, 988, 989, 995, 996, 997, 1010], "problemat": [4, 252, 394, 952, 1012], "captur": [4, 9, 12, 37, 39, 85, 121, 125, 140, 153, 166, 175, 196, 247, 307, 326, 376, 400, 401, 402, 552, 569, 570, 572, 825, 929, 962, 967, 975, 979, 995, 1016], "big": [4, 44, 59, 61, 200, 201, 218, 247, 355, 368, 374, 382, 395, 401, 405, 519, 542, 543, 783, 803, 814, 815, 816, 817, 818, 983, 986, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "goe": [4, 37, 114, 348, 368, 400, 452, 453, 459, 538, 539, 545, 546, 547, 886, 887, 888, 889, 972, 976], "artifact": [4, 13, 46, 47, 298, 356, 372], "discontinu": [4, 379], "fail": [4, 54, 65, 95, 102, 156, 157, 175, 256, 306, 355, 366, 368, 370, 371, 376, 382, 384, 396, 397, 422, 453, 455, 657, 658, 659, 836, 837, 909, 951, 959, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "intra": [4, 569, 572, 770, 771], "variat": [4, 12, 37, 125, 153, 154, 163, 166, 201, 240, 242, 247, 248, 253, 274, 307, 326, 365, 397, 398, 403, 425, 428, 440, 517, 624, 653, 655, 656, 775, 776, 795, 796, 798, 951, 962, 972, 975, 978, 982, 993, 995, 998, 999, 1007, 1009, 1010], "harmon": [4, 37, 263, 340, 393, 516, 522, 709, 710, 716, 763, 773, 962], "phase": [4, 190, 354, 608, 954, 959, 965, 986, 1012, 1014], "potenti": [4, 77, 161, 165, 167, 175, 282, 283, 292, 341, 354, 355, 381, 384, 393, 397, 400, 401, 449, 463, 464, 465, 466, 477, 505, 530, 538, 539, 542, 543, 545, 546, 554, 587, 592, 615, 743, 868, 869, 876, 886, 887, 888, 889, 930, 968, 976, 982, 997, 1007, 1014, 1015, 1018], "fix": [4, 6, 8, 25, 34, 46, 70, 104, 114, 117, 148, 149, 153, 156, 166, 198, 214, 247, 259, 264, 292, 306, 307, 308, 309, 310, 311, 340, 354, 355, 362, 364, 366, 367, 368, 370, 371, 376, 379, 381, 382, 394, 397, 398, 400, 401, 403, 433, 443, 453, 485, 493, 512, 518, 521, 523, 529, 530, 540, 541, 545, 546, 569, 572, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 611, 634, 644, 651, 665, 668, 672, 676, 688, 765, 775, 791, 798, 821, 822, 824, 827, 829, 830, 846, 862, 886, 887, 915, 929, 951, 958, 961, 962, 965, 972, 983, 985, 993, 997, 1002, 1003, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "two": [4, 7, 9, 11, 14, 24, 26, 30, 37, 39, 40, 43, 59, 63, 69, 70, 74, 79, 84, 85, 89, 90, 91, 94, 96, 97, 99, 103, 107, 110, 116, 117, 118, 121, 124, 125, 126, 129, 132, 142, 145, 148, 149, 150, 151, 154, 155, 160, 161, 163, 166, 167, 168, 175, 179, 184, 185, 186, 187, 192, 196, 197, 198, 204, 205, 208, 213, 214, 219, 221, 222, 225, 230, 232, 234, 241, 242, 243, 245, 246, 247, 251, 253, 257, 263, 279, 281, 284, 285, 287, 289, 298, 300, 303, 306, 307, 309, 310, 316, 322, 323, 326, 327, 328, 335, 339, 340, 341, 345, 350, 361, 362, 363, 364, 365, 366, 368, 370, 372, 374, 375, 376, 379, 381, 382, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 438, 440, 445, 450, 451, 452, 453, 454, 455, 456, 457, 469, 471, 472, 473, 474, 475, 477, 479, 481, 482, 483, 484, 485, 486, 488, 491, 495, 500, 503, 517, 519, 521, 525, 528, 530, 531, 534, 541, 551, 562, 565, 571, 572, 573, 576, 577, 579, 580, 581, 583, 584, 587, 588, 589, 591, 592, 601, 602, 605, 609, 613, 620, 624, 626, 651, 652, 654, 673, 680, 684, 685, 686, 693, 696, 697, 700, 702, 703, 704, 711, 712, 715, 716, 718, 721, 723, 734, 735, 737, 743, 744, 751, 754, 757, 758, 759, 760, 761, 765, 766, 772, 773, 774, 775, 808, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 836, 837, 843, 844, 851, 852, 853, 854, 872, 873, 874, 878, 886, 888, 889, 925, 941, 942, 948, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 988, 992, 995, 996, 997, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "onc": [4, 8, 50, 142, 145, 148, 218, 254, 257, 276, 306, 310, 339, 341, 348, 350, 354, 356, 362, 363, 368, 372, 373, 374, 375, 376, 380, 381, 382, 393, 394, 396, 397, 398, 400, 401, 402, 403, 430, 432, 434, 453, 489, 490, 519, 525, 532, 540, 541, 571, 572, 578, 600, 608, 628, 632, 634, 636, 642, 644, 646, 647, 648, 649, 657, 658, 659, 678, 693, 697, 699, 716, 761, 778, 782, 785, 795, 814, 815, 816, 817, 818, 890, 958, 959, 965, 972, 976, 977, 978, 988, 997, 1001, 1004, 1012, 1014, 1015, 1016, 1017], "specif": [4, 11, 12, 27, 44, 61, 64, 69, 71, 128, 153, 156, 166, 167, 172, 214, 251, 256, 298, 306, 307, 311, 339, 340, 341, 350, 354, 355, 363, 368, 371, 373, 374, 376, 379, 381, 384, 389, 392, 393, 394, 397, 398, 400, 401, 402, 403, 477, 484, 515, 532, 538, 545, 548, 549, 550, 551, 555, 569, 572, 574, 578, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 606, 621, 624, 627, 628, 633, 639, 653, 668, 678, 693, 694, 726, 777, 778, 779, 784, 785, 786, 791, 802, 815, 907, 909, 910, 925, 938, 939, 940, 956, 958, 959, 961, 962, 964, 965, 967, 969, 972, 976, 978, 979, 980, 981, 997, 999, 1004, 1008, 1012, 1013, 1014, 1015, 1018, 1019], "furthermor": [4, 37, 154, 167, 168, 235, 237, 276, 339, 340, 354, 356, 375, 393, 398, 400, 401, 543, 571, 587, 600, 685, 716, 726, 735, 737, 773, 878, 958, 970, 1007, 1011], "enforc": [4, 12, 53, 94, 153, 190, 285, 354, 368, 395, 398, 400, 403, 489, 508, 512, 518, 520, 523, 524, 526, 527, 529, 542, 543, 858, 898, 899, 952, 959, 1006, 1012, 1014, 1016, 1020], "behav": [4, 12, 48, 52, 56, 251, 298, 308, 326, 350, 368, 374, 379, 380, 393, 397, 859, 958, 972, 977, 979, 983, 997, 1004, 1011, 1013, 1017, 1018], "similarli": [4, 12, 37, 91, 124, 167, 185, 196, 226, 256, 292, 298, 326, 350, 355, 364, 366, 370, 373, 381, 382, 390, 396, 397, 401, 957, 959, 960, 962, 969, 976, 977, 979, 988, 992, 1012, 1018], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 55, 57, 112, 142, 145, 161, 167, 168, 179, 227, 252, 254, 265, 267, 268, 279, 287, 306, 319, 322, 323, 329, 339, 340, 341, 353, 354, 355, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 379, 381, 384, 390, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 407, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 443, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 469, 472, 473, 476, 477, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 601, 608, 609, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 688, 701, 709, 710, 718, 751, 754, 758, 759, 760, 761, 763, 764, 767, 768, 769, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 898, 899, 901, 909, 910, 914, 915, 930, 931, 932, 933, 936, 946, 947, 951, 952, 958, 959, 962, 964, 965, 968, 970, 972, 976, 977, 978, 983, 985, 988, 995, 996, 997, 999, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "shorter": [4, 154, 244, 379, 393, 398, 403, 431, 438, 544, 678, 964, 968, 997, 1015], "necessarili": [4, 31, 71, 97, 166, 196, 204, 214, 230, 231, 242, 300, 339, 340, 362, 372, 391, 393, 400, 608, 827, 829, 830, 831, 956, 959, 961, 962], "59": [4, 8, 97, 172, 214, 295, 365, 374, 394, 491, 962, 1000, 1004], "37": [4, 259, 314, 363, 400, 505, 697, 859, 1004], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 57, 59, 61, 70, 71, 79, 85, 96, 99, 111, 114, 117, 118, 121, 124, 127, 143, 144, 148, 150, 153, 154, 155, 157, 161, 165, 167, 175, 177, 179, 182, 192, 197, 198, 208, 209, 219, 230, 235, 237, 246, 251, 252, 254, 256, 266, 274, 279, 284, 286, 287, 300, 302, 303, 306, 309, 310, 319, 322, 323, 327, 328, 331, 334, 335, 336, 341, 344, 346, 347, 350, 355, 363, 364, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 380, 381, 384, 391, 393, 394, 397, 399, 400, 401, 403, 420, 432, 434, 446, 447, 480, 496, 497, 498, 499, 527, 534, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 569, 570, 572, 578, 609, 611, 612, 613, 614, 678, 679, 681, 682, 683, 769, 777, 779, 783, 787, 791, 795, 800, 801, 802, 809, 840, 852, 880, 883, 886, 887, 888, 889, 893, 896, 918, 919, 923, 935, 947, 952, 958, 961, 962, 963, 965, 969, 972, 973, 974, 976, 977, 978, 982, 983, 986, 993, 995, 996, 1001, 1004, 1005, 1007, 1010, 1014, 1017, 1018, 1019, 1020], "turn": [4, 32, 77, 160, 161, 166, 211, 212, 230, 256, 280, 341, 354, 356, 363, 379, 381, 382, 392, 393, 394, 396, 398, 401, 402, 403, 562, 563, 570, 588, 589, 808, 812, 880, 883, 901, 952, 956, 964, 967, 972, 986, 997, 1009, 1011, 1012, 1017], "downstream": [4, 79, 341, 401, 512, 515, 518, 522, 523, 587, 852, 972, 1014], "freedom": [4, 96, 153, 184, 185, 187, 256, 522, 637, 775, 958, 1007], "underfit": [4, 121, 148, 163, 168, 249, 271, 272, 292, 638, 777, 780, 781, 791, 801, 802, 839, 854, 957, 958], "approxim": [4, 5, 27, 33, 46, 53, 79, 98, 99, 104, 113, 120, 121, 149, 166, 173, 176, 192, 196, 197, 210, 214, 224, 225, 228, 231, 239, 247, 256, 261, 270, 277, 285, 290, 298, 300, 301, 303, 306, 309, 339, 341, 346, 347, 350, 357, 360, 365, 377, 379, 381, 390, 391, 394, 396, 397, 398, 400, 403, 405, 406, 407, 415, 430, 450, 451, 454, 455, 456, 457, 463, 464, 465, 472, 477, 483, 502, 505, 514, 515, 516, 517, 519, 520, 521, 522, 524, 525, 526, 527, 528, 540, 541, 563, 570, 591, 592, 600, 619, 620, 621, 622, 623, 638, 639, 640, 653, 655, 657, 658, 660, 668, 673, 738, 739, 744, 775, 778, 795, 800, 804, 805, 819, 820, 823, 827, 829, 830, 831, 835, 839, 840, 845, 849, 851, 852, 856, 867, 878, 883, 884, 914, 915, 936, 955, 956, 957, 958, 959, 961, 965, 966, 967, 968, 969, 970, 974, 976, 977, 978, 982, 983, 997, 999, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "especi": [4, 8, 55, 118, 121, 166, 196, 311, 330, 340, 350, 355, 362, 368, 376, 379, 381, 391, 393, 401, 425, 430, 482, 519, 538, 539, 540, 541, 545, 546, 547, 627, 628, 629, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 650, 661, 676, 686, 726, 814, 815, 816, 817, 818, 886, 887, 888, 889, 958, 964, 965, 970, 972, 986, 1007, 1012, 1016, 1017, 1018], "sharp": [4, 167, 969, 972], "rush": [4, 368], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 79, 94, 123, 148, 155, 166, 167, 211, 214, 256, 263, 267, 310, 339, 340, 350, 367, 391, 393, 395, 398, 400, 401, 402, 419, 425, 428, 432, 434, 440, 512, 519, 521, 523, 524, 526, 527, 528, 588, 589, 615, 780, 781, 819, 820, 914, 915, 954, 959, 962, 978, 1018], "tend": [4, 12, 27, 37, 39, 43, 52, 56, 166, 167, 185, 196, 200, 201, 214, 241, 244, 253, 257, 274, 295, 341, 354, 356, 368, 370, 381, 391, 393, 395, 398, 400, 402, 419, 429, 634, 825, 856, 867, 915, 958, 959, 965, 978, 997], "under": [4, 7, 11, 24, 25, 27, 41, 66, 77, 78, 102, 118, 121, 167, 196, 225, 234, 256, 263, 265, 266, 299, 334, 362, 368, 370, 372, 374, 376, 381, 384, 387, 391, 393, 395, 397, 398, 401, 402, 432, 434, 451, 452, 453, 454, 455, 456, 457, 513, 520, 522, 524, 635, 636, 637, 683, 687, 688, 689, 696, 722, 734, 768, 769, 775, 776, 824, 958, 959, 960, 962, 965, 972, 976, 977, 978, 982, 983, 997, 1004, 1006, 1007, 1009, 1012, 1016], "These": [4, 5, 7, 27, 51, 94, 96, 100, 114, 117, 163, 167, 185, 196, 197, 198, 200, 226, 263, 274, 276, 280, 295, 298, 305, 310, 315, 317, 350, 354, 355, 361, 364, 365, 368, 370, 372, 375, 377, 379, 381, 384, 387, 390, 391, 392, 393, 396, 398, 400, 401, 402, 403, 424, 429, 479, 489, 490, 496, 519, 548, 549, 583, 584, 649, 657, 658, 687, 713, 736, 758, 772, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 824, 825, 844, 951, 953, 956, 958, 959, 962, 963, 973, 975, 977, 982, 988, 992, 997, 1004, 1010, 1012, 1013, 1014, 1017], "systemat": [4, 256, 370, 693, 708, 962, 1019], "reveal": [4, 166, 168, 339, 374, 390, 959], "form": [4, 9, 19, 32, 42, 59, 66, 94, 131, 155, 156, 166, 231, 247, 256, 314, 350, 362, 365, 368, 370, 372, 381, 382, 390, 392, 393, 396, 397, 398, 399, 400, 401, 403, 405, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 440, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 680, 775, 776, 777, 780, 781, 782, 785, 787, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 904, 951, 953, 955, 956, 958, 959, 962, 963, 966, 967, 968, 972, 977, 982, 988, 995, 1010, 1014, 1016], "explain": [4, 5, 12, 55, 72, 84, 85, 103, 121, 148, 153, 154, 167, 168, 196, 214, 225, 247, 266, 269, 339, 340, 355, 366, 368, 372, 387, 389, 396, 398, 403, 474, 502, 505, 515, 522, 525, 530, 606, 629, 637, 650, 661, 702, 703, 704, 708, 765, 958, 965, 978, 981, 982, 993, 995, 996, 1015, 1017, 1018], "lack": [4, 368, 370, 379, 397, 804, 893, 977, 1018], "deriv": [4, 19, 104, 105, 120, 153, 156, 168, 184, 185, 189, 197, 355, 363, 370, 391, 395, 397, 399, 400, 401, 403, 405, 423, 427, 446, 514, 587, 598, 603, 629, 650, 657, 661, 836, 837, 852, 858, 878, 879, 956, 958, 959, 962, 966, 968, 977, 1004, 1005, 1006, 1011, 1012, 1013, 1019], "address": [4, 48, 339, 363, 368, 393, 401, 638, 958, 959, 964, 965, 966, 967, 968, 972, 986, 995, 1012], "section": [4, 37, 94, 99, 112, 128, 134, 135, 136, 137, 153, 157, 165, 166, 167, 175, 184, 185, 198, 221, 226, 236, 254, 256, 259, 265, 303, 308, 339, 340, 341, 350, 361, 363, 366, 368, 369, 370, 372, 373, 374, 375, 376, 382, 387, 391, 392, 394, 396, 397, 398, 400, 401, 402, 403, 421, 425, 440, 515, 595, 600, 603, 618, 626, 768, 776, 880, 883, 951, 956, 958, 962, 963, 965, 966, 968, 969, 976, 977, 979, 981, 995, 997, 1004, 1006, 1007, 1008, 1011], "margin": [4, 12, 25, 27, 149, 150, 152, 153, 154, 163, 166, 167, 174, 215, 256, 298, 321, 324, 326, 328, 337, 365, 391, 392, 398, 400, 403, 493, 591, 592, 626, 657, 715, 808, 856, 867, 880, 883, 958, 962, 964, 968, 969, 972, 976, 977, 995, 1011, 1013], "construct": [4, 11, 69, 71, 109, 111, 113, 116, 128, 214, 226, 236, 238, 274, 289, 299, 301, 307, 310, 362, 365, 370, 377, 381, 393, 397, 398, 400, 401, 404, 416, 423, 424, 426, 427, 431, 433, 438, 444, 446, 448, 500, 516, 522, 525, 536, 537, 562, 568, 620, 669, 671, 672, 791, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 838, 839, 840, 841, 843, 883, 897, 899, 914, 915, 925, 951, 952, 954, 958, 959, 962, 963, 965, 972, 975, 977, 978, 983, 988, 992, 1009, 1011, 1012, 1015, 1018], "polynomialfeatur": [4, 175, 196, 197, 202, 236, 270, 308, 858, 958, 972, 1008, 1012, 1013, 1014, 1017, 1018], "coars": [4, 117, 374, 429, 442], "too": [4, 7, 12, 17, 44, 50, 56, 61, 69, 73, 81, 98, 121, 160, 168, 197, 218, 229, 242, 250, 254, 263, 271, 294, 326, 339, 346, 347, 354, 365, 368, 374, 376, 379, 381, 393, 395, 397, 400, 401, 402, 405, 419, 430, 519, 569, 572, 660, 673, 688, 814, 815, 816, 817, 818, 844, 857, 859, 957, 959, 961, 962, 964, 965, 969, 995, 1005, 1008, 1011, 1012, 1013, 1014, 1016], "mani": [4, 7, 10, 19, 55, 73, 77, 81, 115, 116, 117, 119, 122, 141, 145, 168, 196, 217, 229, 242, 250, 256, 263, 264, 268, 276, 298, 303, 306, 307, 308, 309, 310, 339, 350, 354, 356, 363, 365, 367, 368, 380, 381, 382, 390, 393, 394, 395, 398, 400, 401, 402, 403, 405, 484, 534, 535, 538, 539, 540, 541, 545, 546, 547, 569, 572, 587, 590, 608, 620, 631, 635, 639, 640, 647, 649, 657, 658, 659, 673, 676, 680, 754, 758, 777, 781, 791, 836, 837, 852, 857, 859, 878, 886, 887, 888, 889, 951, 952, 954, 958, 959, 961, 962, 963, 964, 965, 968, 969, 970, 972, 975, 977, 979, 981, 982, 983, 986, 995, 997, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1019], "featureunion": [4, 73, 360, 381, 392, 445, 610, 841, 952, 983, 986, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "hour_workday_interact": 4, "interaction_onli": [4, 854, 958, 972], "combin": [4, 12, 25, 27, 60, 69, 70, 72, 73, 94, 103, 104, 107, 119, 123, 132, 148, 154, 161, 163, 166, 196, 213, 214, 221, 225, 230, 256, 257, 265, 267, 268, 285, 293, 308, 309, 311, 329, 341, 345, 354, 360, 364, 365, 368, 373, 380, 381, 390, 391, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 427, 445, 447, 448, 454, 456, 457, 460, 461, 462, 470, 477, 489, 490, 496, 502, 505, 507, 512, 518, 519, 521, 523, 528, 530, 541, 543, 546, 548, 549, 591, 595, 597, 602, 605, 611, 615, 624, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 653, 654, 655, 656, 657, 659, 660, 662, 665, 710, 768, 777, 780, 781, 788, 789, 800, 802, 806, 838, 840, 844, 852, 853, 854, 859, 878, 936, 951, 954, 955, 958, 962, 963, 965, 968, 972, 975, 976, 979, 986, 993, 995, 997, 1004, 1009, 1012, 1015, 1016, 1017, 1019, 1020], "ones": [4, 11, 34, 43, 70, 80, 124, 148, 172, 201, 225, 228, 256, 264, 267, 283, 302, 315, 336, 354, 355, 368, 376, 381, 393, 395, 397, 400, 431, 513, 547, 562, 591, 592, 625, 626, 639, 640, 651, 657, 684, 774, 779, 784, 795, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 854, 858, 920, 958, 962, 967, 968, 972, 977, 995, 1004, 1012, 1013, 1014], "previou": [4, 43, 53, 70, 94, 112, 118, 121, 128, 148, 153, 154, 165, 166, 167, 182, 197, 229, 231, 256, 259, 263, 298, 303, 310, 339, 340, 341, 350, 354, 363, 368, 370, 373, 374, 376, 379, 381, 382, 384, 393, 400, 401, 449, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 611, 627, 629, 633, 634, 639, 641, 643, 647, 648, 649, 650, 657, 658, 659, 661, 688, 796, 810, 813, 828, 836, 837, 875, 892, 958, 962, 966, 972, 983, 988, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "nice": [4, 66, 197, 298, 354, 398, 997], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 264, 340, 374], "104": [4, 24, 25, 28], "highlight": [4, 79, 91, 148, 149, 154, 214, 302, 312, 339, 341, 357, 368, 372, 373, 376, 379, 403, 425, 428, 445, 448, 471, 472, 477, 482, 485, 493, 496, 505, 519, 542, 543, 545, 546, 548, 580, 583, 609, 611, 615, 621, 627, 629, 633, 639, 650, 661, 669, 698, 728, 768, 777, 780, 781, 791, 805, 821, 823, 840, 844, 849, 852, 853, 854, 858, 859, 875, 876, 878, 883, 887, 910, 959, 962, 970, 972, 977, 1014, 1015, 1016, 1017, 1018, 1019], "anoth": [4, 37, 94, 99, 123, 145, 148, 156, 161, 166, 185, 204, 222, 225, 235, 242, 256, 258, 259, 262, 266, 286, 339, 341, 344, 350, 354, 356, 362, 363, 366, 368, 370, 374, 379, 381, 387, 390, 393, 397, 398, 400, 401, 402, 404, 424, 426, 433, 436, 443, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 489, 519, 521, 528, 654, 657, 673, 690, 700, 783, 838, 839, 951, 957, 958, 959, 962, 963, 965, 968, 972, 976, 977, 988, 995, 996, 997, 1013, 1014], "either": [4, 10, 30, 70, 117, 118, 166, 184, 186, 226, 251, 260, 265, 281, 339, 348, 354, 355, 360, 363, 366, 368, 369, 370, 374, 381, 387, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 424, 428, 433, 468, 477, 493, 505, 514, 515, 517, 525, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 563, 564, 565, 569, 570, 571, 572, 574, 575, 578, 583, 588, 589, 591, 592, 603, 608, 611, 613, 614, 631, 635, 637, 645, 657, 659, 663, 664, 671, 678, 679, 683, 687, 688, 692, 693, 701, 704, 706, 707, 708, 715, 719, 720, 722, 732, 736, 749, 754, 758, 762, 765, 768, 769, 772, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 809, 868, 869, 875, 878, 879, 886, 887, 888, 889, 893, 922, 951, 958, 962, 963, 964, 965, 966, 967, 970, 972, 976, 977, 988, 996, 997, 1004, 1007, 1013, 1014, 1015, 1018], "after": [4, 17, 20, 21, 26, 46, 53, 69, 70, 74, 80, 96, 109, 119, 126, 128, 131, 141, 145, 153, 155, 157, 160, 166, 172, 189, 196, 234, 235, 238, 244, 256, 265, 276, 284, 286, 298, 299, 302, 303, 339, 340, 356, 363, 365, 366, 367, 368, 370, 372, 374, 375, 376, 379, 381, 382, 387, 389, 390, 393, 394, 397, 398, 401, 402, 403, 405, 424, 428, 431, 432, 433, 434, 437, 443, 496, 513, 517, 534, 535, 540, 541, 542, 543, 578, 608, 611, 639, 640, 647, 648, 649, 654, 656, 657, 658, 659, 673, 693, 706, 736, 772, 775, 776, 780, 781, 828, 835, 839, 852, 858, 878, 883, 884, 951, 952, 956, 958, 962, 966, 967, 972, 974, 976, 977, 978, 983, 988, 995, 997, 1004, 1007, 1011, 1012, 1015, 1016, 1019], "quadrat": [4, 29, 35, 153, 157, 163, 210, 258, 309, 392, 422, 439, 442, 530, 531, 604, 629, 639, 640, 650, 657, 661, 697, 883, 884, 958, 959, 962, 965, 968, 972, 976, 977, 984, 999, 1005], "tractabl": [4, 397, 615, 982, 1017], "nystr\u00f6m": 4, "latter": [4, 14, 246, 256, 265, 266, 284, 303, 334, 356, 365, 368, 381, 397, 400, 401, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 722, 775, 776, 777, 780, 781, 786, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 929, 965, 1013], "kernel_approxim": [4, 160, 163, 171, 172, 210, 225, 230, 308, 357, 658, 738, 739, 845, 954, 988, 1005, 1011, 1020], "nystroem": [4, 160, 210, 225, 230, 360, 621, 622, 623, 658, 845, 883, 884, 999, 1005, 1011, 1014, 1016, 1017, 1018], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 137, 172, 256, 323, 330, 333, 433, 516, 601, 745, 754, 777, 854, 880, 881, 882, 883, 884, 958, 972, 995], "n_compon": [4, 5, 6, 12, 14, 44, 52, 56, 57, 58, 69, 71, 72, 73, 84, 85, 89, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 126, 172, 195, 217, 218, 219, 220, 221, 222, 225, 229, 230, 232, 236, 241, 242, 243, 244, 245, 246, 247, 255, 280, 285, 295, 303, 308, 310, 340, 370, 373, 374, 381, 396, 398, 405, 432, 433, 443, 445, 463, 464, 465, 466, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 620, 621, 622, 623, 669, 670, 671, 672, 673, 674, 675, 676, 677, 775, 776, 828, 835, 838, 870, 871, 872, 915, 954, 956, 959, 961, 965, 993, 996, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018], "300": [4, 20, 21, 34, 35, 38, 50, 57, 97, 109, 110, 111, 161, 186, 222, 225, 229, 245, 259, 286, 301, 308, 314, 332, 334, 370, 425, 428, 429, 440, 442, 620, 625, 626, 660, 671, 673, 675, 836, 958, 1014], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 69, 70, 74, 81, 85, 91, 94, 96, 99, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 134, 141, 142, 144, 148, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 177, 178, 182, 188, 195, 196, 199, 200, 202, 203, 204, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 230, 232, 233, 234, 235, 237, 238, 241, 243, 244, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 274, 276, 280, 284, 285, 286, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 317, 324, 326, 327, 328, 334, 335, 339, 340, 344, 348, 350, 370, 373, 377, 380, 381, 389, 393, 394, 397, 398, 400, 401, 405, 416, 419, 420, 422, 425, 428, 430, 432, 433, 434, 435, 439, 440, 441, 443, 450, 455, 469, 472, 473, 476, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 565, 574, 575, 588, 589, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 613, 614, 615, 616, 619, 620, 621, 622, 623, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 657, 658, 659, 660, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 715, 768, 771, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 803, 804, 805, 807, 809, 810, 811, 812, 813, 824, 828, 835, 836, 837, 839, 844, 856, 867, 870, 871, 878, 879, 880, 883, 886, 887, 888, 889, 891, 892, 914, 915, 931, 933, 936, 951, 952, 954, 957, 962, 963, 964, 965, 966, 969, 970, 972, 977, 978, 988, 992, 993, 997, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "053": [4, 340, 365, 374], "002": [4, 12, 131, 132, 365], "076": [4, 866], "004": [4, 37, 67, 340], "almost": [4, 119, 120, 198, 204, 270, 303, 317, 350, 361, 363, 372, 374, 379, 380, 381, 393, 397, 398, 451, 452, 453, 454, 456, 457, 458, 775, 951, 957, 958, 961, 962, 977, 996, 997, 1012, 1017], "rival": [4, 875, 975], "intermedi": [4, 7, 52, 114, 121, 326, 401, 540, 541, 600, 839, 962, 1016], "compound": [4, 214, 401, 591, 593, 661, 704, 732, 958, 997], "one_hot_poly_pipelin": 4, "082": [4, 231], "006": [4, 13, 15, 340, 374], "111": [4, 7, 8, 16, 66, 89, 100, 101, 108, 193, 211, 221, 256, 276, 831, 1007], "competit": [4, 121, 339, 625, 965], "low": [4, 11, 12, 37, 50, 80, 85, 96, 98, 102, 112, 124, 145, 168, 189, 191, 196, 198, 210, 217, 219, 225, 229, 234, 241, 242, 244, 247, 250, 256, 258, 262, 263, 271, 282, 283, 294, 302, 317, 325, 326, 339, 348, 364, 365, 368, 373, 376, 381, 384, 390, 391, 392, 397, 398, 401, 424, 430, 502, 505, 516, 563, 570, 584, 660, 673, 677, 686, 706, 722, 769, 824, 915, 927, 930, 951, 954, 957, 958, 959, 961, 962, 965, 967, 968, 969, 970, 972, 974, 977, 978, 984, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1018, 1019], "rank": [4, 17, 25, 79, 98, 102, 115, 143, 168, 169, 214, 254, 256, 264, 364, 388, 390, 391, 395, 396, 398, 400, 401, 489, 490, 502, 505, 530, 531, 574, 575, 587, 629, 638, 650, 661, 677, 680, 701, 706, 707, 719, 720, 736, 772, 780, 781, 915, 951, 953, 954, 959, 970, 972, 986, 999, 1005, 1010, 1013, 1014, 1018, 1019], "fact": [4, 11, 19, 25, 80, 85, 121, 168, 229, 238, 339, 362, 375, 379, 381, 396, 398, 399, 400, 401, 630, 649, 651, 685, 956, 958, 965, 972, 976, 977, 983, 986, 1018], "smoother": [4, 5, 121, 167, 294, 399], "allow": [4, 55, 57, 73, 74, 98, 99, 112, 113, 126, 148, 153, 155, 157, 190, 196, 214, 218, 226, 229, 235, 237, 238, 241, 256, 274, 306, 307, 308, 309, 311, 331, 339, 348, 350, 354, 362, 366, 368, 369, 370, 372, 375, 377, 381, 382, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 423, 426, 427, 445, 447, 448, 504, 505, 515, 534, 535, 540, 541, 542, 543, 548, 549, 563, 564, 570, 574, 575, 578, 584, 591, 592, 596, 608, 609, 611, 615, 619, 624, 627, 628, 633, 634, 639, 641, 642, 643, 644, 657, 659, 662, 663, 664, 665, 669, 673, 742, 745, 754, 758, 761, 770, 771, 775, 776, 777, 779, 780, 781, 784, 786, 788, 791, 798, 805, 825, 834, 841, 842, 845, 846, 851, 862, 871, 873, 874, 875, 878, 879, 886, 887, 888, 889, 896, 898, 899, 909, 910, 926, 951, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 972, 974, 975, 976, 977, 978, 982, 983, 986, 988, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 56, 64, 72, 79, 80, 94, 96, 98, 99, 105, 119, 128, 148, 152, 154, 156, 157, 167, 184, 185, 198, 204, 217, 219, 221, 222, 228, 246, 255, 256, 257, 267, 284, 285, 286, 303, 306, 328, 329, 334, 339, 340, 344, 355, 365, 366, 368, 369, 370, 373, 374, 377, 379, 380, 381, 382, 390, 393, 395, 396, 398, 400, 401, 402, 404, 423, 426, 427, 431, 432, 433, 434, 443, 512, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 539, 546, 563, 570, 591, 592, 628, 631, 634, 635, 636, 637, 639, 640, 652, 669, 688, 709, 710, 718, 762, 763, 764, 767, 768, 772, 777, 791, 821, 822, 823, 825, 827, 829, 830, 831, 852, 853, 858, 870, 871, 872, 886, 887, 889, 895, 914, 915, 917, 951, 952, 954, 957, 958, 959, 961, 962, 963, 966, 968, 972, 976, 977, 978, 981, 983, 986, 988, 990, 992, 993, 995, 996, 997, 1004, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 56, 58, 65, 69, 70, 71, 74, 94, 97, 99, 108, 114, 118, 120, 121, 122, 123, 141, 148, 151, 152, 153, 154, 155, 156, 161, 163, 165, 166, 167, 174, 175, 178, 183, 194, 196, 197, 202, 204, 209, 210, 212, 214, 215, 217, 226, 228, 231, 235, 237, 246, 254, 256, 257, 258, 259, 264, 265, 270, 276, 292, 298, 306, 307, 309, 310, 319, 323, 324, 325, 326, 327, 328, 332, 334, 336, 339, 340, 345, 350, 354, 355, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 379, 380, 381, 384, 387, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 419, 422, 425, 426, 427, 428, 429, 431, 433, 435, 438, 439, 440, 441, 442, 445, 446, 450, 452, 453, 455, 459, 469, 470, 472, 473, 476, 478, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 553, 556, 562, 563, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 588, 589, 590, 591, 592, 596, 598, 600, 601, 603, 604, 608, 609, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 679, 680, 681, 683, 684, 685, 687, 692, 693, 697, 700, 702, 703, 704, 708, 712, 714, 715, 718, 720, 721, 722, 730, 735, 737, 741, 742, 743, 745, 748, 751, 754, 758, 759, 760, 761, 762, 763, 765, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 855, 856, 857, 858, 859, 862, 864, 867, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 896, 905, 907, 908, 909, 914, 915, 928, 929, 930, 932, 933, 936, 937, 946, 951, 952, 953, 955, 957, 959, 960, 963, 965, 966, 967, 968, 969, 970, 972, 975, 976, 978, 982, 983, 984, 988, 991, 992, 993, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "abl": [4, 5, 9, 24, 47, 60, 81, 85, 98, 99, 125, 154, 166, 185, 196, 212, 214, 221, 262, 267, 326, 350, 354, 355, 356, 362, 366, 368, 370, 372, 373, 379, 395, 397, 401, 466, 484, 515, 804, 851, 951, 952, 958, 961, 962, 963, 968, 972, 975, 978, 979, 983, 988, 996, 997, 1010, 1011, 1015], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 172, 278, 334, 341, 354, 389, 395, 401, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 787, 819, 820, 886, 887, 888, 889, 951, 962, 965, 978, 986, 991, 995, 1007, 1008], "depth": [4, 108, 114, 118, 122, 124, 129, 344, 346, 347, 348, 354, 366, 368, 372, 380, 400, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 819, 820, 824, 886, 887, 888, 889, 890, 892, 920, 967, 968, 978, 1006, 1007, 1015], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 69, 70, 71, 72, 109, 115, 119, 120, 126, 141, 142, 144, 149, 169, 172, 196, 204, 211, 212, 243, 254, 255, 256, 257, 258, 260, 262, 271, 278, 284, 285, 286, 295, 300, 303, 314, 315, 317, 326, 329, 350, 354, 370, 380, 381, 392, 393, 397, 400, 401, 402, 410, 419, 430, 450, 452, 453, 459, 513, 515, 522, 530, 531, 532, 534, 536, 538, 539, 540, 542, 545, 546, 548, 550, 591, 615, 639, 640, 647, 649, 652, 655, 656, 657, 673, 678, 684, 689, 694, 699, 714, 718, 723, 734, 743, 767, 772, 774, 803, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 826, 828, 829, 836, 873, 874, 878, 880, 883, 886, 888, 914, 915, 951, 956, 957, 958, 959, 963, 965, 966, 970, 974, 976, 978, 992, 997, 1012, 1013], "On": [4, 12, 17, 26, 66, 70, 71, 84, 85, 99, 108, 112, 114, 115, 116, 121, 124, 125, 128, 131, 140, 142, 152, 153, 166, 167, 168, 177, 184, 185, 198, 226, 227, 228, 229, 231, 235, 236, 237, 238, 241, 243, 246, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 268, 295, 298, 300, 302, 303, 307, 308, 310, 311, 316, 326, 348, 354, 366, 369, 370, 372, 379, 381, 387, 391, 393, 397, 398, 400, 402, 403, 624, 637, 672, 715, 741, 951, 955, 958, 961, 962, 964, 968, 975, 977, 992, 995], "contrari": [4, 13, 166, 218, 222, 241, 259, 298, 339, 362, 393, 477, 525, 587, 794, 958, 964, 968], "significantli": [4, 24, 25, 37, 77, 78, 119, 145, 166, 167, 168, 196, 204, 212, 214, 256, 276, 307, 308, 340, 341, 350, 355, 372, 393, 398, 400, 401, 406, 450, 455, 460, 461, 519, 521, 528, 539, 546, 627, 628, 633, 634, 641, 642, 643, 644, 665, 673, 819, 820, 954, 958, 959, 965, 970, 977, 1004, 1006, 1007, 1011, 1012, 1017, 1018, 1019], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 71, 73, 94, 112, 124, 140, 144, 148, 156, 160, 165, 167, 178, 190, 196, 204, 214, 225, 256, 257, 259, 261, 263, 264, 265, 268, 281, 289, 292, 293, 300, 309, 310, 314, 339, 340, 354, 355, 356, 363, 364, 367, 368, 369, 370, 374, 380, 381, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 403, 405, 430, 445, 453, 490, 514, 515, 517, 518, 519, 520, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 569, 570, 572, 575, 583, 613, 614, 615, 625, 626, 627, 628, 633, 634, 639, 641, 642, 643, 644, 646, 647, 648, 649, 657, 658, 659, 666, 667, 678, 697, 699, 719, 743, 768, 771, 775, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 803, 804, 806, 835, 836, 837, 838, 854, 858, 878, 895, 904, 930, 951, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 982, 983, 986, 993, 996, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "compet": 4, "access": [4, 49, 77, 242, 247, 339, 348, 354, 355, 368, 369, 370, 376, 379, 381, 382, 393, 395, 396, 400, 401, 403, 431, 438, 445, 517, 548, 549, 550, 551, 598, 680, 837, 838, 839, 893, 923, 958, 961, 962, 968, 969, 970, 976, 977, 983, 986, 988, 996, 997, 1004, 1006, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 56, 57, 66, 69, 89, 98, 100, 101, 114, 118, 122, 124, 128, 145, 167, 185, 193, 196, 214, 217, 219, 226, 229, 238, 257, 265, 267, 276, 278, 298, 303, 308, 309, 339, 340, 341, 362, 365, 366, 368, 370, 372, 374, 376, 379, 381, 382, 384, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 410, 419, 420, 421, 426, 431, 433, 438, 443, 445, 448, 450, 463, 464, 465, 477, 489, 502, 505, 516, 522, 530, 531, 532, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 560, 561, 562, 591, 592, 600, 608, 613, 614, 615, 624, 639, 640, 647, 649, 652, 655, 656, 657, 658, 659, 667, 670, 672, 673, 674, 676, 680, 704, 709, 710, 722, 727, 729, 732, 743, 764, 767, 777, 780, 781, 784, 786, 791, 802, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 839, 840, 841, 843, 853, 854, 855, 857, 859, 866, 870, 871, 873, 874, 878, 879, 880, 883, 886, 887, 888, 889, 928, 948, 951, 956, 957, 958, 959, 962, 963, 964, 965, 966, 968, 969, 972, 976, 977, 978, 983, 988, 995, 997, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "geograph": [4, 11, 289, 363, 479], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 74, 128, 166, 252, 311, 962, 1019], "nrow": [4, 5, 32, 56, 65, 72, 94, 157, 167, 196, 198, 204, 214, 217, 218, 221, 258, 259, 276, 300, 302, 303, 311, 315, 333, 334, 993], "ncol": [4, 5, 32, 53, 56, 65, 94, 99, 105, 167, 196, 197, 198, 204, 214, 217, 218, 228, 252, 258, 259, 267, 276, 293, 299, 300, 302, 303, 311, 333, 334, 340], "sharex": [4, 7, 14, 72, 91, 99, 129, 157, 167, 198, 258, 281, 317, 993], "sharei": [4, 74, 91, 99, 105, 129, 157, 167, 196, 198, 204, 258, 267, 281, 299, 333, 334, 340], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 74, 128, 166, 252, 311, 682], "residual_vs_predict": [4, 74, 252, 311, 682], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 74, 103, 128, 140, 166, 167, 246, 250, 252, 265, 308, 311, 323, 326, 339, 355, 356, 361, 363, 368, 370, 374, 379, 380, 391, 393, 396, 397, 398, 400, 401, 402, 469, 470, 484, 489, 490, 502, 505, 569, 613, 614, 682, 907, 958, 964, 969, 978, 1007, 1016, 1018, 1019], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 58, 59, 60, 61, 69, 78, 80, 81, 85, 95, 97, 104, 108, 112, 119, 120, 122, 123, 134, 150, 152, 157, 169, 176, 178, 187, 196, 218, 219, 222, 225, 230, 233, 234, 241, 242, 243, 244, 246, 247, 251, 258, 259, 265, 266, 281, 285, 286, 288, 295, 300, 301, 314, 315, 317, 319, 324, 326, 333, 334, 339, 345, 363, 540, 541, 545, 546, 761, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "pred": [4, 7, 11, 32, 335, 339, 363, 629, 650, 661, 678, 683, 687, 699, 709, 710, 718, 763, 764, 767, 768, 962], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 62, 63, 64, 74, 85, 91, 94, 95, 98, 103, 104, 105, 109, 111, 113, 128, 129, 154, 160, 163, 166, 167, 168, 181, 187, 188, 196, 204, 205, 217, 229, 242, 246, 247, 254, 258, 259, 260, 263, 265, 276, 281, 284, 292, 293, 294, 300, 302, 303, 318, 323, 334, 335, 345, 366, 400, 803, 997, 1000], "disp": [4, 32, 111, 124, 125, 250, 259, 303, 307, 323, 328, 420, 612, 678, 681, 682, 828], "from_predict": [4, 32, 74, 128, 166, 234, 252, 263, 265, 309, 314, 339, 375, 420, 612, 678, 679, 681, 682, 683, 699, 707, 762, 764, 767, 768, 769, 962, 1001, 1017, 1018, 1019], "y_true": [4, 19, 32, 58, 74, 128, 151, 196, 206, 214, 244, 317, 368, 414, 420, 421, 446, 463, 464, 465, 533, 535, 537, 538, 539, 541, 543, 545, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 678, 679, 681, 682, 683, 684, 688, 689, 690, 693, 694, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 774, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 1005, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 56, 61, 69, 74, 108, 121, 122, 128, 142, 166, 196, 198, 203, 206, 211, 213, 214, 225, 226, 234, 252, 254, 259, 283, 287, 295, 303, 317, 318, 350, 368, 375, 381, 400, 414, 421, 446, 463, 464, 465, 530, 533, 535, 537, 538, 539, 541, 543, 545, 546, 548, 549, 551, 592, 612, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 678, 679, 681, 682, 683, 684, 689, 693, 694, 699, 702, 703, 704, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 763, 764, 765, 767, 768, 774, 777, 780, 781, 791, 800, 810, 812, 813, 822, 830, 837, 839, 878, 879, 880, 881, 882, 883, 884, 887, 889, 962, 964, 993, 1010, 1011, 1013, 1015, 1019, 1020], "scatter_kwarg": [4, 74, 128, 166, 682], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 59, 63, 105, 126, 130, 167, 169, 187, 212, 230, 241, 267, 268, 274, 292, 294, 300, 301, 323], "num": [4, 12, 70, 145, 148, 153, 154, 155, 167, 168, 198, 263, 264, 310, 613, 951], "set_ytick": [4, 16, 31, 34, 43, 59, 63, 105, 126, 160, 161, 169, 187, 212, 241, 267, 292, 294, 300, 301, 323, 341], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 71, 74, 78, 79, 80, 84, 96, 98, 102, 103, 104, 108, 111, 112, 113, 119, 120, 121, 122, 123, 125, 128, 130, 131, 135, 141, 148, 149, 155, 157, 166, 167, 178, 180, 181, 186, 190, 196, 197, 198, 199, 202, 203, 206, 209, 210, 213, 214, 220, 228, 229, 230, 231, 232, 243, 244, 251, 254, 255, 256, 259, 260, 263, 266, 269, 270, 271, 281, 282, 283, 293, 299, 302, 303, 307, 310, 316, 325, 328, 333, 339, 345, 347, 791, 856, 867], "upper": [4, 7, 9, 24, 71, 74, 78, 79, 80, 108, 111, 112, 113, 120, 121, 122, 123, 128, 130, 141, 152, 154, 157, 166, 190, 196, 202, 203, 206, 210, 213, 214, 229, 232, 233, 255, 256, 257, 281, 282, 283, 293, 303, 317, 325, 328, 333, 393, 399, 444, 569, 570, 572, 576, 594, 595, 596, 598, 600, 601, 603, 604, 606, 613, 614, 616, 618, 631, 635, 658, 715, 852, 880, 881, 882, 902, 961, 962, 965, 972, 976, 977, 978, 1012], "bbox_to_anchor": [4, 37, 157, 261, 333], "set_aspect": [4, 151, 207, 243, 335], "equal": [4, 11, 12, 26, 37, 39, 53, 59, 79, 85, 109, 121, 151, 166, 197, 198, 200, 207, 213, 235, 243, 246, 250, 254, 256, 265, 286, 300, 326, 328, 335, 340, 363, 364, 368, 370, 381, 390, 391, 393, 397, 398, 400, 401, 406, 419, 422, 423, 424, 425, 427, 428, 430, 435, 440, 444, 450, 455, 460, 461, 484, 493, 496, 500, 513, 514, 515, 520, 522, 524, 525, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 569, 574, 575, 578, 580, 581, 588, 589, 606, 609, 610, 613, 614, 615, 616, 618, 622, 623, 626, 630, 639, 640, 652, 680, 684, 699, 701, 709, 748, 763, 767, 768, 772, 774, 777, 778, 780, 781, 790, 791, 795, 800, 807, 811, 812, 819, 820, 821, 822, 827, 828, 829, 830, 831, 836, 837, 842, 843, 844, 851, 854, 857, 858, 859, 861, 868, 875, 878, 879, 885, 886, 887, 888, 889, 904, 915, 937, 943, 956, 958, 962, 963, 965, 966, 968, 972, 976, 977, 978, 996, 997, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "adjust": [4, 9, 36, 38, 49, 57, 67, 77, 121, 163, 225, 230, 237, 257, 306, 318, 334, 340, 375, 393, 398, 400, 401, 505, 534, 535, 538, 540, 542, 543, 545, 639, 640, 647, 649, 655, 656, 657, 685, 686, 689, 695, 696, 735, 737, 766, 773, 814, 815, 817, 818, 849, 870, 871, 878, 879, 880, 883, 886, 888, 904, 961, 962, 966, 972, 995, 1001, 1004, 1010], "box": [4, 10, 30, 167, 168, 218, 298, 302, 375, 398, 400, 493, 536, 537, 855, 866, 890, 892, 962, 963, 969, 972, 978, 982, 988, 1012], "showseem": [4, 9, 46, 121, 167, 196, 221, 225, 257, 293, 302, 339, 340, 367, 368, 373, 397, 482, 958, 962], "regim": [4, 381, 878, 879, 961], "overal": [4, 43, 48, 112, 128, 153, 214, 253, 276, 303, 340, 354, 367, 368, 374, 390, 391, 400, 403, 428, 430, 445, 452, 453, 459, 530, 959, 962, 978, 986, 1014], "closer": [4, 27, 37, 97, 99, 127, 148, 167, 175, 341, 391, 393, 398, 430, 534, 609, 693, 821, 822, 827, 829, 830, 831, 977, 1011], "diagon": [4, 25, 40, 81, 84, 214, 234, 243, 246, 247, 250, 326, 390, 393, 395, 403, 434, 459, 462, 492, 494, 508, 513, 531, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 631, 632, 635, 636, 637, 663, 664, 682, 696, 770, 775, 776, 823, 831, 956, 958, 961, 962, 965, 972, 1010, 1012, 1013, 1014], "obtain": [4, 7, 9, 12, 27, 48, 56, 57, 70, 73, 74, 99, 102, 118, 121, 122, 126, 134, 145, 150, 152, 166, 167, 196, 198, 210, 221, 241, 242, 243, 252, 256, 257, 258, 262, 265, 303, 309, 324, 340, 341, 348, 350, 363, 365, 379, 381, 387, 391, 393, 395, 396, 398, 400, 401, 402, 403, 419, 424, 450, 477, 513, 514, 536, 537, 538, 539, 540, 541, 544, 545, 546, 574, 587, 595, 626, 640, 642, 647, 649, 653, 655, 657, 658, 668, 689, 693, 706, 719, 736, 771, 783, 804, 807, 808, 811, 825, 836, 856, 867, 880, 883, 886, 887, 915, 952, 954, 956, 958, 959, 961, 962, 963, 965, 966, 968, 969, 972, 976, 977, 1010, 1012, 1015, 1017, 1018, 1019], "slightli": [4, 25, 63, 81, 112, 118, 121, 124, 128, 145, 148, 149, 150, 168, 175, 196, 220, 222, 264, 276, 306, 323, 341, 367, 368, 379, 391, 393, 400, 401, 403, 405, 569, 570, 572, 619, 639, 780, 781, 878, 880, 883, 914, 915, 951, 958, 972, 976, 977, 1013, 1017, 1018], "cost": [4, 39, 97, 148, 163, 172, 217, 230, 258, 265, 306, 326, 340, 341, 343, 349, 368, 374, 376, 379, 391, 393, 400, 459, 481, 518, 519, 520, 527, 538, 539, 540, 541, 545, 546, 583, 591, 600, 608, 627, 628, 633, 634, 641, 642, 643, 644, 649, 653, 655, 657, 659, 668, 669, 673, 805, 878, 879, 880, 883, 886, 887, 888, 889, 915, 954, 958, 959, 962, 965, 975, 976, 977, 984, 999, 1010, 1013, 1014], "durat": [4, 8, 196, 214, 278, 341, 355, 928, 929, 958], "regressor": [4, 74, 85, 122, 127, 128, 131, 148, 153, 161, 163, 166, 174, 176, 178, 196, 199, 213, 214, 215, 307, 308, 354, 368, 370, 379, 381, 391, 394, 403, 414, 418, 446, 463, 464, 465, 466, 505, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 546, 547, 548, 549, 550, 551, 586, 587, 590, 592, 613, 614, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 648, 650, 651, 653, 654, 659, 660, 682, 807, 808, 811, 812, 813, 822, 830, 835, 836, 837, 840, 846, 854, 859, 879, 881, 884, 886, 887, 888, 889, 892, 907, 909, 951, 952, 958, 962, 963, 965, 970, 976, 984, 992, 999, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1019], "mlpregressor": [4, 167, 235, 356, 835, 836, 966, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hidden": [4, 167, 294, 295, 376, 390, 398, 835, 836, 837, 966, 967, 982, 1004, 1015], "layer": [4, 163, 167, 212, 235, 291, 294, 295, 296, 354, 376, 400, 495, 496, 503, 548, 805, 835, 836, 837, 840, 859, 967, 984, 999, 1010], "cyclic": [4, 627, 628, 633, 634, 641, 642, 643, 644, 1016], "within": [4, 59, 114, 115, 116, 127, 142, 144, 145, 192, 197, 198, 208, 214, 235, 254, 255, 259, 269, 298, 299, 308, 324, 327, 334, 341, 350, 354, 363, 368, 372, 377, 379, 381, 382, 390, 393, 394, 397, 399, 400, 404, 426, 429, 442, 444, 445, 450, 455, 496, 530, 548, 549, 550, 551, 574, 575, 613, 673, 677, 680, 691, 705, 761, 775, 776, 782, 783, 795, 796, 803, 804, 819, 820, 821, 822, 827, 829, 830, 831, 838, 839, 840, 852, 863, 864, 866, 867, 868, 869, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 956, 958, 959, 965, 968, 972, 975, 977, 978, 983, 986, 988, 992, 995, 997, 1006, 1007, 1011, 1012, 1017, 1018], "finer": [4, 37, 278, 326, 355, 393, 397, 951, 965, 1014], "resolut": [4, 11, 17, 104, 167, 288, 289, 326, 382, 988, 1014], "taken": [4, 7, 31, 42, 53, 123, 153, 166, 229, 230, 244, 262, 300, 363, 365, 367, 368, 372, 381, 387, 392, 393, 397, 401, 403, 405, 422, 514, 564, 565, 627, 628, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 658, 660, 662, 665, 676, 852, 853, 872, 875, 881, 882, 962, 964, 972, 974, 1010, 1013, 1016, 1017], "everi": [4, 94, 160, 194, 197, 218, 231, 242, 247, 265, 309, 350, 363, 366, 368, 370, 372, 376, 381, 382, 393, 395, 397, 398, 401, 422, 435, 489, 512, 517, 520, 526, 538, 540, 541, 545, 571, 572, 584, 627, 628, 630, 633, 634, 640, 641, 642, 643, 644, 645, 646, 647, 649, 653, 654, 655, 656, 657, 666, 667, 668, 673, 677, 734, 751, 759, 760, 790, 828, 886, 888, 890, 892, 904, 955, 957, 962, 963, 964, 972, 978, 986, 992, 1004, 1008, 1010, 1013, 1017], "offer": [4, 370, 376, 379, 380, 384, 397, 398, 400, 401, 951, 952, 963, 966, 978, 982, 983, 986, 1010], "view": [4, 16, 30, 42, 46, 77, 96, 167, 193, 198, 236, 354, 356, 368, 393, 401, 517, 626, 638, 819, 820, 893, 958, 959], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 56, 60, 77, 78, 79, 80, 81, 90, 95, 96, 97, 104, 110, 111, 121, 124, 158, 161, 175, 186, 225, 229, 243, 244, 248, 281, 289, 302, 323, 357, 360, 364, 370, 373, 381, 393, 395, 398, 399, 405, 433, 450, 451, 452, 453, 454, 455, 456, 457, 477, 485, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 511, 513, 525, 530, 531, 544, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 624, 625, 653, 658, 661, 684, 704, 721, 732, 756, 775, 776, 777, 791, 814, 815, 816, 817, 818, 819, 820, 824, 855, 859, 866, 870, 871, 872, 956, 958, 959, 960, 968, 984, 986, 996, 998, 999, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 70, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 100, 101, 102, 107, 110, 112, 114, 115, 116, 117, 120, 121, 123, 124, 125, 128, 131, 132, 137, 140, 141, 144, 148, 149, 152, 154, 155, 157, 160, 161, 163, 164, 165, 170, 175, 176, 177, 178, 180, 185, 186, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 209, 210, 213, 214, 217, 218, 220, 221, 222, 224, 225, 230, 231, 233, 234, 239, 241, 242, 244, 245, 246, 247, 249, 251, 253, 256, 257, 259, 261, 263, 265, 266, 267, 268, 270, 272, 274, 276, 281, 282, 283, 288, 292, 299, 301, 302, 307, 308, 310, 314, 315, 318, 319, 325, 326, 328, 329, 331, 332, 333, 334, 336, 339, 340, 346, 347, 354, 355, 357, 360, 364, 371, 373, 379, 380, 381, 388, 391, 393, 401, 402, 416, 422, 425, 428, 430, 432, 433, 434, 435, 439, 440, 441, 443, 445, 450, 451, 452, 453, 454, 455, 456, 457, 469, 470, 472, 473, 476, 477, 478, 483, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 516, 517, 519, 520, 521, 522, 525, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 563, 564, 565, 570, 588, 589, 591, 592, 608, 611, 613, 615, 620, 621, 622, 623, 624, 627, 628, 630, 631, 633, 634, 635, 639, 641, 642, 643, 644, 651, 652, 653, 657, 658, 659, 660, 670, 671, 672, 673, 674, 675, 676, 682, 685, 686, 689, 711, 723, 761, 771, 775, 776, 777, 779, 780, 781, 782, 789, 791, 792, 793, 794, 795, 796, 797, 798, 804, 805, 810, 812, 813, 814, 815, 816, 818, 819, 820, 824, 828, 835, 836, 837, 839, 842, 844, 853, 856, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 901, 914, 915, 933, 936, 952, 954, 957, 959, 961, 962, 966, 967, 968, 970, 972, 977, 978, 982, 983, 984, 988, 992, 993, 995, 996, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "constant": [4, 104, 112, 151, 155, 161, 166, 184, 197, 198, 200, 214, 227, 236, 259, 288, 293, 295, 299, 301, 307, 334, 336, 350, 360, 370, 377, 381, 390, 400, 403, 414, 446, 463, 464, 465, 492, 494, 515, 519, 521, 528, 530, 531, 532, 533, 535, 537, 539, 541, 543, 546, 549, 551, 571, 587, 590, 592, 594, 608, 611, 613, 614, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 657, 658, 659, 660, 661, 668, 670, 674, 676, 702, 703, 704, 708, 755, 757, 765, 812, 813, 822, 830, 836, 837, 844, 855, 858, 866, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 956, 958, 959, 962, 964, 965, 972, 976, 978, 999, 1007, 1012, 1014, 1016, 1017, 1018], "varianc": [4, 5, 27, 44, 56, 61, 72, 77, 79, 84, 85, 94, 95, 96, 99, 102, 103, 105, 107, 123, 132, 155, 157, 163, 166, 174, 176, 185, 196, 198, 201, 214, 215, 246, 253, 256, 259, 265, 266, 269, 285, 292, 298, 303, 340, 350, 360, 364, 377, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 403, 405, 423, 427, 430, 444, 502, 505, 513, 514, 515, 522, 525, 530, 531, 536, 537, 539, 540, 541, 546, 584, 588, 589, 592, 606, 624, 625, 626, 633, 637, 638, 641, 643, 653, 654, 655, 656, 657, 668, 691, 708, 765, 775, 776, 817, 828, 843, 849, 855, 857, 859, 864, 866, 868, 869, 887, 889, 937, 938, 939, 943, 956, 957, 958, 960, 965, 966, 967, 974, 976, 977, 978, 979, 984, 993, 995, 996, 999, 1004, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "poisson": [4, 163, 174, 215, 232, 364, 400, 445, 446, 477, 504, 533, 539, 543, 546, 629, 650, 653, 661, 687, 704, 725, 729, 730, 732, 805, 839, 840, 843, 844, 852, 853, 854, 859, 887, 889, 919, 958, 978, 1014, 1015, 1016, 1017, 1018], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 99, 129, 137, 172, 210, 225, 230, 231, 254, 256, 258, 261, 267, 271, 308, 314, 315, 317, 319, 323, 325, 326, 329, 330, 332, 333, 336, 396, 398, 403, 433, 516, 543, 600, 601, 620, 621, 622, 624, 625, 626, 629, 661, 666, 672, 704, 727, 732, 739, 746, 755, 756, 757, 775, 788, 791, 873, 874, 875, 880, 881, 882, 883, 884, 951, 954, 957, 958, 960, 975, 977, 988, 992, 993, 995, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1019, 1020], "achiev": [4, 12, 17, 19, 27, 31, 97, 109, 117, 119, 126, 156, 172, 196, 204, 253, 256, 263, 303, 317, 326, 329, 334, 339, 350, 354, 356, 362, 363, 365, 370, 374, 379, 381, 390, 391, 393, 397, 398, 400, 401, 534, 539, 546, 621, 630, 657, 659, 688, 720, 743, 780, 781, 815, 859, 951, 952, 954, 958, 962, 972, 975, 977, 985, 997, 1017], "gridsearchcv": [4, 54, 68, 70, 72, 73, 75, 77, 102, 163, 231, 236, 246, 249, 254, 255, 256, 257, 261, 264, 267, 272, 278, 280, 295, 300, 308, 326, 350, 355, 370, 379, 381, 394, 397, 483, 501, 521, 522, 556, 580, 588, 634, 684, 722, 788, 791, 839, 849, 878, 886, 951, 958, 962, 966, 976, 977, 982, 983, 992, 993, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "tweedieregressor": [4, 307, 310, 629, 650, 958, 1015, 1018, 1019], "power": [4, 7, 17, 119, 165, 197, 214, 247, 259, 264, 280, 298, 299, 302, 314, 323, 354, 355, 380, 391, 393, 396, 399, 400, 401, 404, 426, 463, 464, 465, 513, 516, 522, 525, 611, 661, 675, 680, 704, 727, 729, 732, 821, 822, 829, 830, 832, 833, 854, 855, 856, 866, 867, 914, 915, 958, 959, 962, 970, 972, 976, 977, 986, 1007, 1010, 1012, 1014, 1015, 1017], "param_grid": [4, 6, 70, 71, 72, 73, 121, 231, 236, 246, 254, 255, 256, 260, 261, 264, 267, 278, 300, 326, 381, 394, 400, 722, 777, 780, 788, 789, 951, 962, 992, 993], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 355, 362, 363, 365, 374, 381, 390, 393, 399, 401, 404, 414, 426, 446, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 485, 486, 491, 493, 495, 496, 500, 503, 504, 517, 518, 525, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 551, 564, 565, 571, 575, 577, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 678, 685, 686, 694, 709, 710, 711, 714, 718, 719, 737, 749, 763, 764, 767, 772, 773, 774, 777, 791, 800, 801, 802, 812, 813, 814, 815, 822, 824, 830, 837, 854, 858, 879, 881, 884, 886, 887, 888, 889, 915, 951, 958, 959, 962, 963, 964, 965, 972, 976, 977, 978, 993, 997, 1005, 1010, 1012, 1020], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 355, 368, 369, 370, 371, 372, 374, 379, 381, 384, 401, 983, 985, 997], "559": [4, 15, 244, 248, 284, 290, 597], "secondplot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 355, 366, 368, 369, 372, 374, 376, 381, 384, 401, 404, 422, 426, 435, 442, 446, 479, 511, 625, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 848, 849, 851, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 910, 962, 982, 995, 997, 1004, 1006, 1010, 1014, 1018], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 369, 394, 449, 876, 978, 982, 983, 1015, 1018], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 363, 368, 370, 381, 384, 386, 993, 1004, 1008, 1011], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 368, 372, 381, 384, 386, 997, 1004, 1011], "kernelpca": [5, 394, 398, 514, 515, 522, 525, 669, 671, 673, 845, 972, 1005, 1006, 1010, 1013, 1014, 1015, 1016, 1017, 1018], "take": [5, 8, 27, 30, 46, 53, 56, 65, 74, 79, 89, 91, 94, 109, 117, 148, 150, 153, 157, 166, 172, 179, 204, 205, 221, 243, 244, 251, 257, 261, 265, 266, 274, 276, 279, 282, 283, 284, 286, 287, 298, 310, 317, 322, 323, 326, 336, 340, 341, 345, 354, 355, 356, 362, 363, 366, 368, 370, 373, 374, 375, 376, 379, 381, 382, 391, 393, 394, 396, 397, 398, 400, 401, 402, 403, 405, 419, 425, 428, 430, 431, 433, 438, 439, 440, 442, 444, 450, 500, 514, 519, 520, 521, 527, 528, 562, 573, 576, 577, 579, 580, 581, 591, 592, 597, 601, 602, 605, 613, 624, 630, 652, 654, 655, 656, 657, 660, 672, 673, 680, 686, 688, 690, 700, 709, 710, 718, 722, 723, 736, 751, 754, 758, 759, 760, 761, 763, 764, 767, 768, 777, 778, 782, 783, 791, 795, 803, 821, 822, 823, 825, 827, 828, 829, 830, 831, 843, 873, 874, 878, 879, 880, 881, 882, 883, 884, 902, 932, 951, 954, 958, 959, 961, 962, 963, 965, 967, 968, 969, 972, 977, 978, 986, 988, 992, 994, 1001, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "exact": [5, 7, 81, 99, 153, 200, 230, 276, 350, 354, 355, 362, 368, 370, 377, 379, 380, 381, 393, 402, 403, 416, 463, 464, 465, 469, 477, 515, 516, 522, 542, 543, 619, 623, 627, 673, 777, 791, 800, 801, 802, 880, 883, 951, 954, 958, 959, 968, 972, 976, 977, 1011, 1012, 1014], "usp": 5, "digit": [5, 29, 35, 36, 51, 67, 71, 87, 92, 133, 138, 143, 163, 187, 203, 212, 216, 221, 223, 229, 230, 254, 255, 258, 280, 285, 291, 293, 294, 296, 313, 320, 361, 368, 374, 393, 399, 400, 402, 423, 427, 428, 483, 522, 525, 530, 547, 639, 669, 670, 671, 672, 673, 685, 686, 694, 698, 699, 717, 771, 773, 801, 805, 821, 828, 835, 839, 840, 849, 859, 864, 871, 874, 883, 890, 891, 892, 951, 957, 959, 962, 965, 967, 975, 988, 992, 995, 996, 999, 1008], "reproduc": [5, 12, 59, 109, 166, 172, 184, 265, 295, 355, 357, 367, 368, 370, 371, 376, 379, 381, 387, 393, 397, 398, 401, 405, 422, 435, 441, 450, 455, 469, 472, 473, 476, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 534, 535, 536, 537, 540, 541, 542, 543, 544, 588, 589, 591, 592, 615, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 641, 642, 643, 644, 647, 648, 649, 652, 657, 659, 660, 670, 671, 673, 674, 675, 771, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 803, 804, 805, 809, 810, 813, 824, 828, 835, 836, 837, 844, 856, 867, 870, 871, 878, 879, 880, 883, 914, 915, 933, 936, 954, 982, 985, 1004, 1012, 1017, 1018], "sect": 5, "bak\u0131r": [5, 398, 516], "g\u00f6khan": [5, 398, 516], "h": [5, 6, 48, 57, 94, 95, 108, 109, 110, 126, 150, 166, 243, 281, 284, 292, 300, 310, 319, 322, 341, 365, 374, 393, 395, 398, 399, 400, 401, 404, 426, 500, 513, 516, 519, 521, 528, 534, 548, 549, 563, 571, 588, 589, 670, 674, 685, 689, 737, 814, 818, 819, 820, 825, 835, 850, 859, 954, 956, 958, 959, 960, 962, 964, 966, 967, 976, 978, 993, 1010, 1015, 1019, 1020], "jason": [5, 398, 516, 874, 1010, 1012, 1016, 1019], "weston": [5, 398, 516, 574, 575, 874], "bernhard": [5, 398, 516, 810, 845, 874, 963, 968, 977, 1010], "sch\u00f6lkopf": [5, 398, 516, 845, 968, 972, 977], "pre": [5, 70, 118, 166, 185, 298, 341, 357, 366, 368, 381, 384, 395, 397, 398, 400, 401, 402, 404, 405, 425, 426, 428, 440, 514, 516, 671, 693, 743, 842, 883, 962, 967, 972, 977, 978, 982, 983, 999, 1007, 1012, 1018], "advanc": [5, 163, 224, 226, 239, 256, 356, 393, 398, 470, 482, 516, 613, 620, 763, 775, 828, 837, 840, 859, 887, 954, 965, 972, 986, 1001, 1006], "neural": [5, 6, 31, 256, 294, 357, 379, 381, 387, 397, 398, 400, 405, 514, 516, 519, 521, 528, 548, 549, 620, 626, 677, 721, 775, 828, 835, 836, 837, 845, 954, 958, 959, 960, 962, 965, 968, 972, 976, 978, 982, 984, 986, 993, 998, 999, 1004, 1016], "system": [5, 99, 256, 263, 350, 354, 355, 356, 363, 365, 368, 369, 370, 371, 376, 379, 384, 393, 398, 400, 404, 426, 459, 516, 520, 524, 531, 620, 626, 631, 632, 635, 636, 637, 663, 664, 706, 736, 749, 775, 828, 873, 874, 930, 958, 962, 965, 974, 982, 983, 986, 997, 1004, 1012, 1013], "2004": [5, 145, 256, 363, 365, 393, 395, 398, 454, 516, 588, 589, 670, 674, 686, 723, 763, 874, 956, 958, 959, 964, 977, 995], "449": [5, 398, 516], "456": [5, 77, 82, 398, 516], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 55, 56, 60, 64, 65, 66, 69, 70, 71, 73, 74, 81, 94, 96, 98, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 175, 176, 178, 181, 183, 184, 185, 187, 188, 189, 190, 196, 197, 198, 200, 201, 203, 204, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 244, 255, 257, 259, 260, 262, 269, 274, 276, 278, 281, 288, 289, 292, 295, 298, 299, 301, 302, 303, 314, 315, 316, 317, 319, 334, 339, 340, 341, 362, 368, 372, 376, 379, 381, 382, 397, 432, 515, 846, 954, 980, 982, 1007], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 56, 74, 81, 154, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 303, 334, 339, 340, 341, 512, 518, 639, 645, 666, 667, 738, 739, 960, 962], "licenc": [5, 362], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 94, 96, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 314, 315, 316, 317, 319, 330, 331, 334, 335, 339, 340, 341, 374], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 94, 96, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 225, 230, 231, 232, 234, 241, 243, 257, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 298, 299, 300, 301, 302, 303, 330, 331, 334, 335, 339, 340, 341], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 56, 60, 61, 65, 72, 74, 77, 78, 79, 84, 85, 95, 100, 109, 110, 112, 120, 121, 124, 125, 140, 151, 154, 155, 161, 163, 165, 166, 174, 175, 176, 177, 178, 180, 186, 189, 191, 194, 198, 199, 200, 202, 210, 215, 220, 234, 241, 246, 247, 250, 253, 256, 262, 281, 282, 297, 299, 303, 304, 307, 310, 317, 326, 340, 341, 350, 357, 360, 363, 364, 365, 368, 373, 377, 380, 381, 390, 391, 393, 394, 396, 399, 400, 401, 405, 422, 430, 432, 433, 434, 443, 445, 446, 456, 463, 464, 465, 470, 477, 493, 496, 500, 507, 508, 514, 517, 522, 523, 525, 529, 530, 533, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 560, 561, 563, 569, 570, 571, 572, 592, 606, 608, 620, 631, 632, 635, 636, 637, 639, 640, 645, 646, 650, 653, 657, 661, 668, 672, 676, 678, 684, 685, 687, 699, 704, 706, 714, 716, 721, 725, 729, 730, 732, 735, 736, 737, 741, 750, 772, 773, 774, 780, 781, 805, 807, 816, 818, 824, 825, 828, 839, 840, 843, 844, 847, 848, 849, 852, 853, 854, 855, 856, 857, 859, 863, 864, 866, 867, 868, 869, 873, 874, 886, 887, 888, 889, 914, 915, 919, 938, 939, 944, 945, 951, 956, 958, 959, 960, 961, 964, 968, 973, 975, 977, 978, 993, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "pixel": [5, 6, 13, 32, 47, 48, 53, 94, 107, 132, 143, 163, 172, 229, 254, 294, 295, 365, 393, 398, 400, 401, 402, 474, 475, 476, 545, 566, 567, 588, 589, 615, 965, 967, 978, 993, 996], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 70, 74, 85, 99, 108, 114, 115, 119, 120, 121, 122, 123, 124, 127, 141, 142, 165, 166, 168, 169, 172, 191, 196, 203, 204, 211, 212, 214, 226, 237, 238, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 318, 344, 348, 350, 373, 380, 394, 397, 400, 419, 420, 539, 541, 548, 549, 678, 679, 681, 683, 777, 807, 810, 828, 836, 837, 839, 888, 889, 951, 952, 962, 964, 965, 970, 972, 977, 993, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1017], "data_id": [5, 118, 153, 166, 196, 214, 226, 362, 477], "41082": 5, "return_x_i": [5, 7, 14, 57, 69, 70, 71, 72, 94, 118, 119, 131, 134, 135, 136, 141, 160, 161, 168, 172, 181, 183, 184, 185, 187, 192, 193, 203, 211, 212, 226, 233, 237, 238, 252, 255, 258, 263, 264, 271, 274, 278, 285, 293, 294, 295, 303, 306, 308, 310, 311, 317, 329, 341, 344, 361, 373, 374, 380, 387, 393, 394, 397, 400, 402, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 485, 486, 491, 513, 514, 515, 516, 539, 542, 543, 548, 549, 573, 576, 577, 579, 580, 581, 583, 591, 600, 601, 603, 604, 619, 620, 639, 640, 649, 654, 655, 656, 669, 670, 671, 672, 682, 768, 780, 781, 783, 807, 812, 823, 828, 831, 887, 888, 889, 952, 957, 962, 963, 964, 965, 972, 988, 992, 993, 995, 996, 1001, 1010, 1012, 1014, 1017], "idea": [5, 53, 79, 80, 145, 153, 166, 197, 217, 281, 326, 344, 354, 355, 368, 373, 374, 395, 396, 397, 398, 399, 400, 402, 588, 589, 958, 959, 962, 965, 968, 981, 986, 997], "noisi": [5, 33, 49, 61, 95, 141, 148, 154, 195, 198, 200, 220, 228, 247, 257, 263, 265, 266, 303, 346, 347, 350, 393, 401, 404, 426, 431, 502, 505, 915, 957, 959, 965, 977, 982], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 56, 60, 65, 70, 71, 74, 78, 79, 94, 96, 97, 104, 110, 124, 127, 130, 149, 153, 156, 157, 166, 167, 169, 172, 175, 176, 178, 180, 182, 184, 186, 187, 188, 190, 195, 196, 197, 198, 205, 206, 207, 209, 211, 212, 214, 215, 219, 220, 222, 228, 229, 230, 231, 235, 241, 243, 247, 251, 252, 254, 256, 259, 261, 266, 267, 270, 281, 282, 283, 295, 299, 300, 302, 309, 318, 319, 324, 325, 327, 328, 329, 333, 334, 336, 339, 340, 344, 347, 348, 354, 356, 363, 365, 368, 370, 373, 374, 390, 393, 394, 397, 398, 399, 400, 401, 419, 423, 427, 430, 452, 453, 459, 471, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 509, 511, 512, 515, 517, 518, 520, 525, 526, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 591, 612, 613, 614, 620, 621, 622, 623, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 646, 648, 650, 652, 661, 662, 665, 669, 670, 671, 672, 674, 726, 775, 776, 779, 803, 804, 809, 814, 815, 816, 818, 819, 820, 824, 836, 837, 855, 857, 868, 951, 952, 955, 959, 962, 963, 969, 972, 974, 988, 992, 996, 997, 1012, 1013, 1014, 1017, 1018], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 60, 61, 66, 74, 85, 94, 95, 97, 99, 102, 110, 112, 121, 125, 126, 147, 148, 153, 158, 163, 175, 177, 178, 180, 185, 186, 191, 194, 195, 198, 199, 201, 213, 220, 222, 225, 227, 228, 231, 256, 264, 269, 270, 288, 292, 293, 300, 307, 333, 346, 347, 350, 364, 370, 373, 391, 393, 398, 400, 402, 404, 426, 433, 492, 494, 495, 496, 497, 498, 499, 503, 505, 506, 511, 513, 515, 522, 588, 589, 592, 594, 595, 596, 597, 598, 602, 603, 605, 606, 625, 626, 630, 631, 632, 634, 635, 636, 637, 644, 645, 646, 652, 660, 673, 856, 867, 873, 955, 957, 958, 959, 962, 965, 975, 995, 996, 1005, 1010, 1015, 1017, 1018], "approach": [5, 8, 57, 62, 65, 98, 145, 148, 160, 166, 169, 178, 184, 196, 198, 204, 214, 217, 339, 340, 341, 356, 367, 368, 374, 377, 381, 384, 387, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 419, 425, 429, 433, 443, 501, 513, 563, 570, 616, 639, 640, 655, 656, 808, 824, 915, 951, 952, 958, 959, 962, 963, 965, 966, 972, 976, 977, 981, 982, 986, 990, 995, 996, 1008], "copi": [5, 12, 17, 44, 61, 74, 97, 112, 160, 161, 166, 167, 168, 182, 189, 202, 212, 214, 218, 276, 314, 315, 317, 319, 340, 345, 355, 365, 368, 370, 372, 373, 374, 379, 381, 416, 419, 422, 424, 425, 426, 428, 430, 435, 440, 463, 464, 465, 466, 481, 483, 491, 513, 514, 515, 516, 522, 529, 534, 535, 540, 542, 543, 553, 571, 578, 588, 589, 591, 592, 609, 611, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 652, 653, 655, 660, 662, 665, 666, 667, 712, 749, 777, 791, 819, 820, 834, 842, 845, 848, 849, 850, 851, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 869, 873, 874, 878, 880, 881, 882, 883, 884, 893, 896, 898, 899, 933, 935, 936, 972, 977, 978, 983, 989, 992, 997, 1004, 1007, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 74, 79, 80, 85, 95, 117, 120, 141, 145, 148, 153, 154, 155, 160, 161, 178, 180, 185, 191, 197, 199, 211, 220, 225, 229, 231, 263, 265, 266, 276, 288, 300, 302, 306, 308, 309, 329, 333, 334, 340, 354, 366, 367, 368, 369, 370, 372, 374, 376, 381, 384, 391, 397, 400, 401, 402, 496, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 583, 608, 609, 611, 613, 639, 640, 675, 678, 798, 819, 820, 875, 905, 930, 951, 952, 961, 968, 972, 975, 976, 983, 995, 996, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "corrupt": [5, 102, 180, 202, 213, 379, 835, 958, 970], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 55, 56, 57, 66, 69, 70, 74, 79, 94, 95, 108, 110, 120, 121, 122, 126, 128, 131, 139, 142, 146, 148, 153, 154, 156, 167, 168, 169, 185, 196, 197, 204, 213, 214, 217, 225, 232, 253, 254, 259, 276, 289, 295, 298, 299, 301, 303, 308, 310, 319, 324, 340, 344, 354, 355, 357, 362, 363, 364, 365, 366, 369, 370, 371, 376, 381, 382, 383, 391, 394, 398, 399, 401, 403, 404, 405, 419, 426, 428, 429, 430, 431, 433, 437, 438, 442, 444, 445, 446, 447, 448, 468, 482, 489, 490, 513, 514, 516, 517, 518, 519, 520, 522, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 559, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 588, 589, 591, 592, 597, 598, 599, 602, 605, 613, 614, 616, 617, 626, 627, 629, 631, 632, 633, 635, 636, 637, 645, 650, 652, 653, 654, 655, 656, 661, 663, 664, 666, 667, 668, 671, 673, 685, 698, 706, 715, 716, 717, 719, 721, 735, 736, 737, 773, 777, 779, 780, 781, 783, 784, 786, 791, 795, 796, 797, 803, 809, 810, 813, 821, 822, 823, 825, 827, 829, 830, 831, 836, 837, 841, 844, 851, 852, 854, 858, 867, 870, 871, 873, 874, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 901, 909, 923, 930, 931, 951, 953, 954, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 977, 978, 981, 982, 983, 984, 986, 992, 999, 1000, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015], "solv": [5, 6, 65, 148, 185, 230, 256, 367, 368, 369, 370, 373, 379, 393, 395, 397, 398, 403, 428, 434, 443, 459, 512, 518, 519, 520, 524, 526, 527, 528, 529, 616, 618, 627, 633, 635, 636, 645, 646, 651, 653, 655, 658, 666, 667, 668, 809, 878, 879, 882, 915, 953, 956, 958, 959, 962, 963, 976, 977, 978, 981, 982, 986, 990, 993, 997, 1010, 1014, 1017], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 99, 108, 109, 112, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 210, 211, 212, 214, 226, 233, 237, 238, 243, 245, 250, 253, 254, 259, 263, 265, 269, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 317, 318, 325, 339, 344, 348, 350, 354, 362, 370, 373, 380, 394, 397, 400, 419, 420, 490, 539, 540, 541, 548, 549, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 952, 962, 964, 965, 966, 968, 970, 972, 976, 977, 992, 993, 1001], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 99, 108, 109, 112, 114, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 153, 156, 165, 166, 167, 168, 169, 172, 176, 180, 186, 191, 193, 194, 202, 203, 204, 210, 211, 212, 214, 226, 228, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 270, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 317, 318, 325, 339, 344, 346, 347, 348, 350, 354, 362, 370, 373, 380, 394, 397, 400, 420, 451, 452, 453, 454, 455, 456, 457, 490, 539, 540, 541, 548, 549, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 952, 962, 964, 965, 966, 968, 972, 976, 977, 992, 993, 995, 1001, 1004], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 99, 108, 109, 112, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 211, 212, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 306, 307, 308, 314, 315, 317, 318, 319, 339, 344, 348, 350, 354, 362, 370, 373, 380, 394, 397, 400, 419, 420, 539, 540, 541, 548, 549, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 952, 962, 964, 965, 970, 972, 977, 992, 993, 1001], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 99, 108, 109, 112, 114, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 156, 165, 166, 167, 168, 169, 172, 180, 191, 193, 196, 202, 203, 204, 211, 212, 214, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 306, 307, 308, 317, 318, 339, 344, 348, 350, 362, 373, 380, 394, 397, 400, 420, 539, 540, 541, 548, 549, 678, 679, 681, 683, 805, 807, 810, 828, 836, 837, 839, 888, 889, 962, 964, 965, 972, 977, 992, 993, 1001, 1004], "stratifi": [5, 99, 115, 124, 141, 168, 211, 226, 238, 251, 256, 259, 265, 284, 285, 306, 370, 381, 532, 540, 548, 549, 583, 640, 647, 649, 657, 777, 780, 781, 783, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 828, 836, 933, 962, 965, 992, 1009, 1010, 1011, 1013, 1014, 1017], "train_siz": [5, 7, 10, 127, 149, 172, 212, 231, 258, 269, 308, 311, 334, 779, 783, 794, 797, 803, 805, 957, 992, 1004, 1005, 1010, 1011], "1_000": [5, 48, 71, 99, 148, 153, 155, 167, 229, 253, 682], "rng": [5, 20, 21, 31, 37, 50, 80, 85, 94, 96, 102, 110, 121, 124, 125, 127, 148, 149, 152, 154, 155, 157, 160, 161, 165, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 225, 231, 233, 234, 241, 251, 259, 262, 267, 268, 292, 302, 307, 308, 310, 314, 315, 319, 329, 334, 346, 347, 350, 355, 370, 373, 451, 455, 456, 457, 624, 630, 651, 653, 659, 789, 814, 815, 816, 818, 819, 820, 824, 827, 829, 830, 831, 856, 867, 870, 871, 873, 874, 875, 884, 988], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 60, 80, 81, 85, 94, 96, 102, 110, 120, 121, 124, 125, 127, 141, 148, 149, 152, 154, 155, 157, 160, 161, 165, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 220, 225, 231, 234, 241, 244, 251, 259, 262, 263, 265, 266, 267, 268, 292, 299, 301, 302, 307, 308, 310, 314, 315, 319, 329, 334, 346, 347, 370, 373, 377, 381, 398, 405, 422, 425, 428, 430, 432, 433, 434, 435, 439, 440, 441, 443, 450, 451, 455, 456, 457, 469, 472, 473, 476, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 564, 565, 588, 589, 591, 592, 608, 613, 615, 620, 621, 622, 623, 624, 627, 628, 630, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 653, 655, 657, 658, 659, 660, 668, 670, 671, 672, 673, 674, 675, 676, 682, 761, 771, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 803, 804, 805, 809, 810, 813, 814, 815, 816, 818, 819, 820, 824, 828, 835, 836, 837, 844, 856, 867, 870, 871, 873, 874, 875, 878, 879, 880, 883, 884, 886, 887, 888, 889, 901, 914, 915, 931, 933, 936, 972, 988, 999], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 97, 214, 267, 361, 370, 371, 380, 381, 397, 556, 992, 993, 1004, 1011, 1012, 1013, 1017], "qualit": [5, 6, 53, 60, 121, 196, 311, 363, 393, 421, 682, 993, 1019], "assess": [5, 37, 59, 119, 121, 166, 196, 214, 234, 252, 253, 255, 259, 391, 400, 682, 723, 961, 962, 968, 983, 1019], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 69, 77, 81, 85, 90, 99, 110, 112, 118, 120, 121, 153, 155, 166, 167, 176, 182, 186, 187, 197, 202, 211, 213, 214, 243, 256, 263, 268, 278, 289, 293, 295, 298, 300, 302, 308, 314, 319, 326, 331, 339, 340, 356, 361, 363, 365, 368, 371, 377, 381, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 423, 425, 427, 428, 430, 439, 440, 444, 456, 477, 479, 519, 521, 528, 536, 537, 538, 542, 543, 545, 563, 570, 571, 583, 588, 589, 631, 635, 636, 637, 639, 640, 660, 663, 664, 726, 780, 781, 795, 804, 807, 836, 837, 844, 871, 880, 883, 915, 951, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 974, 975, 978, 983, 986, 995, 996, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "img": [5, 50, 65, 487, 567], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 57, 79, 104, 110, 112, 117, 121, 126, 127, 128, 137, 148, 150, 152, 153, 154, 155, 166, 175, 186, 187, 189, 196, 209, 210, 218, 222, 225, 229, 231, 238, 243, 245, 259, 263, 265, 276, 281, 282, 288, 289, 292, 293, 294, 295, 300, 301, 310, 319, 325, 326, 330, 331, 332, 333, 335, 336, 339, 346, 347, 446, 474, 475, 476, 612, 699, 949, 962], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 57, 81, 88, 94, 97, 105, 150, 151, 152, 156, 169, 187, 212, 218, 233, 267, 280, 295, 314, 315, 326, 332, 335, 362, 613, 678, 993, 994, 1018], "grei": [5, 34, 266, 298, 363], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 77, 81, 84, 94, 218, 230, 233, 250, 255, 257, 258, 298, 315, 319, 326, 336, 339, 363, 368, 370, 393, 395, 400, 402, 424, 534, 535, 540, 541, 569, 572, 615, 637, 673, 696, 775, 776, 777, 780, 781, 791, 802, 919, 961, 967, 977, 983, 1004, 1008, 1009, 1011], "fontsiz": [5, 8, 10, 14, 34, 50, 59, 90, 97, 117, 140, 151, 152, 154, 157, 167, 176, 186, 195, 207, 218, 219, 244, 251, 260, 261, 262, 267, 268, 295, 302, 333, 892], "mse": [5, 7, 77, 78, 121, 122, 160, 161, 196, 198, 202, 270, 628, 634, 730, 962, 978, 1015, 1017], "quantit": [5, 6, 25, 60, 121, 131, 145, 252, 270, 365, 993], "nmse": [5, 270], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 61, 63, 66, 84, 91, 97, 104, 121, 127, 128, 140, 166, 167, 169, 172, 176, 185, 187, 192, 196, 211, 212, 213, 214, 225, 229, 255, 259, 260, 262, 264, 265, 266, 284, 285, 292, 300, 303, 310, 326, 339, 340, 350, 394, 397, 400, 803], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 56, 73, 74, 84, 85, 94, 99, 103, 108, 112, 114, 126, 128, 131, 134, 135, 137, 140, 143, 145, 152, 154, 160, 161, 164, 165, 167, 170, 172, 178, 182, 184, 185, 186, 191, 193, 194, 197, 198, 204, 208, 210, 212, 213, 214, 215, 216, 219, 221, 223, 228, 231, 232, 233, 236, 250, 252, 253, 254, 256, 259, 261, 262, 263, 264, 265, 266, 270, 281, 284, 285, 295, 298, 299, 300, 308, 309, 321, 323, 326, 327, 328, 330, 331, 334, 335, 337, 339, 346, 347, 355, 357, 360, 364, 365, 366, 370, 371, 373, 381, 383, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 405, 424, 436, 446, 448, 456, 463, 464, 465, 477, 482, 483, 493, 496, 502, 505, 513, 514, 515, 516, 517, 520, 522, 524, 525, 529, 530, 531, 535, 547, 563, 570, 574, 575, 587, 590, 595, 601, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 671, 672, 673, 674, 688, 697, 730, 733, 745, 747, 754, 765, 777, 788, 792, 802, 805, 819, 820, 824, 828, 835, 836, 837, 840, 845, 846, 849, 852, 854, 856, 857, 858, 859, 867, 871, 878, 879, 880, 881, 882, 883, 884, 951, 953, 954, 955, 957, 962, 965, 966, 967, 968, 969, 970, 976, 977, 982, 984, 986, 988, 991, 992, 997, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018], "radial": [5, 99, 148, 153, 155, 326, 360, 433, 603, 672, 960, 977, 999], "rbf": [5, 6, 10, 11, 16, 30, 31, 99, 129, 137, 148, 149, 150, 152, 153, 154, 155, 157, 163, 210, 224, 225, 231, 239, 254, 256, 258, 261, 319, 321, 323, 330, 332, 333, 337, 360, 394, 398, 400, 433, 483, 485, 516, 522, 591, 592, 593, 594, 597, 600, 601, 602, 604, 605, 620, 621, 622, 623, 624, 657, 672, 745, 754, 756, 777, 788, 791, 797, 839, 859, 873, 874, 878, 880, 881, 882, 883, 884, 951, 954, 955, 959, 962, 968, 972, 975, 988, 993, 999, 1010, 1015], "decomposit": [5, 6, 14, 17, 57, 69, 71, 72, 73, 85, 86, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 126, 132, 217, 218, 220, 230, 232, 236, 255, 280, 285, 303, 310, 340, 356, 357, 361, 374, 377, 381, 390, 394, 400, 430, 432, 433, 434, 443, 463, 464, 465, 476, 530, 537, 592, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 653, 654, 655, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 775, 776, 828, 835, 838, 841, 857, 887, 914, 915, 958, 959, 962, 979, 982, 984, 991, 993, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "kernel_pca": [5, 99, 394], "400": [5, 26, 50, 66, 67, 94, 108, 123, 127, 148, 161, 202, 222, 268, 293, 340, 363, 398, 476, 997], "1e": [5, 6, 7, 10, 17, 26, 46, 94, 148, 151, 153, 154, 155, 156, 157, 160, 166, 176, 189, 196, 197, 203, 210, 214, 220, 225, 231, 235, 241, 244, 247, 254, 264, 267, 294, 309, 318, 324, 326, 334, 339, 374, 405, 425, 428, 433, 440, 443, 452, 453, 459, 463, 464, 465, 512, 513, 514, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 540, 541, 542, 543, 573, 578, 592, 594, 595, 596, 600, 601, 603, 604, 606, 608, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 670, 671, 672, 673, 674, 675, 676, 708, 721, 765, 775, 776, 791, 814, 815, 816, 817, 818, 819, 820, 828, 836, 837, 844, 873, 874, 878, 879, 880, 881, 882, 883, 884, 948, 951, 962, 966, 970, 972, 976, 993, 997, 1012, 1017, 1018, 1019], "fit_inverse_transform": [5, 99, 516, 1013], "5e": [5, 94, 181, 576, 577, 579], "inde": [5, 7, 25, 39, 40, 53, 57, 81, 85, 99, 112, 144, 145, 148, 166, 168, 175, 184, 185, 196, 198, 258, 259, 263, 265, 276, 298, 303, 340, 350, 354, 367, 373, 380, 381, 382, 395, 400, 548, 549, 958, 972, 976, 1018], "least": [5, 14, 79, 80, 83, 86, 97, 119, 122, 145, 156, 163, 174, 175, 189, 196, 198, 201, 204, 213, 214, 215, 229, 256, 274, 303, 308, 309, 326, 340, 341, 354, 361, 363, 365, 367, 368, 372, 374, 376, 379, 381, 382, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 426, 429, 431, 437, 438, 439, 442, 455, 463, 464, 465, 466, 475, 497, 512, 518, 520, 522, 523, 524, 526, 527, 528, 529, 530, 538, 539, 540, 541, 543, 545, 546, 547, 574, 583, 616, 624, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 644, 645, 646, 647, 648, 649, 650, 652, 653, 655, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 673, 678, 693, 697, 699, 765, 778, 782, 783, 789, 791, 792, 793, 795, 796, 798, 800, 803, 804, 805, 836, 837, 840, 851, 859, 883, 886, 887, 888, 889, 907, 925, 952, 955, 959, 962, 965, 974, 976, 977, 978, 983, 984, 986, 995, 999, 1004, 1006, 1007, 1010, 1011, 1015], "hope": [5, 214, 381, 392, 1013], "remov": [5, 14, 16, 17, 54, 69, 74, 145, 160, 161, 166, 169, 257, 298, 306, 307, 308, 339, 340, 344, 350, 360, 363, 367, 368, 369, 372, 373, 377, 381, 393, 394, 397, 400, 401, 403, 404, 419, 424, 426, 428, 430, 431, 438, 440, 469, 470, 507, 515, 516, 518, 520, 522, 527, 534, 535, 536, 537, 538, 539, 545, 546, 548, 549, 550, 551, 560, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 592, 611, 613, 614, 619, 625, 631, 632, 635, 636, 637, 639, 645, 646, 652, 657, 673, 680, 721, 748, 758, 759, 760, 803, 826, 838, 839, 843, 844, 852, 856, 857, 859, 867, 881, 882, 884, 886, 887, 888, 889, 893, 909, 910, 912, 923, 952, 959, 965, 978, 984, 989, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "think": [5, 37, 167, 339, 340, 368, 399, 961, 983, 985, 986, 988], "happen": [5, 114, 184, 298, 340, 350, 354, 355, 367, 368, 372, 373, 374, 379, 381, 382, 384, 393, 395, 397, 400, 419, 496, 553, 639, 765, 857, 859, 878, 958, 962, 963, 977, 983, 997, 1012, 1016, 1017, 1019, 1020], "ridg": [5, 10, 13, 54, 74, 128, 145, 147, 158, 160, 163, 166, 167, 174, 175, 196, 197, 215, 224, 233, 239, 339, 354, 357, 379, 398, 400, 505, 516, 520, 524, 592, 596, 603, 606, 624, 625, 626, 628, 630, 638, 642, 654, 655, 656, 659, 668, 682, 730, 777, 791, 812, 884, 957, 962, 970, 972, 976, 977, 984, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1017, 1018, 1019], "x_reconstructed_kernel_pca": [5, 99], "inverse_transform": [5, 51, 54, 99, 142, 280, 340, 398, 401, 427, 446, 463, 464, 465, 514, 515, 516, 519, 520, 521, 522, 524, 525, 562, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 611, 777, 780, 781, 791, 839, 843, 844, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 859, 870, 871, 972, 973, 974, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "x_reconstructed_pca": [5, 99], "lower": [5, 16, 26, 30, 31, 33, 57, 78, 85, 94, 96, 102, 108, 109, 112, 117, 121, 124, 148, 150, 152, 154, 156, 167, 168, 181, 182, 186, 196, 197, 198, 199, 209, 217, 221, 228, 229, 233, 243, 247, 255, 256, 258, 259, 263, 264, 266, 269, 280, 282, 283, 300, 303, 310, 317, 326, 332, 339, 340, 341, 345, 363, 368, 391, 392, 393, 396, 397, 398, 399, 400, 401, 404, 426, 429, 445, 448, 479, 490, 513, 515, 522, 525, 534, 540, 541, 542, 543, 544, 569, 570, 572, 584, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 613, 614, 616, 618, 658, 660, 693, 697, 705, 708, 714, 719, 775, 776, 825, 827, 829, 830, 831, 833, 880, 881, 882, 885, 902, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 974, 976, 977, 978, 995, 1006, 1007, 1012, 1019], "analysi": [5, 7, 9, 25, 29, 35, 36, 56, 62, 67, 93, 95, 96, 98, 99, 101, 103, 106, 118, 163, 166, 167, 185, 218, 240, 248, 253, 256, 257, 261, 277, 290, 298, 303, 340, 357, 360, 363, 365, 368, 370, 382, 390, 393, 395, 400, 401, 405, 421, 428, 429, 454, 456, 457, 463, 464, 466, 483, 485, 493, 496, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 536, 537, 619, 669, 671, 672, 673, 674, 691, 700, 705, 706, 736, 768, 769, 770, 771, 775, 777, 801, 805, 821, 828, 839, 840, 845, 855, 859, 866, 914, 915, 952, 958, 959, 961, 962, 972, 981, 982, 984, 986, 989, 998, 999, 1004, 1005, 1006, 1008, 1013], "favor": [5, 81, 241, 247, 379, 395, 400, 614, 710, 785, 787, 838, 909, 951, 970, 1006, 1008, 1010, 1011, 1013, 1016, 1017, 1018, 1019, 1020], "background": [5, 11, 47, 65, 124, 295, 300, 363, 368, 376, 393, 474, 475, 959, 967, 976, 1014], "778": [5, 15], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 66, 67, 70, 71, 72, 73, 74, 79, 80, 81, 85, 92, 93, 97, 98, 99, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 147, 156, 158, 160, 161, 168, 169, 172, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 195, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 215, 219, 221, 222, 224, 226, 229, 231, 232, 233, 234, 237, 238, 239, 241, 243, 244, 245, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 274, 276, 278, 279, 280, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 321, 322, 324, 326, 327, 328, 329, 330, 334, 335, 336, 337, 340, 341, 343, 344, 346, 347, 348, 349, 350, 355, 356, 357, 370, 371, 372, 374, 380, 381, 383, 384, 387, 389, 390, 391, 393, 394, 397, 398, 399, 400, 401, 402, 408, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 450, 451, 454, 455, 456, 457, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 583, 584, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 609, 612, 613, 614, 615, 616, 619, 620, 621, 624, 627, 628, 630, 632, 633, 634, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 660, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 684, 685, 689, 709, 735, 737, 767, 768, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 843, 844, 852, 853, 857, 859, 860, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 898, 899, 903, 904, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 982, 983, 985, 986, 989, 991, 992, 993, 996, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "excerpt": [6, 974, 993], "wild": [6, 361, 474, 475, 489, 490, 993, 999, 1004], "aka": [6, 292, 339, 379, 401, 433, 517, 519, 521, 525, 528, 562, 563, 596, 603, 632, 633, 635, 636, 637, 639, 640, 643, 647, 648, 649, 651, 657, 658, 659, 721, 846, 850, 852, 958, 966, 976, 988, 993, 1006, 1018], "lfw": [6, 363, 474, 475, 993, 1004], "vi": [6, 8, 363, 680, 993, 1012, 1015], "www": [6, 70, 172, 196, 212, 214, 226, 274, 294, 362, 363, 368, 376, 384, 393, 397, 424, 430, 468, 489, 490, 512, 515, 518, 522, 625, 639, 645, 652, 666, 667, 828, 835, 886, 887, 958, 975, 993], "umass": [6, 363, 993], "edu": [6, 8, 11, 17, 46, 119, 145, 155, 172, 178, 217, 244, 255, 281, 289, 302, 339, 340, 362, 363, 365, 393, 430, 468, 483, 489, 490, 491, 515, 622, 625, 630, 639, 647, 648, 657, 660, 663, 664, 814, 816, 817, 818, 828, 835, 871, 873, 886, 887, 958, 960, 993], "funnel": [6, 474, 475, 993], "tgz": [6, 993], "233mb": [6, 993], "randomizedsearchcv": [6, 70, 148, 257, 264, 308, 350, 380, 556, 951, 962, 976, 982, 993, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019], "fetch_lfw_peopl": [6, 363, 993, 1019], "classification_report": [6, 32, 69, 142, 254, 295, 314, 315, 962, 993, 997, 1006, 1008, 1012, 1013, 1014, 1016], "confusionmatrixdisplai": [6, 32, 250, 309, 314, 339, 612, 699, 962, 993, 1014, 1015, 1017, 1018, 1019], "standardscal": [6, 10, 31, 44, 49, 57, 61, 70, 72, 85, 105, 128, 166, 175, 184, 185, 187, 196, 212, 214, 226, 227, 235, 236, 238, 253, 263, 284, 285, 292, 300, 303, 306, 307, 309, 310, 311, 326, 329, 350, 356, 368, 370, 373, 377, 380, 394, 397, 413, 447, 448, 548, 631, 632, 635, 636, 637, 645, 646, 657, 659, 839, 840, 843, 856, 869, 878, 879, 880, 881, 883, 884, 952, 959, 966, 972, 976, 977, 979, 993, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "svc": [6, 16, 25, 27, 30, 31, 32, 69, 73, 129, 135, 137, 143, 163, 172, 230, 232, 236, 250, 254, 256, 258, 261, 262, 263, 266, 267, 271, 300, 306, 308, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 354, 370, 374, 381, 387, 394, 397, 400, 449, 496, 536, 678, 679, 681, 683, 777, 794, 806, 808, 839, 875, 876, 878, 880, 950, 951, 957, 960, 962, 963, 972, 988, 992, 993, 995, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "util": [6, 8, 10, 11, 48, 55, 60, 88, 128, 148, 196, 198, 204, 212, 219, 228, 233, 244, 262, 264, 276, 300, 306, 317, 326, 339, 355, 357, 362, 363, 366, 368, 369, 370, 371, 379, 380, 381, 389, 393, 394, 397, 398, 401, 434, 449, 552, 553, 554, 558, 651, 680, 777, 799, 805, 806, 846, 951, 957, 960, 962, 963, 972, 973, 982, 986, 989, 993, 999, 1004, 1005, 1007, 1008, 1010, 1011], "loguniform": [6, 148, 264, 951, 993, 1014], "disk": [6, 13, 363, 366, 368, 373, 381, 387, 993], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 60, 61, 63, 69, 71, 80, 84, 91, 95, 96, 109, 120, 122, 124, 127, 130, 135, 142, 145, 149, 150, 151, 156, 166, 175, 177, 189, 190, 193, 196, 197, 203, 213, 218, 219, 225, 229, 235, 238, 241, 242, 243, 245, 246, 251, 252, 254, 256, 257, 260, 261, 265, 274, 289, 301, 306, 309, 310, 315, 322, 329, 339, 347, 348, 350, 354, 355, 361, 362, 363, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 387, 390, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 496, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 562, 563, 564, 565, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 895, 896, 898, 899, 900, 903, 904, 912, 913, 914, 915, 916, 917, 919, 920, 921, 924, 925, 926, 933, 934, 935, 936, 937, 938, 939, 940, 948, 949, 952, 957, 958, 960, 962, 963, 965, 966, 968, 969, 972, 973, 974, 976, 977, 978, 981, 986, 992, 993, 994, 995, 996, 997, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "lfw_peopl": [6, 363, 993], "min_faces_per_person": [6, 363, 475, 993], "resiz": [6, 46, 47, 235, 363, 474, 475, 993], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 69, 74, 77, 78, 79, 80, 81, 85, 91, 94, 95, 99, 102, 108, 109, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 136, 137, 144, 145, 157, 160, 161, 165, 175, 177, 178, 180, 182, 184, 186, 188, 190, 191, 195, 196, 197, 199, 200, 204, 208, 211, 213, 214, 217, 218, 219, 220, 221, 222, 225, 229, 230, 242, 244, 245, 246, 247, 253, 254, 256, 259, 260, 263, 265, 266, 267, 268, 269, 270, 276, 286, 300, 301, 302, 307, 308, 310, 316, 324, 327, 328, 334, 339, 340, 350, 361, 365, 368, 370, 373, 377, 379, 380, 381, 393, 395, 396, 397, 398, 400, 404, 405, 406, 408, 410, 411, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 482, 485, 489, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 750, 751, 752, 753, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 903, 904, 915, 917, 919, 924, 931, 933, 936, 937, 938, 939, 940, 941, 942, 943, 951, 954, 958, 962, 963, 965, 966, 972, 973, 974, 976, 977, 978, 988, 993, 994, 995, 996, 997, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 57, 63, 101, 104, 160, 180, 195, 200, 213, 232, 241, 242, 243, 246, 247, 267, 295, 309, 310, 331, 334, 341, 350, 363, 365, 374, 387, 393, 394, 398, 400, 401, 405, 410, 414, 419, 446, 450, 453, 455, 463, 464, 465, 504, 519, 521, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 569, 570, 572, 591, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 674, 680, 705, 706, 736, 777, 791, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 830, 836, 837, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 912, 917, 958, 962, 966, 967, 972, 974, 976, 977, 993, 997, 1014, 1018, 1019, 1020], "info": [6, 42, 70, 94, 166, 167, 254, 365, 367, 372, 381, 401, 993], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 57, 59, 60, 77, 78, 79, 80, 81, 84, 90, 91, 94, 102, 109, 111, 113, 115, 142, 144, 145, 160, 161, 172, 175, 178, 180, 182, 190, 191, 195, 199, 200, 211, 213, 218, 225, 229, 230, 241, 246, 253, 259, 263, 265, 266, 268, 269, 286, 292, 300, 306, 307, 308, 310, 334, 339, 340, 341, 350, 354, 361, 362, 368, 370, 373, 379, 380, 381, 393, 395, 396, 398, 400, 401, 404, 405, 406, 408, 410, 411, 412, 414, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 482, 485, 489, 490, 493, 496, 497, 500, 502, 504, 505, 507, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 691, 705, 738, 739, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 915, 937, 938, 939, 940, 941, 942, 943, 954, 958, 963, 965, 966, 972, 976, 977, 978, 988, 993, 994, 996, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "id": [6, 214, 289, 348, 362, 363, 368, 376, 395, 397, 401, 475, 476, 477, 890, 892, 910, 993, 997, 1012, 1013, 1016], "person": [6, 259, 363, 367, 397, 401, 474, 475, 476, 972, 993, 1012], "target_nam": [6, 19, 52, 98, 103, 165, 205, 218, 243, 250, 257, 265, 266, 279, 318, 339, 345, 361, 363, 469, 470, 472, 473, 474, 475, 477, 478, 481, 483, 484, 485, 486, 491, 694, 962, 978, 988, 993, 997, 1014], "n_class": [6, 30, 37, 90, 91, 109, 111, 115, 117, 142, 144, 211, 218, 230, 232, 243, 263, 264, 265, 285, 286, 306, 345, 350, 368, 370, 381, 400, 419, 469, 470, 483, 496, 500, 504, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 550, 574, 575, 585, 591, 615, 620, 639, 640, 647, 648, 649, 655, 656, 657, 658, 678, 688, 697, 699, 715, 718, 721, 734, 768, 772, 777, 780, 781, 791, 800, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 821, 826, 828, 829, 836, 839, 846, 847, 850, 853, 862, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 888, 903, 904, 958, 962, 963, 966, 973, 976, 977, 985, 993, 1009, 1010, 1011, 1013, 1014, 1015], "1288": [6, 363], "1850": [6, 363], "scaler": [6, 70, 72, 163, 212, 230, 236, 238, 284, 297, 303, 304, 311, 326, 329, 350, 373, 394, 397, 471, 639, 640, 653, 655, 668, 839, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869, 966, 972, 976, 993, 1004, 1009, 1012, 1017], "unlabel": [6, 232, 308, 314, 315, 316, 318, 319, 381, 392, 393, 873, 874, 875, 961, 988, 991, 993, 995, 1016], "unsupervis": [6, 12, 37, 49, 71, 72, 85, 94, 114, 126, 225, 232, 282, 283, 325, 339, 340, 350, 357, 360, 363, 370, 380, 381, 392, 393, 398, 399, 400, 401, 415, 424, 427, 513, 515, 517, 518, 520, 523, 524, 530, 544, 547, 548, 550, 551, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 615, 616, 619, 620, 621, 622, 623, 658, 722, 777, 780, 781, 783, 791, 803, 806, 821, 822, 825, 827, 828, 829, 830, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 875, 882, 959, 962, 968, 975, 984, 988, 989, 991, 993, 999, 1004, 1007, 1017], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 56, 57, 61, 68, 70, 72, 73, 75, 84, 85, 91, 94, 102, 109, 114, 126, 136, 137, 148, 150, 151, 155, 163, 192, 197, 213, 216, 218, 219, 221, 223, 225, 229, 230, 232, 242, 243, 277, 280, 290, 300, 323, 339, 350, 354, 360, 363, 364, 365, 368, 377, 381, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 427, 428, 430, 446, 450, 454, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 485, 486, 491, 496, 500, 513, 515, 516, 519, 520, 521, 522, 525, 528, 530, 544, 547, 554, 580, 588, 612, 621, 622, 623, 633, 669, 670, 671, 672, 673, 674, 675, 677, 680, 691, 705, 775, 776, 777, 805, 819, 820, 821, 824, 827, 828, 835, 839, 840, 843, 849, 854, 859, 870, 871, 872, 878, 882, 915, 948, 953, 954, 957, 958, 963, 964, 968, 974, 975, 976, 977, 978, 984, 986, 988, 989, 991, 993, 994, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1016, 1019], "reduct": [6, 19, 54, 56, 68, 72, 75, 85, 94, 112, 126, 163, 216, 218, 219, 223, 229, 232, 277, 290, 310, 323, 350, 354, 360, 392, 393, 394, 396, 398, 400, 402, 449, 463, 464, 465, 466, 483, 511, 513, 515, 516, 519, 520, 521, 522, 525, 528, 530, 534, 535, 538, 539, 540, 541, 545, 546, 547, 580, 588, 639, 640, 669, 670, 671, 672, 673, 674, 761, 777, 805, 821, 828, 835, 839, 840, 849, 859, 876, 878, 886, 887, 888, 889, 954, 959, 974, 978, 983, 984, 986, 993, 999, 1005, 1006, 1007, 1010, 1018, 1019, 1020], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 61, 63, 70, 90, 96, 114, 117, 128, 131, 166, 196, 198, 207, 211, 225, 234, 235, 241, 243, 244, 247, 253, 257, 265, 266, 281, 298, 300, 307, 314, 315, 326, 339, 350, 366, 368, 374, 379, 390, 391, 393, 398, 399, 400, 468, 568, 569, 572, 580, 706, 736, 772, 890, 892, 951, 954, 958, 960, 970, 986, 993, 996, 997, 1018], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 57, 61, 63, 97, 182, 211, 212, 213, 219, 222, 225, 229, 231, 257, 339, 340, 341, 657, 658, 659, 993], "svd_solver": [6, 94, 102, 398, 516, 522, 993, 1010], "whiten": [6, 94, 95, 96, 280, 398, 405, 514, 515, 522, 857, 859, 993, 1008, 1010, 1018, 1019], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 97, 142, 145, 153, 166, 167, 172, 175, 182, 213, 231, 246, 254, 257, 260, 265, 276, 301, 308, 339, 340, 341, 350, 355, 362, 366, 368, 370, 372, 375, 376, 377, 379, 381, 393, 395, 397, 398, 400, 423, 424, 427, 431, 433, 453, 463, 464, 465, 466, 470, 516, 542, 543, 563, 587, 609, 611, 613, 615, 624, 625, 626, 640, 721, 775, 776, 777, 791, 796, 797, 843, 857, 947, 951, 952, 955, 958, 959, 962, 964, 965, 966, 972, 975, 976, 977, 978, 983, 988, 992, 993, 995, 997, 1004, 1006, 1011, 1014, 1016], "components_": [6, 14, 57, 85, 94, 96, 97, 100, 105, 229, 230, 295, 303, 310, 381, 394, 398, 426, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 525, 620, 828, 835, 870, 871, 974, 993, 1008, 1010, 1016, 1019], "project": [6, 8, 11, 13, 17, 27, 45, 57, 66, 84, 89, 93, 94, 96, 98, 100, 101, 106, 111, 152, 154, 156, 157, 163, 167, 188, 193, 205, 217, 218, 219, 221, 224, 230, 232, 239, 280, 285, 289, 323, 331, 340, 345, 354, 357, 360, 362, 366, 367, 373, 374, 377, 381, 382, 384, 390, 396, 398, 399, 405, 422, 432, 433, 443, 455, 463, 464, 465, 466, 470, 483, 485, 512, 514, 515, 516, 518, 520, 522, 523, 524, 525, 529, 530, 554, 563, 570, 622, 623, 630, 669, 672, 676, 677, 809, 828, 856, 870, 871, 872, 914, 915, 956, 958, 959, 960, 963, 965, 966, 968, 975, 978, 980, 985, 986, 988, 993, 996, 999, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "orthonorm": [6, 377, 914, 993], "x_train_pca": [6, 993], "x_test_pca": [6, 99, 993], "966": 6, "077": [6, 208, 215, 276], "007": [6, 115, 241, 264, 276, 340], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 55, 69, 70, 71, 72, 99, 108, 110, 111, 113, 115, 116, 117, 120, 126, 129, 130, 141, 142, 144, 163, 168, 172, 174, 186, 187, 188, 194, 203, 205, 208, 211, 215, 225, 230, 237, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 273, 275, 278, 279, 284, 285, 287, 292, 295, 300, 308, 309, 313, 314, 315, 317, 318, 320, 321, 322, 325, 327, 328, 329, 334, 335, 336, 337, 341, 363, 365, 368, 370, 373, 379, 381, 393, 394, 397, 401, 402, 403, 410, 417, 419, 420, 421, 469, 470, 477, 485, 493, 495, 496, 503, 512, 517, 518, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 574, 575, 583, 587, 591, 603, 610, 612, 613, 614, 630, 639, 640, 647, 649, 652, 653, 654, 655, 656, 657, 678, 679, 681, 683, 684, 688, 689, 690, 693, 694, 699, 701, 706, 707, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 734, 736, 762, 763, 764, 767, 768, 769, 772, 774, 777, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 827, 829, 830, 835, 836, 837, 839, 840, 846, 859, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 907, 909, 951, 952, 954, 957, 958, 959, 962, 963, 964, 967, 970, 972, 975, 976, 977, 978, 982, 983, 984, 986, 988, 989, 991, 992, 993, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "1e3": [6, 7, 10, 148, 154, 160, 231, 267, 951, 993], "1e5": [6, 153, 177, 179, 186, 267, 594, 595, 596, 600, 601, 603, 604, 606, 867, 872, 974, 993, 995], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 57, 62, 70, 89, 100, 101, 113, 120, 123, 124, 129, 134, 137, 141, 142, 144, 150, 152, 169, 186, 188, 189, 193, 194, 200, 203, 205, 208, 209, 210, 212, 220, 226, 227, 230, 232, 234, 238, 245, 253, 257, 261, 262, 264, 267, 268, 279, 282, 283, 284, 287, 292, 300, 303, 306, 307, 308, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 344, 345, 348, 354, 363, 380, 381, 387, 394, 397, 400, 402, 420, 530, 531, 534, 536, 538, 540, 542, 544, 545, 548, 574, 575, 578, 613, 615, 619, 620, 621, 622, 623, 625, 626, 629, 633, 639, 640, 641, 642, 643, 647, 649, 650, 653, 654, 655, 656, 657, 658, 661, 678, 679, 681, 683, 768, 777, 780, 781, 791, 807, 808, 809, 811, 814, 815, 816, 817, 818, 825, 826, 836, 878, 880, 882, 883, 886, 890, 892, 952, 954, 958, 962, 963, 965, 966, 968, 969, 976, 977, 978, 988, 992, 993, 997], "class_weight": [6, 328, 381, 538, 542, 545, 639, 640, 647, 649, 655, 656, 657, 658, 878, 880, 881, 882, 883, 884, 885, 886, 888, 951, 976, 977, 993, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1018, 1019], "n_iter": [6, 17, 70, 148, 175, 204, 217, 218, 222, 257, 264, 276, 295, 328, 370, 374, 380, 405, 435, 459, 513, 514, 518, 520, 525, 526, 527, 528, 625, 626, 627, 628, 633, 634, 641, 642, 643, 644, 662, 663, 664, 665, 666, 667, 668, 673, 675, 780, 781, 789, 791, 835, 837, 914, 915, 951, 976, 993, 1005, 1010, 1011, 1012, 1016, 1018, 1019], "found": [6, 19, 20, 21, 105, 115, 144, 148, 152, 154, 156, 157, 200, 232, 254, 257, 258, 259, 303, 306, 309, 311, 326, 341, 354, 356, 362, 365, 367, 368, 370, 379, 381, 382, 390, 393, 396, 397, 398, 400, 401, 403, 416, 423, 426, 427, 440, 453, 538, 539, 540, 541, 545, 546, 569, 571, 591, 592, 609, 617, 628, 632, 634, 636, 642, 644, 646, 652, 653, 655, 657, 659, 668, 669, 693, 700, 777, 780, 781, 791, 816, 821, 822, 828, 850, 852, 853, 886, 887, 888, 889, 893, 946, 950, 951, 954, 958, 959, 961, 963, 964, 965, 966, 972, 976, 977, 983, 985, 988, 993, 997, 1004, 1007, 1008, 1011, 1012, 1014, 1018], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 60, 70, 71, 73, 77, 81, 117, 119, 126, 152, 163, 165, 166, 167, 185, 214, 222, 230, 231, 235, 241, 246, 249, 253, 255, 257, 260, 261, 272, 274, 278, 280, 281, 289, 295, 300, 301, 303, 323, 326, 332, 339, 370, 375, 379, 381, 388, 394, 397, 399, 400, 401, 403, 429, 442, 445, 453, 479, 483, 496, 503, 612, 613, 614, 628, 631, 634, 635, 637, 640, 642, 644, 657, 694, 708, 722, 765, 768, 777, 780, 781, 788, 791, 793, 805, 806, 883, 955, 957, 962, 965, 969, 983, 988, 989, 991, 993, 995, 999, 1004, 1007, 1008, 1009, 1011, 1012, 1018], "search": [6, 46, 54, 70, 71, 72, 73, 121, 142, 148, 163, 214, 231, 246, 249, 257, 260, 261, 268, 272, 276, 278, 280, 295, 300, 311, 326, 339, 350, 357, 365, 366, 368, 370, 379, 381, 388, 393, 394, 397, 400, 401, 402, 403, 404, 425, 429, 431, 433, 438, 439, 442, 445, 452, 453, 459, 483, 496, 503, 538, 539, 540, 541, 545, 546, 547, 560, 580, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 609, 634, 657, 669, 670, 673, 674, 694, 708, 765, 768, 777, 780, 781, 788, 789, 791, 793, 805, 806, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 883, 886, 887, 888, 889, 920, 950, 955, 957, 959, 962, 965, 966, 976, 978, 982, 983, 988, 989, 991, 993, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019], "best_estimator_": [6, 54, 72, 73, 77, 102, 231, 246, 257, 260, 280, 777, 780, 781, 791, 951, 992, 993, 1011], "461": [6, 374], "76823": 6, "03433306453": 6, "003418945823095797": 6, "from_estim": [6, 25, 27, 31, 55, 111, 114, 124, 125, 129, 167, 179, 188, 205, 231, 235, 237, 250, 253, 258, 259, 263, 266, 279, 284, 287, 303, 306, 307, 308, 309, 311, 322, 323, 324, 327, 328, 345, 375, 391, 420, 612, 613, 614, 678, 679, 681, 682, 683, 699, 707, 762, 764, 767, 768, 769, 783, 957, 962, 969, 993, 1001, 1017, 1018, 1019], "display_label": [6, 250, 678, 993, 1016], "xticks_rot": [6, 678, 993], "vertic": [6, 17, 59, 120, 169, 185, 229, 230, 260, 274, 298, 301, 331, 333, 381, 390, 393, 398, 496, 678, 761, 993], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 64, 72, 74, 85, 94, 95, 105, 111, 115, 117, 122, 126, 128, 130, 150, 152, 157, 160, 165, 166, 168, 169, 175, 176, 186, 194, 196, 204, 207, 211, 214, 217, 230, 234, 251, 252, 268, 274, 276, 278, 288, 299, 300, 301, 302, 303, 306, 310, 324, 340, 344, 345, 993], "precis": [6, 25, 32, 69, 74, 81, 94, 142, 154, 155, 163, 172, 226, 249, 250, 254, 272, 295, 298, 314, 315, 368, 370, 381, 390, 392, 393, 395, 398, 400, 425, 450, 451, 452, 453, 454, 455, 456, 457, 459, 485, 504, 513, 515, 522, 525, 625, 626, 627, 629, 631, 632, 633, 635, 636, 637, 650, 653, 655, 661, 663, 664, 668, 681, 687, 688, 689, 694, 707, 709, 710, 711, 719, 743, 762, 763, 764, 767, 768, 775, 776, 805, 808, 819, 820, 825, 840, 859, 862, 878, 883, 890, 892, 915, 956, 958, 965, 966, 977, 993, 997, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "recal": [6, 25, 32, 69, 99, 142, 163, 226, 249, 254, 272, 295, 314, 315, 368, 381, 393, 485, 585, 681, 687, 688, 689, 693, 694, 707, 709, 710, 711, 762, 763, 764, 767, 768, 805, 808, 840, 859, 862, 878, 958, 978, 993, 997, 1007, 1008, 1011, 1013, 1014, 1016, 1017, 1018], "f1": [6, 25, 32, 69, 142, 254, 295, 314, 315, 318, 397, 694, 709, 710, 718, 763, 962, 963, 993, 997, 1008], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 69, 71, 107, 113, 119, 127, 132, 141, 142, 167, 197, 206, 207, 208, 214, 230, 231, 237, 250, 254, 261, 263, 276, 295, 298, 302, 310, 314, 315, 318, 319, 322, 323, 326, 327, 329, 331, 334, 337, 354, 355, 356, 357, 362, 366, 368, 370, 372, 373, 374, 375, 377, 378, 380, 381, 382, 393, 397, 398, 401, 403, 419, 422, 431, 433, 434, 445, 447, 448, 450, 455, 468, 477, 493, 519, 521, 522, 525, 528, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 613, 614, 624, 626, 638, 639, 640, 651, 652, 653, 655, 656, 657, 658, 659, 668, 671, 675, 688, 694, 709, 710, 718, 723, 748, 758, 759, 760, 763, 764, 767, 768, 777, 780, 781, 783, 791, 802, 803, 811, 812, 817, 819, 820, 823, 825, 826, 831, 839, 840, 844, 850, 852, 853, 855, 859, 866, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 904, 909, 910, 950, 951, 952, 954, 955, 956, 958, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 976, 978, 980, 982, 983, 984, 986, 988, 991, 993, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ariel": [6, 363, 1004, 1010], "sharon": [6, 363], "69": [6, 8, 187, 303, 315, 393, 452, 453, 588, 589, 736, 962, 972, 995], "colin": [6, 363, 1010], "powel": [6, 363], "87": [6, 8, 32, 69, 157, 295, 315, 578, 648, 768, 777, 855, 866, 962, 997], "donald": [6, 363, 393, 705, 952], "rumsfeld": [6, 363], "63": [6, 365, 400, 538, 539, 546, 547, 706, 777, 791, 888, 889, 962], "georg": [6, 363, 393, 1010, 1016, 1017, 1018, 1019], "bush": [6, 363], "95": [6, 14, 30, 32, 44, 52, 56, 66, 90, 100, 101, 117, 121, 155, 166, 175, 196, 198, 203, 214, 243, 244, 247, 254, 256, 257, 281, 289, 295, 300, 310, 315, 326, 350, 400, 508, 613, 614, 617, 628, 642, 728, 875, 958, 962, 963, 975, 997, 1007], "91": [6, 32, 51, 153, 295, 314, 315, 400, 957, 993, 997], "146": [6, 257, 400], "gerhard": [6, 363], "schroeder": [6, 363], "hugo": [6, 363, 1010, 1015, 1016, 1017, 1018], "chavez": [6, 363], "90": [6, 10, 14, 32, 73, 104, 105, 120, 121, 122, 142, 153, 169, 176, 187, 193, 195, 198, 203, 214, 241, 265, 267, 295, 300, 314, 315, 350, 354, 368, 374, 397, 544, 761, 777, 803, 808, 957, 962, 993, 997, 1019], "toni": [6, 363, 544, 859, 968, 1017, 1018], "blair": [6, 363], "93": [6, 8, 32, 196, 238, 295, 315, 339, 365, 768, 777, 803, 886, 957, 962, 993, 997], "83": [6, 30, 34, 39, 69, 295, 314, 365, 370, 403, 688, 766, 962, 993, 997, 1007], "322": [6, 79, 82, 90, 452, 453], "macro": [6, 32, 69, 142, 254, 295, 306, 314, 315, 363, 397, 688, 694, 709, 710, 718, 763, 764, 767, 768, 962, 997, 1004, 1012], "avg": [6, 32, 69, 142, 254, 295, 314, 315, 550, 685, 694, 962, 993, 997], "weight": [6, 13, 14, 19, 24, 32, 54, 69, 105, 109, 121, 129, 130, 141, 142, 153, 161, 163, 166, 174, 185, 187, 196, 200, 201, 210, 211, 212, 214, 215, 236, 241, 254, 259, 263, 265, 279, 288, 291, 292, 295, 296, 303, 306, 309, 314, 315, 321, 328, 337, 339, 340, 341, 350, 364, 365, 377, 379, 381, 393, 395, 396, 398, 399, 402, 404, 410, 414, 419, 422, 425, 426, 428, 430, 434, 440, 444, 445, 446, 448, 450, 455, 463, 464, 465, 477, 496, 505, 519, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 567, 570, 571, 572, 574, 578, 583, 584, 591, 592, 609, 615, 616, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 670, 674, 678, 679, 680, 681, 683, 684, 688, 689, 690, 693, 694, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 716, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 749, 762, 763, 764, 765, 767, 768, 769, 772, 773, 774, 775, 776, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 841, 844, 858, 859, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 903, 904, 917, 937, 943, 952, 953, 958, 959, 961, 962, 964, 965, 966, 967, 969, 975, 976, 977, 978, 983, 988, 995, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "85": [6, 8, 16, 17, 32, 50, 69, 97, 142, 211, 214, 254, 267, 295, 315, 350, 400, 421, 481, 536, 537, 578, 633, 639, 725, 733, 768, 777, 803, 962, 963, 993, 1004], "plot_galleri": [6, 94, 993], "n_row": [6, 19, 94, 390, 408, 432, 434, 492, 494, 993], "n_col": [6, 19, 94, 233, 408, 432, 434, 492, 494, 613, 993], "portrait": [6, 398, 993], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 66, 77, 81, 84, 88, 89, 90, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 108, 109, 110, 111, 112, 119, 120, 121, 122, 123, 126, 127, 131, 134, 135, 137, 140, 141, 144, 149, 150, 151, 152, 155, 156, 161, 166, 167, 168, 175, 181, 186, 189, 190, 193, 195, 197, 198, 200, 202, 207, 210, 211, 212, 213, 219, 220, 221, 225, 229, 230, 231, 232, 233, 235, 241, 243, 244, 247, 250, 255, 260, 261, 270, 281, 285, 286, 289, 292, 295, 298, 300, 301, 306, 308, 314, 315, 316, 324, 326, 330, 331, 345, 346, 347, 368, 393, 399, 400, 401, 403, 420, 612, 613, 678, 679, 681, 682, 683, 783, 892, 951, 955, 958, 961, 962, 965, 966, 969, 976, 977, 978, 993, 995, 996, 1017], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 61, 63, 79, 81, 90, 91, 96, 97, 104, 109, 111, 112, 128, 166, 195, 196, 211, 214, 225, 232, 241, 243, 244, 247, 251, 267, 269, 281, 289, 292, 295, 300, 308, 315, 323, 326, 993], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 61, 63, 90, 91, 119, 126, 131, 196, 207, 225, 241, 243, 244, 247, 253, 256, 267, 281, 298, 315, 317, 326, 368, 391, 393, 399, 568, 890, 956, 958, 962, 983, 993, 996], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 61, 63, 71, 74, 80, 81, 90, 91, 96, 97, 109, 112, 114, 115, 118, 121, 128, 130, 151, 157, 161, 166, 181, 189, 196, 197, 198, 200, 207, 209, 210, 213, 214, 225, 229, 232, 234, 235, 241, 243, 244, 247, 252, 253, 254, 255, 257, 265, 266, 268, 281, 282, 283, 289, 292, 295, 298, 310, 315, 325, 326, 348, 368, 370, 372, 390, 393, 396, 397, 399, 400, 401, 403, 453, 463, 464, 465, 466, 474, 479, 530, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 568, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 616, 620, 624, 632, 636, 775, 776, 777, 780, 781, 784, 791, 852, 859, 886, 887, 888, 889, 890, 902, 915, 933, 936, 951, 954, 956, 958, 960, 962, 964, 969, 974, 976, 978, 992, 993, 995, 996, 1011, 1013, 1018], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 61, 67, 75, 84, 94, 96, 97, 112, 119, 120, 122, 125, 126, 132, 145, 153, 157, 158, 166, 167, 177, 180, 187, 203, 208, 209, 214, 215, 217, 218, 225, 229, 230, 231, 235, 239, 243, 247, 248, 250, 255, 256, 257, 261, 263, 264, 272, 281, 290, 293, 298, 304, 307, 312, 328, 337, 340, 346, 347, 349, 363, 365, 373, 393, 402, 430, 452, 496, 513, 520, 524, 576, 577, 579, 623, 627, 635, 639, 659, 677, 696, 777, 791, 872, 931, 958, 962, 966, 972, 974, 976, 993, 997], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 59, 61, 63, 78, 79, 81, 90, 91, 96, 97, 99, 102, 104, 108, 109, 111, 112, 113, 121, 122, 123, 130, 141, 148, 151, 161, 186, 197, 198, 199, 200, 202, 203, 206, 207, 225, 228, 229, 241, 243, 244, 246, 247, 251, 252, 256, 259, 263, 266, 267, 269, 281, 289, 292, 295, 298, 300, 303, 315, 326, 328, 334, 336, 339, 345, 348, 350, 357, 368, 379, 382, 390, 393, 396, 398, 399, 400, 403, 445, 463, 464, 465, 466, 515, 522, 525, 538, 539, 540, 541, 542, 543, 545, 546, 547, 568, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 616, 657, 659, 844, 886, 887, 888, 889, 890, 902, 915, 951, 954, 956, 958, 960, 962, 964, 965, 969, 974, 976, 977, 978, 982, 983, 986, 989, 993, 995, 996, 1006, 1012, 1018, 1020], "99": [6, 25, 32, 44, 51, 61, 94, 214, 225, 229, 241, 243, 254, 257, 295, 298, 315, 355, 361, 365, 372, 397, 400, 401, 473, 628, 642, 652, 768, 826, 931, 957, 962, 972, 976, 993, 999, 1006], "hspace": [6, 13, 14, 44, 45, 61, 94, 214, 225, 241, 243, 244, 247, 281, 308, 315, 323, 993], "grai": [6, 13, 46, 47, 50, 51, 53, 94, 97, 123, 194, 196, 214, 229, 232, 233, 263, 294, 365, 398, 474, 475, 483, 502, 993, 996, 1015], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 97, 119, 122, 135, 141, 150, 151, 152, 156, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 251, 270, 280, 289, 295, 314, 326, 330, 331, 332, 339, 993], "portion": [6, 8, 80, 265, 354, 363, 365, 368, 374, 381, 768, 800, 817, 951, 961, 965, 993, 997], "pred_nam": [6, 993], "rsplit": [6, 17, 257, 993], "true_nam": [6, 993], "ntrue": [6, 314, 315, 993], "prediction_titl": [6, 993], "signif": [6, 993], "eigenface_titl": [6, 993], "convolut": [6, 156, 993], "network": [6, 294, 354, 355, 356, 357, 362, 363, 379, 381, 382, 387, 393, 398, 400, 405, 477, 514, 516, 548, 549, 677, 721, 836, 837, 930, 958, 960, 962, 976, 978, 982, 984, 993, 998, 999, 1004, 1018], "famili": [6, 354, 356, 381, 393, 396, 398, 400, 401, 402, 573, 576, 577, 579, 580, 581, 587, 836, 837, 855, 866, 958, 972, 976, 993, 995, 1008, 1018], "outsid": [6, 9, 19, 117, 197, 198, 228, 238, 379, 401, 616, 858, 968, 993, 1012], "scope": [6, 354, 356, 368, 379, 401, 982, 983, 993], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 69, 84, 114, 128, 142, 145, 157, 161, 163, 166, 184, 185, 214, 224, 237, 238, 249, 253, 272, 276, 281, 283, 305, 312, 339, 340, 344, 345, 350, 355, 356, 357, 360, 362, 363, 364, 365, 367, 368, 371, 374, 375, 376, 377, 380, 381, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 414, 415, 420, 425, 428, 431, 438, 440, 445, 446, 448, 449, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 493, 496, 505, 519, 542, 543, 545, 546, 548, 557, 562, 563, 564, 566, 567, 570, 580, 583, 592, 607, 609, 611, 615, 619, 621, 627, 629, 633, 639, 650, 661, 669, 681, 682, 698, 728, 758, 759, 760, 768, 777, 778, 779, 780, 781, 782, 783, 791, 794, 795, 796, 797, 798, 805, 807, 808, 821, 823, 840, 842, 844, 846, 849, 851, 852, 853, 854, 858, 859, 862, 875, 876, 878, 883, 887, 909, 910, 928, 929, 951, 952, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 972, 975, 976, 977, 978, 981, 985, 991, 992, 993, 995, 996, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "librari": [6, 256, 309, 311, 346, 350, 360, 362, 363, 366, 367, 368, 369, 374, 379, 380, 381, 384, 389, 639, 878, 879, 880, 881, 883, 884, 930, 958, 962, 977, 978, 982, 983, 986, 993, 997, 1002, 1007, 1011, 1012, 1013, 1014, 1015, 1017], "reader": [6, 42, 309, 356, 368, 993], "pytorch": [6, 379, 982, 983, 993], "tensorflow": [6, 379, 982, 993], "implement": [6, 7, 13, 16, 17, 46, 55, 80, 94, 161, 172, 181, 185, 210, 214, 217, 225, 231, 254, 256, 265, 276, 278, 281, 301, 306, 307, 308, 309, 310, 339, 341, 354, 355, 356, 362, 363, 365, 366, 368, 369, 370, 373, 374, 376, 377, 381, 384, 387, 389, 390, 392, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 419, 424, 425, 426, 428, 429, 430, 431, 456, 474, 477, 489, 513, 514, 515, 516, 517, 519, 522, 523, 524, 534, 535, 536, 538, 539, 542, 543, 544, 548, 553, 563, 569, 570, 572, 574, 578, 582, 591, 592, 613, 614, 621, 622, 626, 627, 634, 638, 639, 640, 644, 645, 649, 652, 653, 655, 656, 657, 658, 659, 665, 666, 667, 668, 669, 672, 673, 676, 688, 692, 701, 715, 718, 758, 762, 768, 769, 775, 777, 780, 781, 783, 791, 795, 796, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 814, 815, 816, 817, 818, 821, 822, 824, 827, 829, 830, 835, 836, 837, 839, 860, 868, 869, 875, 878, 879, 880, 881, 882, 883, 884, 914, 915, 927, 930, 931, 933, 951, 952, 954, 956, 958, 959, 960, 961, 963, 964, 966, 967, 968, 972, 974, 975, 978, 979, 980, 982, 983, 984, 986, 988, 993, 994, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "402": [6, 15, 260], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 60, 67, 69, 71, 113, 122, 142, 156, 163, 197, 237, 238, 243, 247, 249, 259, 262, 265, 270, 272, 278, 281, 288, 297, 300, 302, 304, 308, 313, 315, 316, 319, 320, 324, 334, 339, 341, 350, 356, 363, 364, 368, 373, 379, 389, 393, 397, 400, 428, 483, 493, 501, 684, 694, 722, 776, 777, 844, 874, 886, 951, 952, 956, 962, 963, 964, 965, 972, 975, 978, 981], "diabet": [7, 122, 131, 133, 138, 145, 161, 163, 183, 184, 185, 192, 193, 252, 361, 400, 482, 633, 634, 777, 782, 800, 801, 802, 970, 988, 992, 999], "regress": [7, 10, 13, 25, 27, 30, 54, 68, 70, 75, 79, 80, 83, 86, 97, 107, 112, 114, 119, 127, 132, 145, 147, 158, 160, 161, 163, 165, 166, 167, 174, 178, 180, 182, 186, 190, 191, 193, 197, 199, 200, 201, 212, 215, 224, 226, 233, 238, 239, 252, 269, 270, 274, 277, 290, 295, 299, 303, 308, 309, 310, 311, 321, 337, 339, 343, 349, 355, 356, 357, 360, 361, 363, 365, 368, 370, 373, 376, 377, 379, 380, 381, 388, 395, 396, 397, 398, 402, 414, 419, 445, 446, 455, 465, 470, 471, 473, 477, 482, 483, 485, 486, 493, 497, 498, 499, 505, 509, 512, 516, 518, 520, 522, 523, 524, 526, 527, 529, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 548, 551, 552, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 590, 591, 592, 595, 596, 603, 604, 606, 613, 614, 615, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 682, 687, 702, 703, 704, 708, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 765, 777, 780, 781, 783, 791, 802, 803, 805, 806, 810, 812, 813, 821, 822, 827, 829, 830, 836, 837, 839, 840, 843, 844, 846, 852, 853, 854, 856, 859, 862, 867, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 892, 898, 901, 903, 919, 951, 952, 954, 957, 959, 969, 970, 972, 973, 982, 983, 984, 985, 986, 988, 991, 994, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "patient": [7, 131, 145, 161, 365, 376, 397, 958, 995], "diseas": [7, 131, 145, 161, 259, 365, 693, 962, 995], "newsgroup": [7, 14, 19, 229, 257, 318, 340, 341, 361, 390, 401, 469, 470, 989, 999], "post": [7, 14, 19, 69, 163, 310, 339, 340, 341, 343, 349, 354, 363, 367, 368, 372, 373, 380, 393, 429, 469, 470, 481, 693, 805, 886, 962, 978, 986, 997, 1015], "written": [7, 29, 35, 88, 163, 203, 309, 355, 365, 368, 369, 370, 374, 376, 379, 381, 394, 399, 468, 483, 489, 694, 805, 883, 890, 956, 958, 962, 966, 967, 976, 981, 988, 989, 994, 997, 1013], "about": [7, 11, 29, 44, 53, 56, 61, 69, 85, 88, 117, 142, 157, 163, 165, 166, 169, 213, 225, 253, 254, 256, 258, 263, 281, 303, 306, 308, 309, 310, 311, 315, 339, 341, 348, 350, 354, 355, 357, 361, 363, 367, 368, 372, 373, 374, 380, 381, 382, 387, 397, 398, 401, 403, 420, 473, 475, 476, 477, 478, 481, 482, 483, 485, 486, 491, 496, 542, 543, 574, 575, 588, 589, 595, 614, 621, 657, 659, 723, 777, 791, 808, 899, 952, 958, 959, 961, 963, 965, 968, 969, 972, 973, 975, 977, 978, 980, 982, 986, 988, 989, 995, 997, 1009, 1010], "sgdclassifi": [7, 8, 203, 204, 205, 206, 207, 208, 209, 230, 264, 318, 328, 339, 350, 354, 356, 374, 381, 391, 392, 401, 619, 621, 622, 623, 627, 639, 647, 649, 878, 883, 954, 958, 963, 976, 977, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020], "stochast": [7, 57, 120, 123, 163, 172, 174, 215, 219, 221, 225, 230, 284, 285, 291, 296, 309, 393, 398, 400, 443, 469, 477, 483, 484, 485, 495, 503, 517, 525, 540, 541, 552, 585, 608, 620, 639, 640, 649, 653, 655, 657, 658, 659, 660, 668, 669, 670, 671, 673, 805, 828, 835, 836, 837, 840, 849, 882, 914, 915, 936, 951, 965, 966, 968, 984, 998, 999, 1004, 1005, 1008, 1009, 1011, 1013, 1015], "gradient": [7, 46, 65, 107, 114, 125, 128, 131, 132, 153, 154, 163, 174, 215, 225, 230, 298, 381, 393, 403, 433, 443, 447, 448, 469, 477, 482, 484, 485, 496, 501, 534, 535, 540, 541, 542, 543, 552, 567, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 615, 616, 620, 629, 630, 639, 640, 649, 650, 653, 655, 657, 658, 659, 661, 668, 673, 675, 676, 721, 722, 728, 730, 780, 781, 782, 802, 805, 835, 836, 837, 840, 852, 853, 882, 936, 959, 962, 965, 966, 967, 968, 982, 984, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1019], "descent": [7, 13, 163, 174, 181, 215, 225, 230, 309, 398, 400, 452, 453, 459, 469, 477, 484, 512, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 552, 620, 627, 628, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 649, 653, 655, 657, 658, 659, 662, 663, 664, 665, 668, 675, 805, 836, 837, 840, 878, 882, 936, 959, 966, 968, 977, 984, 995, 999, 1004, 1007, 1008, 1009, 1011, 1013, 1015, 1017, 1018, 1019], "nusvr": [7, 354, 884, 977, 1006, 1012, 1014, 1015, 1016, 1018, 1019], "nu": [7, 9, 11, 157, 210, 225, 325, 354, 400, 403, 600, 658, 880, 881, 882, 968, 976, 977, 1015, 1019], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 67, 71, 88, 94, 96, 141, 148, 156, 177, 183, 200, 201, 208, 212, 230, 231, 234, 237, 254, 256, 257, 261, 282, 295, 298, 319, 322, 323, 325, 326, 327, 329, 330, 331, 334, 336, 337, 340, 354, 356, 357, 373, 374, 377, 379, 381, 390, 391, 393, 395, 396, 397, 398, 400, 403, 404, 405, 419, 425, 426, 427, 428, 430, 431, 432, 434, 445, 446, 448, 449, 463, 464, 465, 466, 468, 470, 478, 490, 493, 502, 505, 512, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 530, 531, 532, 533, 548, 549, 550, 551, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 603, 604, 606, 619, 621, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 653, 654, 655, 656, 657, 658, 659, 667, 668, 669, 670, 672, 673, 674, 676, 680, 700, 715, 743, 748, 749, 750, 751, 753, 754, 755, 757, 758, 777, 780, 781, 791, 803, 806, 807, 808, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 836, 837, 844, 846, 851, 859, 862, 865, 876, 878, 879, 880, 881, 882, 883, 884, 885, 898, 912, 914, 915, 925, 931, 951, 954, 955, 956, 958, 959, 960, 962, 963, 964, 966, 967, 968, 972, 976, 978, 984, 988, 991, 994, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1017], "gradientboostingregressor": [7, 121, 122, 128, 131, 354, 373, 379, 400, 535, 543, 613, 614, 958, 962, 963, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "forward": [7, 145, 308, 354, 368, 402, 489, 490, 520, 524, 534, 540, 541, 566, 567, 583, 666, 667, 843, 958, 983, 1016], "wise": [7, 26, 48, 156, 197, 225, 266, 298, 340, 354, 381, 391, 393, 397, 398, 402, 439, 512, 515, 518, 522, 526, 527, 530, 531, 534, 536, 537, 540, 541, 573, 576, 577, 579, 580, 581, 587, 621, 633, 681, 734, 807, 856, 868, 869, 872, 935, 937, 938, 939, 940, 943, 954, 956, 962, 963, 976, 983, 1004, 1009, 1012, 1013, 1014], "fashion": [7, 114, 119, 204, 265, 355, 381, 390, 391, 398, 400, 534, 538, 539, 540, 541, 545, 546, 547, 583, 608, 805, 828, 843, 846, 852, 862, 886, 887, 888, 889, 933, 952, 958, 972, 1013], "notic": [7, 25, 26, 53, 56, 79, 112, 114, 121, 144, 175, 225, 237, 253, 254, 256, 257, 259, 265, 266, 276, 303, 339, 340, 341, 350, 373, 397, 477, 522, 544, 951, 961, 962, 968, 997, 1001, 1017], "faster": [7, 19, 39, 63, 72, 94, 109, 114, 118, 121, 145, 167, 172, 182, 196, 198, 211, 212, 214, 231, 276, 278, 294, 307, 309, 310, 339, 340, 341, 354, 362, 368, 376, 377, 381, 392, 393, 398, 402, 403, 405, 425, 428, 430, 432, 433, 434, 443, 489, 512, 513, 514, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 534, 540, 541, 542, 543, 624, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 653, 655, 665, 668, 672, 676, 680, 706, 736, 758, 759, 760, 819, 820, 824, 836, 837, 854, 856, 858, 867, 871, 915, 931, 951, 955, 958, 963, 965, 966, 969, 974, 976, 977, 978, 982, 985, 993, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "10_000": [7, 25, 74, 114, 121, 165, 172, 229, 259, 276, 540, 541, 856], "vari": [7, 34, 44, 46, 61, 74, 115, 117, 144, 163, 166, 167, 185, 187, 190, 194, 222, 230, 246, 252, 256, 259, 291, 296, 298, 303, 313, 320, 326, 329, 350, 354, 356, 363, 381, 423, 427, 481, 489, 495, 496, 503, 540, 541, 545, 546, 627, 628, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 662, 665, 684, 743, 796, 803, 805, 806, 836, 840, 844, 859, 875, 883, 886, 887, 936, 954, 957, 958, 962, 965, 966, 975, 978, 986, 1011, 1012], "relev": [7, 9, 19, 76, 82, 143, 163, 175, 190, 256, 257, 263, 350, 354, 356, 363, 365, 367, 368, 370, 372, 373, 374, 381, 395, 396, 402, 403, 451, 455, 515, 522, 626, 636, 706, 720, 736, 780, 781, 808, 857, 859, 890, 891, 892, 962, 963, 968, 979, 983, 1007, 1012, 1016, 1018], "select": [7, 9, 36, 44, 56, 61, 67, 68, 70, 73, 75, 81, 91, 93, 106, 111, 116, 118, 121, 128, 135, 142, 146, 153, 155, 166, 167, 169, 172, 174, 176, 204, 211, 214, 215, 218, 225, 229, 231, 240, 241, 248, 254, 255, 256, 257, 261, 280, 298, 303, 308, 314, 315, 318, 321, 326, 334, 337, 339, 340, 341, 350, 354, 355, 357, 363, 365, 366, 368, 370, 376, 380, 381, 390, 393, 394, 395, 398, 400, 401, 403, 425, 427, 428, 430, 432, 434, 439, 440, 441, 445, 447, 448, 453, 454, 457, 469, 470, 473, 474, 477, 478, 482, 483, 485, 493, 496, 513, 515, 516, 521, 522, 525, 530, 532, 539, 540, 541, 544, 546, 562, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 608, 612, 613, 626, 627, 628, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 652, 654, 657, 659, 663, 664, 672, 673, 678, 693, 697, 699, 734, 770, 771, 775, 776, 777, 780, 781, 782, 783, 791, 801, 802, 803, 805, 807, 821, 822, 823, 825, 827, 829, 830, 831, 839, 840, 844, 849, 855, 859, 875, 878, 879, 883, 886, 887, 888, 889, 894, 931, 932, 956, 957, 959, 962, 963, 965, 966, 968, 972, 975, 976, 977, 978, 979, 982, 983, 984, 986, 988, 989, 991, 995, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "ham": [7, 431, 438, 562, 680, 684, 690, 714, 721, 758, 759, 760, 774, 965], "loss": [7, 24, 25, 26, 27, 119, 120, 121, 122, 123, 148, 149, 163, 174, 178, 186, 189, 198, 201, 203, 204, 208, 214, 215, 231, 264, 293, 294, 303, 309, 318, 323, 324, 328, 334, 339, 379, 381, 391, 392, 398, 403, 445, 446, 477, 489, 490, 513, 519, 520, 521, 524, 528, 533, 534, 535, 539, 540, 541, 542, 543, 546, 624, 627, 630, 639, 640, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 684, 687, 690, 703, 714, 715, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 774, 777, 780, 781, 791, 801, 802, 805, 836, 837, 839, 840, 843, 844, 852, 853, 854, 859, 878, 879, 884, 885, 887, 889, 915, 919, 955, 958, 966, 970, 975, 976, 977, 978, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "eustach": [7, 8, 10, 986, 1006, 1007], "diemert": [7, 8, 10, 986, 1006, 1007], "maria": [7, 122, 128, 145, 161, 393, 1015, 1016, 1017, 1018, 1019], "telenczuk": [7, 122, 128, 145, 161, 1013, 1016, 1017, 1019], "github": [7, 8, 12, 26, 70, 71, 108, 114, 115, 116, 122, 124, 125, 128, 131, 142, 153, 161, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 295, 307, 308, 310, 311, 316, 348, 362, 366, 367, 371, 372, 373, 374, 376, 379, 381, 382, 384, 387, 389, 433, 443, 489, 517, 672, 673, 676, 965, 981, 982, 985, 986, 997, 1009, 1014], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 56, 64, 69, 70, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 148, 151, 153, 155, 157, 161, 176, 196, 198, 203, 213, 214, 218, 220, 222, 228, 241, 243, 244, 257, 260, 276, 298, 299, 302, 303, 339, 340, 362, 363, 366, 368, 372, 373, 374, 376, 379, 384, 393, 424, 433, 443, 489, 515, 517, 522, 652, 672, 676, 686, 965, 980, 985, 1009, 1011, 1014], "maikia": [7, 122, 128, 161, 1012, 1013, 1015, 1016], "lemaitre58": [7, 128, 148, 153, 155, 157, 218, 298], "gmail": [7, 11, 14, 16, 24, 42, 48, 56, 64, 69, 70, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 148, 151, 153, 155, 157, 176, 196, 198, 213, 214, 218, 220, 228, 241, 243, 244, 257, 260, 298, 303, 339, 340], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 94, 96, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 314, 315, 316, 317, 319, 330, 331, 334, 335, 339, 340, 341, 362, 381, 387, 978, 986], "mean_squared_error": [7, 121, 122, 192, 196, 198, 200, 202, 214, 350, 400, 722, 732, 962, 1005, 1007, 1014, 1015], "hamming_loss": [7, 684, 774, 962, 1006, 1010, 1013], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 56, 58, 59, 61, 63, 64, 70, 77, 78, 79, 91, 95, 100, 101, 112, 117, 137, 140, 168, 180, 186, 191, 194, 199, 202, 205, 209, 213, 220, 242, 244, 245, 246, 247, 259, 262, 270, 281, 282, 283, 288, 331, 332, 336, 340, 350, 355, 370, 377, 379, 381, 393, 397, 398, 425, 428, 429, 431, 433, 438, 440, 441, 442, 443, 452, 453, 454, 517, 525, 534, 535, 536, 537, 540, 541, 608, 627, 628, 633, 634, 641, 642, 643, 644, 658, 670, 672, 674, 676, 775, 776, 781, 810, 813, 828, 881, 901, 914, 915, 927, 931, 951, 952, 957, 959, 995, 1008, 1009, 1013, 1014], "fetch_20newsgroups_vector": [7, 211, 229, 363, 1004, 1014, 1016], "spars": [7, 12, 13, 17, 39, 40, 54, 56, 76, 82, 93, 106, 114, 126, 163, 174, 191, 195, 212, 215, 229, 231, 257, 276, 307, 311, 334, 338, 341, 342, 348, 354, 360, 362, 363, 364, 368, 370, 371, 372, 373, 379, 380, 381, 392, 393, 394, 400, 401, 403, 404, 408, 420, 422, 424, 425, 426, 428, 430, 431, 432, 433, 434, 438, 440, 441, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 468, 469, 470, 477, 478, 484, 489, 504, 505, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 584, 585, 586, 587, 588, 589, 590, 610, 611, 612, 619, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 693, 694, 695, 709, 710, 711, 714, 718, 719, 720, 734, 735, 740, 741, 743, 747, 748, 758, 759, 760, 761, 763, 764, 765, 767, 774, 777, 780, 781, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 846, 848, 849, 850, 851, 852, 854, 856, 857, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 896, 897, 898, 899, 904, 912, 915, 916, 919, 920, 921, 925, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 952, 955, 958, 959, 960, 962, 963, 965, 975, 977, 978, 983, 984, 995, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "generate_data": [7, 33], "load_diabet": [7, 122, 131, 134, 145, 161, 181, 183, 184, 185, 192, 193, 235, 252, 311, 400, 539, 543, 549, 654, 682, 800, 801, 802, 887, 889, 970, 992, 995, 1010, 1015, 1018], "elif": [7, 8, 16, 34, 176, 198, 232, 234, 243, 281, 855], "subset": [7, 19, 26, 27, 32, 69, 70, 79, 80, 115, 117, 118, 134, 142, 167, 185, 197, 211, 212, 213, 214, 228, 230, 233, 234, 254, 257, 259, 265, 266, 268, 303, 308, 314, 318, 339, 340, 341, 350, 363, 368, 376, 379, 381, 390, 391, 393, 394, 397, 400, 401, 403, 410, 419, 430, 445, 447, 448, 450, 469, 470, 473, 474, 478, 489, 530, 531, 532, 534, 536, 537, 538, 540, 542, 543, 544, 545, 548, 550, 583, 591, 610, 620, 621, 622, 623, 632, 636, 639, 647, 649, 652, 655, 656, 657, 658, 659, 660, 678, 684, 685, 694, 697, 699, 711, 714, 735, 737, 771, 774, 779, 803, 805, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 845, 873, 874, 878, 880, 883, 886, 888, 894, 931, 951, 958, 962, 963, 973, 975, 977, 978, 997, 1007, 1012, 1013, 1015, 1017], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 58, 79, 107, 113, 129, 132, 161, 163, 169, 192, 201, 213, 230, 255, 256, 262, 266, 270, 274, 324, 331, 350, 354, 375, 381, 390, 391, 393, 397, 398, 400, 404, 420, 423, 425, 426, 427, 429, 431, 432, 434, 436, 437, 452, 453, 459, 462, 517, 528, 534, 545, 550, 578, 592, 601, 613, 614, 615, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 654, 655, 656, 660, 662, 665, 669, 671, 673, 675, 688, 697, 709, 710, 715, 716, 718, 724, 734, 744, 749, 751, 752, 753, 754, 758, 761, 763, 764, 767, 768, 769, 770, 771, 773, 784, 786, 800, 804, 817, 819, 820, 857, 858, 859, 864, 868, 878, 879, 904, 917, 954, 956, 958, 959, 960, 962, 964, 965, 966, 970, 972, 975, 977, 992, 995, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "given": [7, 10, 11, 27, 37, 49, 57, 59, 77, 84, 95, 99, 124, 126, 128, 148, 155, 166, 167, 196, 197, 214, 218, 225, 229, 230, 233, 235, 252, 256, 257, 258, 259, 265, 282, 283, 284, 300, 309, 334, 339, 340, 341, 347, 354, 356, 363, 367, 368, 370, 372, 374, 376, 377, 379, 381, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 410, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 439, 440, 441, 442, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 463, 464, 465, 468, 477, 482, 484, 486, 504, 517, 519, 520, 521, 524, 528, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 569, 570, 571, 572, 574, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 612, 613, 625, 627, 630, 632, 633, 634, 636, 639, 640, 642, 644, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 668, 669, 672, 678, 679, 680, 681, 682, 683, 685, 686, 687, 693, 695, 698, 699, 701, 704, 706, 707, 714, 716, 717, 720, 732, 735, 736, 738, 739, 744, 754, 758, 761, 762, 764, 767, 768, 769, 772, 773, 775, 776, 777, 780, 781, 783, 789, 791, 795, 801, 802, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 846, 849, 850, 852, 853, 854, 855, 856, 858, 859, 864, 865, 867, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 888, 893, 902, 903, 904, 946, 950, 951, 954, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 975, 976, 977, 978, 986, 988, 992, 993, 995, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "round": [7, 9, 25, 84, 160, 161, 203, 214, 256, 262, 300, 302, 339, 431, 437, 438, 545, 546, 574, 575, 578, 608, 673, 694, 779, 789, 844, 875, 890, 892, 952, 966, 978, 1006, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1020], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 79, 113, 124, 131, 145, 153, 161, 169, 184, 189, 210, 220, 228, 259, 282, 325, 328, 340, 341, 354, 363, 365, 372, 384, 397, 398, 400, 401, 403, 445, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 550, 551, 562, 564, 565, 569, 570, 571, 572, 613, 779, 783, 784, 786, 933, 936, 951, 957, 958, 962, 968, 973, 983, 986, 992, 997, 1006, 1016], "chang": [7, 16, 25, 26, 94, 98, 99, 112, 122, 149, 160, 165, 166, 169, 197, 198, 200, 201, 235, 236, 251, 256, 263, 266, 302, 306, 307, 308, 309, 310, 311, 315, 326, 341, 350, 354, 355, 356, 363, 366, 370, 371, 372, 373, 376, 379, 381, 391, 393, 397, 400, 401, 403, 416, 419, 422, 428, 430, 433, 435, 440, 443, 449, 452, 453, 459, 474, 475, 477, 485, 489, 490, 493, 494, 495, 503, 507, 512, 516, 517, 518, 519, 520, 521, 527, 528, 530, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 569, 570, 572, 574, 575, 578, 583, 591, 592, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 616, 628, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 644, 645, 646, 651, 653, 655, 660, 668, 673, 681, 685, 688, 693, 697, 698, 709, 710, 716, 717, 721, 735, 736, 737, 758, 764, 765, 767, 773, 775, 776, 777, 778, 779, 780, 781, 782, 791, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 812, 814, 815, 816, 818, 819, 820, 825, 826, 838, 841, 843, 852, 866, 867, 872, 873, 876, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 896, 898, 899, 910, 915, 928, 929, 930, 932, 951, 952, 953, 961, 962, 963, 965, 972, 975, 976, 977, 978, 980, 983, 988, 995, 997, 1002, 1003], "affect": [7, 25, 79, 155, 165, 166, 200, 221, 235, 259, 266, 303, 350, 354, 355, 356, 364, 381, 383, 393, 396, 397, 399, 401, 404, 406, 426, 431, 438, 454, 456, 460, 530, 531, 550, 693, 768, 777, 780, 781, 782, 791, 795, 796, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 859, 869, 883, 961, 965, 977, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 372, 391, 397, 814, 964, 1018], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 60, 70, 102, 109, 112, 113, 119, 121, 135, 161, 169, 189, 200, 201, 203, 204, 211, 214, 230, 231, 256, 259, 265, 266, 269, 274, 292, 293, 317, 326, 329, 339, 340, 341, 344, 348, 374, 381, 394, 401, 639, 640, 878, 879, 885, 905, 972, 992], "start_tim": [7, 10, 19, 115, 116, 128, 148, 185, 218], "elapsed_tim": [7, 39, 66, 115, 116, 128, 213], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 59, 60, 64, 65, 66, 70, 97, 101, 137, 156, 166, 182, 186, 220, 255, 256, 260, 264, 334, 341, 354, 362, 363, 368, 377, 381, 393, 394, 401, 402, 404, 405, 406, 410, 412, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 468, 473, 474, 475, 477, 479, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 564, 565, 569, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 591, 592, 594, 595, 596, 597, 598, 600, 601, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 739, 746, 749, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 791, 794, 797, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 839, 842, 845, 846, 852, 853, 855, 857, 859, 860, 861, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 896, 898, 899, 902, 912, 913, 925, 937, 943, 948, 952, 962, 963, 965, 966, 972, 977, 978, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 112, 120, 122, 211, 212, 214, 303], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 67, 93, 106, 125, 163, 195, 340, 341, 361, 362, 363, 370, 379, 381, 393, 401, 430, 445, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 491, 507, 512, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 548, 549, 550, 551, 562, 563, 565, 568, 569, 570, 613, 614, 615, 645, 666, 667, 682, 694, 777, 780, 781, 788, 789, 791, 802, 838, 843, 852, 886, 887, 888, 889, 893, 903, 951, 958, 962, 977, 988, 997, 998, 999, 1004, 1012, 1015, 1016, 1017, 1018, 1019], "necessari": [7, 13, 113, 196, 201, 241, 256, 257, 263, 278, 346, 354, 363, 366, 367, 368, 369, 370, 371, 372, 376, 379, 393, 395, 400, 433, 443, 469, 470, 472, 473, 474, 475, 476, 478, 515, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 652, 654, 656, 657, 672, 676, 773, 842, 851, 861, 865, 871, 951, 954, 958, 961, 964, 972, 978, 997, 1004, 1012], "defin": [7, 9, 12, 27, 53, 56, 65, 69, 70, 72, 85, 94, 99, 108, 109, 110, 128, 145, 148, 155, 156, 157, 167, 168, 175, 197, 200, 204, 213, 214, 225, 229, 235, 237, 241, 246, 256, 257, 259, 263, 265, 266, 267, 268, 276, 298, 307, 326, 334, 339, 340, 354, 364, 367, 368, 369, 370, 374, 375, 377, 379, 380, 381, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 409, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 440, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 470, 500, 501, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 608, 609, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 677, 678, 680, 689, 691, 697, 702, 703, 704, 705, 708, 711, 718, 721, 725, 726, 728, 730, 731, 733, 734, 737, 740, 746, 761, 765, 770, 771, 775, 776, 777, 780, 781, 783, 791, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 865, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 902, 904, 907, 913, 946, 951, 952, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 974, 976, 977, 978, 983, 993, 996, 999, 1001, 1006, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 68, 69, 75, 80, 89, 104, 117, 120, 153, 163, 165, 166, 167, 172, 196, 198, 238, 240, 243, 246, 248, 251, 262, 263, 265, 266, 330, 334, 339, 341, 348, 350, 355, 357, 361, 362, 363, 365, 366, 368, 369, 371, 372, 373, 374, 379, 380, 384, 387, 389, 390, 394, 401, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 477, 489, 490, 496, 548, 553, 562, 563, 566, 567, 569, 570, 572, 581, 585, 598, 608, 610, 611, 619, 637, 639, 653, 655, 660, 668, 670, 673, 674, 682, 688, 695, 697, 709, 710, 718, 721, 763, 764, 767, 768, 775, 776, 777, 783, 791, 803, 805, 806, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 839, 840, 841, 844, 846, 852, 853, 859, 880, 881, 882, 883, 884, 894, 896, 898, 899, 902, 906, 907, 925, 926, 933, 936, 949, 952, 954, 959, 961, 962, 963, 964, 965, 966, 972, 974, 978, 985, 986, 990, 995, 996, 997, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 84, 141, 142, 145, 165, 166, 175, 178, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 201, 205, 211, 212, 232, 238, 269, 310, 324, 331, 335, 339, 350, 363, 370, 381, 396, 402, 446, 463, 464, 465, 530, 574, 575, 578, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 878, 879, 880, 881, 882, 883, 884, 946, 956, 958, 976, 977, 995, 1004, 1006, 1009, 1011, 1016, 1018], "toarrai": [7, 318, 348, 394, 401, 547, 563, 569, 571, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 852, 868, 869, 933, 936, 952, 965, 972], "count_nonzero": [7, 10, 354], "configur": [7, 10, 70, 71, 167, 236, 238, 339, 353, 366, 368, 370, 374, 376, 379, 381, 384, 389, 394, 401, 402, 415, 424, 425, 427, 428, 430, 433, 443, 445, 449, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 607, 608, 609, 610, 611, 613, 616, 619, 620, 621, 622, 623, 669, 670, 671, 672, 675, 676, 768, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 928, 929, 959, 962, 972, 977, 982, 997, 999, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "penalti": [7, 10, 30, 81, 163, 174, 175, 185, 189, 196, 211, 212, 215, 227, 264, 292, 309, 318, 331, 339, 354, 376, 379, 392, 395, 398, 402, 452, 453, 454, 455, 456, 457, 459, 483, 512, 518, 519, 520, 521, 523, 524, 528, 529, 578, 624, 627, 628, 629, 630, 633, 634, 635, 638, 639, 640, 641, 642, 643, 649, 650, 651, 653, 657, 659, 661, 662, 668, 791, 859, 878, 879, 881, 883, 884, 885, 951, 958, 961, 966, 972, 976, 977, 995, 997, 1006, 1009, 1011, 1013, 1014, 1016, 1017, 1019], "elasticnet": [7, 10, 177, 187, 264, 269, 354, 374, 379, 398, 628, 633, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 958, 976, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018], "001": [7, 13, 32, 44, 61, 145, 148, 166, 167, 205, 225, 241, 254, 256, 258, 317, 340, 365, 374, 397, 517, 518, 520, 527, 608, 625, 626, 627, 628, 633, 634, 641, 642, 643, 644, 647, 648, 649, 657, 658, 659, 660, 662, 665, 670, 671, 674, 675, 775, 776, 836, 837, 873, 874, 880, 881, 882, 883, 884, 951, 988, 997], "modified_hub": [7, 657, 976], "fit_intercept": [7, 175, 176, 182, 201, 210, 225, 264, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 878, 879, 885, 958, 976, 1008, 1012, 1013, 1014, 1016, 1017, 1018], "tol": [7, 10, 17, 72, 94, 119, 160, 176, 187, 189, 203, 204, 210, 212, 225, 235, 244, 295, 309, 334, 339, 370, 374, 400, 405, 425, 428, 430, 433, 440, 443, 452, 453, 459, 463, 464, 465, 512, 513, 514, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 531, 540, 541, 542, 543, 583, 608, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 653, 655, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 672, 674, 676, 775, 776, 791, 828, 836, 837, 873, 874, 878, 879, 880, 881, 882, 883, 884, 948, 958, 976, 977, 993, 997, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "n_iter_no_chang": [7, 119, 204, 309, 339, 373, 381, 400, 540, 541, 542, 543, 647, 648, 649, 657, 658, 659, 836, 837, 976, 1012, 1015], "l1_ratio": [7, 10, 14, 180, 181, 187, 264, 269, 354, 379, 398, 519, 521, 528, 627, 628, 633, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 958, 976, 1005, 1007, 1009, 1016, 1018], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 57, 59, 77, 78, 81, 94, 97, 142, 163, 164, 165, 170, 174, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 198, 199, 211, 214, 215, 238, 294, 308, 309, 310, 339, 340, 341, 354, 364, 368, 370, 381, 383, 392, 395, 396, 398, 402, 403, 406, 414, 433, 446, 448, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 477, 505, 507, 508, 512, 516, 518, 520, 523, 524, 529, 533, 535, 537, 539, 541, 543, 546, 549, 551, 563, 570, 574, 578, 590, 592, 595, 608, 616, 617, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 684, 697, 700, 709, 714, 718, 723, 730, 733, 755, 757, 765, 766, 770, 771, 774, 792, 802, 805, 812, 813, 822, 830, 837, 840, 852, 859, 878, 879, 880, 881, 882, 883, 884, 887, 889, 953, 956, 958, 976, 977, 995, 1004, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018], "misclassif": [7, 774, 976, 977, 978, 1005], "ratio": [7, 53, 65, 72, 103, 163, 229, 231, 244, 249, 272, 354, 368, 393, 395, 397, 400, 431, 437, 474, 475, 496, 522, 530, 531, 532, 639, 691, 693, 697, 705, 716, 719, 762, 763, 764, 767, 773, 802, 805, 825, 871, 931, 956, 968, 978, 993, 1019], "sparsifi": [7, 180, 354, 639, 640, 647, 649, 657, 658, 659, 878, 946, 1006], "05": [7, 8, 14, 15, 24, 26, 30, 37, 44, 52, 59, 61, 63, 64, 66, 67, 74, 84, 90, 99, 112, 119, 121, 126, 134, 138, 141, 146, 153, 156, 157, 166, 170, 176, 177, 195, 198, 210, 215, 221, 222, 223, 225, 241, 243, 244, 247, 248, 256, 257, 263, 265, 266, 267, 272, 281, 284, 289, 296, 298, 300, 306, 310, 312, 315, 317, 331, 337, 342, 365, 402, 431, 437, 573, 576, 577, 579, 594, 595, 596, 600, 601, 603, 604, 606, 613, 614, 630, 671, 675, 736, 777, 828, 878, 879, 958, 966, 972], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 64, 69, 71, 97, 100, 104, 105, 109, 112, 117, 118, 119, 136, 137, 143, 144, 148, 156, 161, 167, 169, 195, 196, 214, 220, 225, 228, 229, 230, 233, 234, 241, 243, 244, 251, 254, 256, 257, 264, 265, 267, 270, 274, 276, 283, 285, 286, 292, 299, 300, 301, 314, 315, 318, 326, 333, 336, 339, 340, 341, 348, 379, 381, 403, 419, 427, 431, 437, 445, 488, 496, 531, 550, 551, 563, 578, 613, 614, 762, 777, 791, 801, 805, 807, 810, 873, 874, 995, 996, 997, 1013, 1016], "support_vectors_": [7, 10, 16, 327, 330, 331, 880, 881, 882, 883, 884, 977], "squared_error": [7, 104, 121, 122, 309, 400, 539, 540, 541, 543, 546, 652, 657, 659, 674, 887, 889, 976, 1017], "learning_r": [7, 108, 109, 120, 121, 122, 123, 222, 276, 293, 295, 307, 309, 400, 534, 535, 540, 541, 542, 543, 649, 657, 658, 659, 673, 835, 836, 837, 959, 969, 976, 1005, 1013, 1017], "max_depth": [7, 31, 108, 109, 110, 111, 114, 117, 120, 121, 122, 123, 126, 127, 129, 160, 218, 253, 268, 308, 309, 344, 346, 347, 348, 380, 381, 400, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 780, 781, 803, 886, 887, 888, 889, 890, 891, 892, 951, 969, 978, 1013, 1015], "n_estim": [7, 10, 26, 31, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 126, 127, 130, 160, 169, 218, 233, 237, 243, 253, 268, 300, 306, 308, 354, 380, 381, 400, 402, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 613, 780, 781, 951, 968, 969, 1001, 1012], "n_tree": 7, "loop": [7, 8, 112, 121, 166, 251, 261, 339, 348, 354, 368, 369, 374, 393, 397, 402, 627, 628, 633, 634, 640, 641, 642, 643, 644, 951, 975, 976, 992, 1007, 1008, 1011, 1016, 1017], "previous": [7, 53, 56, 70, 154, 166, 254, 263, 310, 363, 376, 379, 384, 393, 398, 401, 422, 425, 435, 505, 515, 522, 630, 639, 640, 647, 649, 657, 658, 659, 878, 930, 958, 972, 982, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "subsequ": [7, 32, 57, 74, 97, 142, 184, 198, 258, 261, 276, 278, 326, 350, 368, 370, 374, 381, 393, 394, 400, 403, 419, 477, 489, 534, 535, 540, 542, 543, 647, 649, 657, 780, 781, 807, 808, 811, 814, 815, 816, 817, 818, 836, 854, 858, 952, 961, 963, 1013, 1014, 1018], "relax": [7, 393, 401, 434, 975, 1011], "sgd": [7, 8, 163, 174, 203, 210, 215, 225, 264, 293, 294, 309, 339, 350, 356, 485, 493, 630, 647, 648, 649, 652, 657, 658, 659, 660, 836, 837, 951, 966, 984, 999, 1004, 1007, 1008, 1009, 1011, 1015, 1017], "svr": [7, 10, 163, 224, 239, 306, 321, 337, 354, 537, 548, 549, 574, 575, 624, 659, 777, 879, 881, 883, 955, 995, 1004, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "optim": [7, 13, 27, 53, 54, 56, 59, 71, 77, 78, 94, 108, 120, 122, 144, 148, 149, 152, 153, 154, 155, 156, 157, 184, 185, 189, 204, 212, 231, 254, 261, 264, 269, 274, 280, 295, 298, 303, 310, 317, 328, 334, 339, 340, 341, 350, 354, 357, 362, 365, 368, 370, 371, 379, 381, 384, 388, 390, 391, 393, 395, 397, 398, 400, 402, 403, 404, 426, 429, 430, 431, 433, 438, 442, 443, 453, 454, 460, 512, 515, 516, 518, 520, 524, 538, 539, 540, 541, 555, 591, 592, 600, 601, 616, 619, 621, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 668, 671, 673, 675, 676, 682, 703, 710, 777, 791, 821, 822, 823, 825, 827, 828, 829, 830, 831, 836, 837, 855, 866, 870, 871, 878, 879, 880, 881, 882, 883, 884, 954, 955, 956, 957, 958, 962, 963, 964, 965, 966, 967, 976, 977, 978, 982, 986, 992, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "few": [7, 14, 19, 39, 46, 52, 98, 118, 151, 154, 155, 185, 194, 196, 214, 231, 241, 258, 259, 263, 294, 298, 302, 306, 307, 308, 309, 310, 311, 314, 334, 341, 354, 363, 364, 365, 368, 370, 380, 382, 387, 390, 391, 393, 397, 398, 402, 403, 419, 430, 542, 543, 569, 572, 636, 673, 676, 871, 915, 930, 958, 959, 961, 962, 965, 966, 975, 977, 978, 986, 988, 995, 996, 997, 1010], "drawn": [7, 52, 79, 112, 144, 148, 157, 165, 235, 263, 280, 339, 364, 393, 399, 400, 403, 405, 450, 451, 452, 453, 454, 455, 456, 457, 496, 504, 514, 536, 537, 544, 592, 608, 613, 622, 815, 870, 871, 888, 889, 958, 972, 974, 1007], "boost": [7, 107, 108, 109, 110, 114, 125, 128, 131, 132, 163, 374, 381, 402, 429, 447, 448, 477, 482, 485, 496, 501, 534, 535, 540, 541, 542, 543, 613, 614, 615, 616, 721, 722, 728, 730, 780, 781, 782, 802, 805, 840, 852, 853, 958, 962, 982, 984, 999, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1017], "detriment": [7, 144, 355, 402, 958], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 56, 59, 64, 66, 72, 74, 79, 91, 118, 161, 169, 196, 226, 228, 235, 241, 259, 267, 299, 303, 317, 339, 340, 993], "add_subplot": [7, 16, 25, 27, 42, 45, 63, 66, 89, 100, 101, 108, 167, 193, 211, 219, 221, 314, 315, 375], "line1": [7, 12, 220], "tab": [7, 53, 125, 128, 148, 153, 155, 184, 185, 307, 394, 1011], "blue": [7, 20, 21, 26, 34, 91, 94, 112, 115, 123, 125, 128, 130, 143, 153, 155, 172, 176, 184, 185, 192, 194, 220, 229, 250, 251, 256, 293, 303, 307, 316, 365, 393, 398], "set_xlabel": [7, 10, 45, 53, 59, 71, 72, 74, 89, 91, 99, 108, 157, 160, 161, 165, 167, 168, 172, 185, 191, 193, 194, 196, 198, 211, 212, 230, 234, 256, 258, 262, 267, 268, 281, 298, 299, 303, 317, 340, 341, 344], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 59, 64, 71, 72, 74, 79, 89, 91, 99, 105, 108, 115, 157, 167, 172, 185, 187, 191, 193, 194, 196, 198, 211, 230, 234, 241, 256, 258, 262, 267, 268, 274, 281, 298, 299, 303, 306, 317, 334, 340, 344, 993], "spine": [7, 14, 207, 298], "set_color": [7, 207], "get_color": 7, "yaxi": [7, 10, 45, 59, 89, 100, 101, 193, 217, 219, 222, 241, 276, 281, 339], "tick_param": [7, 14, 131, 241, 256, 302, 317], "ax2": [7, 56, 59, 64, 66, 79, 91, 118, 161, 169, 196, 226, 235, 241, 259, 267, 286, 299, 303, 317, 339], "frameon": [7, 202], "line2": [7, 12, 220, 335], "orang": [7, 53, 91, 95, 96, 102, 123, 125, 155, 161, 184, 185, 206, 232, 244, 279, 287, 307, 347, 963], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 60, 160, 196, 198, 238, 251, 258, 300, 318, 339, 340, 341, 375, 379, 852], "prediction_perform": 7, "4948": 7, "2675": 7, "063912": 7, "1847": 7, "3264": 7, "048149": 7, "997": [7, 40], "3383": 7, "039341": 7, "802": [7, 167, 365], "3582": 7, "035714": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000178": 7, "5289": 7, "8022": [7, 381, 454, 1013], "000245": 7, "5193": 7, "8353": 7, "000401": 7, "124": [7, 115, 132, 400, 1006], "5131": [7, 1009], "3279": 7, "000643": 7, "178": [7, 49, 67, 365, 374, 491, 823], "5149": 7, "0779": 7, "000860": 7, "4066": 7, "4812": 7, "000145": 7, "3551": 7, "1723": 7, "000146": 7, "3445": 7, "2171": 7, "000187": 7, "3433": 7, "0358": 7, "000227": 7, "3456": 7, "0602": 7, "000261": 7, "deduc": 7, "guarante": [7, 8, 79, 80, 166, 204, 229, 274, 276, 298, 340, 350, 356, 362, 376, 377, 393, 397, 398, 401, 517, 626, 639, 640, 649, 653, 655, 657, 659, 668, 675, 794, 797, 819, 820, 857, 859, 871, 872, 885, 954, 958, 959, 961, 965, 970, 974, 978, 996, 1014], "aspect": [7, 57, 85, 94, 152, 167, 217, 225, 285, 332, 354, 355, 356, 368, 381, 393, 639, 640, 978, 986], "365": [7, 15, 340, 395, 454], "plot_model_complexity_influ": [7, 15], "doesn": [8, 196, 242, 294, 326, 376, 381, 393, 401, 402, 406, 416, 456, 613, 614, 647, 649, 657, 697, 811, 821, 822, 836, 961, 962, 978, 1008], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 57, 69, 71, 77, 78, 79, 81, 84, 91, 95, 96, 100, 102, 104, 105, 108, 109, 112, 113, 119, 120, 121, 122, 123, 127, 128, 145, 149, 151, 152, 153, 156, 157, 163, 166, 167, 168, 169, 175, 177, 183, 190, 193, 194, 195, 196, 197, 214, 216, 218, 219, 220, 221, 223, 232, 242, 245, 247, 255, 256, 276, 288, 289, 294, 306, 309, 310, 314, 315, 317, 322, 323, 326, 327, 330, 331, 334, 339, 340, 341, 347, 348, 350, 354, 355, 362, 363, 365, 368, 370, 372, 374, 376, 379, 380, 381, 384, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 406, 410, 414, 416, 419, 428, 429, 431, 437, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 476, 477, 494, 495, 496, 500, 501, 506, 511, 513, 515, 522, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 571, 572, 575, 588, 589, 591, 592, 608, 609, 611, 612, 613, 614, 616, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 677, 685, 691, 697, 698, 706, 716, 717, 735, 736, 737, 747, 768, 769, 772, 773, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 830, 835, 836, 837, 845, 850, 852, 853, 859, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 915, 926, 951, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 976, 977, 978, 985, 988, 995, 996, 997, 998, 999, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "memori": [8, 54, 70, 71, 98, 119, 166, 167, 278, 306, 308, 310, 311, 339, 340, 341, 355, 356, 362, 368, 371, 377, 381, 394, 397, 398, 401, 404, 405, 423, 424, 425, 426, 427, 428, 430, 431, 435, 438, 440, 449, 454, 460, 477, 484, 489, 514, 515, 516, 519, 536, 537, 538, 539, 544, 545, 546, 562, 563, 569, 570, 572, 627, 628, 629, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 650, 657, 658, 659, 660, 661, 662, 665, 758, 759, 760, 761, 777, 783, 791, 800, 801, 802, 803, 806, 807, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 839, 840, 857, 859, 868, 869, 871, 876, 878, 879, 886, 887, 888, 889, 899, 931, 947, 958, 964, 965, 972, 974, 975, 977, 978, 982, 983, 986, 988, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "onlin": [8, 14, 36, 67, 94, 97, 163, 174, 210, 215, 356, 363, 367, 373, 381, 393, 398, 401, 403, 424, 428, 430, 476, 483, 512, 517, 518, 519, 520, 526, 527, 563, 565, 639, 647, 648, 649, 657, 659, 805, 814, 815, 816, 817, 818, 821, 822, 827, 829, 830, 848, 849, 859, 878, 879, 954, 958, 966, 968, 981, 984, 986, 995, 999, 1004, 1008, 1009, 1011, 1019], "partial_fit": [8, 50, 94, 310, 356, 370, 381, 393, 398, 424, 430, 515, 517, 518, 519, 570, 578, 639, 640, 647, 648, 649, 657, 658, 659, 807, 808, 811, 812, 814, 815, 816, 817, 818, 835, 836, 837, 848, 849, 859, 878, 958, 964, 966, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019], "fed": [8, 128, 350, 363, 401, 951, 967, 972, 1015], "batch": [8, 11, 63, 94, 98, 289, 310, 356, 377, 381, 401, 422, 424, 428, 430, 432, 434, 512, 514, 515, 517, 518, 519, 520, 521, 523, 524, 526, 527, 645, 666, 667, 782, 795, 796, 814, 815, 816, 817, 818, 836, 837, 848, 849, 859, 871, 918, 928, 966, 967, 976, 1004, 1008, 1009, 1012, 1013, 1014, 1015, 1017, 1019, 1020], "remain": [8, 25, 27, 70, 115, 120, 122, 144, 166, 196, 212, 241, 254, 258, 262, 265, 390, 394, 395, 397, 401, 445, 448, 496, 497, 502, 509, 515, 551, 591, 592, 680, 743, 749, 779, 780, 781, 782, 785, 787, 814, 815, 816, 818, 919, 951, 952, 961, 962, 966, 972, 978, 983, 1006, 1012, 1018], "hashingvector": [8, 341, 356, 470, 569, 571, 1005, 1011, 1012, 1013, 1014, 1017], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 56, 79, 85, 91, 94, 97, 100, 104, 105, 108, 111, 113, 118, 119, 121, 125, 142, 145, 148, 154, 157, 161, 166, 175, 180, 188, 197, 205, 206, 207, 209, 213, 214, 217, 219, 220, 225, 226, 229, 232, 236, 247, 252, 253, 256, 258, 262, 263, 265, 267, 268, 295, 298, 300, 301, 302, 303, 306, 308, 309, 315, 316, 324, 334, 335, 336, 339, 344, 345, 350, 354, 355, 356, 362, 364, 365, 367, 368, 370, 372, 374, 375, 376, 379, 380, 381, 384, 387, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414, 419, 426, 428, 429, 433, 442, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 468, 477, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 563, 564, 565, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 590, 591, 592, 594, 596, 600, 603, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 672, 673, 674, 677, 680, 688, 693, 697, 705, 709, 710, 711, 719, 722, 735, 743, 748, 749, 750, 753, 761, 762, 763, 764, 767, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 804, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 849, 852, 854, 855, 858, 859, 864, 866, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 906, 907, 908, 909, 915, 947, 951, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 983, 985, 988, 989, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "word": [8, 14, 19, 69, 148, 229, 232, 326, 340, 341, 354, 363, 364, 368, 370, 373, 381, 390, 393, 395, 396, 397, 398, 434, 492, 504, 515, 517, 522, 569, 570, 572, 677, 808, 818, 875, 956, 960, 964, 967, 972, 975, 976, 986, 995, 996, 1004, 1012], "federicov": 8, "itertool": [8, 42, 44, 61, 129, 167, 181, 242, 247, 256, 263, 265, 400], "pathlib": [8, 1019], "path": [8, 16, 17, 163, 174, 181, 185, 215, 344, 362, 366, 368, 372, 376, 377, 381, 423, 427, 431, 467, 468, 469, 480, 481, 482, 484, 485, 486, 489, 490, 529, 538, 539, 544, 545, 546, 547, 574, 575, 578, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 662, 663, 664, 665, 666, 667, 669, 839, 840, 885, 886, 887, 888, 889, 920, 951, 958, 959, 968, 982, 983, 1004, 1005, 1008, 1010, 1011, 1013, 1014, 1016, 1017, 1019, 1020], "hashlib": 8, "sha256": [8, 1019], "tarfil": 8, "sy": [8, 12, 16, 19, 204, 229, 276, 318, 341, 363, 379, 598], "rcparam": [8, 225, 230], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 196, 214, 309, 355, 362, 366, 367, 371, 381, 382, 387, 398, 401, 402, 430, 553, 592, 613, 680, 965, 997, 1010, 1011, 1012], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 65, 69, 97, 163, 257, 318, 338, 339, 340, 341, 356, 357, 363, 393, 394, 401, 445, 484, 525, 852, 960, 996, 997, 1004, 1005, 1006, 1007, 1010, 1011], "passiveaggressiveclassifi": [8, 203, 354, 356, 958, 963, 1005, 1008, 1009, 1011, 1012, 1015, 1017], "perceptron": [8, 163, 167, 203, 206, 212, 235, 291, 296, 356, 379, 401, 495, 496, 503, 647, 657, 805, 835, 836, 837, 840, 859, 960, 963, 967, 976, 984, 999, 1008, 1010, 1011, 1012, 1016], "naive_bay": [8, 24, 25, 27, 31, 126, 130, 257, 258, 339, 350, 356, 357, 363, 394, 400, 419, 550, 840, 956, 963, 964, 997, 1005, 1006, 1008, 1009, 1010, 1011], "multinomialnb": [8, 356, 363, 394, 401, 814, 815, 816, 817, 964, 997, 1006, 1008, 1011, 1012, 1016, 1017, 1019], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 70, 124, 151, 154, 156, 166, 167, 196, 214, 218, 226, 254, 298, 348, 350, 355, 363, 366, 367, 368, 370, 372, 373, 374, 381, 393, 394, 395, 397, 398, 400, 402, 405, 422, 424, 432, 434, 435, 440, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 472, 473, 477, 478, 484, 489, 490, 495, 503, 508, 512, 513, 518, 519, 520, 521, 523, 526, 527, 529, 533, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 562, 569, 570, 571, 572, 578, 583, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 612, 613, 614, 616, 617, 618, 619, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 671, 675, 676, 678, 679, 681, 683, 685, 693, 722, 741, 747, 754, 758, 769, 777, 780, 781, 782, 783, 791, 795, 796, 799, 802, 803, 805, 808, 810, 813, 814, 815, 816, 818, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 837, 843, 865, 878, 879, 880, 881, 882, 883, 884, 890, 892, 896, 898, 899, 900, 902, 914, 915, 935, 946, 950, 951, 952, 957, 958, 962, 967, 968, 974, 976, 977, 986, 1011, 1012, 1013], "builder": [8, 10, 372], "__file__": [8, 10, 1017], "global": [8, 10, 42, 56, 94, 196, 217, 218, 238, 265, 294, 307, 350, 354, 355, 374, 379, 381, 393, 403, 424, 433, 443, 449, 571, 607, 613, 669, 672, 673, 676, 688, 709, 710, 718, 763, 764, 767, 768, 795, 874, 876, 930, 932, 951, 959, 962, 968, 978, 986, 1012, 1019], "21578": [8, 1017], "uci": [8, 303, 362, 365, 481, 483, 485, 491], "ml": [8, 362, 365, 373, 481, 483, 491, 958, 960, 982, 983, 986], "uncompress": [8, 489, 490, 997], "reuterspars": 8, "pars": [8, 17, 354, 362, 363, 369, 489], "sgml": [8, 354], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 67, 75, 82, 86, 92, 106, 132, 138, 146, 158, 162, 170, 173, 215, 223, 239, 248, 272, 275, 290, 296, 304, 312, 320, 337, 339, 340, 342, 349, 354, 356, 362, 363, 365, 366, 368, 372, 373, 374, 376, 379, 387, 394, 398, 468, 474, 475, 477, 484, 489, 490, 515, 560, 561, 569, 570, 572, 890, 965, 978, 982, 985, 989, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019], "yield": [8, 9, 25, 45, 77, 78, 79, 80, 119, 121, 191, 196, 211, 214, 261, 274, 292, 298, 323, 328, 339, 340, 350, 354, 356, 362, 373, 381, 390, 393, 395, 397, 398, 400, 401, 402, 403, 419, 430, 449, 453, 489, 490, 518, 519, 520, 522, 527, 534, 535, 540, 541, 542, 543, 548, 549, 575, 583, 628, 632, 633, 634, 636, 642, 644, 646, 654, 656, 667, 680, 706, 761, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 806, 810, 813, 870, 871, 909, 916, 918, 919, 954, 956, 958, 959, 962, 977, 978, 992, 1009, 1010, 1012, 1015, 1017], "__init__": [8, 16, 55, 156, 276, 326, 368, 370, 372, 373, 374, 375, 381, 401, 407, 922, 1005, 1010, 1012, 1017, 1018, 1019, 1020], "self": [8, 16, 19, 25, 27, 55, 156, 163, 276, 313, 319, 320, 326, 339, 362, 368, 369, 370, 373, 374, 375, 376, 393, 401, 403, 407, 410, 414, 415, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 481, 489, 490, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 684, 775, 776, 777, 780, 781, 791, 796, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 922, 928, 936, 965, 983, 984, 986, 999, 1006, 1011, 1018], "latin": [8, 401], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 70, 225, 316, 362, 367, 371, 372, 376, 379, 381, 401, 477, 807, 983, 985, 1009, 1013, 1014, 1015, 1018, 1019, 1020], "attr": [8, 55], "start_": 8, "getattr": [8, 298, 370, 381], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 69, 145, 235, 311, 365], "topic_d": 8, "fd": 8, "chunk": [8, 50, 354, 355, 393, 398, 404, 426, 430, 449, 519, 758, 761, 807, 808, 814, 815, 816, 817, 818, 876, 964, 1011, 1012, 1013, 1014, 1015], "feed": [8, 85, 197, 341, 363, 373, 379, 393, 401, 852, 963], "decod": [8, 289, 363, 381, 484, 550, 569, 570, 572, 1004, 1005], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 59, 65, 77, 78, 81, 99, 112, 118, 121, 124, 128, 148, 149, 152, 153, 154, 155, 156, 157, 166, 168, 202, 218, 225, 231, 234, 241, 247, 256, 257, 282, 283, 298, 306, 326, 331, 340, 350, 363, 368, 370, 376, 379, 381, 382, 391, 392, 393, 396, 397, 400, 403, 431, 436, 453, 489, 490, 513, 544, 609, 624, 628, 642, 653, 655, 668, 686, 726, 775, 795, 796, 814, 815, 816, 818, 825, 899, 951, 955, 956, 958, 959, 961, 962, 963, 965, 968, 969, 972, 977, 986, 995, 1007, 1011, 1012, 1013], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 70, 84, 103, 115, 116, 119, 141, 145, 196, 204, 234, 246, 254, 255, 260, 268, 285, 289, 309, 341, 348, 356, 357, 361, 362, 363, 365, 368, 371, 375, 379, 389, 390, 391, 393, 394, 395, 396, 398, 400, 401, 402, 403, 408, 409, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 716, 773, 775, 776, 777, 780, 781, 783, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 922, 923, 946, 956, 958, 963, 965, 966, 968, 972, 975, 976, 977, 978, 986, 988, 994, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "end_reut": 8, "sub": [8, 37, 48, 53, 56, 59, 69, 104, 233, 241, 308, 314, 315, 323, 326, 335, 363, 368, 370, 374, 394, 400, 401, 517, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 652, 923, 958, 962, 976, 997, 1014, 1018], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 71, 81, 94, 97, 109, 112, 117, 119, 120, 122, 123, 145, 157, 160, 163, 175, 176, 204, 211, 243, 244, 249, 251, 267, 272, 292, 294, 295, 300, 308, 315, 317, 318, 326, 368, 370, 374, 376, 377, 380, 381, 388, 393, 396, 398, 400, 402, 405, 419, 422, 423, 425, 427, 428, 429, 430, 433, 435, 440, 442, 443, 444, 452, 453, 459, 463, 464, 465, 492, 496, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 540, 541, 542, 543, 545, 548, 549, 562, 563, 569, 570, 572, 574, 575, 583, 591, 608, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 813, 828, 835, 836, 837, 838, 839, 843, 850, 852, 854, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 893, 914, 915, 921, 928, 952, 958, 959, 961, 962, 965, 966, 967, 975, 976, 977, 978, 983, 986, 992, 996, 997, 999, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "archiv": [8, 362, 363, 365, 366, 387, 393, 424, 483, 491, 738, 739, 960, 977, 997], "exist": [8, 9, 17, 19, 53, 214, 256, 294, 298, 362, 367, 370, 371, 374, 379, 381, 382, 384, 387, 393, 397, 398, 400, 401, 403, 408, 416, 419, 432, 434, 449, 480, 530, 536, 537, 538, 539, 545, 546, 566, 570, 578, 584, 613, 614, 626, 657, 658, 659, 661, 679, 681, 683, 742, 745, 749, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 824, 839, 844, 852, 853, 946, 954, 959, 961, 962, 966, 968, 969, 972, 982, 986, 996, 1004, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "str": [8, 10, 16, 57, 59, 103, 105, 117, 214, 234, 256, 268, 276, 286, 324, 339, 362, 363, 377, 401, 404, 405, 409, 413, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 433, 438, 445, 446, 447, 448, 449, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 532, 542, 543, 547, 548, 549, 550, 551, 557, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 598, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 640, 647, 648, 652, 654, 656, 657, 659, 669, 670, 673, 677, 678, 679, 680, 681, 683, 685, 688, 690, 692, 694, 707, 709, 710, 712, 713, 718, 737, 751, 754, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 771, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 803, 804, 806, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 876, 890, 891, 892, 894, 897, 898, 899, 902, 905, 907, 911, 923, 925, 946, 947, 950, 1019], "kei": [8, 9, 10, 17, 19, 42, 118, 128, 160, 165, 214, 237, 257, 259, 260, 307, 308, 309, 310, 311, 356, 361, 370, 373, 374, 375, 379, 381, 384, 393, 394, 397, 403, 445, 453, 542, 543, 548, 549, 550, 551, 569, 572, 575, 598, 607, 613, 614, 615, 640, 777, 780, 781, 789, 791, 802, 838, 839, 893, 903, 927, 983, 997, 1001, 1010, 1016, 1017, 1019, 1020], "download_url": 8, "ic": [8, 167, 308, 362, 365, 383, 483, 491, 613, 614, 999, 1016, 1017], "databas": [8, 303, 354, 356, 363, 365, 393, 398, 400, 401, 404, 424, 426, 491, 536, 537, 871, 974], "reuters21578": 8, "mld": 8, "tar": [8, 372], "gz": [8, 372, 384, 489, 490], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 61, 81, 98, 112, 117, 121, 156, 166, 167, 185, 198, 214, 218, 225, 229, 231, 232, 233, 256, 257, 260, 267, 276, 281, 289, 292, 293, 300, 339, 340, 348, 368, 372, 374, 400, 401, 403, 405, 419, 430, 489, 501, 514, 550, 606, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 653, 654, 655, 657, 660, 662, 663, 664, 665, 684, 690, 748, 768, 772, 774, 780, 781, 805, 843, 852, 855, 865, 878, 879, 893, 924, 926, 928, 949, 978], "mkdir": [8, 374, 376], "parent": [8, 165, 368, 372, 381, 393, 424, 444, 1004], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 67, 75, 82, 86, 92, 106, 132, 138, 146, 158, 162, 170, 173, 215, 223, 229, 239, 248, 272, 275, 290, 296, 304, 312, 320, 337, 339, 341, 342, 349, 363, 374, 880, 881, 882, 883, 884, 977, 1000], "1e6": [8, 10, 189, 229, 339, 341, 354, 517, 872, 962, 974], "current_sz_mb": 8, "stdout": [8, 94, 204, 808, 828, 836, 837], "write": [8, 17, 161, 339, 354, 355, 362, 366, 367, 371, 372, 373, 374, 376, 377, 379, 381, 384, 394, 398, 401, 973, 983, 997, 1005, 1017], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 318, 363, 374, 387, 469, 481, 484, 485, 488, 569, 570, 572, 997, 1004, 1009, 1012, 1013], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 95, 229, 256, 265, 355, 371, 983], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 219, 362, 363, 367, 368, 372, 374, 379, 380, 382, 384, 387, 394, 401, 468, 477, 489, 490, 952, 986, 991, 1007, 1011, 1012, 1014], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 401, 484, 569, 570, 572, 1006], "alternate_sign": [8, 401, 563, 570, 1011], "data_stream": 8, "binari": [8, 13, 25, 27, 108, 113, 124, 126, 142, 156, 166, 172, 187, 189, 196, 204, 218, 226, 237, 253, 254, 259, 265, 271, 274, 280, 326, 332, 348, 350, 362, 363, 364, 370, 372, 373, 381, 384, 387, 390, 391, 392, 393, 400, 401, 403, 419, 420, 421, 433, 468, 481, 489, 490, 501, 504, 530, 531, 534, 536, 540, 542, 543, 547, 548, 549, 562, 569, 570, 572, 574, 575, 583, 591, 608, 609, 610, 611, 613, 614, 639, 640, 647, 649, 654, 655, 656, 657, 681, 684, 688, 689, 690, 693, 694, 696, 699, 701, 707, 709, 710, 714, 715, 718, 719, 720, 721, 722, 723, 762, 763, 764, 767, 768, 769, 772, 774, 777, 778, 780, 781, 782, 783, 791, 795, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 814, 825, 835, 846, 850, 852, 862, 878, 880, 883, 925, 952, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 976, 977, 978, 985, 988, 1001, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1019], "acq": 8, "chosen": [8, 46, 72, 128, 149, 166, 167, 185, 197, 200, 213, 232, 250, 251, 253, 259, 340, 350, 354, 379, 393, 395, 396, 400, 403, 422, 430, 432, 434, 435, 441, 477, 504, 516, 538, 539, 540, 541, 545, 546, 628, 634, 637, 639, 640, 642, 644, 652, 657, 658, 659, 660, 661, 671, 675, 772, 775, 776, 777, 780, 781, 791, 809, 828, 878, 886, 887, 888, 889, 915, 951, 954, 956, 958, 959, 961, 963, 968, 969, 976, 992, 993, 995, 996, 1012], "evenli": [8, 39, 52, 121, 251, 401, 919, 997], "care": [8, 122, 354, 356, 372, 374, 379, 381, 382, 391, 393, 395, 401, 419, 441, 450, 621, 639, 640, 647, 649, 657, 658, 659, 676, 878, 959, 977, 986], "all_class": 8, "positive_class": [8, 693], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 71, 72, 94, 97, 114, 130, 134, 136, 157, 160, 161, 166, 167, 182, 188, 189, 203, 204, 205, 208, 209, 211, 217, 218, 219, 220, 235, 236, 241, 243, 244, 247, 269, 286, 292, 293, 294, 308, 309, 310, 314, 315, 323, 339, 340, 374, 381, 400, 405, 422, 425, 428, 429, 430, 435, 440, 442, 452, 453, 459, 463, 464, 465, 512, 513, 514, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 542, 543, 608, 619, 621, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 653, 655, 657, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 674, 675, 775, 776, 791, 828, 836, 837, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 952, 954, 958, 965, 966, 975, 976, 993, 997, 1005, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "nb": [8, 102, 126, 350, 816, 964], "multinomi": [8, 30, 163, 174, 211, 215, 232, 251, 265, 363, 364, 368, 398, 400, 477, 493, 504, 532, 534, 540, 542, 550, 639, 640, 721, 805, 813, 814, 815, 816, 817, 818, 859, 901, 962, 963, 978, 984, 997, 999, 1004, 1008, 1010, 1011, 1012, 1017, 1018], "passiv": [8, 203, 647, 648, 984, 999, 1005], "aggress": [8, 203, 647, 648, 780, 781, 984, 999, 1005], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 393, 398, 430, 515, 657, 835, 836, 837, 982, 1004], "tupl": [8, 48, 49, 104, 167, 214, 361, 362, 363, 370, 381, 397, 405, 416, 432, 434, 445, 448, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 489, 491, 493, 494, 495, 503, 514, 527, 542, 543, 548, 549, 550, 551, 563, 564, 565, 568, 569, 570, 572, 608, 613, 614, 615, 693, 700, 761, 763, 775, 777, 791, 802, 819, 820, 838, 839, 849, 850, 854, 857, 864, 868, 880, 881, 882, 883, 884, 893, 899, 900, 902, 906, 907, 908, 909, 923, 929, 946, 969, 1010, 1011, 1015, 1016, 1017], "x_text": 8, "befor": [8, 12, 25, 42, 69, 71, 74, 85, 128, 141, 155, 157, 159, 162, 163, 166, 167, 169, 177, 184, 185, 189, 256, 263, 278, 299, 302, 303, 309, 329, 350, 354, 355, 363, 366, 368, 370, 371, 373, 374, 376, 377, 379, 381, 382, 383, 387, 393, 394, 395, 397, 398, 402, 405, 406, 425, 428, 429, 430, 440, 442, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 471, 482, 515, 518, 519, 520, 521, 522, 525, 527, 528, 542, 543, 546, 548, 550, 551, 558, 569, 570, 572, 592, 608, 609, 611, 631, 632, 635, 636, 637, 645, 646, 647, 648, 649, 652, 657, 659, 668, 673, 675, 680, 775, 776, 782, 783, 795, 796, 798, 801, 803, 805, 819, 820, 827, 828, 829, 830, 831, 834, 839, 840, 843, 846, 853, 857, 858, 859, 863, 864, 866, 867, 868, 869, 875, 886, 887, 915, 946, 952, 958, 959, 962, 968, 972, 976, 977, 978, 983, 997, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "exclud": [8, 19, 165, 298, 368, 372, 381, 445, 447, 709, 710, 718, 763, 764, 767, 790, 798, 854, 937, 962, 965, 1013], "invalid": [8, 196, 381, 559, 652, 693, 754, 958, 962, 1010, 1012, 1014, 1015, 1017, 1018], "assign": [8, 17, 37, 46, 49, 56, 57, 59, 114, 124, 126, 141, 150, 209, 214, 225, 230, 232, 292, 300, 319, 334, 340, 363, 368, 370, 381, 390, 397, 398, 400, 401, 402, 403, 422, 423, 424, 425, 427, 428, 429, 430, 433, 435, 437, 440, 442, 443, 496, 517, 542, 543, 574, 575, 588, 589, 591, 639, 640, 647, 648, 649, 657, 658, 659, 685, 686, 696, 697, 698, 701, 711, 719, 723, 735, 737, 766, 771, 772, 773, 777, 780, 781, 783, 786, 791, 800, 801, 802, 803, 806, 823, 829, 831, 832, 833, 846, 873, 874, 878, 879, 880, 881, 882, 883, 884, 956, 961, 962, 963, 964, 965, 966, 967, 972, 975, 986, 988, 997, 1004, 1009, 1011, 1012], "format": [8, 11, 12, 19, 20, 21, 48, 54, 57, 60, 69, 79, 94, 104, 112, 117, 120, 122, 134, 140, 141, 169, 172, 176, 182, 187, 196, 214, 251, 261, 263, 264, 267, 270, 280, 281, 284, 285, 302, 306, 333, 344, 348, 354, 361, 367, 368, 370, 371, 376, 377, 380, 381, 394, 397, 400, 401, 415, 424, 425, 427, 428, 430, 431, 433, 440, 445, 449, 463, 464, 465, 466, 468, 470, 477, 478, 479, 489, 490, 491, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 532, 538, 539, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 627, 633, 639, 640, 641, 643, 647, 649, 657, 658, 659, 669, 670, 678, 694, 701, 719, 720, 731, 748, 808, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 865, 870, 871, 876, 878, 890, 898, 899, 920, 924, 928, 933, 936, 938, 939, 940, 941, 942, 943, 952, 962, 965, 970, 972, 973, 976, 978, 982, 988, 989, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019], "islic": [8, 44, 61], "asarrai": [8, 17, 196, 214, 295, 316, 339, 340, 370, 381, 389, 566, 567, 706, 736, 827, 829, 830, 831, 972, 977], "int": [8, 10, 13, 16, 17, 19, 37, 44, 61, 80, 112, 120, 124, 136, 137, 149, 150, 151, 157, 161, 165, 177, 187, 189, 196, 214, 222, 225, 231, 234, 241, 251, 254, 255, 256, 276, 281, 283, 289, 315, 341, 363, 368, 370, 379, 381, 391, 394, 397, 401, 404, 405, 408, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 466, 469, 472, 473, 475, 476, 477, 478, 483, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 588, 589, 591, 592, 598, 608, 609, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 688, 690, 694, 698, 706, 707, 709, 710, 711, 714, 716, 717, 718, 736, 737, 749, 754, 755, 758, 759, 760, 761, 762, 763, 764, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 901, 902, 914, 915, 917, 918, 919, 920, 927, 931, 933, 936, 941, 942, 958, 969, 1004, 1010, 1014, 1015], "iter_minibatch": 8, "minibatch_s": [8, 356], "statist": [8, 80, 108, 112, 113, 123, 134, 135, 136, 137, 140, 144, 145, 163, 165, 166, 167, 168, 184, 249, 253, 255, 258, 265, 272, 298, 308, 350, 357, 361, 363, 365, 368, 374, 381, 393, 394, 395, 397, 398, 400, 402, 416, 450, 455, 474, 475, 497, 498, 499, 501, 503, 522, 527, 540, 541, 543, 585, 586, 587, 590, 608, 611, 615, 616, 625, 630, 637, 671, 675, 677, 691, 697, 702, 703, 704, 711, 723, 768, 777, 793, 809, 836, 837, 855, 856, 857, 859, 863, 866, 867, 869, 883, 886, 887, 937, 951, 952, 956, 958, 959, 961, 962, 963, 964, 969, 972, 976, 977, 978, 979, 980, 981, 989, 995, 996, 1009, 1012, 1015, 1016, 1018, 1019], "test_stat": 8, "n_test": [8, 10, 33, 112, 256, 1004, 1007], "n_test_po": 8, "hold": [8, 16, 26, 27, 196, 257, 348, 361, 368, 369, 370, 391, 393, 397, 400, 401, 403, 484, 542, 543, 570, 613, 614, 615, 716, 777, 780, 781, 791, 815, 846, 847, 852, 853, 862, 952, 956, 962, 966, 976, 977, 978, 985, 988, 997, 1012, 1016], "n_test_docu": 8, "tick": [8, 43, 59, 151, 235, 267, 613, 803], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 60, 80, 91, 97, 104, 120, 121, 141, 145, 156, 166, 177, 183, 192, 196, 211, 214, 218, 220, 265, 276, 283, 286, 310, 318, 331, 334, 339, 340, 341, 348, 365, 374, 381, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 403, 414, 424, 425, 428, 430, 440, 445, 446, 463, 464, 465, 496, 501, 504, 512, 515, 517, 518, 522, 525, 526, 527, 530, 531, 533, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 571, 572, 592, 594, 604, 606, 616, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 657, 658, 659, 660, 662, 665, 671, 675, 677, 680, 690, 691, 700, 706, 721, 736, 738, 739, 743, 768, 807, 808, 812, 813, 822, 826, 830, 837, 838, 858, 859, 878, 879, 881, 884, 886, 887, 888, 889, 917, 937, 943, 948, 958, 962, 963, 964, 965, 977, 978, 995, 1007, 1008, 1010, 1012, 1013, 1015], "cls_name": [8, 10], "stat": [8, 10, 69, 79, 100, 145, 169, 253, 256, 264, 268, 281, 308, 314, 315, 365, 377, 380, 395, 455, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 663, 664, 781, 789, 791, 886, 887, 917, 951, 958, 1011, 1013, 1017], "string": [8, 27, 70, 117, 156, 214, 227, 260, 309, 341, 354, 362, 363, 368, 369, 370, 374, 381, 387, 394, 397, 400, 401, 402, 404, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 470, 471, 477, 486, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 598, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 680, 690, 692, 700, 712, 742, 745, 751, 754, 758, 759, 760, 761, 770, 771, 775, 776, 777, 780, 781, 783, 791, 802, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 896, 898, 899, 906, 907, 908, 926, 930, 946, 947, 951, 952, 962, 975, 977, 988, 995, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "n_train": [8, 10, 33, 112, 256, 1004, 1007], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 177, 259, 354, 390, 395, 402, 489, 490, 530, 578, 608, 611, 625, 852, 856, 867, 952, 958, 1012, 1016], "mini": [8, 63, 94, 310, 356, 381, 401, 422, 424, 428, 430, 432, 434, 512, 514, 517, 518, 519, 520, 521, 523, 524, 526, 527, 966, 967, 1004, 1015, 1017], "smaller": [8, 24, 40, 46, 81, 153, 154, 157, 160, 181, 185, 187, 200, 229, 282, 283, 292, 298, 326, 334, 340, 368, 390, 392, 393, 395, 397, 398, 400, 402, 403, 421, 422, 431, 435, 437, 495, 515, 516, 538, 539, 540, 541, 545, 546, 574, 591, 600, 614, 627, 628, 630, 631, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 663, 664, 673, 690, 775, 780, 781, 825, 828, 852, 870, 871, 878, 886, 887, 888, 889, 915, 956, 958, 959, 961, 962, 963, 965, 966, 968, 972, 974, 976, 977, 978, 983, 997, 1012, 1017], "bigger": [8, 40, 59, 209, 256, 295, 336, 340, 353, 355, 401, 420, 421, 489, 519, 825, 992, 999], "overhead": [8, 276, 355, 356, 368, 374, 377, 379, 381, 400, 423, 427, 430, 515, 680, 811, 812, 814, 815, 816, 817, 818, 819, 820, 930, 964, 965, 1007, 1012, 1013, 1016], "partial": [8, 12, 50, 83, 86, 125, 163, 164, 170, 214, 224, 239, 308, 311, 365, 381, 383, 395, 396, 398, 400, 403, 445, 463, 464, 465, 466, 477, 482, 515, 517, 522, 543, 570, 613, 614, 638, 768, 805, 807, 808, 835, 836, 837, 840, 852, 853, 856, 859, 887, 959, 966, 976, 997, 999, 1001, 1005, 1012, 1013, 1017], "stream": [8, 393, 398, 401, 443, 570, 848, 849, 859, 954, 982, 1012, 1015], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 74, 113, 118, 121, 128, 166, 194, 198, 204, 218, 231, 233, 243, 253, 259, 310, 315, 340, 361, 368, 369, 370, 377, 394, 445, 507, 542, 543, 569, 570, 572, 613, 789, 852, 873, 874, 893, 894, 920, 954, 975, 983, 988], "updat": [8, 16, 44, 61, 109, 123, 230, 306, 341, 366, 367, 368, 372, 376, 381, 393, 398, 400, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 444, 446, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 937, 958, 965, 966, 967, 976, 985, 986, 1005, 1011, 1012, 1013, 1015, 1017, 1019, 1020], "accumul": [8, 50, 115, 116, 185, 372, 374, 393, 401, 962, 1005, 1012], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": 8, "1386": 8, "855": 8, "1381": 8, "877": [8, 254], "1363": 8, "933": [8, 73, 397], "1357": 8, "3911": 8, "517": [8, 433, 443, 995], "938": [8, 192, 255, 272, 765, 962, 992], "2030": 8, "936": [8, 419, 962], "2027": 8, "885": [8, 238, 365], "941": [8, 149, 158], "6821": 8, "891": [8, 260, 272, 318], "952": [8, 49], "17": [8, 19, 39, 52, 73, 79, 149, 166, 195, 221, 223, 229, 259, 292, 295, 302, 304, 363, 366, 373, 384, 385, 386, 393, 397, 403, 426, 442, 468, 478, 504, 512, 517, 521, 528, 530, 531, 536, 540, 541, 550, 551, 578, 609, 630, 638, 639, 640, 647, 650, 653, 655, 668, 673, 709, 710, 720, 741, 746, 764, 767, 769, 795, 817, 828, 843, 848, 849, 857, 859, 864, 880, 883, 886, 887, 888, 889, 951, 952, 963, 965, 972, 980, 1000, 1002, 1004, 1005, 1006, 1007, 1010, 1013, 1018], "2155": 8, "2152": 8, "900": [8, 50, 73, 74], "2145": 8, "953": [8, 49], "2143": 8, "9759": 8, "1276": 8, "949": 8, "2188": 8, "2186": 8, "909": 8, "2177": 8, "958": [8, 113, 132], "2175": 8, "11680": 8, "1499": 8, "944": [8, 992], "2088": 8, "956": [8, 257, 272, 992], "2087": 8, "2084": 8, "950": 8, "2083": 8, "14625": 8, "1865": 8, "965": [8, 962], "2135": 8, "903": 8, "2134": 8, "924": [8, 72], "86": [8, 32, 69, 142, 187, 300, 314, 315, 768, 886, 962, 993], "2131": 8, "957": [8, 403, 708, 962], "2129": 8, "17360": [8, 1015], "2179": 8, "2165": 8, "2164": 8, "932": 8, "03": [8, 12, 15, 28, 52, 67, 75, 79, 82, 84, 94, 132, 146, 153, 158, 162, 166, 177, 214, 223, 229, 239, 241, 247, 257, 296, 304, 315, 365, 401, 728, 777, 958, 962], "2162": 8, "2161": 8, "curv": [8, 11, 23, 28, 37, 74, 77, 112, 114, 120, 163, 174, 175, 186, 196, 214, 215, 217, 219, 222, 224, 226, 234, 235, 239, 240, 248, 249, 256, 266, 272, 293, 306, 346, 375, 388, 392, 397, 399, 419, 420, 421, 483, 491, 496, 502, 506, 545, 613, 626, 639, 679, 681, 683, 687, 688, 689, 690, 707, 709, 721, 722, 762, 764, 767, 768, 769, 775, 776, 783, 794, 803, 805, 806, 817, 840, 859, 878, 883, 958, 959, 961, 962, 968, 978, 984, 986, 999, 1001, 1006, 1007, 1010, 1014, 1016, 1017, 1018, 1019], "evolut": [8, 10, 268, 354, 356, 527], "cours": [8, 9, 172, 354, 368, 370, 398, 401, 402, 952, 957, 958, 986], "valid": [8, 13, 26, 54, 55, 70, 73, 77, 81, 102, 113, 117, 118, 119, 120, 121, 133, 138, 139, 143, 145, 146, 156, 163, 166, 168, 174, 184, 196, 198, 204, 214, 215, 233, 243, 246, 249, 253, 256, 257, 258, 260, 262, 264, 265, 270, 272, 280, 295, 299, 306, 308, 317, 326, 334, 344, 355, 363, 368, 371, 379, 380, 381, 387, 388, 391, 393, 394, 395, 398, 399, 400, 401, 402, 403, 409, 419, 424, 425, 427, 428, 430, 431, 438, 444, 445, 449, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 474, 482, 483, 485, 496, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 556, 558, 563, 564, 570, 574, 575, 578, 583, 613, 615, 619, 620, 621, 622, 623, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 680, 682, 687, 694, 708, 742, 745, 754, 758, 759, 760, 765, 770, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 845, 851, 859, 870, 871, 873, 874, 876, 878, 880, 883, 885, 886, 887, 888, 889, 898, 899, 902, 909, 921, 952, 961, 962, 963, 966, 970, 972, 974, 976, 977, 978, 982, 983, 986, 988, 991, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "consumpt": [8, 354, 515, 538, 539, 545, 546, 777, 791, 800, 801, 802, 886, 887, 888, 889, 928, 988, 1004, 1006, 1010, 1012, 1013, 1018], "queue": [8, 965, 1007], "up": [8, 11, 37, 44, 46, 47, 48, 52, 56, 61, 69, 79, 80, 88, 91, 114, 161, 167, 175, 189, 197, 212, 213, 234, 243, 258, 261, 276, 289, 295, 299, 310, 315, 323, 339, 341, 356, 362, 363, 368, 372, 374, 375, 376, 377, 379, 381, 382, 391, 393, 398, 400, 401, 425, 428, 429, 430, 431, 433, 437, 440, 441, 442, 489, 490, 517, 530, 531, 538, 539, 540, 541, 542, 543, 545, 546, 547, 591, 608, 613, 614, 620, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 662, 663, 664, 665, 673, 686, 749, 775, 776, 779, 780, 781, 783, 803, 854, 857, 868, 886, 887, 888, 889, 892, 915, 918, 919, 951, 958, 959, 962, 965, 976, 977, 983, 985, 986, 996, 997, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "amount": [8, 12, 45, 53, 65, 77, 80, 94, 98, 110, 112, 154, 166, 214, 230, 308, 314, 317, 319, 326, 334, 341, 354, 355, 356, 379, 392, 393, 395, 398, 400, 401, 402, 425, 435, 450, 519, 520, 522, 524, 544, 577, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 646, 662, 665, 673, 780, 781, 819, 820, 825, 874, 875, 888, 889, 957, 958, 961, 964, 966, 972, 974, 975, 976, 977, 995, 996, 1017], "learner": [8, 108, 110, 119, 128, 356, 538, 539, 540, 541, 545, 546, 547, 563, 570, 611, 821, 822, 827, 829, 830, 964, 967, 978, 982, 983, 997], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 61, 85, 151, 200, 201, 205, 207, 225, 237, 260, 284, 286, 299, 322, 324, 327, 328, 969, 1001], "set_ylim": [8, 10, 16, 31, 42, 59, 71, 91, 108, 114, 125, 126, 157, 167, 169, 176, 194, 196, 197, 230, 241, 260, 263, 274, 281, 292, 298, 300, 301, 303, 307, 317, 335], "runtim": [8, 10, 57, 182, 211, 213, 230, 295, 300, 355, 370, 371, 379, 381, 392, 393, 400, 431, 544, 660, 791, 878, 879, 880, 881, 882, 883, 884, 976, 977, 1007, 1011, 1012, 1018, 1019], "gcf": [8, 969], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 71, 115, 118, 119, 122, 130, 141, 145, 156, 160, 167, 175, 241, 246, 255, 257, 261, 274, 303, 310, 311, 340, 370, 396, 562, 613, 629, 650, 661, 962, 969, 976, 978, 1010, 1011, 1012, 1013], "width": [8, 10, 16, 45, 53, 79, 89, 96, 97, 103, 104, 105, 112, 117, 118, 121, 130, 141, 150, 156, 179, 238, 241, 255, 298, 300, 301, 308, 311, 323, 365, 394, 420, 421, 433, 445, 474, 475, 487, 502, 567, 844, 891, 972, 976, 978, 994, 995, 1012], "set_xticklabel": [8, 10, 79, 105, 130, 151, 167, 169, 267, 268, 274], "ymax": [8, 10, 11, 77, 183, 185, 188, 189, 197, 205, 256, 289], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 56, 59, 63, 64, 71, 74, 79, 89, 91, 99, 105, 114, 115, 124, 126, 128, 129, 157, 160, 161, 165, 166, 167, 168, 175, 176, 185, 187, 194, 196, 197, 198, 204, 217, 218, 221, 222, 228, 230, 231, 234, 235, 241, 250, 251, 252, 253, 256, 258, 259, 263, 267, 268, 274, 276, 280, 281, 286, 292, 293, 298, 299, 300, 301, 302, 303, 306, 310, 314, 315, 323, 334, 335, 336, 339, 344], "autolabel": [8, 119], "attach": [8, 119, 339, 416, 824, 1005, 1015], "rect": [8, 52, 119, 175], "height": [8, 14, 53, 97, 118, 145, 169, 298, 339, 399, 474, 475, 487, 567], "get_height": [8, 119], "get_x": [8, 119], "get_width": [8, 119], "va": [8, 119, 267, 284, 286, 333], "setp": [8, 10, 180, 267, 270], "rotat": [8, 40, 93, 96, 99, 106, 120, 130, 163, 169, 220, 267, 268, 274, 326, 333, 396, 398, 403, 405, 485, 513, 522, 531, 595, 678, 859, 890, 958, 1015, 1016], "read": [8, 17, 94, 217, 263, 306, 307, 308, 310, 354, 362, 366, 369, 370, 371, 372, 373, 375, 376, 379, 380, 381, 393, 404, 405, 406, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 951, 958, 962, 963, 982, 986, 997, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "feat": [8, 10, 372, 401], "extr": 8, "hash": [8, 107, 132, 163, 340, 341, 354, 356, 360, 368, 371, 379, 400, 495, 525, 538, 547, 562, 563, 570, 621, 814, 927, 954, 997, 999, 1005, 1008, 1011], "vect": [8, 69, 257, 318, 401, 997], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 55, 56, 69, 70, 73, 74, 77, 79, 85, 91, 96, 100, 108, 109, 112, 116, 119, 123, 125, 127, 128, 140, 145, 147, 148, 149, 150, 153, 154, 155, 156, 158, 163, 165, 167, 168, 172, 185, 192, 193, 196, 198, 200, 204, 210, 213, 214, 217, 218, 220, 222, 225, 227, 228, 230, 231, 233, 256, 263, 268, 269, 277, 290, 303, 305, 306, 308, 317, 326, 327, 331, 332, 334, 335, 340, 341, 347, 350, 354, 365, 368, 373, 376, 380, 396, 398, 400, 401, 496, 591, 592, 594, 595, 596, 600, 603, 604, 828, 951, 958, 962, 965, 968, 974, 975, 976, 977, 986, 988], "robust": [9, 60, 62, 76, 82, 121, 161, 163, 166, 167, 174, 198, 213, 215, 225, 298, 356, 365, 370, 376, 393, 400, 401, 429, 450, 451, 454, 455, 456, 457, 505, 515, 540, 541, 630, 638, 651, 652, 659, 660, 730, 809, 840, 854, 856, 857, 867, 873, 913, 962, 966, 968, 972, 975, 976, 982, 984, 986, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "covari": [9, 12, 29, 33, 35, 78, 82, 84, 102, 105, 124, 148, 155, 157, 225, 240, 242, 245, 246, 247, 248, 357, 377, 381, 393, 396, 398, 403, 463, 464, 465, 466, 485, 496, 500, 508, 513, 515, 522, 527, 529, 530, 531, 544, 591, 592, 594, 603, 604, 625, 626, 631, 635, 637, 663, 664, 667, 670, 674, 775, 776, 777, 796, 961, 968, 972, 984, 998, 999, 1004, 1006, 1007, 1008, 1009, 1011, 1013], "wine": [9, 237, 303, 361, 491, 999], "tool": [9, 11, 166, 254, 259, 350, 361, 362, 363, 366, 368, 370, 371, 372, 373, 374, 375, 376, 380, 381, 383, 384, 387, 392, 393, 394, 395, 468, 673, 682, 951, 957, 958, 962, 968, 972, 977, 979, 982, 983, 986, 988, 997, 1011, 1014, 1017, 1018, 1019], "purpos": [9, 12, 16, 37, 85, 160, 210, 211, 212, 217, 219, 232, 244, 246, 252, 253, 326, 327, 339, 340, 350, 363, 368, 370, 380, 381, 382, 384, 386, 390, 393, 394, 398, 400, 401, 402, 403, 527, 619, 801, 802, 839, 959, 962, 963, 965, 968, 980, 982, 988, 1016, 1018], "awar": [9, 14, 108, 142, 157, 323, 339, 366, 370, 379, 382, 397, 401, 548, 549, 629, 635, 636, 637, 639, 640, 650, 661, 825, 854, 968, 972, 978, 1001, 1004, 1005, 1018], "thing": [9, 218, 251, 339, 355, 356, 363, 367, 368, 370, 379, 393, 395, 401, 540, 541, 958, 972, 986, 1010], "trivial": [9, 198, 344, 368, 393, 795, 880, 883, 959, 983, 1004], "dimens": [9, 12, 14, 37, 40, 53, 81, 84, 89, 94, 150, 152, 154, 156, 157, 167, 179, 194, 200, 219, 221, 225, 229, 230, 235, 242, 243, 280, 281, 285, 301, 339, 340, 341, 363, 365, 369, 381, 392, 393, 398, 399, 403, 405, 424, 425, 427, 428, 429, 430, 433, 445, 446, 463, 464, 465, 474, 475, 496, 505, 506, 510, 511, 514, 522, 530, 563, 564, 565, 566, 568, 570, 578, 600, 603, 622, 625, 640, 671, 672, 673, 675, 676, 680, 744, 800, 819, 820, 824, 838, 870, 871, 872, 880, 881, 882, 883, 884, 898, 899, 900, 925, 933, 936, 952, 954, 956, 958, 959, 960, 963, 965, 966, 968, 974, 977, 988, 995, 996, 1011, 1013, 1014, 1016], "below": [9, 25, 26, 27, 32, 59, 69, 74, 79, 88, 89, 94, 113, 115, 116, 121, 140, 165, 167, 179, 192, 193, 196, 198, 212, 213, 218, 222, 227, 236, 251, 254, 259, 261, 262, 263, 298, 302, 306, 307, 308, 309, 310, 311, 330, 331, 339, 348, 350, 355, 361, 362, 366, 368, 370, 372, 373, 377, 381, 384, 393, 395, 396, 397, 398, 400, 401, 402, 403, 429, 452, 453, 459, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 491, 512, 518, 523, 529, 563, 576, 577, 578, 579, 580, 581, 614, 627, 633, 639, 640, 648, 654, 656, 673, 680, 686, 723, 743, 775, 776, 777, 788, 791, 808, 839, 842, 852, 856, 861, 867, 951, 952, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 976, 977, 978, 979, 982, 990, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "main": [9, 16, 32, 61, 85, 98, 118, 163, 225, 265, 305, 334, 339, 354, 355, 356, 361, 366, 368, 370, 372, 374, 376, 379, 380, 381, 383, 391, 392, 393, 398, 400, 401, 403, 484, 506, 511, 530, 531, 606, 694, 809, 951, 959, 961, 962, 969, 974, 983, 985, 994, 997, 1004, 1007, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "empir": [9, 24, 25, 36, 67, 76, 79, 81, 82, 163, 214, 262, 298, 391, 397, 400, 403, 428, 430, 441, 450, 451, 455, 458, 459, 513, 515, 520, 522, 524, 530, 532, 546, 571, 584, 620, 630, 648, 652, 659, 660, 697, 702, 703, 704, 804, 814, 815, 816, 818, 837, 901, 936, 954, 956, 962, 964, 966, 974, 976, 998, 999], "heterogen": [9, 24, 68, 70, 75, 163, 167, 196, 238, 303, 306, 360, 362, 379, 445, 469, 525, 562, 572, 694, 839, 843, 878, 959, 969, 972, 982, 999, 1008, 1012, 1014, 1015], "mode": [9, 10, 46, 47, 79, 196, 225, 276, 278, 295, 306, 368, 371, 376, 377, 379, 390, 396, 400, 404, 425, 426, 428, 430, 433, 440, 443, 452, 453, 459, 463, 468, 489, 490, 538, 542, 545, 573, 576, 577, 579, 580, 581, 591, 608, 625, 626, 639, 640, 647, 649, 654, 655, 656, 657, 660, 663, 664, 670, 674, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 835, 878, 880, 883, 886, 888, 904, 914, 915, 917, 965, 968, 982, 988, 989, 996, 1005, 1013, 1018], "stick": [9, 775, 961], "bias": [9, 27, 81, 97, 121, 127, 165, 166, 168, 200, 261, 363, 383, 391, 400, 505, 530, 835, 859, 869, 957, 961, 970, 976, 978], "yet": [9, 56, 214, 246, 257, 341, 356, 363, 367, 372, 379, 383, 384, 397, 398, 400, 401, 403, 429, 433, 442, 443, 558, 758, 946, 951, 958, 962, 968, 976, 983, 1013], "extent": [9, 30, 57, 150, 151, 152, 229, 332, 335, 422, 516, 677, 775, 962], "assum": [9, 56, 155, 161, 165, 166, 185, 196, 214, 225, 228, 234, 247, 256, 265, 298, 341, 355, 367, 368, 370, 372, 374, 379, 380, 381, 383, 387, 390, 391, 393, 395, 397, 398, 400, 401, 403, 404, 409, 413, 419, 421, 426, 431, 438, 444, 450, 451, 452, 453, 454, 455, 456, 457, 484, 489, 490, 513, 523, 529, 530, 542, 543, 548, 549, 568, 569, 570, 572, 601, 613, 624, 625, 627, 628, 633, 639, 640, 641, 642, 643, 647, 648, 649, 652, 653, 657, 658, 659, 662, 666, 668, 669, 673, 690, 706, 715, 721, 736, 744, 749, 754, 758, 761, 777, 780, 781, 791, 815, 821, 822, 825, 826, 827, 829, 830, 835, 846, 859, 938, 939, 940, 952, 956, 958, 960, 961, 962, 964, 965, 967, 968, 969, 972, 976, 977, 978, 1010, 1016], "parametr": [9, 24, 25, 81, 228, 280, 302, 309, 391, 394, 399, 400, 419, 532, 534, 616, 666, 677, 855, 866, 909, 910, 958, 961, 964, 965, 972, 975, 978, 1012, 1014, 1017], "therefor": [9, 13, 24, 37, 52, 53, 70, 71, 74, 79, 85, 99, 104, 109, 112, 114, 121, 126, 128, 144, 165, 168, 196, 212, 213, 241, 246, 247, 257, 259, 294, 298, 303, 314, 326, 335, 339, 340, 348, 354, 362, 366, 373, 379, 393, 394, 395, 397, 398, 400, 401, 419, 477, 516, 530, 532, 534, 535, 540, 541, 545, 546, 585, 587, 639, 640, 646, 649, 652, 657, 659, 660, 682, 693, 715, 737, 775, 839, 840, 852, 856, 867, 878, 879, 952, 956, 958, 959, 962, 964, 965, 966, 967, 970, 972, 977, 978, 983, 988, 995, 996, 997, 1013, 1014, 1017, 1018, 1019, 1020], "minimum": [9, 56, 79, 121, 122, 144, 185, 206, 229, 266, 282, 283, 370, 377, 384, 386, 390, 393, 400, 401, 423, 427, 431, 435, 437, 450, 451, 454, 455, 456, 457, 492, 494, 522, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 575, 608, 612, 613, 616, 618, 649, 652, 657, 659, 660, 663, 664, 673, 686, 705, 759, 760, 780, 781, 800, 815, 836, 837, 848, 849, 852, 854, 858, 871, 872, 885, 886, 887, 888, 889, 895, 898, 899, 902, 918, 959, 962, 966, 968, 972, 974, 978, 1004, 1007, 1011, 1012, 1016, 1017], "determin": [9, 11, 13, 19, 46, 79, 111, 153, 166, 175, 176, 192, 199, 256, 298, 303, 341, 348, 350, 367, 368, 370, 377, 380, 381, 390, 391, 393, 397, 398, 400, 401, 402, 403, 414, 419, 423, 424, 425, 427, 428, 430, 431, 437, 440, 441, 442, 446, 450, 451, 453, 454, 455, 456, 457, 463, 464, 465, 469, 472, 473, 476, 478, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 518, 520, 523, 524, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 546, 548, 549, 551, 563, 564, 565, 569, 572, 575, 583, 588, 589, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 616, 617, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 668, 670, 671, 673, 674, 675, 688, 692, 703, 709, 710, 718, 763, 764, 765, 767, 768, 771, 777, 779, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 810, 812, 813, 815, 822, 824, 825, 830, 835, 836, 837, 843, 844, 852, 853, 854, 856, 867, 878, 879, 881, 884, 887, 889, 892, 913, 925, 931, 933, 936, 951, 954, 956, 961, 965, 967, 968, 972, 975, 976, 978, 988, 1004, 1009, 1012, 1013, 1015, 1016, 1017], "concentr": [9, 99, 109, 126, 153, 163, 222, 240, 247, 248, 300, 316, 364, 368, 400, 403, 425, 500, 775, 961, 968], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 56, 58, 60, 61, 67, 79, 90, 101, 111, 117, 124, 169, 222, 241, 242, 243, 244, 257, 282, 283, 285, 301, 307, 311, 328, 338, 339, 341, 342, 356, 357, 361, 363, 365, 368, 370, 373, 379, 381, 388, 399, 401, 407, 408, 411, 469, 483, 484, 485, 492, 493, 494, 495, 496, 503, 511, 522, 525, 545, 547, 570, 571, 572, 672, 673, 676, 685, 686, 691, 698, 700, 705, 711, 716, 717, 735, 737, 758, 759, 766, 770, 771, 773, 775, 776, 831, 832, 840, 844, 851, 859, 907, 909, 922, 930, 946, 952, 959, 961, 965, 968, 970, 972, 975, 979, 982, 983, 986, 988, 991, 994, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "outli": [9, 79, 381, 450, 455, 958, 968], "skew": [9, 121, 199, 229, 298, 360, 397, 620, 621, 622, 623, 855, 866, 958, 972, 999, 1007, 1011, 1020], "Of": [9, 25, 27, 160, 354, 370, 393, 401, 952], "screen": [9, 1017], "presenc": [9, 59, 61, 79, 80, 165, 298, 366, 369, 381, 395, 398, 693, 706, 736, 749, 808, 842, 850, 852, 946, 952, 958, 962, 963, 976, 1007, 1008, 1010, 1014, 1016, 1018], "mixtur": [9, 44, 56, 243, 244, 248, 357, 363, 364, 381, 393, 398, 399, 403, 604, 777, 982, 983, 998, 999, 1004, 1008, 1009, 1010, 1011], "univari": [9, 36, 67, 71, 73, 139, 140, 146, 163, 211, 321, 337, 360, 392, 393, 394, 401, 427, 485, 506, 511, 573, 576, 577, 579, 580, 581, 583, 586, 587, 588, 589, 590, 608, 609, 610, 611, 626, 777, 782, 801, 805, 839, 840, 849, 854, 858, 859, 878, 883, 958, 977, 979, 984, 996, 999, 1004, 1010], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 57, 61, 70, 72, 74, 85, 94, 95, 101, 103, 105, 114, 121, 141, 148, 166, 168, 185, 201, 210, 217, 218, 219, 225, 230, 256, 257, 259, 268, 274, 285, 298, 302, 303, 307, 326, 341, 348, 350, 354, 360, 368, 370, 376, 379, 380, 381, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 405, 422, 433, 443, 445, 446, 448, 450, 455, 463, 464, 465, 466, 489, 490, 497, 498, 499, 505, 512, 513, 514, 515, 516, 518, 520, 522, 523, 524, 529, 530, 531, 534, 535, 538, 539, 540, 541, 545, 546, 547, 569, 570, 571, 572, 608, 613, 614, 619, 620, 622, 623, 639, 640, 649, 657, 658, 659, 672, 680, 682, 688, 706, 736, 738, 739, 761, 768, 770, 771, 777, 791, 805, 808, 814, 815, 816, 817, 818, 828, 838, 839, 848, 855, 856, 859, 863, 864, 866, 867, 868, 869, 874, 885, 886, 887, 888, 889, 898, 904, 907, 914, 915, 934, 952, 954, 958, 959, 960, 961, 962, 964, 966, 968, 972, 976, 977, 978, 979, 981, 986, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018], "ellipticenvelop": [9, 225, 451, 454, 455, 456, 457, 544, 968, 1004, 1007, 1011, 1012, 1017], "oneclasssvm": [9, 11, 16, 210, 225, 309, 325, 544, 658, 825, 968, 976, 977, 1006, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "font_manag": [9, 80, 282, 325], "load_win": [9, 237, 303, 823, 831, 1001, 1015], "support_fract": [9, 450, 455], "contamin": [9, 79, 80, 225, 234, 282, 283, 450, 544, 825, 968, 1012], "ocsvm": [9, 210], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 84, 90, 111, 120, 151, 208, 220, 234, 298, 323, 370, 381, 413, 445, 490, 548, 549, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 680, 744, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 996], "frontier": [9, 210, 282, 325, 968, 995], "xx1": [9, 111, 612], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 57, 79, 117, 126, 149, 150, 151, 152, 154, 167, 207, 208, 209, 210, 222, 225, 245, 282, 289, 292, 300, 301, 319, 325, 326, 331, 332, 335, 336, 612], "500": [9, 10, 44, 50, 56, 59, 60, 62, 84, 85, 102, 104, 113, 122, 144, 148, 172, 209, 210, 218, 235, 236, 241, 242, 246, 256, 259, 269, 276, 282, 288, 302, 307, 325, 332, 336, 354, 400, 450, 451, 455, 456, 457, 463, 464, 465, 592, 594, 595, 597, 602, 605, 606, 631, 632, 635, 636, 637, 661, 663, 664, 837, 951, 977], "clf_name": [9, 10, 339], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 55, 111, 124, 137, 208, 209, 210, 226, 234, 263, 282, 283, 292, 300, 324, 325, 326, 330, 331, 332, 336, 370, 381, 391, 400, 419, 450, 530, 531, 534, 536, 540, 542, 544, 548, 574, 575, 612, 613, 614, 639, 640, 647, 649, 655, 656, 657, 658, 679, 681, 683, 688, 701, 706, 707, 715, 719, 720, 722, 736, 762, 768, 769, 772, 777, 780, 781, 791, 800, 807, 808, 809, 810, 825, 839, 846, 875, 878, 880, 882, 883, 958, 962, 968, 969, 976, 977, 995, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 57, 79, 95, 100, 117, 120, 125, 126, 135, 137, 150, 194, 209, 210, 212, 225, 234, 282, 301, 303, 319, 325, 326, 330, 332, 335, 336, 393, 640, 695, 696, 699, 962, 992, 995, 996], "contour": [9, 11, 16, 34, 46, 47, 79, 117, 137, 151, 152, 154, 207, 208, 209, 210, 225, 230, 245, 282, 289, 324, 325, 327, 328, 330, 331, 332, 365, 612, 613, 968, 976], "linewidth": [9, 24, 33, 34, 37, 40, 57, 72, 77, 85, 91, 110, 121, 125, 148, 152, 156, 185, 186, 190, 191, 192, 194, 197, 199, 202, 210, 213, 225, 232, 234, 265, 269, 282, 286, 299, 307, 324, 325, 327, 332, 346, 993], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 84, 93, 100, 106, 163, 376, 398, 514, 522, 673, 962, 981, 982, 996], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 69, 72, 73, 101, 121, 123, 194, 202, 225, 233, 243, 254, 255, 257, 260, 263, 265, 276, 280, 300, 310, 318, 326, 340, 341, 356, 360, 362, 370, 379, 381, 394, 397, 404, 405, 407, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 477, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 694, 742, 745, 751, 759, 760, 775, 776, 777, 780, 781, 783, 788, 789, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 893, 903, 904, 920, 951, 962, 972, 992, 997, 999, 1004, 1010, 1011], "boxstyl": [9, 300], "fc": [9, 281, 363], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 263, 289, 331, 384, 627, 628, 631, 633, 634, 635, 641, 642, 643, 644, 645, 662, 663, 664, 665, 667], "xycoord": [9, 26], "textcoord": [9, 172], "xytext": [9, 26, 172], "bbox": [9, 12, 34, 45, 101, 241, 242, 243, 246, 247, 300], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 57, 61, 72, 77, 78, 79, 89, 96, 109, 111, 112, 113, 127, 134, 149, 150, 166, 175, 186, 188, 195, 202, 205, 210, 225, 232, 242, 247, 251, 266, 270, 282, 283, 325, 330, 331, 335, 347], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 57, 61, 77, 78, 79, 89, 96, 109, 111, 112, 118, 119, 121, 127, 130, 135, 149, 150, 166, 183, 185, 186, 188, 189, 190, 202, 205, 206, 210, 225, 232, 242, 247, 251, 255, 259, 266, 269, 270, 271, 282, 283, 325, 330, 331, 335, 339, 347], "prop": [9, 72, 80, 202, 243, 282, 325, 348], "fontproperti": [9, 80, 282, 325], "ash": [9, 365, 1007, 1010], "malic_acid": 9, "abil": [9, 60, 79, 121, 154, 160, 165, 166, 168, 196, 214, 225, 339, 356, 384, 400, 401, 762, 763, 764, 767, 959, 962, 965, 968, 978, 983, 1004, 1006, 1011, 1013, 1017, 1018], "locat": [9, 25, 53, 54, 71, 79, 80, 190, 289, 308, 326, 361, 366, 368, 372, 373, 376, 377, 384, 393, 395, 399, 429, 441, 442, 450, 451, 452, 453, 454, 455, 456, 457, 469, 481, 482, 485, 486, 493, 496, 947, 952, 958, 963, 968, 972, 978, 1012], "hard": [9, 196, 225, 229, 256, 258, 356, 367, 379, 381, 393, 398, 401, 515, 522, 550, 657, 880, 881, 882, 883, 884, 958, 975, 977, 978, 983, 995, 996, 997, 1013, 1014], "due": [9, 26, 27, 53, 59, 74, 112, 148, 166, 167, 175, 187, 194, 196, 198, 213, 214, 229, 242, 264, 265, 276, 303, 339, 340, 341, 368, 374, 381, 384, 391, 393, 397, 398, 400, 403, 425, 428, 440, 516, 520, 524, 525, 555, 652, 777, 780, 781, 785, 787, 791, 800, 801, 802, 804, 807, 811, 812, 844, 848, 849, 859, 952, 958, 959, 961, 962, 963, 965, 969, 976, 983, 996, 1004, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "banana": [9, 962], "anywai": [9, 339, 370, 646, 666, 667], "rid": [9, 976], "difficulti": [9, 27, 214, 298, 356, 368, 391, 836, 837, 961, 965], "bandwidth": [9, 44, 62, 231, 280, 281, 289, 379, 381, 393, 399, 429, 439, 442, 819, 820, 824, 955, 968, 982, 1015, 1019], "compromis": [9, 167, 354, 368, 628, 660, 965, 1007], "risk": [9, 196, 214, 299, 334, 350, 367, 368, 381, 392, 397, 400, 548, 549, 863, 864, 866, 867, 868, 869, 958, 962, 986, 1011], "x2": [9, 16, 84, 90, 111, 120, 151, 208, 234, 370, 394, 569, 610, 680, 744, 996], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 365], "676": [9, 15, 650], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 56, 85, 160, 167, 172, 196, 211, 214, 233, 234, 253, 254, 339, 355, 356, 363, 370, 373, 374, 381, 382, 383, 398, 400, 402, 523, 529, 571, 574, 719, 962, 965, 967, 968, 976, 977, 978, 980, 986, 988, 991, 995, 997, 1012], "boxplot": [10, 79, 122, 166, 169, 306], "defaultdict": [10, 19, 25, 169, 259, 340, 341], "gc": 10, "make_regress": [10, 74, 175, 177, 178, 182, 199, 200, 269, 307, 350, 364, 370, 371, 380, 535, 537, 541, 546, 616, 627, 628, 630, 632, 634, 636, 644, 645, 646, 648, 652, 660, 837, 879, 962, 963, 965], "randomforestregressor": [10, 127, 128, 131, 160, 161, 308, 380, 400, 538, 539, 541, 543, 547, 549, 551, 613, 614, 888, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "sgdregressor": [10, 207, 354, 356, 379, 392, 627, 630, 648, 652, 657, 660, 837, 879, 884, 958, 976, 1006, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 59, 60, 94, 108, 115, 117, 128, 161, 204, 205, 210, 225, 257, 261, 262, 269, 276, 314, 315, 316, 317, 328, 339, 340, 350, 363, 377, 381, 388, 450, 455, 469, 470, 472, 473, 476, 478, 484, 492, 493, 494, 495, 496, 500, 503, 505, 512, 518, 520, 521, 527, 528, 534, 535, 536, 537, 545, 546, 548, 549, 583, 639, 640, 647, 648, 649, 653, 655, 657, 658, 659, 668, 777, 779, 780, 781, 782, 783, 791, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 836, 837, 878, 879, 880, 883, 914, 915, 931, 933, 957, 958, 963, 970, 976, 977, 992, 997, 999, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 63, 69, 71, 73, 128, 183, 257, 294, 295, 298, 309, 318, 339, 366, 372, 381, 387, 422, 425, 428, 430, 433, 435, 440, 443, 445, 448, 452, 453, 459, 512, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 574, 575, 608, 611, 613, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 671, 673, 675, 745, 758, 775, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 808, 810, 813, 828, 835, 836, 837, 838, 839, 840, 841, 875, 878, 879, 880, 881, 882, 883, 884, 928, 983, 1006, 1007, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019], "n_instanc": [10, 614], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 78, 80, 81, 94, 97, 99, 108, 111, 112, 120, 122, 123, 127, 142, 161, 175, 182, 187, 189, 190, 195, 196, 197, 200, 201, 202, 206, 211, 214, 229, 232, 241, 245, 247, 253, 256, 261, 265, 266, 281, 298, 307, 308, 334, 340, 341, 344, 348, 354, 355, 363, 370, 374, 381, 391, 392, 393, 395, 398, 400, 401, 402, 403, 406, 433, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 468, 478, 489, 490, 504, 507, 508, 512, 513, 516, 518, 519, 520, 521, 523, 524, 528, 529, 533, 538, 539, 540, 541, 542, 543, 545, 546, 547, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 592, 617, 620, 624, 625, 626, 631, 639, 640, 645, 646, 647, 649, 652, 657, 658, 659, 666, 667, 684, 690, 693, 694, 696, 697, 705, 709, 710, 714, 718, 720, 726, 763, 764, 765, 767, 774, 775, 792, 793, 796, 797, 808, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 842, 849, 851, 852, 854, 855, 856, 858, 859, 864, 865, 866, 867, 871, 878, 886, 887, 888, 889, 913, 948, 952, 958, 960, 961, 964, 965, 966, 972, 973, 974, 976, 977, 978, 988, 995, 997, 1004, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "atomic_benchmark": 10, "percentil": [10, 70, 121, 238, 298, 354, 573, 576, 577, 579, 580, 581, 584, 587, 613, 614, 728, 972, 1009, 1017], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 73, 119, 131, 161, 197, 234, 253, 260, 326, 344, 354, 366, 368, 379, 380, 394, 396, 400, 403, 430, 464, 519, 536, 537, 538, 539, 544, 545, 546, 547, 551, 666, 667, 777, 780, 781, 791, 803, 814, 815, 816, 817, 818, 951, 962, 997, 1012, 1014], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 65, 78, 80, 120, 145, 148, 154, 155, 167, 172, 198, 251, 256, 257, 268, 315, 334, 340, 341, 370, 377, 381, 390, 391, 392, 393, 398, 401, 402, 403, 569, 574, 588, 589, 596, 608, 615, 640, 782, 792, 793, 796, 904, 952, 961, 999, 1012, 1014], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 57, 63, 99, 111, 113, 117, 121, 137, 152, 156, 176, 179, 188, 205, 208, 214, 229, 251, 256, 263, 265, 319, 322, 324, 326, 327, 328, 330, 332, 340, 345, 363, 379, 381, 390, 391, 394, 397, 401, 403, 419, 422, 423, 427, 431, 438, 444, 459, 474, 489, 490, 563, 573, 576, 577, 579, 580, 581, 591, 594, 595, 596, 598, 600, 601, 603, 604, 606, 608, 613, 614, 624, 673, 681, 686, 687, 688, 696, 711, 720, 738, 739, 743, 746, 749, 750, 751, 752, 753, 754, 756, 758, 759, 760, 761, 762, 766, 807, 819, 820, 893, 962, 963, 964, 965, 972, 978, 1004, 1016, 1017, 1019, 1020], "contain": [10, 19, 24, 27, 33, 40, 49, 55, 57, 69, 70, 111, 113, 116, 124, 154, 166, 167, 169, 172, 187, 214, 225, 234, 235, 238, 246, 254, 256, 262, 265, 266, 274, 282, 283, 285, 298, 309, 315, 318, 339, 340, 361, 362, 363, 365, 368, 370, 372, 373, 374, 375, 376, 377, 380, 381, 387, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 405, 407, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 483, 484, 485, 489, 490, 491, 495, 496, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 681, 682, 683, 690, 693, 715, 716, 717, 748, 752, 759, 760, 768, 772, 775, 776, 777, 780, 781, 783, 791, 795, 796, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 897, 898, 899, 918, 919, 921, 925, 929, 931, 951, 952, 954, 960, 963, 966, 968, 972, 973, 975, 978, 988, 997, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "generate_dataset": 10, "coef": [10, 54, 104, 165, 166, 175, 180, 183, 187, 188, 190, 195, 199, 200, 201, 205, 212, 238, 269, 294, 335, 505, 627, 628, 630, 633, 634, 640, 641, 642, 643, 644, 650, 661, 662, 663, 664, 665, 666, 667, 668, 966], "random_se": [10, 91, 117], "x_scaler": 10, "y_scaler": 10, "ok": [10, 368, 968], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 289, 318, 354, 688, 694, 709, 710, 718, 763, 764, 767, 768, 962, 1004, 1012, 1013, 1019], "bp": [10, 122, 145, 184, 185, 365, 970], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 59, 79, 91, 94, 95, 96, 112, 128, 131, 157, 172, 175, 176, 186, 194, 222, 235, 251, 262, 289, 293, 299, 303, 316, 326, 347, 366, 381, 393, 398, 963], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 57, 58, 59, 62, 63, 84, 90, 91, 96, 100, 127, 155, 156, 172, 184, 189, 191, 193, 194, 196, 198, 199, 211, 213, 218, 241, 243, 244, 251, 256, 258, 259, 260, 298, 303, 316, 344, 368, 372, 401, 1012, 1014, 1015], "linestyl": [10, 11, 16, 33, 59, 72, 79, 102, 104, 109, 120, 130, 134, 137, 148, 151, 153, 155, 157, 168, 181, 183, 184, 185, 196, 197, 198, 202, 206, 208, 209, 214, 232, 234, 253, 255, 259, 260, 265, 281, 289, 293, 299, 324, 327, 328, 330, 331, 332, 993], "major": [10, 14, 263, 298, 302, 306, 307, 308, 309, 310, 311, 341, 354, 363, 367, 368, 371, 374, 379, 382, 393, 397, 399, 401, 403, 532, 550, 551, 675, 709, 710, 718, 763, 764, 767, 890, 892, 962, 965, 976, 983, 986, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 204, 375, 420, 557, 679, 681, 683, 897], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 645, 666, 667, 958, 962], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 204, 219, 222, 276], "1e2": [10, 148, 155, 231, 247, 326, 726], "randomforest": [10, 117, 354, 400, 886, 887, 1009], "0001": [10, 204, 254, 370, 405, 425, 428, 440, 452, 453, 459, 514, 519, 521, 528, 530, 531, 540, 541, 627, 628, 629, 630, 633, 634, 639, 640, 641, 642, 643, 644, 649, 650, 653, 655, 657, 659, 661, 668, 670, 674, 836, 837, 878, 879, 951], "250": [10, 64, 121, 172, 217, 474, 673, 951, 974, 1011], "599": [10, 15, 340, 661], "plot_prediction_lat": [10, 15], "conserv": [11, 563, 570, 870, 871, 961, 974], "biologi": 11, "south": [11, 166, 289, 399], "american": [11, 12, 69, 80, 363, 393, 395, 399, 400, 401, 450, 455, 711, 859], "mammal": 11, "past": [11, 372, 373, 376, 379, 382, 397, 398, 400, 519, 536, 537, 659, 986, 989], "environment": [11, 214], "unsuccess": 11, "cast": [11, 53, 196, 218, 362, 381, 382, 401, 477, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 654, 656, 927, 1011, 1012, 1013, 1014, 1017, 1019], "densiti": [11, 49, 59, 64, 74, 100, 104, 145, 163, 182, 196, 211, 214, 221, 225, 229, 240, 247, 248, 256, 262, 277, 282, 283, 290, 298, 326, 339, 365, 377, 381, 393, 400, 404, 412, 426, 429, 431, 433, 445, 448, 479, 483, 517, 522, 530, 531, 775, 776, 777, 819, 820, 824, 825, 871, 956, 958, 961, 965, 967, 968, 974, 982, 984, 988, 998, 999, 1006, 1008, 1012, 1013, 1019], "phillip": [11, 289, 479], "2006": [11, 289, 400, 403, 443, 479, 538, 539, 546, 547, 591, 592, 595, 600, 603, 630, 647, 648, 721, 768, 769, 775, 814, 871, 888, 889, 958, 962, 964, 967, 974, 975], "basemap": [11, 289], "coast": [11, 289], "line": [11, 17, 40, 43, 59, 69, 94, 99, 120, 147, 158, 160, 161, 163, 166, 167, 184, 185, 186, 188, 191, 192, 194, 197, 198, 199, 204, 205, 207, 208, 225, 229, 230, 232, 234, 253, 260, 262, 263, 286, 289, 299, 308, 325, 330, 331, 335, 336, 339, 362, 363, 366, 368, 369, 370, 372, 373, 374, 375, 376, 379, 398, 399, 400, 420, 468, 469, 470, 489, 490, 523, 534, 535, 536, 537, 591, 594, 595, 613, 651, 667, 682, 783, 930, 956, 962, 966, 969, 976, 982, 985, 995, 997, 1006, 1015, 1017], "nation": [11, 79, 289, 363, 826], "boundari": [11, 13, 25, 26, 27, 31, 34, 57, 59, 107, 111, 117, 126, 132, 149, 152, 163, 167, 179, 197, 225, 230, 232, 259, 279, 284, 286, 287, 289, 292, 298, 300, 303, 313, 320, 323, 324, 326, 328, 335, 336, 345, 364, 391, 400, 401, 403, 431, 437, 485, 517, 530, 531, 550, 569, 570, 572, 612, 808, 821, 827, 829, 830, 831, 858, 874, 875, 882, 883, 886, 902, 956, 965, 968, 972, 975, 976, 977, 1004, 1006, 1008, 1017, 1018, 1019], "america": [11, 12, 79, 289, 826, 972], "bradypu": [11, 289, 479], "variegatu": [11, 289, 479], "brown": [11, 91, 289, 479, 609, 952, 1009, 1011, 1012, 1013, 1016], "throat": [11, 289, 479], "sloth": [11, 289, 479], "microryzomi": [11, 289, 479], "minutu": [11, 289, 479], "known": [11, 17, 25, 27, 39, 49, 56, 57, 80, 103, 104, 128, 153, 155, 161, 196, 197, 214, 225, 256, 258, 265, 285, 289, 299, 309, 314, 323, 340, 356, 365, 366, 368, 371, 376, 379, 381, 384, 389, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 403, 420, 444, 463, 465, 479, 489, 490, 525, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 569, 570, 572, 575, 590, 603, 614, 639, 640, 653, 663, 664, 675, 685, 691, 694, 699, 709, 723, 735, 737, 773, 808, 814, 815, 816, 817, 818, 821, 826, 829, 835, 862, 886, 887, 888, 889, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 972, 977, 978, 988, 993, 995, 996], "forest": [11, 27, 31, 107, 114, 117, 123, 124, 126, 128, 131, 132, 160, 163, 164, 170, 172, 225, 234, 253, 289, 308, 339, 350, 361, 380, 381, 391, 402, 444, 445, 472, 476, 477, 479, 496, 536, 537, 538, 539, 541, 544, 545, 546, 547, 611, 615, 805, 812, 839, 853, 882, 886, 887, 888, 951, 952, 963, 970, 982, 983, 984, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013], "rice": [11, 289, 479, 1017], "rat": [11, 289, 479], "rodent": [11, 289, 479], "live": [11, 69, 166, 289, 368, 393, 479, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "peru": [11, 289, 479], "colombia": [11, 289, 479], "ecuador": [11, 289, 479], "venezuela": [11, 289, 479], "entropi": [11, 236, 268, 289, 308, 314, 315, 350, 393, 400, 405, 479, 514, 538, 545, 588, 589, 639, 698, 716, 717, 721, 773, 886, 888, 958, 959, 962, 966, 978, 1006, 1008, 1012, 1013, 1018], "anderson": [11, 289, 479, 1010, 1016], "schapir": [11, 289, 400, 479, 534, 535], "ecolog": [11, 289, 479], "190": [11, 120, 214, 265, 288, 289, 290, 318, 374, 479], "231": [11, 289, 393, 404, 426, 479, 565], "259": [11, 166, 170, 196, 215, 219, 289, 400, 479, 548, 549], "________________________________________________________________________________": [11, 54, 339], "coastlin": [11, 289, 365], "coverag": [11, 121, 196, 214, 289, 371, 389, 479, 608, 701], "area": [11, 34, 124, 196, 214, 234, 253, 256, 263, 265, 266, 326, 331, 335, 365, 368, 372, 379, 391, 393, 400, 401, 683, 687, 688, 689, 722, 768, 769, 959, 962, 965, 981, 1006], "roc": [11, 25, 114, 163, 224, 226, 234, 235, 239, 249, 272, 375, 391, 397, 485, 491, 545, 639, 683, 687, 688, 689, 707, 722, 762, 768, 769, 796, 805, 808, 846, 883, 968, 1001, 1006, 1007, 1009, 1010, 1014, 1016], "868443": 11, "993919": 11, "elaps": [11, 47, 66, 115, 116, 354, 445, 448, 550, 551, 838, 839, 840, 841], "astro": [11, 155, 217, 244], "washington": [11, 155, 217, 244, 281, 289], "bunch": [11, 361, 362, 363, 445, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 491, 548, 549, 550, 551, 613, 614, 615, 838, 839, 886, 887, 888, 889, 986, 997, 1009, 1011, 1014, 1016, 1020], "fetch_species_distribut": [11, 289, 1013], "ll": [11, 116, 251, 289, 368, 379, 513, 522, 965, 978, 988], "otherwis": [11, 55, 61, 111, 157, 161, 177, 198, 204, 289, 350, 356, 370, 372, 374, 381, 393, 395, 397, 401, 403, 416, 417, 418, 420, 422, 423, 424, 427, 432, 434, 435, 445, 448, 463, 464, 465, 466, 477, 507, 516, 517, 519, 521, 522, 528, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 569, 571, 572, 578, 583, 591, 592, 595, 612, 613, 614, 625, 626, 627, 633, 639, 640, 641, 643, 646, 647, 648, 649, 654, 656, 657, 658, 659, 666, 667, 671, 673, 677, 678, 679, 681, 683, 684, 688, 690, 694, 695, 704, 706, 707, 708, 709, 710, 718, 721, 732, 734, 735, 736, 754, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 791, 795, 796, 803, 808, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 834, 836, 837, 843, 844, 846, 850, 859, 860, 863, 864, 865, 867, 868, 869, 878, 880, 881, 882, 883, 884, 893, 899, 901, 914, 915, 922, 946, 948, 957, 958, 959, 962, 965, 966, 968, 969, 972, 974, 976, 977, 982, 986, 988, 1006, 1012, 1013, 1014, 1017], "improvis": [11, 289], "mpl_toolkit": [11, 45, 66, 89, 100, 101, 167, 193, 217, 219, 289], "except": [11, 16, 44, 53, 97, 204, 211, 225, 264, 276, 289, 293, 294, 298, 300, 311, 357, 361, 368, 370, 371, 372, 373, 379, 381, 387, 390, 394, 397, 398, 400, 401, 403, 414, 441, 446, 463, 464, 465, 490, 535, 537, 538, 539, 541, 543, 545, 546, 549, 551, 592, 608, 611, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 668, 692, 758, 784, 812, 813, 819, 820, 822, 825, 830, 836, 837, 843, 857, 859, 879, 881, 884, 887, 889, 919, 948, 958, 962, 977, 988, 996, 997, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017], "importerror": [11, 16, 53, 97, 276, 289, 376, 477], "construct_grid": [11, 289], "object": [11, 13, 14, 19, 26, 44, 50, 61, 65, 69, 70, 97, 128, 134, 143, 144, 153, 163, 167, 192, 196, 212, 214, 224, 235, 237, 238, 239, 254, 268, 289, 309, 310, 314, 340, 341, 350, 361, 362, 363, 368, 369, 371, 373, 374, 375, 377, 380, 381, 382, 387, 393, 394, 395, 398, 401, 402, 403, 407, 409, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 692, 699, 712, 713, 722, 738, 739, 761, 762, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 893, 898, 899, 900, 901, 902, 905, 909, 911, 921, 922, 923, 925, 927, 928, 930, 947, 948, 950, 958, 959, 960, 961, 965, 968, 969, 972, 975, 976, 977, 982, 983, 988, 989, 991, 992, 995, 997, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "func": [11, 74, 114, 166, 176, 214, 289, 368, 394, 446, 680, 843, 972, 1008, 1010, 1012, 1013], "xgrid": [11, 289], "ygrid": [11, 289], "correspond": [11, 13, 16, 26, 32, 41, 53, 64, 77, 81, 96, 112, 115, 117, 124, 141, 144, 145, 149, 154, 157, 166, 185, 188, 196, 197, 205, 214, 226, 231, 238, 246, 255, 257, 259, 260, 265, 266, 289, 303, 308, 309, 310, 340, 344, 345, 350, 355, 362, 363, 364, 367, 368, 370, 372, 375, 376, 380, 381, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 408, 413, 419, 421, 423, 427, 429, 432, 434, 440, 442, 444, 445, 453, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 515, 522, 525, 526, 527, 530, 531, 533, 536, 538, 540, 541, 542, 545, 563, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 598, 611, 613, 614, 616, 624, 627, 628, 629, 633, 639, 640, 641, 642, 643, 649, 650, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 668, 671, 672, 673, 675, 684, 691, 694, 704, 705, 714, 718, 732, 734, 754, 758, 762, 768, 769, 772, 774, 775, 776, 777, 780, 781, 783, 791, 800, 808, 811, 814, 815, 816, 817, 818, 819, 820, 824, 825, 826, 828, 836, 837, 846, 850, 852, 853, 856, 867, 880, 883, 886, 887, 888, 889, 903, 909, 937, 951, 952, 954, 955, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 972, 973, 976, 977, 981, 988, 994, 997, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "coordin": [11, 12, 13, 54, 99, 127, 152, 181, 217, 257, 289, 354, 398, 403, 425, 428, 429, 430, 442, 452, 453, 459, 512, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 531, 595, 627, 628, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 662, 663, 664, 665, 669, 670, 671, 674, 675, 687, 744, 749, 878, 958, 959, 977, 995, 1004, 1007, 1008, 1009, 1013, 1015, 1017, 1018, 1019], "corner": [11, 13, 26, 53, 165, 253, 257, 265, 266, 289, 368, 479, 890, 892, 962, 1018], "cell": [11, 12, 26, 32, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 289, 295, 307, 308, 310, 311, 316, 348, 365, 373, 673, 962, 963, 1010, 1018], "xmin": [11, 77, 186, 188, 205, 206, 289], "x_left_lower_corn": [11, 289, 479], "grid_siz": [11, 60, 289, 479], "xmax": [11, 77, 186, 188, 205, 206, 289], "nx": [11, 34, 289, 479], "ymin": [11, 77, 183, 185, 188, 189, 197, 205, 256, 289], "y_left_lower_corn": [11, 289, 479], "ny": [11, 34, 255, 289, 365, 479, 952, 974], "create_species_bunch": 11, "species_nam": [11, 289], "record": [11, 95, 113, 168, 341, 354, 368, 393, 395, 431, 438, 479, 601, 624, 673, 751, 754, 758, 759, 760, 761, 802, 825, 1017, 1018], "join": [11, 12, 19, 160, 214, 256, 300, 363, 382, 444, 997, 1004, 1012], "ascii": [11, 289, 401, 468, 569, 570, 572], "pt": [11, 363, 402, 855, 972], "desir": [11, 24, 111, 145, 161, 196, 198, 298, 302, 361, 368, 370, 372, 376, 387, 390, 393, 396, 397, 398, 402, 484, 519, 521, 525, 528, 548, 574, 583, 584, 645, 651, 666, 667, 689, 716, 819, 820, 824, 844, 846, 849, 850, 852, 853, 855, 856, 862, 864, 866, 867, 902, 931, 954, 956, 959, 965, 972, 976, 977, 978, 988, 1004, 1012, 1013, 1014, 1017], "pts_": 11, "ix": [11, 265, 333], "searchsort": 11, "dd": [11, 12, 126, 289, 479], "ii": [11, 95, 167, 203, 251, 365, 401, 563, 564, 570, 619, 647, 648, 842, 851, 958, 972, 981], "lat": [11, 289, 479], "cov_": [11, 81], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 80, 91, 120, 161, 168, 220, 228, 233, 268, 308, 370, 373, 380, 781, 798, 814, 815, 816, 818, 951, 952], "land": [11, 289, 382, 400], "water": 11, "land_refer": [11, 289], "standard": [11, 12, 26, 32, 34, 60, 69, 70, 72, 79, 80, 85, 95, 109, 112, 114, 115, 116, 117, 124, 128, 145, 148, 153, 155, 157, 166, 175, 181, 185, 194, 196, 205, 217, 218, 219, 230, 246, 251, 254, 255, 256, 257, 259, 298, 303, 324, 339, 354, 355, 360, 361, 362, 364, 365, 366, 368, 370, 371, 373, 374, 377, 379, 381, 384, 387, 389, 393, 395, 396, 397, 401, 403, 449, 453, 469, 477, 482, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 505, 506, 511, 513, 516, 522, 533, 571, 575, 592, 615, 625, 626, 631, 632, 635, 636, 637, 645, 646, 653, 654, 655, 656, 657, 659, 668, 670, 674, 768, 783, 798, 816, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 843, 848, 849, 852, 855, 856, 857, 859, 866, 867, 868, 869, 876, 878, 879, 898, 951, 954, 958, 959, 962, 964, 965, 966, 968, 976, 977, 983, 986, 988, 993, 995, 996, 997, 999, 1010, 1011, 1012, 1013, 1015, 1016, 1017], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 289], "llcrnrlat": [11, 289], "urcrnrlat": [11, 289], "llcrnrlon": [11, 289], "urcrnrlon": [11, 289], "drawcoastlin": [11, 289], "drawcountri": [11, 289], "9998": [11, 289], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 59, 62, 64, 67, 73, 74, 79, 89, 90, 91, 94, 101, 102, 108, 111, 117, 121, 124, 126, 127, 129, 130, 134, 137, 141, 142, 149, 151, 152, 156, 161, 163, 166, 167, 168, 178, 179, 181, 190, 193, 200, 208, 210, 229, 231, 232, 233, 241, 244, 256, 259, 260, 265, 266, 269, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 299, 300, 301, 302, 306, 310, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 338, 339, 341, 342, 350, 355, 362, 363, 365, 368, 376, 377, 381, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 405, 422, 425, 428, 429, 430, 431, 432, 433, 434, 440, 441, 443, 450, 453, 469, 483, 485, 487, 493, 504, 512, 518, 522, 525, 526, 527, 530, 531, 534, 536, 538, 539, 540, 562, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 612, 620, 621, 629, 631, 632, 634, 635, 636, 637, 639, 640, 644, 645, 646, 647, 648, 650, 660, 661, 663, 664, 665, 666, 667, 669, 672, 676, 677, 685, 686, 689, 698, 706, 717, 723, 736, 738, 739, 741, 746, 749, 754, 755, 756, 757, 759, 771, 772, 773, 775, 776, 778, 782, 784, 785, 786, 789, 792, 793, 795, 796, 798, 803, 814, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 840, 844, 845, 846, 850, 851, 852, 854, 855, 859, 866, 871, 885, 893, 901, 910, 915, 936, 951, 952, 954, 955, 956, 958, 959, 960, 961, 964, 966, 967, 968, 970, 975, 976, 977, 978, 982, 985, 992, 998, 999, 1004, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "solid": [11, 16, 31, 33, 120, 151, 208, 209, 225, 289, 300, 986], "z": [11, 16, 34, 57, 100, 117, 137, 150, 152, 167, 206, 208, 209, 210, 217, 219, 225, 230, 245, 282, 289, 292, 300, 303, 319, 325, 326, 330, 331, 332, 336, 365, 390, 398, 400, 534, 535, 566, 620, 645, 652, 666, 667, 670, 674, 680, 704, 765, 859, 958, 959, 966, 967, 1019], "float64": [11, 13, 48, 53, 70, 120, 122, 123, 166, 167, 267, 310, 311, 355, 362, 368, 370, 381, 401, 459, 477, 478, 489, 490, 523, 562, 563, 570, 572, 622, 639, 654, 656, 718, 844, 852, 853, 880, 881, 883, 884, 887, 889, 896, 898, 933, 936, 938, 939, 940, 977, 988, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "idx": [11, 16, 19, 30, 45, 104, 111, 117, 129, 157, 167, 169, 180, 188, 195, 196, 205, 218, 234, 345, 394, 397], "9999": [11, 214, 289, 317, 479, 608, 1012], "coverages_land": 11, "contourf": [11, 16, 117, 210, 230, 282, 289, 292, 300, 301, 319, 325, 331, 336, 612, 613], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 196, 214, 234, 253, 256, 260, 263, 265, 266, 683, 689, 768, 962, 1009, 1012, 1016], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 100, 104, 209, 210, 242, 263, 282, 283, 325, 331, 336, 393, 688, 962, 978], "fpr": [11, 226, 234, 253, 265, 266, 375, 573, 577, 679, 683, 687, 707, 769, 962, 1001, 1004], "tpr": [11, 226, 234, 253, 265, 266, 375, 683, 687, 769, 962, 1001, 1004], "threshold": [11, 25, 42, 64, 97, 104, 145, 163, 167, 169, 191, 226, 228, 253, 254, 255, 263, 274, 313, 320, 345, 348, 381, 393, 398, 400, 402, 423, 424, 427, 450, 481, 489, 490, 512, 518, 523, 529, 530, 531, 544, 569, 572, 574, 578, 583, 584, 625, 648, 652, 657, 659, 673, 679, 681, 683, 684, 687, 688, 701, 706, 707, 719, 720, 736, 762, 768, 769, 772, 775, 776, 796, 814, 825, 826, 842, 844, 846, 861, 873, 874, 875, 883, 890, 892, 936, 958, 962, 965, 966, 968, 972, 975, 977, 978, 983, 1004, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "roc_curv": [11, 226, 253, 265, 683, 687, 707, 762, 768, 962, 1004, 1005, 1006, 1009, 1010, 1012, 1017], "roc_auc": [11, 256, 260, 265, 266, 375, 615, 683, 962, 1001], "ntime": [11, 267], "134": [11, 15, 45, 53, 91, 92, 101, 120, 256, 1007], "plot_species_distribution_model": [11, 15, 479], "emploi": [12, 148, 231, 395, 401, 403, 431, 459, 563, 570, 970, 986, 996, 1010], "techniqu": [12, 69, 71, 96, 105, 110, 119, 136, 144, 161, 165, 204, 219, 221, 261, 280, 309, 315, 344, 356, 365, 379, 381, 392, 393, 397, 398, 399, 400, 401, 402, 428, 429, 430, 431, 515, 535, 658, 670, 674, 675, 706, 736, 954, 958, 959, 961, 962, 965, 968, 970, 974, 976, 978, 983, 986, 991, 996, 997, 1017], "histor": [12, 196, 983], "quot": [12, 14, 69, 257, 339, 340, 355, 362, 363, 366, 372, 392, 469, 470, 477, 962, 974, 977, 997, 1019], "quantiti": [12, 118, 256, 263, 308, 354, 381, 393, 400, 702, 703, 704, 765, 835, 951, 953, 956, 958, 1009], "daili": [12, 986], "price": [12, 74, 118, 128, 952, 958, 986, 993], "link": [12, 17, 166, 167, 175, 196, 214, 241, 259, 286, 344, 355, 366, 367, 368, 369, 372, 376, 381, 393, 395, 398, 403, 542, 543, 591, 629, 650, 661, 669, 686, 897, 899, 958, 965, 978, 979, 982, 985, 991, 995, 997, 1002, 1004, 1007, 1008, 1011, 1012, 1015], "fluctuat": [12, 59, 196, 263, 1012], "normalesup": [12, 32, 46, 65, 230], "2003": [12, 390, 393, 398, 401, 432, 433, 443, 494, 496, 670, 674, 814, 816, 958, 959, 964, 974, 1012], "2008": [12, 395, 397, 398, 459, 515, 544, 571, 626, 645, 666, 667, 673, 697, 706, 736, 809, 814, 818, 835, 956, 959, 960, 962, 963, 964, 967, 968, 977], "calm": 12, "ago": [12, 983], "tech": [12, 365, 817], "firm": [12, 393], "crash": [12, 368, 449, 868, 869, 876, 972, 1008, 1012], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 376, 835, 967, 995], "msft": 12, "ibm": [12, 19, 318, 341, 363], "twx": 12, "warner": [12, 1019], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 997], "amzn": 12, "amazon": 12, "tm": [12, 965], "toyota": 12, "caj": 12, "canon": [12, 381, 400, 463, 464, 466, 748, 983, 984, 999], "sne": [12, 163, 216, 217, 218, 219, 221, 223, 495, 506, 673, 998, 999], "soni": [12, 1014, 1016], "ford": 12, "hmc": 12, "honda": [12, 19], "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 836, 837, 966], "boe": 12, "ko": [12, 26, 149], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 79, 80, 395, 450, 455], "mcdonald": 12, "pep": [12, 376, 1004], "pepsi": 12, "kellogg": 12, "un": [12, 368, 391, 401, 405, 514, 570, 773, 842, 851, 861, 865, 1013], "unilev": 12, "mar": [12, 980], "marriott": 12, "pg": [12, 374, 630, 958, 1009], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 953, 964, 1016], "electr": [12, 365, 393], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 986], "chase": [12, 1004], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 986], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 354, 366, 379, 963, 980], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 69], "instrument": [12, 69, 95, 165], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1014], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 131], "dynam": [12, 167, 536, 537, 544, 560, 561, 657, 658, 659, 978, 982, 986, 1010, 1016], "rtn": 12, "raytheon": 12, "cat": [12, 70, 167, 168, 309, 310, 311, 363, 401, 563, 693, 699, 734, 763, 962, 972, 1013, 1014, 1016], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 341, 355, 370, 374, 395, 401, 480, 563, 569, 570, 572, 890, 892, 982], "fetch": [12, 17, 128, 166, 214, 361, 362, 363, 368, 372, 373, 376, 392, 398, 477, 536, 537, 544, 569, 570, 572, 1012], "histori": [12, 357, 527, 540, 541, 980, 1004], "stderr": [12, 808], "url": [12, 17, 145, 362, 365, 372], "githubusercont": 12, "master": [12, 16, 276, 311, 368, 372, 986, 1009], "financi": [12, 393, 400, 958], "csv": [12, 362, 365, 373, 985, 1012, 1017], "read_csv": [12, 373, 1019], "close_pric": 12, "vstack": [12, 26, 56, 64, 151, 152, 178, 241, 245, 276, 289, 331, 612, 963, 1012], "q": [12, 70, 84, 121, 196, 309, 390, 393, 398, 914, 958, 977], "open_pric": 12, "carri": [12, 31, 161, 256, 259, 264, 293, 300, 341, 382, 387, 401, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 986, 996], "invers": [12, 54, 76, 82, 163, 246, 265, 326, 340, 341, 360, 381, 392, 394, 396, 397, 398, 401, 405, 427, 446, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 508, 514, 515, 516, 520, 522, 524, 538, 542, 545, 570, 571, 572, 609, 625, 626, 639, 640, 647, 649, 655, 656, 657, 658, 659, 661, 704, 723, 732, 775, 776, 821, 822, 829, 830, 836, 837, 839, 843, 846, 852, 853, 855, 870, 871, 878, 879, 880, 883, 884, 886, 888, 904, 956, 958, 962, 965, 966, 972, 976, 977, 995, 997, 998, 999, 1004, 1007, 1012, 1015, 1016, 1018], "correl": [12, 27, 81, 84, 85, 105, 125, 141, 144, 153, 163, 164, 165, 167, 168, 170, 185, 191, 214, 256, 274, 307, 308, 334, 361, 364, 365, 373, 381, 383, 390, 395, 397, 402, 403, 431, 438, 463, 464, 466, 474, 475, 481, 505, 545, 587, 590, 608, 615, 616, 617, 663, 664, 723, 737, 758, 759, 760, 805, 819, 820, 856, 857, 859, 867, 953, 958, 963, 969, 972, 976, 978, 983, 984, 999, 1004, 1005, 1006, 1017, 1018], "condition": [12, 27, 196, 391, 395, 738, 956], "connect": [12, 39, 44, 47, 51, 54, 61, 65, 66, 366, 368, 377, 381, 395, 423, 427, 433, 443, 444, 566, 567, 676, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 960, 965, 967, 975, 1008, 1017], "edge_model": 12, "graphicallassocv": [12, 81, 395, 452, 454, 455, 456, 457, 459, 1012, 1016, 1018], "seri": [12, 81, 115, 165, 168, 178, 196, 217, 234, 238, 261, 310, 314, 360, 363, 373, 381, 393, 470, 471, 472, 473, 477, 481, 482, 483, 485, 486, 491, 522, 671, 675, 798, 894, 953, 958, 959, 963, 965, 976, 982, 1007, 1010, 1011, 1012, 1016, 1019], "rather": [12, 53, 81, 112, 160, 166, 196, 197, 210, 302, 303, 339, 340, 350, 355, 364, 368, 370, 373, 374, 376, 379, 380, 381, 382, 393, 397, 398, 400, 401, 403, 429, 442, 444, 546, 562, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 610, 627, 628, 633, 634, 641, 642, 643, 644, 761, 791, 810, 812, 813, 842, 878, 879, 890, 915, 956, 958, 959, 962, 964, 965, 969, 983, 992, 995, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1019], "former": [12, 341, 400, 401, 546, 779, 786, 795, 964, 1004, 1010, 1013], "recoveri": [12, 81, 195, 395], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 376], "trust": [12, 26, 70, 71, 80, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 372, 382, 387, 391, 992, 1018], "unabl": [12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 165, 166, 167, 168, 177, 196, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 356, 859, 972, 1013], "render": [12, 26, 53, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 191, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 368, 372, 373, 374, 381, 532, 570, 612, 856, 867, 890, 892, 961, 978, 1017], "nbviewer": [12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 57, 59, 130, 167, 169, 196, 218, 247, 251, 316, 340, 348, 363, 373, 381, 382, 393, 399, 400, 401, 416, 476, 569, 570, 572, 575, 699, 768, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 852, 888, 889, 958, 959, 961, 962, 963, 978, 979, 980, 982, 988, 991, 992, 1010, 1011, 1012, 1013, 1016, 1017, 1018], "amongst": [12, 978], "indic": [12, 19, 25, 26, 27, 48, 58, 59, 65, 74, 85, 94, 114, 153, 156, 161, 165, 167, 193, 219, 229, 250, 258, 259, 262, 263, 276, 289, 314, 315, 318, 339, 340, 341, 348, 355, 363, 368, 369, 370, 372, 376, 377, 379, 381, 390, 391, 393, 395, 397, 398, 400, 401, 403, 404, 408, 419, 422, 426, 431, 432, 433, 434, 436, 437, 438, 441, 445, 448, 453, 468, 489, 490, 492, 493, 494, 504, 513, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 601, 608, 609, 610, 611, 613, 614, 620, 628, 631, 632, 634, 635, 636, 642, 644, 646, 654, 656, 663, 664, 671, 673, 675, 677, 684, 688, 693, 694, 699, 700, 701, 705, 708, 709, 710, 711, 714, 718, 719, 720, 721, 734, 751, 758, 759, 760, 761, 763, 764, 765, 767, 768, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 812, 813, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 843, 846, 850, 852, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 894, 898, 899, 904, 919, 925, 926, 952, 957, 958, 959, 962, 963, 964, 965, 966, 969, 970, 972, 973, 976, 977, 983, 988, 992, 995, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1017, 1019, 1020], "reflect": [12, 40, 46, 47, 79, 91, 95, 118, 167, 168, 196, 214, 265, 280, 340, 364, 367, 372, 381, 383, 390, 431, 437, 959, 962, 968, 970, 996, 1005, 1013], "properti": [12, 25, 155, 156, 198, 213, 242, 278, 303, 348, 354, 357, 361, 368, 370, 384, 390, 393, 395, 398, 400, 402, 403, 408, 424, 427, 432, 433, 434, 445, 446, 463, 464, 465, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 571, 572, 574, 575, 578, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 627, 633, 636, 641, 643, 655, 656, 680, 685, 686, 689, 777, 780, 781, 791, 807, 808, 838, 839, 852, 854, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 954, 957, 958, 959, 962, 963, 965, 968, 972, 975, 977, 978, 979, 983, 988, 1009, 1013, 1014, 1018], "impact": [12, 25, 36, 37, 67, 74, 141, 163, 165, 166, 167, 198, 214, 238, 250, 303, 311, 340, 350, 354, 355, 361, 379, 382, 393, 398, 428, 430, 517, 521, 528, 571, 647, 648, 649, 657, 658, 659, 673, 772, 777, 780, 781, 791, 802, 819, 820, 856, 867, 901, 915, 933, 936, 951, 961, 969, 977, 1011, 1014, 1017], "affinity_propag": [12, 44], "covariance_": [12, 34, 79, 81, 450, 451, 452, 453, 454, 455, 456, 457, 530, 531, 956, 1011], "n_label": [12, 91, 232, 381, 468, 504, 694, 701, 706, 719, 720, 734, 736, 770, 771, 797, 962, 1010, 1012], "lai": [12, 303, 968], "canva": [12, 16], "manifold": [12, 39, 52, 66, 220, 221, 222, 223, 276, 306, 310, 311, 316, 357, 361, 381, 393, 398, 400, 483, 506, 511, 525, 530, 547, 828, 840, 849, 871, 901, 965, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1020], "dens": [12, 163, 174, 215, 310, 311, 318, 354, 377, 381, 393, 398, 400, 402, 425, 428, 430, 445, 448, 477, 504, 505, 515, 516, 525, 547, 566, 567, 588, 589, 610, 633, 638, 639, 640, 647, 649, 653, 654, 657, 658, 659, 668, 669, 670, 673, 674, 740, 741, 747, 759, 770, 836, 837, 844, 851, 852, 854, 856, 857, 859, 867, 868, 869, 870, 871, 878, 879, 880, 881, 883, 884, 916, 933, 936, 952, 955, 958, 959, 962, 963, 965, 968, 972, 974, 975, 976, 977, 978, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "eigen_solv": [12, 44, 46, 65, 217, 218, 398, 433, 443, 516, 669, 670, 672, 674, 676, 959, 1005, 1014, 1017, 1018, 1019], "arpack": [12, 19, 44, 46, 65, 218, 398, 432, 433, 434, 443, 516, 522, 525, 669, 670, 672, 674, 676, 959, 1010, 1011, 1016], "don": [12, 54, 69, 119, 166, 218, 232, 256, 276, 317, 323, 327, 334, 339, 340, 354, 362, 368, 370, 372, 374, 376, 379, 380, 394, 401, 627, 633, 807, 886, 887, 888, 889, 926, 951, 958, 961, 963, 966, 968, 976, 985, 997, 1008, 1013, 1020], "control": [12, 16, 60, 98, 99, 134, 153, 155, 197, 204, 228, 229, 257, 259, 278, 307, 309, 344, 346, 347, 354, 355, 361, 364, 368, 370, 373, 376, 379, 381, 384, 387, 392, 393, 396, 397, 398, 399, 402, 403, 416, 422, 430, 435, 452, 453, 459, 512, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 574, 575, 577, 595, 600, 606, 608, 611, 613, 615, 620, 622, 623, 627, 628, 630, 631, 632, 633, 635, 636, 637, 653, 657, 658, 663, 664, 668, 673, 682, 690, 775, 776, 777, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 805, 806, 809, 810, 813, 836, 837, 858, 870, 871, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 892, 928, 949, 951, 958, 959, 961, 962, 963, 965, 968, 969, 974, 976, 977, 978, 982, 983, 984, 995, 999, 1004, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "neighbor": [12, 31, 39, 44, 47, 59, 126, 129, 136, 160, 161, 218, 219, 221, 225, 233, 234, 280, 281, 282, 283, 285, 286, 287, 289, 290, 308, 310, 311, 339, 357, 360, 365, 377, 381, 393, 399, 400, 401, 404, 407, 415, 423, 426, 427, 429, 431, 433, 438, 439, 442, 444, 477, 483, 485, 544, 551, 583, 588, 589, 608, 609, 669, 670, 671, 672, 673, 674, 677, 761, 777, 805, 839, 840, 859, 874, 882, 936, 963, 968, 983, 984, 991, 996, 998, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "node": [12, 41, 118, 122, 306, 344, 348, 376, 377, 393, 395, 398, 400, 423, 424, 427, 444, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 631, 635, 637, 663, 664, 673, 819, 820, 886, 887, 888, 889, 890, 892, 920, 930, 965, 967, 968, 969, 978, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1017, 1018, 1019], "plane": [12, 208, 230, 282, 325, 328, 330, 331, 336, 365, 433, 443, 956, 958, 977, 995], "node_position_model": 12, "locallylinearembed": [12, 217, 218, 219, 310, 669, 671, 673, 959, 965, 1009, 1010, 1018, 1019, 1020], "n_neighbor": [12, 44, 61, 66, 129, 160, 217, 218, 219, 221, 225, 234, 276, 278, 279, 282, 283, 284, 285, 287, 288, 303, 306, 308, 339, 400, 433, 583, 588, 589, 609, 669, 670, 672, 674, 677, 821, 822, 823, 825, 827, 828, 832, 873, 874, 952, 959, 965, 968, 975, 1011, 1018, 1020], "output": [12, 14, 16, 25, 27, 37, 53, 58, 97, 107, 112, 117, 118, 128, 132, 136, 137, 148, 156, 160, 161, 163, 166, 192, 224, 238, 239, 244, 250, 254, 256, 259, 263, 265, 266, 276, 299, 302, 306, 309, 310, 340, 341, 343, 348, 349, 361, 362, 363, 365, 368, 370, 374, 376, 379, 380, 381, 391, 392, 393, 394, 396, 397, 400, 401, 402, 409, 413, 415, 419, 423, 424, 425, 427, 428, 430, 431, 433, 440, 441, 443, 444, 445, 446, 447, 448, 449, 463, 464, 465, 466, 469, 472, 473, 474, 475, 476, 477, 478, 484, 486, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 638, 639, 641, 642, 643, 644, 647, 648, 649, 652, 654, 655, 657, 659, 660, 662, 663, 664, 665, 669, 670, 671, 673, 675, 677, 680, 681, 694, 695, 702, 703, 704, 706, 708, 715, 722, 725, 726, 728, 730, 731, 732, 733, 734, 736, 741, 747, 752, 765, 768, 775, 776, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 822, 823, 824, 828, 829, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 866, 867, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 899, 901, 904, 915, 916, 929, 949, 951, 952, 954, 956, 958, 959, 962, 963, 964, 965, 966, 969, 972, 977, 984, 988, 989, 991, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "edg": [12, 26, 46, 65, 97, 118, 220, 263, 376, 381, 390, 393, 395, 434, 542, 543, 566, 567, 569, 570, 572, 775, 816, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 844, 891, 972, 975, 986, 1010, 1012, 1015, 1018], "displai": [12, 25, 27, 34, 37, 46, 48, 59, 70, 80, 81, 84, 85, 88, 94, 119, 124, 125, 128, 163, 166, 167, 181, 183, 200, 214, 224, 225, 234, 239, 245, 253, 257, 258, 263, 270, 286, 307, 308, 330, 345, 354, 368, 371, 375, 377, 384, 394, 398, 401, 402, 420, 445, 448, 449, 477, 522, 545, 611, 612, 613, 639, 668, 678, 679, 681, 682, 683, 694, 699, 762, 769, 777, 783, 791, 805, 839, 840, 852, 854, 859, 876, 883, 890, 891, 892, 906, 928, 949, 962, 966, 982, 999, 1013, 1015, 1016, 1018, 1019, 1020], "strength": [12, 128, 155, 196, 200, 257, 306, 354, 396, 400, 548, 549, 624, 629, 630, 633, 639, 640, 650, 653, 654, 655, 656, 657, 659, 661, 668, 763, 836, 837, 878, 879, 883, 884, 951, 958, 965, 968, 976, 977], "plan": [12, 362, 366, 368, 369, 382, 972, 1007], "fair": [12, 400, 671, 675, 808, 963, 986], "crucial": [12, 165, 251, 354, 367, 368, 382, 393, 403, 977], "challeng": [12, 128, 148, 167, 175, 214, 225, 356, 363, 364, 393, 395, 443, 453, 962, 968, 986, 988], "overlap": [12, 37, 109, 122, 144, 220, 243, 340, 366, 390, 393, 397, 400, 401, 568, 770, 771, 778, 782, 784, 785, 786, 787, 795, 959, 972, 1010], "heurist": [12, 14, 120, 339, 355, 393, 402, 430, 433, 442, 443, 489, 490, 518, 520, 527, 657, 658, 659, 672, 676, 780, 781, 880, 881, 882, 883, 884, 903, 959, 960, 965, 976, 978, 986, 995, 1004, 1005, 1009, 1013, 1016, 1017], "direct": [12, 84, 85, 89, 94, 96, 100, 103, 145, 202, 241, 247, 253, 285, 295, 303, 326, 331, 366, 368, 369, 372, 376, 382, 393, 396, 398, 401, 402, 433, 443, 452, 453, 459, 515, 522, 530, 569, 570, 572, 583, 622, 669, 828, 956, 958, 963, 965, 967, 983, 996, 1004, 1007], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 57, 60, 81, 88, 94, 97, 152, 161, 187, 208, 212, 233, 280, 282, 285, 286, 290, 295, 325, 326, 330, 331, 332, 336, 357, 360, 365, 377, 381, 393, 399, 400, 404, 407, 415, 426, 429, 431, 433, 438, 442, 443, 477, 483, 485, 588, 589, 608, 609, 611, 616, 669, 670, 672, 673, 677, 770, 771, 777, 805, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 839, 840, 844, 859, 936, 959, 968, 977, 983, 984, 991, 999, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016], "along": [12, 13, 55, 58, 65, 85, 115, 121, 183, 196, 230, 260, 306, 340, 341, 350, 372, 374, 376, 377, 381, 384, 387, 390, 398, 400, 401, 402, 403, 405, 514, 531, 568, 592, 593, 611, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 657, 659, 662, 663, 664, 665, 666, 667, 759, 760, 770, 777, 791, 848, 849, 852, 856, 857, 858, 859, 863, 864, 865, 867, 868, 869, 894, 917, 937, 943, 951, 958, 965, 972, 975, 986, 1004, 1009, 1010, 1012, 1016, 1017], "linecollect": [12, 220, 228, 613], "facecolor": [12, 16, 26, 34, 45, 59, 94, 101, 111, 137, 156, 217, 232, 256, 283, 300, 324, 327, 330, 331, 333], "partial_correl": 12, "precision_": [12, 81, 450, 451, 452, 453, 454, 455, 456, 457], "sqrt": [12, 79, 80, 81, 97, 100, 104, 113, 134, 175, 177, 220, 222, 236, 241, 242, 243, 246, 247, 256, 331, 393, 400, 401, 403, 444, 450, 451, 452, 453, 454, 455, 456, 457, 519, 521, 528, 538, 539, 540, 541, 545, 546, 600, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 680, 711, 743, 744, 749, 859, 871, 886, 887, 888, 889, 954, 958, 959, 962, 964, 974, 1018], "diag": [12, 81, 156, 243, 246, 398, 403, 513, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 775, 776, 958, 1019], "newaxi": [12, 13, 19, 24, 42, 81, 104, 110, 149, 177, 186, 192, 197, 198, 199, 201, 202, 213, 228, 230, 270, 281, 288, 334, 346, 347, 390, 517, 958], "ab": [12, 17, 40, 74, 98, 105, 111, 118, 128, 141, 145, 169, 183, 187, 207, 209, 212, 214, 220, 256, 298, 324, 336, 393, 519, 521, 528, 608, 726, 819, 820, 854, 962], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 59, 60, 101], "start_idx": [12, 220], "end_idx": [12, 220], "sequenc": [12, 117, 184, 220, 370, 381, 394, 397, 398, 400, 401, 484, 493, 542, 543, 550, 551, 562, 563, 569, 570, 572, 627, 777, 780, 788, 805, 862, 918, 919, 925, 933, 936, 982, 1004, 1007, 1009, 1010], "line0": [12, 220], "linen": [12, 220], "x0": [12, 34, 188, 205, 220, 298, 323, 381, 413, 445, 548, 549, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859], "y0": [12, 220], "y1": [12, 90, 111, 220, 490, 697, 744, 963, 964], "xm": [12, 220], "ym": [12, 220], "segment": [12, 36, 47, 67, 163, 220, 228, 363, 376, 391, 393, 401, 433, 443, 489, 490, 672, 835, 962, 982, 986, 1012, 1014, 1016], "stop": [12, 17, 44, 61, 107, 132, 153, 155, 163, 167, 174, 198, 215, 307, 368, 370, 376, 377, 381, 393, 398, 400, 402, 422, 423, 425, 427, 428, 430, 433, 435, 443, 444, 452, 453, 459, 463, 464, 465, 477, 485, 489, 490, 496, 501, 513, 517, 518, 519, 520, 521, 524, 526, 527, 528, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 552, 569, 570, 572, 583, 598, 608, 625, 626, 627, 629, 630, 633, 637, 639, 640, 647, 648, 649, 650, 652, 657, 658, 659, 661, 672, 673, 676, 695, 775, 776, 805, 836, 837, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 920, 936, 951, 958, 966, 967, 977, 978, 983, 984, 986, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "lc": [12, 220, 228], "zorder": [12, 34, 57, 96, 125, 137, 149, 157, 186, 194, 218, 220, 228, 231, 241, 307, 330, 331], "hot_r": [12, 298], "norm": [12, 13, 14, 17, 34, 40, 54, 97, 100, 151, 154, 175, 182, 187, 220, 241, 242, 243, 245, 247, 253, 257, 281, 298, 326, 340, 374, 377, 381, 393, 401, 402, 424, 425, 428, 440, 441, 445, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 470, 512, 515, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 570, 571, 572, 578, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 657, 659, 662, 665, 666, 667, 671, 673, 674, 675, 750, 816, 851, 865, 878, 880, 883, 944, 945, 955, 958, 960, 962, 972, 976, 1007, 1009, 1011, 1015], "set_arrai": [12, 220, 228], "set_linewidth": [12, 220, 228], "add_collect": [12, 220, 228], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 57, 71, 114, 115, 119, 142, 145, 153, 160, 165, 166, 167, 168, 196, 214, 235, 238, 242, 243, 247, 251, 254, 255, 256, 257, 259, 267, 268, 276, 298, 303, 310, 314, 315, 340, 341, 363, 365, 366, 368, 370, 372, 377, 379, 381, 390, 394, 397, 398, 400, 401, 408, 425, 428, 429, 430, 431, 432, 434, 435, 438, 440, 441, 445, 448, 484, 490, 538, 539, 540, 541, 545, 546, 547, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 598, 613, 614, 621, 678, 685, 686, 693, 697, 699, 711, 718, 737, 759, 760, 766, 768, 772, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 805, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 852, 886, 887, 888, 889, 919, 933, 936, 941, 942, 962, 964, 965, 966, 976, 978, 982, 995, 997, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "dx": [12, 13, 507, 680], "dy": [12, 680], "this_dx": 12, "argmin": [12, 120, 255, 370, 395, 512, 518, 526, 527, 666, 759, 760, 978], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 61, 101, 225, 241, 292, 300], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 55, 59, 66, 89, 90, 91, 101, 111, 117, 124, 126, 127, 129, 130, 137, 140, 149, 150, 152, 156, 167, 179, 188, 198, 205, 208, 209, 210, 229, 230, 231, 232, 241, 244, 256, 259, 270, 279, 282, 283, 284, 287, 292, 300, 301, 303, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 336, 345, 346, 347, 612], "ptp": 12, "984": [12, 15], "plot_stock_market": [12, 15], "parallel": [13, 107, 113, 117, 132, 163, 167, 198, 257, 307, 308, 310, 331, 348, 353, 360, 368, 369, 371, 372, 379, 381, 394, 402, 404, 405, 419, 426, 429, 430, 431, 433, 438, 439, 442, 445, 448, 453, 476, 512, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 570, 575, 583, 591, 613, 615, 620, 639, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 788, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 838, 841, 873, 874, 930, 932, 983, 992, 997, 999, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1019], "acquir": [13, 116, 258, 1016], "angl": [13, 34, 97, 145, 241, 242, 243, 246, 247, 365, 398, 512, 518, 520, 523, 524, 526, 527, 529, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 659, 663, 664, 665, 666, 667, 673, 959, 960, 984, 999, 1004], "Such": [13, 124, 148, 153, 165, 175, 185, 197, 259, 339, 381, 382, 397, 398, 400, 536, 537, 637, 952, 962, 965, 972, 978, 995, 1014, 1019], "ct": [13, 156, 238, 394, 445, 447, 448], "cellular": 13, "materi": [13, 382, 562, 868, 869, 981], "haar": 13, "wavelet": [13, 104, 398], "sparsiti": [13, 81, 163, 174, 189, 211, 212, 215, 231, 340, 354, 381, 395, 398, 400, 402, 482, 483, 508, 512, 518, 519, 520, 521, 524, 526, 527, 528, 627, 633, 638, 639, 657, 659, 702, 703, 704, 848, 854, 859, 863, 955, 958, 965, 972, 991, 996, 1006], "oper": [13, 19, 156, 163, 231, 249, 253, 263, 272, 341, 354, 355, 365, 366, 368, 371, 374, 379, 381, 382, 384, 387, 389, 397, 398, 400, 401, 402, 406, 429, 442, 449, 456, 463, 464, 465, 466, 485, 514, 515, 522, 532, 533, 547, 553, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 597, 602, 605, 611, 616, 624, 639, 670, 674, 683, 687, 688, 689, 707, 754, 761, 762, 768, 769, 796, 805, 808, 819, 820, 842, 846, 851, 861, 862, 876, 883, 886, 917, 930, 935, 958, 965, 972, 977, 982, 986, 995, 1008, 1010, 1011, 1012, 1014, 1015, 1020], "fidel": 13, "penal": [13, 30, 81, 128, 185, 189, 196, 212, 214, 303, 334, 393, 395, 398, 402, 450, 451, 452, 453, 454, 455, 456, 457, 459, 628, 633, 634, 642, 644, 657, 686, 696, 714, 766, 773, 852, 878, 885, 958, 962, 964, 966, 976, 977, 995], "account": [13, 96, 103, 153, 160, 166, 214, 256, 285, 334, 336, 340, 354, 364, 368, 381, 382, 387, 393, 396, 397, 398, 400, 401, 444, 548, 549, 608, 609, 611, 613, 614, 630, 654, 660, 685, 688, 708, 709, 710, 718, 723, 736, 763, 764, 767, 768, 778, 782, 795, 954, 956, 960, 962, 963, 964, 965, 976, 978, 1009, 1011, 1012, 1013, 1016, 1017, 1019], "call": [13, 17, 46, 48, 50, 54, 70, 91, 114, 120, 142, 148, 152, 154, 156, 157, 165, 167, 184, 196, 197, 214, 235, 237, 238, 256, 257, 265, 270, 271, 276, 278, 303, 308, 309, 339, 340, 341, 348, 354, 355, 356, 363, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 391, 393, 394, 395, 396, 397, 398, 400, 401, 403, 405, 414, 422, 425, 428, 430, 431, 432, 433, 434, 435, 438, 441, 443, 445, 446, 449, 450, 455, 463, 464, 465, 469, 472, 473, 476, 478, 484, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 558, 563, 564, 566, 567, 569, 570, 572, 578, 583, 588, 589, 591, 592, 595, 598, 601, 608, 609, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 670, 671, 672, 673, 674, 675, 676, 678, 680, 682, 685, 712, 722, 735, 751, 754, 758, 759, 760, 761, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 828, 830, 835, 836, 837, 838, 839, 842, 843, 844, 846, 848, 849, 851, 856, 859, 862, 867, 868, 869, 870, 871, 875, 878, 879, 880, 881, 883, 884, 887, 889, 905, 909, 914, 915, 928, 929, 930, 933, 936, 946, 951, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 970, 972, 974, 975, 977, 978, 982, 986, 988, 992, 995, 996, 997, 999, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 55, 56, 60, 61, 65, 67, 78, 84, 94, 96, 108, 109, 110, 111, 163, 172, 183, 185, 199, 212, 219, 221, 224, 228, 234, 239, 242, 243, 244, 247, 253, 256, 265, 276, 282, 283, 285, 289, 298, 300, 303, 306, 307, 308, 311, 325, 339, 340, 350, 354, 356, 361, 362, 363, 364, 365, 368, 369, 370, 371, 376, 377, 380, 381, 383, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 450, 455, 456, 459, 463, 464, 465, 469, 484, 492, 493, 494, 495, 496, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 529, 534, 535, 536, 537, 540, 541, 544, 572, 584, 585, 591, 592, 616, 618, 620, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 685, 686, 689, 698, 700, 715, 717, 723, 754, 758, 759, 771, 773, 775, 776, 807, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 835, 840, 844, 846, 859, 862, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 898, 914, 915, 917, 927, 931, 937, 952, 954, 957, 959, 960, 962, 964, 967, 968, 972, 975, 976, 977, 981, 982, 983, 984, 986, 988, 991, 992, 994, 996, 997, 999, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "computation": [13, 77, 94, 120, 128, 148, 276, 339, 353, 369, 392, 393, 394, 397, 398, 400, 403, 519, 613, 614, 652, 743, 777, 779, 780, 781, 791, 802, 958, 959, 961, 969, 970, 974, 996, 999, 1008], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 67, 78, 93, 95, 96, 106, 121, 126, 131, 139, 146, 147, 158, 163, 168, 178, 182, 184, 187, 194, 211, 216, 219, 223, 224, 228, 239, 243, 249, 251, 253, 272, 274, 292, 300, 302, 303, 306, 308, 319, 323, 338, 340, 342, 350, 363, 365, 381, 391, 395, 396, 398, 402, 419, 425, 428, 430, 469, 485, 493, 495, 496, 503, 506, 522, 530, 531, 534, 545, 562, 563, 569, 570, 571, 572, 587, 589, 591, 592, 596, 603, 606, 620, 624, 639, 653, 669, 670, 671, 672, 673, 685, 718, 723, 759, 768, 777, 780, 791, 793, 805, 814, 817, 821, 836, 840, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869, 878, 880, 881, 883, 884, 886, 951, 956, 959, 962, 964, 965, 968, 977, 1001], "l2": [13, 30, 40, 81, 84, 163, 174, 181, 187, 196, 207, 211, 212, 214, 215, 257, 276, 298, 318, 339, 340, 370, 377, 379, 393, 395, 398, 401, 423, 427, 431, 438, 505, 519, 521, 528, 539, 542, 543, 546, 570, 571, 572, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 653, 657, 659, 661, 662, 667, 668, 669, 715, 730, 741, 742, 758, 759, 760, 791, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 836, 837, 851, 859, 865, 878, 879, 883, 884, 885, 887, 889, 945, 951, 955, 958, 960, 965, 966, 972, 976, 978, 995, 997, 1006, 1008, 1009, 1011, 1013], "produc": [13, 25, 26, 44, 56, 69, 97, 121, 122, 123, 124, 262, 295, 317, 350, 363, 364, 368, 370, 373, 381, 382, 393, 394, 397, 398, 400, 422, 425, 433, 500, 517, 540, 544, 562, 569, 574, 575, 613, 614, 779, 780, 781, 789, 794, 797, 800, 844, 854, 880, 883, 953, 954, 958, 960, 961, 962, 965, 968, 969, 973, 975, 976, 977, 988, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 59, 61, 65, 72, 79, 93, 94, 99, 106, 109, 111, 114, 116, 126, 161, 163, 167, 168, 172, 174, 197, 215, 218, 232, 243, 256, 259, 265, 266, 298, 300, 303, 308, 317, 321, 326, 330, 331, 337, 339, 350, 354, 364, 365, 370, 373, 376, 379, 381, 391, 393, 394, 395, 398, 400, 401, 403, 445, 493, 500, 514, 519, 521, 522, 528, 530, 562, 569, 570, 572, 591, 619, 627, 628, 654, 657, 658, 671, 675, 705, 712, 725, 726, 728, 733, 770, 796, 811, 812, 838, 839, 880, 882, 883, 888, 889, 951, 952, 954, 956, 958, 959, 961, 968, 969, 972, 976, 977, 993, 995, 996, 1004, 1007, 1009, 1010, 1014, 1016, 1017], "central": [13, 198, 393, 968, 982], "emmanuel": [13, 65, 1004, 1011, 1012, 1013], "gouillart": [13, 65, 1004], "nsup": 13, "ndimag": [13, 46, 47, 54, 295, 996], "_weight": [13, 214], "orig": 13, "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 59, 61, 65, 80, 101, 118, 120, 137, 165, 186, 187, 214, 220, 231, 234, 267, 276, 401, 952, 958, 1011], "hstack": [13, 33, 34, 42, 130, 141, 222, 233, 251, 329, 397, 838], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 137, 330], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 299, 329, 616], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 120, 130, 340, 819, 820], "mask": [13, 42, 65, 116, 196, 204, 254, 255, 318, 377, 381, 394, 400, 450, 455, 542, 543, 562, 566, 567, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 589, 610, 611, 613, 614, 630, 652, 777, 780, 781, 791, 934, 952, 969, 1004, 1007, 1009, 1010, 1012, 1014], "logical_and": [13, 121], "proj_oper": 13, "coo_matrix": [13, 182, 433, 566, 567, 933, 936], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 57, 61, 102, 112, 125, 127, 140, 175, 219, 220, 225, 231, 270, 288, 307, 308, 318, 319, 333, 334, 340, 346, 347, 377, 525, 685, 686, 696, 737, 761, 766, 870, 871, 873, 874, 875, 974, 988, 1004, 1015, 1016], "gaussian_filt": [13, 46, 47, 54, 996], "sigma": [13, 46, 47, 54, 79, 102, 121, 254, 256, 390, 395, 398, 400, 595, 630, 956, 958, 960, 964, 967, 996], "logical_xor": [13, 152, 332], "binary_eros": 13, "128": [13, 14, 196, 354, 517], "proj": [13, 630], "randn": [13, 33, 34, 39, 54, 64, 65, 79, 80, 97, 102, 124, 140, 148, 152, 165, 168, 180, 185, 190, 191, 195, 209, 210, 213, 242, 245, 246, 251, 263, 265, 266, 270, 282, 283, 307, 308, 325, 331, 332, 334, 336, 370, 373, 624, 651, 653, 659, 798, 881, 884], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 57, 70, 73, 77, 81, 86, 102, 117, 118, 120, 121, 133, 138, 139, 143, 145, 146, 166, 167, 174, 184, 196, 198, 214, 215, 243, 244, 246, 249, 253, 256, 257, 258, 260, 262, 265, 270, 271, 272, 280, 295, 299, 306, 308, 317, 326, 334, 357, 363, 370, 371, 377, 379, 380, 381, 387, 388, 391, 394, 395, 398, 400, 401, 402, 403, 419, 452, 453, 454, 455, 456, 457, 459, 463, 464, 465, 466, 474, 482, 483, 485, 496, 522, 548, 549, 556, 574, 575, 578, 583, 587, 590, 623, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 682, 687, 694, 708, 721, 765, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 839, 840, 859, 878, 880, 883, 921, 961, 962, 965, 966, 970, 977, 978, 982, 983, 984, 986, 988, 991, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "lassocv": [13, 128, 134, 166, 185, 400, 402, 632, 633, 635, 636, 637, 644, 665, 958, 992, 1004, 1007, 1011, 1014, 1015, 1017, 1018], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 57, 81, 88, 94, 97, 152, 155, 163, 174, 187, 212, 215, 228, 233, 265, 280, 288, 295, 315, 326, 332, 403, 616, 626, 634, 644, 653, 665, 681, 688, 822, 830, 840, 854, 858, 953, 958, 962, 972, 1011, 1016], "133": [13, 55, 109, 231, 239], "wspace": [13, 14, 39, 44, 45, 61, 79, 94, 109, 111, 196, 214, 225, 241, 243, 244, 247, 281, 289, 315, 323], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 71, 374, 392, 401, 516, 519, 525, 528, 998, 999, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "latentdirichletalloc": [14, 356, 373, 398, 982, 1009, 1011, 1018, 1019], "corpu": [14, 340, 341, 363, 398, 569, 570, 571, 572, 997, 1005], "frobeniu": [14, 97, 425, 428, 440, 450, 451, 452, 453, 454, 455, 456, 457, 512, 518, 519, 521, 526, 527, 528, 958, 1011], "kullback": [14, 217, 398, 519, 521, 528, 673, 959, 1011], "leibler": [14, 217, 398, 519, 521, 528, 673, 959, 1011], "diverg": [14, 120, 217, 222, 281, 519, 521, 528, 673, 835, 959, 961, 962, 967, 969, 1011, 1012, 1017], "probabilist": [14, 27, 30, 81, 93, 106, 147, 148, 151, 155, 158, 163, 339, 381, 391, 399, 400, 419, 454, 457, 513, 515, 516, 522, 540, 569, 570, 591, 603, 624, 626, 657, 684, 721, 777, 801, 846, 880, 881, 883, 884, 955, 956, 958, 961, 962, 967, 972, 977, 978, 982, 986, 1004, 1007, 1011], "semant": [14, 339, 340, 381, 525, 997, 998, 999, 1006], "runnabl": [14, 372, 373], "coupl": [14, 52, 53, 218, 362, 363, 390, 391, 393, 402, 570, 884, 951, 977], "ten": [14, 19, 109, 145, 218, 247, 363, 365, 400, 501, 883, 1013], "polynomi": [14, 160, 163, 171, 173, 174, 196, 202, 215, 236, 256, 270, 308, 309, 323, 330, 333, 360, 364, 433, 472, 601, 620, 621, 622, 624, 653, 745, 754, 755, 805, 840, 849, 851, 854, 858, 878, 880, 881, 882, 883, 884, 957, 977, 984, 999, 1016, 1017], "lda": [14, 33, 34, 93, 106, 163, 285, 350, 365, 389, 485, 517, 522, 530, 531, 828, 982, 984, 998, 999, 1009], "proport": [14, 26, 40, 144, 182, 196, 203, 209, 225, 259, 283, 286, 336, 354, 363, 391, 393, 395, 397, 398, 400, 401, 420, 421, 450, 455, 496, 530, 531, 536, 538, 540, 541, 542, 543, 544, 545, 564, 565, 569, 572, 608, 613, 639, 640, 647, 648, 649, 655, 656, 657, 659, 677, 682, 693, 778, 779, 780, 781, 794, 797, 805, 825, 836, 837, 853, 878, 879, 880, 883, 884, 886, 888, 890, 892, 904, 951, 961, 962, 965, 968, 976, 977, 978, 1009], "338": [14, 203, 215], "tf": [14, 19, 229, 339, 340, 341, 363, 398, 502, 525, 569, 570, 571, 572, 818, 826, 851, 951, 960, 964, 972, 982, 997], "idf": [14, 19, 229, 339, 340, 341, 363, 398, 502, 525, 569, 570, 571, 572, 818, 826, 851, 951, 960, 964, 972, 997, 1004], "294": 14, "278": [14, 157, 158, 365, 819, 820], "2000": [14, 26, 40, 50, 74, 95, 102, 119, 172, 244, 247, 256, 292, 310, 340, 363, 365, 393, 394, 400, 405, 433, 443, 514, 515, 540, 670, 672, 674, 723, 768, 775, 825, 855, 866, 959, 962, 968, 974, 988, 996], "070": 14, "087": 14, "minibatchnmf": [14, 356, 398, 1018, 1020], "batch_siz": [14, 19, 42, 63, 94, 97, 98, 340, 398, 430, 515, 517, 518, 519, 520, 527, 835, 836, 837, 918, 919, 928, 1005, 1012, 1015, 1017, 1018], "089": 14, "235": [14, 140, 146], "852": [14, 39, 67], "ensta": [14, 17, 37, 48, 60, 196, 214, 218, 257, 259, 339, 340, 341], "chyi": [14, 1007, 1008, 1009, 1010, 1011], "kwei": [14, 1007, 1008, 1009, 1010, 1011], "yau": [14, 1007, 1008, 1009, 1010, 1011], "chyikwei": 14, "tfidfvector": [14, 19, 69, 257, 339, 363, 398, 401, 470, 569, 570, 571, 1004, 1006, 1012, 1013, 1014, 1017, 1018], "countvector": [14, 318, 341, 363, 373, 394, 398, 401, 470, 517, 563, 570, 571, 572, 997, 1004, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017], "fetch_20newsgroup": [14, 19, 69, 257, 318, 339, 340, 341, 363, 470, 997, 1009, 1014], "n_top_word": 14, "init": [14, 42, 45, 57, 58, 60, 63, 167, 176, 217, 218, 220, 221, 222, 244, 276, 340, 371, 376, 393, 398, 400, 425, 428, 430, 432, 434, 440, 441, 519, 521, 528, 529, 540, 541, 613, 614, 671, 673, 675, 828, 959, 1004, 1013, 1016, 1018, 1019], "nndsvda": [14, 398, 519, 521, 528, 1013, 1016], "plot_top_word": 14, "feature_nam": [14, 19, 105, 115, 122, 125, 145, 166, 168, 169, 205, 235, 279, 298, 306, 307, 308, 323, 339, 345, 361, 363, 373, 394, 471, 472, 473, 477, 481, 482, 483, 485, 486, 491, 563, 612, 613, 614, 890, 891, 892, 970, 978], "flatten": [14, 32, 220, 230, 254, 302, 323, 335, 374, 483, 550, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 828], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 120, 122, 168, 169, 196, 214, 306, 314, 315, 339, 340, 363, 970], "top_featur": 14, "barh": [14, 122, 160, 161, 165, 166, 168, 169, 238, 339, 340, 341], "fontdict": [14, 39], "invert_yaxi": [14, 161, 341], "labels": [14, 302], "set_vis": [14, 280, 286, 298], "filter": [14, 46, 47, 202, 214, 254, 256, 278, 339, 370, 374, 377, 392, 393, 401, 429, 469, 470, 484, 569, 572, 576, 577, 578, 579, 754, 814, 907, 927, 964, 965, 994, 997, 1014], "useless": [14, 117, 259, 374, 402, 496, 509, 639, 693, 958, 972, 1013], "earli": [14, 44, 61, 107, 109, 117, 132, 163, 174, 215, 307, 381, 400, 423, 427, 430, 444, 477, 485, 496, 501, 517, 518, 519, 520, 527, 534, 535, 540, 541, 542, 543, 552, 608, 637, 647, 648, 649, 657, 659, 673, 805, 836, 837, 936, 959, 965, 972, 981, 983, 986, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "strip": [14, 214, 340, 354, 362, 363, 477], "header": [14, 69, 257, 339, 340, 363, 366, 401, 469, 470, 777, 780, 781, 791], "footer": [14, 69, 257, 339, 340, 363, 469, 470], "repli": [14, 339, 367, 368, 371], "common": [14, 17, 19, 97, 142, 145, 163, 164, 170, 251, 263, 308, 339, 341, 348, 354, 357, 362, 368, 370, 376, 379, 380, 383, 384, 390, 391, 392, 393, 394, 397, 399, 402, 403, 446, 448, 477, 571, 613, 634, 653, 654, 726, 733, 749, 792, 802, 805, 840, 842, 850, 851, 852, 857, 859, 863, 864, 866, 867, 868, 869, 917, 951, 952, 958, 965, 968, 972, 977, 978, 982, 983, 986, 988, 999, 1004, 1012, 1014, 1015, 1019], "english": [14, 19, 69, 339, 340, 341, 373, 401, 569, 570, 572, 982, 983, 997, 1017], "occur": [14, 69, 196, 214, 350, 368, 370, 376, 382, 390, 393, 395, 397, 401, 489, 490, 553, 562, 569, 571, 572, 608, 652, 776, 777, 780, 781, 783, 791, 801, 802, 803, 806, 903, 962, 964, 972, 997, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 257, 318, 339, 340, 569, 572, 1015], "min_df": [14, 19, 69, 257, 318, 339, 340, 401, 569, 572, 1004, 1006, 1015], "max_featur": [14, 31, 113, 123, 233, 253, 268, 308, 400, 402, 536, 537, 538, 539, 540, 541, 544, 545, 546, 569, 572, 578, 886, 887, 888, 889, 951, 958, 1004, 1006, 1007, 1011, 1012, 1015, 1018], "stop_word": [14, 19, 339, 340, 401, 569, 570, 572], "tfidf": [14, 69, 318, 401, 572, 997], "tf_vector": 14, "beta_loss": [14, 519, 521, 528, 1011], "alpha_w": [14, 398, 519, 521, 528, 1017], "00005": 14, "alpha_h": [14, 398, 519, 521, 528, 1017], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 166, 168, 309, 339, 340, 341, 363, 370, 381, 394, 401, 409, 413, 415, 424, 425, 427, 428, 430, 445, 448, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 972, 1017, 1018, 1019, 1020], "solver": [14, 30, 33, 34, 46, 65, 163, 174, 185, 187, 188, 189, 196, 198, 211, 212, 214, 215, 292, 293, 294, 295, 339, 374, 379, 381, 384, 389, 393, 405, 433, 443, 452, 453, 459, 483, 514, 516, 521, 522, 525, 528, 530, 627, 628, 629, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 650, 651, 653, 655, 657, 661, 662, 665, 668, 669, 670, 672, 674, 676, 768, 791, 805, 810, 813, 836, 837, 880, 881, 882, 883, 884, 956, 959, 962, 966, 976, 977, 982, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mu": [14, 79, 80, 256, 398, 406, 454, 456, 457, 460, 461, 462, 521, 528, 956, 958, 1011, 1014], "mbnmf": 14, "learning_method": [14, 373, 517], "learning_offset": [14, 517], "tf_feature_nam": 14, "257": [14, 15, 120, 132, 219, 254, 270, 272], "plot_topics_extraction_with_nmf_lda": [14, 15], "886": 15, "execut": [15, 22, 28, 35, 67, 75, 82, 86, 92, 106, 132, 138, 146, 158, 160, 162, 170, 173, 185, 215, 223, 231, 239, 248, 261, 272, 275, 290, 296, 304, 312, 320, 337, 342, 349, 355, 368, 374, 387, 393, 398, 404, 425, 442, 777, 783, 791, 800, 801, 802, 803, 806, 824, 928, 929, 972, 975, 989, 997, 1006, 1009, 1012], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 67, 75, 79, 82, 86, 92, 97, 106, 132, 138, 146, 153, 158, 162, 166, 167, 170, 173, 187, 214, 215, 223, 229, 239, 248, 254, 257, 272, 275, 290, 295, 296, 304, 312, 314, 315, 320, 337, 340, 342, 349, 362, 365, 374, 393, 400, 401, 694, 696, 768, 777, 791, 803, 887, 958, 962, 972, 974, 976, 996], "09": [15, 22, 96, 104, 106, 132, 166, 229, 232, 239, 269, 272, 304, 393, 715, 817, 962, 972, 976], "07": [15, 66, 82, 104, 132, 166, 192, 214, 265, 272, 303, 320, 337, 350, 363, 393, 512, 542, 543, 673, 962, 976], "real": [15, 31, 56, 69, 73, 77, 79, 107, 132, 151, 166, 221, 234, 250, 262, 270, 280, 299, 300, 341, 354, 357, 361, 362, 365, 372, 374, 377, 379, 380, 381, 390, 391, 393, 395, 397, 398, 400, 401, 450, 470, 471, 474, 475, 476, 477, 478, 481, 482, 485, 491, 501, 532, 533, 534, 536, 537, 538, 539, 540, 541, 545, 546, 573, 575, 576, 577, 578, 579, 580, 581, 680, 685, 704, 708, 732, 735, 737, 765, 773, 774, 804, 805, 836, 837, 880, 881, 882, 883, 884, 886, 887, 889, 952, 953, 954, 959, 962, 964, 966, 967, 968, 978, 981, 999, 1004, 1017], "svm_gui": [15, 16, 995], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 80, 167, 318, 339, 340, 341, 363, 374, 392, 393, 395, 398, 770, 771, 775, 809, 890, 962, 963, 969, 982, 997], "frontend": [16, 374], "mainli": [16, 27, 53, 112, 148, 265, 354, 370, 391, 592, 964, 969], "intend": [16, 56, 57, 98, 197, 339, 368, 369, 370, 375, 379, 397, 449, 563, 654, 680, 848, 849, 859, 876, 957, 958, 962, 966, 973], "didact": [16, 368, 983], "region": [16, 25, 36, 47, 49, 53, 55, 65, 67, 129, 155, 163, 166, 196, 214, 225, 229, 230, 247, 301, 326, 365, 375, 381, 393, 400, 403, 429, 431, 437, 443, 568, 959, 962, 965, 968, 976, 978, 996], "induc": [16, 26, 55, 166, 187, 189, 194, 197, 211, 231, 341, 390, 392, 398, 400, 403, 430, 520, 524, 534, 538, 539, 540, 541, 545, 546, 547, 624, 706, 736, 852, 886, 887, 888, 889, 955, 962, 976, 995], "mous": [16, 362], "button": [16, 368, 376, 995], "prettenho": 16, "tkagg": 16, "backend": [16, 355, 381, 449, 876, 928, 930, 932, 962, 1007, 1012, 1013, 1014, 1015], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 309, 357, 371, 372, 377, 381, 405, 419, 423, 427, 428, 430, 431, 438, 440, 507, 514, 517, 518, 520, 527, 534, 535, 536, 537, 538, 539, 545, 546, 550, 551, 560, 561, 563, 583, 608, 611, 613, 614, 619, 631, 632, 635, 636, 637, 639, 645, 646, 652, 657, 673, 680, 721, 736, 748, 758, 759, 760, 780, 781, 814, 815, 816, 818, 826, 838, 844, 852, 880, 881, 882, 883, 884, 886, 887, 888, 889, 894, 909, 910, 912, 923, 951, 952, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 1004, 1005, 1009, 1019], "y_min": [16, 31, 34, 57, 89, 111, 117, 126, 137, 150, 230, 292, 300, 319, 330, 331, 616, 618], "y_max": [16, 31, 34, 57, 89, 111, 117, 126, 137, 150, 214, 230, 292, 300, 319, 330, 331, 616, 618], "x_min": [16, 31, 34, 52, 57, 89, 111, 117, 121, 126, 137, 150, 185, 230, 292, 300, 319, 330, 331], "x_max": [16, 31, 34, 52, 57, 89, 111, 117, 126, 137, 150, 230, 292, 300, 319, 330, 331], "notifi": [16, 553, 554, 555, 985, 1002, 1014], "regist": [16, 339, 374, 930, 932], "surfac": [16, 107, 132, 163, 188, 205, 322, 323, 343, 349, 400, 485, 534, 538, 545, 744, 886, 892, 956, 961, 976, 977, 978], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 172, 333, 433, 516, 620, 621, 624, 755, 757, 880, 881, 882, 883, 884, 960, 977], "kernel_map": 16, "hasattr": [16, 44, 55, 61, 81, 117, 214, 229, 292, 300, 339, 381, 922, 923, 1014], "decision_surfac": 16, "delta": [16, 396, 433], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 115, 134, 163, 249, 255, 257, 260, 272, 381, 397, 403, 483, 548, 608, 640, 646, 694, 777, 780, 781, 791, 805, 883, 951, 958, 962, 1011, 1012, 1013], "docstr": [16, 368, 370, 374, 381, 429, 442, 453, 680, 682, 905, 951, 962, 965, 966, 976, 1004, 1011, 1012, 1017, 1018], "set_xlim": [16, 31, 42, 59, 74, 79, 91, 114, 126, 161, 167, 194, 196, 201, 230, 241, 260, 262, 263, 281, 292, 298, 300, 301, 302, 303, 307, 335], "attributeerror": [16, 394, 540, 558, 922, 996, 1013, 1014, 1016], "get_tk_widget": 16, "pack": [16, 377, 1012], "fill": [16, 34, 117, 134, 168, 251, 281, 345, 381, 394, 398, 496, 508, 519, 521, 528, 568, 611, 890, 892, 952, 965, 978], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 65, 100, 104, 112, 121, 149, 180, 206, 281, 286, 289, 307, 308, 391, 393, 394, 399, 405, 433, 446, 502, 514, 517, 596, 597, 603, 622, 739, 746, 756, 836, 837, 855, 956, 958, 960, 964, 965, 966, 975, 976, 977, 995], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 214, 368, 374, 393, 517, 627, 633, 959, 983, 985, 1004, 1009, 1010, 1012, 1017, 1018, 1019], "isinst": [16, 117, 214, 381], "lineset": 16, "support_vector": [16, 324], "place": [16, 59, 226, 235, 280, 354, 366, 368, 369, 370, 373, 375, 382, 401, 403, 423, 427, 463, 464, 465, 496, 562, 571, 609, 611, 612, 748, 761, 775, 941, 942, 982, 1004, 1011, 1014, 1015, 1017], "circl": [16, 59, 99, 126, 127, 137, 222, 232, 283, 286, 293, 298, 300, 316, 347, 364, 372, 376, 393, 433, 443, 495, 503, 744, 977], "dash": [16, 33, 79, 109, 120, 130, 148, 151, 153, 166, 183, 188, 191, 197, 198, 205, 208, 209, 234, 256, 266, 328, 332, 976], "bone": [16, 209, 336], "rais": [16, 197, 232, 259, 302, 309, 368, 370, 372, 373, 374, 377, 379, 381, 387, 394, 397, 405, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 490, 514, 531, 540, 548, 554, 557, 558, 569, 570, 572, 584, 598, 610, 611, 613, 616, 617, 652, 677, 679, 680, 683, 690, 692, 693, 694, 695, 707, 709, 710, 718, 736, 758, 762, 763, 764, 767, 768, 769, 775, 776, 777, 780, 781, 783, 791, 801, 802, 803, 806, 811, 826, 828, 829, 834, 838, 843, 844, 852, 853, 857, 858, 859, 865, 881, 882, 883, 884, 893, 896, 898, 899, 901, 902, 919, 922, 946, 947, 948, 949, 962, 972, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "valueerror": [16, 232, 370, 374, 405, 449, 514, 558, 584, 598, 616, 652, 695, 811, 829, 838, 844, 858, 897, 901, 902, 947, 948, 949, 962, 972, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 229, 354, 355, 366, 368, 372, 374, 376, 384, 401, 489, 982, 997, 1006], "anchor": [16, 267], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 163, 174, 188, 205, 215, 232, 259, 321, 323, 326, 331, 337, 493, 639, 640, 647, 649, 655, 656, 657, 658, 878, 880, 882, 883, 976, 977], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 372, 639, 640, 647, 649, 657, 658, 659, 836, 837, 878, 972], "add_opt": 16, "action": [16, 309, 339, 367, 371, 372, 384, 972, 1014], "store": [16, 32, 53, 54, 69, 71, 80, 89, 142, 156, 172, 182, 185, 218, 226, 235, 246, 261, 265, 314, 341, 348, 354, 362, 363, 368, 370, 375, 376, 377, 379, 381, 394, 396, 398, 400, 401, 403, 404, 420, 422, 426, 431, 438, 450, 451, 454, 455, 456, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 489, 515, 516, 522, 530, 531, 536, 537, 544, 550, 551, 570, 591, 592, 608, 612, 613, 616, 619, 630, 631, 635, 641, 642, 643, 644, 647, 648, 654, 656, 657, 658, 659, 669, 670, 671, 673, 678, 679, 681, 682, 683, 761, 775, 776, 777, 783, 791, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 834, 850, 857, 859, 873, 874, 875, 898, 899, 933, 936, 952, 954, 958, 965, 974, 977, 978, 982, 988, 997, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "dest": [16, 311], "dump": [16, 17, 387, 468, 819, 820], "argv": [16, 229], "opt": [16, 366, 370], "arg": [16, 293, 369, 381, 398, 400, 407, 552, 553, 554, 555, 556, 557, 558, 559, 598, 680, 843, 958, 964, 965], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 318, 379], "classic": [17, 191, 221, 234, 241, 247, 365, 372, 395, 397, 398, 425, 428, 430, 440, 473, 481, 485, 491, 613, 614, 888, 889, 956, 958, 964, 991, 1004, 1005, 1009, 1018], "graph": [17, 25, 39, 44, 46, 65, 66, 156, 217, 253, 276, 278, 317, 354, 368, 371, 381, 390, 395, 404, 423, 426, 427, 433, 434, 438, 443, 444, 452, 453, 459, 492, 566, 567, 669, 672, 673, 676, 762, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 834, 874, 959, 962, 965, 967, 975, 978, 982, 986, 993, 996, 1004, 1011, 1012, 1014, 1017, 1019], "vertex": [17, 26, 434, 1017], "en": [17, 24, 376, 512, 518, 576, 617, 645, 649, 652, 666, 667, 676, 686, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 958, 962, 977, 978], "wiki": [17, 24, 374, 376, 576, 617, 649, 652, 676, 686, 821, 822, 827, 828, 829, 830, 857, 872, 886, 887, 958, 978], "eigenvector_centr": 17, "webpag": [17, 172, 368], "pagerank": 17, "insid": [17, 19, 26, 167, 198, 256, 316, 326, 356, 362, 363, 370, 374, 393, 401, 569, 570, 572, 858, 930, 969, 986], "accord": [17, 24, 26, 37, 49, 77, 120, 145, 149, 179, 196, 214, 229, 306, 340, 350, 368, 370, 379, 380, 381, 382, 390, 393, 395, 397, 398, 400, 401, 403, 419, 431, 433, 437, 441, 443, 446, 450, 485, 497, 498, 499, 506, 511, 513, 516, 517, 519, 521, 531, 534, 535, 542, 543, 544, 547, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 622, 623, 625, 626, 630, 639, 640, 651, 661, 672, 676, 715, 759, 760, 777, 778, 779, 780, 781, 784, 785, 786, 791, 800, 814, 815, 816, 817, 818, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 842, 849, 857, 868, 870, 871, 878, 879, 880, 881, 883, 884, 923, 956, 958, 962, 964, 965, 972, 975, 976, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "tradit": [17, 196, 211, 340, 356, 391, 400, 401, 613, 675, 958, 961, 986], "power_iter": 17, "martinsson": [17, 516, 522, 915], "dbpedia": 17, "content": [17, 303, 339, 341, 363, 372, 374, 387, 392, 401, 467, 484, 489, 490, 569, 570, 572, 652, 892, 971, 986, 997, 1005, 1014], "bz2": [17, 489, 490], "bz2file": 17, "pprint": [17, 121, 257, 363, 910], "randomized_svd": [17, 377, 432, 434, 513, 522, 525, 527, 1004, 1005, 1010, 1017, 1018, 1019], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 121, 160, 196, 294, 308, 353, 357, 371, 380, 780, 781, 963, 980, 983, 986, 989, 999, 1012, 1017, 1018], "wait": [17, 368, 372, 381, 647, 648, 649, 657, 659, 1016], "wb": 17, "index_map": 17, "setdefault": [17, 893], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 69, 257, 278, 306, 368, 372, 374, 376, 403, 409, 424, 425, 427, 428, 430, 445, 448, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 620, 621, 622, 623, 669, 670, 783, 803, 823, 828, 831, 835, 839, 845, 870, 871, 1010, 1011, 1017, 1019], "get_redirect": 17, "transit": [17, 372, 1015], "malform": [17, 1008], "1000000": [17, 517], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 65, 81, 97, 104, 115, 121, 166, 167, 192, 221, 228, 293, 298, 326, 339, 363, 370, 372, 380, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 409, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 502, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 604, 608, 609, 610, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 937, 943, 951, 957, 965, 966, 978, 986, 992, 993, 995, 996, 1016, 1017, 1018, 1019, 1020], "break": [17, 39, 46, 69, 80, 163, 185, 202, 243, 309, 315, 321, 337, 339, 341, 368, 370, 372, 374, 380, 393, 450, 493, 620, 754, 758, 761, 775, 852, 859, 863, 880, 883, 958, 961, 970, 972, 977, 983, 1004, 1005, 1011, 1012, 1014, 1016, 1020], "get_adjacency_matrix": 17, "resolv": [17, 367, 368, 372, 376, 382, 401, 433, 443, 672, 676, 915, 952, 962, 1011, 1013, 1014, 1017], "lil_matrix": 17, "float32": [17, 120, 220, 295, 311, 355, 363, 368, 370, 538, 539, 540, 541, 544, 545, 546, 547, 574, 575, 621, 622, 639, 743, 844, 886, 887, 888, 889, 896, 938, 939, 940, 978, 988, 997, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "del": [17, 374, 1016, 1017], "convert": [17, 34, 46, 48, 65, 70, 97, 153, 169, 196, 217, 237, 242, 243, 246, 247, 289, 354, 362, 377, 379, 381, 387, 401, 422, 425, 426, 428, 430, 431, 432, 433, 440, 445, 446, 477, 515, 522, 534, 535, 538, 539, 540, 541, 544, 545, 546, 547, 553, 562, 563, 569, 570, 571, 572, 574, 575, 587, 608, 609, 610, 611, 627, 633, 639, 640, 641, 643, 647, 649, 651, 655, 657, 658, 659, 673, 680, 758, 834, 843, 844, 846, 850, 852, 853, 854, 856, 878, 886, 887, 888, 889, 896, 898, 899, 921, 947, 948, 951, 958, 959, 960, 962, 972, 973, 977, 978, 997, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1019], "csr": [17, 341, 354, 362, 363, 377, 379, 381, 401, 404, 425, 428, 430, 431, 440, 478, 489, 504, 534, 535, 538, 539, 545, 546, 547, 611, 639, 673, 680, 695, 748, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 834, 842, 846, 848, 850, 851, 854, 857, 859, 861, 862, 863, 865, 868, 871, 886, 887, 888, 889, 894, 898, 899, 921, 925, 937, 938, 939, 940, 941, 942, 943, 965, 972, 976, 1004, 1005, 1010, 1012, 1013, 1019, 1020], "tocsr": 17, "convers": [17, 121, 187, 339, 350, 356, 362, 368, 370, 376, 379, 387, 401, 553, 834, 843, 851, 898, 899, 948, 959, 983, 986, 1012, 1013, 1014, 1017], "5m": 17, "ram": [17, 53, 356, 400, 870, 871, 964, 977, 997, 1010, 1016, 1019], "5000000": 17, "strongest": [17, 189], "highest": [17, 19, 26, 81, 141, 145, 254, 256, 267, 308, 339, 368, 379, 391, 397, 400, 402, 419, 536, 538, 545, 573, 576, 577, 579, 580, 581, 584, 585, 587, 616, 618, 706, 736, 772, 775, 777, 780, 781, 791, 875, 886, 917, 951, 958, 962, 963, 966, 976, 978, 1016], "centrality_scor": 17, "networkx": [17, 377], "copyright": [17, 81], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 365], "dan": [17, 1004, 1008, 1009, 1010, 1012, 1013], "schult": 17, "dschult": 17, "pieter": [17, 1010, 1011, 1018], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 104, 195, 229, 260, 341, 390, 404, 426, 504, 505, 512, 518, 523, 529, 569, 572, 666, 667, 680, 821, 822, 825, 827, 829, 830, 958, 962], "indptr": [17, 276, 348, 1012], "dangl": 17, "isclos": 17, "guess": [17, 117, 397, 400, 401, 459, 513, 519, 521, 522, 528, 962, 976], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 56, 61, 77, 78, 79, 81, 84, 85, 95, 96, 97, 102, 104, 112, 148, 149, 155, 156, 166, 177, 180, 188, 190, 191, 203, 230, 242, 243, 245, 246, 260, 322, 324, 354, 370, 374, 377, 381, 390, 398, 401, 514, 519, 521, 528, 571, 572, 595, 627, 628, 631, 633, 634, 635, 638, 641, 642, 643, 644, 662, 663, 664, 665, 668, 741, 743, 851, 890, 916, 960, 964, 972, 976, 977, 996, 1013], "converg": [17, 56, 60, 77, 78, 109, 119, 121, 148, 154, 157, 189, 198, 200, 204, 212, 244, 293, 294, 298, 303, 315, 356, 377, 381, 390, 393, 398, 401, 403, 405, 422, 425, 428, 429, 430, 433, 435, 440, 441, 442, 443, 452, 453, 459, 463, 464, 465, 514, 516, 517, 518, 519, 520, 527, 534, 552, 591, 625, 626, 627, 628, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 649, 653, 655, 657, 659, 663, 664, 668, 669, 671, 672, 675, 676, 775, 776, 828, 836, 837, 873, 874, 880, 952, 957, 958, 959, 961, 966, 976, 1004, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1019], "l_inf": 17, "scores_max": 17, "err": [17, 84, 98], "6f": [17, 98, 261, 717, 773], "concern": [18, 36, 76, 83, 87, 93, 107, 139, 147, 159, 163, 171, 174, 216, 240, 246, 273, 277, 291, 297, 313, 321, 338, 343, 354, 370, 392, 959, 974], "modul": [18, 36, 37, 49, 53, 76, 83, 87, 93, 94, 107, 139, 147, 157, 159, 163, 164, 171, 174, 211, 216, 217, 240, 249, 273, 277, 291, 293, 294, 297, 313, 321, 338, 343, 346, 362, 363, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 379, 381, 383, 384, 387, 390, 391, 392, 393, 396, 400, 401, 402, 404, 426, 484, 516, 560, 561, 640, 873, 907, 951, 956, 958, 960, 962, 963, 966, 968, 969, 972, 974, 976, 978, 979, 986, 991, 992, 997, 1005, 1006, 1007, 1009, 1010, 1014, 1016, 1018], "demo": [18, 22, 36, 67, 124, 163, 202, 246, 257, 265, 303, 339, 340, 370, 390, 393, 401, 422, 423, 426, 428, 429, 431, 432, 434, 436, 439, 483, 492, 493, 494, 522, 685, 686, 698, 700, 717, 771, 773, 840, 859], "spectral": [18, 22, 36, 44, 46, 49, 67, 163, 218, 219, 368, 401, 430, 432, 433, 434, 443, 450, 451, 452, 453, 454, 455, 456, 457, 469, 492, 494, 572, 669, 670, 671, 672, 673, 676, 700, 773, 965, 975, 998, 999, 1004, 1005], "twenti": [19, 229, 365, 390, 393, 997], "comp": [19, 84, 85, 97, 105, 295, 318, 339, 340, 341, 363, 997], "window": [19, 318, 363, 368, 370, 371, 401, 982, 1004, 1007, 1011, 1015, 1017, 1018], "misc": [19, 53, 97, 257, 318, 339, 340, 341, 363, 996], "categori": [19, 44, 61, 69, 70, 118, 128, 166, 167, 196, 204, 211, 234, 257, 293, 294, 300, 308, 311, 318, 339, 340, 341, 362, 363, 377, 392, 393, 394, 400, 401, 403, 469, 477, 478, 484, 542, 543, 629, 639, 640, 650, 661, 723, 738, 739, 815, 852, 853, 952, 958, 959, 960, 964, 970, 988, 997, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "noth": [19, 69, 339, 340, 373, 523, 569, 570, 572, 695, 842, 851, 899, 972], "frequenc": [19, 27, 148, 167, 190, 196, 229, 307, 308, 339, 340, 341, 363, 379, 391, 397, 398, 400, 401, 402, 532, 538, 540, 541, 542, 545, 569, 570, 571, 572, 585, 639, 640, 645, 647, 649, 655, 656, 657, 666, 667, 808, 843, 852, 878, 880, 883, 886, 888, 904, 958, 959, 964, 972, 976, 978, 1006, 1008, 1009, 1015], "dhillon": [19, 390, 432, 434, 492], "cut": [19, 43, 46, 64, 65, 219, 372, 379, 390, 393, 433, 434, 443, 569, 572, 672, 676, 972], "minibatchkmean": [19, 36, 44, 50, 60, 67, 163, 340, 356, 393, 398, 422, 424, 428, 493, 759, 1005, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020], "coclust": [19, 390, 432, 494], "4431": 19, "98": [19, 32, 34, 42, 44, 54, 61, 63, 81, 97, 225, 254, 292, 295, 300, 315, 365, 372, 397, 400, 640, 814, 957, 964, 992, 997], "3177": 19, "1961": 19, "4388": 19, "talk": [19, 69, 257, 339, 340, 341, 357, 363, 381, 387, 986, 989, 997], "polit": [19, 339, 363, 367, 958, 963], "gun": [19, 363], "sci": [19, 69, 339, 340, 341, 363, 379, 670, 674, 850, 959, 972, 997], "med": [19, 69, 265, 363, 972, 997], "geb": 19, "gordon": [19, 244, 1010, 1014, 1016, 1018], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1269": 19, "3558": 19, "soc": [19, 363, 997], "religion": [19, 257, 339, 340, 341, 363, 963, 997], "mideast": [19, 363], "alt": [19, 257, 318, 339, 340, 341, 363, 376, 997], "atheism": [19, 257, 318, 339, 340, 341, 363, 997], "god": [19, 339, 340, 997], "jesu": [19, 339, 340], "kent": 19, "belief": [19, 256, 835, 967], "christ": 19, "faith": [19, 154, 331], "moral": [19, 70, 339, 639, 1012, 1016, 1017], "2201": 19, "2747": 19, "mac": [19, 318, 363, 368, 689, 962], "hardwar": [19, 318, 341, 354, 355, 363, 366, 980, 982, 1018, 1019], "pc": [19, 318, 341, 363], "voltag": 19, "dsp": 19, "stereo": 19, "ship": [19, 128, 161, 345, 355, 366, 384, 401, 958, 1004, 1013], "1773": 19, "2620": 19, "rec": [19, 341, 363, 622], "motorcycl": [19, 363], "auto": [19, 33, 44, 45, 48, 56, 57, 59, 91, 94, 152, 179, 217, 218, 219, 220, 222, 234, 236, 276, 279, 284, 307, 308, 309, 310, 311, 322, 323, 329, 332, 333, 341, 362, 363, 368, 370, 400, 403, 404, 423, 426, 427, 428, 430, 431, 433, 438, 440, 443, 477, 489, 490, 516, 522, 525, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 574, 575, 578, 583, 588, 589, 610, 612, 613, 614, 616, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 683, 721, 780, 781, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 836, 837, 852, 853, 870, 871, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 914, 915, 928, 931, 953, 956, 958, 959, 965, 982, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "forsal": [19, 341, 363], "bike": [19, 969], "car": [19, 196], "dod": 19, "ride": 19, "helmet": 19, "bmw": 19, "201": [19, 27, 28, 120, 365, 565], "1175": 19, "turkish": 19, "armenia": 19, "armenian": 19, "turk": 19, "petch": 19, "sera": 19, "zuma": 19, "argic": 19, "gvg47": 19, "spectralcoclust": [19, 21, 390, 432, 1006, 1011, 1015], "v_measure_scor": [19, 37, 38, 49, 57, 340, 393, 698, 716, 717, 737, 962, 1013], "number_norm": 19, "token": [19, 341, 354, 363, 372, 401, 517, 569, 570, 571, 572, 1004, 1012, 1016], "placehold": [19, 372, 608, 609, 610, 611, 792, 793, 796, 797, 952], "begin": [19, 148, 251, 258, 274, 309, 339, 350, 368, 373, 374, 381, 390, 393, 400, 534, 535, 540, 542, 543, 647, 648, 657, 658, 659, 951, 958, 962, 972, 974, 976, 1012, 1018, 1019], "By": [19, 45, 94, 124, 125, 175, 265, 298, 306, 339, 355, 368, 374, 375, 381, 393, 394, 396, 397, 398, 399, 400, 402, 420, 423, 427, 431, 445, 448, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 505, 507, 530, 531, 538, 539, 540, 541, 545, 546, 566, 567, 569, 570, 572, 587, 590, 613, 614, 652, 654, 656, 658, 671, 673, 675, 678, 681, 683, 684, 699, 709, 710, 714, 718, 763, 764, 767, 772, 774, 780, 781, 825, 839, 840, 852, 853, 855, 857, 866, 868, 881, 882, 886, 887, 888, 889, 898, 899, 930, 951, 952, 954, 958, 962, 969, 972, 974, 978, 988, 992, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018], "isdigit": [19, 401], "numbernormalizingvector": 19, "build_token": [19, 401, 569, 570, 572], "super": [19, 25, 27, 370, 401, 1012], "sport": [19, 363], "basebal": [19, 363], "hockei": [19, 363], "crypt": [19, 363], "electron": [19, 363, 365, 519, 521, 528, 608], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 94, 310, 340, 368, 381, 393, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 441, 442, 443, 444, 492, 494, 996, 1004, 1008, 1010, 1012, 1013, 1015, 1018], "svd_method": [19, 432, 434, 513, 1007], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 56, 57, 60, 67, 163, 244, 247, 301, 310, 340, 377, 393, 422, 425, 429, 430, 433, 443, 493, 770, 771, 775, 776, 844, 965, 972, 983, 996, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "20000": [19, 96], "n_init": [19, 42, 43, 44, 45, 48, 50, 56, 57, 59, 60, 63, 94, 217, 218, 219, 220, 307, 310, 340, 393, 425, 428, 430, 432, 433, 434, 440, 443, 671, 675, 775, 776, 996, 1004, 1012, 1018, 1019], "y_coclust": 19, "row_labels_": [19, 20, 21, 390, 432, 434], "y_kmean": 19, "fit_predict": [19, 55, 56, 59, 225, 283, 370, 381, 393, 411, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 450, 544, 658, 775, 776, 825, 831, 839, 882, 968, 1009, 1012, 1013, 1017, 1019], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 58, 62, 63, 69, 129, 217, 234, 335, 492, 494], "get_indic": [19, 408, 432, 434], "float_info": 19, "row_compl": 19, "logical_not": [19, 63, 104, 199], "rows_": [19, 390, 408, 432, 434], "col_compl": 19, "columns_": [19, 390, 408, 432, 434], "ident": [19, 63, 120, 191, 196, 214, 225, 229, 319, 339, 363, 370, 381, 390, 393, 394, 395, 397, 403, 406, 420, 421, 433, 445, 446, 454, 456, 457, 460, 461, 462, 469, 484, 532, 540, 541, 545, 546, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 624, 660, 661, 680, 685, 686, 716, 765, 773, 779, 782, 792, 793, 794, 796, 797, 821, 822, 828, 836, 837, 843, 844, 856, 867, 886, 887, 955, 956, 959, 962, 965, 966, 977, 1008, 1012, 1013, 1014, 1018], "most_common": 19, "counter": [19, 393, 657, 658, 659, 1017], "itemgett": 19, "revers": [19, 74, 145, 201, 256, 515, 522, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 769, 839, 962, 1004, 1005, 1014, 1016, 1020], "best_idx": [19, 255], "get_shap": [19, 408, 432, 434], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 57], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "212": [19, 22, 120, 261, 317, 365, 450, 481, 968, 995], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 390, 432, 434, 492, 494], "make_checkerboard": [20, 492, 1006], "rearrang": [20, 21, 390], "outer": [20, 99, 261, 316, 432, 495, 621, 631, 632, 635, 954, 1005], "product": [20, 70, 94, 129, 148, 153, 167, 350, 354, 370, 371, 374, 377, 387, 390, 398, 400, 432, 519, 521, 528, 563, 570, 571, 572, 594, 595, 614, 621, 645, 646, 666, 667, 741, 743, 755, 757, 851, 854, 870, 871, 916, 951, 954, 958, 960, 972, 974, 976, 977, 982, 986, 1012], "consensu": [20, 21, 37, 367, 368, 382, 390, 393, 630, 652, 659, 660, 700, 962], "kemaleren": [20, 21], "spectralbiclust": [20, 390, 434, 1006, 1010, 1011, 1015], "consensus_scor": [20, 21, 390, 1006], "matshow": [20, 21, 65, 116, 143, 294, 483], "row_idx": [20, 21, 196], "permut": [20, 21, 37, 80, 116, 122, 137, 163, 164, 170, 212, 249, 272, 383, 388, 393, 400, 445, 477, 481, 485, 540, 541, 545, 546, 608, 611, 615, 660, 685, 686, 698, 716, 717, 735, 737, 773, 794, 796, 804, 805, 839, 853, 883, 886, 887, 915, 931, 933, 936, 962, 976, 992, 995, 999, 1004, 1010, 1017, 1019], "col_idx": [20, 21], "biclusters_": [20, 21, 408, 432, 434], "1f": [20, 30, 50, 53, 97, 176, 196, 229, 241, 243, 263, 306, 340, 341], "fit_data": [20, 21], "column_labels_": [20, 21, 390, 432, 434], "543": [20, 22], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 357, 401, 408, 430, 432, 434, 469, 492, 494, 572, 700, 773, 962, 998, 999, 1006, 1010, 1011], "make_biclust": [21, 494, 1006], "implant": 21, "354": [21, 22, 340], "plot_spectral_coclust": [21, 22], "109": [22, 24, 53, 97, 278, 290, 963, 1006], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 74, 91, 107, 108, 109, 129, 132, 140, 147, 148, 149, 150, 158, 163, 166, 217, 221, 226, 229, 256, 259, 262, 263, 266, 298, 302, 306, 308, 317, 319, 354, 357, 363, 364, 370, 374, 379, 381, 393, 397, 398, 401, 402, 403, 417, 418, 419, 420, 421, 428, 430, 485, 493, 496, 504, 508, 530, 531, 532, 534, 536, 538, 540, 542, 543, 545, 548, 550, 551, 574, 575, 591, 594, 595, 603, 608, 613, 614, 639, 640, 652, 657, 673, 679, 681, 683, 684, 687, 688, 690, 693, 697, 701, 706, 707, 709, 719, 720, 721, 722, 736, 762, 764, 767, 768, 769, 772, 775, 776, 777, 780, 781, 791, 804, 805, 808, 810, 811, 814, 815, 816, 817, 818, 821, 824, 829, 835, 836, 871, 872, 873, 874, 875, 878, 880, 883, 886, 888, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 972, 974, 975, 976, 978, 983, 984, 985, 997, 999, 1004, 1006, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1018], "confid": [24, 25, 26, 27, 153, 155, 242, 256, 259, 317, 382, 391, 403, 617, 639, 640, 647, 649, 652, 655, 656, 657, 679, 683, 688, 701, 706, 707, 719, 720, 736, 769, 807, 846, 878, 880, 883, 958, 961, 962, 963, 968, 975, 976, 977, 986, 997, 1014], "being": [24, 27, 45, 52, 81, 85, 89, 99, 113, 125, 148, 153, 166, 168, 172, 190, 250, 256, 302, 303, 326, 339, 341, 366, 367, 368, 370, 372, 373, 379, 381, 382, 387, 393, 395, 397, 400, 401, 402, 403, 404, 406, 423, 424, 426, 427, 431, 437, 450, 456, 474, 504, 550, 621, 630, 637, 653, 655, 668, 671, 675, 693, 699, 714, 716, 763, 769, 775, 819, 820, 825, 827, 829, 830, 831, 854, 871, 916, 951, 952, 958, 961, 962, 965, 968, 969, 970, 972, 974, 976, 977, 978, 1004, 1005, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019], "postprocess": [24, 391, 516, 522], "brier": [24, 25, 391, 690], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 360, 400, 419, 433, 516, 542, 601, 620, 624, 745, 754, 757, 836, 837, 880, 881, 882, 883, 884, 967, 977, 995, 999, 1017], "isoton": [24, 25, 163, 224, 239, 357, 419, 638, 901, 984, 999, 1005, 1006, 1007, 1008, 1010, 1017, 1020], "belong": [24, 27, 59, 234, 256, 306, 316, 362, 363, 390, 391, 393, 396, 397, 400, 408, 422, 425, 428, 429, 430, 432, 434, 504, 693, 711, 784, 790, 800, 826, 846, 958, 961, 962, 964, 965, 966, 968, 977, 982, 988, 995], "mblondel": [24, 48, 187, 218, 257, 339, 362, 489], "telecom": [24, 25, 42, 225, 986], "balaz": [24, 1008], "kegl": [24, 1008], "jhm": [24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231], "informatik": [24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231, 962], "uni": [24, 25, 26, 27, 73, 113, 148, 149, 151, 152, 153, 154, 155, 157, 187, 230, 231, 316, 334], "bremen": [24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231], "style": [24, 26, 80, 121, 185, 204, 214, 260, 368, 375, 393, 401, 425, 428, 440, 681, 783, 898, 899, 1004, 1007, 1018], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 58, 59, 61, 62, 63, 90, 188, 208, 225, 244, 301, 307, 310, 324, 327, 328, 335, 364, 370, 371, 400, 496, 1012, 1015, 1018], "50000": 24, "n_bin": [24, 25, 27, 53, 196, 214, 299, 301, 420, 421, 844, 972], "calibration_curv": [24, 391, 419, 420, 1013, 1018], "blob": [24, 33, 42, 44, 56, 61, 63, 90, 393, 429, 493, 1009], "sample_weight": [24, 177, 196, 209, 214, 307, 336, 368, 381, 393, 400, 404, 410, 414, 419, 425, 426, 428, 430, 440, 446, 450, 463, 464, 465, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 591, 592, 615, 616, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 678, 679, 681, 683, 684, 688, 689, 690, 693, 694, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 715, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 762, 763, 764, 765, 767, 768, 769, 772, 774, 777, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 824, 826, 829, 830, 836, 837, 839, 844, 858, 859, 873, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 950, 962, 976, 977, 978, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "sw_train": [24, 307], "sw_test": [24, 307], "calibratedclassifiercv": [24, 25, 26, 350, 381, 391, 657, 951, 977, 983, 1008, 1010, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "brier_score_loss": [24, 25, 391, 962, 1012, 1013, 1014], "gaussiannb": [24, 25, 27, 31, 130, 258, 350, 391, 400, 419, 550, 814, 815, 816, 818, 840, 956, 963, 964, 1008, 1009, 1010, 1012, 1017, 1020], "With": [24, 34, 44, 66, 74, 99, 119, 141, 163, 167, 196, 198, 224, 226, 231, 232, 238, 239, 256, 280, 354, 357, 363, 368, 370, 381, 393, 394, 397, 400, 402, 419, 421, 482, 563, 613, 614, 639, 748, 837, 840, 842, 853, 859, 885, 887, 955, 958, 959, 962, 963, 965, 966, 969, 976, 978, 988, 989, 996, 1001, 1007, 1011, 1012, 1014, 1016, 1018], "itself": [24, 49, 121, 124, 167, 194, 237, 265, 276, 326, 340, 354, 356, 367, 368, 370, 372, 381, 392, 393, 404, 422, 423, 426, 427, 450, 451, 452, 453, 454, 455, 456, 457, 508, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 532, 547, 550, 564, 573, 576, 577, 579, 580, 581, 583, 584, 620, 621, 622, 623, 624, 626, 636, 670, 672, 770, 771, 814, 815, 816, 817, 818, 819, 820, 824, 832, 833, 844, 845, 846, 873, 874, 954, 958, 959, 961, 965, 966, 970, 982, 1008, 1019], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 126, 130, 149, 150, 151, 152, 265, 292, 300, 303, 306, 308, 339, 370, 375, 381, 391, 392, 400, 419, 420, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 550, 574, 575, 591, 600, 601, 603, 604, 612, 613, 614, 639, 640, 657, 679, 681, 683, 721, 722, 768, 775, 776, 777, 780, 781, 791, 800, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 829, 836, 839, 846, 873, 874, 875, 880, 883, 886, 888, 958, 962, 964, 966, 969, 975, 976, 977, 978, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 111, 123, 188, 202, 204, 205, 315, 331, 334, 345, 365, 376, 379, 384, 393, 455, 540, 541, 571, 572, 616, 626, 645, 657, 659, 666, 667, 775, 958], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 186, 215], "y_uniqu": 24, "rainbow": [24, 219], "this_i": [24, 202], "this_x": [24, 194, 202, 995], "this_sw": 24, "lexsort": 24, "51": [24, 71, 75, 91, 153, 214, 276, 393, 394, 761, 957, 958, 1000], "uncalibr": [24, 25, 26, 419], "gnb": [24, 25, 27, 130, 400, 550, 964], "377": [24, 28, 130, 132], "plot_calibr": [24, 28], "reliabl": [25, 27, 391, 397, 420, 421, 627, 978, 986], "diagram": [25, 27, 70, 236, 307, 391, 393, 420, 421, 449, 876, 1015, 1016], "redund": [25, 27, 105, 144, 242, 247, 350, 364, 367, 368, 373, 381, 391, 496, 615, 983, 997, 1016], "uninform": [25, 27, 364, 373, 401, 951, 958, 1012], "rest": [25, 30, 118, 122, 163, 174, 211, 215, 244, 306, 318, 323, 374, 381, 392, 403, 493, 591, 625, 639, 640, 657, 734, 768, 807, 808, 809, 828, 878, 880, 883, 958, 962, 963, 966, 969, 977, 986, 1008, 1009, 1018, 1019], "make_classif": [25, 27, 31, 90, 113, 114, 115, 119, 142, 144, 253, 259, 267, 268, 286, 292, 300, 306, 308, 334, 350, 364, 371, 389, 419, 420, 493, 534, 536, 538, 545, 647, 678, 679, 681, 683, 803, 809, 836, 839, 878, 951, 962, 963, 972, 977, 1010, 1011, 1012, 1014], "100_000": [25, 27, 166], "n_inform": [25, 27, 31, 90, 113, 115, 142, 144, 175, 199, 253, 259, 269, 286, 292, 300, 306, 334, 370, 373, 496, 505, 534, 535, 536, 537, 545, 546, 646, 809, 963, 1012], "n_redund": [25, 27, 31, 90, 115, 142, 144, 253, 259, 286, 292, 300, 373, 419, 496, 534, 536, 545, 809], "logisticregress": [25, 27, 30, 70, 72, 114, 130, 136, 144, 179, 186, 187, 188, 189, 203, 211, 212, 226, 227, 236, 238, 259, 265, 274, 295, 300, 306, 307, 308, 309, 310, 339, 354, 368, 370, 374, 376, 380, 391, 394, 400, 402, 420, 548, 550, 578, 612, 615, 624, 633, 640, 653, 654, 655, 656, 657, 668, 681, 768, 791, 810, 811, 813, 863, 864, 866, 867, 868, 869, 885, 910, 958, 962, 963, 972, 976, 977, 993, 995, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "baselin": [25, 118, 121, 131, 145, 175, 214, 266, 274, 308, 340, 365, 393, 402, 532, 533, 615, 962, 965, 997], "regular": [25, 36, 67, 70, 72, 78, 99, 107, 132, 155, 160, 163, 174, 175, 176, 181, 183, 184, 185, 187, 196, 210, 214, 215, 231, 242, 250, 257, 260, 269, 281, 282, 291, 294, 295, 296, 303, 321, 323, 325, 326, 327, 337, 339, 341, 344, 354, 368, 379, 380, 391, 393, 395, 396, 398, 399, 400, 403, 419, 425, 428, 452, 457, 459, 460, 461, 462, 485, 493, 495, 496, 501, 503, 505, 509, 519, 520, 521, 524, 528, 529, 531, 540, 542, 543, 569, 570, 572, 619, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 674, 715, 721, 730, 775, 776, 794, 805, 806, 836, 837, 840, 859, 878, 879, 880, 881, 883, 884, 885, 951, 952, 954, 955, 956, 959, 961, 967, 968, 972, 975, 976, 977, 984, 986, 992, 993, 995, 999, 1004, 1005, 1006, 1008, 1009, 1013, 1014, 1016, 1017], "logist": [25, 27, 30, 68, 70, 75, 114, 136, 163, 174, 215, 226, 238, 274, 295, 303, 310, 339, 381, 382, 391, 394, 400, 402, 403, 419, 470, 477, 483, 485, 493, 522, 540, 542, 552, 591, 627, 638, 639, 640, 647, 649, 657, 721, 777, 791, 805, 835, 836, 837, 839, 859, 885, 901, 903, 962, 966, 967, 976, 977, 984, 986, 993, 999, 1008, 1011, 1012, 1014, 1015], "guid": [25, 68, 94, 157, 163, 166, 167, 184, 217, 263, 282, 283, 286, 306, 307, 308, 309, 310, 311, 357, 366, 367, 368, 373, 374, 375, 380, 381, 382, 392, 394, 400, 404, 405, 406, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 911, 963, 990, 997, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014], "gridspec": [25, 27, 64, 241, 375], "calibrationdisplai": [25, 27, 391, 1017, 1018], "lr": [25, 27, 114, 130, 131, 199, 211, 227, 228, 252, 259, 380, 400, 549, 550, 551, 693], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 331], "dark2": [25, 27, 218], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 196, 229, 262, 281, 298, 308, 391, 540, 541, 542, 543, 623, 738, 739, 954, 960, 972, 984, 998, 999, 1016, 1019], "grid_posit": [25, 27], "y_prob": [25, 27, 151, 420, 421, 690, 810, 836, 962, 1018], "poorli": [25, 61, 77, 85, 112, 123, 221, 355, 393, 400, 509, 611, 958, 959, 1010], "violat": [25, 326, 376, 379, 381, 616, 902, 969, 976, 978], "independ": [25, 27, 37, 46, 95, 96, 98, 114, 117, 155, 167, 233, 256, 259, 261, 265, 274, 298, 306, 340, 350, 354, 355, 364, 370, 372, 380, 381, 384, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 405, 430, 445, 469, 484, 496, 497, 498, 499, 501, 513, 514, 516, 518, 520, 521, 527, 528, 532, 533, 585, 588, 589, 606, 621, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 653, 654, 655, 656, 685, 686, 698, 716, 717, 735, 737, 773, 779, 804, 808, 810, 812, 813, 851, 855, 856, 857, 859, 862, 863, 864, 865, 867, 868, 869, 872, 880, 881, 882, 883, 884, 909, 951, 954, 956, 958, 959, 962, 963, 964, 967, 969, 972, 977, 978, 998, 999, 1004, 1005, 1010, 1012, 1014, 1019], "overli": [25, 26, 185, 261, 350, 398, 962], "typic": [25, 27, 98, 109, 172, 196, 214, 231, 258, 259, 263, 265, 266, 282, 283, 308, 326, 340, 354, 361, 362, 363, 366, 370, 371, 377, 380, 381, 391, 392, 393, 394, 397, 398, 400, 401, 403, 425, 428, 430, 477, 532, 534, 536, 537, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 610, 619, 621, 624, 635, 636, 637, 652, 663, 664, 693, 846, 857, 914, 915, 947, 951, 955, 958, 959, 961, 962, 963, 964, 968, 970, 986, 997, 1013, 1017, 1020], "transpos": [25, 84, 256, 405, 507, 519, 521, 528, 641, 642, 643, 644, 768, 915, 948, 962, 974, 996, 1004, 1018], "nearli": [25, 259, 363, 381, 392, 744, 962, 965, 974, 997], "albeit": 25, "strongli": [25, 27, 81, 85, 97, 118, 122, 166, 178, 211, 262, 339, 368, 383, 384, 391, 400, 639, 716, 773, 958, 959, 999, 1013], "plenti": 25, "greater": [25, 91, 111, 166, 213, 230, 244, 262, 274, 282, 283, 344, 354, 364, 373, 381, 391, 393, 396, 400, 423, 427, 430, 433, 444, 453, 517, 522, 538, 539, 540, 541, 542, 543, 545, 546, 547, 574, 575, 578, 591, 592, 609, 621, 623, 626, 645, 647, 648, 652, 657, 658, 659, 673, 690, 693, 701, 715, 716, 719, 722, 768, 773, 775, 776, 809, 821, 822, 829, 830, 836, 837, 842, 857, 868, 872, 875, 886, 887, 888, 889, 915, 931, 951, 957, 958, 959, 962, 963, 968, 972, 977, 978, 1007, 1012, 1015, 1017, 1018, 1019], "exploit": [25, 274, 963, 983, 1007], "precision_scor": [25, 263, 689, 767, 962, 1004, 1006, 1007, 1008, 1009, 1014], "recall_scor": [25, 263, 397, 689, 764, 962, 1004, 1006, 1007, 1008, 1009, 1014], "f1_score": [25, 263, 318, 363, 718, 962, 1004, 1006, 1007, 1008, 1009, 1013, 1014], "log_loss": [25, 26, 120, 123, 149, 303, 318, 339, 381, 400, 538, 540, 542, 545, 627, 657, 886, 888, 951, 958, 962, 976, 1006, 1008, 1010, 1018, 1019, 1020], "roc_auc_scor": [25, 256, 265, 306, 683, 687, 688, 689, 769, 962, 1006, 1007, 1012, 1014, 1018, 1019], "score_nam": [25, 37, 231, 258, 340, 783], "score_df": 25, "set_index": [25, 121, 153, 185, 214, 256, 340], "decim": [25, 154, 452, 453, 891, 1011, 1012], "098921": 25, "323178": 25, "872009": 25, "851408": 25, "861586": 25, "863157": 25, "117608": 25, "782755": 25, "857400": 25, "875941": 25, "866571": 25, "865055": 25, "098332": 25, "370738": 25, "883065": 25, "836224": 25, "859007": 25, "862690": 25, "108880": 25, "368896": 25, "861106": 25, "871277": 25, "866161": 25, "865300": 25, "refin": [25, 81, 391, 453, 690, 962, 997], "alter": [25, 161, 370, 381, 709, 710, 718, 763, 764, 767, 1009, 1013, 1016], "uncertainti": [25, 148, 155, 175, 258, 393, 548, 549, 624, 839, 952, 974], "linearsvc": [25, 27, 69, 71, 141, 142, 163, 172, 230, 253, 255, 263, 300, 306, 321, 323, 334, 337, 339, 354, 370, 374, 391, 401, 402, 419, 493, 548, 558, 620, 624, 633, 653, 654, 655, 656, 657, 668, 715, 722, 802, 807, 879, 880, 883, 885, 958, 962, 963, 1004, 1005, 1006, 1010, 1012, 1015], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 214, 228, 298, 326, 616, 657, 721, 849, 972, 1008, 1015, 1016], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 130, 419, 886, 888], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 66, 99, 166, 167, 185, 263, 381, 391, 395, 397, 402, 425, 428, 430, 450, 519, 521, 528, 544, 693, 825, 882, 1004], "behavior": [25, 27, 37, 39, 52, 160, 163, 166, 167, 196, 214, 247, 249, 259, 272, 294, 298, 300, 326, 350, 355, 362, 365, 368, 370, 372, 376, 377, 381, 391, 393, 397, 401, 517, 532, 547, 647, 648, 649, 657, 658, 659, 682, 709, 710, 763, 764, 767, 778, 779, 782, 794, 795, 796, 797, 798, 816, 852, 951, 958, 963, 968, 972, 986, 988, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hing": [25, 203, 206, 208, 264, 323, 324, 328, 381, 647, 657, 715, 878, 885, 958, 976, 977, 997], "focus": [25, 77, 185, 363, 379, 400, 959, 972, 982], "far": [25, 59, 81, 118, 149, 155, 166, 196, 214, 326, 339, 341, 368, 377, 403, 701, 859, 937, 967, 968, 977, 986, 995], "awai": [25, 26, 27, 59, 77, 117, 148, 149, 153, 199, 331, 363, 391, 403, 609, 821, 822, 829, 830, 961, 962, 977, 995], "shown": [25, 48, 56, 88, 109, 111, 121, 157, 165, 167, 186, 194, 214, 222, 225, 230, 243, 256, 259, 262, 265, 281, 293, 294, 298, 299, 300, 314, 339, 340, 368, 373, 382, 393, 394, 397, 398, 399, 401, 403, 420, 441, 613, 679, 681, 682, 683, 694, 777, 791, 890, 892, 957, 958, 959, 962, 965, 970, 972, 976, 977, 978, 997, 1008, 1013, 1014, 1015, 1018], "varieti": [25, 160, 243, 326, 376, 379, 392, 393, 395, 400, 401, 624, 965, 978, 982, 986, 1006, 1019], "niculescu": [25, 27, 391, 419, 421], "mizil": [25, 27, 391, 419, 421], "caruana": [25, 27, 391, 419, 421], "144944": 25, "465663": 25, "872201": 25, "851772": 25, "861865": 25, "863420": 25, "099827": 25, "377027": 25, "853032": 25, "878041": 25, "865356": 25, "863306": 25, "098760": 25, "321306": 25, "873706": 25, "848743": 25, "861044": 25, "862967": 25, "deal": [25, 56, 70, 160, 166, 221, 341, 368, 373, 392, 394, 401, 402, 403, 455, 477, 684, 689, 743, 767, 845, 915, 958, 986, 994, 1007, 1019], "situat": [25, 44, 56, 71, 165, 166, 202, 225, 259, 368, 376, 395, 397, 398, 400, 509, 515, 563, 852, 855, 866, 956, 958, 964, 965, 975, 978, 1012], "supervis": [25, 27, 37, 49, 54, 57, 85, 103, 114, 136, 137, 218, 232, 243, 256, 285, 308, 317, 320, 340, 354, 357, 363, 370, 380, 381, 391, 393, 396, 397, 398, 400, 401, 403, 419, 421, 445, 469, 484, 485, 534, 569, 571, 574, 575, 615, 657, 709, 778, 779, 782, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 828, 838, 839, 843, 873, 874, 875, 883, 956, 959, 962, 964, 965, 968, 973, 977, 978, 979, 982, 983, 985, 988, 989, 991, 997, 999, 1004, 1010, 1016], "icml": [25, 27, 391, 393, 401, 419, 421, 814, 816, 835, 962, 964, 976, 981], "2005": [25, 27, 80, 365, 391, 419, 421, 828, 958, 965, 975], "plot_calibration_curv": [25, 28], "simplex": [26, 651, 775, 854], "arrow": [26, 1018], "green": [26, 34, 80, 91, 112, 125, 130, 148, 172, 222, 293, 299, 303, 307, 381, 963, 1012, 1013, 1015, 1016], "600": [26, 50, 127, 128, 279, 290, 363, 661], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 58, 59, 61, 62, 63, 208, 225, 244, 301, 328, 493], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 55, 113, 114, 115, 116, 117, 130, 168, 169, 236, 237, 253, 268, 306, 308, 339, 350, 380, 381, 391, 400, 402, 538, 539, 540, 542, 547, 548, 550, 780, 781, 809, 888, 951, 963, 986, 1001, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "concaten": [26, 39, 50, 60, 68, 75, 80, 111, 124, 156, 163, 175, 178, 218, 225, 234, 241, 245, 246, 252, 263, 265, 266, 281, 295, 302, 315, 339, 394, 445, 448, 485, 490, 512, 518, 522, 523, 580, 761, 777, 838, 839, 841, 844, 852, 883, 963, 992, 1005], "randomforestclassifierrandomforestclassifi": [26, 115, 116, 168, 236, 268], "cal_clf": 26, "prefit": [26, 381, 391, 402, 419, 548, 549, 578, 983, 1016, 1017, 1018], "x27": [26, 70, 71, 108, 114, 128, 131, 142, 166, 167, 168, 226, 227, 235, 236, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 316], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "perfect": [26, 37, 69, 80, 97, 99, 192, 196, 339, 340, 368, 372, 393, 397, 534, 535, 671, 675, 685, 686, 689, 698, 706, 708, 711, 717, 723, 736, 737, 765, 766, 773, 958, 962, 965, 977, 986, 995, 1018], "ro": 26, "bo": [26, 1016], "unit": [26, 69, 79, 166, 172, 196, 214, 281, 294, 298, 340, 363, 368, 369, 370, 374, 376, 377, 398, 401, 405, 445, 470, 471, 500, 505, 513, 514, 515, 522, 523, 570, 571, 572, 592, 639, 640, 657, 666, 680, 750, 826, 835, 836, 837, 843, 849, 851, 855, 857, 859, 864, 865, 866, 868, 869, 878, 879, 958, 960, 961, 967, 972, 978, 982, 995, 1008, 1012, 1018, 1019], "mid": [26, 326, 962, 964], "frac": [26, 79, 80, 256, 263, 265, 309, 390, 391, 393, 395, 398, 399, 400, 401, 403, 414, 444, 446, 463, 464, 465, 535, 537, 539, 541, 543, 546, 549, 551, 592, 596, 600, 603, 604, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 659, 660, 661, 677, 735, 749, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 954, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 969, 970, 972, 974, 976, 977, 978, 995], "shrink": [26, 81, 94, 122, 167, 191, 194, 217, 245, 298, 398, 540, 541, 657, 659, 826, 836, 837, 880, 881, 882, 883, 884, 965, 977, 995], "perfectli": [26, 37, 259, 270, 383, 393, 400, 420, 548, 587, 685, 686, 696, 698, 716, 717, 737, 766, 773, 852, 957, 959, 962, 977, 1017, 1018], "incur": [26, 600, 878, 977, 1012], "correct": [26, 27, 56, 80, 156, 166, 185, 196, 214, 241, 250, 256, 263, 265, 326, 328, 339, 350, 365, 368, 370, 372, 382, 391, 392, 393, 397, 398, 401, 431, 437, 450, 455, 469, 482, 484, 616, 648, 657, 659, 684, 685, 689, 693, 694, 699, 702, 703, 704, 708, 709, 710, 714, 718, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 763, 764, 765, 767, 772, 774, 807, 808, 809, 816, 824, 850, 947, 958, 962, 963, 977, 988, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "decreas": [26, 39, 46, 57, 65, 74, 125, 144, 156, 166, 167, 180, 204, 228, 229, 258, 263, 269, 292, 300, 303, 306, 344, 354, 356, 368, 391, 393, 400, 423, 427, 444, 502, 515, 516, 522, 538, 539, 540, 541, 542, 543, 545, 546, 547, 583, 616, 617, 618, 657, 658, 659, 687, 693, 707, 762, 769, 836, 837, 886, 887, 888, 889, 951, 953, 958, 959, 962, 965, 966, 969, 970, 976, 977, 986, 995, 1006, 1011, 1014, 1017], "cal_scor": 26, "327": [26, 710, 995], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 130], "p2": [26, 130, 214], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 391, 419], "this_p": 26, "sure": [26, 55, 189, 202, 232, 350, 354, 355, 362, 366, 367, 368, 369, 370, 372, 373, 376, 379, 391, 394, 401, 474, 504, 630, 898, 899, 909, 948, 952, 959, 976, 982, 983, 1011, 1012, 1014, 1019], "renorm": 26, "step": [26, 33, 42, 54, 57, 66, 69, 70, 71, 72, 73, 80, 85, 97, 102, 114, 117, 118, 128, 142, 143, 144, 150, 153, 166, 168, 196, 204, 214, 226, 227, 230, 235, 238, 247, 254, 257, 263, 265, 276, 278, 284, 292, 295, 300, 303, 307, 310, 319, 322, 326, 340, 341, 344, 350, 354, 357, 363, 366, 367, 368, 370, 372, 373, 376, 379, 381, 390, 391, 393, 395, 396, 398, 400, 401, 402, 424, 428, 430, 517, 518, 519, 520, 527, 544, 569, 570, 572, 574, 575, 578, 587, 608, 625, 629, 647, 648, 650, 657, 659, 660, 661, 675, 681, 775, 776, 777, 780, 781, 791, 811, 812, 813, 835, 836, 837, 839, 840, 842, 878, 879, 880, 881, 883, 884, 914, 915, 933, 937, 952, 958, 961, 966, 967, 972, 976, 978, 979, 982, 985, 993, 997, 1004, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1020], "multiclass": [26, 30, 163, 174, 215, 232, 249, 263, 266, 272, 274, 323, 335, 357, 363, 364, 370, 371, 373, 381, 393, 400, 419, 433, 443, 470, 485, 540, 542, 548, 549, 552, 575, 583, 591, 612, 613, 614, 639, 640, 647, 649, 654, 655, 656, 657, 687, 689, 709, 710, 714, 715, 718, 723, 734, 763, 764, 767, 768, 769, 772, 777, 778, 780, 781, 782, 783, 791, 795, 799, 800, 801, 802, 803, 804, 805, 806, 846, 878, 880, 883, 956, 958, 973, 977, 978, 984, 985, 997, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1019, 1020], "argmax": [26, 102, 255, 269, 370, 400, 550, 807, 886, 977, 1017], "844": [26, 28, 400, 536, 537], "plot_calibration_multiclass": [26, 28], "gave": [27, 391, 777, 780, 781, 791, 846], "four": [27, 141, 156, 172, 178, 197, 243, 244, 315, 323, 364, 368, 381, 538, 545, 700, 886, 888, 904, 958, 960, 961, 962, 972, 981], "naiv": [27, 31, 126, 256, 258, 339, 341, 357, 363, 400, 401, 419, 525, 814, 815, 816, 817, 818, 956, 957, 965, 984, 999, 1004, 1005, 1006, 1007, 1012, 1014, 1017, 1019], "bay": [27, 31, 112, 126, 148, 185, 246, 258, 339, 357, 363, 398, 400, 401, 403, 517, 530, 531, 637, 814, 815, 816, 817, 818, 956, 957, 958, 984, 997, 999, 1004, 1005, 1006, 1007, 1012, 1014, 1017, 1019], "train_sampl": [27, 211, 212], "against": [27, 37, 85, 104, 112, 122, 140, 172, 187, 188, 205, 213, 265, 306, 326, 363, 368, 382, 391, 393, 397, 401, 420, 490, 523, 529, 532, 657, 659, 735, 737, 768, 779, 784, 786, 804, 808, 928, 954, 958, 962, 963, 965, 977, 981, 988], "rfc": [27, 237, 306, 1001], "circleci": [27, 84, 111, 152, 154, 156, 157, 188, 205, 331, 345, 368], "1148": 27, "userwarn": [27, 44, 61, 111, 157, 188, 205, 331, 345, 373, 693, 972, 1010, 1012, 1017], "redundantli": [27, 381], "keyword": [27, 339, 362, 368, 370, 373, 375, 381, 393, 404, 407, 420, 426, 427, 431, 433, 438, 445, 448, 484, 516, 519, 521, 540, 541, 548, 549, 550, 551, 601, 609, 612, 613, 620, 624, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 669, 673, 678, 679, 681, 682, 683, 754, 758, 759, 760, 761, 770, 771, 783, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 839, 843, 910, 912, 929, 951, 959, 962, 965, 975, 1004, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1019], "argument": [27, 71, 197, 226, 229, 355, 362, 363, 368, 369, 371, 373, 374, 376, 377, 379, 381, 393, 394, 397, 398, 400, 402, 404, 405, 407, 420, 422, 425, 426, 427, 428, 429, 430, 431, 433, 435, 438, 440, 442, 444, 474, 484, 489, 514, 516, 517, 519, 521, 532, 540, 541, 548, 549, 550, 551, 558, 562, 563, 569, 570, 572, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 612, 620, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 647, 649, 657, 662, 665, 669, 673, 677, 679, 680, 681, 682, 683, 695, 700, 715, 722, 743, 759, 760, 783, 807, 808, 811, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 836, 839, 843, 892, 896, 905, 910, 912, 929, 930, 931, 932, 946, 951, 954, 958, 959, 960, 962, 965, 969, 970, 977, 978, 988, 992, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "fmt": [27, 60, 207], "preced": [27, 274, 355, 368, 468, 962, 1004], "contrast": [27, 103, 167, 198, 231, 256, 258, 285, 303, 340, 381, 391, 393, 394, 396, 400, 403, 430, 433, 443, 600, 624, 791, 835, 952, 955, 957, 958, 962, 965, 967, 970, 972, 975, 976, 978, 1014], "push": [27, 368, 372, 391, 985], "equat": [27, 334, 368, 393, 398, 400, 538, 539, 540, 541, 545, 546, 547, 571, 608, 663, 664, 668, 743, 859, 886, 887, 888, 889, 952, 959, 962, 967, 1012], "twice": [27, 268, 339, 341, 370, 403, 600, 712, 917, 1013], "approx": [27, 94, 230, 398, 400, 401, 962, 969, 976], "rare": [27, 167, 350, 372, 379, 381, 383, 391, 393, 397, 570, 629, 639, 640, 650, 661, 878, 903, 930, 958, 972, 986, 1011, 1012, 1013, 1017, 1019], "explan": [27, 85, 354, 367, 368, 391, 401, 951, 961, 963, 978, 986, 1007], "bag": [27, 69, 107, 113, 123, 132, 163, 168, 340, 341, 364, 391, 497, 498, 499, 536, 537, 538, 539, 540, 541, 544, 545, 546, 721, 782, 805, 887, 960, 963, 984, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1020], "underli": [27, 55, 79, 127, 145, 197, 199, 261, 280, 281, 347, 355, 379, 381, 383, 389, 391, 395, 397, 398, 399, 400, 402, 403, 419, 432, 433, 434, 443, 445, 446, 452, 453, 459, 505, 548, 549, 550, 551, 574, 575, 578, 583, 639, 649, 661, 672, 676, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 824, 878, 886, 887, 888, 889, 927, 958, 959, 963, 968, 975, 977, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020], "restrict": [27, 65, 66, 160, 163, 213, 291, 296, 370, 374, 379, 391, 393, 400, 401, 446, 474, 483, 513, 562, 591, 634, 635, 636, 637, 639, 663, 664, 688, 694, 762, 768, 769, 805, 827, 829, 830, 831, 833, 835, 836, 837, 839, 864, 962, 978, 998, 999, 1004, 1006, 1014, 1016], "interv": [27, 107, 132, 155, 163, 196, 197, 198, 214, 256, 363, 381, 391, 397, 400, 403, 420, 421, 497, 498, 499, 538, 539, 541, 543, 545, 546, 616, 617, 619, 658, 722, 728, 730, 781, 798, 805, 842, 844, 858, 880, 881, 882, 902, 954, 958, 962, 972, 978, 1011, 1015], "move": [27, 117, 257, 295, 326, 367, 368, 372, 374, 391, 393, 530, 531, 552, 553, 554, 556, 558, 559, 929, 996, 1004, 1005, 1009, 1012, 1014, 1017, 1018], "characterist": [27, 44, 61, 145, 153, 163, 225, 249, 253, 272, 298, 350, 363, 365, 373, 391, 397, 403, 484, 485, 604, 619, 639, 683, 687, 689, 707, 762, 768, 769, 796, 805, 808, 846, 883, 958], "difficult": [27, 166, 204, 368, 376, 391, 398, 400, 534, 535, 540, 542, 543, 957, 959, 961, 965, 967, 969, 978, 986, 1004, 1018], "bayesian": [27, 54, 163, 174, 184, 215, 240, 242, 246, 247, 248, 398, 419, 505, 509, 513, 625, 626, 637, 638, 775, 776, 840, 842, 854, 859, 951, 982, 984, 998, 999, 1010, 1017], "domingo": [27, 768, 962], "pazzani": 27, "proc": [27, 78, 391, 401, 431, 670, 674, 814, 951, 959, 964, 968], "13th": 27, "intl": [27, 397], "1996": [27, 393, 400, 404, 426, 497, 498, 499, 536, 537, 972], "zadrozni": [27, 391, 419, 657], "bianca": 27, "charl": [27, 744, 1004, 1007, 1010, 1014, 1016, 1019], "elkan": [27, 307, 391, 419, 425, 428, 440, 657, 1010, 1014, 1015, 1017, 1018], "vol": [27, 156, 262, 365, 393, 455, 540, 541, 609, 616, 626, 645, 666, 667, 775, 804, 816, 952, 964, 965], "2001": [27, 153, 168, 255, 390, 393, 400, 419, 432, 433, 434, 443, 492, 540, 541, 545, 546, 609, 615, 620, 626, 672, 677, 715, 768, 871, 903, 952, 958, 962, 968, 970, 974, 977], "plot_compare_calibr": [27, 28], "06": [28, 35, 84, 166, 187, 195, 196, 256, 257, 295, 300, 320, 333, 374, 463, 464, 465, 625, 626, 670, 674, 775, 776, 777, 791, 887, 958, 972, 974], "527": 28, "auto_examples_calibr": 28, "calibr": [28, 30, 214, 357, 381, 493, 496, 545, 550, 639, 657, 690, 709, 721, 764, 767, 768, 805, 817, 875, 878, 951, 958, 962, 975, 977, 984, 999, 1001, 1008, 1010], "discrimin": [29, 35, 103, 140, 142, 163, 172, 211, 218, 232, 285, 357, 365, 400, 456, 493, 530, 531, 547, 763, 828, 951, 959, 962, 965, 976, 978, 984, 995, 999, 1007], "ellipsoid": [29, 35, 163, 240, 241, 248, 530, 531, 775, 776, 956, 961], "ledoit": [29, 35, 76, 77, 81, 82, 163, 454, 456, 460, 461, 493, 530, 956], "wolf": [29, 35, 76, 77, 81, 82, 163, 454, 456, 460, 461, 493, 530, 956, 1011], "oa": [29, 35, 76, 82, 163, 395, 450, 451, 454, 455, 457, 458, 493, 530, 777, 956], "hand": [29, 35, 85, 88, 96, 99, 121, 140, 153, 163, 166, 167, 189, 203, 221, 228, 229, 231, 253, 258, 265, 326, 354, 362, 363, 365, 368, 370, 374, 376, 380, 387, 398, 399, 400, 402, 483, 624, 694, 768, 805, 883, 951, 955, 958, 962, 964, 966, 970, 975, 977, 986, 988, 991, 994, 995], "built": [30, 85, 110, 117, 119, 168, 204, 259, 289, 306, 345, 354, 366, 368, 369, 370, 372, 374, 376, 377, 379, 380, 381, 384, 387, 392, 393, 394, 397, 400, 402, 427, 484, 534, 535, 536, 537, 542, 543, 569, 570, 574, 578, 620, 621, 622, 623, 624, 627, 628, 633, 639, 641, 642, 643, 644, 653, 654, 655, 656, 662, 780, 781, 788, 810, 813, 819, 820, 888, 889, 946, 958, 962, 963, 975, 976, 978, 982, 986, 997, 1004, 1007, 1008, 1010, 1016], "enabl": [30, 50, 71, 119, 167, 204, 219, 300, 307, 309, 310, 335, 366, 368, 373, 376, 379, 381, 384, 389, 392, 393, 394, 398, 400, 401, 430, 515, 516, 522, 540, 541, 542, 543, 544, 560, 561, 571, 572, 583, 591, 775, 776, 777, 780, 839, 840, 852, 875, 878, 879, 880, 881, 882, 883, 884, 893, 923, 929, 952, 954, 959, 961, 962, 965, 972, 973, 976, 977, 983, 986, 1004, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "troubl": [30, 401], "ovr": [30, 188, 211, 274, 306, 335, 639, 640, 768, 808, 878, 880, 883, 958, 962, 963, 977, 1004, 1009, 1010, 1012, 1013, 1014, 1018, 1019], "gpc": [30, 147, 158, 163, 485, 591, 592, 594, 595, 600, 601, 603, 604, 684, 721, 984, 999, 1014], "accuracy_scor": [30, 109, 149, 260, 303, 317, 339, 350, 380, 538, 545, 689, 709, 710, 714, 718, 722, 763, 764, 767, 772, 774, 951, 962, 1005, 1006, 1007, 1016], "gaussian_process": [30, 31, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 357, 381, 403, 624, 963, 1007, 1010, 1011], "gaussianprocessclassifi": [30, 31, 149, 150, 151, 152, 156, 381, 403, 592, 600, 601, 603, 604, 963, 1010, 1012, 1014, 1018], "iri": [30, 41, 45, 73, 87, 92, 93, 98, 105, 106, 107, 119, 129, 132, 137, 141, 147, 158, 163, 174, 179, 189, 215, 238, 243, 250, 261, 262, 265, 266, 279, 287, 293, 308, 313, 320, 321, 322, 326, 329, 337, 343, 348, 349, 361, 362, 380, 393, 394, 397, 398, 400, 477, 485, 522, 530, 534, 538, 545, 591, 603, 612, 657, 777, 791, 873, 874, 875, 878, 883, 886, 890, 891, 892, 951, 952, 956, 961, 962, 965, 969, 972, 975, 976, 977, 978, 988, 995, 996, 999, 1017], "load_iri": [30, 41, 45, 73, 89, 98, 101, 103, 105, 117, 119, 129, 137, 141, 150, 179, 189, 205, 238, 243, 250, 261, 262, 263, 265, 266, 279, 284, 287, 293, 306, 308, 311, 319, 322, 323, 326, 329, 345, 348, 380, 387, 393, 394, 397, 400, 402, 542, 548, 583, 591, 600, 601, 603, 604, 612, 639, 640, 768, 777, 780, 781, 783, 791, 807, 828, 873, 874, 875, 886, 888, 890, 891, 892, 952, 957, 962, 963, 964, 965, 969, 972, 978, 988, 994, 995, 996, 1010, 1012, 1015], "saga": [30, 187, 211, 212, 639, 640, 653, 655, 668, 791, 958, 1011, 1013], "multi_class": [30, 188, 211, 265, 306, 550, 591, 639, 640, 768, 813, 878, 958, 963, 977, 1004, 1008, 1012, 1017, 1019], "n_classifi": [30, 550, 551], "xx": [30, 34, 42, 57, 79, 117, 121, 126, 137, 150, 151, 152, 167, 183, 203, 206, 207, 208, 209, 210, 222, 225, 232, 245, 282, 292, 300, 301, 319, 325, 326, 330, 331, 332, 335, 336, 372], "yy": [30, 34, 42, 57, 79, 117, 126, 137, 150, 152, 167, 203, 207, 208, 209, 210, 222, 225, 232, 282, 292, 300, 301, 319, 325, 326, 330, 331, 332, 335, 336], "xfull": 30, "imshow_handl": 30, "04": [30, 40, 42, 54, 66, 75, 96, 104, 132, 153, 158, 166, 170, 177, 195, 214, 232, 241, 247, 256, 257, 269, 272, 289, 290, 333, 340, 365, 400, 402, 452, 453, 768, 777, 791, 958, 962, 966, 976], "cax": [30, 151, 267], "orient": [30, 94, 166, 217, 298, 381, 890, 959], "horizont": [30, 94, 217, 230, 298, 301, 373, 381, 445, 496, 678, 682], "063": [30, 35, 254, 256, 419], "plot_classification_prob": [30, 35], "salt": [31, 230, 300, 1018], "convei": [31, 222, 300, 995], "particularli": [31, 69, 70, 73, 104, 126, 197, 227, 256, 300, 307, 336, 350, 354, 368, 377, 381, 393, 394, 396, 399, 401, 477, 783, 816, 915, 930, 931, 958, 959, 962, 964, 983, 986, 996, 1004, 1009, 1011, 1012, 1018], "linearli": [31, 99, 111, 166, 175, 210, 218, 225, 265, 266, 300, 303, 330, 339, 354, 365, 379, 398, 400, 496, 623, 688, 962, 965, 968, 977, 995, 1011], "semi": [31, 232, 300, 308, 320, 357, 363, 381, 469, 485, 516, 569, 571, 657, 709, 805, 839, 843, 873, 874, 875, 883, 960, 965, 968, 984, 999, 1004, 1016, 1019], "transpar": [31, 300, 947, 986], "ga\u00ebl": [31, 45, 51, 72, 88, 89, 101, 179, 193, 194, 300, 330, 331, 382, 986], "modifi": [31, 45, 51, 72, 74, 88, 89, 179, 193, 194, 206, 217, 218, 219, 243, 331, 336, 366, 368, 370, 372, 381, 400, 403, 425, 428, 435, 440, 449, 463, 464, 465, 466, 476, 491, 562, 591, 592, 594, 600, 657, 659, 670, 674, 709, 710, 748, 763, 764, 767, 896, 958, 975, 976, 983, 994, 998, 999, 1004, 1006, 1007, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019], "listedcolormap": [31, 117, 279, 284, 287, 292, 300], "make_moon": [31, 44, 61, 225, 256, 292, 293, 300, 364, 951, 1011, 1015], "make_circl": [31, 44, 61, 99, 126, 222, 292, 293, 300, 316, 364, 1005, 1012, 1015], "neural_network": [31, 163, 167, 235, 291, 292, 293, 294, 295, 356, 357, 379, 963, 966, 1006], "mlpclassifi": [31, 163, 291, 292, 294, 296, 356, 483, 485, 495, 503, 552, 835, 837, 849, 963, 966, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "kneighborsclassifi": [31, 129, 136, 278, 279, 284, 285, 303, 308, 310, 339, 400, 583, 822, 826, 827, 828, 829, 830, 963, 965, 995, 1004, 1014, 1016, 1017, 1018, 1019, 1020], "decisiontreeclassifi": [31, 108, 109, 111, 117, 129, 260, 344, 345, 348, 381, 400, 534, 536, 538, 540, 542, 545, 612, 783, 803, 887, 888, 890, 891, 892, 952, 963, 978, 1005, 1006, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "adaboostclassifi": [31, 108, 109, 111, 117, 400, 535, 540, 542, 1006, 1007, 1010, 1011, 1013, 1014, 1017, 1019], "discriminant_analysi": [31, 33, 34, 103, 218, 285, 350, 357, 389, 517, 828, 956, 963, 1004, 1007, 1008, 1009, 1010, 1011], "quadraticdiscriminantanalysi": [31, 34, 530, 956, 963, 965, 1004, 1009, 1011, 1019], "decisionboundarydisplai": [31, 55, 111, 124, 129, 179, 188, 205, 259, 279, 284, 287, 303, 322, 323, 324, 327, 328, 345, 1018, 1019], "net": [31, 163, 174, 187, 207, 215, 269, 374, 392, 397, 452, 453, 459, 482, 505, 538, 539, 540, 541, 545, 546, 547, 627, 628, 633, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 665, 765, 835, 886, 887, 888, 889, 951, 962, 967, 976, 984, 986, 999, 1004, 1009, 1013, 1014, 1016], "adaboost": [31, 107, 117, 132, 163, 500, 501, 534, 535, 540, 684, 774, 805, 886, 887, 984, 999, 1006], "qda": [31, 34, 365, 530, 531, 984, 999, 1009], "025": [31, 198, 253, 340, 671, 675], "n_clusters_per_class": [31, 90, 113, 142, 144, 253, 286, 292, 300, 373, 496], "uniform": [31, 37, 53, 120, 121, 124, 141, 149, 154, 157, 175, 176, 210, 222, 225, 228, 264, 279, 282, 283, 288, 292, 299, 301, 302, 310, 325, 370, 373, 393, 420, 421, 532, 550, 551, 591, 592, 609, 620, 630, 631, 635, 649, 657, 658, 659, 680, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 781, 789, 791, 814, 815, 818, 821, 822, 829, 830, 844, 856, 858, 867, 903, 917, 951, 952, 961, 962, 965, 1010, 1012, 1014, 1018], "linearly_separ": [31, 292], "ds_cnt": [31, 300, 301], "rdbu": [31, 94, 212, 292, 326, 331], "cm_bright": [31, 292, 300], "ff0000": [31, 284, 292], "0000ff": [31, 284, 292], "ep": [31, 44, 46, 49, 64, 179, 181, 220, 229, 379, 393, 404, 426, 431, 436, 459, 612, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 662, 663, 664, 665, 671, 675, 695, 721, 831, 870, 871, 872, 974, 1019, 1020], "lstrip": [31, 44, 61, 225, 292, 300], "plot_classifier_comparison": [31, 35, 300], "8x8": [32, 88, 187, 229, 285, 295, 365, 483, 994], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 57, 71, 72, 88, 135, 136, 143, 187, 203, 218, 229, 230, 254, 255, 258, 264, 271, 278, 280, 285, 293, 295, 314, 315, 374, 394, 427, 513, 514, 515, 516, 580, 581, 619, 620, 649, 669, 670, 671, 672, 988, 992, 993, 994, 995, 996, 1010, 1015], "set_axis_off": 32, "gray_r": [32, 88, 97, 151, 218, 295, 314, 315, 994], "entir": [32, 160, 196, 204, 295, 298, 307, 348, 350, 362, 369, 370, 381, 387, 393, 397, 399, 401, 453, 473, 515, 569, 570, 571, 572, 628, 632, 634, 636, 639, 640, 642, 644, 646, 647, 649, 657, 663, 664, 714, 774, 807, 808, 811, 836, 838, 839, 852, 863, 864, 866, 867, 868, 869, 931, 951, 952, 962, 976, 978, 995, 1013, 1014], "97": [32, 97, 104, 169, 232, 247, 295, 315, 326, 365, 374, 380, 397, 639, 963, 972, 1004], "92": [32, 34, 50, 97, 142, 172, 254, 295, 314, 315, 326, 363, 365, 519, 521, 528, 543, 578, 777, 791, 957, 997], "899": [32, 254], "confus": [32, 163, 249, 265, 272, 314, 315, 339, 381, 485, 612, 633, 678, 694, 696, 699, 709, 710, 718, 734, 764, 767, 805, 883, 997, 1004, 1005, 1009, 1013, 1014, 1016, 1017, 1018, 1019], "figure_": [32, 167, 235, 306, 308, 375, 420, 612, 613, 678, 679, 681, 682, 683, 783], "confusion_matrix": [32, 226, 250, 314, 315, 678, 694, 734, 802, 962, 997, 1005, 1010, 1011, 1014, 1015, 1017], "ground": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 97, 124, 156, 180, 190, 196, 197, 247, 259, 340, 381, 392, 393, 684, 685, 686, 689, 693, 694, 695, 696, 698, 699, 702, 703, 704, 708, 709, 710, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 763, 764, 765, 766, 767, 773, 774, 962, 975, 988, 996, 1012], "truth": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 97, 102, 124, 156, 180, 190, 196, 197, 247, 259, 340, 381, 392, 393, 684, 685, 686, 689, 693, 694, 695, 696, 698, 699, 702, 703, 704, 706, 708, 709, 710, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 763, 764, 765, 766, 767, 773, 774, 962, 988, 996, 1012, 1018], "gt": [32, 70, 71, 114, 128, 166, 246, 254, 268, 366, 368, 372], "rebuilt": [32, 819, 820], "441": [32, 35], "plot_digits_classif": [32, 35], "oracl": [33, 196, 214, 406, 450, 451, 454, 455, 456, 457, 956, 1004], "shrinkag": [33, 76, 78, 81, 82, 102, 123, 163, 287, 406, 450, 451, 454, 455, 456, 457, 458, 460, 461, 462, 520, 524, 530, 542, 543, 777, 958, 984, 999, 1004, 1008, 1009, 1011], "lineardiscriminantanalysi": [33, 34, 103, 218, 285, 350, 389, 517, 531, 828, 956, 963, 965, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1018, 1019], "200": [33, 34, 44, 50, 54, 59, 74, 97, 111, 119, 121, 127, 152, 182, 191, 197, 200, 201, 202, 208, 213, 218, 236, 241, 257, 263, 265, 266, 298, 301, 316, 325, 326, 347, 350, 363, 370, 379, 398, 400, 405, 422, 435, 449, 452, 453, 514, 515, 516, 519, 520, 521, 524, 528, 565, 630, 632, 652, 660, 673, 791, 836, 837, 876, 880, 881, 882, 883, 884, 977], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 129, 130, 400, 550], "lsqr": [33, 530, 653, 655, 668, 956, 1005, 1011, 1018], "clf2": [33, 129, 130, 370, 387, 400, 550], "store_precis": [33, 78, 450, 451, 454, 455, 456, 457], "assume_cent": [33, 78, 395, 406, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461], "clf3": [33, 129, 130, 370, 400, 550], "covariance_estim": [33, 530, 956, 1016], "features_samples_ratio": 33, "gold": [33, 190, 197, 199, 202, 206, 210, 213, 242, 247, 263, 282, 325, 374], "navi": [33, 69, 78, 98, 103, 104, 127, 175, 199, 207, 220, 242, 243, 244, 247, 263, 265, 271, 281, 288, 316, 347], "976": [33, 35, 188, 319, 320], "plot_lda": [33, 35], "doubl": [34, 268, 368, 381, 398, 519, 521, 528, 680, 819, 820, 830, 946, 952, 977, 978, 1004, 1014, 1015], "deviat": [34, 60, 79, 112, 115, 116, 117, 145, 148, 153, 155, 157, 166, 175, 202, 253, 254, 255, 256, 257, 259, 282, 283, 298, 303, 360, 364, 365, 373, 377, 381, 391, 397, 400, 431, 453, 482, 492, 493, 494, 495, 497, 498, 499, 503, 505, 506, 511, 533, 575, 592, 615, 625, 626, 652, 704, 732, 783, 825, 848, 849, 859, 867, 868, 869, 958, 962, 968, 972, 995, 1010, 1011, 1012, 1015, 1016, 1017], "own": [34, 214, 246, 276, 278, 316, 340, 355, 362, 371, 372, 373, 376, 377, 384, 392, 393, 405, 409, 422, 435, 514, 538, 545, 627, 775, 776, 821, 822, 823, 825, 827, 829, 830, 831, 886, 888, 904, 909, 930, 958, 964, 965, 968, 977, 986, 996, 997, 1011, 1012, 1014], "mpl": [34, 241, 242, 243, 247, 298], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "dataset_fixed_cov": 34, "dim": [34, 205, 229, 279, 284, 285, 287, 322, 323, 508, 680], "dataset_cov": 34, "matric": [34, 40, 79, 81, 94, 201, 242, 243, 245, 246, 247, 276, 289, 307, 318, 339, 340, 360, 362, 370, 371, 379, 380, 381, 392, 393, 394, 395, 396, 398, 401, 402, 408, 431, 432, 434, 445, 454, 463, 464, 465, 515, 516, 519, 521, 522, 525, 528, 530, 531, 536, 537, 544, 547, 562, 563, 570, 624, 639, 645, 653, 655, 668, 734, 740, 748, 754, 758, 759, 760, 761, 770, 775, 776, 805, 823, 826, 831, 842, 846, 848, 851, 854, 856, 857, 859, 861, 863, 865, 867, 868, 869, 870, 871, 880, 881, 883, 884, 894, 915, 921, 926, 933, 935, 936, 952, 956, 959, 960, 961, 963, 965, 966, 974, 976, 977, 982, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "linalg": [34, 54, 77, 78, 81, 100, 102, 104, 182, 241, 242, 243, 246, 247, 368, 374, 398, 432, 433, 434, 443, 513, 516, 522, 525, 638, 653, 655, 668, 672, 676, 913], "plot_data": 34, "fig_index": 34, "splot": [34, 242, 247], "tp": [34, 393, 693, 699, 711, 762, 763, 764, 767, 890, 962], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 112, 166, 326, 363], "000099": 34, "pcolormesh": [34, 126, 137, 179, 279, 284, 322, 326, 330, 612], "white": [34, 57, 59, 94, 153, 166, 210, 217, 282, 295, 300, 319, 325, 398, 401, 403, 606, 978, 1004, 1007, 1010, 1014, 1018], "means_": [34, 241, 242, 243, 244, 246, 247, 530, 531, 775, 776], "yellow": [34, 91, 326, 963], "markers": [34, 49, 57, 60, 62, 63, 121, 151, 155, 228, 310], "markeredgecolor": [34, 49, 60, 62, 63], "plot_ellips": [34, 241], "cov": [34, 81, 85, 111, 246, 368, 381, 384, 386, 396, 406, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 500, 513, 515, 522, 529], "eigh": [34, 241, 242, 243, 246, 247, 398, 405, 514, 516, 1019], "arctan": [34, 242, 247, 364, 499], "180": [34, 241, 242, 243, 246, 247, 285, 289, 374, 403, 483], "ell": [34, 241, 242, 243, 247, 390], "patch": [34, 50, 241, 242, 243, 246, 247, 251, 363, 372, 379, 398, 400, 536, 537, 564, 565, 568, 1004, 1012], "ellips": [34, 225, 241, 242, 243, 246, 247, 968], "set_clip_box": [34, 241, 242, 243, 246, 247], "set_alpha": [34, 108, 241, 242, 243, 246, 247], "add_artist": [34, 218, 241, 242, 243, 246, 247], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 100, 102, 126, 218, 340, 377, 389, 396, 405, 432, 434, 463, 464, 466, 513, 514, 515, 516, 520, 521, 522, 525, 527, 530, 531, 645, 653, 654, 655, 666, 667, 668, 838, 915, 956, 997, 1006, 1010, 1011, 1017, 1019], "store_covari": [34, 530, 531, 1009, 1011], "tight": [34, 40, 104, 111, 117, 137, 141, 181, 183, 188, 189, 190, 200, 201, 205, 208, 210, 213, 219, 222, 245, 276, 282, 283, 287, 288, 322, 325, 326, 329, 330, 331, 345, 563, 673, 1016], "306": [34, 35, 608], "plot_lda_qda": [34, 35], "auto_examples_classif": 35, "handwritten": [36, 67, 163, 216, 221, 223, 229, 254, 294, 295, 314, 315, 361, 393, 400, 428, 483, 522, 525, 530, 547, 669, 670, 671, 672, 673, 685, 686, 698, 717, 771, 773, 828, 840, 849, 859, 871, 959, 965, 988, 999], "hierarch": [36, 40, 54, 67, 163, 169, 310, 381, 401, 423, 425, 427, 485, 493, 495, 503, 511, 528, 711, 832, 859, 979, 983, 998, 999, 1004, 1007, 1008], "coin": [36, 67, 163, 393, 401, 423, 443, 974, 996], "shift": [36, 44, 67, 163, 175, 220, 246, 281, 295, 298, 395, 399, 422, 429, 439, 442, 450, 493, 496, 670, 674, 825, 848, 972, 998, 999, 1004, 1008, 1012], "chanc": [36, 49, 67, 163, 196, 204, 211, 214, 256, 262, 265, 266, 340, 350, 367, 393, 397, 685, 686, 689, 697, 735, 737, 766, 773, 804, 962, 970, 978], "agglom": [36, 44, 47, 67, 163, 393, 423, 427, 483, 672, 758, 832, 1007], "bisect": [36, 67, 163, 425, 428, 493, 1018], "quantiz": [36, 67, 163, 362, 363, 393, 425, 428, 430, 487, 759, 844, 936, 972], "birch": [36, 44, 67, 163, 310, 356, 381, 430, 493, 998, 999, 1008, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "toi": [36, 49, 53, 56, 67, 85, 98, 112, 124, 129, 130, 163, 178, 186, 210, 224, 239, 241, 293, 323, 333, 361, 374, 379, 400, 401, 422, 423, 424, 426, 429, 430, 431, 433, 439, 450, 493, 495, 503, 544, 620, 658, 706, 736, 776, 825, 832, 840, 859, 882, 959, 961, 962, 968, 972, 999], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 66, 67, 163, 169, 422, 423, 427, 444, 493, 495, 503, 859, 982, 996, 1007, 1012, 1015], "dbscan": [36, 44, 64, 67, 163, 379, 381, 431, 433, 436, 493, 685, 686, 698, 717, 771, 773, 831, 859, 965, 998, 999, 1004, 1006, 1008, 1009, 1011, 1012, 1013], "optic": [36, 44, 67, 163, 310, 361, 404, 426, 436, 437, 438, 483, 998, 999, 1013, 1017, 1018, 1019, 1020], "affin": [36, 44, 67, 163, 298, 360, 370, 381, 392, 398, 422, 423, 427, 433, 435, 443, 493, 516, 672, 676, 685, 686, 698, 717, 771, 773, 874, 956, 959, 962, 998, 999, 1004, 1005, 1008, 1014, 1015, 1017, 1019], "propag": [36, 67, 163, 313, 320, 363, 392, 422, 435, 483, 493, 495, 685, 686, 694, 695, 698, 699, 717, 771, 773, 839, 853, 873, 874, 875, 928, 929, 966, 984, 998, 999, 1004, 1016, 1019], "agglomer": [36, 67, 163, 360, 393, 401, 427, 483, 581, 587, 626, 777, 782, 839, 999], "unstructur": [36, 67, 163, 294, 393, 423, 427, 444, 484, 511, 832, 974, 986, 1008], "dendrogram": [36, 67, 163, 169, 393, 423, 427, 485, 1016], "pictur": [36, 67, 163, 229, 247, 363, 382, 393, 398, 401, 443, 474, 475, 502, 983], "greek": [36, 67, 163, 393, 443], "silhouett": [36, 38, 49, 56, 57, 67, 163, 340, 368, 428, 493, 770, 771, 1004, 1008], "embed": [36, 44, 46, 67, 114, 148, 163, 216, 219, 221, 223, 224, 239, 276, 285, 374, 381, 392, 393, 423, 433, 443, 470, 483, 525, 530, 547, 563, 620, 669, 670, 671, 672, 673, 674, 675, 676, 677, 828, 840, 849, 870, 871, 872, 954, 965, 968, 974, 979, 998, 999, 1004, 1005, 1015, 1016, 1018], "explor": [37, 112, 113, 221, 222, 257, 258, 264, 265, 308, 326, 340, 350, 362, 365, 367, 374, 387, 393, 400, 453, 777, 780, 788, 951, 958, 959, 961, 967, 969, 970, 972, 986, 991, 997, 1010], "uniformli": [37, 121, 140, 225, 241, 306, 370, 497, 498, 499, 532, 623, 781, 789, 791, 858, 951, 952, 962, 965, 972, 1008, 1013], "divid": [37, 43, 48, 90, 94, 142, 153, 196, 241, 350, 364, 365, 390, 393, 397, 398, 450, 451, 452, 453, 454, 455, 456, 457, 493, 500, 515, 522, 631, 632, 635, 636, 637, 645, 646, 657, 658, 659, 700, 706, 714, 718, 736, 772, 774, 836, 837, 880, 883, 915, 918, 919, 951, 959, 961, 962, 965, 972, 976, 997, 1004, 1011, 1012, 1015], "randomli": [37, 48, 50, 60, 70, 87, 92, 112, 124, 160, 163, 167, 200, 213, 229, 232, 246, 251, 262, 274, 314, 350, 355, 377, 379, 380, 393, 397, 400, 403, 430, 439, 493, 496, 500, 504, 512, 518, 526, 527, 532, 540, 541, 544, 545, 546, 591, 592, 652, 660, 671, 675, 697, 775, 776, 835, 872, 886, 887, 888, 889, 961, 963, 965, 968, 970, 974, 978, 995, 997, 1015, 1019], "quiroz": [37, 56, 175, 257, 259, 303, 339, 340, 341], "fundament": [37, 49, 80, 340, 366, 380, 396, 477, 519, 521, 528, 689, 958, 962], "homogen": [37, 38, 39, 44, 46, 49, 57, 340, 363, 379, 381, 395, 400, 403, 595, 685, 698, 711, 716, 717, 737, 773, 959, 960, 962, 1013], "frequent": [37, 161, 259, 265, 266, 340, 357, 365, 368, 401, 532, 571, 611, 829, 852, 856, 867, 952, 954, 962, 976, 980, 983], "ari": [37, 57, 340, 393, 686, 1009, 1015], "mutual": [37, 38, 49, 57, 139, 146, 163, 400, 402, 573, 576, 577, 580, 581, 587, 588, 589, 590, 685, 686, 696, 735, 737, 766, 773, 951, 958, 962, 963, 1004, 1010, 1020], "mi": [37, 140, 393, 588, 589, 685, 735, 737, 952, 962, 976], "theoret": [37, 56, 148, 392, 393, 400, 534, 535, 620, 685, 706, 736, 878, 951, 959, 961, 962, 964, 974, 976, 977, 985, 986], "nmi": [37, 393, 698, 716, 717, 737], "ami": [37, 49, 57, 393, 685], "score_func": [37, 70, 71, 573, 576, 577, 579, 580, 581, 722, 1004, 1006], "rand_scor": [37, 393, 696, 962, 1016], "adjusted_rand_scor": [37, 38, 49, 57, 340, 393, 685, 696, 722, 737, 766, 962, 1017], "mutual_info_scor": [37, 393, 685, 962, 1012, 1015, 1016], "normalized_mutual_info_scor": [37, 393, 716, 735, 773, 962, 1012, 1018], "adjusted_mutual_info_scor": [37, 38, 49, 57, 393, 686, 696, 735, 737, 766, 962, 1004, 1012, 1016, 1020], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 60, 172, 340], "clase": [37, 303], "seaborn": [37, 108, 110, 165, 166, 175, 246, 256, 279, 368, 384, 386, 982], "sn": [37, 108, 110, 165, 166, 175, 246, 256, 279], "color_palett": [37, 108, 110, 246], "colorblind": [37, 108, 110], "vx": 37, "errorbar": [37, 60, 78, 80, 144, 154, 155, 278, 317, 329, 783], "refer": [37, 38, 59, 62, 70, 122, 128, 145, 157, 214, 263, 286, 298, 306, 307, 308, 309, 310, 311, 340, 355, 357, 366, 368, 369, 370, 372, 373, 374, 375, 376, 379, 380, 381, 382, 384, 387, 394, 404, 405, 406, 419, 420, 421, 422, 424, 426, 428, 429, 431, 432, 433, 434, 435, 438, 443, 444, 445, 448, 450, 453, 454, 455, 456, 479, 484, 492, 494, 496, 497, 498, 499, 500, 501, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 525, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 571, 574, 575, 576, 583, 588, 589, 591, 592, 595, 600, 603, 604, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 628, 630, 632, 634, 636, 637, 639, 642, 644, 646, 647, 648, 649, 652, 654, 656, 657, 659, 660, 663, 664, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 685, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 723, 736, 738, 739, 749, 763, 765, 766, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 783, 791, 799, 800, 801, 802, 803, 804, 806, 809, 810, 814, 815, 816, 818, 824, 825, 826, 828, 835, 836, 837, 845, 846, 855, 856, 866, 871, 872, 873, 874, 875, 878, 880, 881, 883, 884, 886, 887, 888, 889, 903, 915, 928, 973, 983, 988, 992, 996, 997, 1004, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "satur": [37, 166, 298], "uniform_labelings_scor": 37, "nwith": [37, 56, 60, 144, 340], "constantli": [37, 196, 986], "unbound": [37, 961, 1018], "cardin": [37, 115, 116, 122, 168, 393, 400, 444, 534, 535, 538, 539, 540, 541, 545, 546, 547, 660, 852, 886, 887, 888, 889, 962, 963, 970, 972, 1018, 1019], "why": [37, 52, 94, 166, 168, 172, 185, 253, 256, 339, 340, 368, 376, 381, 393, 395, 398, 404, 426, 428, 432, 962, 964, 977, 992, 995, 1007], "chart": [37, 261, 963, 990, 1007], "henc": [37, 59, 71, 166, 200, 229, 265, 326, 339, 340, 354, 363, 370, 372, 374, 381, 393, 397, 400, 401, 468, 489, 520, 522, 523, 524, 544, 571, 624, 627, 633, 641, 643, 653, 668, 685, 686, 690, 696, 711, 737, 766, 773, 796, 797, 814, 815, 816, 817, 818, 854, 959, 961, 962, 963, 968, 969, 972, 983, 1011, 1012, 1015, 1016, 1018], "safe": [37, 166, 185, 340, 368, 370, 393, 394, 416, 489, 490, 569, 572, 754, 758, 872, 928, 934, 965, 1010, 1011, 1012, 1017, 1018], "stabil": [37, 113, 166, 200, 218, 261, 298, 340, 381, 390, 631, 635, 651, 817, 836, 837, 855, 866, 914, 952, 958, 961, 972, 983, 988, 1004, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mislead": [37, 115, 116, 122, 166, 369, 383, 400, 534, 535, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 999, 1017], "meaning": [37, 222, 285, 341, 390, 397, 401, 402, 403, 529, 709, 710, 718, 763, 764, 767, 828, 966, 976, 977, 1004], "plot_adjusted_for_chance_measur": [37, 67], "brendan": [38, 422, 435], "frei": [38, 422, 435, 1014], "delbert": [38, 422, 435], "dueck": [38, 422, 435], "messag": [38, 44, 61, 69, 94, 339, 340, 363, 366, 367, 368, 372, 373, 376, 377, 393, 422, 435, 520, 524, 529, 555, 608, 693, 777, 780, 781, 783, 791, 803, 806, 808, 828, 836, 837, 897, 898, 899, 902, 905, 925, 946, 962, 972, 1004, 1008, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "feb": [38, 422, 435], "affinitypropag": [38, 44, 310, 393, 1004, 1007, 1008, 1012, 1015, 1017, 1018, 1019, 1020], "labels_tru": [38, 49, 63, 393, 685, 686, 695, 696, 698, 711, 716, 717, 735, 737, 766, 773], "af": 38, "prefer": [38, 44, 247, 265, 298, 350, 354, 355, 356, 366, 368, 369, 370, 381, 393, 397, 398, 400, 401, 422, 435, 452, 453, 459, 468, 489, 490, 608, 613, 614, 635, 639, 640, 682, 706, 708, 737, 738, 828, 854, 878, 879, 920, 928, 951, 954, 956, 958, 962, 967, 977, 978, 982, 995, 1005, 1011, 1013, 1017, 1018], "cluster_centers_indic": [38, 435], "cluster_centers_indices_": [38, 422], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 57, 60, 61, 62, 64, 66, 310, 340, 368, 381, 393, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 436, 996, 1009], "n_clusters_": [38, 49, 62, 423, 427], "homogeneity_scor": [38, 49, 57, 340, 393, 698, 716, 773, 962], "completeness_scor": [38, 49, 57, 307, 340, 393, 716, 717, 773, 962], "silhouette_scor": [38, 49, 57, 59, 340, 368, 393, 1004, 1008, 1010, 1012, 1014, 1018], "sqeuclidean": [38, 431, 438, 758, 759, 760], "872": [38, 970], "912": 38, "871": [38, 79, 80, 395, 455], "753": [38, 339], "cycler": 38, "viridi": [38, 276, 678], "class_memb": 38, "cluster_cent": [38, 60, 62, 63, 442], "332": [38, 67, 229, 866], "plot_affinity_propag": [38, 67, 422, 435], "impos": [39, 56, 125, 190, 379, 393, 398, 400, 401, 508, 638, 958], "simpli": [39, 85, 126, 148, 156, 221, 232, 265, 289, 308, 309, 354, 363, 368, 370, 373, 379, 381, 395, 396, 397, 398, 400, 401, 466, 676, 742, 745, 846, 917, 954, 962, 963, 964, 965, 976, 989, 997, 1011, 1012, 1013], "There": [39, 46, 148, 214, 221, 234, 247, 251, 253, 256, 339, 361, 363, 365, 368, 369, 370, 373, 379, 381, 384, 390, 392, 393, 398, 400, 401, 402, 433, 443, 515, 534, 535, 540, 541, 569, 570, 572, 587, 626, 952, 958, 959, 960, 961, 962, 965, 969, 972, 976, 977, 978, 981, 985, 996, 1004, 1012], "singl": [39, 48, 52, 53, 57, 60, 61, 71, 107, 110, 117, 118, 119, 127, 132, 145, 148, 154, 160, 163, 167, 169, 172, 196, 198, 235, 237, 246, 252, 265, 294, 310, 326, 339, 340, 341, 345, 347, 350, 354, 355, 362, 363, 368, 373, 375, 376, 377, 379, 380, 381, 391, 392, 394, 396, 397, 398, 400, 401, 402, 416, 419, 422, 423, 427, 428, 430, 435, 445, 447, 448, 474, 475, 477, 487, 490, 515, 534, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 563, 573, 580, 581, 583, 587, 608, 613, 615, 624, 647, 648, 654, 657, 658, 659, 671, 673, 675, 691, 702, 703, 704, 705, 716, 717, 718, 721, 754, 765, 775, 776, 777, 780, 781, 791, 798, 801, 802, 804, 805, 808, 816, 819, 820, 824, 836, 837, 838, 848, 849, 852, 853, 854, 859, 873, 874, 886, 887, 888, 889, 894, 926, 930, 949, 951, 957, 958, 959, 962, 963, 965, 967, 969, 970, 972, 976, 977, 978, 982, 986, 988, 995, 997, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "unstabl": [39, 65, 166, 393, 395, 396, 670, 674, 914, 915, 978, 1008, 1009, 1011, 1016, 1018], "quickli": [39, 235, 293, 306, 365, 368, 369, 397, 400, 673, 958, 965, 966, 986, 997, 1015], "fight": [39, 986], "percol": 39, "distanc": [39, 40, 56, 59, 60, 64, 66, 76, 80, 82, 99, 160, 163, 169, 182, 197, 217, 219, 222, 229, 276, 278, 279, 284, 286, 288, 289, 298, 303, 306, 310, 311, 339, 340, 354, 365, 377, 379, 381, 390, 393, 395, 398, 399, 403, 404, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 436, 437, 438, 439, 440, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 519, 521, 528, 588, 589, 596, 600, 601, 603, 604, 609, 639, 640, 647, 649, 655, 656, 657, 658, 659, 669, 670, 671, 673, 674, 675, 676, 677, 680, 684, 705, 714, 738, 740, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 770, 771, 774, 808, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 858, 872, 876, 878, 880, 882, 883, 884, 886, 887, 888, 889, 952, 956, 959, 960, 962, 968, 972, 974, 976, 977, 983, 995, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "merg": [39, 41, 46, 51, 309, 366, 368, 371, 376, 379, 382, 393, 422, 423, 424, 427, 444, 797, 996, 1004, 1011], "exagger": [39, 166, 673, 959], "behaviour": [39, 99, 197, 198, 214, 328, 368, 381, 393, 400, 540, 541, 545, 546, 583, 876, 886, 887, 935, 951, 952, 962, 972, 1012, 1015, 1016, 1019], "shortest": [39, 373, 377, 669, 920, 959, 1017], "mechan": [39, 335, 339, 355, 370, 393, 401, 445, 838, 960, 978, 986], "resembl": 39, "brittl": [39, 393], "pronounc": [39, 40, 52, 153], "kneighbors_graph": [39, 44, 61, 66, 276, 381, 393, 423, 427, 821, 822, 823, 825, 827, 829, 830, 831, 833, 965, 1004, 1008, 1013], "geometri": [39, 393, 959, 965], "instabl": [39, 166, 286, 433, 516, 520, 524, 676, 1011, 1014, 1017], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 55, 61, 66, 381, 393, 422, 424, 427, 996, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1019], "1500": [39, 50, 56, 61, 66, 91, 217, 221, 241], "knn_graph": 39, "include_self": [39, 44, 66, 832, 833, 1008], "plot_agglomerative_clust": [39, 67], "waveform": 40, "euclidean": [40, 56, 57, 182, 229, 276, 284, 306, 311, 340, 390, 392, 393, 398, 399, 400, 401, 403, 422, 423, 426, 427, 431, 433, 438, 441, 444, 512, 518, 570, 596, 600, 603, 604, 657, 659, 671, 673, 676, 677, 680, 742, 743, 749, 750, 751, 752, 758, 759, 760, 761, 770, 771, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 872, 952, 956, 960, 963, 965, 974, 983, 1008, 1011, 1012, 1013, 1014, 1020], "cityblock": [40, 44, 393, 431, 438, 742, 758, 759, 760, 965], "invari": [40, 365, 381, 393, 403, 595, 670, 727, 795, 796, 958, 959, 962, 977, 983, 1012, 1015, 1016, 1017], "ie": [40, 65, 95, 422, 685, 748, 958, 972], "inter": [40, 115, 350, 400, 697, 921], "character": [40, 214, 344, 393, 397, 959], "ill": [40, 81, 201, 459, 631, 632, 635, 636, 637, 663, 664, 958, 961, 996, 1014], "recov": [40, 64, 81, 95, 96, 102, 118, 148, 165, 195, 196, 217, 341, 395, 399, 402, 405, 441, 514, 540, 958, 959, 961, 983, 996, 1010], "put": [40, 57, 137, 148, 150, 230, 236, 241, 292, 300, 310, 319, 330, 331, 336, 356, 370, 372, 373, 376, 403, 425, 428, 440, 496, 595, 628, 642, 775, 856, 867, 880, 881, 882, 883, 884, 905, 952, 959, 961, 962, 963, 969, 972, 985, 989, 991, 997, 1016], "cc": [40, 366], "patheffect": 40, "pairwise_dist": [40, 381, 393, 404, 423, 426, 427, 431, 438, 669, 677, 742, 751, 759, 760, 770, 771, 823, 825, 827, 831, 960, 1004, 1008, 1010, 1012, 1013, 1015, 1016], "sqr": 40, "sign": [40, 78, 85, 95, 98, 111, 180, 246, 292, 334, 368, 393, 398, 401, 525, 563, 570, 587, 616, 617, 639, 640, 647, 649, 655, 656, 657, 658, 715, 722, 878, 882, 913, 915, 927, 958, 962, 967, 972, 976, 977, 996, 1004, 1008, 1013, 1017, 1019], "phi": [40, 398, 723, 845, 954, 962, 972, 977], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 61, 62, 225], "f781bf": [40, 44, 61, 62], "set_label": [40, 151, 229], "avg_dist": [40, 761], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 65], "cividi": 40, "vmin": [40, 81, 94, 97, 105, 151, 154, 175, 187, 212, 230, 245, 251, 294, 326], "45": [40, 63, 72, 141, 153, 168, 185, 196, 214, 263, 267, 268, 315, 326, 350, 397, 400, 401, 545, 546, 608, 615, 768, 775, 882, 952, 962, 970, 981, 993, 1000, 1004, 1007], "interclass": 40, "plot_agglomerative_clustering_metr": [40, 67], "hierarchi": [41, 169, 431, 437, 444, 967, 996], "plot_dendrogram": 41, "kwarg": [41, 97, 370, 375, 407, 420, 445, 516, 519, 521, 598, 612, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 679, 680, 681, 683, 722, 819, 820, 838, 839, 843, 893, 912, 1011, 1015, 1017], "children_": [41, 423, 427, 444], "current_count": 41, "child_idx": 41, "leaf": [41, 114, 124, 126, 344, 348, 393, 400, 404, 423, 424, 425, 426, 427, 431, 438, 444, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 886, 887, 888, 889, 890, 891, 965, 978, 1007, 1009, 1011, 1015, 1018], "linkage_matrix": 41, "column_stack": [41, 292, 300], "distances_": [41, 423, 427, 1016], "distance_threshold": [41, 423, 427, 1013, 1016], "truncate_mod": 41, "parenthesi": [41, 368], "110": [41, 67, 89, 175, 193, 203, 228, 419, 956, 957], "plot_agglomerative_dendrogram": [41, 67], "scalabl": [42, 44, 61, 163, 171, 173, 249, 272, 311, 340, 368, 393, 400, 401, 429, 472, 483, 570, 621, 783, 794, 803, 805, 817, 840, 849, 851, 878, 880, 883, 884, 954, 957, 959, 962, 975, 977, 986, 1004, 1007, 1008, 1014, 1015, 1018, 1019], "hundr": [42, 120, 218, 302, 363, 397, 400, 542, 543, 959, 1015], "thousand": [42, 229, 231, 302, 340, 363, 393, 400, 836, 837, 883, 959, 997, 1013, 1015], "million": [42, 55, 153, 172, 401, 403, 673, 959, 977, 986, 1018, 1019], "chose": [42, 166, 992], "usag": [42, 53, 70, 73, 84, 98, 119, 142, 166, 167, 226, 230, 250, 279, 285, 287, 294, 322, 341, 354, 367, 368, 370, 371, 375, 376, 378, 381, 382, 393, 397, 398, 403, 404, 426, 431, 470, 542, 543, 590, 629, 639, 640, 641, 647, 649, 650, 657, 658, 659, 660, 661, 758, 761, 770, 771, 878, 886, 887, 888, 889, 915, 951, 954, 961, 962, 963, 965, 977, 984, 988, 992, 999, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "enjoi": 42, "edit": [42, 365, 367, 368, 371, 372, 376, 379, 384, 511, 515, 809, 956, 958, 963, 969, 997], "158": [42, 400, 650], "manojkumarsivaraj334": 42, "joblib": [42, 54, 71, 276, 307, 363, 366, 368, 371, 377, 379, 381, 384, 386, 387, 392, 394, 404, 419, 423, 426, 427, 429, 431, 433, 438, 439, 442, 445, 448, 453, 489, 512, 516, 517, 518, 520, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 838, 839, 840, 841, 873, 874, 928, 929, 930, 932, 947, 962, 983, 1004, 1005, 1007, 1009, 1011, 1012, 1013, 1015, 1016, 1019], "cpu_count": [42, 276, 930], "n_center": [42, 493], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 56, 57, 163, 277, 290, 301, 310, 340, 364, 393, 424, 425, 428, 429, 430, 433, 440, 441, 443, 485, 530, 826, 984, 999, 1004, 1008, 1011, 1016], "subcluster_centers_": [42, 424], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 63], "256": [42, 48, 53, 120, 207, 215, 340, 355, 363, 393, 400, 430, 449, 518, 527, 544, 835, 866, 876, 997, 1018], "max_no_improv": [42, 60, 63, 430, 518, 519, 520, 527, 1018, 1019], "t_mini_batch": [42, 63], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 57, 59, 60, 62, 63, 94, 310, 340, 422, 425, 428, 429, 430, 996], "839": [42, 67, 318, 661], "plot_birch_vs_minibatchkmean": [42, 67], "bisectingkmean": [43, 393, 1018, 1019], "__doc__": [43, 74, 153, 234, 244, 381], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 61], "variant": [43, 94, 159, 162, 163, 256, 309, 310, 340, 341, 374, 393, 396, 398, 401, 403, 430, 441, 471, 474, 475, 493, 496, 524, 540, 541, 546, 596, 600, 603, 604, 608, 611, 619, 620, 622, 626, 653, 685, 778, 782, 784, 785, 786, 795, 801, 822, 840, 875, 952, 958, 959, 960, 961, 962, 964, 965, 976, 983, 997, 1004, 1012], "algorithm_nam": 43, "algo": [43, 104], "hide": [43, 376, 814, 815, 816, 817, 818, 1007, 1012], "flat": [43, 94, 100, 167, 217, 218, 219, 254, 393, 401, 422, 429, 442, 490, 969, 996, 1004, 1005], "label_out": 43, "032": [43, 67, 339], "plot_bisect_kmean": [43, 67], "null": [44, 70, 166, 167, 168, 256, 262, 397, 629, 650, 661, 685, 711, 737, 773, 804, 958, 959, 962, 977, 1014], "mismatch": [44, 961, 1013], "warn": [44, 61, 71, 196, 211, 259, 276, 293, 294, 302, 354, 357, 368, 371, 372, 373, 381, 387, 401, 405, 428, 430, 440, 477, 514, 531, 534, 535, 538, 539, 540, 541, 545, 546, 547, 552, 553, 554, 555, 556, 557, 559, 583, 611, 617, 651, 671, 674, 675, 693, 694, 709, 710, 718, 763, 764, 767, 814, 815, 816, 818, 843, 844, 881, 882, 883, 884, 886, 887, 888, 889, 898, 899, 905, 915, 928, 930, 932, 948, 949, 951, 962, 972, 995, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "noisy_circl": [44, 61], "noisy_moon": [44, 61], "no_structur": [44, 61], "anisotropicli": [44, 61], "170": [44, 56, 61, 374], "x_aniso": [44, 56, 61], "aniso": [44, 61], "plot_num": [44, 61, 225], "default_bas": [44, 61], "quantil": [44, 53, 62, 90, 109, 111, 163, 174, 215, 298, 301, 302, 379, 400, 420, 421, 439, 500, 533, 541, 543, 638, 651, 703, 725, 728, 730, 802, 844, 856, 857, 858, 867, 868, 962, 972, 984, 999, 1004, 1008, 1011, 1013, 1017, 1018, 1020], "damp": [44, 393, 422, 435], "min_sampl": [44, 49, 64, 379, 381, 393, 404, 426, 431, 437, 438, 652, 958, 1013, 1017], "xi": [44, 64, 365, 393, 396, 401, 431, 437, 490, 976, 1015], "min_cluster_s": [44, 64, 431, 437, 1013], "220": [44, 1004], "i_dataset": [44, 61, 225], "algo_param": [44, 61], "param": [44, 60, 61, 70, 120, 122, 123, 217, 231, 254, 256, 264, 268, 280, 293, 368, 370, 381, 400, 403, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 789, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 1010, 1014, 1015, 1017, 1018], "estimate_bandwidth": [44, 62, 393, 429, 442], "symmetr": [44, 121, 157, 169, 198, 381, 391, 393, 433, 443, 444, 455, 500, 508, 510, 671, 675, 676, 685, 686, 696, 697, 698, 704, 708, 716, 717, 735, 737, 743, 765, 773, 775, 776, 948, 951, 958, 962, 965], "meanshift": [44, 310, 393, 422, 1007, 1008, 1009, 1012, 1014, 1015, 1018, 1019, 1020], "bin_seed": [44, 62, 429, 442, 1015], "two_mean": 44, "spectralclust": [44, 310, 393, 422, 965, 1004, 1005, 1014, 1016, 1017, 1018, 1019, 1020], "nearest_neighbor": [44, 433, 672], "average_linkag": 44, "gmm": [44, 163, 240, 242, 245, 246, 247, 248, 485, 493, 776, 796, 961, 1004, 1005, 1008, 1009, 1010], "gaussianmixtur": [44, 56, 242, 243, 244, 245, 246, 247, 399, 775, 1010, 1012, 1013, 1017, 1018], "covariance_typ": [44, 242, 243, 245, 246, 247, 775, 776], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 61, 294, 376, 377], "catch_warn": [44, 61, 293, 294], "filterwarn": [44, 61, 211, 293, 294, 368, 972], "fulli": [44, 115, 121, 354, 362, 363, 381, 399, 400, 402, 425, 428, 538, 539, 545, 546, 886, 887, 888, 889, 890, 892, 951, 952, 958, 967, 975, 982, 1017, 1018], "t1": [44, 46, 61, 211, 219, 222, 225], "ff7f00": [44, 61, 225], "4daf4a": [44, 61], "a65628": [44, 61], "984ea3": [44, 61], "999999": [44, 61], "e41a1c": [44, 61], "dede00": [44, 61, 62], "000000": [44, 166, 185, 214, 256, 302, 717], "transax": [44, 61, 221, 225, 243, 284, 300], "343": [44, 67, 329, 337], "plot_cluster_comparison": [44, 67], "bad": [45, 59, 60, 149, 166, 339, 350, 368, 393, 403, 673, 726, 951, 958, 959, 964, 970, 996, 1004], "eight": [45, 997], "deliv": [45, 354, 986], "though": [45, 145, 172, 175, 262, 281, 300, 302, 340, 341, 350, 354, 362, 365, 368, 370, 380, 381, 393, 398, 399, 400, 401, 402, 680, 784, 786, 878, 951, 952, 954, 959, 962, 965, 972, 976, 997, 1012], "3d": [45, 48, 66, 89, 100, 101, 167, 193, 217, 219, 221, 401, 487, 567, 925, 1011, 1012, 1014], "mplot3d": [45, 66, 89, 100, 101, 167, 193, 217, 219], "noqa": [45, 66, 89, 100, 101, 121, 160, 161, 167, 193, 217, 219, 267, 268, 308, 372, 560, 561, 608, 780, 781, 951, 1013], "f401": [45, 66, 89, 100, 101, 167, 193, 217, 219], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 128, 166, 233, 300, 308, 350, 387, 400, 543, 715, 844, 951, 962, 972, 976, 1015, 1016], "elev": [45, 66, 89, 100, 101, 167, 193, 217, 221], "azim": [45, 66, 89, 100, 101, 167, 193, 217, 221], "xaxi": [45, 89, 100, 101, 193, 217, 219, 222, 276, 281, 339], "set_ticklabel": [45, 89, 100, 101, 193, 339], "zaxi": [45, 89, 100, 101, 193, 217], "petal": [45, 89, 103, 105, 117, 238, 308, 311, 365, 394, 891, 978, 994, 995], "sepal": [45, 89, 103, 105, 117, 150, 179, 238, 308, 311, 323, 365, 972, 994, 995], "length": [45, 69, 88, 89, 91, 103, 105, 117, 148, 149, 150, 153, 154, 156, 172, 179, 232, 235, 238, 308, 311, 323, 341, 361, 365, 368, 376, 377, 381, 394, 398, 400, 401, 403, 427, 471, 489, 490, 493, 496, 504, 532, 544, 562, 563, 570, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 613, 627, 628, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 662, 665, 761, 777, 780, 781, 791, 805, 807, 810, 811, 813, 821, 822, 823, 825, 827, 865, 891, 898, 900, 904, 920, 921, 933, 936, 961, 968, 972, 988, 994, 995, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1020], "set_zlabel": [45, 89, 193], "setosa": [45, 89, 101, 103, 265, 266, 365, 485, 988, 995], "versicolour": [45, 89, 101, 103, 365, 995], "virginica": [45, 89, 101, 103, 265, 266, 365, 485, 962, 995], "text3d": [45, 101], "reorder": [45, 101, 381, 678, 699, 983, 1012], "308": [45, 67, 616], "plot_cluster_iri": [45, 67], "voxel": [46, 65, 566], "multipl": [46, 68, 75, 91, 104, 116, 117, 163, 166, 190, 230, 256, 268, 278, 306, 354, 355, 356, 362, 364, 365, 368, 370, 371, 372, 373, 379, 381, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 426, 441, 445, 447, 448, 450, 455, 469, 472, 473, 476, 477, 478, 484, 485, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 534, 535, 536, 537, 540, 541, 542, 543, 544, 562, 580, 588, 589, 591, 592, 608, 613, 615, 620, 621, 622, 623, 627, 628, 631, 633, 634, 635, 638, 641, 642, 643, 644, 647, 648, 649, 652, 654, 657, 659, 660, 670, 671, 673, 674, 675, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 768, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 805, 809, 810, 811, 812, 813, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 841, 844, 856, 867, 870, 871, 878, 879, 880, 883, 894, 909, 914, 915, 933, 936, 954, 957, 958, 959, 963, 964, 965, 969, 970, 975, 976, 978, 982, 983, 988, 997, 1004, 1005, 1007, 1010, 1011, 1014, 1015, 1016, 1017, 1019], "partli": [46, 749], "procedur": [46, 55, 121, 145, 176, 184, 246, 258, 301, 326, 339, 350, 368, 370, 379, 380, 381, 382, 391, 392, 395, 397, 398, 400, 402, 512, 518, 519, 521, 526, 527, 528, 534, 535, 536, 537, 540, 541, 574, 576, 583, 590, 625, 653, 655, 668, 708, 765, 836, 837, 856, 867, 933, 951, 958, 964, 970, 972, 975, 976, 977, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "solut": [46, 175, 185, 187, 200, 201, 210, 225, 231, 309, 326, 366, 370, 381, 390, 393, 395, 397, 398, 401, 402, 403, 430, 432, 434, 512, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 591, 627, 629, 631, 633, 635, 636, 637, 639, 641, 643, 645, 646, 647, 648, 649, 650, 653, 655, 657, 658, 659, 660, 661, 663, 664, 666, 667, 668, 775, 776, 791, 828, 836, 837, 955, 956, 958, 959, 961, 966, 968, 976, 977, 981, 986, 992, 995, 997, 1004, 1007, 1017, 1018, 1019], "closest": [46, 63, 370, 393, 422, 424, 425, 428, 429, 430, 440, 634, 759, 760, 809, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 953, 956, 963, 965, 995], "partit": [46, 65, 69, 124, 126, 256, 294, 390, 393, 397, 400, 430, 432, 434, 443, 492, 538, 539, 540, 541, 544, 545, 546, 685, 686, 696, 766, 827, 886, 887, 888, 889, 961, 965, 968, 972, 978, 997], "cluster_qr": [46, 393, 433, 443, 1018], "qr": [46, 198, 515, 522, 525, 914, 915, 959, 1010], "pivot": [46, 267, 268], "cheung": [46, 1005], "andrew": [46, 393, 443, 672, 676, 698, 717, 773, 854, 966, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "knyazev": [46, 393, 433, 443, 676, 1014, 1017, 1018], "ucdenv": 46, "skimag": [46, 47, 362, 996], "spectral_clust": [46, 65, 1012, 1014, 1016, 1017, 1018, 1019], "orig_coin": [46, 47], "speed": [46, 47, 56, 69, 97, 161, 167, 182, 185, 189, 234, 276, 308, 315, 339, 341, 356, 357, 368, 371, 377, 379, 381, 391, 393, 398, 401, 404, 425, 426, 428, 429, 430, 431, 433, 438, 440, 441, 442, 443, 512, 513, 591, 608, 613, 614, 615, 620, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 662, 665, 673, 775, 776, 783, 803, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 854, 915, 951, 959, 961, 963, 976, 986, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "down": [46, 47, 80, 211, 212, 219, 229, 230, 259, 295, 298, 350, 362, 371, 376, 395, 398, 425, 431, 437, 571, 574, 575, 620, 630, 754, 758, 761, 854, 857, 858, 868, 880, 883, 890, 958, 988, 996, 1012], "alias": [46, 47, 366, 368, 371, 428, 440, 1004, 1008, 1018], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 996], "anti_alias": [46, 47, 996], "img_to_graph": [46, 65, 401, 1007, 1017], "exponenti": [46, 74, 148, 153, 281, 286, 399, 400, 403, 430, 517, 535, 540, 595, 600, 603, 620, 624, 738, 739, 819, 820, 824, 836, 837, 854, 954, 958, 962, 977, 995, 1011, 1017], "beta": [46, 84, 165, 374, 391, 393, 396, 517, 519, 521, 528, 625, 709, 710, 716, 722, 763, 773, 775, 962, 995, 1006, 1009, 1011, 1013, 1014], "voronoi": [46, 65, 393], "n_region": 46, "extra": [46, 117, 233, 276, 341, 366, 367, 369, 372, 381, 400, 401, 420, 425, 428, 440, 445, 513, 538, 539, 547, 571, 572, 681, 682, 683, 800, 823, 888, 889, 905, 961, 965, 1004, 1007, 1009, 1010, 1012, 1017, 1019], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 433, 443, 669, 672, 676, 1014, 1017, 1018, 1019], "amg": [46, 65, 393, 433, 443, 672, 676, 1014, 1018, 1019], "pyamg": [46, 384, 386, 393, 433, 443, 672, 676], "toler": [46, 72, 160, 187, 189, 212, 213, 341, 363, 370, 377, 393, 405, 425, 428, 433, 440, 443, 452, 453, 459, 463, 464, 465, 512, 513, 514, 516, 517, 521, 522, 523, 524, 525, 526, 528, 529, 540, 541, 542, 543, 608, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 657, 659, 660, 662, 663, 664, 665, 669, 670, 671, 672, 674, 675, 676, 819, 820, 824, 828, 836, 837, 873, 874, 878, 879, 880, 881, 882, 883, 884, 948, 958, 962, 976, 977, 993, 1016, 1017, 1018, 1019], "eigen_tol": [46, 433, 443, 672, 676, 1005, 1018, 1019], "todo": [46, 229, 372, 376, 381, 393, 1020], "21243": 46, "assign_label": [46, 393, 433, 443], "individu": [46, 59, 79, 107, 112, 128, 132, 140, 157, 163, 164, 170, 196, 214, 226, 259, 261, 306, 334, 355, 369, 372, 375, 377, 381, 383, 390, 394, 397, 400, 401, 419, 433, 443, 445, 477, 482, 484, 490, 536, 537, 540, 541, 543, 544, 546, 548, 549, 550, 551, 584, 590, 591, 613, 614, 624, 626, 638, 639, 640, 649, 652, 653, 654, 655, 656, 657, 658, 659, 668, 693, 700, 708, 714, 730, 731, 765, 777, 791, 807, 811, 812, 814, 815, 816, 817, 818, 837, 840, 848, 849, 851, 852, 853, 856, 858, 859, 863, 864, 865, 878, 879, 962, 963, 972, 977, 992, 997, 999, 1005, 1008, 1010, 1016, 1018], "comment": [46, 339, 366, 367, 368, 369, 371, 372, 376, 382, 468, 560, 962], "paus": 46, "21194": [46, 1017], "54": [46, 172, 196, 199, 363, 365, 393, 472, 1005, 1006], "344": [46, 67, 132], "plot_coin_segment": [46, 67], "spatial": [47, 49, 169, 213, 294, 363, 381, 393, 404, 426, 431, 433, 438, 660, 673, 680, 740, 743, 758, 759, 760, 761, 770, 771, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 958, 965, 972, 1006, 1010, 1017], "constrain": [47, 94, 118, 125, 167, 187, 292, 307, 324, 326, 361, 381, 392, 393, 398, 400, 490, 542, 543, 616, 639, 671, 675, 804, 958, 961, 1008], "piec": [47, 197, 355, 961], "grid_to_graph": [47, 51, 54, 393, 401, 996, 1017], "st": [47, 66, 256, 311, 1007, 1010, 1012], "149": [47, 145, 963, 1004], "4697": 47, "483": [47, 67, 629], "plot_coin_ward_segment": [47, 67], "vq": [48, 57], "palac": 48, "china": [48, 393, 487, 488, 565], "615": 48, "literatur": [48, 153, 256, 340, 365, 368, 374, 376, 379, 380, 393, 396, 398, 400, 425, 428, 430, 482, 517, 519, 521, 528, 536, 537, 569, 572, 689, 775, 951, 954, 958, 962, 1014], "codebook": [48, 547, 809], "palett": [48, 166, 256, 279], "byte": [48, 53, 401, 468, 484, 489, 490, 563, 569, 570, 572, 927, 995, 997, 1004, 1011, 1012, 1019], "wherea": [48, 53, 66, 79, 108, 124, 200, 210, 257, 258, 259, 265, 303, 335, 356, 397, 400, 546, 639, 640, 779, 795, 807, 954, 961, 963, 965, 972, 978, 1017], "rgb": [48, 363, 401, 474, 475, 564, 565, 568], "gif": 48, "pick": [48, 59, 169, 232, 264, 310, 314, 363, 368, 372, 393, 400, 425, 441, 504, 654, 888, 889, 951, 958, 959, 961, 976, 1015], "018": [48, 256, 311, 312, 340, 453], "043": [48, 374], "064": [48, 191, 215, 374, 970], "robertlayton": 48, "pairwise_distances_argmin": [48, 63, 310, 760, 1012, 1018, 1019, 1020], "load_sample_imag": [48, 564, 565, 1013], "n_color": 48, "photo": 48, "jpg": [48, 487, 565], "255": [48, 97, 276, 294, 309, 363, 474, 475, 542, 543], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 235], "book": [48, 69, 425, 428, 430, 809, 814, 818, 958, 959, 960, 963, 980, 1016], "alongsid": [48, 368, 374, 381, 384, 402, 962, 969, 982, 983], "513": [48, 67, 828, 965], "plot_color_quant": [48, 67], "750": [49, 116, 256], "math": [49, 69, 234, 256, 257, 365, 368, 384, 744], "db": [49, 393], "n_noise_": 49, "come": [49, 66, 69, 79, 85, 99, 100, 148, 230, 306, 334, 339, 340, 354, 356, 361, 365, 368, 369, 372, 376, 379, 381, 384, 393, 397, 400, 401, 421, 431, 437, 453, 531, 686, 773, 798, 880, 883, 951, 952, 956, 959, 961, 965, 968, 977, 988, 1004, 1015, 1018, 1020], "handi": [49, 70, 340, 341, 369, 1020], "883": 49, "917": 49, "916": 49, "626": [49, 182], "asign": [49, 340], "unique_label": [49, 340, 370, 377], "core_samples_mask": 49, "zeros_lik": [49, 198, 265], "bool": [49, 65, 80, 161, 214, 348, 368, 405, 406, 407, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 500, 503, 504, 505, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 683, 684, 688, 689, 690, 692, 693, 694, 695, 706, 707, 708, 709, 710, 711, 718, 721, 722, 730, 731, 734, 736, 741, 743, 747, 748, 749, 754, 758, 762, 763, 764, 765, 767, 769, 772, 774, 775, 776, 777, 780, 781, 782, 783, 791, 795, 796, 799, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 909, 915, 916, 924, 927, 933, 935, 943, 948, 949, 950, 952, 1013, 1016, 1017], "core_sample_indices_": [49, 426], "class_member_mask": 49, "markerfacecolor": [49, 60, 62, 63], "plot_dbscan": [49, 67, 404, 426], "constitut": [50, 381, 397, 400, 431, 437, 569, 570, 572, 966], "standpoint": 50, "proce": [50, 142, 177, 366, 372, 396, 397, 400, 422, 958], "reassign": [50, 368, 428, 430, 1005, 1009], "success": [50, 163, 249, 263, 272, 350, 388, 393, 397, 398, 400, 496, 545, 560, 777, 780, 781, 798, 883, 965, 986, 992, 996, 999, 1016], "becom": [50, 56, 71, 79, 198, 258, 276, 299, 303, 326, 339, 350, 362, 368, 370, 372, 376, 381, 382, 393, 395, 400, 401, 403, 422, 431, 435, 436, 438, 562, 569, 570, 572, 583, 600, 608, 639, 640, 657, 659, 853, 878, 879, 885, 957, 958, 959, 961, 965, 972, 977, 995, 997, 1005, 1012, 1013, 1016, 1017, 1018, 1019], "fetch_olivetti_fac": [50, 94, 116, 233, 363, 1012, 1013, 1014], "extract_patches_2d": [50, 97, 401, 1012], "patch_siz": [50, 97, 401, 564, 565], "buffer": [50, 1017], "max_patch": [50, 401, 564, 565, 1012], "4i": 50, "dt": [50, 97, 108, 129, 400, 401, 978], "2400": 50, "700": [50, 308], "800": [50, 119, 309, 363, 565, 673], "1100": 50, "1200": [50, 120, 298, 400], "1300": 50, "1400": [50, 455], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 309], "2200": [50, 363, 474], "2300": [50, 185], "ntrain": 50, "489": [50, 67], "plot_dict_face_patch": [50, 67], "agglo": [51, 427, 996], "featureagglomer": [51, 54, 422, 423, 979, 996, 1007, 1013, 1014, 1017, 1018], "x_reduc": [51, 89, 126, 427, 996], "x_restor": 51, "images_restor": 51, "vmax": [51, 81, 94, 97, 105, 151, 154, 175, 187, 212, 230, 245, 251, 294, 326], "154": [51, 67, 295, 632, 963], "plot_digits_agglomer": [51, 67], "rich": [52, 376, 379, 393, 421, 986, 1015, 1018], "richer": [52, 104, 393], "uneven": [52, 251, 393, 397], "patholog": [52, 961, 1010], "clean": [52, 70, 195, 350, 360, 366, 399, 968, 972, 1014], "fring": [52, 393], "sensibl": [52, 160, 340, 370, 958, 972], "resampl": [52, 121, 153, 166, 214, 280, 377, 379, 536, 537, 936, 983, 1013, 1017], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 217, 218, 219, 669, 670, 671, 673, 959, 1005, 1010, 1014, 1018, 1019], "501": [52, 67], "plot_digits_linkag": [52, 67], "raccoon": [53, 97, 398], "addition": [53, 71, 111, 166, 196, 214, 307, 309, 340, 368, 379, 391, 401, 591, 592, 627, 633, 652, 856, 951, 952, 962, 970, 982, 1010], "adapt": [53, 108, 120, 121, 151, 241, 242, 300, 355, 366, 367, 368, 377, 400, 403, 496, 497, 498, 499, 657, 658, 659, 836, 837, 958, 964, 966, 972, 976, 982, 983, 1012, 1013], "pooch": [53, 384, 386], "instal": [53, 238, 276, 306, 307, 308, 309, 310, 311, 354, 355, 357, 368, 369, 371, 372, 374, 376, 379, 380, 386, 393, 401, 433, 443, 477, 672, 676, 930, 978, 980, 997, 1011, 1012, 1013, 1017, 1018], "raccoon_fac": [53, 97], "nbyte": [53, 229], "768": 53, "1024": [53, 104, 430, 449, 519, 876, 1017], "uint8": [53, 97, 362, 478, 487, 488, 1016], "786432": 53, "unsign": [53, 98, 363, 563, 927], "786": [53, 70], "kilobyt": 53, "shade": [53, 179, 279, 284, 322, 398], "behind": [53, 79, 370, 372, 376, 392, 395, 400, 961, 965, 974], "simplest": [53, 397, 959, 962, 995, 996], "certainli": [53, 69, 340], "compressed_raccoon_uniform": 53, "spot": [53, 227, 393], "leav": [53, 114, 122, 167, 169, 214, 263, 303, 348, 350, 354, 365, 367, 373, 381, 393, 400, 403, 423, 424, 427, 444, 484, 538, 539, 540, 541, 542, 543, 545, 546, 547, 654, 656, 779, 784, 785, 786, 787, 795, 796, 819, 820, 867, 886, 887, 888, 889, 951, 959, 965, 969, 978, 992, 995, 1004, 1011, 1013, 1015, 1016], "bin_edg": 53, "bin_edges_": [53, 299, 844], "bin_cent": [53, 196], "625": [53, 117, 132, 196, 689], "875": [53, 149, 650], "375": [53, 730, 962], "140": [53, 400, 491, 497, 498, 499, 536, 537, 963], "171": [53, 365, 374, 768, 962], "203": 53, "234": [53, 814, 818, 836, 837, 964], "axvlin": [53, 59, 72, 81, 102, 120, 130, 166, 168, 185, 262, 993], "get_ybound": 53, "state": [53, 56, 69, 71, 79, 198, 229, 236, 242, 262, 308, 350, 355, 356, 368, 370, 374, 376, 379, 381, 382, 392, 401, 406, 422, 425, 428, 430, 435, 440, 456, 525, 570, 660, 780, 781, 789, 791, 793, 819, 820, 826, 873, 874, 901, 951, 952, 958, 964, 967, 974, 982, 983, 986, 1006, 1008, 1010, 1012, 1014, 1017], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 242, 248, 363, 1004], "79431128": 53, "185": [53, 157, 220, 223, 365, 374, 836, 837], "18557327": 53, "224": [53, 84, 112, 126, 132, 393, 705], "01945707": 53, "save": [53, 69, 71, 295, 367, 368, 372, 374, 375, 376, 381, 387, 397, 405, 449, 515, 516, 608, 819, 820, 876, 958, 962, 978, 986, 997, 1004, 1007, 1011, 1014], "verifi": [53, 59, 166, 196, 368, 373, 946, 965], "6291456": 53, "surpris": [53, 167, 958, 982, 1006], "x8": 53, "ndarrai": [53, 57, 89, 196, 238, 254, 255, 256, 368, 369, 370, 374, 375, 389, 401, 404, 405, 408, 409, 411, 413, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 696, 699, 702, 703, 704, 707, 708, 718, 725, 726, 728, 730, 731, 733, 734, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 896, 897, 898, 903, 904, 914, 915, 916, 917, 920, 921, 924, 926, 927, 931, 934, 935, 937, 938, 939, 940, 943, 948, 949, 962, 977, 983, 1007, 1011, 1014, 1015, 1018, 1019], "practic": [53, 70, 79, 85, 97, 118, 148, 165, 166, 172, 198, 225, 231, 257, 264, 282, 283, 308, 326, 355, 357, 368, 370, 371, 374, 376, 380, 381, 393, 395, 397, 398, 399, 400, 401, 403, 428, 433, 443, 502, 505, 570, 613, 614, 651, 775, 818, 871, 878, 951, 952, 956, 961, 962, 963, 964, 965, 968, 969, 972, 982, 983, 984, 986, 988, 997, 998, 999, 1006, 1010, 1012, 1014, 1016], "gain": [53, 219, 263, 276, 278, 315, 339, 340, 348, 367, 374, 376, 379, 400, 513, 538, 542, 543, 545, 706, 736, 775, 776, 808, 886, 888, 963, 967, 975, 978, 1007, 1011, 1014], "597": [53, 67, 196, 340], "plot_face_compress": [53, 67], "anova": [54, 139, 146, 163, 321, 337, 394, 485, 496, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 694, 801, 805, 839, 840, 859, 878, 883, 977], "bayesianridg": [54, 160, 175, 176, 308, 608, 625, 958, 1011, 1012, 1013, 1014, 1017, 1018], "shutil": [54, 71, 394], "tempfil": [54, 278, 306, 394, 965], "feature_select": [54, 70, 71, 73, 139, 140, 141, 142, 143, 144, 145, 163, 238, 308, 310, 329, 350, 357, 381, 394, 402, 562, 951, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "kfold": [54, 120, 134, 251, 261, 350, 397, 419, 453, 548, 549, 575, 583, 628, 632, 634, 636, 642, 644, 646, 654, 777, 780, 781, 783, 785, 787, 791, 796, 798, 799, 800, 801, 802, 803, 804, 806, 810, 813, 992, 1005, 1006, 1007, 1009, 1010, 1012, 1014], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 77, 267, 403, 982], "cachedir": [54, 71, 377, 394], "mkdtemp": [54, 394], "mem": [54, 374, 489], "n_x": [54, 566], "n_y": [54, 566, 964], "parcel": [54, 66, 393], "ward__n_clust": 54, "n_job": [54, 71, 72, 115, 116, 121, 122, 128, 135, 144, 160, 166, 167, 168, 218, 220, 236, 255, 257, 258, 260, 271, 276, 306, 307, 308, 311, 355, 368, 381, 400, 404, 419, 426, 429, 431, 433, 438, 439, 442, 445, 448, 453, 512, 516, 517, 518, 520, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 838, 841, 873, 874, 928, 930, 951, 962, 963, 965, 992, 993, 997, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 423, 427, 1004, 1008], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 94, 108, 112, 113, 123, 227, 250, 255, 263, 265, 307, 340, 344, 348, 357, 365, 367, 368, 370, 377, 382, 390, 392, 393, 397, 398, 400, 401, 404, 426, 433, 445, 468, 489, 493, 495, 501, 503, 507, 508, 512, 518, 519, 521, 531, 538, 539, 540, 541, 545, 546, 547, 548, 549, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 598, 613, 639, 640, 647, 649, 657, 658, 659, 688, 698, 707, 714, 716, 726, 743, 749, 758, 762, 768, 769, 809, 819, 820, 821, 822, 823, 825, 827, 829, 830, 834, 836, 837, 842, 858, 859, 861, 865, 878, 883, 886, 887, 888, 889, 917, 918, 919, 933, 935, 936, 956, 958, 962, 963, 966, 969, 972, 973, 974, 978, 986, 988, 1009, 1010, 1012, 1014, 1015, 1016, 1018], "return_dist": [54, 444, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 965, 1008], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 140, 402, 573, 576, 577, 579, 580, 581, 585, 586, 590, 1007, 1011, 1018], "cach": [54, 163, 257, 276, 277, 290, 354, 355, 363, 381, 423, 427, 431, 449, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 489, 777, 821, 823, 839, 840, 876, 880, 881, 882, 883, 884, 947, 965, 977, 1007, 1011, 1012, 1013, 1014, 1016, 1017, 1019], "selectpercentil": [54, 70, 238, 329, 402, 573, 576, 577, 579, 580, 584, 587, 1005, 1010, 1020], "percentag": [54, 103, 118, 187, 214, 251, 259, 262, 397, 402, 515, 522, 525, 530, 574, 575, 629, 650, 661, 684, 714, 726, 795, 796, 797, 809, 890, 892, 963, 978, 1006, 1010, 1016, 1017], "anova__percentil": [54, 329], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 363, 365, 1006], "638768": 54, "rdbu_r": [54, 81, 105, 326], "temporari": [54, 69, 71, 354, 449, 668, 761, 876, 965, 1007, 1008, 1011, 1017, 1018], "worri": [54, 959, 989], "rmtree": [54, 71, 394], "ignore_error": 54, "529": [54, 67], "plot_feature_agglomeration_vs_univariate_select": [54, 67], "recomput": [55, 235, 237, 278, 306, 450, 455, 958, 974, 1009], "intract": [55, 398, 959, 967], "unlik": [55, 166, 167, 217, 219, 246, 298, 324, 368, 370, 374, 379, 381, 395, 397, 398, 401, 431, 516, 631, 632, 635, 636, 637, 663, 664, 765, 798, 819, 820, 859, 869, 881, 958, 961, 962, 969, 977, 1004, 1010], "inferenti": 55, "capabl": [55, 85, 153, 221, 370, 381, 384, 963, 966, 977, 978, 986, 1004, 1013], "meta": [55, 69, 107, 131, 132, 163, 196, 265, 350, 362, 366, 370, 372, 379, 381, 389, 391, 392, 402, 403, 446, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 551, 556, 578, 584, 805, 812, 951, 963, 983, 984, 999, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019], "extend": [55, 66, 197, 245, 263, 326, 365, 366, 379, 381, 391, 392, 393, 398, 400, 612, 701, 808, 811, 812, 844, 846, 862, 893, 954, 962, 963, 977, 983, 984, 999, 1009, 1010, 1011, 1012, 1014, 1019], "chirag": 55, "nagpal": 55, "christo": [55, 1013, 1014, 1016, 1018], "arida": [55, 1013, 1014, 1016, 1018], "baseestim": [55, 276, 368, 380, 381, 415, 613, 614, 907, 1004, 1011, 1014, 1016, 1018, 1019], "clone": [55, 121, 156, 167, 295, 350, 366, 368, 371, 372, 374, 376, 381, 391, 394, 403, 419, 446, 550, 551, 578, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 783, 803, 806, 810, 813, 839, 840, 875, 983, 1004, 1010, 1012, 1016, 1020], "metaestim": [55, 381, 875, 1008, 1017, 1018], "available_if": [55, 381, 923, 1017, 1018], "check_is_fit": [55, 370, 377, 381, 1014, 1017, 1018], "5000": [55, 182, 211, 212, 214, 308], "_classifier_ha": 55, "deleg": [55, 374, 416, 891, 923, 1008, 1010, 1016], "unfit": [55, 394, 416, 445, 550, 551, 583, 592, 1012, 1014], "classifier_": 55, "inductivecluster": 55, "clusterer_": 55, "plot_scatt": 55, "cluster_label": [55, 59], "x_new": [55, 394, 398, 402, 415, 424, 425, 427, 428, 430, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 530, 548, 550, 551, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 616, 619, 620, 621, 622, 623, 669, 670, 671, 672, 673, 828, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 974, 988], "y_new": 55, "declar": [55, 218, 350, 368, 369, 370, 374, 381, 425, 428, 440, 452, 453, 459, 671, 675, 1011, 1015], "membership": [55, 382, 390, 392, 393, 492, 493, 494, 495, 496, 500, 503, 977], "inductive_learn": 55, "probable_clust": 55, "response_method": [55, 111, 124, 129, 179, 188, 205, 259, 279, 284, 287, 303, 322, 323, 345, 612, 613, 614, 679, 681, 683], "115": [55, 67, 167, 970], "plot_inductive_clust": [55, 67], "meant": [56, 145, 363, 370, 377, 455, 474, 658, 825, 928, 929, 952, 966, 968, 972, 1005], "unintuit": 56, "possibli": [56, 85, 145, 196, 211, 340, 365, 367, 376, 387, 393, 400, 401, 432, 434, 570, 814, 815, 816, 817, 818, 883, 884, 886, 887, 888, 889, 951, 954, 959, 965, 972, 1019], "undesir": [56, 149, 403], "phil": [56, 1009], "roth": [56, 1009, 1012, 1019], "mr": [56, 311, 1005, 1008, 1018], "isotrop": [56, 60, 99, 150, 152, 217, 219, 393, 395, 403, 493, 500, 513, 596, 600, 601, 603, 604], "spheric": [56, 84, 124, 219, 243, 245, 246, 289, 364, 744, 775, 776, 958, 961, 965, 982], "anisotrop": [56, 150, 403, 598, 600, 603], "ellipt": [56, 958], "60834549": 56, "63667341": 56, "40887718": 56, "85253229": 56, "x_vari": 56, "y_vari": 56, "unequ": [56, 1012], "x_filter": 56, "unevenli": [56, 196, 251], "y_filter": 56, "set_i": 56, "scenario": [56, 69, 148, 172, 259, 350, 375, 397, 400, 518, 524, 526, 527, 956, 962, 972, 1014], "appropri": [56, 102, 153, 166, 265, 334, 344, 350, 366, 368, 370, 376, 381, 392, 393, 397, 399, 400, 404, 426, 431, 438, 470, 471, 472, 477, 481, 482, 483, 485, 486, 491, 558, 563, 572, 573, 576, 577, 579, 580, 581, 653, 655, 668, 690, 821, 822, 823, 825, 827, 829, 830, 831, 946, 958, 961, 962, 972, 1008, 1011, 1017, 1020], "criteria": [56, 163, 174, 185, 204, 215, 246, 256, 376, 393, 402, 447, 463, 464, 465, 482, 538, 539, 540, 541, 545, 546, 627, 633, 637, 639, 640, 652, 673, 840, 859, 878, 879, 886, 887, 888, 889, 952, 961, 966, 976, 996, 1007, 1012, 1015], "knowledg": [56, 116, 166, 213, 234, 256, 357, 363, 368, 371, 374, 380, 381, 393, 397, 400, 404, 426, 492, 536, 537, 544, 701, 716, 720, 763, 808, 962, 963, 974, 997], "consequ": [56, 102, 214, 256, 257, 298, 323, 350, 398, 400, 542, 543, 547, 636, 637, 952, 958, 962, 978, 1013, 1015, 1020], "likelihood": [56, 76, 78, 79, 80, 82, 102, 148, 149, 150, 152, 153, 154, 155, 157, 163, 184, 214, 245, 249, 256, 262, 272, 295, 298, 370, 381, 391, 395, 398, 400, 403, 419, 450, 451, 452, 453, 454, 455, 456, 457, 458, 496, 513, 517, 522, 530, 531, 532, 591, 592, 626, 639, 693, 721, 775, 776, 777, 802, 805, 824, 835, 855, 866, 880, 881, 883, 884, 958, 961, 964, 972, 977, 1007, 1008, 1013, 1019], "inertia": [56, 57, 60, 340, 393, 425, 428, 430, 433, 440, 441, 443, 444, 1015], "common_param": [56, 121, 167, 231, 258, 259], "unexpect": [56, 350, 368, 373, 376, 387, 516, 677, 962, 977, 1006, 1012, 1013, 1016, 1018], "suffic": [56, 57, 370, 997], "detail": [56, 110, 112, 115, 117, 122, 128, 167, 184, 185, 222, 227, 230, 231, 236, 238, 247, 254, 263, 282, 283, 306, 307, 308, 309, 310, 311, 344, 346, 347, 350, 354, 355, 356, 360, 361, 362, 363, 366, 368, 370, 372, 373, 374, 376, 379, 380, 381, 382, 384, 387, 392, 393, 396, 397, 398, 400, 402, 403, 404, 415, 416, 419, 425, 426, 428, 429, 431, 433, 438, 439, 440, 442, 443, 445, 447, 448, 449, 453, 477, 505, 512, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 529, 530, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 595, 600, 603, 612, 613, 614, 615, 620, 626, 628, 632, 634, 636, 637, 638, 639, 640, 642, 644, 646, 647, 649, 653, 655, 657, 659, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 694, 754, 758, 759, 760, 761, 776, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 817, 821, 822, 824, 825, 827, 829, 830, 832, 833, 838, 841, 843, 844, 856, 867, 873, 874, 876, 880, 883, 886, 887, 888, 889, 909, 928, 951, 952, 956, 960, 961, 962, 963, 965, 966, 968, 975, 984, 985, 986, 988, 994, 997, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "propos": [56, 77, 78, 276, 363, 368, 370, 379, 381, 393, 395, 400, 405, 406, 431, 456, 516, 588, 589, 657, 658, 659, 836, 837, 958, 961, 965, 976, 980, 1011], "constraint": [56, 66, 94, 107, 132, 163, 191, 251, 293, 294, 295, 307, 368, 379, 398, 401, 468, 489, 490, 542, 543, 616, 795, 796, 931, 951, 953, 958, 959, 976, 1008, 1011, 1012, 1015, 1017, 1019], "inflat": [56, 165, 166, 168, 393, 397, 962], "allevi": [56, 175, 393, 964], "fastest": [56, 254, 341, 428, 651, 653, 655, 668, 914, 915, 961], "lost": [56, 81, 363, 369, 379, 959, 962], "restart": [56, 371, 376, 428, 512, 518, 519, 524, 526, 527, 591, 592, 959, 1017], "163": [56, 67, 365, 970], "plot_kmeans_assumpt": [56, 67], "judg": [57, 202, 393, 992], "definit": [57, 80, 184, 196, 263, 276, 340, 368, 369, 370, 381, 383, 393, 395, 396, 398, 508, 510, 516, 592, 609, 673, 689, 699, 708, 738, 775, 776, 951, 954, 956, 958, 960, 962, 965, 976, 981, 999, 1008, 1012, 1019], "shorthand": [57, 381, 394, 448, 542, 543, 840, 841, 1007], "homo": 57, "compl": 57, "mea": 57, "context": [57, 234, 238, 276, 354, 355, 362, 367, 369, 380, 381, 393, 394, 399, 400, 401, 403, 404, 419, 426, 429, 431, 433, 438, 439, 442, 445, 448, 449, 453, 512, 516, 517, 518, 520, 523, 524, 525, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 607, 608, 611, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 838, 841, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 952, 958, 962, 968, 972, 976, 983, 986, 995, 1004, 1011, 1012, 1017], "n_digit": 57, "1797": [57, 88, 254, 295, 314, 365, 427, 483, 513, 514, 515, 516, 580, 581, 669, 670, 671, 672, 965, 994], "bench_k_mean": 57, "tabl": [57, 214, 256, 368, 369, 372, 377, 393, 401, 563, 639, 661, 777, 791, 816, 927, 958, 962, 963, 968, 982, 1005], "fit_tim": [57, 118, 185, 204, 258, 397, 802, 803], "inertia_": [57, 60, 63, 425, 428, 430, 1015], "clustering_metr": 57, "sample_s": [57, 230, 340, 771], "formatter_result": 57, "determinist": [57, 121, 355, 364, 370, 381, 393, 425, 428, 430, 432, 433, 434, 439, 440, 443, 532, 540, 541, 545, 546, 564, 565, 672, 676, 788, 789, 835, 886, 887, 954, 958, 1005, 1008, 1010, 1012, 1013, 1016, 1019], "ttime": 57, "tinertia": 57, "thomo": 57, "tcompl": 57, "tv": 57, "tari": 57, "tami": 57, "tsilhouett": 57, "__________________________________________________________________________________": 57, "050": [57, 970], "69662": 57, "680": 57, "719": 57, "699": [57, 340], "570": [57, 365, 995], "695": [57, 254], "181": [57, 63, 67, 231, 295, 374], "029": [57, 340, 970], "69707": 57, "675": [57, 148], "716": [57, 494], "694": [57, 106], "560": [57, 196, 231, 498, 499], "691": [57, 702], "174": [57, 120, 295, 374, 565], "012": [57, 142, 146, 169, 172], "72686": 57, "636": [57, 374], "658": [57, 85], "647": 57, "521": 57, "643": [57, 229, 254], "reduced_data": 57, "mesh": [57, 117, 126, 150, 230, 284, 292, 300, 319, 322], "169": [57, 295], "mark": [57, 91, 140, 161, 260, 267, 360, 368, 370, 372, 376, 377, 381, 393, 516, 588, 589, 592, 613, 639, 832, 833, 873, 874, 891, 905, 910, 915, 958, 986, 999, 1004, 1005, 1010, 1012, 1013], "724": [57, 67], "plot_kmeans_digit": [57, 67], "kmeans_plusplu": [58, 393, 1016], "4000": [58, 123, 244], "centers_init": 58, "4eacc5": [58, 63], "ff9c34": [58, 63], "4e9a06": [58, 63], "cluster_data": 58, "066": [58, 67, 254, 629], "plot_kmeans_plusplu": [58, 67], "wrong": [59, 196, 282, 339, 350, 365, 368, 370, 401, 485, 706, 736, 771, 962, 968, 977, 1007, 1009, 1011, 1012, 1013, 1014, 1017], "wide": [59, 60, 112, 229, 299, 379, 393, 398, 401, 951, 958, 982, 986, 997, 1004, 1006], "ambival": 59, "thick": [59, 286, 965], "ow": 59, "7049787496083262": 59, "5882004012129721": 59, "6505186632729437": 59, "5662344175321901": 59, "4358297989156284": 59, "silhouette_sampl": [59, 771, 1008, 1010, 1012], "distinct": [59, 256, 316, 339, 341, 363, 370, 373, 381, 397, 400, 401, 570, 778, 787, 795, 853, 854, 873, 874, 951, 958, 965, 968, 997, 1012], "center_box": [59, 493], "range_n_clust": 59, "set_size_inch": [59, 134, 235], "lie": [59, 84, 144, 166, 230, 298, 316, 324, 326, 398, 400, 587, 827, 829, 830, 831, 956, 959, 962, 972, 977], "insert": [59, 166, 196, 379, 393, 468, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 893], "blank": [59, 373, 952, 978], "demarc": 59, "perspect": [59, 196, 354, 363, 379, 382, 511, 624, 878, 955], "silhouette_avg": 59, "sample_silhouette_valu": 59, "y_lower": [59, 121], "aggreg": [59, 113, 214, 259, 265, 310, 393, 400, 515, 536, 537, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 963, 965, 972], "ith_cluster_silhouette_valu": 59, "size_cluster_i": 59, "y_upper": [59, 121], "fill_betweenx": 59, "2nd": [59, 89, 156, 303, 393, 404, 426, 511, 972, 1019], "lw": [59, 77, 78, 80, 98, 103, 104, 190, 197, 199, 202, 206, 213, 220, 244, 251, 266, 271, 281, 298, 316, 333], "fontweight": [59, 191], "bold": [59, 121, 185, 191, 368], "186": [59, 67, 196, 295, 374, 768, 962], "plot_kmeans_silhouette_analysi": [59, 67], "reach": [60, 145, 196, 198, 212, 214, 258, 310, 326, 348, 373, 382, 384, 393, 398, 402, 431, 438, 489, 490, 574, 575, 608, 626, 627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 647, 648, 649, 657, 658, 659, 660, 662, 663, 664, 665, 709, 710, 763, 775, 776, 836, 837, 875, 951, 962, 966, 976, 978, 986, 1015, 1019], "optimum": [60, 154, 166, 172, 269, 398, 453, 958, 961], "stuck": [60, 673, 959], "check_random_st": [60, 212, 219, 228, 233, 370, 377, 381], "trade": [60, 77, 168, 255, 257, 258, 326, 339, 392, 393, 395, 534, 535, 540, 541, 615, 637, 673, 777, 780, 781, 791, 802, 959, 966, 974, 976, 977, 983], "n_init_rang": 60, "n_samples_per_cent": 60, "make_data": 60, "n_clusters_tru": 60, "init_s": [60, 340, 430], "factori": [60, 256, 401, 722, 932, 962], "empti": [60, 69, 104, 208, 317, 354, 363, 370, 372, 393, 405, 464, 514, 542, 543, 611, 612, 788, 844, 885, 893, 898, 899, 905, 952, 977, 995, 1006, 1008, 1012, 1013, 1015, 1016, 1018, 1019], "run_id": 60, "km": [60, 310, 340], "my_memb": [60, 62, 63], "319": [60, 67, 149, 997], "plot_kmeans_stability_low_dim_dens": [60, 67], "fast": [61, 172, 185, 211, 212, 230, 231, 299, 341, 354, 363, 368, 377, 393, 395, 397, 398, 400, 401, 403, 405, 428, 450, 455, 489, 513, 514, 516, 519, 521, 525, 528, 547, 569, 570, 572, 613, 614, 621, 639, 640, 653, 655, 668, 680, 777, 791, 800, 801, 802, 811, 812, 819, 820, 824, 835, 915, 931, 954, 958, 961, 964, 965, 967, 968, 978, 982, 986, 997, 1004, 1005, 1010, 1011, 1014, 1015], "globular": [61, 393], "cleanli": [61, 1004], "898": [61, 67], "plot_linkage_comparison": [61, 67], "dorin": [62, 429], "comaniciu": [62, 393, 429], "meer": [62, 393, 429], "ieee": [62, 78, 80, 365, 393, 395, 402, 406, 429, 456, 515, 544, 645, 666, 667, 705, 749, 958, 962, 968], "transact": [62, 365, 393, 395, 404, 406, 426, 429, 456, 515, 519, 521, 528, 544, 625, 645, 666, 667, 705, 706, 736, 749, 958, 962], "intellig": [62, 339, 365, 393, 400, 429, 536, 537, 619, 677, 705, 809, 836, 837, 963, 974, 983, 986], "2002": [62, 391, 393, 400, 419, 429, 574, 575, 706, 736, 826, 873, 954, 962], "603": [62, 429], "619": [62, 429], "labels_uniqu": 62, "447": [62, 67], "plot_mean_shift": [62, 67, 442], "3000": [63, 109, 220, 870, 871], "k_mean": [63, 377, 381, 996, 1012], "t_batch": 63, "pairwis": [63, 165, 166, 229, 265, 306, 310, 311, 339, 354, 360, 370, 381, 393, 398, 403, 439, 442, 443, 449, 468, 489, 490, 516, 542, 543, 601, 619, 620, 621, 622, 623, 624, 669, 671, 673, 675, 677, 680, 758, 761, 768, 770, 771, 807, 823, 825, 827, 831, 845, 876, 962, 965, 974, 977, 999, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020], "k_means_cluster_cent": 63, "mbk_means_cluster_cent": 63, "k_means_label": 63, "mbk_means_label": 63, "ninertia": 63, "bbbbbb": 63, "plot_mini_batch_kmean": [63, 67], "reachabl": [64, 393, 431, 436, 437, 438, 825, 920], "shane": [64, 1013, 1016, 1019], "grigsbi": 64, "refug": 64, "rocktalu": 64, "cluster_optics_dbscan": [64, 393], "n_points_per_clust": 64, "c1": [64, 118, 156, 228], "c2": [64, 118, 156, 228], "c3": [64, 118], "c4": [64, 984, 999], "c5": [64, 984, 999], "c6": 64, "clust": [64, 431, 438], "labels_050": 64, "reachability_": [64, 393, 431, 436, 437, 438], "core_dist": [64, 436], "core_distances_": [64, 431, 436, 438], "ordering_": [64, 393, 431, 436, 437, 438], "labels_200": 64, "ax3": [64, 317], "ax4": 64, "klass": 64, "xk": [64, 531], "rk": 64, "full_lik": 64, "epsilon": [64, 178, 220, 231, 333, 398, 436, 624, 630, 648, 657, 659, 726, 836, 837, 879, 881, 884, 955, 958, 962, 966, 976, 977, 995, 1004], "noptic": 64, "ndbscan": 64, "plot_opt": [64, 67], "tri": [65, 103, 217, 285, 355, 370, 373, 379, 382, 391, 400, 430, 432, 434, 612, 613, 614, 651, 673, 679, 681, 683, 791, 930, 967, 985, 988, 1006, 1012, 1016], "intens": [65, 97, 276, 365, 369, 398, 425, 428, 440, 588, 589, 613, 614, 779, 951, 969, 986, 1012], "weakli": 65, "outlin": [65, 117, 368, 370, 381, 382, 383, 951, 999], "center1": 65, "center2": 65, "center3": 65, "67": [65, 166, 214, 295, 365, 497, 498, 499, 608, 648, 694, 791, 952, 962, 976, 1000, 1004], "58": [65, 78, 295, 365, 395, 406, 456, 744, 972, 993], "center4": 65, "radius1": 65, "radius2": 65, "radius3": 65, "radius4": 65, "circle1": 65, "circle2": 65, "circle3": 65, "circle4": 65, "label_im": 65, "cleaner": 65, "523": [65, 67, 505], "plot_segmentation_toi": [65, 67], "swiss": [66, 163, 216, 223, 393, 511, 673, 674, 1018], "roll": [66, 163, 216, 223, 371, 393, 511, 673, 674, 909, 986, 1014, 1019], "sole": [66, 379, 393], "respect": [66, 99, 113, 117, 125, 156, 172, 175, 185, 198, 210, 213, 217, 219, 226, 229, 231, 246, 265, 282, 283, 295, 303, 310, 323, 354, 355, 363, 364, 368, 391, 393, 396, 398, 400, 401, 403, 445, 448, 451, 452, 453, 454, 455, 456, 457, 515, 521, 522, 528, 534, 542, 543, 578, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 617, 624, 652, 671, 675, 693, 708, 762, 765, 775, 776, 815, 825, 836, 837, 890, 892, 951, 955, 956, 958, 959, 962, 965, 966, 967, 968, 972, 977, 982, 986, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "oppos": [66, 368, 372, 389, 393, 874, 965, 977, 988, 1004], "make_swiss_rol": [66, 221, 1018], "thinner": 66, "fig1": 66, "set_posit": [66, 100, 101, 207, 298], "jet": 66, "fig2": 66, "121": [66, 111, 161, 200, 230, 650, 972], "plot_ward_structured_vs_unstructur": [66, 67], "809": 67, "auto_examples_clust": 67, "chain": [68, 75, 163, 273, 275, 276, 350, 357, 360, 379, 381, 392, 403, 477, 483, 522, 592, 608, 639, 718, 777, 805, 808, 810, 811, 812, 813, 839, 840, 859, 951, 952, 963, 967, 979, 982, 986, 997, 999], "raster": 69, "caption": 69, "serv": [69, 98, 154, 259, 394, 527, 532, 619, 954, 1018], "matt": [69, 1007, 1008, 1009, 1014, 1015, 1019], "terri": [69, 1008], "truncatedsvd": [69, 126, 218, 340, 398, 515, 516, 520, 521, 522, 673, 838, 841, 959, 1006, 1011, 1015, 1016, 1018], "dictvector": [69, 163, 338, 340, 342, 363, 401, 469, 563, 569, 570, 571, 572, 852, 1004, 1005, 1008, 1014, 1016, 1017, 1020], "compris": [69, 121, 254, 339, 340, 341, 363, 379, 398, 400, 496, 784, 959], "subject": [69, 125, 247, 259, 339, 363, 368, 370, 372, 379, 381, 382, 391, 392, 395, 397, 398, 476, 639, 640, 666, 842, 878, 879, 930, 932, 953, 958, 977, 981, 997, 1013, 1014, 1017, 1019], "mccall": 69, "mksol": 69, "dseg": 69, "ti": [69, 196, 243, 246, 254, 335, 354, 580, 581, 616, 701, 706, 736, 775, 776, 880, 883, 886, 961, 962, 977, 1005, 1007, 1008, 1012, 1014, 1018, 1019], "fred": [69, 1004, 1017], "575": [69, 196, 341], "3539": 69, "1993apr6": 69, "131900": 69, "8407": 69, "perhap": [69, 117, 365, 367, 376, 381, 399, 983], "militari": 69, "slug": 69, "school": [69, 365, 393, 768, 962], "physic": [69, 355, 486, 927, 958], "teacher": 69, "ex": [69, 366, 369, 384, 1008, 1009], "fighter": 69, "jock": 69, "wasn": [69, 1013], "poundal": 69, "flink": 69, "funni": 69, "propon": 69, "si": 69, "insist": 69, "safeti": [69, 379, 394, 928, 983, 1014], "ball": [69, 281, 289, 393, 399, 429, 673, 819, 820, 824, 827, 829, 830, 831, 1004, 1006, 1009, 1015], "world": [69, 73, 166, 221, 234, 339, 354, 357, 361, 365, 393, 398, 401, 952, 962, 964, 981, 983, 986, 991, 999, 1004], "mari": [69, 1012, 1013, 1014, 1015, 1018], "shafer": 69, "nasa": [69, 339, 340, 365], "am": [69, 74, 79, 128, 167, 339, 373, 395, 455, 474, 1011], "dryden": 69, "stateless": [69, 340, 356, 370, 381, 401, 563, 564, 570, 619, 842, 843, 851, 972, 1020], "subject_body_extractor": 69, "startswith": [69, 218, 289], "subject_body_transform": 69, "sentenc": [69, 339, 341, 363, 382, 401], "text_stat": 69, "num_sent": 69, "text_stats_transform": 69, "subjectbodyextractor": 69, "subjectbodi": 69, "union": [69, 166, 394, 477, 718, 734, 838, 1011], "body_bow": 69, "pull": [69, 309, 355, 366, 371, 381, 382, 1014], "body_stat": 69, "transformer_weight": [69, 445, 448, 838, 1009, 1016], "dual": [69, 71, 334, 339, 401, 402, 452, 453, 459, 592, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 662, 665, 819, 820, 878, 879, 880, 883, 977, 1006, 1015, 1018], "396": [69, 340, 365, 997], "394": [69, 157, 325, 337], "137": [69, 75, 238, 239, 374, 1005], "plot_column_transform": [69, 75], "imput": [70, 128, 162, 168, 227, 236, 238, 307, 310, 357, 360, 372, 380, 381, 394, 400, 471, 482, 546, 561, 620, 626, 653, 801, 822, 840, 897, 899, 982, 983, 999, 1006, 1007], "miss": [70, 128, 162, 168, 227, 236, 256, 276, 307, 311, 350, 354, 357, 360, 363, 365, 367, 368, 370, 372, 373, 381, 392, 393, 394, 395, 453, 471, 477, 479, 482, 542, 543, 546, 547, 608, 609, 610, 611, 620, 626, 653, 671, 675, 707, 749, 801, 822, 840, 848, 849, 853, 855, 856, 859, 863, 866, 867, 869, 958, 959, 962, 978, 982, 983, 986, 999, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "chi": [70, 79, 109, 302, 360, 402, 500, 573, 576, 577, 579, 580, 581, 585, 586, 587, 590, 619, 620, 621, 622, 623, 738, 739, 999, 1004, 1009, 1010], "dispatch": [70, 357, 389, 449, 777, 791, 800, 801, 802, 876, 928, 929, 992, 999, 1019], "processor": [70, 128, 166, 357, 404, 419, 426, 429, 431, 433, 438, 439, 442, 445, 448, 453, 512, 516, 517, 518, 520, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 821, 822, 825, 827, 829, 830, 832, 833, 838, 841, 873, 874], "pedro": [70, 1005, 1007, 1008, 1012], "simpleimput": [70, 128, 160, 161, 168, 227, 236, 238, 307, 310, 350, 381, 608, 609, 610, 952, 972, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "chi2": [70, 401, 402, 433, 562, 573, 576, 577, 579, 580, 581, 586, 587, 590, 601, 619, 620, 621, 622, 623, 624, 739, 745, 754, 1004, 1011, 1018], "40945": 70, "titan": [70, 168, 238, 306, 310, 311], "surviv": [70, 168, 951, 982], "ag": [70, 145, 166, 168, 184, 185, 196, 214, 235, 236, 238, 298, 309, 310, 311, 363, 365, 986, 988, 995], "fare": [70, 168, 238, 310, 311, 1008, 1009], "embark": [70, 168, 238, 306, 310, 311], "sex": [70, 145, 166, 168, 184, 185, 238, 311, 365, 970, 995], "femal": [70, 166, 311, 373, 852, 853, 972], "male": [70, 166, 311, 373, 852, 853, 972], "pclass": [70, 168, 238, 306, 310, 311], "numeric_featur": [70, 310], "numeric_transform": [70, 310], "categorical_transform": 70, "selector": [70, 141, 142, 376, 401, 447, 562, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 1006, 1014, 1016, 1020], "preprocessor": [70, 128, 166, 196, 227, 236, 307, 309, 310, 311, 394, 401, 569, 570, 572, 982, 997, 1004, 1007, 1012, 1014], "798": [70, 157, 400], "lt": [70, 71, 114, 128, 166, 246, 254, 268, 366, 368], "0x7f032c0f99d0": 70, "pipelinepipelin": [70, 71, 114, 128, 142, 166, 168, 226, 227, 235, 236, 238, 257, 263, 307, 310], "columntransformercolumntransform": [70, 128, 166, 167, 168, 227, 236, 307, 310], "simpleimputersimpleimput": [70, 128, 168, 227, 236, 307, 310], "standardscalerstandardscal": [70, 128, 166, 226, 227, 235, 236, 238, 263, 307, 310], "onehotencoderonehotencod": [70, 114, 128, 166, 167, 227, 236, 307, 310], "selectpercentileselectpercentil": [70, 238], "logisticregressionlogisticregress": [70, 114, 226, 227, 236, 238, 295, 307, 310], "make_column_selector": [70, 118, 128, 394, 445, 448, 1014], "subset_featur": 70, "Then": [70, 108, 110, 114, 116, 128, 131, 142, 166, 172, 184, 196, 221, 226, 237, 258, 259, 339, 362, 368, 372, 374, 376, 384, 390, 391, 393, 396, 398, 401, 402, 551, 574, 700, 736, 777, 791, 839, 952, 961, 962, 968, 977, 997, 1013], "int64index": [70, 167], "1047": 70, "1118": 70, "684": [70, 78, 79, 82], "1045": 70, "841": 70, "1046": [70, 246], "kb": [70, 166, 167], "numerical_transform": 70, "yourself": [70, 367, 368, 369, 373, 376, 966], "dtype_exclud": [70, 447], "dtype_includ": [70, 118, 128, 394, 447], "_column_transform": [70, 128], "0x7f02f7f080d0": 70, "0x7f02f7f084c0": 70, "exactli": [70, 165, 175, 189, 196, 247, 264, 299, 339, 368, 370, 390, 393, 397, 398, 401, 406, 434, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 496, 507, 571, 572, 596, 657, 659, 684, 686, 743, 778, 795, 800, 954, 958, 959, 960, 962, 963, 978, 996, 997, 1004, 1010, 1011, 1017], "hyperparamet": [70, 108, 148, 149, 155, 156, 160, 163, 167, 175, 185, 210, 214, 225, 249, 254, 259, 261, 272, 278, 295, 339, 370, 381, 397, 398, 400, 403, 483, 516, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 624, 634, 640, 646, 654, 657, 708, 765, 777, 791, 951, 956, 957, 958, 961, 962, 964, 966, 968, 976, 983, 997, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016], "cartesian": [70, 390, 614, 965, 1019], "preprocessor__num__imputer__strategi": 70, "preprocessor__cat__selector__percentil": 70, "classifier__c": 70, "search_cv": 70, "param_distribut": [70, 148, 257, 264, 268, 308, 380, 781, 789, 791], "randomizedsearchcvrandomizedsearchcv": 70, "trigger": [70, 71, 372, 394, 836, 837, 839, 840, 898, 899, 915, 958, 997, 1012, 1018, 1019], "best_params_": [70, 72, 121, 148, 231, 246, 254, 260, 308, 326, 380, 777, 780, 781, 791, 951, 993, 997], "best_score_": [70, 72, 231, 257, 260, 261, 326, 654, 656, 777, 780, 781, 791, 992, 993, 997, 1015], "cv_results_": [70, 71, 72, 81, 134, 144, 246, 254, 255, 256, 257, 260, 264, 267, 268, 278, 326, 453, 575, 777, 780, 781, 791, 997, 1010, 1014, 1016, 1017], "sort_valu": [70, 168, 238, 246, 256, 267], "mean_test_scor": [70, 71, 72, 81, 134, 144, 246, 255, 256, 257, 264, 267, 268, 278, 326, 453, 575, 777, 791, 951, 1010, 1017], "ascend": [70, 168, 400, 431, 437, 608, 616, 890, 891, 892, 976, 1014, 1020], "std_test_scor": [70, 72, 134, 144, 255, 256, 257, 264, 278, 453, 575, 777, 791, 1010, 1017], "param_preprocessor__num__imputer__strategi": 70, "param_preprocessor__cat__selector__percentil": 70, "param_classifier__c": 70, "786015": 70, "031020": 70, "785063": 70, "030498": 70, "783149": 70, "030462": 70, "532": [70, 75], "plot_column_transformer_mixed_typ": [70, 75], "instanti": [71, 151, 309, 371, 400, 431, 548, 549, 583, 611, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 905, 968, 994, 1004, 1012, 1016, 1020], "memoiz": [71, 363, 381], "costli": [71, 77, 115, 160, 257, 335, 355, 369, 374, 393, 425, 608, 785, 787, 870, 871, 915, 962, 965, 974, 983], "mcgibbon": [71, 1006, 1007, 1010], "selectkbest": [71, 73, 141, 142, 310, 350, 368, 394, 402, 562, 573, 576, 577, 579, 581, 587, 951, 1005, 1010, 1020], "mutual_info_classif": [71, 402, 573, 576, 577, 580, 581, 1010, 1016, 1019], "pipe": [71, 72, 118, 236, 255, 308, 309, 380, 394, 401, 571, 839, 863, 864, 866, 867, 868, 869, 951, 972, 993], "reduce_dim": [71, 236, 255, 394], "popul": [71, 77, 79, 166, 196, 259, 298, 363, 377, 381, 395, 422, 693, 699, 821, 822, 823, 825, 827, 829, 830, 831, 931, 962, 968, 972, 978], "n_features_opt": 71, "c_option": 71, "iterated_pow": [71, 513, 516, 522, 1010], "reduce_dim__n_compon": [71, 255, 394], "classify__c": 71, "reduce_dim__k": 71, "reducer_label": 71, "kbest": [71, 573], "0x7f032c09c700": 71, "gridsearchcvgridsearchcv": [71, 236, 246, 254, 256], "minmaxscalerminmaxscal": 71, "passthroughpassthroughlinearsvclinearsvc": 71, "mean_scor": [71, 265, 268, 340, 1017], "alphabet": [71, 381, 721], "eas": [71, 246, 303, 368, 371, 374, 958, 976, 982, 983, 986, 1015, 1016, 1018], "sometim": [71, 128, 165, 256, 294, 340, 350, 355, 356, 368, 370, 372, 374, 380, 381, 384, 393, 395, 398, 400, 401, 430, 515, 516, 519, 521, 522, 844, 845, 846, 893, 957, 958, 959, 962, 967, 972, 973, 977, 988, 996, 1001, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020], "worthwhil": [71, 381], "slower": [71, 97, 118, 160, 231, 265, 341, 400, 401, 402, 432, 434, 519, 521, 528, 536, 537, 539, 544, 546, 569, 570, 572, 612, 613, 614, 624, 640, 653, 655, 668, 673, 685, 807, 811, 812, 955, 959, 960, 961, 963, 965, 978, 997, 1008, 1015], "constructor": [71, 228, 355, 370, 381, 392, 394, 401, 445, 448, 530, 531, 536, 548, 549, 550, 551, 562, 563, 569, 570, 578, 649, 657, 658, 821, 822, 823, 825, 826, 827, 829, 830, 831, 838, 839, 840, 841, 930, 951, 963, 972, 977, 983, 988, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019], "folder": [71, 363, 366, 368, 372, 376, 384, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 965, 997], "cached_pip": [71, 394], "delet": [71, 315, 317, 372, 373, 450, 455, 467], "exit": [71, 276, 372, 376, 449], "benefici": [71, 73, 77, 94, 126, 298, 299, 366, 959], "065": [71, 75, 254, 374], "plot_compare_reduct": [71, 75], "logistic__c": [72, 993], "046415888336127774": 72, "pca__n_compon": [72, 993], "truncat": [72, 126, 218, 377, 515, 516, 520, 521, 522, 525, 657, 659, 706, 736, 775, 828, 891, 915, 951, 961, 962, 976, 993, 997, 998, 999, 1010, 1012], "x_digit": [72, 136, 293, 394, 992, 993, 995], "y_digit": [72, 136, 293, 394, 992, 993, 995], "__": [72, 257, 381, 394, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 993, 1012, 1013], "spectrum": [72, 505, 525, 676, 915, 986, 993, 1012], "ax0": [72, 74, 196, 228, 340, 993], "n_components_": [72, 102, 381, 423, 427, 515, 519, 520, 521, 522, 523, 524, 870, 871, 993, 1013, 1015], "explained_variance_ratio_": [72, 103, 340, 398, 515, 522, 525, 530, 993, 1007, 1010], "named_step": [72, 85, 394, 574, 575, 578, 839, 840, 878, 879, 958, 993, 1011, 1013], "components_col": 72, "param_pca__n_compon": 72, "best_clf": 72, "nlargest": 72, "yerr": [72, 78, 80, 115, 118, 144, 278, 317], "val": [72, 208, 256, 917], "298": [72, 75, 210, 215, 229, 970], "plot_digits_pip": [72, 75], "candid": [73, 246, 254, 257, 264, 308, 356, 368, 372, 393, 400, 429, 431, 777, 780, 781, 789, 791, 958, 965, 978, 1010], "features__pca__n_compon": 73, "features__univ_select__k": 73, "svm__c": 73, "867": 73, "967": [73, 962, 966], "transformer_list": [73, 394, 838, 841, 952, 1015, 1016], "univ_select": 73, "amuel": [73, 113, 187, 230, 316, 334], "ai": [73, 113, 187, 230, 316, 334, 397], "bonn": [73, 113, 187, 230, 316, 334], "mayb": [73, 294, 381, 401, 977, 983], "combined_featur": 73, "x_featur": [73, 621, 622, 623, 954], "grid_search": [73, 236, 246, 254, 264, 394, 1006, 1007, 1008, 1009, 1010, 1011], "478": [73, 75, 238], "plot_feature_union": [73, 75], "overview": [74, 369, 371, 380, 381, 714, 723, 964, 976, 998, 999], "transformedtargetregressor": [74, 166, 196, 379, 394, 574, 575, 578, 1012, 1014, 1017], "hous": [74, 128, 160, 161, 298, 308, 361, 471, 999], "translat": [74, 370, 403, 508, 595, 848, 849, 864, 959, 962, 980, 986], "lowest": [74, 85, 167, 246, 362, 393, 397, 616, 618, 780, 781, 784, 885, 886, 959, 962, 978, 1019], "logarithm": [74, 128, 166, 229, 257, 326, 381, 402, 441, 571, 639, 640, 657, 685, 706, 721, 731, 735, 736, 737, 783, 819, 820, 913, 978, 992, 1011], "log1p": [74, 228, 843, 962, 972], "expm1": 74, "y_tran": 74, "At": [74, 201, 268, 314, 317, 354, 355, 372, 382, 384, 389, 396, 400, 419, 422, 446, 569, 570, 572, 583, 807, 809, 846, 926, 951, 958, 961, 963, 967, 976, 986], "meda": [74, 166, 962], "median_absolute_error": [74, 166, 962, 1008, 1014, 1016], "r2_score": [74, 165, 180, 191, 192, 400, 414, 446, 463, 464, 465, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 704, 708, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 951, 962, 1005, 1007, 1013, 1017, 1018], "compute_scor": [74, 102, 175, 176, 625, 626, 1013], "r2": [74, 110, 128, 165, 167, 191, 231, 370, 394, 400, 535, 551, 654, 802, 837, 962, 970, 1013], "ridge_cv": 74, "y_pred_ridg": 74, "ridge_cv_with_trans_target": 74, "inverse_func": [74, 166, 394, 446, 843, 972, 1012], "y_pred_ridge_with_trans_target": 74, "sell": 74, "quantile_transform": [74, 856, 866, 972, 1011, 1012, 1013], "house_pric": [74, 128], "select_dtyp": [74, 118, 311, 447], "nan": [74, 118, 160, 161, 166, 214, 236, 251, 259, 306, 311, 354, 360, 370, 377, 381, 400, 449, 477, 536, 537, 538, 542, 543, 545, 574, 575, 578, 584, 587, 590, 608, 609, 610, 611, 616, 693, 695, 702, 703, 704, 708, 749, 758, 765, 777, 780, 781, 783, 791, 801, 802, 803, 806, 848, 849, 853, 855, 856, 859, 863, 866, 867, 869, 896, 897, 898, 899, 937, 951, 962, 972, 999, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "inf": [74, 151, 286, 377, 393, 403, 431, 438, 442, 452, 453, 459, 534, 535, 540, 541, 574, 575, 578, 587, 588, 589, 600, 608, 616, 618, 629, 630, 631, 633, 650, 652, 653, 657, 661, 668, 708, 710, 726, 758, 765, 835, 844, 851, 896, 898, 899, 913, 962, 972, 1011, 1013, 1014, 1015, 1016, 1018, 1019], "lotfrontag": 74, "garageyrblt": 74, "masvnrarea": [74, 128], "to_fram": 74, "n_quantil": [74, 167, 302, 856, 867, 1013], "output_distribut": [74, 298, 302, 394, 855, 856, 866, 867, 972], "squeez": [74, 154, 155, 276, 298, 996], "quantiletransform": [74, 167, 302, 394, 446, 855, 867, 952, 972, 1011, 1012, 1013, 1014, 1015, 1020], "weaker": 74, "residu": [74, 192, 198, 252, 414, 446, 463, 464, 465, 533, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 659, 660, 666, 667, 682, 724, 765, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 958, 962, 995, 1016, 1017, 1019], "smile": [74, 363, 1018], "398": [74, 75, 628, 997], "plot_transformed_target": [74, 75, 446], "908": [75, 962], "auto_examples_compos": 75, "mahalanobi": [76, 82, 163, 393, 395, 431, 438, 450, 451, 452, 453, 454, 455, 456, 457, 680, 758, 759, 760, 826, 956, 968, 1012, 1015, 1016], "ledoitwolf": [76, 78, 82, 102, 163, 395, 450, 451, 455, 456, 457, 458, 777, 1008], "empiricalcovari": [77, 79, 80, 395, 450, 454, 455, 456, 457, 968], "unbias": [77, 391, 395, 398, 419, 531, 637, 653, 655, 668, 958, 992], "shrunk": [77, 102, 298, 406, 454, 456, 457, 460, 461, 462, 530, 956, 976, 998, 999], "base_x_train": 77, "base_x_test": 77, "coloring_matrix": [77, 78], "shrunkcovari": [77, 102, 395, 450, 451, 454, 455, 456], "empirical_covari": [77, 395], "log_likelihood": [77, 591, 592, 775, 776], "span": [77, 121, 230, 253, 363, 401, 530, 617, 777, 780, 962, 996], "negative_loglik": 77, "real_cov": [77, 78, 451, 454, 455, 456, 457], "emp_cov": [77, 79, 81, 459, 462], "loglik_r": 77, "inv": [77, 81, 293], "formula": [77, 78, 390, 393, 395, 406, 454, 456, 497, 498, 499, 571, 624, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 657, 659, 685, 709, 735, 744, 951, 956, 958, 962, 967, 968, 972, 976, 1009, 1011, 1013], "asymptot": [77, 78, 185, 354, 395, 455, 517, 958, 961, 1014], "criterion": [77, 78, 169, 184, 204, 246, 268, 307, 370, 377, 381, 393, 398, 423, 427, 430, 433, 440, 443, 513, 518, 520, 527, 534, 535, 538, 539, 540, 541, 545, 546, 547, 587, 608, 626, 629, 637, 647, 648, 649, 650, 652, 657, 658, 659, 661, 672, 676, 691, 776, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 958, 961, 962, 970, 975, 978, 984, 996, 999, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "chen": [77, 78, 395, 400, 406, 456, 706, 736, 954, 962, 1007, 1010, 1011, 1012, 1014, 1017, 1018, 1019], "Its": [77, 108, 254, 258, 364, 370, 381, 398, 403, 519, 957, 958, 967, 970, 976, 982, 986, 1007], "tuned_paramet": [77, 134, 254], "loglik_lw": 77, "loglik_oa": 77, "unseen": [77, 119, 142, 185, 204, 269, 282, 356, 360, 370, 380, 381, 393, 397, 825, 856, 867, 953, 962, 968, 970, 972, 978, 988, 1007, 1012, 1016], "loglog": [77, 229], "lik_max": 77, "amax": [77, 119], "lik_min": 77, "amin": 77, "vline": [77, 96, 183, 184, 185, 197, 256, 269, 299], "shrinkage_": [77, 78, 454, 456], "magenta": [77, 123], "purpl": [77, 91, 221], "cyan": [77, 112, 166, 279, 287], "realli": [77, 168, 185, 340, 372, 373, 374, 962, 968, 986, 1018], "interestingli": [77, 145, 972], "outperform": [77, 85, 128, 303, 379, 397, 400, 433, 443, 964], "plot_covariance_estim": [77, 82], "whose": [78, 79, 80, 145, 153, 196, 324, 363, 376, 377, 381, 391, 393, 395, 400, 402, 403, 406, 419, 420, 421, 429, 442, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 496, 515, 519, 521, 522, 525, 528, 530, 553, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 621, 652, 676, 699, 777, 784, 791, 804, 825, 844, 870, 871, 914, 941, 942, 956, 963, 967, 968, 969, 977, 1007, 1012, 1013, 1015, 1018], "inspir": [78, 125, 167, 214, 368, 379, 400, 542, 543, 903, 952, 982, 1013], "mmse": [78, 395, 406, 456], "tran": 78, "octob": [78, 363, 1004, 1011, 1017, 1018], "toeplitz": 78, "choleski": [78, 196, 214, 377, 459, 508, 592, 629, 631, 632, 635, 636, 637, 639, 640, 650, 653, 655, 661, 663, 664, 668, 775, 776, 958, 1007, 1011, 1013, 1016, 1019], "simul": [78, 96, 166, 190, 232, 256, 986], "n_samples_rang": [78, 229], "lw_mse": 78, "oa_ms": 78, "lw_shrinkag": 78, "oa_shrinkag": 78, "error_norm": [78, 80, 450, 451, 452, 453, 454, 455, 456, 457], "darkorang": [78, 98, 103, 104, 197, 207, 220, 242, 243, 244, 247, 263, 265, 271, 279, 281, 287, 288, 316, 346], "plot_lw_vs_oa": [78, 82], "x_i": [79, 113, 140, 166, 197, 309, 334, 393, 398, 399, 400, 403, 595, 596, 600, 603, 604, 606, 814, 815, 818, 953, 954, 958, 964, 965, 966, 972, 976, 977, 978], "d_": [79, 393, 398, 629, 650, 661, 758, 959, 964], "mle": [79, 102, 522, 1012, 1015], "resist": [79, 80, 368], "erron": [79, 80, 398, 958, 1005, 1012, 1016], "breakdown": [79, 80, 213, 660, 958], "n_": [79, 80, 256, 309, 393, 398, 400, 627, 633, 666, 677, 954, 958, 962, 964, 965, 969, 974, 977, 978], "smallest": [79, 80, 196, 276, 344, 363, 393, 395, 402, 508, 522, 611, 635, 636, 637, 663, 664, 671, 675, 676, 777, 780, 781, 791, 796, 978, 1017], "pure": [79, 80, 85, 196, 381, 393, 454, 460, 477, 538, 539, 540, 541, 545, 546, 547, 686, 696, 766, 773, 886, 887, 888, 889, 972], "rousseuw": [79, 80], "rousseeuw": [79, 80, 393, 395, 450, 455, 770, 771, 968], "ass": [79, 80, 395, 455], "1984": [79, 80, 395, 455, 886, 887, 978], "wilson": [79, 365, 1004, 1007], "hilferti": 79, "1931": 79, "proceed": [79, 363, 365, 393, 404, 421, 426, 492, 677, 689, 706, 736, 826, 875, 962, 974, 975, 976], "academi": [79, 826], "688": 79, "n_outlier": [79, 80, 124, 199, 225, 283], "gen_cov": 79, "ey": [79, 80, 243, 247, 326, 363, 515, 522, 531], "outliers_cov": 79, "mincovdet": [79, 80, 395, 450, 451, 454, 456, 457, 968, 1004, 1011], "robust_cov": 79, "nmcd": 79, "nmle": 79, "26253567e": 79, "06695631e": 79, "22747343e": 79, "23773583": 79, "24640578": 79, "51963999": 79, "inlier": [79, 124, 199, 225, 234, 298, 381, 395, 450, 544, 652, 658, 825, 856, 867, 881, 882, 884, 958, 968, 1011, 1012, 1017], "inlier_plot": 79, "outlier_plot": 79, "get_xlim": [79, 191, 201, 298], "zz": 79, "mahal_emp_cov": 79, "emp_cov_contour": 79, "pubu_r": 79, "mahal_robust_cov": 79, "robust_contour": 79, "ylorbr_r": 79, "dist": [79, 218, 229, 372, 450, 451, 452, 453, 454, 455, 456, 457, 680, 743, 749, 819, 820], "borderaxespad": 79, "cubic": [79, 403], "suggest": [79, 97, 112, 115, 166, 169, 256, 326, 354, 367, 368, 375, 381, 397, 398, 400, 450, 455, 546, 626, 804, 956, 958, 959, 967, 977, 997, 1008, 1015, 1018], "emp_mah": 79, "markeredgewidth": [79, 260], "rm": [79, 151, 372, 376, 395], "mahal": 79, "robust_mah": 79, "location_": [79, 80, 450, 451, 452, 453, 454, 455, 456, 457], "plot_mahalanobis_dist": [79, 82], "aim": [80, 161, 284, 316, 356, 363, 366, 368, 381, 387, 393, 395, 401, 429, 680, 958, 962, 965, 972, 977, 982, 988, 996, 1018], "compens": [80, 165, 167, 172, 196, 214, 257, 395, 398], "soon": [80, 381, 995], "5n_": 80, "johanna": 80, "hardin": 80, "rock": 80, "decemb": [80, 153, 363, 645, 666, 667, 1004, 1012, 1014, 1016, 1019], "928": [80, 97, 106, 293, 296, 419], "946": 80, "zoubir": 80, "koivunen": 80, "chakhchoukh": 80, "muma": 80, "signal": [80, 94, 95, 96, 104, 121, 148, 153, 154, 163, 174, 195, 197, 215, 247, 309, 392, 393, 395, 401, 402, 403, 406, 456, 484, 502, 507, 512, 515, 518, 522, 606, 627, 633, 634, 644, 645, 665, 666, 667, 765, 958, 962, 979, 986, 991, 998, 999], "tutori": [80, 134, 135, 136, 137, 185, 198, 214, 256, 357, 368, 369, 374, 376, 380, 387, 393, 433, 443, 672, 977, 995, 1007], "treatment": [80, 165, 362, 398, 450, 455], "concept": [80, 119, 265, 357, 368, 379, 392, 393, 399, 401, 954, 962, 965, 978, 986], "magazin": [80, 402], "29": [80, 149, 153, 187, 196, 213, 258, 272, 311, 315, 365, 366, 384, 385, 386, 400, 540, 541, 671, 675, 761, 775, 831, 958, 959, 976], "61": [80, 157, 167, 214, 219, 331, 362, 365, 374, 394, 522, 541, 694], "range_n_outli": 80, "err_loc_mcd": 80, "err_cov_mcd": 80, "err_loc_emp_ful": 80, "err_cov_emp_ful": 80, "err_loc_emp_pur": 80, "err_cov_emp_pur": 80, "outliers_index": 80, "outliers_offset": 80, "inliers_mask": 80, "pure_x": 80, "pure_loc": 80, "pure_emp_cov": 80, "font_prop": 80, "hat": [80, 104, 252, 256, 281, 309, 366, 391, 395, 399, 400, 953, 958, 959, 962, 964, 966], "_2": [80, 153, 398, 401, 512, 518, 526, 527, 627, 633, 958, 966, 976, 977], "x_size": 80, "485": [80, 82, 677], "plot_robust_vs_empirical_covari": [80, 82], "graphicallasso": [81, 395, 450, 451, 453, 454, 455, 456, 457, 459, 1012], "largest": [81, 96, 198, 365, 393, 395, 398, 425, 508, 522, 538, 539, 540, 541, 545, 546, 569, 690, 775, 776, 796, 817, 886, 887, 888, 889, 915, 959, 962, 972, 977, 978], "invert": [81, 99, 142, 218, 340, 341, 379, 395, 401, 611, 670, 674, 972, 1013], "fairli": [81, 120, 219, 271, 293, 376, 393, 540, 541, 680, 963, 995], "tweak": [81, 397, 928, 961, 997, 1015], "readabl": [81, 257, 309, 373, 374, 376, 387, 515, 1013, 1016, 1017, 1018, 1019], "neighborhood": [81, 163, 217, 277, 290, 365, 381, 393, 398, 404, 426, 431, 438, 483, 485, 496, 522, 530, 609, 677, 805, 821, 822, 825, 827, 828, 829, 830, 831, 833, 839, 840, 859, 959, 968, 984, 999, 1013], "make_sparse_spd_matrix": [81, 510], "prng": 81, "prec": [81, 226, 508, 962], "smallest_coef": [81, 508], "largest_coef": [81, 508], "multivariate_norm": [81, 85, 241, 450, 451, 452, 453, 454, 455, 456, 457], "ledoit_wolf": [81, 395, 1017], "prec_": 81, "lw_cov_": 81, "lw_prec_": 81, "this_cov": 81, "this_prec": 81, "ma": [81, 326, 958, 1010, 1015], "masked_equ": 81, "set_facecolor": [81, 241], "set_axis_bgcolor": 81, "alpha_": [81, 134, 166, 176, 184, 185, 453, 592, 625, 626, 628, 632, 634, 636, 637, 642, 644, 654, 656, 958, 978, 992, 1004, 1011], "564": [81, 82, 196], "plot_sparse_cov": [81, 82], "511": [82, 94, 106], "auto_examples_covari": 82, "cross_decomposit": [83, 84, 85, 163, 232, 357, 1008, 1009, 1011, 1012, 1013], "plscanon": [84, 463, 465, 466, 984, 999, 1008, 1012, 1014, 1016, 1018], "plsregress": [84, 85, 984, 999, 1011, 1014, 1016, 1018], "share": [84, 126, 166, 246, 339, 348, 350, 354, 355, 370, 376, 393, 398, 401, 530, 649, 685, 689, 775, 776, 780, 781, 956, 969, 1004, 1006, 1012, 1014, 1016, 1019], "appar": [84, 964, 986], "scatterplot": [84, 175, 256, 279], "maxim": [84, 85, 94, 105, 121, 175, 246, 247, 257, 261, 265, 266, 286, 303, 308, 326, 344, 348, 365, 381, 390, 393, 396, 398, 402, 403, 530, 591, 592, 625, 626, 629, 650, 660, 661, 701, 777, 780, 781, 791, 848, 854, 863, 956, 958, 962, 965, 967, 977, 992, 995, 1007, 1009, 1014, 1017, 1019], "weak": [84, 108, 119, 122, 214, 262, 397, 538, 539, 540, 545, 546, 547, 611, 965, 986], "var": [84, 85, 100, 112, 145, 176, 256, 365, 369, 402, 622, 626, 880, 881, 882, 883, 884, 962, 1012], "corr": [84, 169, 256], "corrcoef": [84, 105], "plsca": [84, 464], "x_train_r": 84, "y_train_r": 84, "x_test_r": 84, "y_test_r": 84, "221": [84, 126, 1007], "222": [84, 126, 156, 158, 977], "223": [84, 126, 365], "yj": [84, 302], "noiz": 84, "xb": [84, 858], "_pl": 84, "503": 84, "futurewarn": [84, 368, 376, 1011, 1012, 1013, 1015, 1017, 1020], "n_target": [84, 381, 396, 463, 464, 465, 466, 505, 537, 592, 624, 627, 628, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 646, 652, 653, 654, 655, 656, 662, 663, 664, 665, 666, 667, 668, 963, 1016, 1018], "futur": [84, 153, 197, 237, 309, 368, 370, 372, 379, 381, 382, 387, 397, 401, 477, 515, 611, 616, 930, 932, 962, 963, 977, 978, 986, 1001, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "50210309": 84, "55301008": 84, "72528805": 84, "03429511": 84, "83576671": 84, "74902647": 84, "03916339": 84, "84652988": 84, "78629756": 84, "11231897": 84, "1905275": 84, "33508757": 84, "35433161": 84, "32686504": 84, "39877158": 84, "47827435": 84, "38004088": 84, "35574845": 84, "exce": [84, 274, 307, 403, 424, 496, 583, 630, 639, 1013, 1016, 1018], "230": [84, 86, 565], "plot_compare_cross_decomposit": [84, 86], "pcr": [85, 396], "pl": [85, 200, 365, 396, 463, 464, 465, 466, 1009], "greedili": [85, 145, 397, 402, 441], "despit": [85, 194, 196, 214, 231, 285, 381, 395, 608, 609, 611, 958, 965, 986, 1012, 1013], "suffer": [85, 116, 168, 276, 298, 340, 354, 393, 400, 403, 525, 743, 957, 958, 962, 965, 996, 1013], "mention": [85, 214, 307, 350, 354, 368, 372, 373, 379, 381, 677, 870, 871, 951, 956, 958, 983, 986, 997, 1011, 1012, 1013], "dive": [85, 368, 374], "explained_variance_": [85, 515, 522, 525, 996, 1011], "onto": [85, 218, 219, 230, 298, 379, 398, 401, 405, 429, 442, 514, 520, 524, 608, 609, 611, 669, 956, 960, 965], "recommend": [85, 116, 160, 213, 226, 252, 265, 302, 308, 354, 355, 357, 362, 366, 368, 370, 374, 376, 379, 384, 396, 397, 398, 400, 402, 420, 428, 430, 432, 441, 477, 489, 516, 519, 525, 530, 542, 543, 550, 563, 564, 570, 587, 592, 612, 613, 619, 651, 657, 673, 678, 679, 681, 683, 783, 789, 791, 835, 842, 844, 851, 858, 859, 863, 864, 866, 867, 868, 869, 871, 880, 883, 915, 930, 951, 959, 962, 964, 966, 969, 972, 974, 976, 977, 978, 981, 986, 999, 1006, 1007, 1013, 1014, 1015, 1016, 1018], "linearregress": [85, 131, 165, 175, 186, 191, 192, 193, 194, 199, 202, 213, 228, 233, 252, 270, 299, 350, 368, 379, 380, 394, 400, 446, 551, 613, 616, 627, 630, 633, 635, 652, 653, 668, 958, 962, 972, 995, 1008, 1009, 1013, 1016, 1017, 1018], "retriev": [85, 166, 200, 263, 340, 348, 372, 381, 394, 398, 401, 402, 449, 477, 571, 574, 575, 607, 634, 644, 665, 706, 710, 712, 713, 736, 761, 814, 818, 851, 876, 928, 958, 960, 962, 964, 982, 983, 996, 1009, 1014, 1016, 1018], "026": [85, 340], "remark": [85, 145, 356, 368, 972], "predit": 85, "pca_2": 85, "673": [85, 374], "448": [85, 86, 167, 276], "plot_pcr_vs_pl": [85, 86], "677": [86, 137, 138], "auto_examples_cross_decomposit": 86, "multilabel": [87, 92, 163, 224, 239, 263, 274, 363, 370, 371, 381, 388, 463, 468, 478, 489, 490, 496, 504, 522, 538, 545, 548, 655, 656, 684, 688, 694, 706, 709, 710, 714, 715, 718, 719, 734, 736, 763, 764, 767, 768, 772, 774, 808, 812, 836, 843, 846, 850, 852, 862, 883, 886, 888, 904, 924, 925, 926, 973, 984, 985, 997, 999, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1017, 1018, 1019], "055": [88, 92, 340, 365, 962], "plot_digits_last_imag": [88, 92], "iris": [89, 262, 263, 994], "150x4": 89, "unus": [89, 100, 101, 167, 193, 217, 219, 444, 560, 743, 751, 951, 959, 1004, 1012, 1014, 1015, 1017, 1019], "plai": [89, 95, 122, 150, 179, 205, 250, 279, 287, 322, 323, 354, 379, 997], "set1": [89, 256, 285, 286], "getter": [89, 450, 451, 452, 453, 454, 455, 456, 457, 574, 575, 578], "3rd": [89, 156, 814, 857, 964, 972], "156": [89, 92, 166, 365], "plot_iris_dataset": [89, 92], "easi": [90, 167, 204, 214, 244, 254, 256, 326, 339, 350, 363, 374, 376, 379, 380, 393, 400, 481, 485, 491, 846, 951, 957, 961, 969, 972, 982, 983, 986, 997, 1014, 1019], "make_gaussian_quantil": [90, 109, 111, 364, 451, 455, 456, 457, 501], "321": 90, "323": 90, "y2": [90, 111, 697, 744, 963], "324": [90, 363], "multi": [90, 107, 108, 132, 163, 167, 174, 212, 215, 216, 219, 223, 224, 225, 232, 235, 239, 249, 253, 265, 272, 274, 291, 296, 306, 311, 339, 343, 349, 355, 363, 365, 370, 371, 377, 381, 384, 393, 400, 401, 403, 410, 419, 433, 443, 450, 455, 476, 477, 485, 486, 491, 495, 496, 500, 501, 503, 522, 530, 531, 532, 534, 536, 538, 539, 540, 542, 545, 546, 548, 550, 591, 614, 624, 627, 628, 633, 634, 638, 639, 641, 642, 643, 644, 647, 649, 653, 654, 655, 656, 657, 662, 665, 671, 684, 694, 701, 709, 714, 720, 722, 763, 777, 791, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 827, 829, 835, 836, 837, 840, 846, 859, 862, 873, 874, 878, 880, 883, 886, 887, 888, 890, 891, 892, 898, 901, 904, 951, 963, 965, 969, 972, 976, 982, 983, 984, 988, 994, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1020], "325": 90, "326": 90, "320": [90, 92, 363, 951, 976, 1004], "plot_random_dataset": [90, 92], "make_multilabel_classif": [91, 232, 364, 496, 517, 768, 810, 811, 962, 1006, 1007, 1009, 1015], "star": [91, 131, 368], "degener": [91, 405, 422, 435, 514, 701, 958, 962, 1013, 1017, 1018], "vocabulari": [91, 211, 339, 340, 379, 401, 569, 570, 571, 572, 964, 988, 997, 1004, 1006, 1009, 1012, 1015, 1017], "757": [91, 254, 276, 365], "w0": 91, "w1": [91, 400, 638], "make_ml_clf": 91, "ff3333": 91, "0198e1": 91, "bf5fff": 91, "fcd116": 91, "ff7216": 91, "4dbd33": 91, "87421f": 91, "plot_2d": [91, 217], "p_c": [91, 504], "p_w_c": [91, 504], "allow_unlabel": [91, 232, 504], "return_distribut": [91, 504], "sep": [91, 265], "p_w": 91, "plot_random_multilabel_dataset": [91, 92], "auto_examples_dataset": 92, "blind": [93, 106, 163, 339, 398, 514, 522], "fastica": [93, 106, 163, 398, 513, 516, 522, 996, 1004, 1006, 1012, 1018, 1019], "increment": [93, 106, 163, 259, 372, 374, 424, 428, 444, 485, 514, 515, 516, 517, 520, 522, 525, 583, 627, 639, 647, 783, 803, 811, 812, 814, 815, 816, 817, 818, 848, 849, 859, 878, 879, 937, 958, 964, 1007, 1008], "fa": [93, 105, 106, 163, 374, 398, 454, 457, 513, 522, 777, 801], "precomput": [93, 106, 163, 174, 215, 220, 276, 278, 370, 377, 379, 381, 393, 401, 404, 414, 422, 423, 426, 427, 431, 433, 438, 446, 463, 464, 465, 505, 512, 516, 518, 521, 523, 529, 535, 537, 539, 541, 543, 546, 549, 551, 591, 592, 601, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 662, 663, 665, 666, 669, 671, 672, 673, 677, 754, 758, 761, 770, 771, 812, 813, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 837, 879, 880, 881, 882, 883, 884, 887, 889, 938, 939, 940, 954, 960, 965, 977, 983, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020], "olivetti": [94, 116, 361, 398, 476, 999, 1004, 1012], "chapter": [94, 350, 370, 393, 398, 400, 403, 511, 513, 515, 595, 600, 603, 624, 952, 955, 958, 977, 978], "decompos": [94, 98, 112, 300, 392, 515, 519, 690, 800, 915, 957, 958, 962, 979, 998, 999], "basicconfig": 94, "asctim": 94, "levelnam": 94, "faces_cent": 94, "image_shap": [94, 233], "constrained_layout": [94, 167, 217, 311], "set_constrained_layout_pad": 94, "w_pad": [94, 117, 345], "h_pad": [94, 117, 345], "set_edgecolor": 94, "vec": [94, 401, 519, 521, 528], "im": [94, 105, 267, 280, 985], "pad": [94, 117, 160, 167, 217, 234, 339, 345, 401, 569, 570, 572], "initialis": [94, 519, 521, 528, 1004, 1012, 1013], "mathbb": [94, 112, 151, 396, 962, 969, 977], "4096": [94, 363, 398, 476], "human": [94, 167, 339, 387, 393, 398, 836, 837, 962, 969, 1013], "friendli": [94, 355, 368, 376, 398, 871, 974, 975, 982, 983], "visualis": [94, 97, 105, 232, 525, 965, 983], "64x64": [94, 363, 398], "singular": [94, 377, 390, 393, 396, 432, 434, 463, 464, 465, 466, 502, 505, 515, 519, 521, 522, 525, 528, 530, 531, 638, 653, 654, 655, 668, 915, 958, 959, 961, 998, 999, 1010, 1011], "scalar": [94, 309, 374, 381, 394, 403, 405, 445, 448, 505, 514, 596, 597, 598, 603, 604, 608, 609, 718, 722, 894, 902, 954, 966, 968, 972, 976, 982, 1014, 1015, 1018, 1020], "noise_variance_": [94, 184, 513, 515, 522, 637, 1011, 1018], "pixelwis": 94, "pca_estim": 94, "nmf_estim": 94, "multivari": [94, 166, 360, 395, 398, 401, 454, 497, 498, 499, 608, 609, 610, 611, 630, 652, 659, 660, 814, 815, 816, 817, 818, 956, 958, 961, 964, 982, 988, 996, 999], "subcompon": [94, 398], "ica_estim": 94, "15e": 94, "sparsepca": [94, 512, 514, 515, 516, 518, 520, 521, 522, 523, 526, 527, 1004, 1011, 1012, 1014, 1015, 1017, 1018, 1019], "batch_pca_estim": 94, "minibatchdictionarylearn": [94, 97, 356, 398, 512, 519, 523, 526, 527, 1005, 1007, 1014, 1015, 1017, 1018, 1019, 1020], "batch_dict_estim": 94, "That": [94, 145, 185, 225, 256, 260, 340, 341, 355, 362, 376, 381, 397, 402, 403, 425, 428, 538, 545, 574, 795, 886, 887, 951, 959, 960, 962, 968, 978, 1013, 1014], "enhanc": [94, 367, 368, 372, 379, 381, 393, 962, 980, 1002, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "consum": [94, 350, 362, 370, 381, 393, 397, 400, 430, 780, 781, 839, 840, 958, 986, 1009], "kmeans_estim": 94, "heteroscedast": [94, 102, 121, 198, 398, 855, 866], "fa_estim": 94, "factoranalysi": [94, 102, 105, 398, 525, 1005, 1007, 1016, 1018], "wrap": [94, 114, 121, 276, 362, 370, 381, 415, 489, 566, 567, 638, 657, 722, 805, 862, 952, 962, 965, 977, 982, 1004, 1009, 1012, 1014, 1015, 1017, 1019], "suit": [94, 126, 166, 196, 197, 225, 246, 309, 310, 339, 355, 368, 370, 373, 374, 376, 379, 384, 396, 398, 400, 403, 431, 433, 484, 658, 816, 909, 951, 954, 959, 962, 964, 965, 976, 982, 983, 986, 990, 1011, 1018], "colormap": [94, 111, 156, 188, 205, 326, 331, 345, 678, 1017], "uv": [94, 398], "x_1": [94, 140, 151, 193, 197, 396, 398, 400, 403, 594, 606, 638, 852, 958, 964, 966, 972, 976], "x_n": [94, 398, 964, 966, 976], "dict_pos_dict_estim": 94, "positive_dict": [94, 512, 518, 526, 527], "dict_pos_code_estim": 94, "fit_algorithm": [94, 512, 518, 1019, 1020], "cd": [94, 365, 366, 368, 372, 374, 398, 452, 453, 459, 512, 518, 520, 521, 524, 526, 527, 528, 958, 997, 1009, 1019], "positive_cod": [94, 512, 518, 523, 526, 527], "dict_pos_estim": 94, "plot_faces_decomposit": [94, 106], "imagin": [95, 148, 397, 398, 401, 958], "simultan": [95, 260, 264, 347, 360, 390, 951, 962, 963, 978, 986, 1011], "microphon": 95, "s1": [95, 145, 156, 184, 185, 365, 996], "sinusoid": [95, 110, 121, 231, 403, 955, 996], "s2": [95, 145, 156, 184, 185, 365, 531, 996], "s3": [95, 145, 184, 185, 365, 996], "sawtooth": [95, 996], "saw": [95, 197, 996], "tooth": [95, 996], "s_": [95, 260, 959, 970, 996], "a_": [95, 390, 393, 519, 521, 528, 958, 996], "mixing_": [95, 96, 514, 996], "prove": [95, 986], "revert": [95, 611, 613, 614, 1011, 1016], "unmix": [95, 405, 514], "allclos": [95, 125, 974, 996], "mean_": [95, 260, 513, 514, 515, 520, 522, 524, 859, 972, 996, 1012], "orthogon": [95, 96, 97, 163, 174, 215, 392, 398, 507, 512, 518, 520, 523, 524, 529, 645, 646, 666, 667, 974, 984, 999, 1004], "steelblu": [95, 96, 130], "sig": 95, "282": [95, 106, 993, 1004], "plot_ica_blind_source_separ": [95, 106], "ica": [96, 392, 405, 978, 998, 999], "geometr": [96, 393, 669, 685, 711, 737, 959, 1012], "identifi": [96, 103, 121, 122, 165, 166, 196, 199, 244, 246, 254, 259, 265, 285, 308, 339, 340, 362, 363, 367, 368, 372, 373, 381, 393, 394, 397, 400, 401, 431, 438, 468, 477, 489, 490, 536, 537, 544, 587, 624, 630, 680, 693, 754, 804, 825, 844, 873, 874, 951, 958, 962, 968, 975, 986, 995, 1011, 1013, 1018, 1019], "standard_t": 96, "s_pca_": 96, "s_ica_": 96, "plot_sampl": [96, 247], "axis_list": 96, "x_axi": [96, 204, 260], "y_axi": [96, 204], "quiver": 96, "hline": 96, "set_zord": 96, "268": [96, 106], "plot_ica_vs_pca": [96, 106], "fragment": 97, "firstli": [97, 354, 379, 638, 997], "undistort": 97, "noiseless": [97, 960], "pursuit": [97, 163, 174, 215, 398, 455, 507, 512, 518, 523, 529, 645, 646, 666, 667, 984, 999, 1004], "omp": [97, 104, 195, 398, 512, 518, 523, 529, 645, 646, 666, 667, 984, 999, 1004, 1012], "promin": [97, 381], "reminisc": 97, "downsampl": [97, 234], "075": 97, "show_with_diff": 97, "puor": 97, "22692": 97, "dico": 97, "n_iter_": [97, 204, 244, 381, 422, 428, 429, 430, 452, 453, 463, 464, 465, 512, 513, 514, 517, 518, 519, 520, 521, 524, 542, 543, 608, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 660, 661, 671, 673, 775, 776, 828, 836, 837, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 1008, 1011, 1012, 1014, 1017, 1018, 1020], "n_steps_": [97, 430, 518, 519, 1017], "reconstruct_from_patches_2d": [97, 401, 564], "intercept": [97, 188, 205, 213, 335, 381, 463, 464, 465, 530, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 854, 858, 860, 878, 879, 885, 958, 960, 962, 967, 976, 977, 1007, 1009, 1013, 1014], "transform_algorithm": [97, 104, 512, 518, 523, 1020], "n1": 97, "atom": [97, 104, 398, 512, 518, 520, 523, 524, 526, 527, 634, 644, 665, 958, 1004, 1017], "transform_n_nonzero_coef": [97, 104, 512, 518, 523], "n2": 97, "n4": 97, "transform_alpha": [97, 104, 512, 518, 523, 1017], "set_param": [97, 105, 113, 118, 121, 167, 168, 176, 184, 185, 189, 200, 204, 230, 269, 306, 329, 340, 371, 381, 393, 394, 400, 403, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 952, 968, 988, 995, 1004, 1010, 1011, 1012, 1017, 1018], "plot_image_denois": [97, 106], "ipca": [98, 514, 515], "flip": [98, 563, 722, 915, 964, 1008, 1017], "incrementalpca": [98, 356, 398, 514, 516, 520, 522, 525, 1008, 1011, 1012, 1014, 1015, 1018], "x_ipca": 98, "x_pca": 98, "turquois": [98, 103, 104, 123, 202, 213, 220, 243, 244, 263], "x_transform": [98, 126, 466, 512, 513, 514, 515, 516, 518, 520, 524, 547, 619, 620, 669, 670, 671, 672], "nmean": 98, "shadow": [98, 103, 104, 220, 316, 333, 341, 401], "scatterpoint": [98, 103, 220, 243, 316], "247": [98, 106, 859], "plot_incremental_pca": [98, 106], "kernal": 99, "nest": [99, 109, 163, 185, 249, 272, 355, 374, 381, 384, 393, 397, 403, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 443, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 485, 500, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 782, 791, 801, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 930, 951, 962, 965, 1004, 1005, 1008, 1010, 1011, 1012, 1018], "train_ax": 99, "test_ax": 99, "straight": [99, 186, 192, 194, 253, 354], "inner": [99, 121, 257, 261, 316, 354, 401, 425, 495, 527, 563, 570, 629, 650, 661, 755, 757, 954, 962, 972, 977, 1005, 1008, 1018], "x_test_kernel_pca": 99, "orig_data_ax": 99, "pca_proj_ax": 99, "kernel_pca_proj_ax": 99, "unfold": [99, 371, 959], "untangl": 99, "mind": [99, 165, 166, 167, 214, 302, 303, 339, 340, 350, 368, 387, 395, 397, 400, 627, 628, 685, 958, 977, 982, 988, 995], "investig": [99, 105, 161, 334, 368, 958], "pca_back_proj_ax": 99, "kernel_pca_back_proj_ax": 99, "reli": [99, 118, 145, 169, 184, 185, 276, 307, 311, 339, 354, 355, 370, 373, 376, 377, 379, 381, 389, 390, 393, 398, 400, 401, 530, 566, 567, 574, 578, 588, 589, 844, 928, 951, 954, 956, 958, 962, 965, 977, 986, 1012, 1013, 1014, 1018, 1020], "analyt": [99, 398, 403, 513, 601, 689, 952, 956, 962, 981, 986], "kernelridg": [99, 148, 231, 653, 955, 1008], "relianc": 99, "578": [99, 106], "plot_kernel_pca": [99, 106], "aid": [100, 253, 393, 770, 771, 959, 986, 1004, 1016], "kevin": [100, 624, 1006, 1008, 1010, 1011, 1014, 1015, 1016, 1018, 1019], "hugh": [100, 854, 1006, 1017], "pdf": [100, 145, 256, 281, 298, 365, 368, 393, 402, 424, 430, 512, 515, 518, 522, 622, 625, 630, 639, 645, 647, 648, 652, 657, 660, 663, 664, 666, 667, 673, 816, 817, 828, 835, 871, 873, 958, 975, 978, 985, 1000, 1004], "30000": [100, 363], "pdf_z": 100, "plot_fig": [100, 193], "fig_num": [100, 193], "pca_scor": [100, 102], "vt": [100, 531], "full_matric": 100, "x_pca_axi": 100, "y_pca_axi": 100, "z_pca_axi": 100, "x_pca_plan": 100, "y_pca_plan": 100, "z_pca_plan": 100, "plot_surfac": [100, 167, 193], "172": [100, 106, 374, 474, 475, 630, 958], "plot_pca_3d": [100, 106], "cla": 101, "083": [101, 106, 167, 254, 317, 320], "plot_pca_iri": [101, 106], "homoscedast": [102, 228, 302, 962, 1012], "succe": 102, "subspac": [102, 396, 400, 433, 496, 536, 537, 672, 676, 915, 956, 965, 968, 974, 986, 996], "overestim": [102, 350, 397], "circumst": [102, 214, 965, 982], "nip": [102, 365, 496, 522, 547, 622, 962], "598": [102, 149, 522], "604": [102, 129, 132, 522], "minka": [102, 522, 958], "deni": [102, 1006, 1007, 1011, 1012, 1013, 1019], "engemann": [102, 1006, 1007, 1011], "x_homo": 102, "x_hetero": 102, "cross_val_scor": [102, 135, 160, 161, 163, 249, 252, 261, 270, 272, 329, 350, 368, 370, 379, 397, 400, 501, 556, 684, 722, 777, 800, 802, 886, 887, 951, 962, 992, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1017], "fa_scor": 102, "shrunk_cov_scor": 102, "lw_score": 102, "n_components_pca": 102, "n_components_fa": 102, "n_components_pca_ml": 102, "axhlin": [102, 134, 186, 255, 259], "violet": 102, "774": [102, 106, 167, 170, 282, 290], "plot_pca_vs_fa_model_select": [102, 106], "flower": [103, 265, 487, 488, 962, 982], "92461872": 103, "05306648": 103, "x_r": [103, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "x_r2": 103, "207": [103, 106, 295, 1004], "plot_pca_vs_lda": [103, 106], "ricker": 104, "sparsecod": [104, 398, 512, 518, 521, 529, 1011, 1012, 1014, 1016, 1018], "mexican": 104, "piecewis": [104, 309, 390, 953, 958, 972, 978], "matter": [104, 247, 350, 393, 400, 548, 649, 657, 659, 958, 1008], "motiv": [104, 368, 370, 381, 400, 954, 962, 972, 986, 1017], "heavier": [104, 395, 958], "subsampl": [104, 120, 123, 167, 196, 213, 214, 252, 308, 439, 540, 541, 542, 543, 544, 613, 660, 682, 780, 781, 805, 844, 856, 867, 894, 904, 954, 958, 983, 985, 1004, 1014, 1018], "ricker_funct": 104, "ricker_matrix": 104, "d_fix": 104, "d_multi": 104, "first_quart": 104, "transform_n_nozero_coef": 104, "lasso_lar": [104, 512, 518, 523, 529, 1014], "n_nonzero": 104, "coder": [104, 523, 697], "flatnonzero": [104, 184, 255, 264, 265, 761], "soft": [104, 129, 130, 368, 381, 550, 551, 874, 882, 976, 986, 1009], "debias": 104, "lstsq": [104, 368, 638, 651], "rcond": 104, "295": [104, 106, 128, 132], "plot_sparse_cod": [104, 106], "uncov": [105, 676], "inher": [105, 191, 350, 393, 398, 952, 954, 956, 957, 959, 963], "varimax": [105, 398, 513, 1016], "jona": [105, 1016], "sassenhagen": [105, 1016], "set_yticklabel": [105, 151, 160, 161, 169, 267, 341], "n_comp": [105, 172], "unrot": 105, "52106591": 105, "37741762": 105, "26934744": 105, "92329566": 105, "5804131": 105, "02449161": 105, "56485654": 105, "06694199": 105, "88096009": 105, "4472869": 105, "41691605": 105, "55390036": 105, "99918858": 105, "01915283": 105, "96228895": 105, "05840206": 105, "98633022": 105, "05752333": 105, "16052385": 105, "67443065": 105, "90809432": 105, "41726413": 105, "85857475": 105, "43847489": 105, "349": [105, 106, 374], "plot_varimax_fa": [105, 106], "43": [106, 155, 193, 229, 256, 276, 365, 373, 777, 791], "auto_examples_decomposit": 106, "predictor": [107, 132, 163, 196, 214, 370, 380, 381, 394, 396, 397, 400, 403, 447, 448, 463, 464, 465, 477, 497, 498, 499, 536, 537, 543, 546, 549, 583, 591, 611, 613, 614, 629, 634, 638, 650, 654, 661, 800, 802, 811, 812, 840, 852, 853, 859, 936, 958, 963, 1005, 1011, 1014], "stack": [107, 132, 163, 281, 348, 367, 376, 379, 381, 399, 445, 447, 448, 477, 496, 543, 546, 548, 549, 593, 608, 609, 611, 634, 654, 800, 802, 840, 844, 852, 853, 859, 936, 952, 982, 983, 984, 985, 999, 1007, 1011, 1012, 1013, 1014, 1015], "versu": [107, 128, 132, 163, 166, 174, 205, 211, 215, 231, 244, 249, 272, 284, 313, 320, 393, 397, 400, 403, 485, 501, 515, 534, 537, 591, 620, 639, 640, 647, 649, 655, 656, 657, 658, 763, 774, 777, 782, 801, 805, 811, 840, 874, 875, 882, 883, 886, 887, 951, 958, 962, 963, 968, 975, 976, 977, 995, 1012], "isolationforest": [107, 132, 163, 225, 234, 612, 805, 882, 968, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020], "oob": [107, 120, 132, 163, 400, 496, 545, 983, 1006, 1017], "votingclassifi": [107, 132, 163, 485, 545, 551, 639, 817, 821, 883, 886, 951, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "vote": [107, 129, 130, 132, 163, 274, 381, 382, 482, 536, 537, 538, 541, 545, 546, 550, 551, 638, 807, 821, 822, 827, 829, 963, 965, 984, 995, 999, 1007, 1009, 1014], "hasti": [108, 109, 112, 113, 119, 123, 145, 184, 255, 365, 397, 400, 500, 501, 534, 540, 541, 609, 637, 702, 703, 704, 809, 826, 871, 886, 887, 952, 956, 958, 963, 969, 974, 976, 978], "2009": [108, 109, 112, 113, 123, 393, 397, 398, 400, 401, 500, 501, 509, 512, 518, 519, 521, 522, 525, 528, 534, 540, 541, 616, 652, 660, 677, 810, 886, 887, 914, 915, 958, 962, 963, 969, 978], "tibshirani": [108, 112, 113, 123, 145, 184, 255, 365, 397, 400, 501, 540, 541, 609, 637, 702, 703, 704, 809, 826, 886, 887, 952, 956, 958, 963, 969, 978], "friedman": [108, 112, 113, 123, 255, 395, 397, 400, 459, 497, 498, 499, 501, 539, 540, 541, 546, 574, 575, 809, 886, 887, 889, 956, 958, 963, 969, 978], "ed": [108, 113, 123, 400, 501, 540, 541, 974, 1004, 1011], "springer": [108, 112, 113, 123, 255, 397, 398, 400, 501, 516, 540, 541, 671, 675, 677, 686, 701, 706, 720, 721, 736, 775, 886, 887, 959, 962, 963, 969, 978], "zhu": [108, 109, 400, 500, 534, 639, 873], "zou": [108, 109, 184, 400, 500, 534, 637, 958, 976], "rosset": [108, 109, 400, 500, 534], "make_hastie_10_2": [108, 119, 123, 260, 364, 400, 540, 969], "12_000": 108, "Be": [108, 142, 157, 339, 368, 395, 548, 549, 629, 635, 636, 637, 639, 640, 650, 661, 685, 795, 796, 854, 972, 1001, 1005], "stump": [108, 111, 400, 540, 1015], "2_000": 108, "dt_stump": 108, "min_samples_leaf": [108, 120, 121, 168, 306, 309, 344, 400, 538, 539, 540, 541, 542, 543, 545, 546, 547, 886, 887, 888, 889, 978, 1010], "dt_stump_err": 108, "dt_err": 108, "ada_discret": 108, "adaboostclassifieradaboostclassifi": 108, "decisiontreeclassifierdecisiontreeclassifi": [108, 348], "ada_r": 108, "zero_one_loss": [108, 368, 684, 714, 962, 1005, 1006, 1007], "ada_discrete_err": 108, "staged_predict": [108, 109, 122, 400, 534, 535, 540, 541, 542, 543, 1004, 1016], "ada_discrete_err_train": 108, "ada_real_err": 108, "ada_real_err_train": 108, "leg": 108, "fancybox": [108, 333], "get_fram": 108, "819": [108, 132, 401], "plot_adaboost_hastie_10_2": [108, 132], "sphere": [109, 163, 216, 217, 223, 340, 399, 500, 570, 669, 670, 671, 672, 673, 744, 901, 956, 960, 965], "roughli": [109, 121, 185, 247, 266, 276, 303, 354, 381, 398, 401, 500, 959, 1004], "samm": [109, 111, 400, 534], "13000": 109, "bdt_real": 109, "bdt_discret": 109, "real_test_error": 109, "discrete_test_error": 109, "real_test_predict": 109, "discrete_test_predict": 109, "n_trees_discret": 109, "n_trees_real": 109, "termin": [109, 355, 373, 374, 376, 384, 393, 429, 442, 534, 535, 539, 540, 541, 544, 546, 647, 648, 649, 657, 659, 836, 837, 887, 889, 968, 978], "alwai": [109, 118, 121, 175, 196, 214, 222, 229, 259, 262, 266, 323, 340, 350, 354, 355, 362, 368, 369, 370, 374, 380, 381, 384, 391, 393, 394, 397, 400, 401, 402, 403, 414, 425, 430, 445, 446, 448, 450, 463, 464, 465, 469, 477, 489, 490, 525, 530, 532, 533, 535, 537, 539, 540, 541, 542, 543, 545, 546, 549, 551, 562, 569, 570, 572, 575, 592, 608, 609, 611, 613, 614, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 657, 659, 660, 673, 676, 686, 690, 696, 702, 703, 704, 712, 714, 715, 719, 762, 765, 766, 775, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 812, 813, 822, 823, 830, 831, 837, 844, 852, 857, 859, 871, 879, 880, 881, 883, 884, 886, 887, 889, 916, 951, 952, 954, 956, 958, 961, 962, 965, 968, 970, 974, 975, 977, 978, 986, 988, 995, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "crop": [109, 376, 1019], "discrete_estimator_error": 109, "estimator_errors_": [109, 534, 535], "real_estimator_error": 109, "discrete_estimator_weight": 109, "estimator_weights_": [109, 534, 535], "62": [109, 167, 172, 214, 250, 295, 311, 315, 350, 363, 393, 474, 475, 819, 820, 1000, 1007], "697": [109, 132], "plot_adaboost_multiclass": [109, 132], "1d": [110, 112, 163, 167, 197, 229, 277, 290, 333, 346, 368, 375, 377, 380, 381, 394, 399, 445, 448, 598, 614, 634, 638, 641, 644, 665, 684, 693, 694, 700, 709, 710, 714, 718, 722, 763, 764, 767, 774, 821, 822, 823, 824, 825, 827, 829, 830, 831, 844, 894, 898, 899, 925, 949, 963, 988, 995, 1004, 1009, 1010, 1011, 1013, 1017, 1018], "299": [110, 248, 661], "drucker": [110, 400, 535], "1997": [110, 363, 398, 400, 403, 516, 535, 671, 675, 958, 959, 962], "dummi": [110, 196, 214, 259, 357, 370, 373, 388, 852, 860, 972, 978, 999, 1005, 1007, 1008, 1009, 1011], "decisiontreeregressor": [110, 112, 235, 299, 306, 346, 347, 373, 535, 537, 539, 540, 541, 543, 546, 613, 614, 886, 889, 891, 910, 978, 1005, 1006, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "adaboostregressor": [110, 400, 534, 543, 1006, 1007, 1010, 1013, 1014, 1017, 1019], "regr_1": [110, 346, 347], "regr_2": [110, 346, 347], "y_1": [110, 346, 347, 396, 962, 966, 976], "y_2": [110, 346, 347, 966], "407": [110, 132, 145, 365], "plot_adaboost_regress": [110, 132], "puriti": [111, 890, 892], "plot_adaboost_twoclass": [111, 132], "bdt": 111, "plot_color": [111, 345], "br": 111, "plot_step": [111, 117, 345], "class_nam": [111, 250, 890, 891, 892, 978, 1020], "xx0": [111, 612], "twoclass_output": 111, "plot_rang": 111, "586": [111, 132, 290], "irreduc": [112, 962], "light": [112, 363], "beam": [112, 1004], "pointwis": [112, 155, 404, 426], "offset": [112, 172, 379, 395, 398, 450, 489, 490, 544, 613, 614, 622, 623, 625, 626, 658, 708, 755, 757, 825, 882, 962, 976, 995, 1012], "narrow": [112, 121, 298, 300, 373, 819, 820], "tradeoff": [112, 163, 230, 249, 263, 264, 272, 339, 354, 376, 399, 496, 545, 707, 769, 805, 840, 859, 878, 959, 995, 1013, 1016], "bootstrap": [112, 113, 120, 160, 259, 268, 308, 397, 400, 535, 536, 537, 538, 539, 544, 545, 546, 904, 933, 958, 1004, 1005, 1007, 1009, 1012, 1014, 1017], "stem": [112, 168, 180, 195, 247, 397, 401, 954, 964], "0255": 112, "0003": 112, "0152": 112, "0098": 112, "0196": 112, "0004": [112, 303], "0092": 112, "baggingregressor": [112, 400, 536, 889, 1007, 1010, 1012, 1015, 1019, 1020], "n_repeat": [112, 115, 122, 144, 166, 168, 169, 256, 306, 397, 496, 615, 792, 793, 970], "knn": [112, 129, 136, 160, 284, 285, 288, 303, 308, 316, 339, 400, 583, 828, 873, 874, 965, 975, 995, 1010], "y_predict": [112, 370, 1004], "y_error": [112, 202], "y_nois": 112, "y_bia": 112, "y_var": 112, "plot_bias_vari": [112, 132], "z_i": [113, 966], "y_i": [113, 309, 334, 391, 400, 953, 954, 958, 962, 966, 976, 977, 978], "whilst": [113, 219], "practition": 113, "suitabl": [113, 121, 182, 293, 341, 362, 363, 374, 377, 393, 398, 401, 433, 443, 449, 468, 486, 489, 608, 616, 814, 815, 818, 854, 876, 927, 931, 956, 958, 961, 972, 974, 976, 982, 985, 997, 1018, 1019], "p592": 113, "593": 113, "kian": [113, 1009, 1019], "ho": [113, 400, 536, 537, 962, 1009, 1012, 1013, 1018], "hui": [113, 184, 519, 521, 528, 637, 958], "ordereddict": 113, "123": [113, 130, 245, 248, 350, 400, 497, 498, 499, 536, 537, 812, 963, 970], "warm_start": [113, 152, 189, 309, 370, 374, 381, 400, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 591, 627, 629, 630, 633, 639, 641, 643, 647, 648, 649, 650, 657, 658, 659, 661, 775, 776, 828, 836, 837, 968, 984, 999, 1004, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1020], "disabl": [113, 339, 366, 368, 401, 430, 441, 518, 519, 520, 527, 540, 541, 542, 543, 838, 898, 899, 972, 1010, 1013, 1017, 1019], "track": [113, 120, 315, 368, 371, 372, 384, 389, 515, 931, 963, 982, 983, 1011, 1014], "trajectori": 113, "ensemble_clf": 113, "oob_scor": [113, 400, 536, 537, 538, 539, 545, 546, 1009, 1011], "log2": [113, 206, 236, 538, 539, 540, 541, 545, 546, 886, 887, 888, 889, 963], "error_r": 113, "min_estim": 113, "max_estim": 113, "oob_error": 113, "oob_score_": [113, 536, 537, 538, 539, 540, 541, 545, 546, 1006, 1020], "clf_err": 113, "plot_ensemble_oob": [113, 132], "betatim": [114, 127, 1019], "leak": [114, 261, 339, 350, 394, 397, 839, 863, 864, 866, 867, 868, 869, 972, 1004, 1011, 1014], "80_000": 114, "x_full_train": 114, "y_full_train": 114, "x_train_ensembl": 114, "x_train_linear": 114, "y_train_ensembl": 114, "y_train_linear": 114, "gradientboostingclassifi": [114, 119, 120, 123, 300, 350, 379, 400, 534, 542, 613, 614, 963, 969, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "random_forest": 114, "gradient_boost": [114, 1005, 1006, 1007, 1013], "histgradientboostingclassifi": [114, 306, 307, 308, 309, 311, 355, 400, 540, 613, 614, 952, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "randomtreesembed": [114, 126, 218, 400, 888, 1005, 1012, 1013, 1017, 1018, 1019], "random_tree_embed": 114, "rt_model": 114, "randomtreesembeddingrandomtreesembed": 114, "rf_appli": 114, "rf_leaves_yield": 114, "kw_arg": [114, 843, 972, 1010], "rf_model": 114, "0x7f0318529c10": 114, "functiontransformerfunctiontransform": 114, "gbdt_appli": 114, "gbdt_leaves_yield": 114, "gbdt_model": 114, "0x7f0307a2aca0": 114, "roccurvedisplai": [114, 234, 237, 253, 265, 266, 306, 375, 768, 769, 968, 1001, 1014], "rt": 114, "rf": [114, 127, 130, 131, 168, 306, 350, 400, 548, 550, 551], "gbdt": [114, 167, 306, 307, 373, 400], "model_displai": 114, "276": [114, 132, 256], "plot_feature_transform": [114, 132], "artifici": [115, 118, 125, 161, 217, 231, 295, 339, 363, 364, 365, 373, 390, 392, 393, 397, 398, 403, 516, 677, 809, 836, 837, 955, 959, 961, 963, 969, 974, 978, 983, 986, 1004], "feature_importances_": [115, 116, 122, 145, 168, 169, 381, 400, 402, 534, 535, 538, 539, 540, 541, 545, 546, 547, 574, 575, 578, 886, 887, 888, 889, 1006, 1009, 1013], "estimators_": [115, 117, 232, 306, 381, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 807, 808, 809, 810, 811, 812, 813, 1005, 1011, 1018], "forest_import": 115, "mdi": [115, 122, 163, 164, 169, 170, 400, 445, 477, 545, 611, 615, 805, 839, 853, 970], "overcom": [115, 354, 401], "permutation_import": [115, 116, 122, 168, 169, 306, 400, 534, 535, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 970, 1014, 1016, 1017], "importances_mean": [115, 122, 168, 169, 306, 615, 970], "648": 115, "importances_std": [115, 615, 970], "omit": [115, 165, 166, 319, 373, 406, 456, 515, 647, 649, 657, 784, 786, 807, 808, 811, 814, 815, 816, 817, 818, 836, 960, 967], "plot_forest_import": [115, 132], "hotter": 116, "job": [116, 244, 368, 372, 376, 400, 404, 419, 426, 429, 431, 433, 438, 439, 442, 445, 448, 449, 453, 512, 516, 517, 518, 520, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 583, 591, 615, 620, 638, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 838, 841, 873, 874, 876, 928, 986, 990], "five": [116, 242, 315, 318, 363, 512, 520, 526, 959, 965, 977, 986, 1004], "drawback": [116, 213, 954, 957], "img_shap": 116, "imp_reshap": 116, "126": [116, 400], "met": [116, 370, 402, 515, 522, 608, 652, 958, 962, 1012], "439": [116, 132, 340], "plot_forest_importances_fac": [116, 132], "third": [117, 122, 140, 145, 156, 214, 225, 247, 281, 300, 355, 363, 367, 379, 382, 401, 515, 569, 570, 571, 572, 779, 780, 781, 786, 821, 822, 823, 825, 827, 857, 868, 930, 951, 973, 980, 1004, 1015], "fourth": [117, 988], "descend": [117, 608, 1014], "extratreesclassifi": [117, 126, 400, 402, 539, 545, 547, 888, 889, 963, 1007, 1008, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "decisiontre": [117, 1009], "consol": [117, 366, 989], "worth": [117, 167, 196, 368, 376, 986], "extratre": [117, 126, 354, 1007], "sequenti": [117, 139, 146, 163, 190, 257, 308, 366, 398, 400, 401, 482, 515, 574, 578, 583, 584, 586, 587, 627, 628, 633, 634, 641, 642, 643, 644, 654, 839, 952, 970, 976, 982, 984, 999, 1004, 1013, 1016], "9266666666666666": 117, "8666666666666667": 117, "9933333333333333": 117, "rdylbu": [117, 345], "plot_step_coars": 117, "plot_idx": 117, "model_titl": 117, "model_detail": 117, "blend": [117, 128, 381, 397, 982], "estimator_alpha": 117, "coarser": [117, 121], "regularli": [117, 379, 964], "xx_coarser": 117, "yy_coars": 117, "z_points_coars": 117, "cs_point": 117, "plot_forest_iri": [117, 132], "equidist": [118, 673], "lowa": 118, "sale": [118, 256, 962, 986], "42165": 118, "categorical_columns_subset": 118, "bldgtype": 118, "garagefinish": 118, "lotconfig": 118, "masvnrtyp": [118, 128], "housestyl": [118, 128], "fireplacequ": 118, "extercond": 118, "exterqu": [118, 128], "poolqc": 118, "numerical_columns_subset": 118, "3ssnporch": 118, "fireplac": 118, "bsmthalfbath": 118, "halfbath": 118, "garagecar": [118, 128], "totrmsabvgrd": 118, "bsmtfinsf1": [118, 128], "bsmtfinsf2": 118, "grlivarea": 118, "screenporch": 118, "n_categorical_featur": [118, 542, 543, 613, 614], "n_numerical_featur": 118, "1460": [118, 128], "make_column_transform": [118, 128, 166, 227, 307, 394, 445, 447, 1012], "dropper": 118, "hist_drop": 118, "hist_one_hot": 118, "etc": [118, 196, 214, 251, 260, 261, 350, 354, 356, 368, 370, 372, 373, 379, 380, 381, 390, 394, 397, 401, 470, 484, 538, 539, 545, 546, 649, 657, 673, 699, 751, 777, 791, 810, 813, 843, 854, 886, 887, 888, 889, 890, 892, 898, 899, 909, 951, 952, 956, 962, 965, 982, 983, 986, 1004, 1011, 1013, 1014], "use_encoded_valu": [118, 128, 168, 853, 1016], "unknown_valu": [118, 128, 168, 853, 1016, 1018, 1019], "hist_ordin": 118, "n_unique_categori": 118, "hist_n": 118, "mean_absolute_percentage_error": [118, 962, 1016, 1018], "neg_mean_absolute_percentage_error": [118, 962, 970], "n_cv_fold": [118, 783, 803, 806], "dropped_result": 118, "one_hot_result": 118, "ordinal_result": 118, "native_result": 118, "plot_result": [118, 241, 242, 247], "figure_titl": 118, "plot_info": 118, "test_scor": [118, 120, 122, 204, 255, 258, 271, 334, 344, 380, 397, 783, 802, 803, 806], "y_limit": 118, "mape_cv_mean": 118, "mape_cv_std": 118, "c0": [118, 228], "slowest": [118, 914, 915], "theori": [118, 231, 246, 334, 365, 392, 393, 397, 400, 671, 675, 706, 736, 870, 871, 915, 951, 958, 959, 961, 962, 963, 977, 978], "poorer": [118, 350, 398], "slight": [118, 201, 308, 400, 430, 1014], "acf": 118, "bde": 118, "isol": [118, 124, 225, 234, 340, 366, 368, 374, 384, 544, 825, 882, 1013, 1014], "bcde": 118, "histgradientboostingregressor__max_depth": 118, "histgradientboostingregressor__max_it": 118, "altogeth": [118, 374, 1012], "021": [118, 132], "plot_gradient_boosting_categor": [118, 132], "suffici": [119, 128, 204, 270, 326, 354, 381, 393, 402, 513, 527, 638, 663, 664, 796, 797, 963, 965, 983, 1013, 1019], "validation_fract": [119, 204, 309, 400, 540, 541, 542, 543, 647, 648, 649, 657, 659, 836, 837, 976, 1012, 1018], "denot": [119, 377, 381, 384, 391, 397, 400, 569, 570, 572, 777, 783, 791, 852, 853, 947, 951, 954, 958, 960, 962, 963, 972, 975, 988], "kept": [119, 246, 276, 334, 362, 372, 387, 403, 477, 516, 519, 521, 522, 527, 528, 578, 591, 592, 600, 601, 625, 676, 775, 776, 899, 972, 1012, 1013], "asid": [119, 204, 387, 540, 541, 542, 543, 647, 648, 649, 657, 659, 836, 837], "until": [119, 145, 204, 268, 308, 310, 373, 381, 382, 390, 393, 397, 402, 403, 489, 490, 538, 539, 540, 541, 545, 546, 547, 574, 583, 627, 628, 633, 634, 639, 640, 641, 642, 643, 644, 647, 649, 652, 657, 658, 659, 675, 775, 776, 780, 781, 836, 837, 875, 878, 886, 887, 888, 889, 937, 951, 958, 959, 967, 975, 978, 997, 1007, 1011, 1012, 1018], "n_estimators_": [119, 540, 541], "vighnesh": [119, 1009, 1010, 1012], "birodkar": [119, 1009, 1010, 1012], "vighneshbirodkar": 119, "rvraghav93": [119, 260, 298], "data_list": 119, "n_gb": 119, "score_gb": 119, "time_gb": 119, "n_gbe": 119, "gbe": 119, "gb": [119, 131, 400, 534, 614], "bar_width": 119, "bar1": 119, "crimson": 119, "bar2": 119, "coral": 119, "n_est": 119, "max_i": [119, 232, 964], "606": [119, 132, 295, 296, 594, 809, 963], "plot_gradient_boosting_early_stop": [119, 132], "fly": [120, 373, 376, 489, 490, 563, 1004, 1006, 1013], "pessimist": [120, 400], "cumul": [120, 196, 214, 393, 706, 715, 736, 856, 867, 972, 976, 1011, 1013, 1014], "demand": [120, 401, 777, 791, 800, 801, 802], "6820": 120, "special": [120, 166, 186, 214, 286, 326, 362, 364, 370, 374, 379, 381, 393, 396, 398, 445, 448, 534, 536, 540, 800, 890, 951, 956, 958, 960, 961, 962, 963, 965, 978, 1011, 1014, 1016, 1018], "expit": [120, 186, 400, 542, 958, 1011], "ridgewai": [120, 400], "gbm": [120, 400, 1007], "x3": [120, 234, 394, 996], "binomi": [120, 123, 400, 534, 540, 542, 958, 1018], "acc": 120, "heldout_scor": 120, "devianc": [120, 123, 196, 214, 400, 534, 539, 540, 541, 542, 543, 546, 629, 650, 661, 702, 703, 704, 727, 729, 732, 887, 889, 958, 978, 1005, 1014, 1015, 1017, 1018, 1020], "y_proba": [120, 123, 303, 381, 839], "staged_predict_proba": [120, 123, 534, 540, 542, 1004], "cv_estim": 120, "cv_clf": 120, "val_scor": 120, "cv_score": 120, "cumsum": [120, 196, 214, 1011], "oob_improvement_": [120, 400, 540, 541, 1006], "oob_best_it": 120, "test_best_it": 120, "cv_best_it": 120, "brew": [120, 366, 384], "oob_color": 120, "test_color": 120, "127": [120, 1004], "cv_color": 120, "253": [120, 515], "192": [120, 328, 337, 374, 1004], "oob_lin": 120, "test_lin": 120, "cv_line": 120, "dashdot": [120, 148, 151], "xticks_po": 120, "tolist": [120, 160, 169, 255, 308, 363], "xticks_label": 120, "plot_gradient_boosting_oob": [120, 132], "atleast_2d": [121, 370], "expected_i": 121, "amplitud": [121, 153, 155, 190, 403, 958], "lognorm": [121, 154, 177, 245, 302, 972], "tail": [121, 161, 166, 196, 198, 256, 298, 502, 505, 958], "imposs": [121, 341, 983], "mean_pinball_loss": [121, 309, 958, 962, 1017], "all_model": 121, "min_samples_split": [121, 122, 123, 260, 268, 299, 308, 400, 538, 539, 540, 541, 545, 546, 547, 780, 781, 886, 887, 888, 889, 951, 978, 1010], "gbr": 121, "gbr_l": 121, "5th": [121, 156], "95th": [121, 728], "y_med": 121, "fill_between": [121, 134, 148, 153, 155, 157, 175, 176, 214, 256, 258, 259, 260, 266, 271, 783], "unfortun": [121, 165, 166, 214, 376, 379, 400, 489, 490], "sinoisoid": 121, "highlight_min": [121, 185], "font": [121, 185, 210, 230, 890, 892], "pbl": 121, "nbsp": [121, 185], "715413": 121, "750348": 121, "127128": 121, "253445": 121, "379763": 121, "933253": 121, "305438": 121, "622811": 121, "940184": 121, "827917": 121, "909909": 121, "145957": 121, "382005": 121, "667219": 121, "asymmetr": [121, 198, 381, 1009], "signficiantli": 121, "nor": [121, 259, 339, 350, 354, 373, 379, 401, 419, 575, 902, 966, 978, 1015], "917281": 121, "767498": 121, "617715": 121, "692901": 121, "144204": 121, "245961": 121, "347717": 121, "648026": 121, "412021": 121, "607752": 121, "803483": 121, "874771": 121, "354394": 121, "355445": 121, "356497": 121, "852774": 121, "underestim": [121, 167, 196, 214, 256, 368], "extrem": [121, 196, 198, 233, 298, 317, 340, 368, 371, 393, 398, 538, 539, 545, 546, 547, 613, 614, 660, 704, 732, 888, 889, 890, 892, 962, 964], "coverage_fract": 121, "y_low": 121, "y_high": 121, "868": [121, 141], "hypothesi": [121, 256, 262, 334, 397, 671, 675, 804, 959], "pinbal": [121, 309, 543, 651, 703, 728, 958, 1017, 1018], "experiment": [121, 160, 161, 196, 267, 268, 308, 309, 357, 368, 370, 371, 378, 379, 381, 397, 477, 530, 608, 677, 780, 781, 930, 932, 951, 952, 958, 961, 962, 982, 983, 991, 999, 1012, 1013, 1016, 1017, 1018, 1019], "enable_halving_search_cv": [121, 267, 268, 308, 372, 780, 781, 951], "halvingrandomsearchcv": [121, 268, 308, 560, 780, 951, 1016, 1018, 1019], "make_scor": [121, 260, 397, 777, 801, 802, 962, 1013], "neg_mean_pinball_loss_05p_scor": 121, "greater_is_bett": [121, 722, 962], "search_05p": 121, "max_resourc": [121, 780, 781, 951], "min_resourc": [121, 780, 781], "redefin": [121, 166], "neg_mean_pinball_loss_95p_scor": 121, "search_95p": 121, "estimator__alpha": 121, "did": [121, 148, 166, 169, 196, 204, 214, 340, 363, 608, 693, 796, 880, 996, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019], "untun": 121, "joint": [121, 163, 167, 174, 215, 217, 394, 592, 633, 643, 673, 814, 815, 816, 817, 818, 878, 958, 959, 963, 967, 969, 973, 1004], "9026666666666666": 121, "796": 121, "sadli": 121, "652": [121, 132, 339, 342], "plot_gradient_boosting_quantil": [121, 132], "tackl": [122, 256, 355, 368, 393, 816, 964, 986, 991], "katrina": [122, 1015], "ni": [122, 1010, 1015], "nilichen": 122, "reg": [122, 166, 176, 299, 307, 331, 400, 539, 541, 549, 631, 632, 634, 635, 636, 637, 638, 644, 645, 646, 651, 652, 659, 660, 670, 674, 889, 958, 1009], "3025": 122, "7877": 122, "train_score_": [122, 400, 540, 541, 542, 543], "impur": [122, 348, 383, 400, 402, 534, 535, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 890, 892, 978, 999, 1009, 1010, 1011, 1012], "feature_import": 122, "sorted_idx": [122, 306], "po": [122, 220, 401], "align": [122, 161, 217, 241, 267, 341, 381, 670, 674, 965, 976, 998, 999, 1020], "vert": [122, 168, 169, 306, 976], "373": [122, 132], "plot_gradient_boosting_regress": [122, 132], "consider": [123, 149, 152, 251, 257, 263, 368, 403, 600, 777, 791, 951, 964, 968, 976, 986], "return_invers": [123, 370], "original_param": 123, "max_leaf_nod": [123, 196, 309, 348, 400, 538, 539, 540, 541, 542, 543, 545, 546, 547, 886, 887, 888, 889, 1007, 1013, 1015], "test_devi": 123, "782": [123, 132], "plot_gradient_boosting_regular": [123, 132], "anomali": [124, 163, 224, 234, 239, 282, 283, 363, 392, 450, 493, 503, 544, 620, 658, 825, 840, 882, 968, 1010, 1011], "recurs": [124, 139, 146, 163, 344, 370, 392, 393, 397, 422, 423, 424, 427, 444, 483, 496, 544, 574, 575, 578, 583, 613, 614, 639, 796, 883, 962, 965, 968, 969, 978, 984, 996, 999, 1004, 1014, 1015], "deform": [124, 246, 336], "notat": [124, 381, 394, 398, 401, 571, 693, 958, 962, 988, 1013, 1020], "120": [124, 218, 402, 571, 1004], "cluster_1": 124, "cluster_2": 124, "legend_el": [124, 209, 259], "nuniformli": 124, "max_sampl": [124, 160, 400, 536, 537, 538, 539, 544, 545, 546, 615, 1014, 1017, 1020], "isolationforestisolationforest": 124, "ax_": [124, 250, 259, 263, 303, 306, 375, 420, 612, 678, 679, 681, 682, 683, 783], "nof": 124, "512": [124, 132, 195], "plot_isolation_forest": [124, 132], "trend": [125, 153, 167, 228, 293, 403, 986, 1011], "xgboost": [125, 400, 982], "partialdependencedisplai": [125, 167, 235, 307, 308, 309, 311, 375, 614, 969, 1014, 1015, 1016, 1017, 1018, 1019], "f_0": 125, "f_1": [125, 263, 962], "gbdt_no_cst": [125, 307], "histgradientboostingregressorhistgradientboostingregressor": [125, 128, 311], "gbdt_with_monotonic_cst": 125, "monotonic_cst": [125, 307, 309, 400, 542, 543, 1019], "line_kw": [125, 235, 258, 307, 613, 783], "unconstrain": [125, 167, 307, 363, 976], "axes_": [125, 235, 307, 375, 613], "f_idx": 125, "oscil": [125, 167, 201, 393, 422], "specifii": 125, "x_df": 125, "gbdt_with_monotonic_cst_df": 125, "715": [125, 132], "plot_monotonic_constraint": [125, 132], "excel": [126, 362, 368, 671, 675, 958, 986], "bernoullinb": [126, 356, 815, 816, 817, 818, 963, 964, 1005, 1006, 1008, 1011, 1016, 1017, 1019], "hasher": [126, 341, 401], "transformed_grid": 126, "y_grid_pr": 126, "426": [126, 132, 263, 272], "plot_random_forest_embed": [126, 132], "multioutput": [127, 265, 274, 357, 370, 381, 414, 446, 463, 464, 465, 532, 535, 537, 538, 539, 541, 543, 545, 546, 549, 551, 592, 613, 614, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 768, 800, 808, 822, 830, 837, 846, 879, 881, 884, 886, 887, 888, 889, 904, 925, 926, 962, 984, 999, 1004, 1005, 1006, 1010, 1011, 1017, 1018], "multioutputregressor": [127, 414, 446, 463, 464, 465, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 811, 813, 822, 830, 837, 879, 881, 884, 887, 889, 1010, 1011, 1013, 1015, 1016], "nativ": [127, 160, 355, 363, 381, 400, 542, 543, 811, 812, 930, 958, 962, 982, 1014, 1016], "ever": [127, 377, 400, 986], "centr": 127, "regr_multirf": 127, "regr_rf": 127, "y_multirf": 127, "y_rf": 127, "cornflowerblu": [127, 190, 199, 206, 242, 244, 247, 263, 265, 279, 281, 287, 346, 347], "567": [127, 132, 235, 239], "plot_random_forest_regression_multioutput": [127, 132], "compil": [128, 276, 341, 354, 355, 368, 369, 370, 371, 376, 377, 379, 982, 1004], "dean": [128, 1012, 1018], "cock": [128, 1013], "becam": [128, 382, 1012], "kaggl": [128, 380], "residenti": 128, "iowa": 128, "won": [128, 294, 340, 372, 393, 449, 477, 608, 609, 611, 668, 685, 698, 716, 717, 735, 737, 773, 961, 972, 1009, 1010, 1015], "load_ames_h": 128, "yrsold": 128, "heatingqc": 128, "street": [128, 365], "yearremodadd": 128, "heat": [128, 326, 393, 433, 443, 676], "bsmtunfsf": 128, "mssubclass": 128, "condition2": 128, "garagetyp": 128, "overallqu": 128, "totalbsmtsf": 128, "miscfeatur": 128, "mosold": 128, "cat_selector": 128, "num_selector": 128, "besid": [128, 228, 368, 373, 570, 951, 1012], "cat_tree_processor": 128, "encoded_missing_valu": [128, 168, 853, 972, 1018, 1019], "num_tree_processor": 128, "add_ind": [128, 161, 608, 609, 611, 952, 1013, 1016], "tree_preprocessor": [128, 196], "0x7f03184538b0": 128, "0x7f03184532b0": 128, "ordinalencoderordinalencod": [128, 167, 168], "cat_linear_processor": 128, "num_linear_processor": 128, "linear_preprocessor": 128, "tediou": 128, "wrote": [128, 363], "lasso_pipelin": 128, "lassocvlassocv": 128, "rf_pipelin": 128, "randomforestregressorrandomforestregressor": 128, "gbdt_pipelin": 128, "stackingregressor": [128, 306, 400, 548, 1014, 1015, 1016, 1017, 1018], "stacking_regressor": 128, "final_estim": [128, 306, 400, 548, 549], "unknown_v": 128, "stackingregressorstackingregressor": 128, "forestcolumntransform": 128, "lassocolumntransform": 128, "boostingcolumntransform": 128, "final_estimatorridgecvridgecv": 128, "cross_val_predict": [128, 252, 306, 391, 397, 400, 419, 548, 549, 801, 802, 1008, 1009, 1010, 1011, 1013, 1015, 1017], "scorer": [128, 214, 260, 370, 381, 397, 400, 542, 543, 575, 583, 615, 640, 654, 656, 692, 712, 713, 722, 777, 780, 781, 783, 791, 801, 802, 803, 806, 951, 958, 962, 970, 983, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "test_": [128, 397], "line_kwarg": [128, 682], "nevalu": 128, "plot_stack_predictor": [128, 132], "exemplari": 129, "eclf": [129, 130, 400], "axarr": [129, 298], "tt": [129, 251, 446], "plot_voting_decision_region": [129, 132], "examplari": 130, "class1_1": 130, "class2_1": 130, "lightgreen": [130, 202, 213], "p3": 130, "p4": 130, "nweight": 130, "plot_voting_proba": [130, 132], "votingregressor": [131, 400, 550, 1013, 1014, 1015, 1018], "cohort": 131, "reg1": [131, 400], "reg2": [131, 400], "reg3": [131, 400], "ereg": [131, 400], "votingregressorvotingregressor": 131, "gbgradientboostingregressorgradientboostingregressor": 131, "rfrandomforestregressorrandomforestregressor": 131, "lrlinearregressionlinearregress": 131, "xt": [131, 276, 381, 608, 610, 777, 780, 781, 791, 823, 831, 839, 844, 849, 856, 867, 896], "pred1": 131, "pred2": 131, "pred3": 131, "pred4": 131, "labelbottom": [131, 256], "plot_voting_regressor": [131, 132], "auto_examples_ensembl": 132, "n_fold": [134, 628, 632, 634, 636, 640, 642, 644, 1005, 1006, 1010], "scores_std": [134, 135, 992], "semilogx": [134, 135, 185, 269, 271], "std_error": 134, "transluc": 134, "999999999999999e": 134, "31622776601683794": 134, "answer": [134, 165, 256, 368, 379, 706, 736, 962, 986], "extern": [134, 148, 356, 357, 361, 365, 368, 370, 373, 379, 381, 390, 393, 401, 402, 403, 574, 591, 592, 698, 717, 773, 958, 961, 962, 965, 978, 983, 989, 995, 999, 1012, 1016], "lasso_cv": 134, "k_fold": [134, 992], "maximis": [134, 242, 284, 956, 965], "5f": [134, 310], "Not": [134, 167, 354, 368, 379, 393, 411, 412, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 450, 451, 452, 453, 454, 455, 456, 457, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 544, 547, 550, 551, 562, 563, 564, 569, 570, 572, 608, 609, 610, 611, 658, 669, 670, 671, 672, 674, 748, 772, 775, 776, 777, 780, 781, 791, 816, 819, 820, 823, 824, 825, 827, 831, 843, 851, 854, 855, 857, 870, 871, 882, 962, 968, 982, 1013], "moreov": [134, 154, 300, 310, 350, 372, 393, 397, 403, 871, 932, 962, 986, 1012, 1018, 1019], "substanti": [134, 278, 282, 283, 299, 368, 825, 968, 1008, 1011], "05968": 134, "54209": 134, "04520": 134, "15521": 134, "07880": 134, "45192": 134, "546": [134, 138, 315, 320], "plot_cv_diabet": [134, 138], "this_scor": [135, 329], "318": [135, 138, 431], "plot_cv_digit": [135, 138], "961111": 136, "933333": [136, 828], "168": [136, 138, 1004], "plot_digits_classification_exercis": [136, 138], "200j": [137, 330], "plot_iris_exercis": [137, 138], "709": [138, 257], "auto_examples_exercis": 138, "exercis": [138, 356, 357, 365, 368, 482, 483, 485, 486, 633, 634, 639, 777, 782, 801, 821, 883, 989, 1007], "elimin": [139, 146, 163, 392, 393, 397, 429, 483, 496, 574, 575, 578, 583, 639, 780, 781, 796, 883, 948, 962, 984, 986, 999, 1004], "x_2": [140, 151, 193, 398, 400, 401, 403, 594, 606, 958, 966, 972], "x_3": [140, 972], "irrelev": [140, 350, 374, 395, 400, 402, 585, 720, 962], "agre": [140, 376, 382, 392, 393, 766, 988], "percept": [140, 167, 969], "correctli": [140, 144, 196, 214, 263, 265, 270, 286, 316, 326, 368, 377, 398, 400, 410, 419, 450, 474, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 550, 591, 639, 647, 649, 655, 656, 657, 684, 772, 774, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 859, 873, 874, 878, 880, 881, 882, 883, 884, 886, 888, 916, 959, 962, 965, 966, 972, 977, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "mutual_info_regress": [140, 310, 402, 573, 576, 577, 580, 581, 590, 1010, 1011, 1016, 1018, 1019, 1020], "f_test": 140, "x_": [140, 149, 247, 256, 306, 370, 396, 398, 608, 616, 873, 874, 958, 964, 969, 1010], "plot_f_test_vs_mi": [140, 146], "examin": [141, 374, 376, 393, 828], "f_classif": [141, 142, 329, 402, 573, 576, 577, 579, 580, 581, 585, 587, 590], "log10": [141, 154, 166, 181, 189, 257, 326], "pvalues_": [141, 573, 576, 577, 579, 580, 581, 1004], "x_indic": 141, "p_": [141, 962, 965, 978], "svm_weight": 141, "789": [141, 400], "clf_select": 141, "svm_weights_select": 141, "get_support": [141, 145, 308, 562, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 1006], "198": [141, 146, 1004], "plot_feature_select": [141, 146], "mistak": [142, 315, 350, 393, 397, 715, 850, 863, 864, 866, 867, 868, 869, 958, 963], "anova_filt": 142, "anova_svm": 142, "selectkbestselectkbest": [142, 310], "linearsvclinearsvc": [142, 263], "75790919": 142, "27158706": 142, "26109741": 142, "plot_feature_selection_pipelin": [142, 146], "rfe": [143, 144, 402, 575, 578, 583, 1004, 1008, 1014, 1015, 1016, 1017, 1018, 1020], "n_features_to_select": [143, 145, 308, 402, 574, 583, 1016, 1018], "ranking_": [143, 574, 575], "811": [143, 146], "plot_rfe_digit": [143, 146], "introduct": [144, 214, 254, 357, 368, 397, 398, 401, 571, 768, 769, 814, 818, 958, 960, 962, 964, 981, 989, 995, 998, 999], "class_sep": [144, 286, 496], "rfecv": [144, 402, 574, 578, 583, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1020], "stratifiedkfold": [144, 243, 251, 262, 266, 317, 397, 419, 548, 549, 575, 583, 640, 654, 777, 778, 780, 781, 782, 783, 785, 787, 791, 795, 797, 799, 800, 801, 802, 803, 804, 806, 992, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1017], "min_features_to_select": [144, 575, 1012], "n_features_": [144, 522, 574, 575, 1017, 1019], "n_score": 144, "plateau": [144, 254, 258], "526": [144, 146, 326, 337, 878], "plot_rfe_with_cross_valid": [144, 146], "selectfrommodel": [145, 381, 574, 583, 584, 984, 999, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1020], "sequentialfeatureselect": 145, "greedi": [145, 400, 402, 428, 430, 441, 540, 541, 583, 958, 978], "442": [145, 161, 365, 482, 995], "descript": [145, 166, 361, 362, 367, 368, 372, 373, 376, 381, 393, 401, 433, 443, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 488, 491, 525, 611, 657, 742, 745, 758, 962, 976, 977, 983, 985, 997, 1014, 1015, 1016, 1017, 1018, 1019], "descr": [145, 361, 362, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 488, 491, 994, 1012], "_diabetes_dataset": 145, "mass": [145, 235, 365, 775, 958, 969], "blood": [145, 226, 365, 995], "pressur": [145, 365, 995], "six": [145, 197, 218, 302, 365, 1013], "serum": [145, 365], "bmi": [145, 184, 185, 235, 365, 970], "tc": [145, 365, 382], "cholesterol": [145, 365], "ldl": [145, 365], "lipoprotein": [145, 365], "hdl": [145, 365], "s4": [145, 184, 185, 365], "tch": [145, 365], "s5": [145, 184, 185, 365, 970], "ltg": [145, 365, 482], "triglycerid": [145, 365], "s6": [145, 184, 185, 365], "glu": [145, 365], "sugar": [145, 365], "www4": [145, 365], "ncsu": [145, 365], "boo": [145, 365], "bradlei": [145, 365, 958], "efron": [145, 365, 663, 664, 958], "trevor": [145, 184, 311, 365, 609, 637, 702, 703, 704, 952, 958, 974, 1008, 1009, 1012, 1013, 1014, 1016], "iain": [145, 365, 958], "johnston": [145, 365, 958, 1013], "annal": [145, 184, 365, 400, 455, 497, 498, 499, 540, 541, 637, 958], "499": [145, 365, 374], "web": [145, 362, 363, 365, 368, 371, 376, 393, 400, 401, 502, 871, 962, 972, 1000, 1004], "stanford": [145, 365, 630, 663, 664, 814, 817, 818, 871, 960], "leastangle_2002": [145, 365], "pitfal": [145, 163, 164, 168, 170, 308, 357, 380, 381, 383, 397, 446, 448, 477, 634, 653, 654, 733, 792, 802, 805, 840, 852, 859, 958, 999], "accept": [145, 148, 253, 306, 326, 339, 341, 350, 354, 355, 362, 368, 370, 377, 379, 380, 381, 382, 387, 389, 393, 398, 401, 419, 423, 426, 427, 429, 442, 445, 448, 489, 490, 536, 537, 542, 543, 550, 551, 562, 563, 574, 575, 578, 609, 616, 620, 624, 660, 707, 722, 758, 775, 776, 780, 781, 821, 822, 829, 830, 843, 896, 898, 899, 902, 958, 960, 962, 965, 970, 972, 977, 982, 983, 992, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "tic": [145, 167, 267, 964], "sfm": 145, "toc": 145, "sequentialfeatureselector": [145, 402, 574, 578, 584, 1016, 1017, 1018, 1019, 1020], "sf": [145, 234, 256, 308, 363, 402, 473, 583], "backward": [145, 308, 371, 381, 402, 477, 558, 583, 595, 596, 599, 600, 601, 603, 604, 891, 894, 962, 966, 983, 1004, 1007, 1012, 1013, 1014, 1016, 1018], "tic_fwd": 145, "sfs_forward": 145, "toc_fwd": 145, "tic_bwd": 145, "sfs_backward": 145, "toc_bwd": 145, "421": [145, 706, 736, 962], "isn": [145, 306, 339, 341, 350, 355, 368, 376, 496, 542, 543, 575, 772, 780, 781, 852, 965, 977, 1014], "sound": [145, 350], "finish": [145, 244, 959], "expos": [145, 309, 311, 355, 361, 365, 381, 391, 400, 402, 403, 419, 445, 534, 535, 548, 549, 550, 551, 574, 575, 583, 592, 777, 780, 781, 791, 808, 809, 810, 811, 812, 813, 893, 930, 958, 962, 964, 992, 994, 996, 1001, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "654": [145, 146], "plot_select_from_model_diabet": [145, 146], "437": 146, "auto_examples_feature_select": 146, "basic": [147, 158, 161, 163, 194, 331, 354, 356, 357, 368, 370, 372, 379, 381, 393, 397, 398, 400, 592, 603, 874, 886, 887, 888, 889, 951, 952, 965, 976, 981, 982, 983, 986, 995], "introductori": [147, 158, 163, 224, 592, 603, 986], "gpr": [147, 157, 158, 163, 477, 591, 592, 594, 595, 596, 597, 602, 603, 604, 605, 606, 984, 999, 1014], "mauna": [147, 158, 163, 477, 592, 596, 603, 604, 606], "loa": [147, 158, 163, 477, 592, 596, 603, 604, 606], "co2": [147, 158, 163, 477, 592, 596, 603, 604, 606, 1011], "xor": [147, 158, 163, 332, 591, 595, 603, 958, 978, 1011], "posterior": [147, 148, 149, 158, 163, 175, 256, 398, 403, 530, 531, 533, 591, 592, 594, 595, 596, 600, 603, 604, 608, 625, 626, 689, 775, 956, 982, 1010, 1013], "iso": [147, 158, 163, 219, 591, 594, 595], "trick": [148, 231, 286, 341, 353, 356, 357, 371, 379, 394, 403, 563, 570, 624, 653, 954, 955, 966, 976, 977, 995, 996, 999, 1005, 1013], "drastic": [148, 229, 264, 393, 397, 965, 975], "theorem": [148, 392, 403, 964], "period": [148, 153, 157, 372, 381, 382, 391, 403, 596, 798, 858, 1012, 1017, 1019], "reus": [148, 189, 257, 306, 341, 370, 381, 393, 394, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 615, 627, 629, 630, 633, 639, 641, 643, 647, 648, 649, 650, 657, 658, 659, 661, 836, 837, 970, 974, 986, 1011], "training_sample_indic": 148, "training_data": 148, "training_noisy_target": 148, "newer": [148, 367, 384, 398], "expsinesquar": [148, 153, 157, 403], "emb": [148, 218, 229, 285, 361, 362, 443, 676, 959], "kernel_ridg": [148, 231, 357, 1008], "length_scal": [148, 149, 152, 153, 154, 155, 157, 403, 593, 596, 600, 602, 603, 604, 605], "tell": [148, 166, 167, 256, 326, 331, 355, 363, 393, 401, 544, 560, 951, 956, 969, 997], "1e0": [148, 231, 247, 264, 951], "kernel__length_scal": 148, "kernel__period": 148, "1e1": [148, 154, 196, 231, 326], "kernel_ridge_tun": 148, "153": [148, 644], "9915849773450223": 148, "7986499491396728": 148, "607275806426108": 148, "predictions_kr": 148, "gaussianprocessregressor": [148, 153, 154, 155, 156, 157, 403, 591, 594, 595, 596, 597, 598, 602, 605, 606, 624, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "whitekernel": [148, 153, 154, 403, 592, 593, 595, 1015], "periodicity_bound": [148, 153, 157, 596], "030": [148, 262, 272, 340], "kernel_": [148, 149, 150, 151, 152, 153, 154, 155, 157, 591, 592], "57": [148, 166, 212, 265, 295, 339, 365, 366, 384, 385, 386, 394, 686, 761, 812, 962, 972, 1004], "noise_level": [148, 153, 154, 403, 593, 606], "182": [148, 295, 374, 400], "mean_predictions_gpr": 148, "std_predictions_gpr": 148, "return_std": [148, 153, 154, 155, 157, 175, 176, 381, 533, 548, 549, 592, 594, 595, 596, 597, 606, 608, 625, 626, 839, 1011, 1012, 1016], "formul": [148, 157, 265, 368, 395, 398, 401, 403, 406, 456, 530, 531, 538, 545, 631, 632, 635, 636, 637, 639, 640, 646, 651, 743, 749, 776, 880, 883, 886, 888, 962, 963, 972, 984, 999], "forc": [148, 181, 276, 302, 339, 362, 366, 372, 388, 397, 400, 431, 438, 477, 587, 590, 627, 628, 633, 634, 638, 641, 642, 643, 644, 653, 654, 655, 662, 665, 668, 734, 758, 761, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 880, 881, 882, 883, 884, 896, 898, 899, 972, 999, 1009, 1012, 1013, 1014, 1016, 1017, 1018], "capac": [148, 168], "length_scale_bound": [148, 154, 155, 157, 403, 592, 596, 600, 603, 604], "attenu": 148, "779": [148, 158, 339], "plot_compare_gpr_krr": [148, 158], "arbitrarili": [149, 242, 247, 339, 381, 403, 414, 446, 463, 464, 465, 533, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 650, 651, 653, 654, 659, 660, 661, 702, 703, 704, 726, 765, 769, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 965, 972, 978], "lml": [149, 150, 154, 403], "exhibit": [149, 201, 339, 383, 397, 398, 400, 403, 970], "steep": [149, 167, 265, 266, 393, 397, 403, 431, 437], "laplac": [149, 403, 591, 592, 814, 815, 816, 818, 964], "214": [149, 176, 215, 403, 565], "gp_fix": 149, "gp_opt": 149, "log_marginal_likelihood": [149, 150, 152, 154, 157, 403, 591, 592, 1014], "theta": [149, 150, 152, 154, 156, 157, 232, 398, 403, 504, 517, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 673, 964, 978], "landscap": [149, 403], "theta0": 149, "theta1": 149, "pcolor": 149, "xscale": [149, 154, 231], "yscale": [149, 154, 196, 231, 339], "plot_gpc": [149, 158], "gpc_rbf_isotrop": 150, "gpc_rbf_anisotrop": 150, "m_max": 150, "plot_gpc_iri": [150, 158], "0256": 151, "dotproduct": [151, 152, 157, 403, 592, 606], "sigma_0": [151, 152, 157, 403, 595], "constantkernel": [151, 157, 403, 592, 598, 602, 605], "lim": [151, 515], "experi": [151, 155, 165, 166, 167, 168, 172, 198, 303, 334, 340, 341, 355, 362, 368, 371, 392, 397, 496, 708, 765, 958, 963, 974, 980, 981, 982, 986, 995, 997], "61611719": 151, "00099547": 151, "10469096": 151, "32782448": 151, "00000000": 151, "50000000": 151, "17289014": 151, "6984743": 151, "3109306": 151, "93271427": 151, "03823144": 151, "10584743": 151, "87600388": 151, "74310541": 151, "21301203": 151, "26386883": 151, "gp": [151, 156, 403, 591, 592, 603, 1010], "cb": [151, 229, 245], "widehat": 151, "mathbf": [151, 398, 958, 962, 966, 967, 976], "leq": [151, 398, 400, 958, 962, 965, 976, 977, 978], "clim": 151, "666": [151, 318, 821, 952], "clabel": [151, 207], "334": [151, 238], "138": [151, 158, 374, 400, 403, 962], "plot_gpc_isoprob": [151, 158], "stationari": [152, 403, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "coincid": [152, 198, 403], "430": [152, 154, 157, 405, 514], "convergencewarn": [152, 154, 156, 157, 204, 211, 293, 294, 300, 377, 381, 775, 776, 1012, 1013, 1016], "k1__constant_valu": [152, 157], "bound": [152, 154, 156, 157, 163, 198, 214, 224, 239, 255, 366, 375, 393, 398, 401, 403, 404, 426, 470, 483, 493, 504, 517, 576, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 616, 618, 631, 635, 639, 658, 686, 715, 775, 776, 819, 820, 856, 867, 870, 871, 872, 880, 881, 882, 885, 902, 930, 958, 961, 962, 965, 974, 976, 977, 979, 1012, 1015, 1016, 1018], "100000": [152, 231, 241, 368, 594, 595, 596, 600, 601, 603, 604, 606, 867, 955, 995, 997], "puor_r": [152, 332], "427": [152, 158, 337, 365, 487, 488, 564, 565], "plot_gpc_xor": [152, 158], "rw2006": [153, 403, 591, 592], "ascent": [153, 403], "monthli": [153, 382, 403, 962], "atmospher": [153, 403], "ppm": 153, "observatori": [153, 403], "hawaii": [153, 403], "1958": [153, 398, 400, 403, 513], "air": [153, 744], "41187": 153, "flag": [153, 366, 368, 369, 371, 445, 591, 592, 608, 654, 656, 708, 765, 977, 1010, 1014, 1015, 1017, 1018, 1019], "station": 153, "mlo": 153, "316": [153, 157, 340, 592, 595, 606, 855], "317": 153, "co2_data": 153, "to_datetim": 153, "timestamp": 153, "march": [153, 706, 736, 962, 1004, 1008, 1012, 1014, 1019], "dropna": 153, "nfrom": 153, "upcom": [153, 366], "to_numpi": 153, "rise": [153, 403], "irregular": [153, 393, 403, 965], "long_term_trend_kernel": 153, "decai": [153, 403, 525, 836, 837, 915, 962, 976, 1008], "seasonal_kernel": 153, "ration": [153, 604, 960], "diffus": [153, 403], "accommod": [153, 403, 1012], "rationalquadrat": [153, 157, 403, 597], "irregularities_kernel": 153, "shall": [153, 403], "phenomena": [153, 403], "noise_kernel": 153, "noise_level_bound": [153, 154, 606], "co2_kernel": 153, "subtract": [153, 166, 396, 398, 403, 425, 428, 440, 515, 625, 626, 631, 632, 635, 636, 637, 645, 646, 1011], "normalize_i": [153, 403, 592, 1018], "y_mean": [153, 154, 157, 592, 625, 626], "gaussianprocessregressorgaussianprocessregressor": 153, "todai": [153, 379, 997], "current_month": 153, "mean_y_pr": 153, "std_y_pr": 153, "536": [153, 276], "968": [153, 165, 254], "188": [153, 299, 304, 365, 374, 565], "0367": 153, "6ppm": 153, "613": [153, 158, 175, 215, 320], "plot_gpr_co2": [153, 158], "target_gener": 154, "add_nois": 154, "minima": [154, 184, 398, 428, 673, 959, 996, 1012], "y_std": [154, 157, 533, 592, 625, 626, 1017], "k1__k2__length_scal": [154, 403], "noptimum": 154, "nlog": 154, "length_scale_grid": 154, "noise_level_grid": 154, "newshap": 154, "641": [154, 158, 307, 312], "plot_gpr_noisi": [154, 158], "principl": [155, 281, 303, 341, 368, 379, 381, 382, 397, 400, 403, 915, 951, 961, 965, 976, 1011], "tikhonov": [155, 403, 653], "training_indic": 155, "n_restarts_optim": [155, 403, 591, 592], "mean_predict": 155, "std_predict": 155, "whenev": [155, 165, 350, 362, 376, 381, 384, 391, 463, 464, 465, 477, 609, 611, 953, 961, 983, 1014], "noise_std": 155, "y_train_noisi": 155, "481": [155, 158], "plot_gpr_noisy_target": [155, 158], "gene": [156, 362, 390, 432, 494, 574, 575, 826, 859], "letter": [156, 363, 365, 372, 401, 768, 769, 962], "among": [156, 167, 172, 196, 246, 274, 348, 356, 363, 370, 381, 382, 391, 392, 396, 428, 430, 493, 500, 772, 804, 822, 827, 829, 880, 883, 886, 887, 888, 889, 951, 954, 962, 963, 969, 972, 977, 1004, 1010, 1011, 1014], "brighter": 156, "4th": [156, 365], "6th": 156, "haussler": 156, "1999": [156, 363, 391, 393, 395, 398, 400, 419, 431, 438, 450, 455, 515, 522, 536, 537, 540, 541, 703, 872, 880, 881, 883, 884, 968, 974], "646": 156, "technic": [156, 197, 218, 310, 363, 365, 368, 381, 400, 633, 645, 666, 667, 873, 958, 959, 965], "depart": [156, 393], "california": [156, 160, 161, 298, 308, 361, 365, 471, 999], "santa": [156, 1019], "cruz": 156, "generickernelmixin": [156, 1014], "sequencekernel": 156, "baseline_similar": 156, "baseline_similarity_bound": 156, "hyperparameter_baseline_similar": 156, "_f": [156, 958], "_g": 156, "__call__": [156, 326, 381, 401, 403, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1011], "eval_gradi": [156, 403, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "is_stationari": [156, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "clone_with_theta": [156, 403, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "agct": 156, "agc": 156, "aact": 156, "taa": 156, "aaa": 156, "gaaca": 156, "training_idx": 156, "cga": 156, "taac": 156, "tcg": 156, "cttt": 156, "tgct": 156, "atag": 156, "ctc": 156, "420": [156, 314, 320], "plot_gpr_on_structured_data": [156, 158], "plot_gpr_sampl": 157, "gpr_model": 157, "y_sampl": [157, 592], "sample_i": [157, 403, 592, 1018], "single_prior": 157, "pm": [157, 167, 266, 400, 962], "dev": [157, 166, 214, 261, 266, 366, 368, 372, 374, 376, 962, 986, 1000, 1011, 1016, 1019], "594": [157, 196], "279": [157, 958], "067": 157, "alpha_bound": [157, 604], "1e15": 157, "_gpr": 157, "445": [157, 970], "492": [157, 624, 955, 995], "runtimewarn": 157, "semidefinit": [157, 972, 977], "21e": 157, "008": [157, 365, 374], "799": [157, 340], "791": 157, "sigma_0_bound": [157, 595], "629": 157, "lbfg": [157, 292, 370, 629, 630, 639, 640, 650, 653, 655, 661, 668, 810, 813, 836, 837, 958, 966, 1008, 1009, 1011, 1012, 1017, 1018, 1019], "statu": [157, 362, 372, 384, 477, 819, 820], "abnormal_termination_in_lnsrch": 157, "6576930005": 157, "matern": [157, 403, 1015, 1019], "609": [157, 374], "484": 157, "plot_gpr_prior_posterior": [157, 158], "579": [158, 505], "auto_examples_gaussian_process": 158, "iterativeimput": [159, 161, 162, 163, 471, 546, 561, 609, 610, 611, 620, 626, 653, 801, 822, 840, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "robin": [160, 161, 608, 952, 1010, 1013, 1018, 1019], "kneighborsregressor": [160, 233, 288, 310, 400, 551, 821, 827, 829, 830, 965, 1004, 1006, 1008, 1014, 1016, 1017, 1018, 1019, 1020], "mimic": [160, 196, 339, 795], "missforest": [160, 952], "popular": [160, 221, 363, 366, 373, 376, 379, 381, 392, 399, 400, 401, 403, 433, 443, 952, 954, 958, 960, 967, 976, 983, 992, 997], "enable_iterative_imput": [160, 161, 372, 608, 952, 1013], "fetch_california_h": [160, 161, 298, 308, 363, 380, 394, 1013, 1015], "x_full": [160, 161, 298], "y_full": [160, 161, 298], "2k": 160, "br_estim": 160, "score_full_data": 160, "neg_mean_squared_error": [160, 161, 198, 231, 270, 802, 962, 970, 1010], "x_miss": [160, 161], "y_miss": [160, 161], "missing_sampl": [160, 161], "missing_featur": [160, 161], "score_simple_imput": 160, "missing_valu": [160, 161, 236, 381, 608, 609, 610, 611, 749, 952, 1012, 1013], "score_iterative_imput": 160, "stricter": 160, "impute_estim": 160, "__class__": [160, 196, 198, 258, 300, 339, 340, 341, 375], "xerr": [160, 161, 340], "708": [160, 162, 519, 521, 528, 730], "plot_iterative_imputer_variants_comparison": [160, 162], "ness": [161, 214], "auxiliari": [161, 366, 986], "district": [161, 363], "neither": [161, 166, 306, 339, 350, 379, 419, 575, 609, 902, 965, 978], "20640": [161, 363, 471], "feel": [161, 298, 367, 368, 376, 393, 978], "x_diabet": [161, 992], "y_diabet": [161, 992], "x_california": 161, "y_california": 161, "add_missing_valu": 161, "missing_r": 161, "n_missing_sampl": 161, "x_miss_california": 161, "y_miss_california": 161, "x_miss_diabet": 161, "y_miss_diabet": 161, "knnimput": [161, 306, 608, 611, 952, 1014, 1015, 1018, 1019, 1020], "get_scores_for_imput": 161, "impute_scor": 161, "x_label": 161, "mses_california": 161, "stds_california": 161, "mses_diabet": 161, "stds_diabet": 161, "get_full_scor": 161, "full_scor": 161, "get_impute_zero_scor": 161, "fill_valu": [161, 227, 236, 307, 608, 611, 972, 1012, 1020], "zero_impute_scor": 161, "unweight": [161, 209, 444, 628, 634, 659, 688, 694, 709, 710, 718, 763, 764, 767, 768, 814, 815, 816, 817, 818, 952], "get_impute_knn_scor": 161, "knn_impute_scor": 161, "get_impute_mean": 161, "mean_impute_scor": 161, "obvious": [161, 354, 997], "get_impute_it": 161, "n_nearest_featur": [161, 608], "sample_posterior": [161, 608, 952], "iterative_impute_scor": 161, "n_bar": 161, "xval": 161, "domin": [161, 196, 201, 265, 303, 363, 374, 859, 964, 972, 978], "837": [161, 162], "plot_missing_valu": [161, 162], "545": 162, "auto_examples_imput": 162, "prune": [163, 343, 349, 402, 481, 538, 539, 540, 541, 545, 546, 574, 625, 805, 886, 887, 888, 889, 965, 984, 999, 1004, 1007, 1014, 1015], "elast": [163, 174, 187, 207, 215, 269, 392, 452, 453, 459, 482, 505, 627, 628, 633, 638, 639, 640, 641, 642, 643, 644, 649, 657, 659, 662, 665, 765, 951, 962, 976, 984, 999, 1004, 1009, 1013, 1014], "gram": [163, 174, 215, 370, 398, 401, 470, 505, 529, 569, 570, 571, 572, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 662, 663, 664, 665, 666, 667, 747, 755, 757, 951, 972, 997, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1018], "huberregressor": [163, 174, 202, 215, 505, 651, 652, 653, 659, 660, 958, 1010, 1011, 1012, 1013], "aic": [163, 174, 184, 215, 246, 482, 632, 634, 635, 636, 637, 776, 840, 859, 951, 958, 1004, 1011, 1017, 1018], "bic": [163, 174, 184, 215, 402, 482, 632, 634, 635, 636, 637, 776, 840, 859, 951, 958, 961, 1004, 1011, 1017, 1018], "mnist": [163, 174, 204, 215, 276, 291, 296, 477, 552, 639, 805, 836, 859, 901, 958, 966], "20newgroup": [163, 174, 215, 470, 552, 639, 805, 958], "ordinari": [163, 174, 175, 198, 199, 201, 213, 215, 309, 616, 627, 633, 635, 636, 637, 638, 653, 659, 663, 664, 668, 976, 984, 999], "spline": [163, 174, 215, 497, 498, 499, 653, 840, 854, 858, 982, 1017], "ransac": [163, 174, 202, 213, 215, 505, 630, 638, 652, 659, 660], "convex": [163, 174, 215, 217, 335, 340, 393, 395, 398, 406, 433, 443, 454, 456, 457, 460, 461, 462, 639, 657, 673, 958, 959, 965, 966, 976, 1017], "theil": [163, 174, 202, 215, 630, 638, 652, 659, 660], "sen": [163, 174, 202, 215, 630, 638, 652, 659, 660], "tweedi": [163, 174, 215, 445, 477, 533, 629, 650, 661, 687, 704, 725, 727, 729, 730, 732, 805, 840, 843, 844, 852, 859, 958, 1014, 1015, 1017], "insur": [163, 174, 196, 215, 445, 477, 533, 629, 650, 661, 687, 725, 730, 732, 805, 840, 843, 844, 852, 859, 958], "claim": [163, 174, 215, 368, 445, 477, 533, 629, 650, 661, 687, 725, 730, 732, 805, 840, 843, 844, 852, 859, 958], "failur": [163, 164, 166, 170, 368, 376, 638, 765, 805, 898, 899, 985, 986, 1017, 1018], "infer": [163, 164, 166, 170, 242, 246, 247, 256, 345, 362, 370, 379, 392, 397, 398, 477, 489, 490, 496, 515, 517, 530, 531, 534, 540, 541, 613, 616, 638, 690, 703, 721, 765, 775, 776, 805, 815, 853, 873, 874, 886, 887, 888, 889, 925, 952, 958, 962, 967, 972, 975, 978, 982, 983, 991, 1005, 1009, 1010, 1015, 1018], "causal": [163, 164, 170, 638, 765, 805], "multicollinear": [163, 164, 170, 396, 481, 545, 615, 636, 805, 958, 970], "isomap": [163, 216, 219, 223, 306, 310, 400, 483, 525, 530, 547, 670, 671, 672, 673, 828, 840, 849, 871, 965, 998, 999, 1012, 1014, 1017, 1018, 1019, 1020], "And": [163, 216, 223, 256, 339, 376, 387, 393, 397, 401, 511, 569, 570, 572, 673, 674, 958, 962, 980, 1011], "hole": [163, 216, 223, 511, 673, 674, 1018], "perplex": [163, 216, 217, 221, 223, 276, 495, 506, 517, 673, 959, 1009, 1011, 1018], "johnson": [163, 224, 239, 298, 302, 360, 392, 470, 483, 855, 866, 870, 871, 872, 972, 979, 999, 1012, 1018], "lindenstrauss": [163, 224, 239, 360, 392, 470, 483, 870, 871, 872, 979, 999], "halv": [163, 249, 272, 388, 496, 545, 560, 777, 780, 781, 883, 999, 1016], "custom": [163, 235, 249, 257, 272, 278, 306, 321, 326, 337, 339, 341, 360, 363, 366, 370, 375, 376, 377, 379, 380, 381, 392, 393, 394, 397, 403, 449, 470, 474, 475, 483, 485, 519, 521, 528, 530, 538, 539, 545, 546, 552, 554, 583, 671, 694, 777, 805, 843, 876, 883, 946, 951, 956, 962, 965, 982, 983, 986, 997, 999, 1004, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1019, 1020], "det": [163, 249, 272, 395, 496, 545, 679, 707, 769, 805, 840, 859, 878, 913, 1016], "tsne": [163, 217, 218, 219, 221, 222, 277, 290, 310, 381, 407, 415, 477, 669, 670, 671, 823, 827, 840, 936, 959, 965, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "novelti": [163, 225, 277, 283, 290, 325, 825, 984, 998, 999, 1004, 1012], "lof": [163, 225, 234, 277, 290, 544, 825, 882, 968], "boltzmann": [163, 291, 296, 483, 639, 694, 805, 835, 836, 837, 839, 864, 998, 999, 1006], "mlp": [163, 167, 235, 291, 293, 296, 477, 552, 805, 836, 837, 966], "semi_supervis": [163, 308, 310, 313, 314, 315, 316, 317, 318, 319, 357, 963, 975, 1005, 1010, 1011, 1018, 1019], "tie": [163, 321, 337, 379, 400, 493, 807, 883, 963, 977, 1005, 1020], "unbalanc": [163, 259, 321, 337, 397, 493, 883, 903, 904, 951, 976], "featurehash": [163, 338, 340, 342, 356, 363, 401, 445, 469, 562, 569, 570, 571, 572, 852, 1005, 1010, 1011, 1012, 1018, 1019], "auto_examples_python": 163, "auto_examples_jupyt": 163, "great": [165, 166, 194, 350, 368, 379, 398, 744, 983, 986, 1004, 1011], "unless": [165, 242, 247, 368, 370, 371, 379, 381, 393, 396, 404, 419, 426, 429, 431, 433, 438, 439, 442, 445, 448, 453, 470, 477, 489, 490, 512, 516, 517, 518, 520, 523, 524, 526, 527, 528, 529, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 592, 613, 615, 620, 627, 628, 632, 633, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 690, 695, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 836, 837, 838, 841, 863, 864, 866, 867, 868, 869, 873, 874, 886, 887, 888, 889, 894, 898, 899, 915, 930, 958, 961, 963, 1004, 1006, 1010, 1012, 1015, 1016], "willing": [165, 253], "econom": [165, 166, 256], "educ": [165, 166, 368, 697, 963], "earn": [165, 166, 382], "polici": [165, 166, 196, 214, 381, 516, 522, 958, 1019], "maker": [165, 166], "ovb": [165, 166], "parent_hourly_wag": 165, "college_degre": 165, "true_coef": [165, 191], "hourly_wag": 165, "stori": [165, 256, 363, 961], "pairplot": [165, 166], "diag_kind": [165, 166], "kde": [165, 166, 280, 281, 289, 399, 824], "features_nam": [165, 1011], "regressor_with_": 165, "y_pred_with_": 165, "r2_with_abl": 165, "975": [165, 977], "model_coef": 165, "intellectu": 165, "proxi": [165, 166, 398, 835, 992, 1009], "inadvert": [165, 381], "iq": 165, "regressor_without_": 165, "y_pred_without_": 165, "r2_without_": 165, "incorrect": [165, 263, 317, 350, 368, 393, 588, 589, 613, 614, 714, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "brought": [165, 534, 535, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "unobserv": [165, 166, 398], "confound": [165, 166], "conduct": [165, 256, 403, 982, 1018], "prohibit": [165, 397, 400, 608, 967, 975, 1011], "uneth": 165, "iv": [165, 962], "085": [165, 170, 182, 215], "plot_causal_interpret": [165, 170], "hint": [166, 354, 369, 373, 387, 429, 962, 995], "aris": [166, 259, 334, 355, 373, 393, 696, 958, 959, 1016], "mathemat": [166, 184, 213, 259, 360, 365, 368, 381, 383, 392, 395, 398, 399, 530, 531, 538, 545, 616, 627, 637, 770, 771, 776, 837, 880, 883, 886, 888, 962, 972, 974, 984, 986, 995, 999, 1018], "survei": [166, 396], "1985": [166, 393, 686, 696, 766], "534": 166, "race": [166, 363, 1007], "occup": [166, 298], "sector": 166, "marr": 166, "not_memb": 166, "marri": 166, "freq": [166, 341], "378": [166, 306, 312, 400, 997, 1004], "289": 166, "438": [166, 970], "440": 166, "411": [166, 395, 405, 454, 514], "350": 166, "018727": 166, "822097": 166, "833333": 166, "615373": 166, "379710": 166, "726573": 166, "55": [166, 172, 191, 196, 205, 214, 219, 223, 315, 373, 393, 397, 472, 578, 777, 783, 791, 803, 962, 1004], "thereaft": [166, 175], "hispan": 166, "manufactur": 166, "unmarri": 166, "dollar": [166, 363], "exploratori": [166, 986], "emul": [166, 376], "train_dataset": [166, 362], "rangeindex": 166, "533": 166, "normalis": [166, 592, 997], "numerical_column": [166, 168, 448], "if_binari": [166, 238, 852, 972, 1015], "prepend": [166, 1004], "exp10": 166, "ufunc": 166, "passthroughpassthroughtransformedtargetregressor": 166, "transformedtargetregressortransformedtargetregressor": 166, "ridgeridg": 166, "mae_train": 166, "mae_test": 166, "learnt": [166, 350, 381, 397, 951], "obviou": [166, 350, 354, 390, 398], "regressor_": [166, 446, 574, 575, 578], "race_hispan": 166, "013519": 166, "race_oth": 166, "009075": 166, "race_whit": 166, "022594": 166, "occupation_cler": 166, "000045": 166, "occupation_manag": 166, "090528": 166, "occupation_oth": 166, "025102": 166, "occupation_profession": 166, "071964": 166, "occupation_sal": 166, "046636": 166, "occupation_servic": 166, "091053": 166, "sector_construct": 166, "000198": 166, "sector_manufactur": 166, "031255": 166, "sector_oth": 166, "031025": 166, "marr_unmarri": 166, "032405": 166, "union_not_memb": 166, "117154": 166, "sex_mal": 166, "090808": 166, "south_y": 166, "033823": 166, "054699": 166, "035005": 166, "030867": 166, "adimension": 166, "Their": [166, 363, 365, 382, 393, 625, 1004], "visibl": [166, 167, 198, 336, 362, 368, 393, 835, 967, 1009, 1019], "gaug": 166, "decad": [166, 983], "x_train_preprocess": 166, "multipli": [166, 214, 256, 354, 377, 381, 398, 400, 401, 406, 445, 456, 496, 519, 521, 522, 528, 538, 542, 545, 627, 629, 633, 635, 639, 640, 641, 643, 649, 650, 651, 653, 657, 658, 659, 661, 667, 668, 670, 674, 744, 880, 881, 882, 883, 884, 886, 888, 904, 938, 939, 940, 951, 958, 962, 976, 1015], "coef_i": 166, "std_i": 166, "emphas": [166, 336, 374, 398, 962], "perturb": [166, 213, 295, 398, 400, 961], "caution": [166, 372, 422, 435, 1012], "repeatedkfold": [166, 397, 782, 793, 1011], "cv_model": 166, "return_estim": [166, 397, 802, 1012], "train_idx": [166, 381], "stripplot": 166, "whi": [166, 168], "collinear": [166, 169, 201, 214, 400, 548, 629, 650, 661, 852, 958, 1004], "teas": 166, "apart": [166, 309, 326, 379, 381, 394, 396, 402, 705, 977, 986, 1012], "vice": [166, 253, 339, 393, 403, 424, 588, 589, 808, 1008], "versa": [166, 253, 339, 393, 403, 424, 588, 589, 808, 1008], "column_to_drop": 166, "said": [166, 225, 257, 340, 363, 368, 770, 960, 968, 988, 995], "unchang": [166, 214, 263, 400, 415, 424, 425, 427, 428, 430, 445, 449, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 743, 814, 815, 816, 818, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 867, 870, 871, 876, 965, 988, 1012, 1018], "neglig": [166, 965, 1007], "littl": [166, 167, 168, 169, 225, 363, 401, 443, 625, 777, 791, 915, 952, 959, 961, 977, 978, 995, 1005, 1016], "ridgecvridgecv": 166, "alon": [166, 262, 326, 381, 387, 629, 650, 661, 722, 1011, 1013], "suppress": [166, 354, 376, 673, 965, 1011], "themselv": [166, 298, 364, 376, 381, 390, 393, 400, 401, 403, 596, 770, 978, 997, 1014], "bring": [166, 298, 398, 657, 659, 959, 986], "certain": [166, 201, 213, 256, 276, 302, 350, 363, 364, 372, 383, 393, 398, 402, 619, 630, 634, 639, 644, 665, 844, 878, 951, 954, 958, 959, 962, 963, 966, 972, 977, 982, 988, 992, 1009, 1013, 1016, 1019], "entic": 166, "pursu": 166, "tempt": 166, "conclud": [166, 176, 214, 256, 341, 350, 382], "deflat": [166, 396, 405, 514], "presum": [166, 274, 393, 401, 814], "must": [166, 167, 169, 177, 213, 214, 225, 235, 251, 282, 299, 339, 350, 363, 367, 368, 369, 370, 372, 374, 376, 381, 382, 389, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 413, 420, 423, 426, 427, 428, 430, 431, 432, 436, 438, 440, 442, 443, 445, 447, 448, 450, 455, 468, 489, 490, 493, 504, 512, 518, 519, 520, 521, 522, 524, 525, 528, 534, 535, 540, 541, 542, 543, 548, 549, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 591, 592, 598, 601, 608, 609, 610, 611, 613, 614, 619, 623, 624, 629, 630, 633, 639, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 680, 684, 687, 690, 715, 726, 744, 751, 754, 758, 761, 768, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 784, 786, 787, 789, 791, 792, 793, 795, 796, 798, 805, 814, 815, 816, 817, 818, 821, 822, 823, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 842, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 878, 879, 880, 881, 882, 883, 884, 885, 891, 930, 937, 946, 948, 951, 952, 958, 959, 960, 962, 965, 966, 968, 969, 976, 977, 978, 988, 997, 1004, 1007, 1011, 1015, 1017, 1018], "respond": [166, 368, 393], "plot_linear_model_coefficient_interpret": [166, 170], "complement": [167, 266, 339, 613, 614, 779, 794, 797, 805, 814, 815, 816, 817, 818, 969, 984, 999, 1012], "molnar": [167, 969], "christoph": [167, 398, 403, 513, 591, 592, 595, 600, 603, 775, 958, 963, 1005, 1009, 1012, 1015, 1016, 1017, 1018, 1019], "goldstein": [167, 969], "kapeln": [167, 969], "bleich": [167, 969], "pitkin": [167, 969], "peek": [167, 368, 969], "settingwithcopywarn": 167, "2284": 167, "904": [167, 254, 394], "287": [167, 974], "1747": 167, "1729": 167, "mask_train": [167, 214], "accordingli": [167, 368, 372, 373, 1011, 1012, 1019], "8640": 167, "nomin": [167, 362, 381, 382, 400, 401, 562, 563, 697, 972, 983], "numerical_featur": 167, "xtick_start": 167, "xtick_period": 167, "average_bike_rent": 167, "numeric_onli": 167, "decor": [167, 306, 368, 369, 370, 377, 783, 905, 909, 910, 922, 923, 929, 1014, 1017, 1020], "strike": 167, "mlp_preprocessor": 167, "quantiletransformerquantiletransform": 167, "catindex": 167, "hgbdt_preprocessor": 167, "sparse_threshold": [167, 445, 448, 1012], "passthroughpassthrough": 167, "pdp": [167, 613, 969, 1018], "mlp_model": 167, "hidden_layer_s": [167, 235, 292, 294, 836, 837, 966], "learning_rate_init": [167, 293, 294, 836, 837], "early_stop": [167, 204, 292, 309, 339, 381, 400, 542, 543, 647, 648, 649, 657, 658, 659, 836, 837, 976, 1012, 1015, 1018, 1019], "650": [167, 391], "forget": [167, 350, 355, 362, 372, 379, 398, 959, 985], "poor": [167, 172, 262, 271, 317, 391, 397, 398, 671, 675, 718, 816, 819, 820, 956, 957, 959, 964, 983, 988, 1011, 1012, 1013, 1015, 1017], "grid_resolut": [167, 308, 324, 612, 613, 614], "features_info": 167, "hgbdt_model": 167, "130": [167, 374], "cheaper": [167, 393, 403, 654, 954, 958], "temperatur": [167, 401, 969], "wind": [167, 963], "earlier": [167, 362, 368, 396, 810, 813, 972, 980, 1002, 1005, 1017, 1019], "meaningless": [167, 401, 880, 883, 1007], "celsiu": [167, 969], "interaction_cst": [167, 311, 400, 542, 543, 1019], "hgbdt_model_without_interact": 167, "histgradientboostingregressor__interaction_cst": 167, "38": [167, 187, 195, 250, 265, 281, 400, 613, 962, 972, 1004, 1005, 1006], "heatmap": [167, 169, 175, 267, 311, 326, 613, 969], "slope": [167, 194, 198, 213, 391, 393, 703, 728, 960, 962], "dry": 167, "wetter": 167, "531": 167, "spike": 167, "degrad": [167, 225, 298, 340, 399], "somehow": 167, "forbidden": [167, 400], "noisili": 167, "315": [167, 276, 365], "partial_depend": [167, 613, 969, 1005, 1013, 1014, 1015, 1016, 1019, 1020], "grid_valu": [167, 614, 1020], "add_ax": [167, 221, 267], "surf": 167, "rstride": 167, "cstride": 167, "bupu": 167, "nthe": [167, 254, 348], "pretti": [167, 221, 254, 339, 354, 368, 379, 836, 837, 966, 1013], "view_init": [167, 217, 219, 221], "clb": 167, "ndepend": 167, "plot_partial_depend": [167, 170, 306, 307, 308, 1009, 1013, 1014, 1015, 1016, 1017, 1018], "mitig": [168, 355, 356, 959, 978, 995, 996, 1016], "breiman": [168, 397, 400, 497, 498, 499, 536, 537, 545, 546, 615, 886, 887, 970, 978], "random_num": 168, "random_cat": 168, "sibsp": [168, 311], "parch": [168, 311], "categorical_encod": 168, "numerical_pip": 168, "memor": 168, "814": [168, 995], "mdi_import": 168, "sorted_importances_idx": 168, "retri": [168, 477, 1012, 1018], "classifier__min_samples_leaf": 168, "anymor": [168, 196, 258, 306, 307, 326, 350, 372, 394, 651, 1010, 1013, 1016, 1017, 1018, 1020], "810": 168, "832": [168, 400, 536, 537], "train_result": 168, "test_result": 168, "train_import": 168, "test_import": 168, "336": [168, 170, 374, 972], "plot_permutation_import": [168, 170], "wisconsin": [169, 361, 481, 999, 1009], "spearman": [169, 616, 617, 953], "spearmanr": 169, "squareform": 169, "load_breast_canc": [169, 317, 344, 373, 573, 576, 577, 579, 655, 656, 768, 962, 1009, 1010, 1015], "contradict": [169, 983], "perm_sorted_idx": 169, "tree_importance_sorted_idx": 169, "tree_indic": 169, "fill_diagon": [169, 220], "distance_matrix": 169, "dist_linkag": 169, "dendro": 169, "leaf_rot": 169, "dendro_idx": 169, "ivl": 169, "cluster_id": [169, 340], "fcluster": 169, "cluster_id_to_feature_id": 169, "selected_featur": 169, "x_train_sel": 169, "x_test_sel": 169, "clf_sel": 169, "273": [169, 170], "plot_permutation_importance_multicollinear": [169, 170], "726": [170, 970], "auto_examples_inspect": 170, "polynomialcountsketch": [172, 620, 622, 954, 1016, 1018], "covtyp": 172, "tensor": [172, 360, 398, 519, 521, 528, 620, 621, 622, 999, 1016], "sketch": [172, 356, 360, 377, 392, 620, 621, 622, 927, 999, 1016], "daniel": [172, 311, 354, 986, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018], "lopez": 172, "sanchez": [172, 1012, 1013], "lope": 172, "usal": 172, "581": [172, 256, 272], "cartograph": 172, "remot": [172, 315, 368, 371], "fetch_covtyp": [172, 234, 308, 363, 1013, 1016, 1018], "5_000": 172, "mm": 172, "lsvm": 172, "lsvm_time": 172, "lsvm_score": 172, "thumb": [172, 354, 368, 369, 379, 393, 639, 640, 647, 649, 657, 658, 659, 878, 962], "condens": 172, "compact": [172, 298, 354, 365, 819, 820, 978, 1006], "ps_lsvm_time": 172, "ps_lsvm_score": 172, "ksvm": 172, "ksvm_time": 172, "ksvm_score": 172, "pham": [172, 954, 1011], "ninh": 172, "rasmu": [172, 1011], "pagh": [172, 954], "kdd": [172, 363, 391, 419, 974], "doi": [172, 196, 214, 368, 393, 657], "1145": [172, 393, 657], "2487575": 172, "2487591": 172, "csie": [172, 362, 468, 489, 490, 639], "ntu": [172, 362, 468, 489, 490, 639], "tw": [172, 362, 468, 489, 490, 639, 977], "cjlin": [172, 362, 468, 489, 490, 639, 1007], "libsvmtool": [172, 362, 468, 489, 490], "678": [172, 173], "plot_scalable_poly_kernel": [172, 173], "auto_examples_kernel_approxim": 173, "ard": [175, 625, 626], "ol": [175, 186, 191, 193, 194, 202, 213, 309, 637, 958], "true_weight": 175, "ardregress": [175, 626, 958, 1011, 1012, 1013, 1015, 1016, 1017, 1018], "olr": 175, "brr": 175, "symlognorm": 175, "linthresh": 175, "10e": 175, "cbar_kw": 175, "seismic_r": 175, "stabilis": 175, "sparser": [175, 187, 398, 452, 459, 520, 524, 958, 965, 976], "retain": [175, 381, 393, 396, 397, 401, 475, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 676, 677, 795, 852, 951, 975, 1004], "ard_scor": 175, "scores_": [175, 176, 573, 576, 577, 579, 580, 581, 625, 626, 640, 1004, 1014], "brr_score": 175, "cutoff": [175, 920, 972, 1013], "full_data": 175, "input_featur": [175, 370, 381, 409, 413, 424, 425, 427, 428, 430, 445, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 1020], "x_plot": [175, 197, 202, 231, 259, 281, 303], "y_plot": [175, 197, 202, 259], "ard_poli": 175, "brr_poli": 175, "y_ard": 175, "y_ard_std": 175, "y_brr": 175, "y_brr_std": 175, "queri": [175, 289, 354, 372, 399, 404, 426, 431, 438, 533, 591, 592, 609, 625, 626, 706, 736, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 962, 965, 978, 982, 1006, 1008, 1009, 1012], "lambda_init": [175, 176, 626, 958, 1014], "intrins": [175, 381, 398, 400, 965, 970, 976, 1016], "plot_ard": [175, 215, 625], "alpha_init": [176, 626, 958, 1014], "yoshihiro": [176, 1014], "uchida": [176, 1014], "nimbus1after2a1sun7show": 176, "1234": [176, 244, 259, 368], "n_order": 176, "vander": 176, "ymean": 176, "ystd": 176, "pink": 176, "_init": 176, "lambda_": [176, 625, 626, 855, 958, 1011], "plot_bayesian_ridge_curvefit": [176, 215], "normalized_weight": 177, "x_offset": 177, "x_center": 177, "x_scale": [177, 849, 864, 972], "uncent": 177, "incorrectli": [177, 400, 401, 534, 540, 542, 714, 720, 962, 1005, 1010, 1012, 1013, 1015], "lm": 177, "98809919e": 177, "48938813e": 177, "03237920e": 177, "25349312e": 177, "53959628e": 177, "67451144e": 177, "00768662e": 177, "19112072e": 177, "07963978e": 177, "47987268e": 177, "76195467e": 177, "00393284e": 177, "07582983e": 177, "66670169e": 177, "65799352e": 177, "99891212e": 177, "58195950e": 177, "58667835e": 177, "98350372e": 177, "60836363e": 177, "00911944e": 177, "elasticnetelasticnet": 177, "023": [177, 215, 879, 970], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [177, 215], "huber": [178, 206, 392, 400, 541, 630, 657, 659, 976, 1004, 1006, 1007, 1016], "mks542": 178, "x_outlier": [178, 210, 282, 283, 325], "y_outlier": 178, "epsilon_valu": 178, "intercept_": [178, 186, 188, 205, 232, 324, 331, 335, 370, 381, 463, 464, 465, 530, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 878, 879, 880, 881, 882, 883, 884, 956, 958, 976, 977, 1004, 1011, 1016, 1018], "coef_ridg": 178, "plot_huber_vs_ridg": [178, 215], "logreg": [179, 813], "plot_method": [179, 279, 284, 322, 324, 327, 328, 612], "049": [179, 215, 452], "plot_iris_logist": [179, 215], "y_pred_lasso": 180, "r2_score_lasso": 180, "658064": 180, "enet": [180, 269], "y_pred_enet": 180, "r2_score_enet": 180, "642515": 180, "markerfmt": 180, "2ca02c": 180, "ff7f0e": 180, "bx": 180, "102": [180, 182, 215, 374, 995, 1006], "plot_lasso_and_elasticnet": [180, 215], "penalis": [181, 194, 211, 677], "lasso_path": [181, 632, 633, 634, 635, 636, 637, 644, 663, 664, 958, 1004, 1006, 1008, 1017], "enet_path": [181, 381, 628, 1006, 1008, 1017], "alphas_lasso": 181, "coefs_lasso": 181, "alphas_positive_lasso": 181, "coefs_positive_lasso": 181, "alphas_enet": 181, "coefs_enet": 181, "alphas_positive_enet": 181, "coefs_positive_enet": 181, "neg_log_alphas_lasso": 181, "neg_log_alphas_enet": 181, "coef_l": 181, "neg_log_alphas_positive_lasso": 181, "coef_pl": 181, "neg_log_alphas_positive_enet": 181, "coef_p": 181, "293": [181, 215], "plot_lasso_coordinate_descent_path": [181, 215, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "sai": [182, 225, 334, 339, 340, 368, 393, 394, 398, 400, 401, 428, 481, 485, 491, 658, 951, 968, 975, 986, 994, 995, 997], "x_sp": 182, "sparse_lasso": 182, "dense_lasso": 182, "coeff_diff": 182, "2e": [182, 270], "037": [182, 690], "01e": 182, "xs_sp": 182, "tocsc": 182, "nnz": [182, 340, 363, 680], "117": [182, 1005], "759": [182, 276], "65e": 182, "plot_lasso_dense_vs_sparse_data": [182, 215], "lars_path": [183, 377, 512, 518, 520, 523, 524, 526, 527, 529, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 664, 665, 666, 667, 958, 1004, 1006, 1009, 1013, 1015], "079": [183, 215, 285, 290, 365], "plot_lasso_lar": [183, 215], "zht2007": 184, "lassolars": [184, 185, 402, 632, 635, 636, 958, 1004, 1011, 1013, 1017, 1018], "2173": [184, 637, 958], "2192": [184, 637, 958], "038076": [184, 185], "050680": [184, 185], "061696": [184, 185], "021872": [184, 185], "044223": [184, 185], "034821": [184, 185], "043401": [184, 185], "002592": [184, 185], "019907": [184, 185], "017646": [184, 185], "001882": [184, 185], "044642": [184, 185], "051474": [184, 185], "026328": [184, 185], "008449": [184, 185], "019163": [184, 185], "074412": [184, 185], "039493": [184, 185], "068332": [184, 185], "092204": [184, 185], "085299": [184, 185], "044451": [184, 185], "005670": [184, 185], "045599": [184, 185], "034194": [184, 185], "032356": [184, 185], "002861": [184, 185], "025930": [184, 185], "089063": [184, 185], "011595": [184, 185], "036656": [184, 185], "012191": [184, 185], "024991": [184, 185], "036038": [184, 185], "034309": [184, 185], "022688": [184, 185], "009362": [184, 185], "005383": [184, 185], "036385": [184, 185], "003935": [184, 185], "015596": [184, 185], "008142": [184, 185], "031988": [184, 185], "046641": [184, 185], "linearlars": 184, "akaik": [184, 185, 246, 637, 776, 951, 958], "lasso_lars_": [184, 185], "zou_et_al_criterion_resc": 184, "noise_vari": [184, 513, 637, 958, 1018], "aic_criterion": 184, "criterion_": [184, 185, 637], "index_alpha_path_a": 184, "alphas_": [184, 185, 628, 631, 632, 634, 635, 636, 637, 642, 644, 663, 664, 1004, 1007, 1017], "lassolarsic__criterion": [184, 185], "bic_criterion": 184, "index_alpha_path_b": 184, "plot_lasso_lars_": [184, 215], "n_random_featur": 185, "x_random": 185, "random_": 185, "02d": 185, "random_02": 185, "random_05": 185, "random_08": 185, "random_11": 185, "647689": 185, "234137": 185, "469474": 185, "465730": 185, "012831": 185, "412304": 185, "067528": 185, "110923": 185, "601707": 185, "057711": 185, "208864": 185, "196861": 185, "478522": 185, "057122": 185, "324084": 185, "611676": 185, "331263": 185, "185659": 185, "812526": 185, "003533": 185, "alpha_a": 185, "alpha_b": 185, "160030": 185, "5244": 185, "764779": 185, "300343": 185, "5208": 185, "250639": 185, "5212": 185, "341949": 185, "542052": 185, "4928": 185, "018900": 185, "4936": 185, "201520": 185, "034077": 185, "4869": 185, "678359": 185, "4881": [185, 1009], "952289": 185, "189631": 185, "4815": 185, "437362": 185, "4831": [185, 636], "802601": 185, "329616": 185, "4810": 185, "423641": 185, "4830": 185, "880191": 185, "306012": 185, "4803": 185, "573491": 185, "4828": 185, "121351": 185, "124225": 185, "4804": 185, "126502": 185, "4832": 185, "765671": 185, "820705": 185, "621645": 185, "4836": 185, "352124": 185, "750389": 185, "4805": 185, "012521": 185, "4841": 185, "834310": 185, "570655": 185, "290075": 185, "4846": 185, "203174": 185, "550213": 185, "4807": 185, "075887": 185, "4852": 185, "080295": 185, "358295": 185, "4806": 185, "878051": 185, "4855": 185, "973770": 185, "259297": 185, "706026": 185, "4860": 185, "893055": 185, "237703": 185, "4809": [185, 259], "440409": 185, "4866": 185, "718747": 185, "850031": 185, "989341": 185, "4867": 185, "358990": 185, "384338": 185, "4801": 185, "702266": 185, "163224": 185, "296575": 185, "4802": 185, "594754": 185, "4872": 185, "147022": 185, "031555": 185, "236720": 185, "4874": 185, "880298": 185, "618263": 185, "4798": 185, "484109": 185, "4876": 185, "218997": 185, "526599": 185, "4799": 185, "543841": 185, "370039": 185, "586798": 185, "4794": 185, "238744": 185, "4880": 185, "156252": 185, "445978": 185, "4795": 185, "589715": 185, "4885": 185, "598533": 185, "259031": 185, "4796": 185, "966981": 185, "4891": 185, "067109": 185, "032179": 185, "662409": 185, "4894": 185, "853846": 185, "019069": 185, "652739": 185, "4888": 185, "752867": 185, "626286": 185, "817724": 185, "set_xscal": [185, 200, 201], "optimist": [185, 261, 339, 350, 688, 958, 962], "proper": [185, 214, 356, 374, 400, 430, 522, 534, 657, 915, 937, 957, 958, 959, 962, 977, 1004, 1014, 1015, 1016, 1017, 1018, 1019], "badli": [185, 196, 339, 356, 859, 958, 972], "lassolarscv": [185, 402, 633, 634, 635, 637, 644, 646, 663, 664, 665, 958, 1004, 1011, 1017], "3800": 185, "mse_path_": [185, 628, 632, 634, 636, 642, 644], "cv_alphas_": [185, 632, 636, 1016], "kink": 185, "heavili": [185, 354, 355, 368, 376, 630, 636, 979], "efficaci": 185, "865": [185, 215], "plot_lasso_model_select": [185, 215, 628, 634], "plot_logist": [186, 215], "axes_row": 187, "clf_l1_lr": 187, "clf_l2_lr": 187, "clf_en_lr": 187, "coef_l1_lr": 187, "coef_l2_lr": 187, "coef_en_lr": 187, "sparsity_l1_lr": 187, "sparsity_l2_lr": 187, "sparsity_en_lr": 187, "nl1_ratio": 187, "465": [187, 215, 247, 248], "plot_logistic_l1_l2_spars": [187, 215], "995": 188, "plot_logistic_multinomi": [188, 215], "dupr": [188, 204, 276, 278, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "m4x": [188, 212], "sag": [188, 203, 639, 640, 653, 655, 668, 958, 976, 982, 1009, 1010, 1011, 1013, 1014], "bry": [188, 205], "classes_": [188, 205, 226, 265, 314, 315, 368, 370, 381, 419, 420, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 550, 574, 575, 591, 639, 640, 647, 649, 655, 656, 657, 678, 681, 683, 768, 777, 780, 781, 791, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 826, 829, 836, 839, 846, 847, 850, 873, 874, 875, 878, 880, 883, 886, 888, 891, 962, 973, 976, 1005, 1008, 1009, 1011, 1014, 1016], "plot_hyperplan": [188, 205, 232], "194": [188, 215, 295], "looser": 189, "liblinear": [189, 324, 374, 639, 640, 768, 878, 879, 880, 883, 884, 962, 977, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "l1_min_c": [189, 958, 977, 1004], "intercept_sc": [189, 639, 640, 878, 879, 885, 958], "coefs_": [189, 294, 836, 837, 966, 1009], "119": [189, 215, 956, 1007], "plot_logistic_path": [189, 215], "jointli": [190, 263, 392, 393, 398, 958], "instant": 190, "wave": [190, 368, 961], "n_task": [190, 958], "n_relevant_featur": 190, "multitasklasso": [190, 633, 641, 644, 958, 1004, 1012, 1015, 1017], "coef_lasso_": 190, "coef_multi_task_lasso_": 190, "spy": 190, "feature_to_plot": 190, "seagreen": 190, "plot_multi_task_lasso_support": [190, 215], "reg_nnl": 191, "y_pred_nnl": 191, "r2_score_nnl": 191, "nnl": [191, 638], "8225220806196526": 191, "reg_ol": 191, "y_pred_ol": 191, "r2_score_ol": 191, "7436926291700356": 191, "low_x": 191, "high_x": 191, "low_i": 191, "high_i": 191, "get_ylim": [191, 298, 299], "847222222222214": 191, "plot_nnl": [191, 215], "23786125": 192, "2548": 192, "diabetes_x": [192, 995], "diabetes_i": [192, 995], "diabetes_x_train": [192, 995], "diabetes_x_test": [192, 995], "diabetes_y_train": [192, 995], "diabetes_y_test": [192, 995], "regr": [192, 394, 535, 537, 546, 627, 628, 648, 812, 837, 879, 881, 884, 977, 995], "diabetes_y_pr": 192, "039": [192, 215, 254, 731, 761, 962], "plot_ol": [192, 215], "193": [193, 215, 374, 400, 696, 766, 975], "plot_ols_3d": [193, 215], "greatli": [194, 230, 311, 368, 376, 433, 965, 978, 1010, 1018], "197": [194, 195, 215, 340, 403], "plot_ols_ridge_vari": [194, 215], "orthogonalmatchingpursuit": [195, 646, 666, 667, 958, 1004, 1006, 1009, 1012, 1017], "orthogonalmatchingpursuitcv": [195, 645, 1006, 1017], "make_sparse_coded_sign": [195, 512, 518, 1018, 1020], "n_nonzero_coef": [195, 507, 512, 518, 523, 529, 631, 645, 666, 667], "xw": [195, 309, 627, 628, 630, 633, 634, 635, 636, 637, 641, 642, 643, 644, 653, 662, 663, 664, 665, 958], "_0": [195, 666, 958, 962, 977], "distort": [195, 229, 365, 391, 392, 856, 867, 872, 959, 972, 974], "y_noisi": 195, "idx_r": 195, "omp_cv": 195, "plot_omp": [195, 215], "gbrt": [196, 400], "contract": [196, 214, 355, 381, 983], "compani": [196, 214, 393, 986], "policyhold": [196, 214, 958], "vehicl": [196, 214], "driver": [196, 214, 1019], "exposur": [196, 214, 958], "accid": [196, 214], "noll": [196, 214], "salzmann": [196, 214], "wuthrich": [196, 214], "novemb": [196, 214, 365, 1009, 1010, 1012], "2139": [196, 214], "ssrn": [196, 214], "3164764": [196, 214], "ch": [196, 198, 214, 317, 319], "rth": [196, 214], "41214": [196, 214], "idpol": [196, 214], "claimnb": [196, 214], "vehpow": [196, 214], "vehag": [196, 214], "drivag": [196, 214], "bonusmalu": [196, 214], "vehbrand": [196, 214], "vehga": [196, 214], "b12": [196, 214], "1217": 196, "r82": 196, "77000": 196, "75000": 196, "diesel": [196, 214], "r22": 196, "09000": 196, "r72": 196, "84000": 196, "678008": 196, "6114326": 196, "00274": 196, "3317": 196, "r93": 196, "678009": 196, "6114327": 196, "41": [196, 363, 365, 403, 450, 473, 512, 602, 605, 616, 639, 645, 666, 667, 761, 814, 964, 968], "9850": 196, "r11": [196, 214], "678010": 196, "6114328": 196, "1323": 196, "678011": 196, "6114329": 196, "r26": 196, "678012": 196, "6114330": 196, "678013": [196, 214], "10070308464041304": 196, "log_scale_transform": [196, 214], "linear_model_preprocessor": 196, "passthrough_numer": [196, 214], "binned_numer": [196, 214], "2e5": [196, 214, 844], "log_scaled_numer": [196, 214], "onehot_categor": [196, 214], "imbalanc": [196, 259, 263, 265, 340, 379, 391, 397, 684, 689, 767, 778, 782, 816, 962, 964, 970, 982], "simplist": [196, 401], "pertin": 196, "dummyregressor": [196, 214, 532, 962, 1005, 1007, 1008, 1011, 1012, 1014, 1017, 1018], "df_train": [196, 214], "df_test": [196, 214], "regressor__sample_weight": 196, "mean_absolute_error": [196, 198, 214, 962, 1005, 1007], "mean_poisson_devi": [196, 962, 1014], "score_estim": [196, 214], "n_mask": 196, "189": [196, 374, 875, 975], "comonli": 196, "ridge_glm": 196, "strictli": [196, 214, 298, 340, 373, 381, 396, 398, 401, 489, 490, 516, 522, 525, 542, 543, 569, 572, 623, 651, 652, 676, 681, 719, 777, 780, 781, 787, 791, 802, 828, 855, 866, 870, 871, 873, 874, 878, 879, 883, 884, 913, 951, 953, 958, 962, 972, 976, 1005, 1015, 1020], "domain": [196, 381, 383, 397, 616, 702, 703, 704, 778, 779, 784, 785, 786, 958, 983], "595": 196, "223745": 196, "glm": [196, 214, 307, 629, 650, 661, 958, 1004, 1015], "vanilla": [196, 393, 428, 430, 441, 610], "poissonregressor": [196, 214, 307, 310, 629, 661, 958, 1015, 1018, 1019], "poisson_glm": 196, "newton": [196, 214, 295, 591, 629, 639, 640, 650, 661, 836, 837, 958, 1008, 1009, 1011, 1015, 1016, 1017, 1018, 1019], "deep": [196, 370, 381, 407, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 749, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 966, 967, 982, 983, 986, 1009, 1015, 1016, 1018], "implicit": [196, 381, 400, 401, 553, 663, 664, 956, 961, 982, 1013], "concis": [196, 373, 1015, 1017], "poisson_gbrt": 196, "566": [196, 336, 337], "prone": [196, 243, 302, 379, 391], "set_yscal": 196, "5e5": 196, "realiz": [196, 986], "priori": [196, 213, 265, 274, 298, 381, 393, 400, 569, 575, 961], "wrongli": [196, 326], "gen_even_slic": [196, 377, 918], "_mean_frequency_by_risk_group": 196, "y_true_bin": 196, "y_pred_bin": 196, "idx_sort": 196, "sl": 196, "y_true_seg": 196, "y_pred_seg": 196, "11935": 196, "11933": 196, "11932": 196, "12196": 196, "11931": 196, "portfolio": [196, 214, 956], "riskiest": [196, 214], "safest": [196, 214, 350, 362], "irrespect": [196, 229, 265, 276, 587], "lorenz": [196, 214, 1009], "summar": [196, 247, 263, 265, 341, 368, 370, 383, 400, 502, 639, 675, 687, 688, 958, 959, 962, 968], "gini": [196, 214, 236, 268, 308, 534, 535, 538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 951, 970, 978, 1012, 1013], "lorenz_curv": [196, 214], "ranked_frequ": 196, "ranked_exposur": [196, 214], "cumulated_claim": 196, "cumulated_exposur": 196, "cum_exposur": 196, "cum_claim": [196, 214], "0x7f03046da7c0": 196, "worst": [196, 365, 393, 428, 689, 709, 710, 763, 764, 767, 770, 771, 804, 962, 986, 1004, 1017], "occurr": [196, 340, 341, 363, 368, 393, 401, 550, 551, 562, 570, 571, 598, 608, 609, 610, 611, 763, 814, 842, 964, 1005, 1010], "circumstanti": 196, "extractor": [196, 295, 356, 363, 381, 401, 484, 951, 1004], "discrim": 196, "profil": [196, 354, 368, 371, 502, 505, 958, 986], "ideal": [196, 198, 214, 253, 256, 263, 265, 266, 350, 367, 368, 372, 373, 376, 379, 381, 706, 736, 951, 961, 976, 977, 983], "meaningfulli": [196, 962], "plot_poisson_regression_non_normal_loss": [196, 215], "monomi": 197, "vandermond": [197, 972], "x_0": [197, 638], "pseudo": [197, 295, 370, 397, 405, 422, 433, 435, 443, 450, 451, 452, 454, 455, 456, 457, 514, 542, 543, 544, 608, 615, 620, 622, 623, 627, 628, 633, 634, 641, 642, 643, 644, 658, 672, 676, 780, 781, 789, 791, 828, 835, 870, 871, 875, 878, 879, 880, 883, 914, 915, 958, 974, 1009, 1018], "consecut": [197, 391, 397, 401, 425, 428, 430, 431, 433, 437, 440, 443, 518, 519, 520, 527, 583, 626, 647, 648, 649, 657, 658, 659, 775, 776, 782, 814, 815, 816, 817, 818, 836, 837, 951, 972, 997, 1012], "basis_1": 197, "basis_2": 197, "infinit": [197, 241, 259, 354, 403, 603, 604, 758, 775, 896, 898, 899, 954, 961, 972, 977, 1012, 1014, 1017, 1018, 1019], "malt": [197, 1017, 1018, 1019], "londschien": [197, 1017], "prepar": [197, 339, 354, 370, 371, 374, 376, 978, 986, 1012], "set_prop_cycl": 197, "teal": [197, 206, 263], "yellowgreen": [197, 199, 206, 346], "tomato": 197, "unwant": [197, 339], "oscillatori": [197, 972], "danger": [197, 397], "pft": 197, "splt": 197, "bsplines_": [197, 858], "refrain": [197, 368], "dec": [197, 658, 858, 882, 977], "31st": [197, 858], "advis": [197, 350, 366, 368, 393, 401, 419, 627, 633, 635, 641, 643, 653, 668, 954, 958, 964, 966, 977, 1018], "x_plot_ext": 197, "y_plot_ext": 197, "452": [197, 215], "plot_polynomial_interpol": [197, 215, 854, 858], "pareto": 198, "dale": [198, 1017], "mail": [198, 303, 340, 363, 368, 372, 376, 379, 382, 980, 1012, 1013], "ru": 198, "glemaitre58": 198, "y_true_mean": 198, "y_normal": 198, "y_pareto": 198, "huge": [198, 201, 354, 374, 608, 1007], "heavi": [198, 390, 983], "sp_version": [198, 651], "parse_vers": [198, 651], "incompat": [198, 372, 477, 952, 1012, 1013], "older": [198, 367, 372, 1007, 1014, 1016], "recent": [198, 357, 366, 369, 373, 376, 381, 384, 393, 449, 519, 546, 962, 976, 986, 1007, 1016], "interior": [198, 651, 958, 1019], "out_bounds_predict": 198, "bool_": 198, "logical_or": [198, 204, 265, 374], "hit": [198, 374], "wider": [198, 401, 891, 958], "asymmetri": [198, 339], "linger": 198, "linear_regress": [198, 270], "quantile_regress": 198, "y_pred_lr": 198, "y_pred_qr": 198, "805": [198, 281, 290], "486": 198, "670": 198, "cv_results_lr": 198, "cv_results_qr": 198, "test_neg_mean_squared_error": [198, 802], "732": 198, "690": 198, "679": [198, 878], "129": [198, 231, 993, 1004], "628": [198, 215, 340], "plot_quantile_regress": [198, 215], "robustli": [199, 392], "faulti": [199, 1004], "1903908407869": 199, "17236387": 199, "08533159": 199, "ransacregressor": [199, 202, 213, 630, 659, 660, 958, 1007, 1009, 1010, 1011, 1012, 1015, 1017, 1018], "inlier_mask": 199, "inlier_mask_": [199, 652], "outlier_mask": 199, "line_x": [199, 213], "line_i": 199, "line_y_ransac": 199, "estimator_": [199, 534, 535, 536, 537, 538, 539, 544, 545, 546, 547, 574, 575, 578, 652, 946, 1019], "105": [199, 215, 302], "plot_ransac": [199, 215], "regularis": [200, 406, 454, 456], "eventu": [200, 244, 392, 393, 402, 574, 986], "simpler": [200, 214, 326, 354, 367, 393, 398, 958, 963, 995, 1009], "stronger": [200, 257, 624, 633, 639, 640, 653, 654, 655, 656, 657, 659, 668], "kornel": [200, 1010], "kielczewski": [200, 1010], "plusnet": 200, "359": [200, 215, 340], "plot_ridge_coeff": [200, 215], "practis": 201, "maintain": [201, 214, 217, 256, 355, 357, 367, 371, 374, 375, 376, 379, 381, 382, 384, 393, 400, 422, 424, 848, 849, 855, 856, 859, 863, 866, 867, 869, 958, 959, 972, 982, 983, 988, 999, 1019], "10x10": 201, "hilbert": [201, 845, 954, 972], "n_alpha": [201, 453, 627, 628, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 654, 656, 662, 663, 664, 665, 1007], "164": [201, 215, 400], "plot_ridge_path": [201, 215], "theilsen": 202, "lessen": [202, 639, 640, 878, 879], "theilsenregressor": [202, 213, 630, 652, 659, 958, 1008, 1016, 1018], "x_error": 202, "y_errors_larg": 202, "x_errors_larg": 202, "deviant": [202, 968], "legend_titl": 202, "nabsolut": 202, "nto": [202, 265], "913": [202, 215, 400, 540], "plot_robust_fit": [202, 215], "asgd": [203, 976], "rob": [203, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1016, 1019], "zinkov": [203, 1004, 1005, 1006, 1008, 1009], "heldout": 203, "squared_hing": [203, 334, 647, 657, 878, 885, 958], "0e4": 203, "yy_": 203, "plot_sgd_comparison": [203, 215], "monitor": [204, 371, 381, 534, 535, 540, 541, 542, 543, 966, 1007, 1012, 1014, 1016], "_test": [204, 300, 370, 1017], "ignore_warn": [204, 300, 1010], "load_mnist": [204, 276], "class_0": [204, 365, 491], "class_1": [204, 365, 491], "554": [204, 212, 294], "mnist_784": [204, 212, 276, 294], "fit_and_scor": 204, "train_scor": [204, 271, 334, 344, 783, 802, 803, 806, 957], "estimator_dict": 204, "flush": 204, "results_df": [204, 256], "group_df": 204, "304": [204, 215, 302, 365], "plot_sgd_early_stop": [204, 215], "ova": [205, 647, 649, 657, 976], "plot_sgd_iri": [205, 215], "ugli": [205, 279, 284, 287, 322], "114": [205, 215, 311, 346, 349, 1004], "modified_huber_loss": 206, "darkorchid": 206, "plot_sgd_loss_funct": [206, 215], "l1_color": 207, "l2_color": 207, "elastic_net_color": 207, "1001": 207, "rho": [207, 398, 658, 958, 976, 1005], "elastic_net": 207, "dpi": [207, 892, 1017], "elastic_net_contour": 207, "l2_contour": 207, "l1_contour": 207, "inlin": [207, 368, 369, 978], "plot_sgd_penalti": [207, 215], "ndenumer": 208, "plot_sgd_separating_hyperplan": [208, 215], "no_weight": 209, "samples_weight": 209, "no_weights_handl": 209, "weights_handl": 209, "081": [209, 215, 970], "plot_sgd_weighted_sampl": [209, 215], "sgdoneclasssvm": [210, 225, 309, 882, 968, 976, 1017, 1019, 1020], "rc": [210, 372], "novel": [210, 282, 325, 350, 391, 951], "abnorm": [210, 225, 282, 325, 363, 473, 544, 825, 968, 1012], "y_pred_train": [210, 325], "y_pred_test": [210, 282, 325], "y_pred_outli": [210, 282, 325], "n_error_train": [210, 325], "n_error_test": [210, 282, 325], "n_error_outli": [210, 282, 325], "clf_sgd": 210, "pipe_sgd": 210, "y_pred_train_sgd": 210, "y_pred_test_sgd": 210, "y_pred_outliers_sgd": 210, "n_error_train_sgd": 210, "n_error_test_sgd": 210, "n_error_outliers_sgd": 210, "z_sgd": 210, "pubu": [210, 229, 282, 325], "darkr": [210, 282, 325], "palevioletr": [210, 282, 325], "b1": [210, 282, 325], "b2": [210, 282, 325], "blueviolet": [210, 282, 325], "plot_sgdocsvm_vs_ocsvm": [210, 215], "newgroups20": 211, "trim": [211, 819, 820], "20newsgroup": [211, 361, 1004], "4500": 211, "130107": [211, 229, 470], "epoch": [211, 381, 517, 647, 648, 649, 657, 658, 659, 836, 837, 976, 1011, 1012, 1017], "5960": 211, "26593496": 211, "43348936": 211, "26362917": 211, "31973683": 211, "37815029": 211, "2928359": 211, "27054655": 211, "62717609": 211, "19522393": 211, "30897646": 211, "34586917": 211, "28207552": 211, "34125758": 211, "29898468": 211, "34279478": 211, "59489497": 211, "38353048": 211, "35278655": 211, "19829832": 211, "14603365": 211, "6440": 211, "36047253": 211, "1268187": 211, "10606655": 211, "17985197": 211, "5395559": 211, "07993421": 211, "06686804": 211, "21443888": 211, "11528972": 211, "2075215": 211, "10914094": 211, "11144673": 211, "13988486": 211, "09684337": 211, "26286057": 211, "11682692": 211, "55800226": 211, "17370318": 211, "11452112": 211, "369": 211, "arthur": [211, 212, 393, 428, 441, 1009, 1010, 1011, 1012, 1013, 1016, 1018], "mensch": [211, 212, 1009, 1010, 1011, 1012], "timeit": [211, 244, 374], "default_tim": [211, 244], "model_param": 211, "this_max_it": 211, "train_tim": [211, 231, 339, 340], "ndataset": [211, 300], "run_tim": [211, 212], "418": [211, 215, 340], "plot_sparse_logistic_regression_20newsgroup": [211, 215], "8253": 212, "239": [212, 1004], "l1_plot": 212, "312": [212, 215, 340, 1007], "plot_sparse_logistic_regression_mnist": [212, 215], "subpopul": [213, 660, 958], "residual_threshold": [213, 652, 958, 1017], "remedi": 213, "max_subpopul": [213, 660, 1018], "lose": [213, 341, 363, 381, 396, 401, 403, 527, 914, 915, 952, 958, 997], "florian": [213, 986, 1004, 1008, 1010, 1014], "wilhelm": [213, 1008, 1010, 1014], "indigo": 213, "538": [213, 215], "plot_theilsen": [213, 215], "motor": 214, "parti": [214, 355, 367, 379, 779, 786, 930, 980, 1004, 1015], "liabil": 214, "functool": 214, "mean_tweedie_devi": [214, 962, 1014], "load_mtpl2": 214, "fremtpl2freq": 214, "df_freq": 214, "fremtpl2sev": 214, "41215": 214, "df_sev": 214, "claimamount": 214, "fillna": 214, "unquot": 214, "field": [214, 365, 390, 393, 394, 401, 479, 482, 598, 958, 960, 969, 977, 982, 985, 997, 1005], "column_nam": 214, "plot_obs_pr": 214, "y_label": 214, "fill_legend": 214, "df_": 214, "tweedie_pow": 214, "d\u00b2": 214, "subset_label": 214, "score_label": [214, 262], "est_freq": 214, "est_sev": 214, "unstack": [214, 259], "fremtpl2": 214, "unreason": [214, 397], "exception": 214, "200000": 214, "column_tran": [214, 394], "purepremium": 214, "indirectli": 214, "avgclaimamount": 214, "fmax": 214, "option_context": 214, "max_column": 214, "139": [214, 276, 374, 400, 433, 443, 672, 676, 963], "414": [214, 344, 349, 394, 706, 736, 855, 866, 962], "424": [214, 318, 320, 339, 340], "463": 214, "27000": 214, "303": [214, 616], "404": 214, "333333": 214, "r25": 214, "1981": [214, 958], "14156": 214, "142857": 214, "4792": 214, "1456": 214, "10403": 214, "928571": 214, "10834": 214, "17474": 214, "193548": 214, "225806": 214, "r73": 214, "3986": 214, "12860": [214, 1013], "5417": 214, "seemingli": [214, 350, 379], "169504": 214, "6237": 214, "upon": [214, 222, 289, 363, 368, 379, 381, 387, 542, 543, 608, 611, 652, 769, 775, 776, 819, 820, 951, 958, 978, 988, 997, 1018], "glm_freq": 214, "0201": 214, "0219": 214, "1379": 214, "1378": 214, "2441": 214, "2246": 214, "surprisingli": [214, 363, 401], "bonu": [214, 368, 992, 997], "malu": 214, "younger": 214, "infti": [214, 403, 600, 958, 972, 1011], "gammaregressor": [214, 307, 310, 661, 958, 1015, 1018, 1019], "mask_test": 214, "glm_sev": 214, "400000e": 214, "700000e": 214, "756746e": 214, "744042e": 214, "801770e": 214, "030677e": 214, "dummy_sev": 214, "000000e": 214, "756687e": 214, "744497e": 214, "803882e": 214, "033764e": 214, "slighli": 214, "avgclaim": 214, "nbclaim": 214, "1951": 214, "1940": 214, "1978": [214, 958], "apriori": 214, "regardless": [214, 257, 258, 259, 355, 368, 393, 516, 639, 685, 696, 962, 974, 1012, 1019], "glm_pure_premium": 214, "999": [214, 256, 372, 400, 698, 836, 837], "scores_product_model": 214, "scores_glm_pure_premium": 214, "expand_frame_repr": 214, "690000e": 214, "420000e": 214, "669930e": 214, "617050e": 214, "640770e": 214, "640880e": 214, "7000": 214, "695740e": 214, "683980e": 214, "682880e": 214, "692270e": 214, "8000": [214, 259, 260], "046010e": 214, "040530e": 214, "037600e": 214, "045390e": 214, "9000": 214, "387580e": 214, "385000e": 214, "382120e": 214, "387830e": 214, "9900": 214, "015716e": 214, "015414e": 214, "015347e": 214, "015587e": 214, "9990": 214, "914573e": 214, "914370e": 214, "914538e": 214, "914387e": 214, "904751e": 214, "904556e": 214, "904747e": 214, "904558e": 214, "730119e": 214, "722128e": 214, "739865e": 214, "731249e": 214, "295040e": 214, "212197e": 214, "295505e": 214, "213056e": 214, "917618e": 214, "299546e": 214, "916555e": 214, "313276e": 214, "951751e": 214, "325198e": 214, "riski": 214, "operation": [214, 986], "develop": [214, 254, 256, 306, 339, 354, 357, 363, 367, 368, 374, 379, 381, 383, 387, 390, 392, 395, 396, 400, 401, 415, 474, 777, 958, 965, 978, 980, 982, 983, 985, 986, 995, 1004, 1012, 1013, 1014, 1017, 1019, 1020], "ranked_pure_premium": 214, "cumulated_claim_amount": 214, "cumulated_sampl": 214, "y_pred_product": 214, "y_pred_tot": 214, "ordered_sampl": 214, "176": [214, 215, 374, 812, 963, 970], "plot_tweedie_regression_insurance_claim": [214, 215], "204": [215, 970, 975], "auto_examples_linear_model": 215, "md": [217, 218, 219, 220, 372, 669, 673, 675, 998, 999, 1004, 1016, 1019], "seek": [217, 219, 221, 367, 368, 379, 382, 489, 490, 959, 989, 991], "ticker": [217, 219, 222, 276], "s_point": 217, "s_color": 217, "make_s_curv": [217, 222], "plot_3d": 217, "points_color": 217, "subplot_kw": [217, 280], "set_major_loc": [217, 281], "multipleloc": [217, 281], "add_2d_scatt": 217, "set_major_formatt": [217, 219, 222, 276, 281], "nullformatt": [217, 219, 222, 276], "lle": [217, 218, 219, 221, 511, 670, 674, 959, 1016], "thought": [217, 281, 381, 393, 959, 963], "analys": [217, 348, 398, 780, 781, 959, 982, 986], "lle_standard": 217, "s_standard": 217, "lle_ltsa": 217, "ltsa": [217, 218, 219, 670, 674, 959], "s_ltsa": 217, "lle_hessian": 217, "hessian": [217, 218, 219, 400, 629, 639, 640, 650, 661, 670, 674, 958, 966, 998, 999, 1019], "s_hessian": 217, "lle_mod": 217, "s_mod": 217, "lle_method": 217, "tangent": [217, 670, 674, 960, 998, 999], "eigenmap": [217, 670, 672, 674, 676, 998, 999, 1005], "isometr": [217, 669, 671, 672, 673, 959], "geodes": [217, 669, 959], "s_isomap": 217, "md_scale": 217, "normalized_stress": [217, 218, 219, 220, 671, 675, 959, 1019], "s_scale": 217, "laplacian": [217, 360, 390, 422, 433, 443, 601, 620, 624, 672, 676, 745, 746, 754, 874, 958, 959, 975, 999, 1005, 1010], "s_spectral": 217, "t_sne": [217, 1012], "s_t_sne": 217, "535": [217, 223], "plot_compare_method": [217, 223], "offsetbox": 218, "plot_embed": 218, "425": [218, 596], "shown_imag": 218, "someth": [218, 339, 368, 370, 371, 372, 376, 401, 962, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "4e": 218, "imagebox": 218, "annotationbbox": 218, "offsetimag": 218, "neighborhoodcomponentsanalysi": [218, 284, 285, 286, 965, 1013, 1018], "random_project": [218, 229, 357, 974, 979, 1005, 1010, 1020], "sparserandomproject": [218, 229, 870, 974, 1005, 1010, 1018, 1020], "embeed": 218, "n_iter_without_progress": [218, 673, 1009, 1010], "nca": [218, 284, 285, 286, 828, 965], "175": [218, 223, 374, 972], "plot_lle_digit": [218, 223], "pole": 219, "thin": [219, 601], "earth": [219, 340, 744, 982], "057": [219, 234, 239, 374, 518], "092": [219, 304], "046": 219, "251": [219, 365], "sphere_data": 219, "trans_data": 219, "2g": [219, 222, 678, 1015], "252": [219, 365, 515, 855, 866], "258": 219, "se": [219, 365, 384], "624": [219, 223, 272, 969], "plot_manifold_spher": [219, 223], "euclidean_dist": [220, 229, 370, 431, 438, 669, 742, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 1004, 1009, 1012, 1013], "finfo": [220, 459, 587, 631, 632, 635, 636, 637, 663, 664, 721, 1019], "x_true": 220, "dissimilar": [220, 381, 390, 433, 671, 675, 959, 1010, 1020], "embedding_": [220, 381, 669, 670, 671, 672, 673], "nmd": 220, "npo": 220, "plot_md": [220, 223], "sr_point": 221, "sr_color": 221, "ambient": 221, "text2d": 221, "unrol": 221, "unnecessarili": [221, 1011, 1014], "clump": 221, "sr_lle": 221, "sr_err": 221, "locally_linear_embed": [221, 959], "sr_tsne": 221, "stretch": [221, 245], "byproduct": 221, "ultim": [221, 369], "sh_point": 221, "sh_color": 221, "topologi": [221, 222], "sh_lle": 221, "sh_err": 221, "sh_tsne": 221, "710": [221, 223, 391], "plot_swissrol": [221, 223], "tendenc": [222, 958, 959, 961, 964, 967], "clearer": [222, 977], "distil": 222, "pub": [222, 817, 873], "misread": 222, "narin": [222, 1011, 1012], "kokhlikyan": [222, 1011, 1012], "423": [222, 223], "plot_t_sne_perplex": [222, 223], "653": [223, 374, 592, 595, 606], "auto_examples_manifold": 223, "cope": [225, 356, 363, 958], "multimod": 225, "inli": [225, 958, 968], "unimod": [225, 455], "localoutlierfactor": [225, 234, 282, 283, 310, 381, 544, 882, 968, 1011, 1012, 1014, 1018, 1019, 1020], "modal": [225, 455, 917], "hypercub": [225, 496], "decent": [225, 255, 363, 964], "handpick": 225, "absenc": [225, 259, 381, 693, 842, 961, 962], "negative_linestyl": 225, "outliers_fract": 225, "n_inlier": 225, "anomaly_algorithm": 225, "blobs_param": 225, "392": [225, 239], "plot_anomaly_comparison": [225, 239], "transfus": 226, "1464": 226, "donat": 226, "confust": 226, "cm_displai": 226, "y_score": [226, 263, 265, 381, 463, 464, 465, 688, 701, 706, 707, 719, 720, 736, 762, 768, 769, 772, 777, 780, 781, 791, 839, 962, 1010, 1018], "pos_label": [226, 234, 381, 420, 421, 679, 681, 683, 687, 688, 690, 707, 709, 710, 718, 762, 763, 764, 767, 769, 846, 862, 962, 1012, 1016, 1018], "roc_displai": 226, "previs": 226, "precision_recall_curv": [226, 263, 681, 687, 688, 707, 962, 1005, 1006, 1010, 1017, 1018], "pr_displai": 226, "easlii": 226, "361": [226, 239, 363, 400, 536, 537], "plot_display_object_visu": [226, 239], "summaris": [227, 307], "composit": [227, 307, 357, 360, 397, 639, 768, 952, 958, 971, 999, 1005], "num_proc": [227, 307], "cat_proc": [227, 307], "feat1": [227, 307, 401], "feat3": [227, 307, 401], "feat0": [227, 307], "feat2": [227, 307, 401], "033": [227, 239, 289, 290, 970], "plot_estimator_represent": [227, 239], "isotonicregress": [228, 953, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "ir": [228, 398, 571, 706, 736, 814, 818, 960, 962], "out_of_bound": [228, 616], "y_": [228, 242, 246, 247, 288, 370, 396, 398, 618, 629, 650, 661, 709, 710, 718, 763, 764, 767, 958, 962, 1010], "linearregressionlinearregress": 228, "x_thresholds_": [228, 616, 1016], "y_thresholds_": [228, 616, 1016], "152": [228, 239, 374], "plot_isotonic_regress": [228, 239], "lemma": [229, 360, 392, 515, 522, 530, 870, 871, 872, 956, 999, 1007], "johnson_lindenstrauss_min_dim": [229, 974, 1005], "achliopta": [229, 871, 872, 974], "_compon": [229, 517], "geq": [229, 398, 400, 958, 962, 972, 976, 977], "_sampl": [229, 398, 519, 521, 528], "admiss": [229, 355], "eps_rang": 229, "min_n_compon": 229, "nn_sampl": [229, 268], "semilogi": 229, "nn_compon": [229, 230], "100k": 229, "n_components_rang": 229, "rp": 229, "projected_data": 229, "n_byte": 229, "projected_dist": 229, "min_dist": 229, "max_dist": 229, "hexbin": 229, "gridsiz": 229, "245": [229, 323, 337, 974, 1006], "833": 229, "271": 229, "jl": [229, 871], "436": 229, "141": [229, 239, 251, 272, 515, 878, 963], "plot_johnson_lindenstrauss_bound": [229, 239], "rbfsampler": [230, 620, 621, 623, 954, 988, 1008, 1018, 1019], "mont": [230, 403, 592, 622, 623, 954, 967], "fourier": [230, 392, 619, 620, 621, 622, 623, 738, 739, 954], "acceler": [230, 311, 354, 379, 449, 673, 876, 959, 982, 986, 1013, 1017, 1019], "data_train": [230, 257, 339], "targets_train": 230, "data_test": [230, 257, 339], "targets_test": 230, "kernel_svm": 230, "linear_svm": 230, "feature_map_fouri": 230, "feature_map_nystroem": [230, 620], "fourier_approx_svm": 230, "feature_map": [230, 298], "nystroem_approx_svm": 230, "kernel_svm_tim": 230, "kernel_svm_scor": 230, "linear_svm_tim": 230, "linear_svm_scor": 230, "fourier_scor": 230, "nystroem_scor": 230, "fourier_tim": 230, "nystroem_tim": 230, "feature_map__n_compon": 230, "timescal": 230, "ly": [230, 827, 829, 830, 831, 1008], "flat_grid": 230, "lv_ep": 230, "tab10": [230, 246], "389": [230, 239, 574, 575, 997], "plot_kernel_approxim": [230, 239], "krr": [231, 403, 624, 955], "insensit": [231, 624, 657, 659, 768, 879, 955, 976, 977, 1004], "fifth": [231, 955, 988], "kr": [231, 256, 1018], "svr_fit": 231, "kr_fit": 231, "sv_ratio": 231, "support_": [231, 333, 450, 455, 574, 575, 583, 880, 881, 882, 883, 884, 977], "y_svr": 231, "svr_predict": 231, "y_kr": 231, "kr_predict": 231, "09999999999999999": [231, 264, 326], "737": [231, 505], "723": 231, "340": [231, 314], "sv_ind": 231, "arithmet": [231, 374, 376, 393, 532, 629, 650, 661, 685, 698, 716, 717, 737, 773, 962, 1012], "test_tim": [231, 339], "train_test_s": 231, "learningcurvedisplai": [231, 258, 311, 957, 1019], "negate_scor": [231, 783], "std_display_styl": [231, 258, 783], "get_legend_handles_label": [231, 258, 263], "plot_kernel_ridge_regress": [231, 239], "theta_c": [232, 504], "reject": [232, 381, 382, 504, 652, 707, 898, 899, 958, 962, 1012], "never": [232, 350, 368, 377, 379, 387, 393, 396, 397, 431, 438, 504, 527, 536, 537, 538, 545, 954, 1014, 1017], "likewis": [232, 393, 504], "surround": [232, 368, 825, 968], "cca": [232, 396, 464, 466, 1008, 1012, 1013, 1014, 1016, 1018], "onevsrestclassifi": [232, 263, 265, 274, 391, 807, 809, 878, 988, 1005, 1006, 1008, 1010, 1011, 1017, 1018], "metaclassifi": 232, "min_x": 232, "max_x": 232, "plot_subfigur": 232, "min_i": 232, "zero_class": 232, "one_class": 232, "160": [232, 951, 995], "nfor": 232, "209": [232, 239, 721, 855], "plot_multilabel": [232, 239], "extratreesregressor": [233, 400, 538, 546, 547, 888, 889, 1007, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "n_face": 233, "face_id": 233, "n_pixel": [233, 254], "nn": [233, 401, 676, 995], "y_test_predict": 233, "true_fac": 233, "completed_fac": 233, "742": [233, 239], "plot_multioutput_face_complet": [233, 239], "benchmark": [234, 276, 308, 340, 341, 354, 361, 363, 368, 379, 384, 386, 391, 449, 496, 876], "iforest": 234, "pharuj": 234, "rajborirug": 234, "ra": 234, "kmitl": 234, "ac": [234, 511, 645, 666, 667, 958, 975, 997], "th": [234, 309, 348, 380, 397, 400, 408, 423, 427, 432, 434, 440, 444, 453, 538, 539, 540, 541, 542, 543, 545, 546, 547, 574, 575, 613, 629, 630, 650, 652, 661, 677, 699, 760, 798, 903, 952, 958, 962, 966, 969, 976, 977, 1019], "preprocess_dataset": 234, "fetch_kddcup99": [234, 363, 1011, 1012, 1013, 1016, 1017], "labelbinar": [234, 265, 381, 721, 808, 843, 852, 862, 963, 988, 1007, 1008, 1009, 1013, 1018], "dataset_nam": [234, 276], "smtp": [234, 363, 473], "sa": [234, 363, 473], "percent10": [234, 473], "lb": [234, 846, 973], "forestcov": 234, "glass": [234, 363], "wdbc": [234, 365], "cardiotocographi": 234, "tablewar": 234, "x_mal": 234, "y_mal": 234, "x_ben": 234, "y_ben": 234, "x_mal2": 234, "y_mal2": 234, "compute_predict": 234, "model_nam": [234, 274], "negative_outlier_factor_": [234, 283, 825, 968], "datasets_nam": 234, "models_nam": 234, "ceil": [234, 538, 539, 540, 541, 544, 545, 546, 547, 575, 652, 780, 781, 886, 887, 888, 889, 976], "plot_outlier_detection_bench": [234, 239], "recalcul": [235, 237, 393, 1001, 1004], "mlpregressormlpregressor": 235, "tree_disp": 235, "mlp_disp": 235, "0x7f03070b6a00": 235, "plot_partial_dependence_visualization_api": [235, 239], "set_config": [236, 238, 307, 354, 355, 394, 449, 607, 1013, 1015, 1018], "deactiv": [236, 362, 366, 369, 374, 384, 394, 780, 781, 1018], "standard_scal": 236, "polynomialfeaturespolynomialfeatur": 236, "pcapca": 236, "svcsvc": [236, 237, 254, 256, 308], "numeric_preprocessor": 236, "imputation_mean": 236, "categorical_preprocessor": 236, "imputation_const": 236, "onehot": [236, 299, 300, 394, 844, 972], "gender": [236, 852, 972], "classifier__n_estim": 236, "classifier__max_featur": 236, "classifier__max_depth": 236, "classifier__criterion": 236, "plot_pipeline_displai": [236, 239], "svc_disp": [237, 306, 1001], "rfc_disp": [237, 306, 1001], "162": [237, 239, 365], "plot_roc_curve_visualization_api": [237, 239], "transform_output": [238, 449, 876, 1019], "slep018": [238, 370, 1019], "106": [238, 348, 349, 365, 855, 956, 1005], "x_test_scal": 238, "894264": 238, "798301": 238, "271411": 238, "327605": 238, "244466": 238, "086944": 238, "327407": 238, "459074": 238, "660797": 238, "462234": 238, "576989": 238, "159419": 238, "933197": 238, "427329": 238, "414810": 238, "039497": 238, "275851": 238, "scaler2": 238, "x_test_np": 238, "x_test_df": 238, "feature_names_in_": [238, 309, 381, 413, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 608, 609, 610, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 1017, 1018, 1019, 1020], "num_pip": 238, "num_col": 238, "7621951219512195": 238, "log_reg": [238, 310], "reset": [238, 350, 376, 515, 657, 658, 659, 819, 820, 848, 849, 859, 1006], "config_context": [238, 354, 355, 389, 607, 876, 1011, 1017], "133660": 238, "438059": 238, "894273": 238, "506893": 238, "000619": 238, "182778": 238, "671": [238, 974], "548540": 238, "461032": 238, "817": 238, "487001": 238, "13366001": 238, "4380594": 238, "89427284": 238, "50689261": 238, "00061876": 238, "18277786": 238, "54853974": 238, "46103177": 238, "48700054": 238, "plot_set_output": [238, 239], "583": [239, 393, 995], "auto_examples_miscellan": 239, "bayesiangaussianmixtur": [241, 242, 247, 776, 1010, 1012, 1013, 1017, 1018], "weight_concentration_prior_typ": [241, 247, 775, 961, 1010], "dirichlet_distribut": [241, 775, 961, 1010], "dirichlet_process": [241, 247, 775, 961, 1010], "weight_concentration_prior": [241, 247, 775, 961], "finit": [241, 247, 354, 363, 381, 449, 519, 532, 563, 587, 590, 591, 592, 639, 708, 758, 765, 775, 800, 876, 896, 898, 899, 958, 961, 962, 986, 988, 995, 1011, 1012, 1016, 1018, 1019], "unnecessari": [241, 373, 425, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 686, 965, 972, 983, 986, 1007, 1009, 1014, 1015, 1017], "covar": [241, 242, 247], "eig_val": 241, "eig_vec": 241, "unit_eig_vec": 241, "arctan2": [241, 243, 246], "56b4e9": 241, "plot_titl": 241, "weights_": [241, 775, 776, 1018], "covariances_": [241, 242, 243, 246, 247, 775, 776, 1011], "get_xaxi": [241, 286, 298], "set_tick_param": 241, "labelleft": 241, "0072b2": 241, "f0e442": 241, "d55e00": 241, "mean_precision_prior": [241, 247, 775], "nprior": 241, "gamma_0": [241, 247], "reg_covar": [241, 775, 776], "init_param": [241, 244, 247, 775, 776], "concentrations_prior": 241, "582": [241, 248, 879], "plot_concentration_prior": [241, 248], "color_it": [242, 246, 247], "dp": [242, 247], "shouldn": [242, 247, 368], "em": [242, 243, 247, 425, 428, 440, 517, 775, 776, 961, 1018], "dpgmm": [242, 247, 1004, 1008, 1010], "plot_gmm": [242, 248], "ronweiss": 243, "make_ellips": 243, "datalim": 243, "skf": [243, 397, 796], "train_index": [243, 317, 397, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "test_index": [243, 317, 397, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "cov_typ": 243, "means_init": [243, 244, 776], "y_train_pr": 243, "train_accuraci": 243, "y_test_pr": 243, "test_accuraci": [243, 257], "205": [243, 248, 286, 290], "plot_gmm_covari": [243, 248], "random_from_data": [244, 775, 776, 961], "diamond": 244, "colour": [244, 365, 401, 568, 963], "walsh": [244, 1016, 1018], "extmath": [244, 339, 377, 434, 1010, 1011, 1014, 1019], "row_norm": 244, "_samples_gener": 244, "timer": [244, 374], "x_squared_norm": [244, 441], "get_initial_mean": 244, "times_init": 244, "relative_tim": 244, "ini": 244, "init_tim": 244, "2fx": 244, "plot_gmm_init": [244, 248], "shifted_gaussian": 245, "stretched_gaussian": 245, "score_sampl": [245, 281, 282, 283, 289, 381, 399, 450, 513, 522, 544, 658, 775, 776, 777, 780, 781, 791, 824, 825, 835, 839, 882, 968, 1007, 1012, 1014, 1016], "plot_gmm_pdf": [245, 248], "component_1": 246, "component_2": 246, "best_parameters_": 246, "gmm_bic_scor": 246, "callabl": [246, 260, 381, 397, 401, 402, 404, 405, 423, 425, 426, 427, 428, 430, 431, 433, 438, 440, 445, 446, 447, 448, 512, 514, 516, 518, 520, 526, 527, 538, 539, 540, 541, 542, 543, 545, 546, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 591, 592, 601, 609, 615, 620, 624, 640, 647, 652, 654, 656, 669, 672, 673, 677, 692, 700, 712, 722, 751, 754, 758, 759, 760, 761, 770, 771, 777, 780, 781, 783, 791, 801, 802, 803, 804, 806, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 843, 852, 873, 874, 880, 881, 882, 883, 884, 922, 923, 929, 932, 946, 951, 962, 972, 1004, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1020], "0x7f0307b58f70": 246, "gaussianmixturegaussianmixtur": 246, "param_n_compon": 246, "param_covariance_typ": 246, "renam": [246, 257, 368, 372, 393, 423, 427, 428, 440, 452, 453, 459, 517, 534, 535, 536, 537, 538, 539, 544, 545, 546, 547, 852, 1004, 1005, 1006, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "793662": 246, "1083": 246, "652535": 246, "1114": 246, "835102": 246, "1151": 246, "243322": 246, "1181": 246, "713463": 246, "catplot": 246, "hue": [246, 256, 279, 303, 365], "eigenvalu": [246, 390, 393, 395, 433, 443, 450, 451, 452, 453, 454, 455, 456, 457, 516, 522, 530, 654, 669, 670, 672, 674, 676, 845, 959, 972, 1006, 1010, 1013, 1014, 1015, 1016], "206": [246, 248], "plot_gmm_select": [246, 248], "loos": [247, 253, 977, 1012], "liberti": 247, "judgment": [247, 962], "panel": [247, 281, 298, 399, 982], "primarili": [247, 261, 368, 381, 389, 393, 986, 1013, 1014], "covariance_prior": [247, 775], "plot_gmm_sin": [247, 248], "auto_examples_mixtur": 248, "mislabel": [250, 400, 964], "imbal": [250, 259, 397, 688, 709, 710, 718, 763, 764, 767, 768, 962], "misclassifi": [250, 339, 977], "life": [250, 376, 959], "set_printopt": 250, "titles_opt": 250, "179": [250, 272, 365, 374, 400, 1004], "plot_confusion_matrix": [250, 272, 306, 1014, 1015, 1016, 1017], "shufflesplit": [251, 258, 334, 397, 779, 785, 787, 797, 805, 992, 1004, 1005, 1007, 1009, 1010], "groupshufflesplit": [251, 397, 992, 1010], "groupkfold": [251, 261, 397, 575, 777, 780, 781, 782, 783, 784, 785, 786, 791, 795, 800, 801, 802, 803, 806, 992, 1010, 1017], "stratifiedshufflesplit": [251, 326, 397, 992, 1004, 1005, 1010, 1011, 1017], "stratifiedgroupkfold": [251, 1017], "1338": 251, "cmap_data": 251, "cmap_cv": 251, "coolwarm": [251, 323], "n_point": [251, 819, 820], "percentiles_class": 251, "perc": 251, "group_prior": 251, "visualize_group": 251, "yticklabel": [251, 339], "ngroup": 251, "nclass": 251, "plot_cv_indic": [251, 272], "tr": [251, 365, 372, 393, 395, 450, 451, 452, 453, 454, 455, 456, 457, 817], "axessubplot": 251, "this_cv": 251, "177": [252, 272, 374], "plot_cv_predict": [252, 272], "fnr": [253, 679, 707], "det_curv": [253, 679, 762, 769, 962, 1016, 1017], "visuali": 253, "commonli": [253, 361, 381, 393, 394, 403, 595, 738, 739, 775, 808, 851, 959, 960, 962, 963, 965, 1020], "detcurvedisplai": [253, 309, 707, 1016, 1017], "ax_roc": 253, "ax_det": 253, "feedback": [253, 367, 368, 369, 382, 982, 1012], "plot_det": [253, 272], "n_imag": 254, "print_datafram": 254, "filtered_cv_result": 254, "mean_precis": 254, "std_precis": 254, "mean_recal": 254, "std_recal": 254, "mean_test_precis": [254, 260], "std_test_precis": 254, "mean_test_recal": 254, "std_test_recal": 254, "03f": 254, "refit_strategi": 254, "best_index": [254, 260], "precision_threshold": 254, "high_precision_cv_result": 254, "mean_score_tim": [254, 257, 777, 791], "rank_test_recal": 254, "rank_test_precis": [254, 260], "best_recall_std": 254, "best_recal": 254, "best_recall_threshold": 254, "high_recall_cv_result": 254, "fastest_top_recall_high_precision_index": 254, "idxmin": 254, "854": 254, "061": 254, "069": 254, "780": 254, "905": 254, "058": [254, 365], "889": [254, 419], "074": [254, 327, 337, 340], "890": 254, "073": [254, 452, 453], "743": [254, 995], "611": [254, 256, 522], "028": 254, "744": [254, 276], "618": 254, "004848": 254, "853676": 254, "063184": 254, "0x7f03076fc160": 254, "807": [254, 256], "806": [254, 272, 630], "plot_grid_search_digit": [254, 272], "minimis": [255, 393, 397, 639, 640, 978], "219": 255, "260": [255, 1017], "york": [255, 768, 775, 952, 962, 974], "usa": [255, 363, 875, 952, 959, 974, 975], "best_index_": [255, 260, 777, 780, 781, 791], "wenhao": [255, 1012, 1013], "zhang": [255, 393, 424, 645, 660, 666, 667, 670, 674, 738, 739, 958, 959, 960, 964, 976, 1008, 1009, 1011, 1012, 1013, 1014, 1016], "wenhaoz": 255, "ucla": [255, 958], "lower_bound": 255, "best_score_idx": 255, "best_low_complex": 255, "fewest": [255, 608], "candidate_idx": 255, "param_reduce_dim__n_compon": 255, "plot_grid_search_refit_cal": [255, 272], "moon": [256, 293, 300, 339, 340, 503], "moder": [256, 368, 403, 435, 968], "352": [256, 374], "repeatedstratifiedkfold": [256, 397, 792, 796, 1011], "repetit": [256, 373, 397, 792, 793, 970, 1018], "rank_test_scor": [256, 264, 777, 791, 1010], "rename_axi": 256, "9400": 256, "079297": 256, "9300": 256, "077846": 256, "3_poli": 256, "9044": [256, 1011], "098776": 256, "2_poli": 256, "6852": 256, "169106": 256, "certainti": [256, 370, 722, 962], "repreat": 256, "model_scor": [256, 274], "regex": [256, 341, 445, 447], "_test_scor": [256, 453, 575, 1017], "lineplot": 256, "labelpad": 256, "882561": 256, "783392": 256, "351390": 256, "746492": 256, "298688": 256, "355440": 256, "nadeau": [256, 1012], "bengio": [256, 836, 837, 951, 975], "framework": [256, 354, 370, 379, 381, 387, 393, 618, 669, 775, 958, 959, 966, 980, 983, 986, 1004, 1010], "diebold": 256, "mariano": 256, "proven": [256, 956, 960, 986], "replic": [256, 367, 370], "cdot": [256, 390, 393, 398, 399, 403, 595, 596, 600, 603, 604, 845, 954, 956, 962, 966, 972], "sum_": [256, 265, 334, 390, 391, 393, 398, 399, 400, 519, 521, 528, 677, 735, 956, 958, 959, 962, 964, 966, 967, 969, 970, 976, 977, 978], "ij": [256, 286, 390, 393, 398, 519, 521, 528, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 958, 959, 962, 964, 967, 977], "corrected_std": 256, "crossvalid": [256, 270], "corrected_var": 256, "ddof": [256, 859, 869], "compute_corrected_ttest": 256, "t_stat": 256, "p_val": 256, "model_1_scor": 256, "model_2_scor": 256, "ncorrect": 256, "227": [256, 393, 705], "uncorrect": [256, 576, 579], "t_stat_uncorrect": 256, "p_val_uncorrect": 256, "convent": [256, 357, 368, 370, 371, 372, 374, 381, 411, 412, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 450, 451, 452, 453, 454, 455, 456, 457, 489, 490, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 528, 544, 547, 550, 551, 562, 563, 564, 569, 570, 572, 608, 609, 610, 611, 658, 669, 670, 671, 672, 680, 699, 775, 776, 807, 808, 823, 825, 827, 831, 843, 851, 854, 855, 857, 870, 871, 882, 909, 910, 962, 989, 1004, 1011, 1012, 1015, 1017, 1018], "benavoli": 256, "colleagu": 256, "conjug": [256, 433, 443, 653, 655, 668, 676, 958], "overlin": [256, 390], "t_post": 256, "ppf": 256, "infin": [256, 522, 663, 664, 693, 800, 885, 897, 965], "minu": [256, 740, 962], "better_prob": 256, "cdf": 256, "773": [256, 339, 629, 817], "essenti": [256, 311, 366, 370, 393, 397, 398, 490, 954, 962, 965, 983, 986, 1012], "rope": 256, "rope_interv": 256, "rope_prob": 256, "432": [256, 395], "x_rope": 256, "uncertain": [256, 315, 367], "credibl": 256, "cred_interv": 256, "cred_int_df": 256, "000977": 256, "019023": 256, "005422": 256, "025422": 256, "016445": 256, "036445": 256, "bonferroni": 256, "n_comparison": 256, "pairwise_t_test": 256, "model_i": 256, "model_k": 256, "model_i_scor": 256, "model_k_scor": 256, "pairwise_comp_df": 256, "model_1": 256, "model_2": 256, "657": 256, "302": [256, 608], "565": 256, "851": 256, "pairwise_bayesian": 256, "worse_prob": 256, "pairwise_bayesian_df": 256, "882": 256, "187": [256, 374, 565, 963, 995, 1006], "dietterich": [256, 809, 963], "1998": [256, 363, 365, 398, 400, 536, 537, 809, 814, 845, 963, 964, 966, 972, 976], "bouckaert": 256, "frank": [256, 810, 963, 1009, 1013, 1014], "pacif": 256, "asia": [256, 972], "confer": [256, 363, 393, 398, 404, 421, 426, 431, 492, 516, 544, 677, 689, 706, 736, 835, 836, 837, 962, 968, 974, 978], "discoveri": [256, 363, 374, 377, 393, 400, 402, 404, 426, 492, 536, 537, 544, 573, 576, 577, 579, 580, 581, 587, 701, 720, 763, 962, 974, 986, 1018, 1019], "corani": 256, "dem\u0161ar": 256, "zaffalon": 256, "accompani": [256, 1012], "1995": [256, 365, 391, 400, 534, 535, 809, 875, 963], "144": [256, 374, 1004], "plot_grid_search_stat": [256, 272], "loader": [257, 318, 339, 361, 362, 363, 479, 480, 489, 982, 983, 997, 1004, 1009, 1011, 1012, 1015], "fetch20newsgroup": 257, "857": 257, "complementnb": [257, 339, 814, 815, 817, 818, 964, 1012, 1016, 1017, 1019], "tfidfvectorizertfidfvector": 257, "complementnbcomplementnb": 257, "vect__": 257, "clf__": 257, "parameter_grid": 257, "vect__max_df": 257, "vect__min_df": 257, "vect__ngram_rang": [257, 997], "unigram": [257, 363, 401, 569, 570, 572, 1011], "bigram": [257, 401, 569, 570, 572, 997], "vect__norm": 257, "clf__alpha": [257, 997], "exhaust": [257, 306, 307, 308, 309, 310, 311, 354, 365, 373, 380, 388, 393, 777, 780, 781, 791, 868, 869, 871, 958, 997, 999], "parallelis": [257, 449, 876, 1011], "random_search": [257, 264], "best_paramet": 257, "get_param": [257, 371, 381, 403, 407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 951, 1014, 1015, 1016, 1018, 1019], "param_nam": [257, 271, 334, 806, 957, 997], "816": [257, 452, 453], "ambigu": [257, 373, 401, 553, 693, 915, 965, 1013, 1015, 1017], "shorten_param": 257, "plotli": [257, 368, 384, 386], "cursor": 257, "px": 257, "error_x": 257, "std_score_tim": [257, 777, 791], "error_i": 257, "hover_data": 257, "update_layout": 257, "xanchor": 257, "yanchor": 257, "autom": [257, 372, 384, 673, 951, 958, 959, 962, 982, 986], "parallel_coordin": 257, "understood": [257, 368, 393, 994], "column_result": 257, "transform_func": 257, "fromkei": [257, 893], "ngram_rang": [257, 318, 401, 569, 570, 572], "color_continuous_scal": 257, "viridis_r": 257, "slide": [257, 625, 958, 981, 982], "intersect": [257, 323, 390, 393, 718], "undo": [257, 849, 1008], "plot_grid_search_text_feature_extract": [257, 272], "depict": [258, 400, 961], "score_typ": [258, 783], "ax_idx": 258, "resort": [258, 363, 536, 1014], "learning_curv": [258, 311, 783, 957, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019], "return_tim": [258, 803, 1014], "test_scores_nb": 258, "fit_times_nb": 258, "score_times_nb": 258, "test_scores_svm": 258, "fit_times_svm": 258, "score_times_svm": 258, "score_tim": [258, 397, 802, 803], "rapidli": [258, 977, 986, 991], "inflect": 258, "010": [258, 272, 374, 970], "plot_learning_curv": [258, 272], "class_likelihood_ratio": [259, 962, 1019], "medicin": [259, 693, 962], "medic": [259, 397, 693, 958, 986], "truli": [259, 263, 356, 693, 962], "odd": [259, 400, 495, 693, 962, 1011, 1012], "suppos": [259, 314, 354, 355, 370, 374, 395, 400, 401, 402, 538, 542, 545, 639, 640, 647, 649, 655, 656, 657, 722, 825, 878, 880, 883, 886, 888, 904, 966, 1013, 1015], "physiolog": [259, 365, 995], "hopefulli": [259, 376, 1004], "indirect": [259, 369, 381], "bio": 259, "minor": [259, 263, 363, 371, 382, 477, 962, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "diagnos": [259, 365, 376, 383, 394], "diagnosi": [259, 365, 826], "pos_lr": 259, "neg_lr": 259, "617": [259, 393, 749], "raise_warn": [259, 693, 948], "positive_likelihood_ratio": [259, 693], "negative_likelihood_ratio": [259, 693], "extract_scor": 259, "test_positive_likelihood_ratio": 259, "test_negative_likelihood_ratio": 259, "718894": 259, "724619": 259, "321091": 259, "054054": 259, "dummyclassifi": [259, 533, 962, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014], "108843": 259, "986989": 259, "268147": 259, "034278": 259, "compat": [259, 276, 307, 362, 371, 377, 378, 379, 381, 384, 401, 444, 450, 489, 547, 558, 566, 567, 570, 584, 595, 596, 599, 600, 601, 603, 604, 613, 614, 615, 639, 640, 654, 656, 754, 758, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 823, 824, 844, 852, 853, 890, 891, 894, 925, 959, 962, 965, 967, 982, 983, 986, 999, 1004, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "diagnost": [259, 361, 381, 481, 693, 801, 802, 962, 982, 983, 999], "most_frequ": [259, 532, 608, 611, 829, 952, 962, 1012, 1014, 1016], "undefin": [259, 381, 693, 709, 718, 721, 763, 931, 962, 1012, 1016], "373333": 259, "5557": 259, "235430": 259, "stand": [259, 341, 372, 379, 398, 512, 518, 526, 527, 577, 590, 659, 686, 698, 716, 717, 737, 766, 768, 773, 961, 962, 968], "lr_base": 259, "pos_lr_bas": 259, "pos_lr_base_std": 259, "neg_lr_bas": 259, "neg_lr_base_std": 259, "plot_indic": 259, "scoring_on_bootstrap": 259, "n_bootstrap": [259, 1005], "results_for_preval": 259, "bootstrap_indic": 259, "default_rng": 259, "2039": 259, "507943": 259, "113516": 259, "207667": 259, "009778": 259, "3419": 259, "445329": 259, "125197": 259, "198280": 259, "008907": 259, "422287": 259, "123864": 259, "192630": 259, "006340": 259, "6196": [259, 1009], "410507": 259, "163975": 259, "193761": 259, "005864": 259, "7578": [259, 1011], "335398": 259, "175224": 259, "189120": 259, "005820": 259, "8963": 259, "198284": 259, "238943": 259, "185496": 259, "005020": 259, "band": [259, 300, 972], "763": [259, 272], "plot_likelihood_ratio": [259, 272], "scorer_nam": [260, 777, 791], "predefin": [260, 790, 951, 965, 992, 1019], "403": 260, "return_train_scor": [260, 397, 777, 780, 781, 791, 802, 1010, 1011, 1013], "73": [260, 315, 380, 777, 791, 825, 887, 972, 993, 1004, 1006], "maskedarrai": [260, 1010], "param_min_samples_split": 260, "sample_score_mean": 260, "sample_score_std": 260, "std_": [260, 1009], "rank_test_": 260, "best_scor": 260, "mean_test_": 260, "plot_multi_metric_evalu": [260, 272], "cawlei": [261, 962], "talbot": 261, "mach": [261, 391, 397, 574, 575], "2079": 261, "2107": 261, "007581": 261, "007833": 261, "num_trial": 261, "x_iri": [261, 996], "y_iri": [261, 996], "p_grid": 261, "non_nested_scor": 261, "nested_scor": 261, "leaveoneout": [261, 397, 992], "leaveonegroupout": [261, 397, 778, 785, 786, 992, 1010], "inner_cv": 261, "outer_cv": 261, "non_nest": 261, "score_differ": 261, "211": [261, 311, 317, 855, 866], "non_nested_scores_lin": 261, "nested_lin": 261, "difference_plot": 261, "973": [261, 272, 340, 397], "plot_nested_cross_validation_iri": [261, 272], "permutation_test_scor": [262, 397, 1004, 1011, 1016], "plant": [262, 265, 266, 361, 962, 999], "uncorrel": [262, 364, 509, 515, 522, 962, 995], "n_uncorrelated_featur": 262, "x_rand": 262, "undergo": 262, "score_iri": 262, "perm_scores_iri": 262, "pvalue_iri": 262, "n_permut": [262, 397, 804], "score_rand": 262, "perm_scores_rand": 262, "pvalue_rand": 262, "evid": [262, 339, 340, 376, 393, 397, 398, 400, 625, 775, 961], "ndata": 262, "destroi": [262, 401, 773, 848, 972], "ojala": [262, 397, 804], "garriga": [262, 397, 804], "plot_permutation_tests_for_classif": [262, 272], "t_p": 263, "plu": [263, 365, 373, 660, 810, 813, 963, 976], "f_p": 263, "f_n": 263, "denomin": [263, 401, 406, 456, 571, 685, 737, 956], "stairstep": 263, "ap": [263, 688, 689, 962], "sum_n": [263, 688, 962], "r_n": [263, 688, 962], "p_n": [263, 688, 962], "nth": [263, 688, 962], "r_k": 263, "p_k": [263, 962], "trapezoid": [263, 687, 688, 962], "binar": [263, 265, 266, 360, 362, 392, 394, 734, 814, 843, 844, 846, 850, 852, 862, 962, 964, 988, 999, 1018, 1020], "average_precision_scor": [263, 687, 689, 722, 762, 768, 962, 1004, 1007, 1011, 1012, 1018], "differenti": [263, 400, 403, 540, 541, 600, 603], "mt19937": [263, 268, 1015], "0x7f0331d34040": 263, "precisionrecalldisplai": [263, 309, 762, 764, 767, 1014, 1017], "got": [263, 350, 373, 532, 630, 646, 1017, 1019], "label_binar": [263, 265, 846, 1008], "average_precis": [263, 681, 688, 722, 962], "setup": [263, 265, 354, 366, 370, 374, 376, 965, 989], "f_score": 263, "extens": [263, 265, 281, 354, 355, 362, 363, 366, 369, 371, 372, 376, 377, 379, 387, 398, 477, 484, 515, 721, 909, 917, 959, 961, 962, 981, 982, 986, 1004, 1010, 1017, 1018], "plot_precision_recal": [263, 272], "pose": [264, 958, 996], "deem": [264, 265, 515, 970, 1017], "993": 264, "01761326452827255": 264, "14458295175799263": 264, "981": [264, 365, 962], "015": [264, 309, 312, 344, 970], "2610311314285183": 264, "003999234857448686": 264, "980": 264, "01672701940764589": 264, "5720620992012775": 264, "996": 264, "6666666666666666": 264, "2222222222222222": 264, "1111111111111111": 264, "n_top": 264, "param_dist": [264, 268, 308], "n_iter_search": 264, "729": [264, 272], "plot_randomized_search": [264, 272], "unambigu": [265, 963, 1010], "notion": [265, 340, 356, 379, 398, 400, 958, 962], "scheme": [265, 281, 363, 381, 393, 397, 399, 401, 547, 571, 639, 640, 686, 790, 846, 847, 850, 852, 856, 862, 867, 878, 883, 951, 958, 976, 1004, 1012, 1015, 1016], "harder": [265, 266, 302, 363, 367, 370, 376, 393, 496, 542, 543, 985], "bulk": [265, 404, 426], "scrutin": 265, "y_onehot_test": 265, "class_id": [265, 266], "class_of_interest": 265, "nvirginica": 265, "versicolor": [265, 266, 485], "tp_c": 265, "fn_c": 265, "fp_c": 265, "tn_c": 265, "briefli": [265, 367, 380, 400, 951, 1014], "nreceiv": 265, "micro_roc_auc_ovr": 265, "mcclish": [265, 768], "deci": 265, "1989": [265, 616, 768, 836, 837, 958, 965], "jul": 265, "fpr_grid": 265, "mean_tpr": [265, 266], "interp": [265, 266, 326], "macro_roc_auc_ovr": 265, "deeppink": 265, "aqua": 265, "role": [265, 354, 367, 379, 398, 980], "pair_list": 265, "pair_scor": 265, "label_a": 265, "label_b": 265, "a_mask": 265, "b_mask": 265, "ab_mask": 265, "a_tru": 265, "b_true": 265, "idx_a": 265, "idx_b": 265, "fpr_a": 265, "tpr_a": 265, "fpr_b": 265, "tpr_b": 265, "macro_roc_auc_ovo": 265, "ovo_tpr": 265, "pool": [265, 379, 427, 616, 931, 983, 1015], "745": [265, 267, 272], "plot_roc": [265, 272], "mean_fpr": 266, "viz": [266, 375], "interp_tpr": 266, "mean_auc": 266, "std_auc": 266, "std_tpr": 266, "tprs_upper": 266, "tprs_lower": 266, "236": [266, 272], "plot_roc_crossv": [266, 272], "halvinggridsearchcv": [267, 268, 308, 560, 781, 951, 1016, 1018, 1019], "1e4": [267, 640, 660, 872, 974], "gsh": 267, "gsh_time": 267, "gs_time": 267, "make_heatmap": 267, "is_sh": 267, "make_cbar": 267, "param_c": [267, 777], "param_gamma": [267, 777, 791], "sh": [267, 372, 376, 951], "scores_matrix": 267, "pivot_t": 267, "aggfunc": 267, "0e": [267, 530, 531], "get_xticklabel": 267, "rotation_mod": 267, "cbar_ax": 267, "plot_successive_halving_heatmap": [267, 272], "rsh": [268, 308], "0x7f030742d140": 268, "_distn_infrastructur": 268, "rv_discrete_frozen": 268, "0x7f02f5e4f100": 268, "0x7f0307f08580": 268, "halvingrandomsearchcvhalvingrandomsearchcv": 268, "params_str": 268, "drop_dupl": 268, "n_resources_": [268, 780, 781, 951], "nn_candid": 268, "n_candidates_": [268, 780, 781, 951], "n_iterations_": [268, 780, 781], "multialign": 268, "494": [268, 272], "plot_successive_halving_iter": [268, 272], "n_samples_train": [269, 880, 881, 882, 883, 884], "n_samples_test": [269, 880, 881, 882, 883, 884, 965, 972], "train_error": 269, "test_error": 269, "i_alpha_optim": 269, "alpha_optim": 269, "0002652948464431897": 269, "568": [269, 272], "plot_train_error_vs_test_error": [269, 272], "nonlinear": [270, 309, 625, 669, 670, 674, 677, 845, 958, 959, 967, 972], "true_fun": 270, "polynomial_featur": 270, "plot_underfitting_overfit": [270, 272], "validation_curv": [271, 334, 957, 1011, 1012, 1013, 1016], "subset_mask": 271, "isin": 271, "param_rang": [271, 334, 806, 957], "train_scores_mean": 271, "train_scores_std": 271, "test_scores_mean": 271, "test_scores_std": 271, "797": [271, 272], "plot_validation_curv": [271, 272], "auto_examples_model_select": 272, "yeast": 274, "2417": 274, "103": [274, 276, 363, 400, 478, 536, 537, 1004], "jaccard": [274, 390, 431, 438, 680, 684, 700, 709, 714, 718, 758, 759, 760, 774, 965, 1012, 1013], "arrang": [274, 613, 810, 811, 812, 813, 962], "adam": [274, 293, 836, 837, 966, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "kleczewski": [274, 1011, 1012], "classifierchain": [274, 381, 811, 813, 1011, 1016, 1019], "jaccard_scor": [274, 684, 709, 714, 774, 962, 1013, 1016], "40597": 274, "wrapper": [274, 276, 374, 377, 397, 403, 525, 601, 652, 878, 978, 982, 1008, 1016], "base_lr": [274, 810], "y_pred_ovr": 274, "ovr_jaccard_scor": 274, "y_pred_chain": 274, "chain_jaccard_scor": 274, "y_pred_ensembl": 274, "ensemble_jaccard_scor": 274, "x_po": 274, "947": [274, 275], "plot_classifier_chain_yeast": [274, 275], "auto_examples_multioutput": 275, "kneighborstransform": [276, 278, 306, 831, 965, 1014, 1018, 1019], "nmslib": 276, "pynndesc": 276, "pip": [276, 306, 307, 308, 309, 310, 311, 355, 366, 368, 372, 374, 384, 978], "pynndescenttransform": 276, "csr_matrix": [276, 307, 422, 426, 433, 477, 515, 525, 538, 539, 540, 541, 544, 545, 546, 547, 569, 574, 575, 695, 805, 854, 880, 881, 883, 884, 886, 887, 888, 889, 963, 972, 976, 977, 978, 1019], "transformermixin": [276, 370, 381, 446, 1012, 1019], "nmslibtransform": 276, "sw": 276, "n_samples_fit_": [276, 821, 822, 823, 825, 827, 829, 830, 831], "cosinesimil": 276, "nmslib_": 276, "adddatapointbatch": 276, "createindex": 276, "n_samples_transform": [276, 823, 831], "thread": [276, 307, 310, 366, 379, 381, 393, 400, 811, 812, 928, 929, 930, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020], "num_thread": 276, "knnquerybatch": 276, "mnist_10000": 276, "mnist_20000": 276, "20_000": 276, "tsne_param": 276, "barnes_hut": [276, 673, 1011, 1012], "parallel_batch_queri": 276, "msg": [276, 946], "transformer_nam": 276, "longest": 276, "fit_dur": 276, "transform_dur": 276, "208": [276, 365], "823": 276, "884": 276, "769": 276, "733": 276, "numba": [276, 983], "cold": 276, "nearestneighbor": [276, 310, 393, 404, 426, 429, 442, 669, 670, 674, 821, 822, 823, 825, 829, 830, 831, 965, 1004, 1008, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "i_ax": 276, "int32": [276, 368, 381, 425, 428, 430, 432, 434, 880, 881, 882, 883, 884, 927, 977, 1013, 1019], "828": 276, "955": [276, 397, 635], "994": 276, "brute": [276, 379, 388, 397, 404, 426, 431, 438, 613, 614, 669, 670, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 969, 999, 1008, 1012, 1016, 1019, 1020], "spent": [276, 369, 374, 803, 1019], "approximate_nearest_neighbor": [276, 290], "slow": [278, 298, 339, 354, 362, 366, 368, 398, 401, 428, 680, 853, 854, 858, 880, 883, 915, 959, 965, 983, 996, 1011], "temporarydirectori": [278, 306], "n_neighbors_list": 278, "graph_model": 278, "classifier_model": 278, "sklearn_graph_cache_": 278, "tmpdir": [278, 306], "full_model": 278, "classifier__n_neighbor": 278, "grid_model": 278, "mean_fit_tim": [278, 777, 791], "std_fit_tim": [278, 777, 791], "plot_caching_nearest_neighbor": [278, 290], "cmap_light": [279, 284, 287], "cmap_bold": [279, 284, 287], "darkblu": [279, 287], "neighbour": [279, 287, 443, 673, 967], "plot_classif": [279, 290], "79269019073225": 280, "kerneldens": [280, 281, 289, 399, 1006, 1012, 1013, 1017, 1018, 1019], "new_data": [280, 370], "4x11": 280, "real_data": 280, "set_clim": 280, "919": [280, 290], "plot_digits_kde_sampl": [280, 290], "block": [281, 298, 310, 363, 365, 368, 373, 376, 381, 390, 393, 396, 399, 433, 434, 443, 454, 460, 461, 469, 470, 492, 494, 676, 930, 965, 967], "wildli": [281, 961], "kd": [281, 393, 399, 965, 1012, 1013, 1014], "jakevdp": [281, 289], "aaaaff": [281, 284], "tophat": [281, 399, 819, 820, 824], "log_den": 281, "x_src": 281, "format_func": 281, "ih": 281, "epanechnikov": [281, 399, 819, 820, 824], "funcformatt": 281, "nullloc": 281, "true_den": 281, "plot_kde_1d": [281, 290], "NOT": [282, 365, 371, 787, 819, 820], "plot_lof_novelty_detect": [282, 290], "x_inlier": 283, "ground_truth": 283, "n_error": 283, "x_score": [283, 463, 464, 465, 466], "radiu": [283, 326, 365, 393, 424, 431, 669, 744, 761, 819, 820, 821, 822, 823, 827, 829, 830, 831, 833, 965, 1006, 1008, 1018], "legendhandl": 283, "_size": 283, "096": [283, 290], "plot_lof_outlier_detect": [283, 290], "ffaaaa": 284, "aaffaa": 284, "00ff00": 284, "plot_nca_classif": [284, 290], "neighborhoodcomponentanalysi": 285, "dim_reduction_method": 285, "acc_knn": 285, "x_embed": [285, 286, 673, 677, 828, 965], "ntest": 285, "plot_nca_dim_reduct": [285, 290], "logsumexp": [286, 1011], "get_yaxi": [286, 298], "link_thickness_i": 286, "diff_embed": 286, "dist_embed": 286, "einsum": 286, "exp_dist_embed": 286, "relate_point": 286, "pt_i": 286, "pt_j": 286, "plot_nca_illustr": [286, 290], "8133333333333334": 287, "nearestcentroid": [287, 339, 963, 965, 1004, 1008, 1011, 1016, 1019], "shrink_threshold": [287, 826, 965, 1004, 1016], "217": [287, 290, 330, 337, 516, 522], "plot_nearest_centroid": [287, 290], "barycent": [288, 1004], "plot_regress": [288, 290], "geospati": [289, 399], "haversin": [289, 399, 680, 742, 744, 965, 1013, 1016], "latitud": [289, 298, 363, 479, 680, 744], "longitud": [289, 298, 363, 479, 680, 744], "xtrain": 289, "ytrain": 289, "radian": [289, 680, 744], "land_mask": 289, "ball_tre": [289, 404, 426, 431, 438, 669, 670, 821, 822, 823, 824, 825, 827, 829, 830, 831, 965, 1004], "ocean": 289, "plot_species_kd": [289, 290], "auto_examples_neighbor": 290, "combat": [292, 398], "encourag": [292, 326, 367, 368, 379, 977, 982], "lesser": [292, 381, 424, 522, 958], "curvatur": 292, "complic": [292, 374, 403, 675, 965], "477": [292, 296], "plot_mlp_alpha": [292, 296], "bfg": [293, 591, 592, 629, 630, 639, 650, 653, 655, 661, 668, 965, 966, 1019], "980000": 293, "096950": 293, "momentum": [293, 836, 837, 966], "049530": 293, "nesterov": [293, 836, 837, 966], "049540": 293, "360000": 293, "978444": 293, "860000": 293, "503452": 293, "504185": 293, "045311": 293, "956038": 293, "243802": 293, "992766": 293, "041297": 293, "993879": 293, "042898": 293, "638843": 293, "855465": 293, "912632": 293, "290584": 293, "909293": 293, "318387": 293, "991653": 293, "045934": 293, "840000": 293, "601052": 293, "940000": 293, "157334": 293, "154453": 293, "500000": 293, "692470": 293, "689143": 293, "689751": 293, "150527": 293, "850000": 293, "341523": 293, "336188": 293, "335919": 293, "689015": 293, "830000": 293, "512595": 293, "513034": 293, "930000": 293, "170087": 293, "schedul": [293, 355, 657, 658, 659, 836, 837, 930, 976, 986, 1011], "nesterovs_momentum": [293, 836, 837], "invscal": [293, 657, 658, 659, 836, 837, 976], "plot_arg": 293, "plot_on_dataset": 293, "nlearn": 293, "loss_": [293, 540, 836, 837, 966, 1018], "loss_curve_": [293, 836, 837], "data_set": 293, "get_lin": 293, "plot_mlp_training_curv": [293, 296], "28x28": 294, "784": 294, "throw": [294, 377, 897, 1008, 1011, 1012, 1013, 1014, 1018], "infrastructur": [294, 980, 982, 983], "44139186": 294, "19174891": 294, "13983521": 294, "11378556": 294, "09443967": 294, "07846529": 294, "06506307": 294, "05534985": 294, "986429": 294, "953061": 294, "702": [294, 296], "plot_mnist_filt": [294, 296], "greyscal": 295, "bernoulli": [295, 401, 402, 814, 815, 816, 817, 818, 835, 836, 837, 842, 958, 972, 984, 999, 1004], "bernoullirbm": [295, 836, 837, 967, 972, 1006, 1007, 1016, 1018], "yann": [295, 1004, 1006], "dauphin": [295, 1006], "gabriel": [295, 1012, 1013, 1014, 1017, 1018], "synnaev": 295, "convolv": 295, "minmax_scal": [295, 298, 849, 1009, 1012], "nudge_dataset": 295, "1px": 295, "direction_vector": 295, "apply_along_axi": 295, "feature_rang": [295, 849, 864, 972, 1006, 1016], "cg": [295, 639, 640, 653, 655, 668, 958, 1008, 1009, 1011, 1015, 1017, 1018], "rbm": [295, 835, 836, 837, 967], "rbm_features_classifi": 295, "6000": [295, 608], "raw_pixel_classifi": 295, "plot_rbm_logistic_classif": [295, 296], "713": 296, "auto_examples_neural_network": 296, "incom": [298, 363, 422], "unscal": [298, 303, 958, 962, 1012, 1018], "notabl": [298, 362, 381, 477, 708, 852, 959, 961, 965, 1008, 1011, 1018], "unterthin": [298, 1007, 1008, 1009], "medinc": [298, 308, 363], "housag": 298, "averoom": [298, 308, 363], "room": [298, 363, 373, 393, 985], "avebedrm": [298, 363], "bedroom": [298, 363], "aveoccup": [298, 308, 363], "features_idx": 298, "quantile_rang": [298, 857, 868, 1010], "yeo": [298, 302, 855, 866, 972, 1012, 1018], "cox": [298, 302, 855, 866, 972, 1012], "plasma": 298, "plasma_r": 298, "create_ax": 298, "bottom_h": 298, "left_h": 298, "rect_scatt": 298, "rect_histx": 298, "rect_histi": 298, "ax_scatt": 298, "ax_histx": 298, "ax_histi": 298, "ax_scatter_zoom": 298, "ax_histx_zoom": 298, "ax_histy_zoom": 298, "rect_colorbar": 298, "ax_colorbar": 298, "plot_distribut": 298, "hist_nbin": 298, "x0_label": 298, "x1_label": 298, "hist_x1": 298, "hist_x0": 298, "aesthet": [298, 978, 1009], "layout": [298, 379, 878, 879, 880, 883, 899, 977, 1007, 1009], "tick_bottom": 298, "tick_left": 298, "outward": 298, "ec": [298, 511], "make_plot": 298, "item_idx": 298, "ax_zoom_out": 298, "ax_zoom_in": 298, "zoom_in_percentile_rang": 298, "cutoffs_x0": 298, "cutoffs_x1": 298, "non_outliers_mask": 298, "colorbarbas": 298, "OR": [298, 393, 404, 426, 1015], "indistinguish": 298, "quadrant": 298, "283": [298, 304], "plot_all_sc": [298, 304, 848, 849, 851, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 869], "straightforward": [299, 367, 398, 986], "anywher": 299, "qinhanmin2005": 299, "sina": [299, 1017], "rnd": 299, "enc": [299, 301, 310, 852, 853, 972], "x_bin": 299, "line_bin": 299, "plot_discret": [299, 304], "get_nam": 300, "broader": [300, 958], "logisticregression__c": 300, "linearsvc__c": 300, "kbinsdiscretizer__n_bin": 300, "gradientboostingclassifier__learning_r": 300, "svc__c": 300, "cm_piyg": 300, "piyg": 300, "b30065": 300, "178000": 300, "est_idx": 300, "585": [300, 304, 341, 995], "plot_discretization_classif": [300, 304], "centers_0": 301, "centers_1": 301, "x_list": 301, "grid_encod": 301, "stripe": 301, "718": [301, 304], "plot_discretization_strategi": [301, 304], "powertransform": [302, 856, 866, 952, 972, 1012, 1015, 1018, 1020], "johnwon": 302, "weibul": 302, "bimod": [302, 399], "ineffect": [302, 972, 1012, 1013], "eric": [302, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ericchang2017": 302, "northwestern": [302, 639], "contact": [302, 379, 982], "font_siz": 302, "bc": 302, "qt": [302, 856], "x_lognorm": [302, 972], "x_chisq": 302, "chisquar": 302, "x_weibul": 302, "x_gaussian": 302, "x_uniform": 302, "loc_a": 302, "loc_b": 302, "x_a": 302, "x_b": 302, "x_bimod": 302, "d81b60": 302, "0188ff": 302, "ffc107": 302, "b7a2ff": 302, "2ec5ac": 302, "figaspect": 302, "axes_idx": 302, "axes_list": 302, "x_trans_bc": 302, "lmbda_bc": 302, "lambdas_": [302, 855, 1017], "x_trans_yj": 302, "lmbda_yj": 302, "x_trans_qt": 302, "ax_origin": 302, "ax_bc": 302, "ax_yj": 302, "ax_qt": 302, "x_tran": [302, 370, 389, 424, 445, 855, 866, 972], "meth_nam": 302, "lmbda": 302, "864": [302, 304], "plot_map_data_to_norm": [302, 304], "involv": [303, 306, 326, 354, 356, 363, 368, 372, 381, 382, 396, 403, 680, 807, 808, 959, 963, 965, 969, 977, 982, 986, 995, 1012], "kneighbor": [303, 310, 821, 822, 823, 825, 827, 965, 1008, 1013, 1017, 1018, 1019, 1020], "obatin": 303, "tyler": [303, 1011, 1017, 1018, 1019], "lanigan": [303, 1011], "tylerlanigan": 303, "sebastian": [303, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "raschka": [303, 1009, 1010, 1011, 1012, 1013, 1016], "sebastianraschka": 303, "alcohol": [303, 365], "malic": [303, 365], "acid": [303, 365], "scaled_x_train": 303, "prolin": [303, 365], "x_plot_scal": 303, "fit_and_plot_model": 303, "desicion": 303, "scaled_pca": 303, "x_train_transform": [303, 350, 397], "x_train_std_transform": 303, "first_pca_compon": 303, "target_class": 303, "repercuss": 303, "logisticregressioncv": [303, 381, 639, 958, 963, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1019], "unscaled_clf": 303, "scaled_clf": 303, "y_pred_scal": 303, "y_proba_sc": 303, "0824": 303, "vastli": 303, "453": [303, 304], "plot_scaling_import": [303, 304], "auto_examples_preprocess": 304, "announc": [306, 307, 308, 309, 310, 311, 372, 382], "bug": [306, 307, 308, 309, 310, 311, 357, 366, 370, 371, 373, 376, 379, 381, 980, 983, 1004, 1005, 1006, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "latest": [306, 307, 308, 309, 310, 311, 366, 368, 372, 374, 376, 978, 980, 1018], "upgrad": [306, 307, 308, 309, 310, 311, 384, 983, 1004, 1009, 1012], "conda": [306, 307, 308, 309, 310, 311, 355, 368, 369, 371, 372, 374, 376, 386, 978], "forg": [306, 307, 308, 309, 310, 311, 355, 369, 371, 372, 376, 384], "plot_roc_curv": [306, 1014, 1016], "plot_precision_recall_curv": [306, 1014, 1016, 1017], "stackingclassifi": [306, 350, 400, 549, 1014, 1015, 1016, 1017, 1018, 1019], "9473684210526315": 306, "radiusneighborstransform": [306, 823, 965, 1014, 1016, 1018, 1019], "sklearn_cache_": 306, "isomap__n_neighbor": 306, "nan_euclidean_dist": [306, 742, 952, 1014], "ccp_alpha": [306, 344, 538, 539, 540, 541, 545, 546, 886, 887, 888, 889, 978, 1014], "tree_": [306, 344, 348, 824, 886, 887, 888, 889], "node_count": [306, 344, 348, 886, 887, 888, 889], "check_estim": [306, 370, 381, 910, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "pytest": [306, 355, 366, 368, 370, 371, 384, 386, 909, 910, 1014, 1017], "estimator_check": [306, 370, 381, 1011, 1012, 1014, 1015, 1018, 1019, 1020], "parametrize_with_check": [306, 370, 909, 1014, 1015], "test_sklearn_compatible_estim": [306, 910], "ovo": [306, 768, 807, 880, 883, 962, 963, 977], "preval": [306, 381, 693, 962], "decision_function_shap": [306, 335, 880, 883, 977, 1009, 1010, 1013, 1014], "9865541409465021": 306, "plot_release_highlights_0_22_0": [306, 312], "await": 307, "lam": [307, 308, 1015], "35776189065725783": 307, "42425183539869404": 307, "openmp": [307, 366, 371, 379, 381, 393, 400, 930, 1015, 1017], "6436465474371387": 307, "10k": [307, 428], "monotoinc": 307, "gbdt_cst": 307, "999791942438998": 307, "plot_release_highlights_0_23_0": [307, 312], "art": [308, 374, 630, 673, 982, 986], "footprint": [308, 311, 354, 356, 393, 398, 536, 537, 544, 1006, 1009, 1010, 1015, 1016, 1019], "yarowski": [308, 875, 975], "selftrainingclassifi": [308, 317, 318, 319, 975, 1016], "random_unlabeled_point": [308, 873, 874, 875], "self_training_model": [308, 875], "base_estim": [308, 370, 391, 419, 534, 535, 536, 537, 652, 810, 813, 875, 951, 958, 1015, 1017, 1018, 1019], "selftrainingclassifierselftrainingclassifi": 308, "7355": 308, "linear_baselin": 308, "7137": 308, "houseag": [308, 363], "decisiontreeregressordecisiontreeregressor": 308, "effort": [308, 368, 374, 982, 986, 1015, 1017], "846": [308, 312], "plot_release_highlights_0_24_0": [308, 312], "l2_regular": [309, 400, 542, 543], "max_bin": [309, 310, 400, 542, 543], "typeerror": [309, 373, 692, 902, 946, 1011, 1012, 1015, 1017], "quantileregressor": [309, 958, 962, 1017, 1018, 1019], "min_": [309, 393, 400, 849, 958, 972, 976, 977, 978], "sum_i": [309, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 953, 954, 958, 960, 962, 967], "pb_q": [309, 958], "_1": [309, 395, 398, 401, 512, 518, 519, 521, 526, 527, 528, 627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 662, 663, 664, 665, 746, 958, 960, 962, 977], "get_feature_nam": [309, 1012, 1013, 1015, 1016, 1017], "pet": [309, 768, 962], "dog": [309, 310, 563, 763, 972], "fish": 309, "pet_cat": 309, "pet_dog": 309, "pet_fish": 309, "plot_": [309, 384], "plot_release_highlights_1_0_0": [309, 312], "x_1d": 310, "hist_quantil": 310, "log_reg_input_featur": 310, "gather": [310, 376, 382, 392, 393, 972, 986], "min_frequ": [310, 852, 972, 1018], "max_categori": [310, 852, 972, 1018], "rabbit": [310, 972], "snake": [310, 563, 972], "infrequent_categories_": [310, 852, 972], "x0_cat": [310, 972], "x0_rabbit": [310, 972], "x0_infrequent_sklearn": [310, 972], "refactor": [310, 1004, 1006, 1007, 1008, 1014, 1017, 1018, 1019], "radius_neighbor": [310, 827, 829, 830, 831, 1008, 1013, 1014, 1016, 1017, 1018, 1019], "summari": [310, 350, 365, 379, 673, 694, 891, 960, 963, 982, 997], "pairwise_distances_argmin_min": [310, 759, 1007, 1012, 1018, 1019, 1020], "radiusneighborsclassifi": [310, 821, 822, 827, 830, 963, 965, 1004, 1006, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1020], "radiusneighborsregressor": [310, 821, 822, 827, 829, 965, 1004, 1006, 1012, 1014, 1016, 1017, 1018, 1019, 1020], "trustworthi": [310, 1012, 1013, 1018, 1019, 1020], "labelpropag": [310, 316, 874, 875, 963, 975, 1005, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020], "labelspread": [310, 314, 315, 316, 318, 319, 873, 875, 963, 975, 1005, 1010, 1011, 1014, 1015, 1018, 1019, 1020], "blog": [310, 354, 368, 374, 376, 1015], "cython": [310, 354, 355, 357, 366, 368, 371, 377, 379, 384, 386, 389, 393, 400, 489, 972, 973, 976, 977, 982, 983, 1004, 1007, 1008, 1010, 1016, 1019, 1020], "readili": [310, 398, 978, 986], "true_w": 310, "true_h": 310, "x_reconstruct": [310, 463, 464, 465], "00364": 310, "divis": [310, 393, 401, 571, 572, 575, 693, 694, 709, 710, 718, 726, 763, 764, 767, 962, 996, 1008, 1012, 1013, 1016], "repeatedli": [310, 350, 381, 393, 400, 403, 489, 527, 647, 648, 657, 658, 659, 761, 952, 966, 992], "bisect_km": 310, "031": [310, 312, 365], "plot_release_highlights_1_1_0": [310, 312], "video": [311, 357, 362, 371, 484, 963, 986, 989], "sepal_col": 311, "petal_col": 311, "kbin": 311, "x_out": [311, 843, 852, 853], "052506": 311, "592373": 311, "189830": 311, "973554": 311, "416010": 311, "630382": 311, "107": [311, 322, 337, 393, 873, 963, 1006], "765012": 311, "362176": 311, "021849": 311, "788808": 311, "hist_no_interact": 311, "v1": [311, 362, 384, 405, 514, 657, 736, 775, 776, 814, 815, 816, 818, 1016, 1019, 1020], "liac": [311, 362, 368, 477, 1019], "arff": [311, 368, 477, 1016, 1019], "ticket": [311, 368], "cabin": 311, "boat": 311, "allen": [311, 1007, 1009, 1011, 1014], "elisabeth": 311, "walton": 311, "24160": 311, "3375": 311, "b5": 311, "loui": [311, 1009, 1010, 1014, 1016, 1018], "mo": [311, 1015], "allison": 311, "hudson": 311, "9167": 311, "113781": 311, "151": [311, 374, 400, 974], "5500": [311, 669, 959], "c22": 311, "c26": 311, "montreal": 311, "pq": 311, "chestervil": 311, "ON": 311, "helen": 311, "lorain": 311, "joshua": [311, 363, 1006, 1007, 1009, 1010, 1016, 1019], "creighton": 311, "135": [311, 365], "bessi": 311, "waldo": 311, "compliant": [311, 368], "cupi": [311, 389], "gpu": [311, 389, 966, 983, 997], "changelog": [311, 372, 381], "plot_release_highlights_1_2_0": [311, 312], "929": 312, "auto_examples_release_highlight": 312, "semisupervis": [314, 381], "clai": [314, 315, 316, 319, 1004], "woolam": [314, 315, 316, 319, 1004], "n_total_sampl": [314, 315], "n_labeled_point": [314, 315], "unlabeled_set": 314, "everyth": [314, 350, 372, 374, 379, 445, 921, 982, 983, 1004], "lp_model": [314, 315], "predicted_label": [314, 315], "transduction_": [314, 315, 316, 873, 874, 875], "true_label": [314, 315], "_plot": 314, "0x7f02dd4d4280": 314, "pred_entropi": [314, 315], "label_distributions_": [314, 315, 873, 874, 1015], "uncertainty_index": [314, 315], "image_index": [314, 315], "plot_label_propagation_digit": [314, 320], "max_iter": 315, "______________________________________________________________________": 315, "290": [315, 669, 670, 674, 959], "330": 315, "285": [315, 704], "280": 315, "270": 315, "unlabeled_indic": 315, "transduc": 315, "in1d": [315, 1011], "delete_indic": 315, "183": [315, 374, 963, 1004], "nfit": 315, "delete_index": 315, "plot_label_propagation_digits_active_learn": [315, 320], "label_spread": 316, "labelspreadinglabelspread": 316, "output_label": 316, "output_label_arrai": 316, "outer_numb": 316, "inner_numb": 316, "165": [316, 320, 963], "plot_label_propagation_structur": [316, 320], "breast_canc": 317, "569": [317, 365, 481, 573, 576, 577, 579], "augment": [317, 611, 860, 986], "oliv": [317, 319, 1012, 1013, 1015, 1016, 1017], "rausch": [317, 319, 1012, 1013, 1016], "rauscho": [317, 319], "ethz": [317, 319], "total_sampl": [317, 517], "base_classifi": [317, 319, 975], "x_valu": 317, "99999": 317, "amount_label": 317, "amount_iter": 317, "self_training_clf": 317, "skfold": 317, "y_test_tru": 317, "labeled_iter_": [317, 875], "return_count": [317, 340, 831], "capsiz": 317, "twinx": 317, "plot_self_training_varying_threshold": [317, 320], "2823": 318, "2117": [318, 340], "408": 318, "752": [318, 339], "1709": 318, "1091": 318, "tfidftransform": [318, 340, 341, 401, 470, 572, 997, 1011, 1012, 1018, 1020], "sdg_param": 318, "vectorizer_param": 318, "selftrain": 318, "st_pipelin": 318, "ls_pipelin": 318, "eval_and_print_metr": 318, "y_mask": 318, "x_20": 318, "y_20": 318, "plot_semi_supervised_newsgroup": [318, 320], "y_rand": 319, "y_30": 319, "y_50": 319, "ls30": 319, "ls50": 319, "ls100": 319, "st30": 319, "st50": 319, "rbf_svc": [319, 977], "color_map": 319, "plot_semi_supervised_versus_svm_iri": [319, 320], "auto_examples_semi_supervis": 320, "my_kernel": [322, 977], "plot_custom_kernel": [322, 337], "2x2": [323, 393, 734], "plot_iris_svc": [323, 337], "convention": [324, 381, 874], "support_vector_indic": 324, "157": [324, 337, 374], "plot_linearsvc_support_vector": [324, 337], "plot_oneclass": [325, 337], "midpoint": 326, "blink": 326, "act": [326, 339, 368, 380, 399, 400, 694, 709, 710, 718, 763, 764, 767, 854, 858, 959, 962, 965, 977, 1012], "spuriou": [326, 376, 1017, 1018, 1019], "c_rang": 326, "gamma_rang": 326, "midpointnorm": 326, "masked_arrai": [326, 777, 791], "x_2d": 326, "y_2d": 326, "cheat": [326, 966, 976, 1006], "c_2d_rang": 326, "gamma_2d_rang": 326, "bright": 326, "brutal": 326, "plot_rbf_paramet": [326, 337], "plot_separating_hyperplan": [327, 337], "plain": [328, 403, 638, 976], "n_samples_1": [328, 977], "n_samples_2": [328, 977], "clusters_std": 328, "wclf": 328, "wdisp": 328, "surface_": [328, 612], "plot_separating_hyperplane_unbalanc": [328, 337], "blown": 329, "score_mean": 329, "score_std": 329, "plot_svm_anova": [329, 337], "fignum": [330, 331], "plot_svm_kernel": [330, 337], "plot_svm_margin": [331, 337], "unreg": 331, "perpendicular": 331, "yy_down": 331, "yy_up": 331, "090": [331, 337], "nusvc": [332, 354, 881, 963, 1004, 1005, 1006, 1009, 1012, 1014, 1015, 1016, 1018], "637": [332, 337], "plot_svm_nonlinear": [332, 337], "svr_rbf": 333, "svr_lin": 333, "svr_poli": 333, "kernel_label": 333, "model_color": 333, "setdiff1d": 333, "761": [333, 337], "plot_svm_regress": [333, 337], "mathcal": [334, 398, 400, 608, 677, 954, 956, 958, 962, 976, 1017], "omega": [334, 396, 956], "model_l1": 334, "logx": 334, "train_size_idx": 334, "results_sc": 334, "c_scale": 334, "model_l2": 334, "plot_svm_scale_c": [334, 337], "break_ti": [335, 880, 883, 977, 1014], "accent": [335, 569, 570, 572, 1014], "116": [335, 337, 1004], "plot_svm_tie_break": [335, 337], "emphasi": [336, 396, 880, 881, 882, 883, 884, 969, 982], "subtl": [336, 350, 961, 983], "plot_decision_funct": 336, "sample_weight_last_ten": 336, "sample_weight_const": 336, "clf_no_weight": 336, "clf_weight": 336, "plot_weighted_sampl": [336, 337], "auto_examples_svm": 337, "signatur": [339, 340, 363, 469, 470, 538, 539, 545, 546, 575, 591, 592, 640, 654, 656, 692, 722, 783, 801, 803, 806, 852, 951, 1011, 1017], "size_mb": 339, "utf": [339, 341, 401, 468, 484, 563, 569, 570, 572], "load_dataset": 339, "sublinear_tf": [339, 398, 401, 571, 572], "duration_train": 339, "duration_test": 339, "data_train_size_mb": 339, "data_test_size_mb": 339, "2034": [339, 363], "98mb": 339, "1353": 339, "87mb": 339, "381mb": 339, "7831": 339, "269": [339, 492], "655mb": 339, "ridgeclassifi": [339, 354, 653, 654, 656, 958, 963, 1009, 1013, 1017, 1018, 1019], "sparse_cg": [339, 653, 655, 668, 958, 1005, 1011, 1013, 1014, 1018], "rarer": [339, 341, 401], "deeper": [339, 978], "plot_feature_effect": 339, "average_feature_effect": 339, "top5": 339, "top_indic": 339, "predictive_word": 339, "bar_siz": 339, "y_loc": 339, "keith": [339, 1004, 1009], "atheist": 339, "orbit": [339, 340], "caltech": 339, "expectedli": 339, "pollut": [339, 708, 765, 962, 968], "sender": [339, 363], "livesei": 339, "solntz": 339, "wpd": 339, "sgi": 339, "jon": [339, 1011, 1014, 1015, 1017, 1018], "nntp": [339, 363, 997], "1qlettinn8oi": 339, "cco": 339, "allan": [339, 1016], "schneider": [339, 1017], "me": 339, "instinct": 339, "happi": [339, 379, 382, 795, 796], "listen": 339, "murder": 339, "voluntari": 339, "disregard": [339, 381, 401, 414, 446, 463, 464, 465, 533, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 702, 703, 704, 765, 812, 813, 822, 830, 837, 848, 849, 855, 856, 859, 863, 866, 867, 869, 879, 881, 884, 887, 889, 962, 1012], "beings": 339, "bahavior": 339, "theirs": 339, "mimicri": 339, "imit": 339, "parrot": 339, "polli": 339, "pulchritud": 339, "anim": [339, 401], "kill": 339, "Or": [339, 348, 397, 398, 852, 962, 968, 976], "sigh": 339, "wonder": 339, "bahaviour": 339, "believ": [339, 376, 379, 986], "primat": 339, "arbitarili": 339, "poster": [339, 367, 368, 996], "weren": [339, 853, 1013], "slai": 339, "mate": 339, "ritual": 339, "whatnot": 339, "aren": [339, 363, 372, 384, 392, 706, 736, 967, 1014, 1016], "ye": [339, 376, 381, 846, 862, 958], "child": [339, 348, 355, 379, 381, 393, 400, 424, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 886, 887, 888, 889, 930, 1011], "gorilla": 339, "dolphin": 339, "platypu": 339, "writer": 339, "launch": [339, 340, 384, 986], "custom_nam": 339, "clf_descr": 339, "rocchio": [339, 826], "391": [339, 677], "000589": 339, "5316": 339, "0362": 339, "000646": 339, "00118": 339, "0706": 339, "704": 339, "000584": 339, "0346": 339, "000597": 339, "762": 339, "00315": 339, "00142": 339, "748": [339, 345, 349, 374], "00193": 339, "000648": 339, "training_tim": 339, "txt": [339, 362, 474, 484], "curs": [339, 340, 393, 399, 403, 964, 965, 991, 996], "harm": [339, 370, 401, 773], "plot_document_classification_20newsgroup": [339, 342], "discov": [340, 393, 398, 401, 404, 426, 429, 988, 1019], "metadata": [340, 362, 363, 387, 469, 470, 477, 982, 983, 988], "category_s": 340, "true_k": 340, "3387": 340, "evaluations_std": 340, "fit_and_evalu": 340, "evaluation_std": 340, "score_valu": 340, "std_score": [340, 1017], "reweight": [340, 381, 395, 400, 571, 572, 629, 650, 661], "collis": [340, 341, 401, 563, 570], "x_tfidf": 340, "496": 340, "7929": [340, 1011], "devid": 340, "prod": [340, 602], "phenomenon": [340, 972], "cluster_s": 340, "3384": 340, "1733": 340, "717": 340, "238": 340, "1115": 340, "1417": 340, "1695": 340, "649": 340, "446": [340, 403, 706, 736, 962], "254": 340, "459": [340, 393, 424], "557": 340, "987": 340, "347": 340, "397": [340, 363], "370": 340, "redo": 340, "x_lsa": 340, "explained_vari": [340, 962], "024": 340, "409": 340, "341": 340, "036": [340, 374, 453], "minibatch_kmean": 340, "353": [340, 997], "072": [340, 419, 629], "384": [340, 677, 879], "051": [340, 453], "093": [340, 452, 1009], "influenti": [340, 986], "original_space_centroid": 340, "order_centroid": 340, "shuttl": 340, "sparciti": 340, "lsa_vector": 340, "50_000": 340, "x_hashed_lsa": 340, "476": [340, 341], "390": 340, "016": 340, "413": 340, "328": [340, 710], "052": 340, "366": 340, "df_std": 340, "speak": [340, 354, 368, 976], "safer": [340, 350, 393, 397, 1004], "961": [340, 342, 366, 384, 385, 386, 836], "plot_document_clust": [340, 342], "assembl": [341, 839], "18000": [341, 363], "raw_data": 341, "data_size_mb": 341, "3803": 341, "245mb": 341, "anyth": [341, 372, 374, 381, 397, 926, 1018], "unicod": [341, 401, 468, 484, 563, 569, 570, 572, 927, 1004, 1012, 1016], "charact": [341, 368, 373, 381, 401, 484, 489, 490, 569, 570, 572, 890, 967, 997, 1004, 1017, 1019], "underscor": [341, 370, 381, 946, 994, 1004, 1014, 1017], "tok": [341, 401], "findal": 341, "token_freq": 341, "dict_count_vector": 341, "155": 341, "47928": 341, "vocabulary_": [341, 401, 562, 569, 572, 997, 1004], "19145": 341, "n_nonzero_column": 341, "43873": 341, "inact": [341, 362, 368], "47668": 341, "input_typ": [341, 401, 445, 563], "520": [341, 609, 828, 952, 965], "y_po": 341, "downsid": 341, "featureheash": 341, "implicitli": [341, 377, 400, 578, 613, 614, 858, 952, 954, 969, 972, 977], "token_pattern": [341, 401, 569, 570, 572], "725": 341, "47885": 341, "730": 341, "313": [341, 342, 995], "plot_hashing_vs_dict_vector": [341, 342], "925": [342, 962, 992], "auto_examples_text": 342, "parameter": [344, 403, 595, 596, 603, 604, 775, 776, 958, 959, 967, 972, 978], "weakest": [344, 978], "cost_complexity_pruning_path": [344, 886, 887, 888, 889], "drawstyl": [344, 681], "3272984419327777": 344, "plot_cost_complexity_prun": [344, 349], "ryb": 345, "pairidx": 345, "borderpad": 345, "handletextpad": 345, "plot_iris_dtc": [345, 349], "plot_tre": [345, 348, 978, 1013, 1015, 1016, 1017, 1019], "plot_tree_regress": [346, 349], "regr_3": 347, "y_3": 347, "281": [347, 349], "plot_tree_regression_multioutput": [347, 349], "decision_path": [348, 538, 539, 545, 546, 547, 886, 887, 888, 889, 1010, 1015], "children_left": 348, "children_right": 348, "n_node_sampl": 348, "travers": [348, 965, 969], "n_node": [348, 423, 427, 444, 538, 539, 545, 546, 547, 886, 887, 888, 889, 920], "node_depth": 348, "is_leav": 348, "pop": [348, 379, 893, 992, 1012], "visit": [348, 368, 969], "node_id": [348, 890, 892], "is_split_nod": 348, "children": [348, 393, 400, 423, 427, 444, 547, 1008], "800000011920929": 348, "950000047683716": 348, "node_index": 348, "node_ind": 348, "leaf_id": 348, "sample_id": [348, 363, 478], "threshold_sign": 348, "inequ": [348, 381, 393, 425, 428, 440, 680, 959, 960, 965], "boolean": [348, 363, 368, 370, 377, 394, 400, 401, 402, 445, 542, 543, 562, 563, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 610, 613, 614, 617, 630, 652, 680, 808, 814, 835, 842, 861, 894, 946, 952, 958, 964, 969, 972, 978, 1004, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1019], "common_nod": 348, "common_node_id": 348, "plot_unveil_tree_structur": [348, 349], "663": [349, 872, 970, 974], "auto_examples_tre": 349, "anti": [350, 587, 814, 964], "x_test_transform": [350, 397], "standard_norm": 350, "unfair": 350, "x_select": 350, "gbc": 350, "x_train_select": 350, "x_test_select": 350, "tip": [350, 353, 357, 368, 371, 374, 388, 401, 515, 522, 626, 673, 958, 984, 998, 999, 1002, 1007], "glossari": [350, 357, 368, 370, 374, 392, 404, 405, 419, 422, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 448, 450, 453, 455, 469, 472, 473, 476, 478, 484, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 565, 575, 583, 588, 589, 591, 592, 608, 613, 615, 620, 621, 622, 623, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 754, 758, 761, 771, 775, 776, 777, 779, 780, 781, 782, 783, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 822, 824, 825, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 841, 844, 856, 867, 870, 871, 873, 874, 878, 879, 880, 883, 886, 887, 888, 889, 914, 915, 933, 936, 951, 952, 958, 988, 1012], "mtrand": 350, "_rand": 350, "85418642": 350, "79084103": 350, "13077794": 350, "11915045": 350, "56479934": 350, "70814003": 350, "25291366": 350, "55212743": 350, "18197458": 350, "37845099": 350, "snippet": [350, 368, 373, 376, 379, 389, 400, 401, 402, 952, 972, 985, 1017], "mutat": [350, 1012], "somewhat": [350, 356, 368, 370, 398, 400, 880, 883, 958, 977, 978], "debug": [350, 355, 369, 371, 374, 381, 383, 608, 877, 928, 982, 997, 1012, 1016], "govern": [350, 354, 357, 368, 381, 980, 986], "implic": 350, "rf_123": 350, "rf_inst": 350, "didn": [350, 381, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "strict": [350, 366, 381, 398, 484, 516, 569, 570, 572, 958, 1004, 1013, 1016], "pervas": [350, 368], "throughout": [350, 381, 608, 778, 836, 837, 988, 1007, 1012], "codebas": [350, 368, 369, 370, 401, 1004, 1010], "unlucki": 350, "lucki": 350, "fairer": 350, "temptat": [350, 368], "throughput": [353, 982, 999, 1007], "switch": [353, 659, 685, 698, 717, 735, 737, 773, 819, 820, 914, 915, 962, 965, 999, 1004], "offlin": [354, 368], "review": [354, 363, 370, 371, 372, 373, 374, 379, 382, 397, 398, 516, 522, 962, 972, 989], "bottleneck": [354, 374, 400, 429, 836, 837], "hurt": [354, 515, 1012], "toolkit": [354, 982, 986], "branch": [354, 366, 368, 371, 372, 393, 400, 424, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 886, 887, 888, 889, 891, 965, 969, 978], "sklearn_assume_finit": 354, "assume_finit": [354, 355, 449, 876], "assert_all_finit": [354, 377, 449], "nm": 354, "csc": [354, 379, 381, 401, 532, 534, 535, 651, 673, 846, 848, 854, 859, 861, 863, 869, 894, 898, 899, 925, 937, 938, 940, 941, 942, 943, 965, 972, 1012, 1013, 1015, 1018], "32bit": [354, 927], "speedup": [354, 398, 400, 631, 635, 638, 1004, 1005, 1006, 1007, 1019], "multithread": [354, 393, 878, 879, 880, 881, 882, 883, 884], "bla": [354, 355, 366, 369, 374, 1004, 1012, 1013, 1015, 1016], "sparsity_ratio": 354, "gbt": 354, "speedi": 354, "packet": 354, "reuter": [354, 363], "carefulli": [354, 398], "spawn": [354, 379, 777, 791, 800, 801, 802, 1015], "gil": [354, 355, 369, 930, 1007, 1012, 1013, 1016, 1017], "ought": 354, "lapack": [354, 355, 366, 513, 516, 522, 669, 1019], "dgemm": 354, "show_vers": [354, 366, 368, 376, 384, 1012], "atla": [354, 366], "rebuild": [354, 387, 401, 424], "openbla": [354, 355, 366, 379, 930, 1017], "mkl": [354, 355, 366, 379, 930, 1004], "veclib": [354, 379], "osx": 354, "nouri": [354, 1005, 1007], "instruct": [354, 368, 369, 370, 371, 372, 373, 376, 379, 380, 484, 569, 570, 572, 988, 997, 1004], "ubuntu": [354, 366, 374, 376], "1gb": 354, "mib": [354, 449, 876], "working_memori": [354, 355, 449, 761, 876, 1012], "adher": [354, 370, 381, 909, 910, 1004, 1005], "pairwise_distances_chunk": [354, 758, 1012, 1015], "facilit": [354, 381, 387, 982, 983, 1010, 1013], "moment": [354, 398, 403, 422, 596, 604, 836, 837, 926, 966, 967], "000024": 354, "027400": 354, "mileag": 354, "deploi": [354, 383, 387, 983, 986], "upstream": [354, 368, 372, 376, 379, 972, 1013], "lighter": [354, 683, 769], "threadpoolctl": [355, 366, 384, 386], "subsect": [355, 392], "worker": [355, 381, 401, 928, 929, 930, 1019], "14228": 355, "loki": [355, 930, 962, 1012, 1015], "duplic": [355, 367, 368, 381, 393, 404, 426, 429, 430, 496, 616, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 803, 850, 948, 965, 1004, 1007, 1016, 1018, 1020], "memmap": [355, 363, 381, 398, 489, 515, 1012], "1mb": [355, 1009], "parallel_backend": [355, 404, 419, 426, 429, 431, 433, 438, 439, 442, 445, 448, 453, 512, 516, 517, 518, 520, 523, 524, 526, 527, 529, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 575, 583, 591, 613, 615, 620, 628, 632, 634, 636, 638, 639, 640, 642, 644, 646, 647, 649, 657, 660, 669, 670, 671, 672, 673, 674, 675, 754, 758, 761, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 821, 822, 825, 827, 829, 830, 832, 833, 838, 841, 873, 874, 1012], "exclus": [355, 379, 398, 400, 608, 609, 611, 951, 958, 962, 963, 986, 1011, 1015], "omp_num_thread": 355, "my_script": 355, "algebra": [355, 366, 371, 379, 398, 401, 443, 845, 972], "bli": [355, 366, 379], "mkl_num_thread": 355, "openblas_num_thread": 355, "blis_num_thread": 355, "bash": [355, 376], "zsh": 355, "prompt": [355, 366, 368, 384, 386, 401, 988], "pypi": [355, 366, 368, 370, 372, 374, 384, 978, 1012, 1016, 1018, 1019], "channel": [355, 363, 366, 379, 401, 474, 475, 564, 565, 567, 568], "subscript": [355, 930, 1017], "max_thread": [355, 369], "n_cpu": [355, 381], "lib": [355, 366, 384, 982], "_num_thread": 355, "singleton": [355, 785, 901, 1017], "aforement": [355, 963], "global_random_se": 355, "fixtur": [355, 368], "ci": [355, 371, 372, 376, 964, 1010, 1012], "build_numb": 355, "disrupt": 355, "config": [355, 368, 369, 376, 607, 1012], "contributor": [355, 371, 372, 373, 376, 379, 381, 962, 980, 983, 1005, 1006, 1007], "encount": [355, 366, 387, 393, 400, 401, 477, 542, 543, 562, 814, 815, 816, 818, 852, 937, 972, 976, 982, 985, 986, 997, 1012, 1015], "unrel": [355, 373, 376, 401, 496], "watch": 355, "annoi": 355, "test_your_test_nam": 355, "skip": [355, 368, 370, 377, 401, 449, 549, 627, 628, 633, 641, 642, 643, 652, 662, 876, 997, 1008, 1011, 1014, 1016, 1018], "global_dtyp": 355, "boundscheck": [355, 369], "segfault": [355, 369, 1004, 1012, 1017], "posix": [355, 379], "pairwisedistancesreduct": 355, "adequ": [355, 374, 548, 988, 1017], "drive": [356, 398, 399, 400, 530, 976, 986, 997], "passiveaggressiveregressor": [356, 958, 1005, 1008, 1011, 1012, 1015, 1017], "maxabsscal": [356, 843, 863, 952, 972, 1009, 1012, 1013, 1014, 1015, 1020], "routin": [356, 362, 365, 368, 369, 370, 371, 376, 379, 381, 402, 653, 655, 668, 680, 880, 881, 882, 883, 884, 959, 965, 972, 973, 976, 982, 986, 1004, 1018, 1019, 1020], "passiveaggress": [356, 401], "late": 356, "fledg": [356, 401], "naivebay": 356, "dramat": 356, "welcom": [357, 367, 368, 376, 382, 983, 985], "roadmap": [357, 980], "persist": [357, 376, 379, 398, 591, 592, 835, 967, 982, 999, 1010, 1013], "miscellan": [357, 361, 362, 1010, 1011, 1018, 1019, 1020], "craft": [357, 371], "curat": [357, 368, 371, 372], "conveni": [360, 376, 379, 394, 397, 401, 403, 408, 425, 428, 430, 432, 434, 445, 470, 592, 657, 659, 680, 708, 765, 838, 839, 936, 952, 954, 958, 959, 969, 986, 997, 1004], "commun": [361, 367, 371, 373, 376, 381, 384, 393, 400, 519, 521, 528, 673, 691, 851, 952, 959, 965, 972, 976, 980, 982, 986, 1012, 1013], "fetcher": [361, 1009, 1011], "linnerrud": [361, 999], "breast": [361, 481, 999, 1009], "cancer": [361, 481, 574, 575, 826, 999, 1009], "covertyp": [361, 472, 999], "rcv1": [361, 478, 999, 1009], "kddcup": [361, 473, 999], "svmlight": [361, 468, 489, 490, 982, 999, 1004, 1005, 1011, 1013], "jpeg": [362, 363, 474, 475], "publish": [362, 363, 370, 372, 376, 381, 974, 983, 1016], "creativ": 362, "spare": [362, 655, 656], "pyplpt": 362, "load_svmlight_fil": [362, 1004, 1005, 1010, 1011, 1012, 1019], "test_dataset": 362, "everybodi": [362, 368], "upload": [362, 366, 372, 379, 652], "mice": [362, 608, 952], "brain": 362, "miceprotein": 362, "1080": [362, 393], "sc": [362, 393], "clara": [362, 1016], "higuera": 362, "katheleen": 362, "gardin": 362, "krzysztof": 362, "cio": 362, "protein": [362, 982], "cite": [362, 393, 980], "kj": [362, 964], "critic": [362, 368, 380, 387, 400, 673, 959, 962, 970, 977, 986, 1015], "syndrom": 362, "plo": [362, 588, 589], "ONE": [362, 588, 589], "e0129126": 362, "40966": 362, "upload_d": 362, "08t16": 362, "17928620": 362, "file_id": 362, "default_target_attribut": 362, "row_id_attribut": 362, "mouseid": 362, "ignore_attribut": 362, "genotyp": 362, "cc18": 362, "study_135": 362, "study_98": 362, "study_99": 362, "md5_checksum": 362, "3c479a6885bfa0438971388283a1ce32": 362, "websit": [362, 363, 365, 368, 382, 966, 976, 986, 997, 1005, 1006, 1007], "4550": 362, "creator": [362, 365], "17t14": 362, "1804243": 362, "pone": 362, "0129126": 362, "openml100": 362, "study_14": 362, "study_34": 362, "earliest": [362, 959], "iris_61": 362, "iris_969": 362, "969": 362, "iris_version_3": 362, "vanschoren": [362, 1016], "rijn": [362, 1012], "bischl": 362, "torgo": 362, "acm": [362, 363, 393, 404, 426, 431, 438, 441, 492, 544, 657, 706, 736, 825, 962, 965, 968, 974], "sigkdd": [362, 363, 492, 657, 974], "newslett": 362, "legaci": [362, 372, 381, 930, 1004, 1011, 1016], "my": [362, 368, 373, 376, 477], "columnar": [362, 445, 982], "usabl": [362, 368, 370, 381, 387, 401, 777, 930, 1004, 1011, 1018, 1019], "io": [362, 365, 366, 368, 372, 374, 376, 381, 387, 673, 982, 1002], "json": [362, 368, 384], "sql": 362, "smoothli": 362, "manipul": [362, 389, 488, 930, 982, 1010], "mat": [362, 401], "load_fil": [362, 363, 997, 1006, 1018], "audio": [362, 484], "wish": [362, 368, 375, 377, 384, 393, 631, 632, 635, 636, 637, 645, 646, 915, 989, 997, 1011], "imageio": 362, "wavfil": 362, "wav": 362, "hdf5": 362, "h5py": 362, "pytabl": 362, "april": [363, 645, 666, 667, 1008, 1016], "1992": [363, 365, 397, 400, 548, 549, 626, 958], "1994": [363, 365, 625], "AT": [363, 476], "laboratori": [363, 982], "cambridg": [363, 398, 571, 814, 818, 958, 960, 964], "facial": 363, "upright": 363, "frontal": 363, "movement": 363, "credit": [363, 376, 400, 958, 986], "18846": [363, 469, 470], "scikit_learn_data": [363, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "20news_hom": 363, "newsgroups_train": 363, "11314": 363, "1073": 363, "20new": [363, 997], "34118": 363, "01327": 363, "newsgroups_test": 363, "vectors_test": 363, "class_prior": [363, 814, 815, 816, 818, 1005, 1008], "fit_prior": [363, 814, 815, 816, 818], "88213": 363, "suspici": 363, "show_top10": 363, "top10": 363, "affili": 363, "abund": 363, "clue": [363, 376, 959], "bare": [363, 959, 997], "quotat": 363, "77310": 363, "76995": 363, "cleveland": 363, "indian": 363, "leagu": 363, "team": [363, 371, 379, 381, 980, 982, 986, 1004], "ohio": 363, "spark": [363, 983], "death": 363, "floyd": [363, 669, 959], "reckon": 363, "coloni": 363, "owner": [363, 365], "paul": [363, 1007, 1010, 1011, 1012, 1013, 1017, 1018], "dolan": 363, "nicknam": 363, "tribe": 363, "theme": [363, 1004], "mlb": [363, 850], "inappropri": [363, 397, 403, 690, 798], "nlp": [363, 398, 401, 814, 818, 960, 986], "cultur": 363, "inflammatori": 363, "famou": [363, 365, 977], "internet": [363, 373, 972, 995], "offici": [363, 370, 381, 384, 474, 478, 982, 997, 1012, 1013, 1016], "verif": [363, 962, 986], "identif": [363, 368, 478, 951, 989], "viola": [363, 1012], "opencv": 363, "detector": [363, 381, 825], "5749": [363, 474, 475], "13233": [363, 474, 475], "5828": [363, 474, 475], "200m": 363, "lfw_home": 363, "rectangular": [363, 381, 915, 983], "1140": 363, "fetch_lfw_pair": [363, 1009, 1019], "lfw_pairs_train": 363, "subdivid": [363, 403], "10_fold": [363, 474], "gari": [363, 1011], "huang": [363, 639, 1010, 1015], "manu": 363, "ramesh": [363, 986, 1007, 1010, 1014], "tamara": 363, "berg": [363, 1005, 1006, 1016], "erik": [363, 986, 1007], "miller": [363, 1012, 1013, 1017], "massachusett": 363, "amherst": 363, "30m": 363, "seven": [363, 955], "homepag": [363, 511, 978], "581012": [363, 472], "newswir": 363, "ltd": [363, 986], "804414": [363, 478], "47236": [363, 478], "fetch_rcv1": [363, 1009, 1013], "v2": [363, 478, 645, 666, 667, 958], "chronolog": [363, 478], "23149": [363, 478, 1018], "781265": [363, 478], "lyrl2004": [363, 478], "2286": 363, "810596": 363, "2287": 363, "2288": 363, "uint32": [363, 478], "gmil": 363, "381327": 363, "ccat": 363, "e11": 363, "ecat": 363, "m11": 363, "656": 363, "lewi": [363, 1011, 1015], "yang": [363, 393, 398, 515, 620, 1010, 1011, 1014, 1016, 1017, 1018], "rose": 363, "cup": [363, 962], "tcpdump": 363, "darpa": 363, "intrus": 363, "mit": [363, 374, 393, 403, 591, 592, 595, 600, 603, 624, 647, 648, 657, 816, 955], "lincoln": 363, "inject": [363, 400], "attack": 363, "unrealist": 363, "logged_in": 363, "resp": [363, 400, 578, 775, 776, 976, 1012], "4898431": [363, 473], "976158": 363, "699691": 363, "619052": 363, "95373": 363, "kddcup99": [363, 473], "richard": [363, 402, 639, 1005, 1014, 1016, 1018, 1019], "lippmann": 363, "hain": 363, "jonathan": [363, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020], "korba": 363, "da": [363, 1019, 1020], "yamanishi": 363, "takeuchi": 363, "william": [363, 365, 403, 591, 592, 595, 600, 603, 620, 962, 966, 1011, 1012, 1013, 1014, 1019, 1020], "miln": 363, "discount": [363, 393, 706, 736, 1011, 1014], "sixth": 363, "press": [363, 393, 398, 403, 404, 426, 571, 591, 592, 595, 600, 603, 624, 814, 818, 955, 958, 960, 964], "household": 363, "statlib": 363, "dcc": 363, "ltorgo": 363, "cal_hous": 363, "1990": 363, "censu": 363, "bureau": 363, "resid": 363, "vacat": 363, "pace": 363, "kellei": [363, 1006, 1007], "ronald": [363, 966, 1007, 1017], "barri": [363, 1012], "autoregress": 363, "291": [363, 365], "297": 363, "hyperspher": [364, 982], "interleav": [364, 503], "simplif": [364, 367, 373, 1004, 1010], "realiti": 364, "make_sparse_uncorrel": 364, "make_friedman1": [364, 400, 520, 524, 574, 575, 613], "make_friedman2": [364, 592, 594, 595, 596, 597, 598, 602, 605, 606], "reciproc": [364, 962], "make_friedman3": 364, "7826": 365, "4194": 365, "9490": 365, "9565": 365, "fisher": [365, 400, 485, 617, 982], "donor": 365, "michael": [365, 393, 431, 609, 618, 672, 775, 952, 958, 986, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019], "marshal": 365, "arc": [365, 400], "juli": [365, 402, 714, 1007, 1011, 1012, 1013], "1988": 365, "sir": 365, "referenc": [365, 370, 371, 376, 381, 870, 871, 965, 1011, 1017], "duda": [365, 956], "hart": [365, 956, 1012], "taxonom": 365, "annual": [365, 393, 706, 736, 875, 962, 975], "eugen": [365, 1005, 1010], "1936": 365, "john": [365, 401, 517, 689, 715, 749, 854, 880, 881, 883, 884, 952, 958, 962, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020], "wilei": [365, 952], "1950": [365, 962], "1973": 365, "scene": [365, 965, 967, 1017], "q327": 365, "d83": 365, "son": [365, 952], "isbn": [365, 393, 958], "471": 365, "22361": 365, "218": [365, 452, 696, 766], "dasarathi": 365, "1980": 365, "nose": [365, 1007, 1011], "pami": [365, 393, 705], "gate": [365, 1017], "1972": 365, "431": 365, "433": 365, "mlc": 365, "cheeseman": 365, "autoclass": 365, "conceptu": [365, 400, 960], "alpaydin": 365, "boun": 365, "nist": [365, 962], "bitmap": 365, "preprint": 365, "32x32": 365, "nonoverlap": 365, "4x4": [365, 398, 401], "garri": 365, "candela": 365, "dimmick": 365, "geist": 365, "grother": 365, "janet": 365, "handprint": 365, "nistir": 365, "5469": 365, "kaynak": 365, "msc": 365, "graduat": 365, "bogazici": 365, "cascad": 365, "kybernetika": 365, "ken": [365, 997, 1006, 1013], "tang": [365, 1014, 1015, 1016], "ponnuthurai": 365, "suganthan": 365, "yao": [365, 1010, 1011, 1012, 1013], "kai": [365, 544, 968, 1011], "dimensionalityreduct": 365, "nanyang": 365, "technolog": 365, "claudio": [365, 1018, 1019], "gentil": [365, 1016], "linnerud": [365, 486], "men": 365, "club": 365, "waist": 365, "puls": 365, "chin": [365, 1008], "situp": 365, "tenenhau": 365, "pratiqu": 365, "alcalin": 365, "magnesium": 365, "phenol": 365, "nonflavanoid": 365, "proanthocyanin": 365, "od280": 365, "od315": 365, "dilut": 365, "class_2": [365, 491], "1680": 365, "746": 365, "chemic": 365, "grown": [365, 400, 534, 535, 536, 537, 538, 539, 545, 546, 886, 887, 888, 889, 978], "itali": 365, "cultiv": 365, "thirteen": 365, "constitu": 365, "forina": 365, "parvu": 365, "pharmaceut": 365, "food": 365, "technologi": [365, 393, 982, 986], "brigata": 365, "salerno": 365, "16147": 365, "genoa": 365, "lichman": 365, "irvin": 365, "ca": [365, 393, 424, 886, 887, 974, 978], "aeberhard": 365, "cooman": 365, "vel": 365, "rep": [365, 982], "dept": 365, "cook": [365, 1004, 1010], "north": [365, 393], "queensland": 365, "submit": [365, 366, 367, 370, 371, 372, 373, 376, 381, 382], "technometr": [365, 395, 450, 455, 968], "rda": 365, "1nn": 365, "THE": 365, "OF": 365, "chemometr": 365, "perimet": 365, "textur": [365, 738, 739, 960], "concav": 365, "symmetri": [365, 680, 852, 855, 866, 960], "fractal": 365, "malign": [365, 481], "benign": [365, 481], "143": [365, 452, 453, 974, 1004, 1005], "2501": 365, "019": [365, 374, 452], "345": 365, "873": 365, "542": 365, "4254": 365, "071": [365, 419], "027": 365, "664": 365, "357": [365, 481, 879], "wolberg": 365, "nick": [365, 1004, 1010, 1011, 1012, 1013], "olvi": 365, "mangasarian": 365, "goo": [365, 481], "gl": [365, 481], "u2uwz2": [365, 481], "needl": 365, "aspir": [365, 368], "fna": 365, "nuclei": 365, "multisurfac": 365, "msm": 365, "bennett": [365, 962], "midwest": 365, "cognit": 365, "societi": [365, 393, 395, 450, 455, 522, 608, 855, 866, 958, 976], "101": [365, 825, 1005], "insepar": 365, "uw": [365, 1016], "ftp": [365, 663, 664], "wisc": [365, 873], "prog": 365, "cpo": 365, "nuclear": 365, "tumor": 365, "spie": 365, "1993": [365, 455, 645, 666, 667, 978], "symposium": [365, 393, 441], "1905": 365, "861": [365, 768, 769, 962], "870": 365, "san": [365, 401, 974], "jose": [365, 639, 962, 1012, 1014], "prognosi": 365, "577": 365, "august": [365, 393, 492, 515, 977, 1004, 1006, 1007, 1011, 1018], "wheel": [366, 368, 372, 384, 1014, 1016, 1018], "quickest": 366, "registri": [366, 384], "uninstal": 366, "git": [366, 370, 372, 374, 376, 985, 1000, 1004], "fork": [366, 368, 372, 376, 379], "miniforge3": [366, 376], "miniforg": [366, 376, 384], "env": [366, 376, 384], "virtualenv": [366, 368], "python3": [366, 384], "venv": [366, 384], "dev0": [366, 372, 985, 1000], "pyx": [366, 368, 369, 374, 376], "pxd": [366, 368], "sklearn_fail_no_openmp": 366, "checkout": [366, 368, 372, 376], "cumbersom": 366, "reinstal": [366, 384], "setuptool": 366, "unix": [366, 401], "makefil": 366, "studio": [366, 986], "vs_buildtool": 366, "desktop": 366, "screenshot": 366, "secondli": [366, 368, 379, 393, 400, 638, 958, 997], "architectur": [366, 370, 376, 379, 387, 449, 876, 966, 980, 986, 1004], "cmd": 366, "powershel": 366, "struct": [366, 381, 1007], "calcsiz": 366, "distutils_use_sdk": 366, "x86": 366, "buildtool": 366, "vc": 366, "vcvarsal": 366, "bat": 366, "x64": 366, "clang": [366, 369], "confusingli": 366, "usr": 366, "gcc": [366, 369, 374, 379], "libomp": [366, 1016], "silicon": [366, 980], "m1": [366, 980], "januari": [366, 368, 384, 1004, 1005, 1014, 1016, 1019], "arm64": [366, 368, 371, 384], "llvm": 366, "toolchain": 366, "xcode": 366, "conflict": [366, 368, 372, 376, 384, 1011, 1012], "condarc": 366, "channel_prior": 366, "reactiv": [366, 374], "echo": [366, 372], "cxx": 366, "cflag": 366, "cxxflag": 366, "ldflag": 366, "subfold": [366, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 1017], "fopenmp": [366, 369], "export": [366, 369, 370, 387, 890, 891, 978, 982, 985, 1013], "cppflag": 366, "xpreprocessor": 366, "wl": 366, "rpath": 366, "lomp": 366, "sudo": [366, 384], "apt": [366, 376, 384], "pip3": 366, "pythonx": 366, "site": [366, 368, 371, 376, 384, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 986, 1012], "precompil": 366, "arm": [366, 376, 951], "cython3": 366, "cento": 366, "yum": 366, "devel": 366, "gnu": 366, "port": [366, 384, 1014], "pkg": 366, "build_ext": [366, 374], "build_clib": 366, "linker": [366, 369], "sysconfig": 366, "counterpart": [366, 951, 959, 977, 992], "get_config_var": 366, "sklearn_build_parallel": 366, "tracker": [367, 371, 376, 379, 382, 387, 980, 983], "prioriti": [367, 613, 807, 808, 983, 1007], "guidelin": [367, 371, 373, 374, 376, 392, 393, 400], "reformul": 367, "xyz": 367, "someestim": 367, "glanc": 367, "relabel": [367, 795, 796, 875], "stall": [367, 371], "sprint": [367, 368, 980, 1004], "unfinish": [367, 368], "supersed": [367, 1009], "overflow": [367, 376, 379, 1007, 1011, 1012, 1013, 1014, 1015, 1017], "submitt": 367, "strive": [367, 382, 986], "expertis": [367, 368, 379], "unclear": [367, 368, 482], "pleasant": [367, 986], "chime": 367, "permiss": [367, 372, 382, 384, 986, 1019], "matthew": [367, 373, 517, 723, 1004, 1007, 1011, 1013, 1017, 1018], "rocklin": [367, 373], "acknowledg": [367, 590], "struggl": 367, "everyon": [368, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "underrepres": 368, "merit": [368, 372, 382], "teach": 368, "priceless": 368, "abid": 368, "codeofconduct": 368, "hesit": 368, "typo": [368, 382, 1004], "send": [368, 393, 405, 514], "valuabl": [368, 952, 986], "burden": [368, 851, 983], "slep": [368, 381, 980], "templat": [368, 372, 373, 381, 382, 538, 539, 544, 545, 546, 547, 982], "ecosystem": [368, 952, 981, 986], "contrib": [368, 370, 376, 379, 381, 982, 983], "numpydoc": [368, 381, 384, 386], "compli": [368, 381, 909, 983], "fulfil": [368, 393, 400, 777, 780, 781, 791, 839, 843, 958], "anyon": [368, 382, 986], "gist": [368, 376, 985], "repo": [368, 372, 983], "feasibl": [368, 848, 849, 859], "traceback": [368, 373, 376, 379, 449, 962, 985], "doubt": [368, 369, 372, 958, 968, 982], "companion": [368, 972], "transcript": 368, "inclus": [368, 370, 376, 431, 437, 734, 766, 962, 963, 1004, 1018], "yourlogin": 368, "flake8": [368, 384, 386, 560], "mypi": [368, 372, 384, 386, 1015], "synchron": [368, 401], "my_featur": 368, "commit": [368, 372, 376, 382, 985, 1004, 1005, 1006, 1007], "modified_fil": 368, "committ": [368, 1004], "modif": [368, 396, 400, 401, 975], "approv": [368, 382, 400], "mrg": [368, 376], "incomplet": [368, 384, 393, 686, 773, 952, 959, 997, 1008, 1010], "wip": [368, 376, 384], "matur": [368, 982, 983], "broad": [368, 381, 982], "collabor": 368, "_logist": 368, "doctest": [368, 381, 989, 1004], "test_logist": [368, 376], "rst": [368, 372, 376, 997, 1004, 1009], "test_common": [368, 376], "caught": [368, 376, 387], "editor": [368, 376, 379], "submodul": [368, 372, 374, 392, 954, 960, 1004], "intricaci": 368, "narr": [368, 381, 639, 878, 883, 1004, 1005], "unittest": 368, "tests_for_packag": 368, "static": [368, 370, 374, 376, 627, 628, 633, 634, 641, 642, 643, 644], "workaround": [368, 777, 791], "astropi": 368, "linux": [368, 370, 371, 376, 982, 1004], "lint": [368, 376], "aarch64": [368, 376, 384], "gh": 368, "nogil": [368, 369], "cpython": [368, 369, 374, 1019], "sklearn_run_float32_test": 368, "lengthi": [368, 379], "etiquett": 368, "she": [368, 868, 869, 1014], "he": [368, 706, 736, 836, 837, 868, 869, 962, 997, 1011, 1018, 1019], "shorten": [368, 977, 1017], "leader": [368, 986], "grab": 368, "familiar": [368, 399, 1012], "acquaint": 368, "experienc": 368, "abandon": 368, "someon": [368, 372, 381, 1004], "glad": 368, "restructuredtext": 368, "_build": 368, "viewabl": 368, "pillow": [368, 384, 386], "sphinxext": [368, 384, 386], "opengraph": [368, 384, 386], "vast": 368, "examples_pattern": 368, "your_regex_goes_her": 368, "no_mathjax": 368, "latexpdf": 368, "elabor": [368, 963], "paragraph": [368, 401, 484, 997], "hood": [368, 958, 977], "colon": 368, "selectfpr": [368, 402, 573, 576, 579, 580, 581, 587, 1020], "some_param": 368, "hello": [368, 376, 922], "goodby": 368, "liter": [368, 372, 986], "array_paramet": 368, "list_param": 368, "typed_ndarrai": 368, "multioutput_arrai": 368, "bracket": [368, 958], "delimit": [368, 968, 1019], "unwritten": 368, "bibliograph": 368, "arxiv": [368, 443], "backtick": [368, 373], "nowadai": 368, "syntax": [368, 373, 376, 394, 951, 988, 1015, 1017], "_my": 368, "ref": [368, 375, 376, 952, 1010], "currentmodul": 368, "succeed": 368, "stone": [368, 886, 887, 978], "subdirectori": 368, "subpackag": [368, 372, 980, 1008, 1013], "cleanup": [368, 1004], "charg": 368, "test_requiring_mpl_fixtur": 368, "hang": [368, 985, 1014, 1015], "fruit": [368, 963], "asv": 368, "asv_benchmark": 368, "airspe": 368, "veloc": 368, "publicli": [368, 1014], "zero_on": [368, 1005], "example_funct": 368, "exampleestim": 368, "_n_cluster": 368, "versionchang": 368, "meet": [368, 379, 382, 402, 553, 584, 836, 837, 875, 962, 975, 986, 1012, 1013, 1014], "nit": 368, "retract": 368, "grammar": 368, "disambigu": [368, 807, 875, 975, 1019], "immedi": [368, 379, 777, 791, 800, 801, 802, 1012], "Will": [368, 478, 515, 608, 625, 626, 627, 633, 637, 638, 641, 642, 643, 644, 645, 646, 654, 656, 688, 695, 768, 844, 848, 852, 859, 1007, 1008, 1010, 1012], "clariti": [368, 376], "unhelp": 368, "extran": 368, "rewritten": [368, 630, 1006, 1008], "generos": 368, "reward": 368, "heard": 368, "ve": [368, 401, 985, 986, 997, 1011], "enemi": 368, "courtesi": 368, "justifi": [368, 374, 391, 546], "occas": 368, "deserv": [368, 374], "digest": [368, 1019], "overwhelm": 368, "sheer": [368, 986], "myself": 368, "trickiest": 368, "buri": 368, "inherit": [368, 370, 380, 381, 558, 657, 907, 909, 958, 1004, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1019, 1020], "mixin": [368, 381, 408, 409, 410, 411, 412, 413, 414, 415, 582, 909, 1006, 1015, 1019], "classifiermixin": [368, 370, 381, 397, 1015], "grep": 368, "delai": [368, 477, 777, 791, 800, 801, 802, 930, 1018, 1019], "some_funct": [368, 905], "some_iter": 368, "flavor": [368, 965], "pointer": [368, 376, 424, 1013], "mandatori": [368, 401], "favorit": [368, 379, 986], "Being": [368, 382, 387, 958, 965], "killer": [368, 986], "blame": 368, "migrat": [368, 1004], "ignorerevsfil": 368, "rev": [368, 588, 589], "ruin": 368, "maco": [369, 371, 384, 1012, 1016, 1018], "sklearn_enable_debug_cython_direct": 369, "scratch": [369, 424, 962, 1006], "magic": [369, 374, 403, 597, 602, 605], "gdb": [369, 371, 985], "entrypoint_to_bug_reproduc": 369, "cdef": 369, "state_to_print": 369, "test_val": 369, "unifi": [369, 377, 379, 380, 400, 618, 982, 1004], "fuse": [369, 1010, 1020], "ongo": [369, 382], "concret": [369, 382, 402, 649, 655, 656, 657, 658, 870, 871, 958, 976], "alia": [369, 372, 376, 381, 598, 936, 951, 968, 983, 1004, 1018], "shell": [369, 376, 379, 988, 997], "cythonx": 369, "language_level": 369, "wraparound": 369, "initializedcheck": 369, "nonecheck": 369, "cdivis": 369, "recompil": [369, 374, 384], "pep073": 369, "pathwai": 369, "memoryview": 369, "cnp": 369, "lightweight": [369, 777, 791, 800, 801, 802, 982], "virtual": [369, 384, 397, 986], "enter": [369, 372, 393, 424, 969], "prang": 369, "void": 369, "my_func": [369, 374], "st\u00e9fan": 369, "benhel": 369, "_cython_bla": 369, "protect": [369, 372, 928], "_openmp_help": 369, "cimport": [369, 377, 1012], "omp_get_max_thread": 369, "prolifer": 370, "adopt": [370, 381, 874, 962, 976, 1012, 1019], "predomin": [370, 1005], "overrid": [370, 401, 431, 438, 523, 529, 569, 570, 572, 574, 575, 578, 637, 645, 666, 667, 821, 822, 823, 825, 827, 829, 830, 831, 1004, 1012, 1014, 1018, 1020], "creation": [370, 492, 493, 494, 496, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 637, 819, 820, 986, 1011, 1012, 1013, 1017], "optimis": [370, 393, 965, 982, 1007, 1017, 1019], "rememb": [370, 373, 384, 401, 965, 969, 978], "param1": [370, 994], "param2": [370, 994], "param3": 370, "postpon": [370, 372], "requisit": 370, "liner": [370, 805], "ipython": [370, 373, 374, 376, 989, 997], "session": [370, 374, 379, 384, 981, 986, 997], "trainabl": 370, "trail": [370, 946], "overridden": [370, 381, 403, 523, 529, 597, 602, 605, 675, 1012, 1013], "n_features_in_": [370, 381, 413, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 608, 609, 610, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 1015, 1017, 1019], "slep010": [370, 1015], "duck": [370, 381, 1014], "boilerpl": [370, 986, 997], "check_x_i": [370, 377, 1008, 1012, 1013, 1018], "check_arrai": [370, 377, 515, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "templateclassifi": 370, "demo_param": 370, "myestim": 370, "subestim": 370, "my_extra_param": 370, "my_estim": [370, 394], "subestimator__c": 370, "subestimator__class_weight": 370, "subestimator__du": 370, "subestimator__fit_intercept": 370, "subestimator__intercept_sc": 370, "subestimator__l1_ratio": 370, "subestimator__max_it": 370, "subestimator__multi_class": 370, "subestimator__n_job": 370, "subestimator__penalti": 370, "subestimator__random_st": 370, "subestimator__solv": 370, "subestimator__tol": 370, "subestimator__verbos": 370, "subestimator__warm_start": 370, "__c": 370, "__class_weight": 370, "unpack": 370, "easiest": [370, 376, 394, 959], "__repr__": [370, 983, 1013], "setattr": 370, "accomplish": [370, 527, 959, 963, 965, 986], "deepcopi": 370, "__sklearn_clone__": [370, 416, 1020], "frozen": 370, "frozentransform": 370, "fitted_transform": [370, 445], "__getattr__": 370, "_estimator_typ": [370, 381, 1009], "regressormixin": [370, 381, 446, 1015], "clustermixin": 370, "is_classifi": [370, 381], "predict_log_proba": [370, 381, 530, 531, 532, 534, 536, 538, 540, 545, 574, 575, 639, 640, 657, 777, 780, 781, 791, 800, 814, 815, 816, 817, 818, 836, 839, 875, 880, 883, 886, 888, 977, 1004, 1017], "_base": 370, "programmat": [370, 480, 1013], "_get_tag": [370, 1015], "allow_nan": [370, 897, 899, 1020], "binary_onli": [370, 1014, 1015], "multioutput_onli": 370, "no_valid": 370, "non_determinist": [370, 1018], "primari": [370, 381, 398, 496, 969, 986], "_safe_split": 370, "preserves_dtyp": 370, "poor_scor": 370, "requires_fit": 370, "requires_positive_x": [370, 1014, 1019], "requires_i": [370, 1015], "requires_positive_i": 370, "_skip_test": 370, "_xfail_check": 370, "check_nam": 370, "xfail": [370, 376], "skiptestwarn": 370, "x_type": 370, "2darrai": 370, "signifi": [370, 393, 562, 788, 967], "1dlabel": 370, "2dlabel": 370, "_more_tag": 370, "mymultioutputestim": 370, "_required_paramet": 370, "ridgeregress": 370, "idiosyncrat": 370, "subclass": [370, 403, 555, 928, 1009, 1012, 1017], "onetoonefeaturemixin": [370, 415], "classnameprefixfeaturesoutmixin": [370, 415, 1019], "auto_wrap_output_kei": 370, "mytransform": 370, "__init_subclass__": 370, "ownership": 370, "pep8": [370, 372, 376], "indent": [370, 928], "nsampl": [370, 775, 776], "statement": [370, 373, 376, 379, 381, 398, 980, 997], "flow": 370, "client": 370, "corollari": 370, "foo": [370, 562, 966], "baz": [370, 562], "pyflak": 370, "asanyarrai": 370, "hadamard": 370, "choose_random_sampl": 370, "freestand": 370, "unmodifi": [370, 381], "random_state_": [370, 517, 608, 828, 1018], "gaussiannois": 370, "showcas": 370, "quasi": [370, 836, 837, 958], "assert_allclos": 370, "rtol": [370, 819, 820, 824], "atol": [370, 819, 820, 824], "checklist": 371, "unclaim": 371, "workflow": [371, 372, 380, 397], "boil": [371, 395], "markdown": 371, "saniti": [371, 843, 962, 1004, 1005], "outdat": 371, "diff": [371, 962], "valgrind": 371, "platform": [371, 379, 381, 387, 986, 1009, 1012, 1013, 1015, 1017, 1018], "x86_64": 371, "yep": 371, "gperftool": 371, "debugg": [371, 376], "gprof": 371, "callgrind": 371, "kcachegrind": 371, "warm": [371, 381, 512, 518, 524, 526, 527, 591, 634, 640, 647, 649, 657, 658, 659, 958, 983, 1014, 1016, 1018], "homebrew": [371, 384], "freebsd": 371, "rrrcn": 372, "pep101": 372, "build_tool": 372, "blocker": 372, "mileston": 372, "maint_tool": 372, "sort_whats_new": 372, "whats_miss": 372, "fixm": [372, 381], "feedstock": 372, "recip": [372, 959, 986], "yaml": 372, "whats_new": [372, 376], "v0": [372, 452, 453, 459, 493, 569, 570, 572, 777, 791, 838, 841, 1005, 1012, 1013, 1014], "freez": [372, 384, 387, 983, 986, 1012], "afterward": [372, 516, 522, 803], "0rc1": 372, "__version__": 372, "draft": [372, 382], "rebas": 372, "bugfix": [372, 1004, 1018], "backport": [372, 377, 1011], "maint": 372, "enh": 372, "blindli": 372, "invit": 372, "cherri": 372, "shortlog": 372, "f2": [372, 963], "sed": [372, 1004], "front": [372, 1011], "rc1": 372, "suffix": [372, 802, 962, 1014], "brows": 372, "3a": 372, "22wheel": 372, "pyproject": 372, "toml": 372, "oldest": [372, 477], "abi": 372, "acronym": 372, "deliveri": 372, "whl": 372, "22publish": 372, "went": [372, 962], "bot": [372, 967, 1018], "sync": 372, "testpypi": 372, "tarbal": [372, 1019], "wheelhouse_upload": 372, "twine": 372, "rrr": 372, "symlink": 372, "latestst": 372, "tmp": 372, "ln": [372, 958, 966, 972], "versionwarn": 372, "secur": [372, 381, 982, 983, 986, 999], "twitter": 372, "linkedin": 372, "squash": [372, 403, 512, 518, 523, 529], "authorship": 372, "permalink": 372, "_hist_gradient_boost": 372, "_iter": 372, "pickl": [372, 381, 387, 401, 569, 570, 572, 819, 820, 982, 983, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "checker": [372, 799], "type_check": 372, "test_enable_hist_gradient_boost": 372, "enable_hist_gradient_boost": [372, 1013], "enable_my_experimental_featur": 372, "indefinit": 372, "incentiv": 372, "workabl": 373, "stackoverflow": [373, 376, 379, 985], "blogpost": 373, "mcve": [373, 376, 379], "my_data": 373, "with_mean": [373, 859, 869, 972, 1012, 1017], "default_scor": 373, "other_scor": 373, "scrollbar": 373, "tripl": 373, "fenc": 373, "qualifi": 373, "a674e682c281": 373, "lda_featur": 373, "lda_model": 373, "n_topic": [373, 517, 1011], "minimalist": [373, 401, 985], "continuous_featur": 373, "positive_featur": 373, "invest": [374, 986], "idiom": 374, "wast": [374, 397, 398, 951], "crunch": 374, "performancetip": 374, "reimplement": [374, 381, 1010, 1014], "spottabl": 374, "amen": [374, 403, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 951], "cpp": 374, "engag": [374, 382], "tent": 374, "somewher": [374, 962, 997], "prun": 374, "14496": [374, 1013], "682": 374, "ncall": 374, "tottim": 374, "percal": 374, "cumtim": 374, "lineno": 374, "017": [374, 452, 453], "042": 374, "_nls_subproblem": 374, "1263": 374, "_po": 374, "681": 374, "047": 374, "_initialize_nmf": 374, "_spars": 374, "_neg": 374, "337": 374, "hotspot": 374, "16159": [374, 1015], "840": 374, "2833": 374, "_dotbla": 374, "651": 374, "1397": 374, "2780": 374, "167": [374, 1004], "1542": 374, "2734": 374, "fromnumer": 374, "1185": 374, "lapack_lit": 374, "dgesdd": 374, "rewrit": [374, 978, 996, 1004], "shallow": [374, 400, 542, 543, 893], "4x": [374, 1019], "line_profil": 374, "wire": [374, 515, 522], "profile_default": 374, "ipython_config": 374, "terminalipythonapp": 374, "interactiveshellapp": 374, "lprun": 374, "qtconsol": 374, "_nmf": 374, "73153": 374, "h_init": 374, "5863": 374, "nl": 374, "173": [374, 565], "112141": 374, "2336": 374, "wtv": 374, "16144": 374, "wtw": 374, "113": [374, 1007], "638": 374, "1880": 374, "195133": 374, "305": 374, "grad": [374, 986], "495761": 374, "777": 374, "proj_gradi": 374, "2449": 374, "1474": 374, "4474": 374, "inner_it": 374, "83833": 374, "hn": 374, "194239": 374, "191": [374, 963], "48858": 374, "150407": 374, "gradd": 374, "515390": 374, "dqd": 374, "pin": 374, "memory_profil": [374, 384, 386], "memit": 374, "mprun": 374, "1e7": 374, "402344": 374, "standalon": [374, 639, 878, 985], "bianp": 374, "conda_prefix": 374, "pydebug": 374, "extra_cflag": 374, "dpy_debug": 374, "num_cor": 374, "dbg": 374, "fortun": [374, 400, 997, 1017, 1018], "my_fil": 374, "callgrin": 374, "prof": 374, "encapsul": [375, 394], "artist": [375, 420, 613, 679, 681, 682, 683, 783, 892], "classmethod": [375, 420, 612, 613, 678, 679, 681, 682, 683, 783], "line_": [375, 420, 679, 681, 682, 683, 783], "gridspecfromsubplotspec": 375, "subplot_spec": 375, "get_subplotspec": 375, "ax_top_left": 375, "ax_top_right": 375, "ax_bottom": 375, "bounding_ax_": [375, 613], "lines_": [375, 613, 783], "contours_": [375, 613], "advic": [376, 403, 603, 604], "forth": 376, "userscript": 376, "tampermonkei": 376, "greasemonkei": 376, "shortcut": [376, 403], "pr_number": 376, "navig": [376, 1006], "overlai": [376, 613], "codecov": 376, "test_sparsifi": 376, "pdb": 376, "ipdb": [376, 997], "pdbcl": 376, "terminalpdb": 376, "lf": 376, "ff": 376, "tb": [376, 552, 553, 554, 555, 556, 557, 558, 559], "runxfail": 376, "werror": 376, "mailman": 376, "listinfo": 376, "crowd": [376, 382, 959, 983, 985], "imped": 376, "attent": [376, 588, 589, 976], "pytb": 376, "stdin": [376, 997], "perman": 376, "25163598": 376, "issuenumb": 376, "1506": 376, "volunt": 376, "establish": [376, 379, 382, 952], "clarifi": [376, 382, 771], "regression_test": 376, "0008": 376, "patienc": [376, 381], "manifest": [376, 959, 965], "fault": [376, 1012, 1014, 1016], "glibc": 376, "uniniti": 376, "trace": [376, 393, 406, 454, 456, 457, 460, 461, 462, 670, 674, 959, 1015], "supp": 376, "readm": [376, 401, 474], "my_test_script": 376, "mobil": 376, "deploy": [376, 982, 983, 986], "scalewai": 376, "aw": 376, "graviton": 376, "laptop": [376, 449, 876, 1018, 1019, 1020], "workstat": 376, "qemu": 376, "docker": [376, 387, 1017, 1018], "multiarch": 376, "ppc64le": 376, "filesystem": [376, 384, 1017], "pushd": 376, "wget": 376, "arm64v8": 376, "mount": 376, "privileg": 376, "pwd": 376, "reinit": 376, "bashrc": 376, "ephemer": 376, "evolv": [377, 1019], "as_float_arrai": 377, "column_or_1d": [377, 1015, 1019], "multitarget": 377, "multi_output": [377, 898], "safe_index": [377, 1014], "check_memori": [377, 381, 1011], "5488135": 377, "71518937": 377, "60276338": 377, "54488318": 377, "has_fit_paramet": 377, "randomized_range_find": [377, 1005, 1010], "arrayfunc": 377, "cholesky_delet": 377, "min_po": 377, "least_angl": 377, "fast_logdet": 377, "safe_sparse_dot": [377, 1014], "weighted_mod": 377, "sample_without_replac": [377, 1010], "n_popul": [377, 931], "sparsefunc": [377, 1017], "mean_variance_axi": [377, 1010, 1017], "sparsefuncs_fast": 377, "inplace_csr_row_normalize_l1": 377, "inplace_csr_row_normalize_l2": 377, "inplace_csr_column_scal": 377, "sort_graph_by_row_valu": [377, 1019], "single_source_shortest_path_length": 377, "dijkstra": [377, 669, 959], "graph_shortest_path": [377, 1017], "all_estim": [377, 1014, 1015, 1019], "all_displai": [377, 1019], "all_funct": [377, 1019], "is_multilabel": 377, "dict_learn": [377, 512, 518, 527, 1005, 1012, 1014, 1017, 1018, 1020], "gen_batch": [377, 919], "safe_mask": 377, "safe_sqr": 377, "murmurhash3_32": 377, "murmurhash3_x86_32": [377, 927], "cryptograph": 377, "lookup": [377, 927, 1013], "bloom": [377, 927], "384616559": 377, "3910350737": 377, "murmurhash": 377, "graphical_lasso": [377, 452, 453, 1012], "kit": 379, "toolbox": [379, 982, 986], "multilay": [379, 960], "kera": [379, 982], "forese": 379, "redesign": [379, 1004], "pystruct": [379, 982], "ssvm": 379, "seqlearn": 379, "4143": 379, "meanwhil": [379, 977], "pipegraph": 379, "squared_loss": [379, 1017], "undertak": 379, "discourag": [379, 384, 670], "slowli": [379, 381, 525, 915], "ordinarili": [379, 381], "corrobor": 379, "proof": [379, 400, 872, 974], "road": 379, "bridg": [379, 959, 982], "reproduct": [379, 958, 985], "guidanc": [379, 403], "gitter": [379, 980, 1011, 1012], "value_kei": [379, 893], "levenshtein": 379, "dna": [379, 609, 952], "rna": 379, "pain": 379, "suppli": [379, 393, 627, 898, 899, 965, 986, 1008, 1010, 1012, 1017], "leven": 379, "acctcctagaag": 379, "acctactagaagtt": 379, "gaatattaggccga": 379, "lev_metr": 379, "multiprocess": [379, 381, 928, 930, 965, 1004, 1012, 1018], "exec": 379, "nvidia": 379, "cuda": [379, 389], "reiniti": 379, "culprit": 379, "refus": [379, 868, 869], "forkserv": 379, "joblib_start_method": 379, "set_start_method": 379, "dozen": [380, 403], "unsuperv": [380, 396], "newli": [380, 400, 444, 969, 1010, 1011, 1019], "leakag": [380, 381, 394, 999], "disclos": 380, "entail": [380, 857, 859, 976], "r_squar": 380, "searchcv": [380, 1019], "tacit": 381, "inconsist": [381, 387, 401, 489, 490, 557, 880, 883, 902, 968, 977, 999, 1004, 1009, 1010, 1011, 1012, 1014, 1017, 1019, 1020], "elsewher": [381, 443, 444, 452, 453, 459], "formal": [381, 382, 393, 400, 819, 820, 959, 962, 963, 966], "thereof": 381, "transduct": [381, 393, 873, 874, 983], "position": 381, "serial": [381, 982, 983, 999, 1004, 1012, 1016], "unpickl": [381, 387, 557, 819, 820, 1010, 1016, 1020], "pep257": 381, "nuanc": 381, "flaw": [381, 400], "terminologi": [381, 1012], "est1": [381, 613], "est2": [381, 613], "exemplifi": 381, "_score": [381, 777, 791, 802, 962, 1004, 1017], "_loss": [381, 962], "divers": [381, 400], "abstract": [381, 398, 403, 599, 749, 982, 1004], "notfittederror": [381, 828, 946, 1008, 1010, 1013, 1014, 1020], "descriptor": [381, 489, 490], "hoc": 381, "spectral_embed": [381, 959, 1005, 1008, 1010, 1012, 1014, 1017, 1018, 1019], "maxabs_scal": [381, 848, 1012], "astrai": 381, "readthedoc": 381, "entireti": 381, "shield": 381, "n_output": [381, 400, 410, 414, 415, 419, 424, 427, 446, 450, 463, 464, 465, 513, 515, 517, 518, 520, 523, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 592, 609, 611, 614, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 656, 657, 659, 660, 702, 703, 708, 725, 726, 728, 730, 731, 733, 734, 765, 768, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 828, 829, 830, 835, 836, 837, 838, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 873, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 904, 933, 962, 963, 978, 1011, 1014], "synonym": [381, 821, 822, 823, 829, 830, 831], "themat": 381, "alphanumer": [381, 569, 570, 572], "statistician": [381, 859], "prescrib": 381, "baggingclassifi": [381, 400, 537, 888, 1007, 1010, 1011, 1012, 1015, 1019, 1020], "estimator__max_depth": [381, 951], "improp": [381, 1011], "pairwise_kernel": [381, 403, 433, 624, 745, 845, 960, 1004, 1011], "distancemetr": [381, 399, 819, 820, 965, 1012, 1016, 1017, 1018], "di": [381, 393, 398, 512, 518, 645, 666, 667, 871, 1008, 1017], "vectori": [381, 1014], "noun": 381, "rout": [381, 1018], "fit_param": [381, 415, 419, 424, 427, 446, 513, 515, 517, 518, 520, 523, 524, 530, 548, 550, 551, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 616, 619, 620, 621, 622, 623, 777, 780, 781, 783, 791, 800, 801, 802, 803, 804, 806, 811, 812, 813, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871, 1011, 1014, 1015, 1016, 1018, 1020], "venu": [381, 985], "broadli": [381, 393], "consolid": [381, 382, 1004], "coo": [381, 534, 535, 673, 846, 894, 898, 899, 965, 1005], "lil": [381, 534, 535, 846, 894, 920, 965], "csgraph": [381, 1017], "absent": [381, 401, 734, 800], "densifi": [381, 398, 639, 640, 647, 649, 657, 658, 659, 878, 952, 1006], "lossili": 381, "unnorm": [381, 517, 959, 1010, 1011], "encompass": [381, 431, 437, 536, 537, 959], "is_regressor": 381, "get_n_split": [381, 778, 779, 782, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798], "elasticnetcv": [381, 627, 633, 641, 642, 643, 644, 662, 958, 1004, 1007, 1015, 1017, 1018], "estimatorcv": [381, 983], "loo": [381, 785, 1015], "type_of_target": [381, 846, 963, 1018, 1019], "hashabl": [381, 847, 850, 973], "labelencod": [381, 550, 853, 973, 1004, 1012, 1019], "canonic": 381, "xxx": 381, "everywher": 381, "multilabelbinar": [381, 808, 843, 852, 963, 988, 1007, 1009, 1010, 1012, 1013], "nonetheless": [381, 962], "wherein": 381, "amber": 381, "return_cov": [381, 548, 549, 592, 839], "test_idx": 381, "_idx": 381, "label1": 381, "label2": 381, "class_label": [381, 538, 542, 545, 639, 640, 647, 649, 655, 656, 657, 886, 888, 904, 977], "bincount": [381, 397, 538, 542, 545, 639, 640, 647, 649, 655, 656, 657, 878, 880, 883, 886, 888, 903, 904, 1011], "rebalanc": 381, "compute_class_weight": [381, 1007, 1018], "check_cv": [381, 1009], "obei": [381, 960], "triangl": [381, 398, 425, 428, 440, 680, 960, 965], "concurr": [381, 401, 928, 1016, 1018], "unset": [381, 1012], "get_scor": [381, 713, 1011], "check_scor": 381, "uppercas": [381, 1017], "unavail": [381, 639, 640, 922, 1011, 1017], "deadlock": 382, "meritocrat": 382, "consult": [382, 962], "unanim": 382, "outreach": 382, "brand": [382, 384], "social": [382, 393, 986], "emeritu": [382, 980], "recant": 382, "strateg": 382, "entiti": [382, 706, 736], "duti": 382, "resign": 382, "occasion": [382, 707, 1013], "escal": 382, "fallback": [382, 807, 808, 962], "hereaft": 382, "lazi": [382, 401, 976, 1008], "opinion": 382, "veto": 382, "appeal": 382, "revis": [382, 651], "insuffici": [383, 961, 996], "greatest": [384, 846, 1012], "afraid": 384, "64bit": [384, 1004], "miniconda": 384, "administr": 384, "venvpython": 384, "venvsourc": 384, "activatesourc": 384, "activatesklearn": 384, "activatepip": 384, "learnpip": 384, "learnpip3": 384, "learnconda": 384, "installedpython3": 384, "virtualenvpython3": 384, "installedpython": 384, "virtualenvpython": 384, "installedconda": 384, "environmentpython": 384, "dnf": 384, "pacman": 384, "raspberri": 384, "lock": [384, 386, 928, 930], "pypy3": [384, 1012], "v5": [384, 1012], "19137": 384, "py3": 384, "apk": 384, "bind": [384, 1004, 1011, 1012], "buster": 384, "fedora30": 384, "pkgsrc": 384, "py39": 384, "daal": 384, "daal4pi": 384, "intelpython": 384, "plugin": 384, "appdata": 384, "usernam": 384, "windowsapp": 384, "environmenterror": 384, "errno": 384, "pythonsoftwarefound": 384, "7_qbz5n2kfra8p0": 384, "localcach": 384, "python37": 384, "292": [384, 400, 715], "data_nam": 384, "australian": 384, "data_vers": 384, "lift": 384, "regedit": 384, "menu": 384, "hkey_local_machin": 384, "currentcontrolset": 384, "longpathsen": 384, "broken": [384, 397, 580, 581, 616, 701, 894, 962, 1007, 1011, 1012, 1013, 1015, 1018], "retrain": [387, 983, 1020], "inconsistentversionwarn": [387, 1020], "simplefilt": 387, "model_from_prevision_vers": 387, "original_sklearn_vers": [387, 557], "untrust": 387, "malici": 387, "unsupport": [387, 474, 1012, 1017], "inadvis": 387, "immut": 387, "snapshot": [387, 540, 541, 983], "portabl": 387, "alex": [387, 401, 977, 1004, 1007, 1012, 1014, 1015, 1016, 1018, 1019, 1020], "gaynor": 387, "sio": 387, "obj": [387, 548, 549, 922, 928], "get_untrusted_typ": 387, "unknown_typ": 387, "exchang": [387, 985], "markup": 387, "pmml": [387, 982], "onnx": [387, 982, 983], "xml": 387, "sklearn2pmml": [387, 982], "affero": 387, "gplv3": 387, "datastructur": [389, 1012, 1016], "namespac": 389, "array_api": 389, "xp": [389, 396, 854], "x_np": 389, "y_np": 389, "x_cu": 389, "y_cu": 389, "devic": [389, 397, 563], "array_api_dispatch": [389, 449, 876], "_estimator_with_converted_arrai": 389, "transfer": [389, 958, 983], "_array_api": 389, "cupy_to_ndarrai": 389, "_arrai": 389, "lda_np": 389, "submatrix": [390, 408, 432, 434], "unusu": [390, 968, 972, 1012], "submatric": 390, "bipartit": [390, 434, 492, 967], "subgraph": 390, "a_n": 390, "lceil": [390, 968], "log_2": [390, 544, 968], "rceil": [390, 968], "bmatrix": 390, "u_2": 390, "u_": [390, 463, 464, 465], "n_column": [390, 432, 434], "inderjit": [390, 434], "blockwis": [390, 958], "bistochast": [390, 432], "l_": [390, 592, 633, 721, 962], "k_": [390, 403, 597, 600, 602, 605, 754, 972], "u_1": 390, "v_1": 390, "v_2": 390, "v_": [390, 401], "kluger": [390, 432, 494], "yuval": [390, 432], "microarrai": [390, 432, 494, 609, 952], "cap": [390, 393, 735, 962, 1013], "hochreit": [390, 700], "hungarian": [390, 700], "bodenhof": [390, 700], "fabia": [390, 700], "acquisit": [390, 700], "wilk": 391, "f_i": 391, "train_set": 391, "test_set": 391, "disjoint": [391, 393, 394, 419, 685, 711, 735, 737, 959], "platt": [391, 419, 880, 881, 883, 884, 977], "_i": [391, 400, 953, 958, 962, 966, 977], "_j": [391, 953], "f_j": [391, 970], "precipit": 391, "wea": 391, "640": [391, 471, 487, 488, 564, 565, 951], "1990a": 391, "menon": 391, "ak": [391, 1018, 1019], "jiang": [391, 1008, 1015], "xj": 391, "vembu": 391, "ohno": 391, "machado": [391, 703], "703": [391, 494], "kull": [391, 962], "silva": [391, 669, 959, 1015, 1017], "filho": 391, "flach": [391, 962], "refurbish": 392, "rough": [392, 968, 990], "uniti": 392, "lipschitz": [392, 974], "usecas": 393, "mu_j": 393, "coher": 393, "elong": 393, "lloyd": [393, 425, 428, 430, 440, 1018, 1019], "distant": [393, 673, 690, 965], "sergei": [393, 1006, 1010, 1011, 1012, 1013, 1014], "vassilvitskii": [393, 428, 441], "eighteenth": 393, "siam": [393, 397, 433, 441, 443, 516, 522], "industri": [393, 982], "predetermin": [393, 959], "scullei": 393, "19th": 393, "exemplar": [393, 422, 435, 996], "sent": [393, 808], "leftarrow": [393, 966, 976], "foral": [393, 403, 594], "neq": [393, 962, 964, 972], "notin": 393, "hill": [393, 429, 442, 1014], "climb": [393, 429, 442], "maxima": [393, 403], "x_j": [393, 403, 595, 596, 600, 603, 604, 606, 953, 954, 958, 965, 977, 978], "dictat": 393, "solvabl": 393, "stella": [393, 433, 443], "yu": [393, 433, 443, 639, 958, 966, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "jianbo": [393, 433, 443, 672], "shi": [393, 433, 443, 672], "anil": [393, 433, 443], "daml": [393, 433, 443], "victor": [393, 433, 443, 1011, 1014], "minden": [393, 433, 443], "lex": [393, 433, 443], "ying": [393, 433, 443, 1018], "adjac": [393, 398, 433, 443, 566, 567, 616, 672, 676, 920, 959, 965, 996], "adjacency_matrix": 393, "ulrik": [393, 433, 443, 672], "von": [393, 433, 443, 672, 982, 1011, 1012], "luxburg": [393, 433, 443, 672], "jitendra": [393, 433, 443, 672], "malik": [393, 433, 443, 672], "walk": [393, 399, 1007], "marina": 393, "meila": 393, "ng": [393, 398, 672, 825, 966, 968, 1015], "jordan": [393, 398, 672, 775, 1014, 1015, 1018, 1019], "yair": [393, 672], "precondit": [393, 433, 443, 676, 978], "zhuzhunashvili": [393, 443], "forbid": [393, 400], "macroscop": 393, "occupi": [393, 962], "manhattan": [393, 423, 427, 431, 438, 680, 742, 751, 758, 759, 760, 826, 960, 965, 1008, 1013], "bisecting_strategi": [393, 425], "largest_clust": [393, 425], "biggest_inertia": [393, 425], "biggest": [393, 396, 398, 425], "steinbach": [393, 1019], "karypi": 393, "vipin": 393, "egin": 393, "minnesota": 393, "june": [393, 959, 1010], "weblog": 393, "abirami": 393, "mayilvahanan": 393, "emerg": [393, 986], "ijet": 393, "jian": 393, "xinyu": 393, "gou": 393, "baod": 393, "hebei": 393, "knee": 393, "triangular": [393, 444, 592, 959], "whichev": [393, 400, 525, 542, 543, 614, 631, 635, 637, 645, 663, 664, 678], "conjunct": [393, 575, 777, 780, 781, 783, 791, 800, 801, 802, 803, 806, 929, 952, 958, 1019], "extract_dbscan": 393, "radius_neighbors_graph": [393, 404, 426, 821, 822, 823, 825, 827, 829, 830, 831, 832, 965, 1008, 1013, 1016], "ester": [393, 404, 426], "kriegel": [393, 404, 426, 431, 438, 825, 968], "sander": [393, 404, 426, 431, 438, 825, 968, 1013, 1014], "xu": [393, 396, 404, 426, 976, 1017, 1018], "portland": [393, 404, 426], "aaai": [393, 404, 426, 814, 964], "226": [393, 404, 426], "revisit": [393, 404, 426], "schubert": [393, 404, 426, 431, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018], "tod": [393, 404, 426], "max_ep": [393, 431, 436, 438], "nearbi": [393, 965], "cluster_hierarchy_": [393, 431], "planar": 393, "peripheri": 393, "hdbscan": [393, 982], "wall": 393, "ankerst": [393, 431, 438], "mihael": [393, 431, 438], "marku": [393, 431, 438, 1012, 1014, 1015, 1016], "breunig": [393, 431, 438, 825, 968], "han": [393, 424, 431, 438, 1004, 1012, 1013, 1017], "j\u00f6rg": [393, 431, 438, 1012], "sigmod": [393, 431, 438, 825, 968], "cft": 393, "lossi": 393, "cf": [393, 396, 424, 681, 958, 972, 983], "subclust": [393, 424], "till": [393, 424, 768, 962], "temporarili": [393, 1009], "farthest": 393, "brc": [393, 424], "tian": [393, 424, 1009, 1010, 1011], "raghu": [393, 424], "ramakrishnan": [393, 424], "maron": [393, 424], "livni": [393, 424], "sfu": [393, 424], "coursecentr": [393, 424], "zhang96": [393, 424], "roberto": [393, 424], "perdisci": [393, 424], "jbirch": [393, 424], "java": [393, 424, 982], "satisfi": [393, 631, 635, 680, 698, 716, 717, 819, 820], "labels_pr": [393, 685, 686, 695, 696, 698, 711, 716, 717, 735, 737, 766, 773], "unadjust": [393, 962, 1016], "swap": [393, 398, 697, 716, 941, 942, 1004], "ri": [393, 686, 766], "c_2": [393, 959], "unord": [393, 400], "esp": [393, 1004], "hubert": [393, 686, 696, 766], "arabi": [393, 686, 696, 766], "steinlei": [393, 686], "psycholog": [393, 686, 697], "agreement": [393, 685, 697, 735, 737, 773, 962], "22504": 393, "10526": 393, "u_i": [393, 463, 464, 465, 735], "v_j": [393, 735, 967], "veb2009": 393, "a_i": 393, "b_j": 393, "yat2016": 393, "average_method": [393, 685, 737, 1012], "vinh": [393, 685], "veb2010": 393, "strehl": 393, "joydeep": 393, "1162": 393, "153244303321897735": 393, "epp": [393, 685], "bailei": [393, 685], "26th": [393, 706, 736, 962], "1553374": 393, "1553511": 393, "9781605585161": 393, "csail": [393, 647, 648, 657, 816], "volume11": 393, "vinh10a": 393, "algesheim": 393, "tesson": 393, "30750": 393, "1038": 393, "srep30750": 393, "rosenberg": [393, 698, 717, 773], "hirschberg": [393, 698, 717, 773], "b2011": 393, "homogeneity_completeness_v_measur": [393, 1013], "n_k": [393, 531], "n_c": [393, 640], "julia": [393, 698, 717, 773], "media": [393, 986], "hila": 393, "becker": [393, 986, 1007, 1016], "fowlkes_mallows_scor": [393, 962, 1010, 1012], "fmi": [393, 711], "fp": [393, 693, 699, 711, 762, 763, 764, 767, 962], "fn": [393, 693, 699, 711, 762, 763, 764, 767, 962, 963], "47140": 393, "fowkl": [393, 711], "1983": [393, 711, 859], "tandfonlin": 393, "01621459": 393, "10478008": 393, "kmeans_model": 393, "1987": [393, 588, 589, 770, 771], "calinski_harabasz_scor": [393, 1012], "dispers": [393, 691, 705, 958], "561": 393, "n_e": 393, "mathrm": [393, 395, 398, 402, 958, 978], "b_k": 393, "w_k": [393, 958], "c_q": 393, "n_q": 393, "c_e": 393, "cali\u0144ski": 393, "1974": [393, 401, 691], "dendrit": [393, 691], "davies_bouldin_scor": [393, 1012], "6619": 393, "bould": 393, "c_i": [393, 965], "c_j": [393, 967], "s_i": 393, "diamet": 393, "nonneg": [393, 398, 434, 519, 521, 528, 856], "s_j": 393, "max_": [393, 962], "1979": [393, 705, 749], "halkidi": 393, "batistaki": 393, "yanni": 393, "vazirgianni": 393, "michali": 393, "145": 393, "contingency_matrix": [393, 735, 1012], "pair_confusion_matrix": [393, 1016], "permit": [394, 448, 569, 570, 572, 777, 780, 781, 791, 801, 840, 841, 962, 963, 964, 1010], "clf__c": 394, "pca1": [394, 409], "svm1": 394, "77484909e": 394, "07058917e": 394, "pca2": [394, 409], "svm2": 394, "raw_target_regr": 394, "bypass": [394, 580, 627, 633, 886, 887, 888, 889], "check_invers": [394, 446, 843, 972, 1012, 1018, 1019], "caller": [394, 627, 628, 633, 641, 642, 643, 662, 868, 869, 930, 938, 939, 940, 1013], "linear_pca": 394, "make_union": [394, 838, 1007, 1011], "incorpor": [394, 400, 961, 982, 986], "unreli": 394, "citi": [394, 401, 447, 997], "london": [394, 401, 447], "sallisaw": [394, 447], "bow": 394, "watson": [394, 982], "moveabl": 394, "feast": 394, "grape": 394, "wrath": 394, "expert_r": 394, "user_r": 394, "city_categori": 394, "title_bow": 394, "city_london": 394, "city_pari": 394, "city_sallisaw": 394, "507": 394, "301": [394, 976], "ignored_new_col": 394, "estimator_html_repr": [394, 1015, 1016, 1017, 1018], "shrunk_covari": 395, "sigma_": [395, 625, 626, 1017], "wiesel": [395, 406, 456], "eldar": [395, 406, 456], "hero": [395, 406, 456], "5016": [395, 406, 456], "5029": [395, 406, 456], "_k": [395, 956, 958], "glasso": [395, 459], "biostatist": [395, 459], "uncommon": [395, 639, 878, 977], "downweight": [395, 517], "driessen": [395, 450, 455, 968], "fastmcd": [395, 450, 455], "raw_location_": [395, 450, 455], "raw_covariance_": [395, 450, 455], "multidimension": [396, 669, 671, 673, 675, 959, 965], "plsw2a": 396, "u_k": [396, 398], "v_k": [396, 398, 512, 518, 526, 527], "x_k": [396, 398, 956, 965], "y_k": 396, "xi_k": 396, "omega_k": [396, 956], "gamma_k": 396, "delta_k": 396, "nipal": [396, 464, 465], "x_rotations_": [396, 463, 464, 465], "y_rotations_": [396, 463, 464, 465], "ty": 396, "x_weights_": [396, 463, 464, 465, 466], "y_weights_": [396, 463, 464, 465, 466], "yv": 396, "tx": 396, "pls1": [396, 465], "pls2": [396, 465], "tx_k": [396, 956], "ty_k": 396, "ja": [396, 1011], "wegelin": 396, "methodolog": [397, 985], "academ": [397, 986], "commerci": [397, 986], "flowchart": [397, 990], "f1_macro": [397, 962, 1008], "custom_cv_2fold": 397, "custom_cv": 397, "9333": 397, "scorer1_nam": 397, "scorer2_nam": 397, "return_indic": [397, 802, 1020], "precision_macro": [397, 992], "recall_macro": [397, 962], "test_precision_macro": 397, "test_recall_macro": 397, "prec_macro": 397, "rec_macro": 397, "test_prec_macro": 397, "test_rec_macro": 397, "train_prec_macro": 397, "train_rec_macro": 397, "undistinguish": 397, "kf": [397, 782], "12883823": 397, "rkf": [397, 792], "weigh": [397, 1011], "caveat": [397, 403], "part3": 397, "spector": 397, "submodel": 397, "kohavi": 397, "jnt": 397, "bharat": [397, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "rao": [397, 1016, 1019], "fung": 397, "rosal": 397, "witten": 397, "leavepout": [397, 785, 992], "ss": 397, "gkf": 397, "sgkf": [397, 795], "suboptim": [397, 683, 769, 965, 1012], "leavepgroupsout": [397, 779, 992, 1010], "n_group": [397, 786, 992, 1010], "lpgo": [397, 786], "gss": [397, 779], "withheld": 397, "predefinedsplit": [397, 992, 1008], "test_fold": [397, 790], "train_indx": 397, "test_indx": 397, "autocorrel": 397, "superset": [397, 798, 962], "surplu": 397, "tscv": [397, 798], "inbuilt": 397, "some_integ": 397, "n_cv": [397, 419], "isotropi": 398, "alik": [398, 960], "halko": [398, 516, 522, 525, 914, 915], "szlam": [398, 914, 915], "disadvantag": [398, 403, 958, 959, 966, 976, 977, 978], "parsimoni": [398, 972], "jen09": 398, "mrl09": 398, "ell_1": [398, 958], "underset": [398, 958, 965, 978], "operatornam": [398, 721, 958, 962, 978], "fro": [398, 519, 521, 528, 674, 958], "gentli": 398, "spirit": 398, "mairal": [398, 512, 518], "bach": [398, 512, 517, 518, 519, 639, 958], "ponc": [398, 512, 518], "sapiro": [398, 512, 518], "jenatton": 398, "obozinski": 398, "scholkopf1997": 398, "bakir2003": 398, "smola": [398, 401, 516, 845, 972, 977], "klau": [398, 516, 845], "berlin": [398, 516, 677, 706, 736, 962], "heidelberg": [398, 516, 677, 706, 736, 962], "eigendecompos": 398, "eigensolv": [398, 433, 443, 516, 525, 676, 959], "eigsh": [398, 516, 1010, 1011], "lehoucq": 398, "sorensen": 398, "lsa": [398, 525, 1006], "synonymi": 398, "polysemi": 398, "lsi": 398, "sigma_k": [398, 956], "columnwis": 398, "sublinear": [398, 571, 572], "use_idf": [398, 401, 571, 572, 997], "textual": [398, 978, 1013], "man": [398, 571, 749, 814, 818, 960, 962, 964], "prabhakar": 398, "raghavan": [398, 571, 814, 818, 960, 962, 964], "hinrich": 398, "sch\u00fctze": [398, 571, 960, 962, 964], "transform_method": 398, "split_cod": 398, "dictionarylearn": [398, 518, 520, 521, 523, 524, 525, 526, 527, 1005, 1009, 1011, 1014, 1017, 1018, 1019, 1020], "overcomplet": 398, "mammalian": 398, "cortex": 398, "inpaint": 398, "h_i": [398, 967], "psi": 398, "sim": [398, 995], "wh_i": 398, "ww": 398, "superflu": 398, "psi_1": 398, "psi_2": 398, "psi_n": 398, "superimpos": 398, "plug": [398, 958, 986, 997], "wh": [398, 519, 521, 528], "hoyer": [398, 1007], "nndsvd": [398, 519, 521, 528, 1013, 1016], "nndsvdar": [398, 519, 521, 528, 1013], "elementwis": [398, 519, 521, 528], "_featur": [398, 519, 521, 528], "kl": [398, 959, 1012], "itakura": [398, 519, 521, 528, 1011], "saito": [398, 519, 521, 528, 1011], "w_new": 398, "forget_factor": [398, 519], "lee": [398, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1019], "seung": 398, "boutsidi": 398, "gallopoulo": 398, "cichocki": [398, 519, 521, 528], "phan": 398, "fevott": [398, 519, 521, 528], "idier": [398, 519, 521, 528], "lefevr": [398, 519], "corpora": 398, "hoffman": [398, 517, 1009, 1016], "unshad": 398, "beta_k": 398, "eta": [398, 517, 657, 658, 659, 966, 976, 1009], "topic_word_prior": [398, 517], "theta_d": 398, "doc_topic_prior": [398, 517], "z_": 398, "w_": [398, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 958, 962, 964, 967], "beta_": 398, "elbo": 398, "overset": [398, 969], "e_": 398, "blei": [398, 517, 775], "wang": [398, 517, 660, 670, 674, 706, 736, 958, 959, 962, 1007, 1009, 1010, 1011, 1012, 1016, 1019], "paislei": [398, 517], "kaiser": [398, 513], "talli": 399, "disproportion": 399, "41075698": 399, "41076071": 399, "rho_k": 399, "unsmooth": 399, "scott": [399, 824, 1004, 1005, 1010, 1012, 1013, 1014, 1019], "silvermann": 399, "propto": [399, 964], "2h": 399, "angular": [399, 673, 744], "contin": [399, 695, 972], "generaliz": 400, "flavour": 400, "b1999": 400, "b1996": 400, "h1998": 400, "lg2012": 400, "bootstrap_featur": [400, 536, 537], "geurt": [400, 536, 537, 538, 539, 546, 547, 888, 889], "346": [400, 482, 536, 537], "b1998": 400, "decoupl": [400, 964], "cancel": [400, 401, 743], "b2001": 400, "bear": [400, 982], "ernst": [400, 538, 539, 546, 547, 888, 889], "wehenkel": [400, 538, 539, 546, 547, 888, 889], "l2014": 400, "lieg": 400, "freund": [400, 534, 535], "fs1995": 400, "w_1": [400, 958, 966], "w_2": [400, 958, 966], "w_n": 400, "w_i": [400, 953, 962], "reappli": 400, "htf": 400, "zzrh2009": 400, "d1997": 400, "semin": 400, "friedman2001": 400, "shelf": 400, "ecologi": 400, "lightgbm": [400, 542, 543, 1013], "nr": 400, "f_m": 400, "h_m": 400, "f_": [400, 616, 962], "l_m": 400, "taylor": [400, 1012, 1014, 1015, 1018], "g_i": [400, 630], "absolute_error": [400, 539, 541, 543, 546, 652, 887, 889, 1017], "sum_m": 400, "softmax": [400, 542, 639, 640, 958, 965, 966], "superior": 400, "ineffici": [400, 425, 555, 807, 808, 965, 967], "r2007": 400, "friedman2002": 400, "1189": 400, "1232": 400, "367": [400, 1004], "tremend": 400, "8965": 400, "grower": [400, 542, 543], "missing": [400, 608, 609, 611, 1013], "comfort": 400, "fisher1958": 400, "loan": [400, 515, 958, 986], "nevertheless": 400, "mayer2022": 400, "mayer": [400, 1016, 1018], "bourassa": 400, "hoesli": 400, "scognamiglio": 400, "valuat": 400, "tianqi": 400, "guestrin": 400, "ke": [400, 1015, 1016], "boostingdecis": 400, "w2": 400, "w3": 400, "lr__c": 400, "rf__n_estim": 400, "w1992": 400, "knr": 400, "stack_method": [400, 548], "286": 400, "225": 400, "stack_method_": [400, 548, 549], "final_layer_rfr": 400, "final_layer_gbr": 400, "final_lay": 400, "multi_layer_regressor": 400, "wolpert": [400, 548, 549], "241": [400, 548, 549], "dubai": 401, "francisco": [401, 974], "movi": [401, 989], "movie_entri": 401, "thriller": [401, 850], "drama": 401, "000e": 401, "003e": 401, "011e": 401, "974e": 401, "unseen_featur": [401, 562], "speech": [401, 962], "chunker": 401, "pos_window": 401, "pos_vector": 401, "1x6": 401, "part_of_speech": 401, "token_featur": 401, "isupp": 401, "uppercase_initi": 401, "all_uppercas": 401, "raw_x": [401, 563], "pos_tagg": 401, "comprehens": [401, 738, 739, 960, 986, 1012], "murmurhash3": [401, 563, 570, 927], "weinberg": 401, "modulo": [401, 1015], "kilian": [401, 1019], "anirban": 401, "dasgupta": [401, 872, 974], "langford": [401, 669, 959], "josh": [401, 1011], "attenberg": 401, "multitask": [401, 963], "punctuat": [401, 569, 570, 572], "diminish": 401, "4x9": 401, "build_analyz": [401, 569, 570, 572, 1014], "interrog": 401, "bigram_vector": 401, "bi": 401, "cool": [401, 1004], "feature_index": 401, "him": 401, "constru": 401, "nqy18": 401, "smooth_idf": [401, 571, 572], "_n": [401, 962], "textbook": [401, 571], "6x3": 401, "81940995": 401, "57320793": 401, "47330339": 401, "88089948": 401, "58149261": 401, "81355169": 401, "term1": 401, "term2": 401, "term3": 401, "0986": [401, 843], "573": 401, "8473": 401, "8515": [401, 1011], "5243": 401, "85151335": 401, "52433293": 401, "55422893": 401, "83236428": 401, "63035731": 401, "77630514": 401, "idf_": [401, 571, 572, 1012], "western": 401, "europ": [401, 972], "koi8": 401, "russian": 401, "modern": [401, 449, 484, 571, 671, 675, 710, 876, 959, 983], "unicodedecodeerror": [401, 569, 570, 572], "told": 401, "silent": [401, 562, 835, 972, 1009, 1010, 1012, 1013, 1017, 1018], "chardet": 401, "chardetect": 401, "damag": 401, "sloppili": 401, "ftfy": 401, "mish": 401, "mash": 401, "text1": 401, "sei": 401, "mir": 401, "gegr": 401, "xc3": 401, "xbc": 401, "x9ft": 401, "mein": 401, "sauerkraut": 401, "text2": 401, "holdselig": 401, "sind": 401, "dein": 401, "ger": 401, "xfcche": 401, "text3": 401, "xff": 401, "xfea": 401, "x00u": 401, "x00f": 401, "x00": 401, "x00l": 401, "xfc": 401, "x00g": 401, "x00e": 401, "x00n": 401, "x00d": 401, "x00a": 401, "x00h": 401, "x00r": 401, "x00z": 401, "x00i": 401, "x00b": 401, "x00c": 401, "x00t": 401, "x00o": 401, "spolski": 401, "nnmf": [401, 998, 999, 1004], "phrase": 401, "misspel": 401, "rescu": 401, "resili": 401, "wprd": 401, "ngram_vector": 401, "char_wb": [401, 569, 570, 572], "rd": 401, "wo": 401, "wp": [401, 638, 652], "char": [401, 569, 570, 572, 1004], "jumpi": 401, "fox": 401, "1x4": 401, "umpi": 401, "1x5": 401, "mpy": 401, "fo": 401, "barrier": 401, "hv": 401, "4x10": 401, "discrep": [401, 997, 1008], "4x1048576": 401, "collid": 401, "ingest": 401, "spend": 401, "my_token": 401, "lowercas": [401, 409, 424, 425, 427, 428, 430, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 569, 570, 572, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 840, 845, 870, 871, 1017], "lucen": 401, "build_preprocessor": [401, 569, 570, 572, 1014], "whitespac": 401, "fanci": 401, "lemmat": 401, "nltk": [401, 981, 982], "word_token": 401, "wordnetlemmat": 401, "lemmatoken": 401, "wnl": 401, "british": 401, "spell": 401, "to_british": 401, "1or": 401, "bt": 401, "1er": 401, "ing": 401, "ation": 401, "1z": 401, "ogu": 401, "og": 401, "customvector": 401, "asian": 401, "one_imag": [401, 565], "fake": 401, "assert_array_equ": 401, "patchextractor": [401, 1020], "five_imag": 401, "variancethreshold": [402, 844, 952, 1007, 1014, 1017, 1020], "sel": 402, "selectfdr": [402, 573, 577, 579, 580, 581, 587, 1008, 1010, 1011, 1020], "selectfw": [402, 573, 576, 577, 580, 581, 587, 1020], "genericunivariateselect": [402, 576, 577, 579, 580, 581, 583, 1018, 1020], "r_regress": [402, 587, 1017, 1018], "nonparametr": [402, 588, 589], "bewar": 402, "importance_gett": [402, 574, 575, 578, 1016], "unimport": 402, "lsvc": 402, "baraniuk": 402, "isr": 402, "ist": 402, "utl": 402, "aguiar": 402, "cs_note": 402, "ferri": [402, 962], "versatil": [403, 977, 986], "optima": 403, "markov": [403, 592, 967, 982, 1004], "ppmv": 403, "0336": 403, "4ppm": 403, "27ppm": 403, "197ppm": 403, "nuisanc": 403, "logit": [403, 639, 640, 958], "one_vs_on": [403, 591, 963], "ingredi": 403, "duv2014": 403, "theta_l": 403, "x_bound": [403, 598], "operand": 403, "k1__": 403, "k2__": 403, "constant_valu": [403, 594, 598], "constant_value_bound": [403, 592, 594, 598], "k1__k1__constant_valu": 403, "value_typ": [403, 598], "n_element": [403, 598], "k2__length_scal": 403, "k1": [403, 602, 605], "k1__k1": 403, "k1__k1__constant_value_bound": 403, "k1__k2": 403, "k1__k2__length_scale_bound": 403, "k2": [403, 602, 605], "k2__length_scale_bound": 403, "69314718": [403, 593, 972], "30258509": 403, "interoper": [403, 980, 983, 999], "pairwisekernel": 403, "_valu": [403, 594], "_level": [403, 606], "k_1": [403, 602, 605], "k_2": [403, 602, 605], "__add__": [403, 605], "__mul___": 403, "__pow__": [403, 597], "2l": [403, 603], "bigg": [403, 600], "bessel": [403, 600], "rightarrow": [403, 600, 966], "quad": [403, 965, 976], "tfrac": 403, "3l": 403, "pp84": 403, "x_d": [403, 595], "inhomogen": [403, 595], "expon": [403, 597, 657, 658, 659, 789, 836, 837, 854, 951], "carl": [403, 591, 592, 595, 600, 603], "rasmussen": [403, 591, 592, 595, 600, 603], "duvenaud": [403, 603, 604], "cookbook": [403, 603, 604], "minkowski": [404, 426, 431, 438, 669, 680, 758, 759, 760, 819, 820, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 965, 1004, 1007, 1018, 1019], "metric_param": [404, 426, 431, 438, 669, 673, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 1008, 1011, 1018], "leaf_siz": [404, 426, 431, 438, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831], "kd_tree": [404, 426, 431, 438, 669, 670, 821, 822, 823, 824, 825, 827, 829, 830, 831, 965, 1017], "balltre": [404, 426, 431, 438, 669, 670, 680, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 959, 1004, 1006, 1008, 1012, 1017, 1020], "ckdtree": [404, 426, 1006], "inhibit": [404, 426], "core_sampl": 404, "n_core_sampl": [404, 426], "attract": [404, 426, 956, 965, 982], "fun": [405, 514, 986], "logcosh": [405, 514], "fun_arg": [405, 514], "w_init": [405, 514], "whiten_solv": [405, 514, 1019], "return_x_mean": 405, "compute_sourc": 405, "return_n_it": [405, 435, 440, 459, 526, 527, 627, 628, 633, 634, 641, 642, 643, 644, 662, 663, 664, 665, 666, 667, 668, 675, 1018], "cube": [405, 514], "my_g": [405, 514], "x_mean": 405, "AS": 405, "fortran": [405, 522, 627, 628, 633, 634, 641, 642, 643, 644, 646, 662, 665, 666, 667, 898, 899, 1004, 1007, 1008, 1012], "hyvarinen": [405, 514], "oja": [405, 514], "shrunk_cov": [406, 460, 462], "eq": [406, 456, 702, 703, 704], "subobject": [407, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 673, 775, 776, 777, 780, 781, 791, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889], "row_ind": [408, 432, 434], "intp": [408, 432, 434], "col_ind": [408, 432, 434], "get_submatrix": [408, 432, 434], "pca0": 409, "_n_features_out": 409, "class_name0": [409, 424, 425, 427, 428, 430, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 845, 870, 871], "class_name1": [409, 424, 425, 427, 428, 430, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 845, 870, 871], "class_name2": [409, 424, 425, 427, 428, 430, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 845, 870, 871], "feature_names_out": [409, 413, 424, 425, 427, 428, 430, 445, 463, 464, 465, 466, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 547, 548, 549, 550, 551, 562, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 608, 609, 610, 611, 616, 619, 620, 621, 622, 623, 669, 670, 823, 828, 831, 835, 838, 839, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 1018], "harsh": [410, 419, 450, 530, 531, 532, 534, 536, 538, 540, 542, 545, 548, 550, 591, 639, 647, 649, 655, 656, 657, 807, 808, 809, 810, 814, 815, 816, 817, 818, 821, 826, 829, 836, 873, 874, 878, 880, 883, 886, 888, 1014, 1016, 1019], "n_samples_fit": [414, 446, 463, 464, 465, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 669, 812, 813, 821, 822, 823, 825, 827, 829, 830, 831, 837, 879, 881, 884, 887, 889], "uniform_averag": [414, 446, 463, 464, 465, 535, 537, 539, 541, 543, 546, 549, 551, 592, 616, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 651, 653, 654, 659, 660, 702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 812, 813, 822, 830, 837, 879, 881, 884, 887, 889, 962, 1013], "n_features_new": [415, 424, 427, 513, 515, 517, 518, 520, 523, 524, 530, 548, 550, 551, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 609, 611, 616, 619, 620, 621, 622, 623, 828, 835, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 870, 871], "base_clf": 419, "calibrated_clf": 419, "927": 419, "x_calib": 419, "y_calib": 419, "prob_tru": [420, 421], "prob_pr": [420, 421], "ref_lin": 420, "alexandru": 421, "22nd": 421, "525": [421, 609, 952], "convergence_it": [422, 435], "hardcod": [422, 435, 1012], "affinity_matrix_": [422, 433, 672], "cluster_center_indic": [422, 435], "compute_full_tre": [423, 427, 1008], "compute_dist": [423, 427, 1016], "inferior": [423, 427, 1015], "n_leaves_": [423, 427], "n_connected_components_": [423, 427, 1013], "branching_factor": 424, "compute_label": [424, 430], "promot": [424, 689, 982, 1015, 1017], "redistribut": 424, "overwritten": [424, 513, 514, 515, 517, 522, 529, 588, 589, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 653, 655, 660, 662, 663, 664, 665, 667, 930, 932, 1017], "root_": 424, "_cfnode": 424, "cftree": 424, "dummy_leaf_": 424, "subcluster_labels_": 424, "centroids_": [424, 826], "copy_x": [425, 428, 440, 516, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 653, 655, 660, 662, 663, 664, 665, 666, 1006, 1012, 1013], "smart": [425, 440, 441, 571], "k_init": [425, 440], "sse": 425, "bisect_mean": 425, "pooling_func": [427, 1012], "xred": 427, "socg2006": 428, "min_bin_freq": [429, 442], "cluster_al": [429, 442], "get_bin_se": 429, "orphan": [429, 442, 1004], "reassignment_ratio": 430, "eec": [430, 622], "tuft": 430, "dscullei": 430, "fastkmean": 430, "97727273": 430, "43181818": 430, "cluster_method": 431, "predecessor_correct": [431, 437], "unprocess": [431, 569, 570, 572], "heap": 431, "braycurti": [431, 438, 680, 758, 759, 760, 965], "canberra": [431, 438, 680, 758, 759, 760, 965], "chebyshev": [431, 438, 680, 758, 759, 760, 965], "dice": [431, 438, 680, 758, 759, 760, 965], "kulsinski": [431, 438, 680, 758, 759, 760], "rogerstanimoto": [431, 438, 680, 758, 759, 760, 965], "russellrao": [431, 438, 680, 758, 759, 760, 965], "seuclidean": [431, 438, 680, 758, 759, 760, 826, 965, 1012, 1015, 1016], "sokalmichen": [431, 438, 680, 758, 759, 760, 965], "sokalsneath": [431, 438, 680, 758, 759, 760, 965], "yule": [431, 438, 758, 759, 760], "manhattan_dist": [431, 438, 669, 742, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833, 1004, 1014, 1019, 1020], "minkowski_dist": [431, 438, 669, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833], "l_p": [431, 438, 669, 821, 822, 823, 825, 827, 829, 830, 831, 832, 833], "upward": [431, 437], "successor": [431, 437, 978, 982], "predecessor": [431, 437, 438], "kdtree": [431, 438, 669, 670, 819, 821, 822, 823, 824, 825, 827, 829, 830, 831, 1006, 1008, 1012, 1016, 1017], "predecessor_": [431, 438], "erich": [431, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018], "gertz": 431, "lernen": 431, "wissen": 431, "daten": [431, 1012, 1013], "analysen": 431, "lwda": 431, "329": 431, "n_best": 432, "n_svd_vec": [432, 434], "mini_batch": [432, 434], "n_row_clust": [432, 434, 494], "n_column_clust": [432, 434, 494], "ncv": [432, 434], "n_oversampl": [432, 434, 522, 525, 915, 1018], "kernel_param": [433, 516, 620, 624], "precomputed_nearest_neighbor": [433, 672], "eigendecomposit": [433, 443, 654, 672, 676, 845], "dist_matrix": 433, "541": [433, 443], "csc_matrix": [433, 538, 539, 544, 545, 546, 547, 856, 886, 887, 888, 889, 952, 972, 978, 1009], "best_n_it": 440, "n_local_tri": 441, "n_seed": 442, "multigrid": 443, "multiscal": 443, "preliminari": 443, "heapq": 444, "topolog": [444, 982], "n_connected_compon": 444, "n_leav": [444, 886, 887, 888, 889], "untransform": [445, 448, 973], "transformers_": 445, "remaining_column": 445, "named_transformers_": 445, "sparse_output_": [445, 532], "output_indices_": [445, 1017], "datatyp": [445, 447, 1011, 1014], "norm1": 445, "norm2": 445, "text_preprocess": 445, "num_preprocess": 445, "x_t": [445, 608, 838], "sum_n_compon": [445, 838], "transformer_": 446, "predict_param": [446, 548, 549, 839, 1017], "y_hat": 446, "90453403": 447, "50755672": 447, "30151134": 447, "print_changed_onli": [449, 876, 1013, 1015, 1016], "pairwise_dist_chunk_s": [449, 876], "enable_cython_pairwise_dist": [449, 876], "cache_s": [449, 876, 880, 881, 882, 883, 884, 977], "get_config": [449, 761, 876, 929, 1019], "offset_": [450, 544, 658, 825, 882, 1012], "raw_support_": [450, 455], "dist_": [450, 455], "true_cov": [450, 452, 453], "7411": [450, 455, 1010], "2535": [450, 455], "3053": [450, 455], "0813": [450, 455], "0427": [450, 455], "correct_covari": [450, 455], "rvd": [450, 455], "covariance_correct": [450, 455], "comp_cov": [450, 451, 452, 453, 454, 455, 456, 457], "get_precis": [450, 451, 452, 453, 454, 455, 456, 457, 513, 515, 522], "is_inli": [450, 544, 825], "reweight_covari": [450, 455], "rvdriessen": [450, 455], "location_reweight": [450, 455], "covariance_reweight": [450, 455], "support_reweight": [450, 455], "negative_mahal_dist": 450, "7569": 451, "2818": 451, "3928": 451, "0622": [451, 457], "0193": [451, 457], "enet_tol": [452, 453, 459, 1009], "graphlasso": [452, 1009, 1012], "364": [452, 453, 1005], "034": 452, "038": [452, 453, 836], "n_refin": 453, "graphlassocv": [453, 1006, 1012], "dualiti": [453, 958], "094": 453, "block_siz": [454, 460, 461, 1008], "4406": 454, "1616": 454, "0595": 454, "0075": [454, 522], "rouseeuw1984": 455, "butlerdavi": 455, "butler": [455, 1007, 1015, 1016], "davi": [455, 705, 962, 1008], "jhun": 455, "1385": 455, "7533": [456, 1011], "2763": 456, "3964": 456, "7833": 456, "2431": 456, "3889": 456, "0195": 456, "7387": 457, "2536": 457, "4110": 457, "cov_init": 459, "return_cost": 459, "220446049250313e": [459, 631, 632, 635, 636, 637, 663, 664], "graph_lasso": [459, 1012], "dual_gap": [459, 627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "x_loadings_": [463, 464, 465], "y_loadings_": [463, 464, 465], "plssvd": [463, 464, 984, 999, 1016, 1018], "x_c": [463, 464, 466, 969], "y_c": [463, 464, 466], "y_reconstruct": [463, 464, 465], "x_scores_": [465, 1016], "y_scores_": [465, 1016], "y_transform": 466, "data_hom": [467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 1011], "sklearn_learn_data": [467, 480], "zero_bas": [468, 489, 490], "query_id": [468, 489, 490], "grok": 468, "qid": [468, 489, 490, 1005, 1010], "download_if_miss": [469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 1011], "ioerror": [469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "stopword": [470, 997], "target_column": [470, 471, 477], "percent": [473, 581, 975], "494021": 473, "slice_": [474, 475, 1019], "195": [474, 475], "unrestrict": 474, "2914": 475, "5748": 475, "n_retri": [477, 1018], "timeout": [477, 928, 1018], "412": [477, 958], "silenc": 477, "ith": [477, 754, 758, 815, 836, 837, 852, 853], "1592": 479, "1212": 479, "1624": 479, "620": 479, "data_filenam": [482, 486], "target_filenam": [482, 486], "container_path": 484, "load_cont": 484, "allowed_extens": 484, "container_fold": 484, "category_1_fold": 484, "file_1": 484, "file_2": 484, "file_42": 484, "category_2_fold": 484, "file_43": 484, "file_44": 484, "mod": 484, "image_nam": 487, "first_img_data": 488, "backup": [489, 1004], "instantan": 489, "mycach": 489, "get_data": 489, "mysvmlightfil": 489, "xn": 490, "yn": [490, 963, 964], "q1": 490, "qn": 490, "yi": [490, 964, 1008, 1012, 1013, 1016], "qi": [490, 1016], "triplet": 490, "minval": [492, 494], "maxval": [492, 494], "seventh": [492, 974], "274": 492, "return_cent": [493, 1015], "intric": 493, "basri": 494, "gerstein": 494, "genom": 494, "flip_i": 496, "interdepend": 496, "polytop": 496, "guyon": [496, 574, 575, 962], "madelon": 496, "1991": [497, 498, 499], "12000": 501, "effective_rank": [502, 505], "tail_strength": [502, 505], "bell": [502, 1012, 1014, 1016, 1017], "fat": [502, 505], "crawl": [502, 907], "return_ind": 504, "make_low_rank_matrix": 505, "4967": 505, "1382": 505, "6476": 505, "2341": 505, "4694": 505, "5425": 505, "7674": [505, 1011], "4017": 505, "data_transpos": [507, 1018, 1020], "norm_diag": 508, "make_spd_matrix": 508, "celeux": 509, "el": [509, 1017, 1019], "anbari": 509, "marin": 509, "frequentist": 509, "n_dim": [510, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "marsland": 511, "vuw": 511, "nz": 511, "marslast": 511, "ch6": 511, "code_init": [512, 526], "dict_init": [512, 518, 526, 527], "callback": [512, 518, 520, 526, 527, 828, 928, 983, 1020], "split_sign": [512, 518, 523], "transform_max_it": [512, 518, 519, 523, 1014], "_fro": [512, 518, 526, 527, 627, 628, 633, 641, 642, 643, 662], "lasso_cd": [512, 518, 523, 529], "invok": [512, 518, 520, 526, 527, 548, 550, 551, 800, 875, 1016], "error_": [512, 524], "minibatchsparsepca": [512, 514, 518, 521, 523, 524, 526, 527, 1004, 1005, 1015, 1017, 1018, 1019, 1020], "sierra": [512, 518], "icml09": [512, 518], "x_hat": [512, 518], "noise_variance_init": 513, "quartimax": [513, 1016], "loglike_": 513, "barber": 513, "bishop": [513, 515, 522, 721, 775, 958, 963, 977], "get_covari": [513, 515, 522], "unmixing_matrix": 514, "whitening_": 514, "kpca": [514, 515, 516, 998, 999, 1004], "unsaf": 515, "singular_values_": [515, 522, 525, 1011], "var_": [515, 817, 859, 1017], "574": [515, 522], "miketip": [515, 522], "mppca": [515, 522], "n_samples_seen_": [515, 848, 849, 859, 1012], "batch_size_": 515, "ross": [515, 588, 589, 978, 1018, 1019], "vision": [515, 738, 739, 954, 958, 960, 978, 982, 986, 1005], "toronto": [515, 625, 835], "dross": 515, "ivt": 515, "rosslimlinyang_ijcv": 515, "karhunen": 515, "loev": 515, "levi": [515, 1011], "lindenbaum": 515, "1371": 515, "1374": 515, "abstain": 515, "holub": 515, "opportun": [515, 976], "golub": [515, 817, 859], "x_spars": [515, 933, 936], "sigma2": [515, 522], "x_origin": [515, 520, 522, 524, 525, 611, 870, 871], "check_input": [515, 529, 627, 628, 633, 641, 642, 643, 662, 668, 886, 887, 888, 889, 1012], "remove_zero_eig": [516, 1006, 1013], "x_fit_": [516, 624], "eigenvalues_": [516, 1017], "eigenvectors_": [516, 1017], "dual_coef_": [516, 624, 880, 881, 882, 883, 884, 977, 1008], "x_transformed_fit_": 516, "nathan": [516, 1012, 1016, 1019], "gunnar": [516, 915], "tropp": [516, 522], "288": [516, 522], "vladimir": [516, 915, 958, 1014, 1018], "rokhlin": [516, 522, 915], "tygert": [516, 522, 915], "learning_decai": 517, "evaluate_everi": 517, "perp_tol": 517, "mean_change_tol": 517, "max_doc_update_it": 517, "kappa": [517, 697], "tau_0": 517, "pseudocount": [517, 1012], "exp_dirichlet_component_": 517, "n_batch_iter_": 517, "bound_": 517, "doc_topic_prior_": 517, "topic_word_prior_": 517, "franci": [517, 639, 958, 1010], "onlineldavb": 517, "chong": 517, "00360392": 517, "25499205": 517, "0036211": 517, "64236448": 517, "09541846": 517, "15297572": 517, "00362644": 517, "44412786": 517, "39568399": 517, "003586": 517, "vb": 517, "sub_sampl": 517, "doc_topic_distr": [517, 1011], "fresh_restart": 519, "fresh_restarts_max_it": 519, "_w": [519, 521, 528], "_ratio": [519, 521, 528], "_h": [519, 521, 528], "fresh": [519, 983, 1014], "reconstruction_err_": [519, 521], "andrzej": [519, 521, 528], "anh": [519, 521, 528], "ieic": [519, 521, 528], "721": [519, 521, 528], "waspa": 519, "ridge_alpha": [520, 524, 1011], "power_iteration_norm": [522, 525, 914, 915, 1018], "500x500": 522, "lu": [522, 525, 914, 915, 1010, 1011, 1012, 1013], "n_samples_": 522, "royal": [522, 608, 855, 866, 976], "methodologi": [522, 852, 952, 962, 986], "622": 522, "9924": 522, "30061": 522, "54980": 522, "00755": 522, "99244": 522, "ascontiguousarrai": 522, "sparse_encod": [523, 631, 632, 633, 634, 635, 636, 637, 644, 645, 646, 663, 664, 665, 666, 667, 1004, 1011, 1012, 1014, 1018], "u_init": 524, "v_init": 524, "9666": 524, "oversampl": [525, 1004], "indeterminaci": 525, "x_dens": 525, "0157": 525, "0512": 525, "0499": 525, "0479": 525, "0453": 525, "2102": 525, "2410": 525, "5981": 525, "5420": 525, "4486": 525, "3288": 525, "method_max_it": [526, 527, 1014], "dict_learning_onlin": [526, 1005, 1014, 1017, 1018], "return_cod": 527, "iter_offset": [527, 1018], "return_inner_stat": [527, 1018], "inner_stat": [527, 1018], "update_h": 528, "_n_compon": 528, "hal": [528, 639, 738, 739, 960], "copy_cov": 529, "orthogonal_mp": [529, 645, 646, 667, 958], "eigen": [530, 654, 672, 676, 956, 1010, 1013], "sum_k": [530, 978], "prior_k": 530, "c_k": 530, "priors_": [530, 531], "scalings_": [530, 531], "xbar_": 530, "reg_param": 531, "scaling_": 531, "colinear": 531, "rotations_": 531, "n_classes_": [532, 534, 536, 538, 540, 545, 591, 807, 808, 886, 888, 1005, 1014, 1016], "class_prior_": [532, 817], "n_outputs_": [532, 533, 538, 539, 545, 546, 547, 836, 837, 886, 887, 888, 889], "dummy_clf": 532, "constant_": 533, "dummy_regr": 533, "base_estimator_": [534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 591, 875, 1019], "983": [534, 708], "dok": [534, 535, 846, 1017], "staged_decision_funct": [534, 540, 542], "staged_scor": [534, 535], "7972": 535, "9771": 535, "estimators_samples_": [536, 537, 544, 1010, 1012, 1015], "estimators_features_": [536, 537, 544], "oob_decision_function_": [536, 538, 545], "oob_prediction_": [537, 539, 546], "8720": [537, 1012], "min_weight_fraction_leaf": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 978, 1007, 1010, 1011], "min_impurity_decreas": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889, 978, 1011], "shannon": [538, 545, 886, 888, 959, 978], "unlimit": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "n_t": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "n_t_r": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "right_impur": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "n_t_l": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "left_impur": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "balanced_subsampl": [538, 545, 1012], "subtre": [538, 539, 540, 541, 545, 546, 886, 887, 888, 889, 978], "unprun": [538, 539, 545, 546, 886, 887, 888, 889], "x_leav": [538, 539, 540, 541, 545, 546, 547, 886, 887, 888, 889], "n_nodes_ptr": [538, 539, 545, 546, 547], "friedman_ms": [539, 540, 541, 546, 887, 889], "extratreeregressor": [539, 544, 547, 888, 968, 1013, 1014, 1015, 1017, 1018, 1019], "2727": 539, "dummyestim": [540, 541], "eras": [540, 541, 627, 633, 639, 641, 643, 647, 648, 649, 657, 658, 659, 836, 837], "oob_scores_": [540, 541, 1020], "init_": [540, 541], "init_estim": [540, 541], "max_features_": [540, 541, 578, 886, 887, 888, 889, 1018], "_fit_stag": [540, 541], "crossentropi": 542, "deepest": [542, 543, 1015], "reserv": [542, 543, 986, 988], "no_interact": [542, 543, 1019], "do_early_stopping_": [542, 543], "n_trees_per_iteration_": [542, 543], "validation_score_": [542, 543], "is_categorical_": [542, 543], "n_trees_per_iter": 542, "longerr": 544, "max_samples_": 544, "fei": [544, 968], "ting": [544, 968, 1012, 1013], "ming": [544, 968, 1008, 1012, 1013, 1014, 1018], "zhou": [544, 620, 874, 968, 1012], "zhi": [544, 968], "hua": [544, 968], "icdm": [544, 968], "eighth": [544, 968], "tkdd": 544, "n_left": 544, "32987858": 546, "n_out": 547, "one_hot_encoder_": 547, "extratreeclassifi": [547, 889, 963, 1008, 1013, 1014, 1015, 1017, 1018, 1019], "moosmann": 547, "trigg": 547, "juri": 547, "random_tre": 547, "x_sparse_embed": 547, "randomtreesembedding_": 547, "final_estimator_": [548, 549], "named_estimators_": [548, 549, 550, 551, 1012, 1014], "named_estim": [548, 549, 550, 551], "parameter_nam": [548, 549, 550, 551], "new_valu": [548, 549, 550, 551], "linearsvr": [549, 884, 1008, 1010, 1015], "flatten_transform": [550, 1011], "le_": 550, "eclf1": 550, "array_equ": [550, 1011], "eclf2": 550, "eclf3": 550, "maj": 550, "probabilities_or_label": 550, "n_regressor": 551, "r1": 551, "r3": 551, "er": 551, "with_traceback": [552, 553, 554, 555, 556, 557, 558, 559], "__traceback__": [552, 553, 554, 555, 556, 557, 558, 559], "current_sklearn_vers": 557, "repr": [558, 1015, 1016, 1018], "linter": 560, "spam": [562, 690, 721, 814, 962, 964, 986], "feature_names_": 562, "xa": 562, "dict_typ": 562, "conform": [562, 609, 807, 808, 962, 982, 983, 1011, 1017], "1048576": [563, 570], "non_neg": [563, 1011], "eleph": 563, "bird": [563, 699, 734, 962], "patch_height": [564, 565, 568], "patch_width": [564, 565, 568], "pe": 564, "pe_tran": 564, "545706": 564, "image_height": [564, 565, 568], "image_width": [564, 565, 568], "n_channel": [564, 565, 568], "n_patch": [564, 565, 568], "272214": 565, "243": 565, "215": 565, "244": 565, "n_z": 566, "return_a": [566, 567, 1007], "_coo": [566, 567], "image_s": 568, "strip_acc": [569, 570, 572], "nfkd": [569, 570, 572, 1014], "unicodedata": [569, 570, 572], "regexp": [569, 570, 572], "min_n": [569, 570, 572, 1004], "max_n": [569, 570, 572, 1004], "fixed_vocabulary_": [569, 572], "stop_words_": [569, 572], "delattr": [569, 572, 1016], "vectorizer2": 569, "raw_docu": [569, 572], "get_stop_word": [569, 570, 572], "x_inv": [569, 572], "con": 570, "yates2011": 571, "baeza": [571, 710, 1007], "yate": [571, 710], "ribeiro": [571, 710, 1017], "neto": [571, 710], "addison": [571, 710], "weslei": [571, 710], "mrs2008": 571, "118": 571, "tfid": 571, "22314355": 571, "51082562": 571, "91629073": 571, "_check_stop_list": 572, "pvalu": [573, 576, 577, 579, 580, 581, 804], "k_best": [573, 875, 975], "fdr": 573, "fwe": 573, "iff": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 850], "retent": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "n_selected_featur": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "n_original_featur": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "attrgett": [574, 578], "barnhil": [574, 575], "vapnik": [574, 575], "422": [574, 575, 706, 736, 962], "n_subsets_of_featur": 575, "narrai": 575, "benjamini": [576, 1010, 1011], "hochberg": [576, 1010, 1011], "false_discovery_r": 576, "norm_ord": [578, 1011], "threshold_": [578, 1011], "3252302": 578, "83462377": 578, "49750423": 578, "55245": 578, "half_cal": 578, "half_selector": 578, "unspecifi": [580, 581, 779, 959], "_get_support_mask": 582, "n_features_to_select_": 583, "variances_": 584, "weed": 585, "p_valu": [585, 586, 587], "f_statist": [586, 587], "force_finit": [587, 590, 708, 765, 962, 1018], "pearson": [587, 590, 1017], "discrete_featur": [588, 589], "essenc": [588, 589, 723, 959, 962], "hardli": [588, 589], "kraskov": [588, 589], "stogbauer": [588, 589], "grassberg": [588, 589], "phy": [588, 589], "kozachenko": [588, 589], "leonenko": [588, 589], "probl": [588, 589], "peredachi": [588, 589], "correlation_coeffici": 590, "fmin_l_bfgs_b": [591, 592], "max_iter_predict": 591, "copy_x_train": [591, 592], "one_vs_rest": [591, 963], "compoundkernel": [591, 1018], "obj_func": [591, 592], "initial_theta": [591, 592], "theta_opt": [591, 592], "func_min": [591, 592], "_posterior_mod": 591, "log_marginal_likelihood_value_": [591, 592], "9866": [591, 600, 603], "83548752": 591, "03228706": 591, "13222543": 591, "79064206": 591, "06525643": 591, "14410151": 591, "clone_kernel": [591, 592, 1014], "n_kernel_param": [591, 592], "log_likelihood_gradi": [591, 592], "x_train_": 592, "y_train_": 592, "3680": [592, 595, 606], "592": [592, 595, 606, 969], "y_cov": 592, "n_samples_x": [592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 680, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761], "requires_vector_input": [593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "51292546": 593, "09861229": [593, 972], "n_samples_i": [593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 680, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761], "n_kernel": 593, "k_gradient": [593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606], "k_diag": [593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606], "hyperparameter_constant_valu": 594, "3696": 594, "hyperparameter_sigma_0": 595, "edward": [595, 600, 603, 1007, 1012, 1013, 1014, 1015, 1019], "hyperparameter_length_scal": [596, 600, 603, 604], "hyperparameter_period": 596, "0144": 596, "457": 596, "3894": 596, "3467": 596, "419": 597, "namedtupl": 598, "maxsiz": 598, "mat\u00e9rn": 600, "appr": 600, "8513": 600, "0368": 600, "1117": 600, "8086": [600, 1011], "0693": 600, "1220": 600, "gamma_bound": 601, "pairwise_kernels_kwarg": 601, "additive_chi2": [601, 619, 745, 754], "pairwise_kernel_funct": [601, 624, 754], "hyperparameter_gamma": 601, "9733": [601, 604], "8880": 601, "05663": 601, "05532": 601, "8676": [601, 1011], "07073": 601, "06165": 601, "__mul__": 602, "8354": [603, 1011], "03228": 603, "1322": 603, "7906": [603, 630], "0652": 603, "1441": 603, "hyperparameter_alpha": 604, "8881": 604, "0566": 604, "05518": 604, "8678": 604, "0707": 604, "0614": 604, "hyperparameter_noise_level": 606, "initial_strategi": 608, "imputation_ord": [608, 1014], "skip_complet": 608, "min_valu": [608, 1015, 1016], "max_valu": [608, 1015, 1016], "keep_empty_featur": [608, 609, 611, 952, 1019], "nullabl": [608, 609, 610, 611, 1015, 1019], "na": [608, 609, 610, 611, 749, 758, 896, 898, 899, 1014, 1015, 1018, 1019], "known_val": 608, "Nearness": 608, "arab": 608, "broadcast": 608, "missingind": [608, 609, 611, 952, 1012, 1013, 1014, 1018, 1020], "initial_imputer_": 608, "imputation_sequence_": 608, "feat_idx": 608, "neighbor_feat_idx": 608, "n_features_with_missing_": 608, "indicator_": [608, 609, 611], "knp": 608, "stef": [608, 952], "buuren": [608, 952], "karin": [608, 952], "groothui": [608, 952], "oudshoorn": [608, 952], "buck": 608, "1960": [608, 697], "imp_mean": [608, 611], "9584": [608, 1011], "nan_euclidean": [609, 742, 758], "_pairwise_cal": 609, "kwd": [609, 751, 754, 758, 761, 770, 771], "olga": [609, 952], "troyanskaya": [609, 952], "cantor": [609, 952], "gavin": [609, 952], "sherlock": [609, 952], "pat": [609, 952], "botstein": [609, 952], "russ": [609, 952], "altman": [609, 952], "bioinformat": [609, 952], "n_output_featur": 609, "error_on_new": 610, "features_": [610, 952], "n_missing_featur": 610, "x2_tr": 610, "n_features_with_miss": 610, "statistics_": 611, "n_features_missing_ind": 611, "x_imput": 611, "n_features_out": 611, "quadcontourset": 612, "quadmesh": 612, "feature_1": [612, 891], "feature_2": 612, "nicer": 612, "overwrit": [612, 988, 1004, 1015], "pd_result": 613, "target_idx": 613, "decil": [613, 1015], "pdp_lim": 613, "is_categor": 613, "nonexist": 613, "deciles_vlines_": 613, "vlines_": 613, "deciles_hlines_": 613, "bars_": 613, "heatmaps_": 613, "ice_lines_kw": 613, "pd_line_kw": 613, "contour_kw": 613, "disp1": 613, "disp2": 613, "pdp_line_kw": 613, "bar_kw": 613, "heatmap_kw": 613, "seq": 614, "n_values_feature_j": 614, "bre": [615, 978], "4666": 615, "2211": 615, "x_min_": 616, "x_max_": 616, "n_threshold": [616, 707, 762, 769], "stepwis": [616, 635, 636, 637, 663, 664, 958], "increasing_": 616, "isotonic_regress": [616, 1017], "secondari": [616, 1008], "leeuw": 616, "1977": 616, "nilotp": [616, 618], "chakravarti": [616, 618], "pava": 616, "hornik": 616, "mair": 616, "kruskal": [616, 671, 675, 959], "psychometrica": 616, "iso_reg": 616, "8628": 616, "7256": 616, "isotonicregression0": 616, "increasing_bool": 617, "fisher_transform": 617, "sample_step": 619, "sample_interv": 619, "sample_interval_": [619, 1020], "skewedchi2sampl": [619, 620, 621, 622, 954, 1011, 1018, 1019], "chi2_kernel": [619, 623, 738, 745, 960, 1005], "additive_chi2_kernel": [619, 739, 745, 954], "vedaldi": [619, 954], "zisserman": [619, 954, 962], "chi2sampl": 619, "9499": 619, "component_indices_": [620, 1017], "normalization_": 620, "additivechi2sampl": [620, 621, 622, 623, 738, 739, 954, 1018, 1020], "kernel_metr": [620, 621, 622, 623], "seeger": 620, "mahdavi": 620, "jin": [620, 1015, 1016], "data_transform": 620, "9987": 620, "fft": 621, "indexhash": 621, "bithash": 621, "indexhash_": 621, "bithash_": 621, "kitchen": [622, 954], "sink": [622, 954], "random_offset_": [622, 623], "random_weights_": [622, 623], "rahimi": [622, 954], "benjamin": [622, 1006, 1007, 1015, 1016, 1017, 1018, 1019], "recht": [622, 954], "berkelei": [622, 886, 887], "brecht": 622, "rah": 622, "rbf_featur": [622, 954], "skewed": [623, 1011], "secant": 623, "hyperbol": [623, 836, 837, 960, 966], "fuxin": 623, "catalin": 623, "ionescu": [623, 954, 1014], "cristian": 623, "sminchisescu": [623, 954], "chi2_featur": 623, "2c": [624, 633, 653, 654, 655, 656, 668, 954], "murphi": [624, 955], "493": [624, 878, 955], "alpha_1": [625, 626, 958], "alpha_2": [625, 626, 958], "lambda_1": [625, 626, 958], "lambda_2": [625, 626, 958], "threshold_lambda": 625, "x_offset_": [625, 626, 1016], "x_scale_": [625, 626, 1016], "mackai": [625, 626, 958], "ashra": 625, "salakhutdinov": [625, 828, 965], "lectur": [625, 954, 981], "utstat": 625, "rsalakhu": 625, "sta4273": 625, "lecture2": 625, "computed_scor": 626, "appendix": [626, 657, 958, 972], "wipf": [626, 958], "nagarajan": [626, 958], "2_2": [627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 653, 662, 663, 664, 665], "glmnet": [627, 628, 1004], "sparse_coef_": [627, 633, 641, 643, 1004], "dual_gap_": [627, 628, 633, 634, 641, 642, 643, 644, 1017], "max_j": [627, 633], "w_j": [627, 633, 962, 976], "ext": 627, "83816048": 627, "55968825": 627, "451": 627, "coef_init": [627, 628, 633, 634, 641, 642, 643, 644, 647, 649, 657, 658, 659, 662, 665], "mono": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "_21": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "sum_j": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 958, 962, 967], "alpha_min": [627, 628, 631, 633, 634, 635, 637, 641, 642, 643, 644, 662, 663, 664, 665], "alpha_max": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665], "ndim": [627, 628, 633, 634, 641, 642, 643, 644, 662, 665, 898, 899], "multitaskelasticnet": [627, 628, 633, 642, 643, 644, 662, 958, 1004, 1011, 1012, 1015, 1017], "multitaskelasticnetcv": [627, 628, 633, 641, 643, 644, 662, 958, 1007, 1014, 1015, 1017], "l1_ratio_": [628, 640, 642], "n_l1_ratio": [628, 640, 642, 1007], "199": [628, 731, 977], "unpen": [629, 650, 661, 958], "raphson": [629, 650, 661], "g_j": [629, 650, 661], "896": 629, "795": 629, "pg_i": 630, "scale_": [630, 848, 849, 857, 859, 868, 972, 1009], "outliers_": 630, "elvezio": [630, 958], "ronchetti": [630, 958], "concomit": [630, 958], "owen": [630, 1013, 1014], "hybrid": [630, 982], "statweb": [630, 663, 664], "hhu": [630, 1013], "284": 630, "7200": 630, "4923": 630, "1698": 630, "0106": 630, "9221": 630, "0226": 630, "fit_path": [631, 635, 636, 637, 663, 664], "jitter": [631, 635, 1015], "coef_path_": [631, 632, 635, 636, 958], "active_": [631, 632, 635, 636], "larscv": [631, 646, 663, 664, 1011, 1017], "1111": [631, 637], "max_n_alpha": [632, 636], "n_cv_alpha": [632, 636], "cv_alpha": [632, 636], "lassolar": [632, 633, 634, 636, 637, 644, 645, 646, 663, 664, 665, 958, 995, 1004, 1005, 1007, 1011, 1014, 1015, 1017], "9996": 632, "2961": 632, "3996": 632, "2_f": 633, "_11": 633, "4951": 634, "2_fro": [634, 643, 644, 665], "coef_path": [634, 644, 665], "46874778": [634, 644, 665], "2159048": [634, 644, 665], "4425765": [634, 644, 665], "23689075": [634, 644, 665], "coef_path_lar": [634, 644, 665], "coef_path_continu": [634, 644, 665], "interp1d": [634, 644, 665], "46915237": [634, 644, 665], "23668876": [634, 644, 665], "congruenc": [635, 636, 637, 663, 664], "fragil": 636, "3972": 636, "2222": 637, "rank_": 638, "singular_": 638, "maxent": [639, 640, 958], "primal": [639, 640, 658, 878, 879, 976, 977], "synthetic_feature_weight": [639, 640], "ciyou": 639, "byrd": 639, "jorg": [639, 1007, 1016, 1018], "noced": 639, "lui": [639, 1005, 1007, 1008, 1012], "iem": 639, "lbfgsb": 639, "schmidt": [639, 958, 1007], "le": [639, 847, 953, 958, 965, 973, 975, 1012, 1016, 1017], "roux": [639, 958, 975], "00860051": 639, "defazio": [639, 958], "lacost": [639, 958], "hsiang": [639, 1008], "fu": [639, 1008], "fang": [639, 1011, 1012], "lan": [639, 1019], "chih": [639, 1009], "jen": [639, 1012], "maxent_du": 639, "cs_": 640, "l1_ratios_": 640, "coefs_paths_": [640, 1014], "coefs_path": 640, "n_l1_ratios_": 640, "w_ij": 641, "eps_": [641, 643], "45663524": 641, "45612256": 641, "0872422": 641, "fro_2": [642, 644], "multitasklassocv": [642, 1007, 1014, 1015, 1017], "52875032": 642, "46958558": 642, "00166409": 642, "60809415": 643, "94592424": 643, "41888636": 643, "87382323": 643, "9994": 644, "5713": 644, "7971": 644, "9015": [644, 1012], "n_nonzero_coefs_": [645, 646], "orthogonal_mp_gram": [645, 646, 666, 1018], "mallat": [645, 666, 667, 958], "3397": [645, 666, 667], "3415": [645, 666, 667], "papier": [645, 666, 667], "mallatpursuit93": [645, 666, 667], "rubinstein": [645, 666, 667], "zibulevski": [645, 666, 667], "elad": [645, 666, 667], "technion": [645, 666, 667, 958], "ronrubin": [645, 666, 667, 958], "ksvd": [645, 666, 667, 958], "9991": [645, 646, 1012], "3854": [645, 646], "previous_loss": [647, 648, 649, 658], "pa": [647, 648, 875, 958, 962, 975], "preset": [647, 649, 657, 966], "t_": [647, 648, 649, 657, 658, 659, 836, 837, 976], "loss_function_": [647, 649, 657, 658], "volume7": [647, 648], "crammer06a": [647, 648], "crammer": [647, 648, 715, 958, 962, 977], "dekel": [647, 648, 958], "keshat": [647, 648, 958], "shalev": [647, 648, 958, 976], "shwartz": [647, 648, 958, 976], "singer": [647, 648, 715, 958, 962, 976, 977], "26642044": 647, "45070924": 647, "67251877": 647, "64185414": 647, "84127814": 647, "intercept_init": [647, 649, 657, 659], "y_all": [647, 649, 657, 807, 808, 836], "epsilon_insensit": [648, 657, 659, 879, 958, 976], "squared_epsilon_insensit": [648, 657, 659, 879, 958, 1010], "48736655": 648, "18818427": 648, "59122734": 648, "94731329": 648, "02306214": 648, "eta0": [649, 657, 658, 659, 976], "lossfunct": [649, 657, 658, 1013], "therein": 649, "939": [649, 992], "990": [650, 962], "088": [650, 970], "solver_opt": 651, "ipm": 651, "linprog": [651, 958], "is_data_valid": [652, 958], "is_model_valid": [652, 958], "max_trial": [652, 958], "max_skip": 652, "stop_n_inli": [652, 958], "stop_scor": [652, 958], "stop_prob": 652, "mad": [652, 1010], "costlier": 652, "n_trials_": 652, "n_skips_no_inliers_": 652, "n_skips_invalid_data_": 652, "n_skips_invalid_model_": 652, "sri": [652, 958, 1011, 1012], "bmva": 652, "bmvc": [652, 958], "paper355": 652, "9885": 652, "9417": 652, "15000": [653, 668, 836, 837], "gcv_mode": [654, 1006], "store_cv_valu": [654, 656, 1012, 1015], "alpha_per_target": [654, 1016], "cv_values_": [654, 656], "ridgeclassifiercv": [654, 655, 768, 962, 963, 1012, 1014, 1015, 1017, 1018], "5166": 654, "gcv": [654, 656], "9595": 655, "9630": 656, "power_t": [657, 658, 659, 836, 837, 976], "best_loss": [657, 659], "leon": [657, 658, 659, 1004], "bottou": [657, 658, 659, 966, 976], "pow": [657, 658, 659, 836, 837], "dl": 657, "775047": 657, "775151": 657, "justif": 657, "volume2": 657, "zhang02c": 657, "offset_init": 658, "unshifft": 658, "n_subsampl": [660, 904], "breakdown_": 660, "n_subpopulation_": 660, "xin": [660, 958, 1012], "dang": [660, 958], "hanxiang": [660, 958], "peng": [660, 958, 1010, 1011, 1012, 1014, 1016], "xueqin": [660, 958], "hepe": [660, 958], "olemiss": 660, "xdang": 660, "mtse": 660, "9884": 660, "5871": 660, "coeff": 661, "copy_gram": [663, 664, 667], "return_path": [663, 664, 666, 667], "lars_path_gram": [663, 958, 1013], "tib": [663, 664], "xgamma": 666, "norms_squar": 667, "copy_xi": 667, "return_intercept": [668, 1013], "linearoper": 668, "_preprocess_data": 668, "path_method": [669, 959], "neighbors_algorithm": [669, 670], "arnoldi": [669, 670, 674], "fw": 669, "warshal": [669, 959], "kernel_pca_": 669, "nbrs_": [669, 670], "dist_matrix_": 669, "tenenbaum": [669, 959], "reconstruction_error": 669, "frobenius_norm": 669, "d_fit": 669, "x_fit": 669, "n_queri": [669, 821, 822, 823, 825, 827, 829, 830, 831], "hessian_tol": [670, 674], "modified_tol": [670, 674], "reconstruction_error_": 670, "rowei": [670, 674, 828, 959, 965], "saul": [670, 674, 959, 1011, 1012, 1014], "2323": [670, 674, 959], "donoho": [670, 674, 959], "grime": [670, 674, 959], "natl": [670, 674, 959], "acad": [670, 674, 959], "5591": [670, 674, 959], "mlle": [670, 674, 959], "zha": [670, 674, 959], "shanghai": [670, 674, 959], "univ": [670, 674, 959], "406": [670, 674, 959], "immers": [671, 675], "nonmetr": [671, 675], "smacof": [671, 1019], "stress": [671, 675, 959, 1019], "stress_": 671, "dispar": [671, 675, 959], "dissimilarity_matrix_": 671, "psychometrika": [671, 675, 959], "1964": [671, 675, 855, 866, 959], "borg": [671, 675, 959], "groenen": [671, 675, 959], "affinity_matrix": 672, "n_neighbors_": [672, 825], "early_exagger": 673, "min_grad_norm": [673, 1010], "square_dist": [673, 1016], "der": [673, 677, 959, 1007, 1008, 1012], "maaten": [673, 677, 959], "bhtsne": [673, 1011], "opentsn": 673, "abort": 673, "pdist": [673, 680, 758, 761], "pairwise_distance_funct": [673, 677, 758, 761, 965], "barn": [673, 1009, 1011, 1014], "hut": [673, 1009, 1011, 1014], "nlogn": 673, "kl_divergence_": [673, 1011], "learning_rate_": [673, 837], "hinton": [673, 828, 835, 836, 837, 959, 965, 966, 967], "2579": 673, "2605": 673, "lvdmaaten": [673, 1011], "oct": [673, 749, 959, 965], "3221": [673, 959], "3245": [673, 959], "jmlr_2014": 673, "belkina": [673, 959], "ciccolella": [673, 959], "anno": [673, 959], "halpert": [673, 959], "spidlen": [673, 959], "snyder": [673, 959], "cappion": [673, 959], "kobak": [673, 1017], "beren": 673, "transcriptom": 673, "guttman": 675, "norm_laplacian": 676, "drop_first": 676, "nk": 677, "2n": [677, 954, 966], "3k": 677, "cosine_dist": [677, 742, 965, 1010], "jarkko": 677, "venna": 677, "samuel": [677, 986, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "kaski": 677, "icann": 677, "verlag": 677, "491": 677, "twelth": 677, "pmlr": 677, "im_": 678, "axesimag": 678, "text_": 678, "include_valu": 678, "values_format": [678, 1014], "im_kw": [678, 1018], "text_kw": [678, 1019], "get_metr": 680, "19615242": 680, "euclideandist": 680, "manhattandist": 680, "chebyshevdist": 680, "minkowskidist": [680, 1017], "wminkowski": [680, 826, 965, 1016, 1018], "wminkowskidist": 680, "seuclideandist": 680, "mahalanobisdist": 680, "haversinedist": 680, "arcsin": [680, 744], "hammingdist": 680, "n_unequ": 680, "n_tot": 680, "canberradist": 680, "braycurtisdist": 680, "abbrevi": 680, "ntt": 680, "ntf": 680, "nft": 680, "nff": 680, "nneq": 680, "jaccarddist": 680, "matchingdist": 680, "dicedist": 680, "kulsinskidist": [680, 1020], "rogerstanimotodist": 680, "russellraodist": 680, "sokalmichenerdist": 680, "sokalsneathdist": 680, "pyfunc": [680, 965], "pyfuncdist": 680, "dist_to_rdist": 680, "surrog": [680, 986], "cdist": [680, 1017], "rdist_to_dist": 680, "rdist": 680, "predictionrecalldisplai": [681, 962], "errors_lines_": 682, "with_error": 682, "scatter_": 682, "drop_intermedi": [683, 769], "balanced_accuracy_scor": [684, 767, 962, 1012], "imperfectli": [684, 714, 962], "label_tru": [685, 698, 717, 735, 737, 773], "upperlimit": 685, "nat": [685, 735, 737, 1018], "expected_ri": 686, "discord": 686, "hubert1985": 686, "1007": 686, "2fbf01908075": 686, "steinley2004": 686, "wk": 686, "rand_index": 686, "adjusted_rand_index": 686, "chacon": 686, "chac\u00f3n": 686, "rastrojo": 686, "balanced_accuraci": [689, 962, 1012], "brodersen": 689, "ong": 689, "stephan": [689, 1007, 1013, 1014, 1016], "buhmann": 689, "20th": 689, "3121": 689, "kelleh": [689, 962], "aoif": [689, 962], "arci": [689, 962], "y_true_categor": [690, 962], "calinski": [691, 1010], "harabasz": 691, "allow_non": 692, "thrown": [692, 1013, 1014], "tn": [693, 699, 962], "negative_class": 693, "zebra": 693, "output_dict": [694, 1012, 1016], "zero_divis": [694, 709, 710, 718, 763, 764, 767, 1014, 1016], "precision_recall_fscore_support": [694, 709, 710, 764, 767, 962, 1008, 1012, 1014], "multilabel_confusion_matrix": [694, 709, 710, 718, 764, 767, 962, 1013], "conting": [695, 696, 711, 735, 1010], "n_classes_tru": [695, 735], "n_classes_pr": [695, 735], "cohen": [697, 1012], "p_o": 697, "p_e": 697, "artstein": 697, "poesio": 697, "linguist": [697, 875, 975], "555": 697, "596": 697, "label_pr": [698, 716, 717, 735, 737, 773], "ant": [699, 734, 962], "a_row": 700, "a_column": 700, "b_row": 700, "b_column": 700, "tsoumaka": [701, 714, 720, 962], "kataki": [701, 714, 720, 962], "vlahava": [701, 720, 962], "handbook": [701, 720, 962], "667": [701, 720, 962], "685": [701, 720, 962], "raw_valu": [702, 703, 708, 725, 726, 728, 730, 731, 733, 765, 962, 1012, 1015], "wainwright": [702, 703, 704], "su": [702, 703, 704], "statlearnspars": [702, 703, 704], "764": [702, 962], "8125": 702, "57142857": 702, "d2": 703, "d2_absolute_error_scor": [703, 962, 1018], "koenker": [703, 958], "roger": [703, 1011, 1012, 1016], "jos\u00e9": [703, 1007, 1017], "772": 703, "045": 703, "487": 704, "630": 704, "bouldin": 705, "farther": 705, "log_bas": 706, "ignore_ti": [706, 736], "ndcg": [706, 736, 962, 1011], "ndcg_score": [706, 962, 1011, 1014, 1019], "sharper": 706, "discounted_cumulative_gain": 706, "dcg": [706, 736, 962, 1011], "jarvelin": [706, 736, 962], "kekalainen": [706, 736, 962], "colt": [706, 736, 962], "mcsherri": [706, 736, 962], "najork": [706, 736, 962], "european": [706, 736, 962], "groud": [706, 736], "true_relev": [706, 736], "propabl": 707, "imperfect": [708, 765, 962, 1006], "variance_weight": [708, 765, 962], "n_unique_label": [709, 710, 718, 763, 764, 767, 926], "fbeta_scor": [709, 722, 763, 962, 1006, 1007, 1008, 1009, 1014], "undefinedmetricwarn": [709, 710, 763, 764, 767, 1013], "66666667": [709, 762, 829, 972], "lend": [710, 986], "fowlk": [711, 1010], "mallow": [711, 1010], "get_scorer_nam": [712, 962, 1018], "forgiv": 714, "upperbound": 714, "grigorio": 714, "ioanni": 714, "wareh": 714, "septemb": [714, 962, 1004, 1007, 1010, 1012, 1017], "pred_decis": [715, 962, 1017], "disagre": [715, 969], "kobi": 715, "yoram": 715, "265": [715, 814, 818, 964], "AND": 715, "denero": 715, "gluster": 716, "v_measur": [716, 773], "6666": [718, 962, 1010], "5833": [718, 962], "lrap": [719, 962], "416": [719, 962], "21616": 721, "needs_proba": [722, 1013], "needs_threshold": [722, 962], "ftwo_scor": [722, 962], "mcc": [723, 962, 1018], "baldi": 723, "brunak": 723, "chauvin": 723, "andersen": [723, 1018], "nielsen": [723, 1012], "gorodkin": 723, "jurman": 723, "riccadonna": 723, "furlanello": 723, "cen": 723, "mape": [726, 962], "3273": 726, "5515": 726, "6198": 726, "112589990684262": 726, "0568": 727, "4260": [729, 732], "612": 730, "822": 730, "41666667": 730, "825": 730, "msle": [731, 962], "rmsle": 731, "00462428": 731, "08377444": 731, "samplewis": [734, 962], "mcm": [734, 962], "mcm_": 734, "multi_confus": 734, "normalized_discounted_cumulative_gain": 736, "dcg_score": [736, 962, 1011, 1014], "kernel_matrix": [738, 739, 746, 756], "marszalek": [738, 739, 960], "lazebnik": [738, 739, 960], "schmid": [738, 739, 960], "ouvert": [738, 739, 960], "00171412": [738, 739, 960], "cosine_similar": [740, 745, 960, 1009], "dense_output": [741, 747, 871, 916, 1012], "linear_kernel": [741, 745, 960, 1012], "haversine_dist": [742, 1013], "y_norm_squar": 743, "x_norm_squar": [743, 1009], "catastroph": [743, 983], "paired_dist": [743, 749, 758, 1008], "41421356": [743, 749, 965], "ezeiza": 744, "airport": 744, "bueno": 744, "argentina": 744, "gaull": 744, "franc": 744, "bsa": 744, "83333": 744, "5166646": 744, "0083899664": 744, "53844117956": 744, "bsas_in_radian": 744, "paris_in_radian": 744, "6371000": 744, "kilomet": 744, "11099": 744, "54035582": 744, "polynomial_kernel": [745, 960], "rbf_kernel": [745, 960, 1008], "laplacian_kernel": [745, 960, 1009], "sigmoid_kernel": [745, 960], "kernal_metr": 745, "sum_over_featur": [748, 1004, 1019], "componentwis": 748, "sq": 749, "dixon": [749, 1014, 1015], "cybernet": 749, "621": 749, "ieeexplor": 749, "4310090": 749, "filter_param": 754, "jth": [754, 758], "tanh": [757, 836, 837, 960, 977], "force_all_finit": [758, 896, 898, 899, 1015, 1018], "distance_metr": [758, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833], "metric_kwarg": [759, 760], "reduce_func": [761, 1015], "d_chunk": 761, "sought": 761, "neigh": [761, 821, 822, 823, 825, 827, 829, 830, 831], "gen": 761, "probas_pr": 762, "warn_for": 763, "shantanu": 763, "godbol": 763, "sunita": 763, "sarawagi": 763, "pig": 763, "948": [765, 962], "max_fpr": [768, 962, 1012], "provost": [768, 962], "ceder": [768, 962], "stern": [768, 962], "fawcett": [768, 769, 962], "874": [768, 769, 962], "generalis": [768, 962, 983], "multioutputclassifi": [768, 808, 810, 812, 962, 1011, 1013, 1014, 1015, 1016], "n_samples_a": [770, 771], "mean_prior": 775, "degrees_of_freedom_prior": 775, "verbose_interv": [775, 776], "wishart": 775, "emipr": 775, "precisions_": [775, 776], "precisions_cholesky_": [775, 776, 1018], "converged_": [775, 776], "lower_bound_": [775, 776, 1012], "weight_concentration_prior_": 775, "weight_concentration_": 775, "mean_precision_prior_": 775, "mean_precision_": 775, "mean_prior_": 775, "degrees_of_freedom_prior_": 775, "degrees_of_freedom_": 775, "covariance_prior_": 775, "hagai": 775, "attia": 775, "bgm": 775, "n_dimens": [775, 776], "log_prob": [775, 776], "weights_init": 776, "precisions_init": [776, 1018], "gm": 776, "pre_dispatch": [777, 783, 791, 800, 801, 802, 803, 806, 928, 1007], "error_scor": [777, 780, 781, 783, 791, 801, 802, 803, 806, 951, 1008, 1012, 1016, 1019], "explos": [777, 791, 800, 801, 802], "fitfailedwarn": [777, 780, 781, 783, 791, 801, 802, 803, 806], "param_kernel": [777, 791], "param_degre": 777, "split0_test_scor": [777, 791, 1010], "rank_t": 777, "split1_test_scor": [777, 791], "split0_train_scor": [777, 791, 1010], "split1_train_scor": [777, 791], "mean_train_scor": [777, 791, 1010], "std_train_scor": [777, 791, 1010], "split0_test_precis": [777, 791], "mean_train_precis": [777, 791], "best_estim": [777, 780, 781, 791], "scorer_": [777, 780, 781, 791], "n_splits_": [777, 780, 781, 791], "refit_time_": [777, 780, 781, 791, 1012], "multimetric_": [777, 780, 781, 791], "parametergrid": [777, 1006, 1012], "split2_test_scor": 777, "num_sampl": [777, 791, 1019], "stratif": [778, 779, 785, 786, 795, 796, 797, 933, 1013], "group_kfold": 778, "aggressive_elimin": [780, 781, 951], "r0": [780, 781], "replai": [780, 781], "n_remaining_candidates_": [780, 781], "n_candid": [780, 781, 951], "max_resources_": [780, 781], "min_resources_": [780, 781], "n_required_iterations_": [780, 781], "n_possible_iterations_": [780, 781], "exceed": [780, 781, 1010], "n_unique_tick": [783, 803], "n_tick": [783, 803, 806], "errorbar_": 783, "errorbarcontain": 783, "line2d": 783, "fill_between_": 783, "polycollect": 783, "exploit_incremental_learn": [783, 803], "log_scal": 783, "fill_between_kw": 783, "errorbar_kw": 783, "model_selectionkfold": 783, "predispatch": [783, 803, 806], "negat": [783, 962], "neg_": [783, 1010], "combinator": 787, "lpo": 787, "param_list": 789, "rounded_list": 789, "89856": 789, "923223": 789, "878964": 789, "038159": 789, "parametersampl": [791, 1006, 1012, 1016], "2652124": 792, "rskf": 793, "36851234": 793, "sizeabl": [794, 797], "sad": [795, 796], "sss": 797, "kth": 798, "checked_cv": 799, "3315057": [801, 802], "08022103": [801, 802], "03531816": [801, 802], "test_r2": 802, "test_auc": 802, "train_r2": 802, "train_auc": 802, "3635": 802, "3573": 802, "6114": 802, "28009951": 802, "3908844": 802, "22784907": 802, "train_sizes_ab": 803, "train_size_ab": 803, "cv_train_scor": 803, "cv_test_scor": 803, "permutation_scor": 804, "n_valu": [806, 1012], "pairwise_indices_": 807, "outputcodeclassifi": [807, 808, 1011, 1016, 1020], "label_binarizer_": 808, "multilabel_": [808, 1009], "onevsoneclassifi": [808, 809, 1005, 1007, 1008, 1010, 1011, 1013, 1016, 1018], "code_s": [809, 963], "code_book_": 809, "bakiri": [809, 963], "pict": [809, 963], "order_": [810, 813], "regressorchain": [810, 812, 1012, 1015, 1019], "jess": [810, 963, 1017], "pfahring": [810, 963], "geoff": [810, 963], "holm": [810, 963], "eib": [810, 963], "8387": 810, "9431": 810, "4576": 810, "8878": 810, "3684": 810, "2640": 810, "0321": 810, "9935": 810, "0625": 810, "y_decis": 810, "load_linnerud": [812, 1010, 1015], "force_alpha": [814, 815, 816, 818, 1019], "lidston": [814, 815, 816, 818, 964], "class_count_": [814, 815, 816, 817, 818], "class_log_prior_": [814, 815, 816, 818], "feature_count_": [814, 816, 818], "feature_log_prob_": [814, 815, 816, 818], "categoricalnb": [814, 816, 817, 818, 964, 1014, 1015, 1016, 1017, 1019], "renni": [814, 816, 964, 1012], "schuetz": [814, 818], "htmledit": [814, 818, 960], "mccallum": [814, 964], "nigam": [814, 964], "metsi": [814, 964], "androutsopoulo": [814, 964], "palioura": [814, 964], "cea": [814, 964], "predict_joint_log_proba": [814, 815, 816, 817, 818, 1019], "min_categori": [815, 1016], "n_categori": [815, 853, 972], "category_count_": 815, "n_categories_": 815, "mirror": [816, 951], "mahout": 816, "weka": 816, "feature_all_": 816, "shih": [816, 964], "teevan": [816, 964], "karger": [816, 964], "616": [816, 964, 972], "623": [816, 964], "jrenni": 816, "icml03": 816, "var_smooth": [817, 1012], "stan": 817, "levequ": [817, 859], "cstr": 817, "epsilon_": 817, "theta_": [817, 964], "clf_pf": 817, "valid_metr": [819, 820, 965], "random_sampl": [819, 820, 824], "19662693": [819, 820], "29473397": [819, 820], "tree_copi": [819, 820], "query_radiu": [819, 820], "count_onli": [819, 820], "kernel_dens": [819, 820], "94114649": [819, 820], "83281226": [819, 820], "2071716": [819, 820], "two_point_correl": [819, 820], "580": [819, 820], "get_arrai": [819, 820], "get_n_cal": [819, 820], "n_call": [819, 820], "get_tree_stat": [819, 820], "tree_stat": [819, 820], "breadth_first": [819, 820, 824], "return_log": [819, 820], "k_true": [819, 820], "k_ret": [819, 820], "breadth": [819, 820, 824, 986, 1006], "dualtre": [819, 820], "sort_result": [819, 820, 827, 829, 830, 831, 1016], "radii": [819, 820], "reset_n_cal": [819, 820], "effective_metric_": [821, 822, 823, 825, 827, 829, 830, 831, 965], "callbl": 821, "effective_metric_params_": [821, 822, 823, 825, 827, 829, 830, 831], "outputs_2d_": [821, 829, 1014], "nearest_neighbor_algorithm": [821, 829, 830], "333": 821, "n_index": [821, 822, 823, 825, 827, 829, 830], "neigh_dist": [821, 822, 823, 825, 827, 829, 830, 831], "neigh_ind": [821, 822, 823, 825, 827, 829, 830, 831], "nearest_neighbors_algorithm": [822, 827], "nearer": [823, 831, 965], "x_dist_graph": 823, "silverman": [824, 1019], "binarytre": [824, 1008, 1012, 1016], "bandwidth_": 824, "log_dens": 824, "52955942": 824, "51462041": 824, "60244657": 824, "logprob": 824, "negative_outlier_factor": 825, "9821": 825, "0370": 825, "3697": 825, "shifted_opposite_lof_scor": 825, "opposite_lof_scor": 825, "narasimhan": 826, "chu": 826, "shrunken": [826, 1004], "6567": 826, "6572": 826, "nbr": [827, 965], "neighborsclassifi": [827, 829, 830, 831, 1004], "n_features_a": 828, "n_features_b": 828, "goldberg": [828, 965], "neighbourhood": [828, 965], "ncanip": 828, "neighbourhood_components_analysi": 828, "961904": 828, "outlier_label": [829, 1014], "outlier_label_": 829, "33333333": [829, 972], "x_cluster": 831, "warn_when_not_sort": 834, "efficiencywarn": [834, 1019], "sml": [835, 967], "pcd": [835, 967], "sweep": 835, "gibb": [835, 967, 982], "intercept_hidden_": 835, "intercept_visible_": 835, "h_samples_": 835, "osindero": [835, 967], "teh": [835, 967], "1527": 835, "1554": 835, "absp": 835, "fastnc": 835, "tieleman": [835, 967], "v_new": 835, "pseudo_likelihood": 835, "relu": [836, 837], "beta_1": [836, 837], "beta_2": [836, 837], "max_fun": [836, 837, 1014], "n_layer": [836, 837], "neuron": [836, 837, 960, 966], "tan": [836, 837, 966, 1011], "rectifi": [836, 837], "kingma": [836, 837, 966], "diederik": [836, 837, 966, 1019], "jimmi": [836, 837, 966, 1010, 1012], "gradual": [836, 837, 976], "effective_learning_r": [836, 837], "best_loss_": [836, 837, 1019], "ot": 836, "best_validation_score_": [836, 837, 1019], "validation_scores_": [836, 837, 1019], "intercepts_": [836, 837, 966], "n_layers_": [836, 837], "out_activation_": [836, 837], "geoffrei": [836, 837, 966, 1015, 1016, 1017, 1018], "connectionist": [836, 837], "glorot": [836, 837], "xavier": [836, 837, 1012, 1013, 1014, 1016, 1017], "yoshua": [836, 837, 975], "feedforward": [836, 837], "kaim": [836, 837], "delv": [836, 837], "surpass": [836, 837], "imagenet": [836, 837], "log_y_prob": 836, "time_step": 837, "named_transform": [838, 1019], "transform_list": 838, "s__p": 839, "n_transformed_featur": 839, "predict_log_proba_param": 839, "y_log_proba": 839, "predict_proba_param": 839, "analyst": 842, "x_tr": [842, 848, 851, 852, 853, 857, 859, 861, 863, 864, 868, 869], "accept_spars": [843, 898, 899, 1011], "inv_kw_arg": 843, "pickleabl": [843, 1010], "6931": 843, "3862": 843, "onward": [844, 853, 1008], "n_bins_": 844, "int_": 844, "regener": 844, "xinv": 844, "tild": [845, 970, 972], "k_fit_rows_": 845, "k_fit_all_": 845, "1299": [845, 972], "1319": [845, 972], "n_samples1": 845, "n_samples2": 845, "k_new": 845, "neg_label": [846, 862], "y_type_": 846, "sparse_input_": 846, "tokyo": [847, 973], "amsterdam": [847, 973], "max_abs_": 848, "x_std": [849, 864, 972], "data_min_": [849, 1009], "data_max_": [849, 1009], "data_range_": [849, 1009], "unwieldi": 850, "fi": 850, "comedi": 850, "y_indic": 850, "yt": 850, "ands": 850, "feature_name_combin": [852, 1020], "categories_": [852, 853, 972, 1012, 1019], "unregular": [852, 874, 995, 1013], "intact": [852, 997], "infrequ": [852, 962, 1004, 1018, 1019], "infrequent_if_exist": [852, 972], "x_6": 852, "x_7": 852, "drop_idx_": [852, 1015, 1019], "drop_idx": 852, "gender_femal": 852, "gender_mal": 852, "group_1": 852, "group_2": 852, "group_3": 852, "drop_enc": [852, 972], "drop_binary_enc": 852, "custom_combin": 852, "custom_fnames_enc": 852, "x0_str_femal": 852, "x0_str_male": 852, "x1_int_1": 852, "x1_int_2": 852, "x1_int_3": 852, "oh": [852, 1014], "infrequent_sklearn": [852, 972], "n_encoded_featur": [852, 853], "bpo": 853, "43475": 853, "lenient": [853, 983], "min_degre": [854, 1017], "max_degre": [854, 1017], "powers_": 854, "n_output_features_": 854, "nystrom": [854, 1013, 1014], "featurewis": 855, "power_transform": [855, 867, 1012], "biometrika": [855, 866], "954": [855, 866], "959": [855, 866], "386": 855, "707": [855, 866], "ignore_implicit_zero": [856, 867], "landmark": [856, 867, 972], "n_quantiles_": 856, "quantiles_": [856, 972, 1014], "references_": 856, "robustscal": [856, 868, 952, 972, 1009, 1010, 1012, 1014, 1015, 1016, 1020], "with_cent": [857, 868], "with_scal": [857, 868], "unit_vari": [857, 868, 1016], "iqr": [857, 868], "interquartil": [857, 868], "quartil": 857, "75th": 857, "q_min": [857, 868], "q_max": [857, 868], "center_": 857, "robust_scal": [857, 867, 1012], "interquartile_rang": 857, "bspline": 858, "n_features_out_": 858, "with_std": [859, 869, 972, 1012], "n_samples_seen": 859, "5a": 859, "randal": [859, 1008, 1018], "242": [859, 1004], "ahead": 862, "return_norm": [865, 1011], "notimplementederror": [865, 1011], "compute_inverse_compon": [870, 871, 974], "inverse_components_": [870, 871, 974, 1018], "2759": [870, 871], "afor": [870, 871], "baserandomproject": [870, 871], "ping": [871, 974, 1010, 1011], "density_": 871, "gaussianrandomproject": [871, 974, 1005, 1018, 1020], "church": [871, 974], "kdd06_rp": 871, "cgi": 871, "uoa": 871, "gr": 871, "opta": 871, "0182": 871, "e2": [872, 958], "93lindenstrauss_lemma": 872, "sanjoi": [872, 974], "anupam": [872, 974, 1019], "gupta": [872, 974, 1011, 1012, 1015, 1016, 1017, 1018], "elementari": [872, 974], "11841": [872, 974], "1112658": [872, 974], "7894": [872, 974], "9868": [872, 974], "steadi": [873, 874], "baselabelpropag": [873, 1011], "xiaojin": 873, "zoubin": 873, "ghahramani": 873, "cmu": 873, "cald": 873, "carnegi": 873, "mellon": 873, "jerryzhu": 873, "label_prop_model": [873, 874], "clamp": [874, 975], "dengyong": 874, "bousquet": 874, "navin": 874, "lal": 874, "schoelkopf": 874, "termination_condition_": 875, "no_chang": 875, "all_label": 875, "33rd": [875, 975], "acl": [875, 975, 976], "stroudsburg": [875, 975], "196": [875, 975], "crammer_sing": [878, 963, 977, 1004], "seldom": 878, "readonli": [878, 879, 1017, 1019, 1020], "raw_coef_": [878, 879], "smo": [878, 879], "1693": 878, "unsur": 879, "522": 879, "class_weight_": [880, 881, 882, 883, 884, 1019], "n_sv": [880, 881, 882, 883, 884, 977, 1014], "fit_status_": [880, 881, 882, 883, 884], "n_support_": [880, 881, 882, 883, 884, 977, 1014], "proba_": [880, 883, 1015], "probb_": [880, 883, 1015], "shape_fit_": [880, 881, 882, 883, 884], "n_dimensions_of_x": [880, 881, 882, 883, 884], "7798": 882, "0547": 882, "0556": 882, "0561": 882, "7332": 882, "unshift": 882, "impract": 883, "tube": [884, 977], "_tree": [886, 887, 888, 889, 1005, 1007], "decision_tree_learn": [886, 887, 978], "olshen": [886, 887, 978], "wadsworth": [886, 887, 978], "belmont": [886, 887, 978], "cutler": [886, 887], "cc_home": [886, 887], "htm": [886, 887], "ccp_path": [886, 887, 888, 889], "get_depth": [886, 887, 888, 889, 1013], "get_n_leav": [886, 887, 888, 889, 1013], "extra_tre": [888, 889], "8947": 888, "decision_tre": [890, 891, 892, 978], "out_fil": [890, 978], "leaves_parallel": 890, "special_charact": [890, 978], "fontnam": [890, 1017], "helvetica": [890, 892], "graphviz": [890, 978], "postscript": 890, "tpng": 890, "paint": [890, 892], "dot_data": [890, 978], "digraph": 890, "show_weight": 891, "feature_0": 891, "unrepresent": 893, "keyerror": [893, 1014], "popitem": 893, "lifo": 893, "input_nam": [897, 899, 925, 1018], "accept_large_spars": [898, 899, 1012], "ensure_2d": [898, 899], "allow_nd": [898, 899], "ensure_min_sampl": [898, 899], "ensure_min_featur": [898, 899], "y_numer": 898, "bsr": [898, 899, 1017], "x_convert": 898, "y_convert": 898, "array_convert": 899, "target_typ": [902, 925], "min_val": 902, "max_val": 902, "include_boundari": [902, 1018], "y_org": 903, "class_weight_vect": 903, "king": 903, "zen": 903, "sample_weight_vect": 904, "parenthes": 905, "type_filt": 907, "generate_onli": [909, 1014], "checks_gener": 909, "test_check_estim": 910, "check_estimators_fit_returns_self": 910, "array_lik": 913, "logdet": 913, "slogdet": 913, "6375861597263857": 913, "flip_sign": 915, "svd_lapack_driv": 915, "gesdd": 915, "p5": 915, "transposit": 915, "gesvd": 915, "conquer": 915, "unitari": 915, "vh": 915, "dot_product": 916, "deweight": 917, "min_batch_s": 918, "n_pack": [918, 919], "path_length": 920, "sliceabl": 921, "truthi": 922, "helloifeven": 922, "_x_is_even": 922, "say_hello": 922, "ducktyp": [923, 1008], "temp_fold": 928, "max_nbyt": 928, "1m": 928, "mmap_mod": 928, "dispatch_next": 928, "dispatch_one_batch": 928, "unprotect": 928, "prefetch": 928, "print_progress": 928, "inner_max_num_thread": 930, "backend_param": 930, "register_parallel_backend": [930, 1012], "pyiodin": 930, "dask": [930, 983, 1012], "workload": [930, 982], "register_rai": 930, "backend_nam": 930, "oversubscript": [930, 1018], "threadpool": 930, "effective_n_job": 930, "tracking_select": 931, "reservoir_sampl": 931, "reservoir": 931, "make_default": 932, "parallelbackendbas": 932, "resampled_arrai": 933, "3x2": [933, 936], "shuffled_arrai": 936, "last_mean": 937, "last_var": 937, "last_n": 937, "return_sum_weight": 943, "sum_weight": 943, "all_or_ani": [946, 1014], "is_fit": 946, "__sklearn_is_fitted__": [946, 1017, 1018], "eg": 946, "substitut": [946, 983, 1010], "raise_except": 948, "array_sym": 948, "is_paramet": 950, "enclos": 951, "set_stat": 951, "bergstra": [951, 1004, 1005], "tournament": 951, "dispos": [951, 997], "n_resources_i": 951, "n_resources_0": 951, "n_candidates_i": 951, "n_candidates_0": 951, "r_0": 951, "n_resourc": 951, "983667": 951, "951958": 951, "947958": 951, "961009": 951, "955989": 951, "jamieson": 951, "talwalkar": 951, "desalvo": 951, "rostamizadeh": 951, "hyperband": 951, "bandit": 951, "multimetr": [951, 1014, 1019], "calibrated_forest": 951, "select__k": 951, "model__estimator__max_depth": 951, "imp": 952, "sophist": [952, 964], "14338": 952, "13286": 952, "15611": 952, "amelia": 952, "scientist": [952, 986], "roderick": 952, "rubin": 952, "1986": [952, 978], "ol2001": 952, "mask_missing_values_onli": 952, "mask_al": 952, "rr2007": 954, "2x_iy_i": 954, "vz2010": 954, "vvz2010": 954, "prod_i": 954, "ls2010": 954, "c_0": [954, 960], "tensorsketch": 954, "pp2013": 954, "wikic": 954, "ccf2002": 954, "mercer": 954, "langl": [954, 962, 976, 977], "rangl": [954, 962, 976, 977], "y_j": [954, 962, 964, 977], "obviat": 954, "dagm": 954, "vempati": 954, "jawahar": 954, "charikar": 954, "farach": 954, "colton": 954, "m2012": 955, "mu_k": 956, "cst": 956, "omega_": 956, "k0": 956, "h_l": 956, "extrema": 956, "honei": 956, "stork": 956, "dilemma": 957, "valid_scor": 957, "w_0": 958, "w_p": 958, "x_p": 958, "34545455": 958, "13636": [958, 1013], "rifkin": 958, "lippert": 958, "2n_": 958, "softw": 958, "kim": [958, 1012, 1013, 1014, 1018], "koh": [958, 986], "lustig": 958, "boyd": 958, "gorinevski": 958, "c_p": 958, "cherkasski": 958, "yunqian": 958, "1691": 958, "1714": 958, "ell_2": 958, "equiangular": 958, "weisberg": 958, "ell_0": [958, 962], "_coef": 958, "mp": 958, "ell_": 958, "posteriori": [958, 964], "radford": 958, "neal": [958, 1017], "50000013": 958, "49999993": 958, "lambda_i": 958, "srikantan": 958, "tristan": 958, "fletcher": [958, 1004, 1008], "nomenclatur": [958, 1010], "deliber": 958, "overparameter": 958, "ldot": [958, 962, 964, 966, 976], "w_l": 958, "min_w": 958, "iverson": 958, "broyden": 958, "goldfarb": 958, "shanno": 958, "shortcom": 958, "statsmodel": [958, 982], "aaron": [958, 1007, 1008, 1009, 1014], "simon": [958, 986, 1007, 1008, 1017, 1018, 1019], "93fletcher": 958, "93goldfarb": 958, "93shanno_algorithm": 958, "noah": 958, "multirespons": 958, "edm": 958, "agricultur": 958, "rainfal": 958, "bernouli": 958, "fraud": [958, 986], "cash": 958, "fraudul": [958, 986], "interrupt": 958, "drug": 958, "cure": 958, "entertain": 958, "mccullagh": 958, "nelder": 958, "boca": 958, "raton": 958, "chapman": 958, "hall": [958, 1011, 1015], "crc": 958, "31760": 958, "j\u00f8rgensen": 958, "monografia": 958, "matem\u00e1tica": 958, "2463": 958, "4337": 958, "7638": 958, "disappear": [958, 1004], "photogrammetr": 958, "hypothes": 958, "paradigm": 958, "cartographi": 958, "fischler": 958, "boll": 958, "sunglok": 958, "choi": 958, "taemin": 958, "wonpil": 958, "93sen_estim": 958, "binom": 958, "infeas": [958, 965, 967], "k\u00e4rkk\u00e4inen": 958, "\u00e4yr\u00e4m\u00f6": 958, "h_": 958, "oarc": 958, "dae": 958, "bassett": 958, "jr": 958, "econometrica": 958, "econometr": 958, "portnoi": 958, "hare": 958, "tortois": 958, "paraboloid": 958, "w_3": 958, "w_4": 958, "w_5": 958, "z_1": 958, "z_2": 958, "z_3": 958, "z_4": 958, "z_5": 958, "streamlin": 958, "gotten": [958, 972], "necess": [959, 965], "strife": 959, "mother": 959, "baloo": 959, "song": 959, "jungl": 959, "rubric": 959, "defici": [959, 976], "hlle": 959, "revolv": 959, "belkin": 959, "niyogi": 959, "1373": 959, "1396": 959, "molecul": 959, "countri": 959, "jk": 959, "delta_": 959, "c_1": 959, "disentangl": 959, "legitim": 959, "tricki": 959, "die": 959, "favour": [959, 961, 1013], "noisier": 959, "5415": 959, "circuit": 959, "brief": 960, "num_featur": [960, 1019], "quantum": 960, "nutshel": 960, "36787944": 960, "89483932": 960, "58364548": 960, "51341712": 960, "83822343": 960, "7768366": 960, "facil": 961, "equi": 961, "agnost": [961, 970], "cue": 961, "came": 961, "quicker": 961, "unpract": 961, "analogi": [961, 962], "top_k_accuraci": 962, "top_k_accuracy_scor": [962, 1016, 1018], "neg_brier_scor": [962, 1014], "f1_micro": [962, 1008], "f1_weight": [962, 1008], "f1_sampl": 962, "neg_log_loss": 962, "roc_auc_ovr": [962, 1014], "roc_auc_ovo": [962, 1014], "roc_auc_ovr_weight": [962, 1014], "roc_auc_ovo_weight": [962, 1014], "explained_variance_scor": [962, 1007, 1011, 1018], "max_error": [962, 1013], "neg_mean_squared_log_error": 962, "mean_squared_log_error": [962, 1011, 1017], "neg_median_absolute_error": 962, "neg_mean_poisson_devi": 962, "neg_mean_gamma_devi": 962, "mean_gamma_devi": [962, 1014], "d2_pinball_scor": [962, 1018], "d2_tweedie_scor": [962, 1017], "wrong_choic": 962, "_error": 962, "my_custom_loss_func": 962, "693": 962, "protocol": [962, 1007, 1020], "custom_scoring_funct": 962, "custom_scorer_modul": 962, "confusion_matrix_scor": 962, "test_tp": 962, "test_fn": 962, "untru": 962, "dividend": 962, "divisor": 962, "quotient": 962, "texttt": 962, "_class": 962, "youden": 962, "informed": 962, "mosley2013": 962, "kelleher2015": 962, "guyon2015": 962, "urbanowicz2015": 962, "escalant": 962, "escalera": 962, "maci\u00e0": [962, 1017, 1019], "saeed": 962, "statnikov": 962, "viega": 962, "chalearn": 962, "automl": [962, 982], "ijcnn": 962, "moslei": 962, "ijcv": 962, "urbanowicz": 962, "exstrac": 962, "evol": 962, "intel": [962, 982], "cohen_kappa_scor": [962, 1009, 1011], "4285714285714286": 962, "manning2008": 962, "everingham2010": 962, "davis2006": 962, "flach2015": 962, "everingham": 962, "gool": 962, "winn": 962, "pascal": 962, "voc": 962, "goadrich": 962, "y_l": 962, "_l": 962, "emptyset": 962, "f_beta": 962, "hinge_loss": [962, 1008, 1016, 1017], "ne": [962, 965], "1738": 962, "matthews_corrcoef": [962, 1004, 1010, 1011, 1018], "t_k": [962, 978], "ik": 962, "ki": 962, "kk": 962, "auroc": 962, "ht2001": 962, "fc2009": 962, "pd2000": 962, "f2006": 962, "f2001": 962, "inner_clf": 962, "c\u00e8sar": 962, "hernandez": 962, "orallo": 962, "modroiu": 962, "wikipediadet2017": 962, "martin1997": 962, "navratil2007": 962, "encyclopedia": 962, "utc": 962, "php": [962, 982], "detection_error_tradeoff": 962, "oldid": 962, "798982054": 962, "doddington": 962, "kamm": 962, "ordowski": 962, "przybocki": 962, "navractil": 962, "klusacek": 962, "acoust": 962, "icassp": 962, "honolulu": 962, "229": 962, "232": 962, "brier1950": 962, "p_i": [962, 965], "bella2012": 962, "flach2008": 962, "bella": 962, "hern\u00e1ndez": 962, "ram\u00edrez": 962, "quintana": 962, "khosrow": 962, "pour": 962, "hershei": 962, "edson": [962, 1009], "matsubara": 962, "dagstuhl": 962, "seminar": 962, "schloss": 962, "leibniz": 962, "zentrum": 962, "lr_": 962, "brenner": 962, "gefel": 962, "991": 962, "coverage_error": [962, 1008, 1018], "label_ranking_average_precision_scor": [962, 1008, 1012, 1013, 1019], "label_ranking_loss": [962, 1009], "grade": 962, "unalt": 962, "epsilon_i": 962, "7083": 962, "log_": 962, "growth": [962, 1009, 1010], "commod": 962, "mapd": 962, "2e6": 962, "2666": 962, "y_n": [962, 966, 976], "elicit": 962, "2500": 962, "mean_pinball_loss_95p": 962, "skill": 962, "mcfadden": 962, "d2_tweedie_score_15": 962, "d2_pinball_score_08": 962, "heteroschedast": 962, "homoschedast": 962, "pear": 963, "y_dens": 963, "y_spars": 963, "advoc": 963, "financ": 963, "f3": 963, "y3": 963, "multi_target_forest": 963, "75474165": 963, "147": 963, "03498585": 963, "03812219": 963, "12165031": 963, "12914884": 963, "46081961": 963, "8948621": 963, "44373091": 963, "88978285": 963, "62745778": 963, "02891072": 963, "48204257": 963, "03260883": 963, "34867495": 963, "52003279": 963, "92529176": 963, "25719016": 963, "84253": 963, "25193977": 963, "16443186": 963, "12274212": 963, "170388": 963, "80956739": 963, "16979946": 963, "72667194": 963, "50941682": 963, "50447799": 963, "37967282": 963, "15699552": 963, "72850319": 963, "prod_": 964, "downarrow": 964, "spite": 964, "famous": 964, "serious": 964, "flair": 964, "2_y": 964, "mu_i": 964, "sigma_i": 964, "theta_i": 964, "cnb": 964, "mnb": 964, "inventor": 964, "alpha_i": [964, 977], "cj": [964, 1007, 1008, 1009, 1010, 1011], "summat": [964, 966], "min_c": 964, "t_i": 964, "poorest": 964, "n_i": 964, "satellit": 965, "kdt": 965, "farawai": 965, "invent": 965, "orthotrop": 965, "bentlei": 965, "1975": 965, "omohundro": 965, "characteris": 965, "unaffect": 965, "amort": 965, "cache_path": 965, "gettempdir": 965, "unsort": [965, 1005, 1008, 1012], "5807": 965, "nca_pip": 965, "96190476": 965, "limits_": 965, "lx": 965, "x_m": 966, "leftmost": 966, "w_1x_1": 966, "w_2x_2": 966, "w_mx_m": 966, "backpropag": 966, "998": 966, "b_1": 966, "b_2": 966, "z_l": 966, "dfrac": [966, 972], "nabla": 966, "deduct": 966, "rumelhart": 966, "jiquan": 966, "ngiam": 966, "chuan": 966, "yifan": 966, "carolin": 966, "suen": 966, "backprop": [966, 976], "lecun": [966, 976], "orr": [966, 976], "strai": 967, "v_ih_j": 967, "b_iv_i": 967, "c_jh_j": 967, "h_j": 967, "v_i": 967, "b_i": 967, "sum_h": 967, "fantasi": 967, "particl": 967, "thoroughli": 967, "hereund": 968, "1443": 968, "1471": 968, "outlying": 968, "h2009": 969, "g2015": 969, "absurd": 969, "m2019": 969, "mc_clf": 969, "466": 969, "overlaid": 969, "obscur": 969, "cice": [969, 1018], "pd_": 969, "dx_c": 969, "footnot": [969, 982], "opaqu": 970, "x_val": 970, "y_val": 970, "356": 970, "probe": 970, "048": 970, "056": 970, "r_multi": 970, "1013": 970, "866": 970, "246": [970, 1004], "022": 970, "277": [970, 1006], "376": 970, "i_j": 970, "min_max_scal": [972, 1009], "x_train_minmax": 972, "x_test_minmax": 972, "max_abs_scal": 972, "x_train_maxab": 972, "x_test_maxab": 972, "excess": [972, 1011], "unintention": 972, "kernelcenter": [972, 1014, 1018], "scholkopf1998": 972, "1_": 972, "x_train_tran": 972, "x_test_tran": 972, "8pt": 972, "x_normal": 972, "firefox": 972, "chrome": 972, "safari": 972, "africa": 972, "dragon": 972, "lexicon": 972, "infant": 972, "kid": 972, "teen": 972, "adult": 972, "senior": [972, 986], "citizen": 972, "retbin": 972, "x_1x_2": 972, "x_1x_3": 972, "x_2x_3": 972, "x_1x_2x_3": 972, "rung": 972, "eiler": 972, "marx": 972, "perperogl": 972, "sauerbrei": 972, "abrahamowicz": 972, "bmc": 972, "methodol": 972, "38629436": 972, "sixteenth": 974, "uai": 974, "craig": [974, 1007, 1012], "boutili": 974, "mois\u00e9": 974, "goldszmidt": 974, "morgan": [974, 978, 980], "kaufmann": [974, 978, 1016], "ella": 974, "bingham": 974, "heikki": 974, "mannila": 974, "explic": 974, "3947": 974, "687": 974, "kenneth": [974, 1004, 1005, 1010, 1011, 1018, 1019], "12th": 974, "296": 974, "x_new_invers": 974, "x_new_again": 974, "delalleau": 975, "216": 975, "aistat": 975, "gatsbi": 975, "ucl": 975, "uk": [975, 997], "fullpap": 975, "xi_i": 976, "slack": 976, "varepsilon": [976, 977], "t_0": 976, "l\u00e9on": [976, 1018, 1019, 1020], "_init_t": 976, "basesgd": 976, "eta_0": 976, "_t": 976, "svmsgd": 976, "pegaso": 976, "srebro": 976, "tsuruoka": 976, "tsujii": 976, "ananiad": 976, "afnlp": 976, "lin_clf": 977, "grasp": [977, 983], "sv": 977, "builtin": 977, "qp": 977, "linear_svc": 977, "gram_train": 977, "gram_test": 977, "zeta": 977, "zeta_i": 977, "textrm": [977, 995], "q_": 977, "equiv": 977, "reparameter": 977, "wu": [977, 1008, 1016], "weng": 977, "1005": 977, "rong": 977, "aug": 977, "1871": 977, "1874": 977, "ofmulticlass": 977, "fitter": 978, "pariti": 978, "multiplex": 978, "export_graphviz": [978, 1009, 1011, 1017, 1019], "export_text": [978, 1013, 1020], "dumont": 978, "subwindow": 978, "beforehand": 978, "dichotomis": 978, "quinlan": 978, "multiwai": 978, "proprietari": 978, "ruleset": 978, "q_m": 978, "n_m": 978, "t_m": 978, "setminu": 978, "mk": 978, "_m": 978, "ge0": 978, "widetild": 978, "tradition": 978, "t_t": 978, "eff": 978, "predictive_analyt": 978, "troubleshoot": 980, "artwork": 980, "fund": 980, "spotifi": 980, "betawork": 980, "evernot": 980, "aweb": 980, "yhat": 980, "rangespan": 980, "birchbox": 980, "bestofmedia": 980, "phimeca": 980, "howaboutw": 980, "peerindex": 980, "datarobot": 980, "okcupid": 980, "love": [980, 997], "publica": 980, "machinali": 980, "solido": 980, "infonea": 980, "dataiku": 980, "otto": 980, "zopa": 980, "bnp": 980, "pariba": 980, "cardif": 980, "post1": [980, 1002], "foot": 981, "gear": 981, "neuroimag": [981, 986], "astronom": 981, "pycon": 981, "thirti": 981, "nyc": [981, 986], "sister": 982, "sklearn_panda": 982, "sklearn_xarrai": 982, "xarrai": 982, "autoviml": 982, "tpot": 982, "featuretool": 982, "tempor": [982, 983], "neuraxl": 982, "neat": [982, 1004], "checkpoint": 982, "funki": 982, "saver": 982, "evalml": 982, "neptun": 982, "mlop": 982, "sacr": 982, "dtreeviz": 982, "eli5": 982, "mlxtend": 982, "yellowbrick": 982, "deap": 982, "evolutionari": 982, "interchang": 982, "skop": [982, 999], "jpmml": 982, "porter": 982, "transpil": 982, "javascript": 982, "m2cgen": 982, "dart": 982, "haskel": 982, "rust": 982, "treelit": 982, "intelex": 982, "tslearn": 982, "sktime": 982, "hmmlearn": 982, "pomegran": 982, "crfsuit": 982, "nolearn": 982, "lasagn": 982, "theano": 982, "skorch": 982, "scikera": 982, "scikit_learn": 982, "feder": 982, "lego": 982, "subsembl": 982, "lightn": 982, "sdca": 982, "adagrad": 982, "svrg": 982, "nadaraya": 982, "gplearn": 982, "genet": 982, "multilearn": 982, "seglearn": 982, "libopf": 982, "fastfm": 982, "kmode": 982, "sphereclust": 982, "mise": 982, "giotto": 982, "tda": 982, "pymc": 982, "censor": 982, "lightfm": 982, "openrec": 982, "spotlight": 982, "gensim": 982, "nilearn": 982, "neuro": 982, "astroml": 982, "astronomi": 982, "msmbuilder": 982, "dissemin": 982, "chines": 982, "persian": 982, "spanish": 982, "korean": 982, "disclaim": 982, "promis": 983, "eleven": 983, "incept": 983, "scala": 983, "reinforc": 983, "era": 983, "7242": 983, "12147": 983, "5523": 983, "10733": 983, "13902": [983, 1014], "12800": 983, "12866": 983, "15550": 983, "5853": 983, "11805": 983, "15319": 983, "11977": 983, "12852": [983, 1014], "13911": [983, 1014], "amput": 983, "6284": 983, "beginn": 983, "priorit": [983, 1011], "4497": 983, "7646": 983, "6425": 983, "6424": 983, "8480": 983, "6231": 983, "8100": 983, "6599": 983, "6715": 983, "14582": 983, "3855": 983, "13227": 983, "6323": 983, "14180": [983, 1015], "9173": 983, "13146": [983, 1014], "8614": 983, "7608": 983, "5082": 983, "8243": 983, "searchgrid": 983, "6929": 983, "__array_function__": [983, 1014], "etl": [983, 986], "8370": 983, "6451": 983, "lifecycl": 983, "8157": 983, "7382": 983, "drift": 983, "11047": [983, 1014], "9326": 983, "slep011": 983, "1626": 983, "10463": 983, "id3": [984, 999], "cart": [984, 999], "touch": 985, "savetxt": 985, "cloneabl": 985, "datafil": 985, "printabl": 985, "indispens": 986, "stephen": [986, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017], "simmon": 986, "vp": 986, "athena": 986, "music": 986, "bernhardsson": 986, "pariet": [986, 1004], "lear": 986, "visag": 986, "fantast": 986, "startup": 986, "bitli": 986, "chartbeat": 986, "digg": [986, 1011], "poncho": 986, "gilad": 986, "lotan": 986, "chief": 986, "chat": 986, "bread": 986, "butter": 986, "chaumond": [986, 1012], "offic": 986, "ayzenshtat": [986, 1012], "undergrad": 986, "professor": 986, "hotel": 986, "destin": 986, "agent": 986, "melani": [986, 1011, 1012], "awesom": 986, "stuff": 986, "randomizedpca": [986, 1004, 1006, 1007, 1009, 1010, 1011], "boston": 986, "mdbecker": 986, "pydata_2013": 986, "ninja": 986, "thorough": 986, "notch": 986, "production": 986, "greg": [986, 1010, 1011, 1013, 1014], "lamp": 986, "founder": 986, "prototyp": 986, "jurgen": 986, "director": 986, "commerc": 986, "inventori": 986, "bertin": 986, "mahieux": 986, "invalu": 986, "vijai": [986, 1007], "traine": 986, "impress": 986, "traffic": 986, "tenur": 986, "matchmak": 986, "weitzenfeld": 986, "tweet": 986, "ferenc": 986, "huszar": 986, "shop": 986, "ourselv": 986, "jeremi": [986, 1009, 1010, 1011, 1012, 1015, 1016], "achin": 986, "ceo": 986, "marketplac": 986, "frid": [986, 1007], "radar": 986, "partnership": 986, "lebourgeoi": 986, "charron": [986, 1007, 1008, 1015, 1016, 1017], "cornerston": 986, "sheep": 986, "featureforg": 986, "rafael": [986, 1005, 1006, 1008, 1011], "carrascosa": [986, 1008], "law": 986, "semiconductor": 986, "fab": [986, 1014, 1015], "bleed": 986, "chip": 986, "smartphon": 986, "automobil": 986, "trent": [986, 1010], "mcconaghi": 986, "rapid": 986, "immens": 986, "thorsten": 986, "kranz": 986, "coma": 986, "dss": 986, "douetteau": 986, "b2c": 986, "retail": 986, "palladium": 986, "rammig": [986, 1010], "peer": 986, "billion": 986, "gbp": 986, "grate": 986, "vlasio": [986, 1011], "vasilei": [986, 1011], "petfood": 986, "cocoa": 986, "worldwid": 986, "toolset": 986, "equip": 986, "fitzk": 986, "sr": 986, "fondat": 986, "s\u00e9bastien": [986, 1010, 1012], "conort": 986, "salmon": 988, "nine": 988, "sentiment": 989, "cli": 989, "doctest_mod": 989, "hardest": 990, "tightli": 991, "knit": 991, "x_fold": 992, "array_split": 992, "y_fold": 992, "934": 992, "train_indic": 992, "test_indic": 992, "963": 992, "922": 992, "930": 992, "96388889": 992, "92222222": 992, "9637883": 992, "93036212": 992, "96578289": 992, "92708922": 992, "96681476": 992, "96362897": 992, "93192644": 992, "0077": 992, "943": 992, "00375": 992, "lfw_": 993, "_lfw": 993, "gerhard_schroed": 993, "donald_rumsfeld": 993, "tony_blair": 993, "colin_powel": 993, "george_w_bush": 993, "estimated_param_": 994, "iris_x": 995, "iris_i": 995, "iris_x_train": 995, "iris_y_train": 995, "iris_x_test": 995, "iris_y_test": 995, "pave": 995, "paltri": 995, "exabyt": 995, "30349955": 995, "237": 995, "63931533": 995, "510": 995, "53060544": 995, "73698041": 995, "13170937": 995, "81458798": 995, "84845219": 995, "60648906": 995, "51961675": 995, "09517222": 995, "5854": 995, "5855": 995, "occam": 995, "razor": 995, "best_alpha": [995, 1004], "025118864315095794": 995, "508": 995, "knew": 996, "taxonomist": 996, "face_compress": 996, "x_approx": 996, "images_approx": 996, "18565811e": 996, "19346747e": 996, "43026679e": 996, "text_analyt": 997, "skeleton": [997, 1007], "sklearn_tut_workspac": 997, "cp": 997, "work_directori": 997, "tutorial_hom": 997, "fetch_data": 997, "lang": 997, "newsweed": 997, "netnew": 997, "bydat": 997, "twenty_train": 997, "holder": 997, "2257": 997, "sd345": 997, "collier": 997, "laserjet": 997, "iii": [997, 1018], "hampton": 997, "4gb": 997, "count_vect": 997, "x_train_count": 997, "35788": 997, "4690": 997, "downscal": 997, "tf_transform": 997, "x_train_tf": 997, "tfidf_transform": 997, "x_train_tfidf": 997, "na\u00efv": 997, "docs_new": 997, "opengl": 997, "x_new_count": 997, "x_new_tfidf": 997, "text_clf": 997, "twenty_test": 997, "docs_test": 997, "8348": 997, "9101": [997, 1012], "1502": 997, "380": 997, "tfidf__use_idf": 997, "searcher": 997, "gs_clf": 997, "workspac": 997, "fear": 997, "fire": 997, "exercise_xx_script": 997, "arg1": 997, "arg2": 997, "arg3": 997, "mortem": 997, "charngramanalyz": 997, "exercise_01_language_train_model": 997, "exercise_02_senti": 997, "movie_review": 997, "txt_sentoken": 997, "cpickl": 997, "polar": 997, "subtleti": 999, "subscrib": 1002, "gzip": 1004, "bzip2": 1004, "decompress": 1004, "auc_scor": [1004, 1006], "kernc": [1004, 1018, 1019], "led": 1004, "probabilisticpca": [1004, 1007], "hmm": [1004, 1005, 1006, 1007, 1009], "gaussianhmm": 1004, "multinomialhmm": 1004, "n_gram_rang": 1004, "267": 1004, "alexi": [1004, 1007, 1008, 1011], "mignon": [1004, 1007, 1008, 1011], "subhodeep": [1004, 1005, 1006], "moitra": [1004, 1005, 1006], "yannick": [1004, 1006], "schwartz": [1004, 1006, 1018], "duckworth": 1004, "benediktsson": [1004, 1005, 1006], "marko": [1004, 1013, 1014], "burjek": 1004, "pinto": 1004, "abraham": [1004, 1005, 1010, 1014], "hoenig": 1004, "flyingimmidev": 1004, "francoi": [1004, 1017], "savard": 1004, "hann": 1004, "schulz": 1004, "welind": 1004, "companioni": 1004, "brandyn": 1004, "bussonni": [1004, 1016], "matthia": [1004, 1006, 1007, 1010, 1011, 1012, 1016, 1019], "pierr": [1004, 1012, 1013, 1015, 1017, 1019], "astolfi": 1004, "huiginn": 1004, "goodman": [1004, 1009], "ludwig": 1004, "schwardt": 1004, "hervieu": 1004, "sergio": [1004, 1006, 1007, 1016, 1019], "medina": [1004, 1006], "sheerman": 1004, "buguen": 1004, "seq_dataset": [1004, 1014], "weight_vector": [1004, 1014], "reuben": 1004, "costin": 1004, "_basehmm": 1004, "neighborsregressor": 1004, "gone": [1004, 1005], "vbgmm": [1004, 1008, 1010], "_pvalu": 1004, "charset": [1004, 1006], "test_fract": 1004, "train_fract": 1004, "marek": 1004, "fcostin": 1004, "adrien": 1004, "gaidon": 1004, "joona": 1004, "sillanp\u00e4\u00e4": 1004, "mccarthi": [1004, 1012], "roi": [1004, 1018], "hyunjin": 1004, "ibay": 1004, "scheidegg": 1004, "clair": 1004, "revillet": 1004, "conrad": [1004, 1005, 1019], "meng": [1004, 1005, 1008, 1010, 1011], "xinfan": [1004, 1005, 1008], "udi": 1004, "weinsberg": 1004, "janso": 1004, "palafox": 1004, "overwrite_": 1004, "copy_": 1004, "buffer_mb": 1004, "sparse_encode_parallel": 1004, "accident": [1004, 1008, 1013], "basedictionarylearn": 1004, "sparsecodingmixin": 1004, "fast_svd": 1004, "arnold": [1004, 1005], "bala": [1004, 1007], "subrahmanyam": [1004, 1007], "varanasi": [1004, 1007], "draxu": 1004, "eickenberg": [1004, 1006, 1007, 1008, 1009], "bogdan": 1004, "trach": 1004, "f\u00e9lix": [1004, 1006, 1007, 1008, 1012], "antoin": [1004, 1006, 1007, 1008, 1011], "fortin": [1004, 1006, 1007, 1008], "manuel": [1004, 1008, 1012, 1013, 1016, 1017], "caicedo": 1004, "carvaj": 1004, "tiziano": 1004, "zito": [1004, 1017], "jean": [1004, 1007, 1008, 1009, 1010, 1011, 1017], "kossaifi": [1004, 1008, 1009], "thumbnail": 1004, "univariate_select": 1004, "mldata": [1004, 1012], "pietro": [1004, 1007], "berk": 1004, "macosx": 1004, "xarg": 1004, "bscikit": 1004, "cross_val": 1004, "bcross_val": 1004, "lurk": 1004, "l1_distanc": 1004, "387": 1004, "andi": [1004, 1011], "amit": [1004, 1018, 1019], "salvator": [1004, 1018, 1019], "masecchia": 1004, "schut": 1004, "metaireau": [1004, 1007], "bryan": [1004, 1007, 1013, 1014, 1017], "silverthorn": 1004, "minwoo": 1004, "luca": [1004, 1014, 1015, 1016, 1017], "wiman": 1004, "schl\u00fcter": [1004, 1012], "malet": 1004, "miott": [1004, 1007], "feth": 1004, "arezki": 1004, "yamin": 1004, "notes_neighbor": 1004, "netbsd": 1004, "kamel": 1004, "ibn": 1004, "hassen": 1004, "derouich": 1004, "virgilefritsch": 1004, "example_gaussian_process_plot_gp_regress": 1004, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1004, "tast": 1004, "2x": 1004, "10x": 1004, "200x": 1004, "ann": [1004, 1016, 1018], "laur": 1004, "fouqu": 1004, "ronan": [1004, 1007, 1012], "amicel": [1004, 1007], "osendorf": [1004, 1005], "gmmhmm": [1004, 1005], "latex": 1004, "mlcomp": 1004, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1004, "pybrain": 1004, "262": 1004, "rokem": [1004, 1010], "100x": [1004, 1007], "obsolet": 1004, "attrselect": 1004, "unmaintain": 1004, "lite": 1004, "filo": [1004, 1007], "mailhot": 1004, "huard": 1004, "dave": [1004, 1011, 1012, 1018], "morril": 1004, "schofield": 1004, "travi": [1004, 1012], "oliph": 1004, "pearu": 1004, "peterson": [1004, 1006], "0d": 1005, "marchman": [1005, 1006], "hrishikesh": [1005, 1006], "huilgolkar": [1005, 1006], "bastiaan": [1005, 1006], "diego": [1005, 1006], "molla": [1005, 1006], "cunha": [1005, 1006], "almeida": [1005, 1006, 1017], "rolando": [1005, 1006], "espinoza": [1005, 1006], "fuent": [1005, 1006], "formerli": [1005, 1008, 1010, 1011], "beauchamp": [1005, 1008], "longstand": [1005, 1011], "shaun": 1005, "jackman": 1005, "winterman": 1005, "seberg": 1005, "n_atom": 1005, "label_propag": 1005, "learn_rat": 1005, "basegradientboost": 1005, "mean_square_error": 1005, "gmm_": 1005, "eig_tol": 1005, "chunk_siz": 1005, "zero_one_scor": 1005, "aymer": 1005, "masurel": 1005, "syhw": [1005, 1006], "corei": [1005, 1012, 1013], "lynch": [1005, 1011], "shu": [1005, 1008, 1012], "tadej": [1005, 1006], "jane\u017e": [1005, 1006], "caje": 1005, "tiago": [1005, 1009], "nune": 1005, "cow": 1005, "anz": 1005, "jauvin": 1005, "jacqu": [1005, 1007], "kvam": [1005, 1007], "doug": [1005, 1006, 1016], "coleman": [1005, 1006], "dickerson": 1005, "approximateident": 1005, "veronda": 1005, "matti": [1005, 1008, 1009], "lyra": [1005, 1008, 1009], "mikhail": [1005, 1006, 1007, 1010, 1011, 1019], "korobov": [1005, 1006, 1007, 1010, 1011], "alejandro": [1005, 1010], "weinstein": 1005, "deil": [1005, 1015, 1016], "nizhibitski": 1005, "coelho": [1005, 1007, 1008, 1012], "miroslav": [1005, 1006, 1009], "batchkarov": [1005, 1009], "pavel": [1005, 1013], "bob": [1005, 1011], "dengemann": 1005, "emanuel": 1005, "x006": 1005, "justin": [1006, 1012, 1016], "stochastic_gradi": [1006, 1007, 1013], "crombach": 1006, "sheet": 1006, "jaccard_similarity_scor": [1006, 1008, 1013], "jochen": 1006, "wersd\u00f6rfer": 1006, "sinayev": 1006, "unpleas": 1006, "novic": 1006, "tini": [1006, 1019], "hyperlink": 1006, "luessi": 1006, "philipp": [1006, 1007, 1010, 1019], "gervai": [1006, 1007], "cleverless": 1006, "nosetest": 1006, "compute_import": 1006, "return_model": [1006, 1008], "itergrid": 1006, "tacitli": 1006, "charset_error": 1006, "precompute_gram": 1006, "2224": 1006, "jim": 1006, "holmstr\u00f6m": 1006, "steven": [1006, 1007, 1009, 1011, 1012, 1017, 1019], "gryze": [1006, 1009], "sergeyf": 1006, "ben": [1006, 1007, 1008, 1011, 1012, 1013, 1016], "speer": 1006, "federico": [1006, 1007, 1012, 1013, 1018], "vaggi": [1006, 1007], "raul": [1006, 1007], "garreta": [1006, 1007], "gei": 1006, "flaxman": [1006, 1008], "denton": 1006, "cockburn": 1006, "dougal": [1006, 1008, 1009, 1011, 1012, 1013, 1014], "sutherland": [1006, 1008, 1009, 1011, 1012, 1013, 1014], "ian": [1006, 1008, 1013, 1014, 1016, 1019, 1020], "ozsvald": 1006, "johann": [1006, 1007, 1012, 1014, 1015, 1018], "sch\u00f6nberger": [1006, 1007], "szabo": [1006, 1007], "roland": [1006, 1007], "imran": [1006, 1007, 1008], "haqu": [1006, 1007, 1008], "karayev": 1006, "jamestwebb": [1006, 1007], "abhijeet": 1006, "kolh": 1006, "velkov": 1006, "fazlul": 1006, "shahriar": 1006, "felix": [1006, 1011, 1012, 1014, 1016, 1017, 1018], "brockherd": 1006, "harikrishnan": 1006, "jack": [1006, 1009, 1017, 1018, 1019], "hale": [1006, 1018], "jakemick": 1006, "mcdermott": 1006, "zwinck": 1006, "vredevoogd": [1006, 1007], "pati": 1006, "ekman": [1006, 1010], "shubernetskii": 1006, "naoki": [1006, 1016], "orii": 1006, "seamu": 1006, "absher": 1006, "feldman": [1006, 1011, 1012, 1013, 1014], "stefano": 1006, "lattarini": 1006, "steve": [1006, 1008, 1012, 1017, 1019], "koch": [1006, 1012, 1013, 1015, 1016], "sturla": 1006, "molden": 1006, "jarosch": 1006, "nikolai": [1007, 1008, 1009, 1010, 1012, 1013, 1018], "mayorov": [1007, 1008, 1009, 1010], "msvc": 1007, "mingw": 1007, "resourcewarn": 1007, "calvin": [1007, 1008], "gile": [1007, 1008], "billing": [1007, 1008, 1009], "safe_realloc": 1007, "bradshaw": [1007, 1008, 1011], "pico": [1007, 1008], "restor": [1007, 1012, 1013, 1014, 1015, 1019], "raff": 1007, "__array__": [1007, 1014], "jeffrei": [1007, 1010], "blackburn": [1007, 1010], "danni": [1007, 1008, 1009], "sullivan": [1007, 1008, 1009], "wignal": [1007, 1008, 1014, 1015], "grid_tograph": 1007, "gracefulli": [1007, 1008], "gaussianprocess": 1007, "novak": 1007, "tulloch": [1007, 1008], "wardagglomer": 1007, "wardclust": 1007, "mean_l1_ratio": 1007, "phlypo": 1007, "148": 1007, "bommarito": [1007, 1008], "brook": [1007, 1008, 1016], "osborn": [1007, 1008], "eltermann": 1007, "bwignal": 1007, "ankit": [1007, 1014, 1016, 1018], "agraw": [1007, 1012, 1018, 1019], "carei": [1007, 1008, 1009, 1010, 1011], "ugurthemast": [1007, 1008], "schumach": [1007, 1008, 1009], "baptist": [1007, 1015], "lagard": 1007, "rajat": [1007, 1014], "khanduja": 1007, "pascual": 1007, "ignacio": 1007, "rossi": 1007, "s\u00e4ger": [1007, 1010], "ilambharathi": [1007, 1008], "kanniah": [1007, 1008], "sdenton4": 1007, "alyssa": [1007, 1011], "amo": 1007, "waterland": 1007, "murad": 1007, "maud": 1007, "karol": 1007, "pysniak": 1007, "cgohlk": [1007, 1008], "jacobsen": 1007, "collin": 1007, "kaushik94": 1007, "erwin": 1007, "marsi": 1007, "csytraci": 1007, "lk": 1007, "laurent": [1007, 1008, 1011, 1012, 1019], "direr": [1007, 1008, 1011, 1012], "shilt": 1007, "yoshiki": [1007, 1010], "v\u00e1zquez": 1007, "yung": [1007, 1010], "siang": 1007, "liau": 1007, "abhishek": [1007, 1008, 1014, 1018], "thakur": [1007, 1008], "rohit": [1007, 1008, 1012, 1013], "sivaprasad": [1007, 1008], "amormachin": 1007, "oscar": [1007, 1011], "carlsson": 1007, "nanta": 1007, "nardelli": 1007, "jess010": 1007, "kowalski87": 1007, "clegg": 1007, "ralf": [1007, 1010, 1011, 1019], "gommer": [1007, 1010, 1011, 1019], "aft": 1007, "rupesh": 1007, "srivastava": [1007, 1019], "ryan": [1007, 1010, 1012, 1013], "skipper": [1007, 1009, 1010], "seabold": [1007, 1009, 1010], "stefan": [1007, 1008, 1012, 1014], "walt": [1007, 1008, 1012], "riddel": [1007, 1009, 1011], "valentin": [1007, 1009, 1019], "haenel": 1007, "myer": [1007, 1011], "yoni": 1007, "meshulam": 1007, "yuri": [1007, 1009], "zaytsev": 1007, "adrinjalali": [1007, 1016], "ai8rahim": 1007, "alemagnani": 1007, "chalmerlow": 1007, "dziki": 1007, "dro\u017cd\u017c": 1007, "matrixorz": 1007, "popo": 1007, "samuela": 1007, "fran\u00e7oi": 1007, "boulogn": 1007, "ethan": [1007, 1010], "guilherm": 1007, "trein": 1007, "heuer": 1007, "ivicajov": 1007, "rouli": 1007, "eduardo": [1007, 1009, 1017, 1018], "ari\u00f1o": 1007, "rubia": 1007, "jell": 1007, "zijlstra": 1007, "eddi": 1007, "jansson": [1007, 1019], "ca\u00f1ardo": 1007, "alastuei": 1007, "joseph": [1007, 1008, 1009, 1010, 1016, 1018, 1019], "perla": 1007, "ricardo": [1007, 1017, 1018], "kenta": 1007, "sato": 1007, "medri": 1007, "luce": 1007, "pierron": 1007, "danielweitzenfeld": 1007, "thompson": [1007, 1019, 1020], "brett": [1007, 1009, 1010, 1011, 1012, 1019], "feurer": [1007, 1012], "earl": 1007, "hank": 1007, "orr\u00f9": 1007, "lunt": 1007, "kearn": 1007, "pawe\u0142": [1007, 1011, 1016, 1017], "mandera": 1007, "zambelli": 1007, "staubda": 1007, "dedupl": 1008, "heilman": [1008, 1009], "precompute_dist": [1008, 1015], "lshforest": [1008, 1011], "qiang": 1008, "luo": 1008, "clemen": 1008, "brunner": 1008, "matteo": [1008, 1010, 1018], "visconti": 1008, "oleggio": 1008, "castello": 1008, "linkage_tre": 1008, "jatin": [1008, 1010], "shah": [1008, 1009, 1010, 1016], "saurabh": [1008, 1009, 1010, 1011, 1012, 1016], "jha": [1008, 1014, 1018], "blanchard": [1008, 1009], "michal": [1008, 1011, 1017, 1018], "romaniuk": 1008, "gilmor": 1008, "stapl": 1008, "hedyati": 1008, "antoni": [1008, 1010, 1016, 1019], "parel": 1008, "herv\u00e9": 1008, "bredin": 1008, "hasil": 1008, "sharma": [1008, 1010, 1012, 1013, 1015, 1016, 1018], "download_20newsgroup": 1008, "friend": 1008, "cathi": [1008, 1014], "deng": [1008, 1009, 1010], "dawson": 1008, "garret": 1008, "hanna": [1008, 1009, 1015], "wallach": [1008, 1009], "yan": [1008, 1016], "artem": [1008, 1011], "sobolev": 1008, "fit_ovr": 1008, "predict_ovr": 1008, "predict_proba_ovr": 1008, "fit_ovo": 1008, "predict_ovo": 1008, "fit_ecoc": 1008, "predict_ecoc": 1008, "lamond": 1008, "outweigh": 1008, "thresh": 1008, "akshai": [1008, 1011, 1016], "akshayah3": 1008, "aldrian": 1008, "obaja": 1008, "ander": [1008, 1014], "aagaard": 1008, "cranenburgh": 1008, "walker": 1008, "banilo": [1008, 1009], "barmalei": [1008, 1009], "benedikt": 1008, "koehler": 1008, "bhsu": 1008, "bori": [1008, 1016], "feld": 1008, "borja": 1008, "ayerdi": 1008, "boyuan": [1008, 1009, 1010], "brent": [1008, 1012, 1013], "pedersen": 1008, "celeo": 1008, "chebee7i": 1008, "stade": 1008, "schuldt": 1008, "christof": [1008, 1009], "angermuel": [1008, 1009], "daiki": 1008, "aminaka": 1008, "danfrankj": 1008, "dmitrij": 1008, "milajev": 1008, "floydsoft": 1008, "garrett": 1008, "gpassino": 1008, "gwulf": [1008, 1009], "hampu": 1008, "bengtsson": 1008, "harri": [1008, 1010, 1016, 1017], "mavroforaki": [1008, 1010], "helder": [1008, 1017, 1018], "herv": 1008, "hugu": 1008, "salamin": 1008, "ism": 1008, "dlabal": 1008, "javier": 1008, "l\u00f3pez": [1008, 1012, 1013, 1016], "pe\u00f1a": 1008, "jdcaballero": 1008, "jeff": [1008, 1010, 1017, 1018], "hammerbach": 1008, "helmu": 1008, "kaicheng": 1008, "markham": [1008, 1015, 1016], "lagacheri": 1008, "leepei": 1008, "loic": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "estev": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "luka": [1008, 1015], "michelbach": 1008, "mario": [1008, 1010, 1018, 1019, 1020], "krell": [1008, 1010], "ku": [1008, 1009], "mateusz": [1008, 1015, 1016], "susik": 1008, "mehdi": [1008, 1017], "cherti": 1008, "mlg": 1008, "montecchio": 1008, "okal": 1008, "billi": 1008, "\u00f3scar": [1008, 1009, 1010, 1011], "n\u00e1jera": [1008, 1009, 1010, 1011], "puggioni": 1008, "pratap": [1008, 1011, 1018], "vardhan": 1008, "pvnguyen": 1008, "queqichao": 1008, "rahiel": 1008, "kasim": 1008, "mason": 1008, "saket": [1008, 1009, 1016], "choudhari": [1008, 1009, 1018], "sam": [1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "nichol": 1008, "sethdandridg": 1008, "sinhrk": [1008, 1009], "snuderl": 1008, "ott": 1008, "tjoa": 1008, "swu": 1008, "zimmer": [1008, 1018], "tejesh95": 1008, "terrycojon": 1008, "delteil": 1008, "toma": 1008, "kazmar": 1008, "trevorstephen": [1008, 1010], "tttthomasssss": 1008, "tzu": 1008, "kuo": 1008, "ugurcaliskan": 1008, "vinayak": [1008, 1009, 1010, 1012, 1013, 1019], "mehta": [1008, 1009, 1010, 1012, 1013, 1014, 1015, 1019], "vjacheslav": 1008, "murashkin": 1008, "wadawson": 1008, "x0l": 1008, "vendor": [1009, 1012, 1013], "6147": 1009, "presort": [1009, 1014], "5857": 1009, "mcculloh": [1009, 1010], "6258": 1009, "giorgio": [1009, 1010, 1011], "patrini": [1009, 1010, 1011], "joe": 1009, "jevnik": 1009, "labelkfold": [1009, 1010], "labelshufflesplit": [1009, 1010], "mcfee": [1009, 1010], "3659": 1009, "4738": 1009, "projectedgradientnmf": 1009, "nls_max_it": 1009, "erick": 1009, "moodi": 1009, "4025": 1009, "mean_shift_": 1009, "mean_shift": [1009, 1012], "martino": 1009, "sorbaro": 1009, "cori": 1009, "konstantin": [1009, 1010, 1011], "shmelkov": 1009, "backlink": 1009, "jaidev": 1009, "deshpand": [1009, 1010], "dictlearn": 1009, "kashif": 1009, "rasul": [1009, 1011, 1012], "galvez": 1009, "sonni": 1009, "hu": [1009, 1012, 1014], "santi": [1009, 1011, 1012], "villalba": [1009, 1012, 1016], "5186": 1009, "stolbunov": 1009, "booster": 1009, "graham": [1009, 1010], "clenaghan": [1009, 1010], "clyde": 1009, "subproblem": 1009, "forestclassifi": 1009, "ankur": 1009, "ankan": 1009, "henri": [1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019], "5431": 1009, "buddha": 1009, "prakash": [1009, 1011, 1017], "5182": 1009, "lamb": [1009, 1017], "5282": 1009, "5355": 1009, "5360": 1009, "4478": 1009, "5337": 1009, "4362": 1009, "5495": 1009, "elvi": [1009, 1010, 1011], "dohmatob": [1009, 1010, 1011], "data_min": 1009, "data_max": 1009, "data_rang": 1009, "_learntselectormixin": 1009, "gradientboost": 1009, "metatransfom": 1009, "load_lfw_pair": 1009, "wardagglom": 1009, "residues_": 1009, "indicator_matrix_": 1009, "adithya": 1009, "ganesh": 1009, "akitti": 1009, "alexei": 1009, "grigorev": 1009, "ali": [1009, 1012, 1013, 1016, 1017, 1019], "baharev": 1009, "ando": 1009, "saaba": 1009, "anish": [1009, 1010], "anthoni": [1009, 1011, 1012], "erling": 1009, "rouvinen": 1009, "rachez": [1009, 1010], "benjaminirv": 1009, "naul": [1009, 1010], "gohlk": 1009, "bourguignat": 1009, "cindi": [1009, 1017], "sridharan": 1009, "kronovet": 1009, "data1010": 1009, "dotson": 1009, "djipei": [1009, 1010], "dmitri": [1009, 1011, 1012, 1013, 1017], "spikhalskii": 1009, "donn": 1009, "duart": [1009, 1017, 1019], "caro": 1009, "larson": [1009, 1013, 1014, 1016, 1018], "fernando": [1009, 1016], "carrillo": 1009, "eckert": 1009, "zalkow": 1009, "ganiev": [1009, 1010, 1011], "ibraim": [1009, 1010, 1011], "giorgiop": 1009, "gryllo": [1009, 1012], "prokopi": [1009, 1012], "hsuan": 1009, "tien": 1009, "ishank": [1009, 1010, 1011], "gulati": [1009, 1010, 1011], "jeffrey04": [1009, 1010], "jfraj": 1009, "jiali": 1009, "mei": [1009, 1014], "kirkham": [1009, 1010, 1012], "wittenau": 1009, "loyal": 1009, "jungkook": 1009, "park": [1009, 1014, 1016, 1019], "kamalakerdadi": [1009, 1010], "kyler": 1009, "lilian": [1009, 1010], "besson": [1009, 1010], "tiao": [1009, 1010], "marktab": 1009, "spacek": 1009, "martinbpr": [1009, 1010], "martinosorb": 1009, "maryanmorel": [1009, 1010], "masafumi": 1009, "oyamada": 1009, "krump": 1009, "kolganov": 1009, "mbilling": 1009, "mhg": 1009, "patterson": 1009, "omer": 1009, "katz": [1009, 1016, 1017], "pauli": 1009, "virtanen": 1009, "fischer": [1009, 1010], "pianomania": 1009, "preston": [1009, 1010, 1011], "parri": [1009, 1010, 1011], "rohan": [1009, 1010, 1012, 1013, 1017], "ramanath": 1009, "bansod": [1009, 1010, 1011], "scls19fr": 1009, "saeger": [1009, 1010, 1011], "shivan": 1009, "sornarajah": 1009, "simonpl": 1009, "sseg": 1009, "hoover": [1009, 1010, 1011, 1013], "seguin": 1009, "theodor": 1009, "vasiloudi": 1009, "freita": [1009, 1011, 1012], "pereira": [1009, 1012, 1013], "timothi": [1009, 1017], "hopper": 1009, "tokoroten": 1009, "vstolbunov": 1009, "wangz10": 1009, "yucheng": 1009, "zhauniarovich": 1009, "zac": 1009, "stewart": [1009, 1014, 1017, 1019], "zhai_pro": 1009, "zichen": 1009, "7946": 1010, "8355": 1010, "9010": 1010, "8040": 1010, "9149": 1010, "aman": [1010, 1011, 1012, 1018, 1019], "dalmia": [1010, 1011, 1012], "nate": [1010, 1011, 1017], "guerin": [1010, 1011], "lebedev": [1010, 1011], "utilis": 1010, "6497": 1010, "7724": 1010, "bing": [1010, 1011], "explained_variance_ratio": 1010, "7632": 1010, "jpfrancoia": [1010, 1011], "7676": 1010, "moham": [1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "affan": 1010, "7756": 1010, "7786": 1010, "srivatsan": [1010, 1011, 1014], "7799": 1010, "7490": [1010, 1011], "6282": 1010, "7301": 1010, "6178": 1010, "7680": 1010, "n_iters_": 1010, "7553": 1010, "ekaterina": [1010, 1011, 1012, 1013, 1015], "krivich": [1010, 1011, 1013], "5874": 1010, "7593": 1010, "7594": 1010, "7660": 1010, "7750": 1010, "7732": 1010, "artsion": 1010, "lieu": [1010, 1011], "grid_scores_": [1010, 1016, 1017], "leaveonelabelout": 1010, "leaveplabelout": 1010, "plural": 1010, "mean_tim": 1010, "std_time": 1010, "3204": 1010, "5291": 1010, "sounder": 1010, "7295": 1010, "5299": 1010, "bravi": 1010, "fouchet": 1010, "calinski_harabaz_scor": [1010, 1012], "harabaz": 1010, "6586": 1010, "4294": 1010, "6667": 1010, "6954": 1010, "unveil": 1010, "yelit": 1010, "basebag": [1010, 1012], "staub": 1010, "5805": 1010, "5251": 1010, "imacul": 1010, "1000x": 1010, "arfa": 1010, "6691": 1010, "6913": 1010, "5762": 1010, "utkarsh": [1010, 1011, 1012, 1013], "upadhyai": [1010, 1011, 1012, 1013], "6846": 1010, "5929": 1010, "podshumok": [1010, 1011], "6173": 1010, "ryad": 1010, "zenin": 1010, "devashish": 1010, "asish": [1010, 1011], "dowl": 1010, "6697": 1010, "ori": 1010, "ziv": 1010, "sear": 1010, "merritt": 1010, "7325": 1010, "7239": 1010, "hong": [1010, 1012, 1016, 1017, 1018], "guangguo": 1010, "jensen": [1010, 1016], "7419": 1010, "gregori": [1010, 1014, 1015, 1016, 1017], "stupp": [1010, 1011], "bernardo": 1010, "stein": 1010, "sparse_func": [1010, 1016], "incr_mean_variance_axi": [1010, 1016], "7049": 1010, "7152": 1010, "load_boston": [1010, 1012, 1017], "7154": 1010, "manvendra": [1010, 1011], "singh": [1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "5540": 1010, "7248": 1010, "6764": 1010, "wenhua": 1010, "6817": 1010, "6902": 1010, "leonieborn": 1010, "5141": 1010, "4995": 1010, "5012": 1010, "_transform_select": 1010, "7194": 1010, "caio": [1010, 1012, 1014], "oliveira": [1010, 1012, 1014, 1018], "6182": 1010, "6121": 1010, "6472": 1010, "7350": 1010, "russel": [1010, 1011], "smith": [1010, 1011, 1012, 1013, 1014, 1016], "7159": 1010, "yichuan": [1010, 1011], "5460": 1010, "document_clust": 1010, "7353": 1010, "_search": 1010, "_check_param_grid": 1010, "xrang": 1010, "7323": 1010, "viacheslav": 1010, "kovalevskyi": 1010, "7101": 1010, "residual_metr": 1010, "6651": 1010, "reorgan": 1010, "7187": 1010, "7260": 1010, "sebasti\u00e1n": 1010, "vanrel": 1010, "leaveplabelsout": 1010, "6660": 1010, "unprefix": 1010, "7261": 1010, "aditya": [1010, 1012, 1013, 1014, 1018, 1019], "joshi": [1010, 1012, 1018], "loginov": 1010, "minyushkin": 1010, "rudi": 1010, "abadi": [1010, 1011], "saint": 1010, "alexfield": 1010, "alvaro": [1010, 1012], "ulloa": 1010, "alyssaq": 1010, "amlan": 1010, "kar": 1010, "giessel": 1010, "jackson": [1010, 1011, 1013], "murrai": [1010, 1011], "arafat": 1010, "archit": 1010, "asnt": 1010, "b0noi": 1010, "behzad": 1010, "tabibian": 1010, "kratzwald": 1010, "bhargav": 1010, "mangipudi": 1010, "blakeflei": 1010, "brandon": [1010, 1011, 1018, 1019], "carter": [1010, 1011, 1019], "camilo": 1010, "lamu": 1010, "carol": [1010, 1011], "Willing": [1010, 1011], "cass": 1010, "ceshin": 1010, "truong": 1010, "codevig": 1010, "shiebler": 1010, "hnyk": [1010, 1011], "elli": [1010, 1013], "nicholson": [1010, 1011, 1012], "thaler": 1010, "warshaw": 1010, "lasagna": 1010, "deborah": [1010, 1011], "definitelyuncertain": 1010, "didi": [1010, 1011, 1012, 1013], "zev": [1010, 1011, 1012, 1013], "dsquareindia": 1010, "edwinensa": 1010, "elia": 1010, "kuth": 1010, "fabio": 1010, "ticconi": 1010, "fisach": 1010, "donovan": 1010, "ghg": 1010, "giovanni": [1010, 1012], "cherubin": 1010, "lanzani": 1010, "glenn": 1010, "qian": [1010, 1015], "mohr": 1010, "govin": 1010, "vatsan": 1010, "reda": 1010, "gustav": 1010, "m\u00f6rtberg": 1010, "halwai": 1010, "harizo": [1010, 1011], "rajaona": [1010, 1011], "hashcode55": 1010, "hdmetor": 1010, "hobson": 1010, "lane": 1010, "bown": 1010, "igor": [1010, 1011, 1017], "andriushchenko": [1010, 1011], "inki": 1010, "hwang": 1010, "isaac": [1010, 1011, 1013, 1014], "sijaranamu": 1010, "iver": 1010, "jordal": 1010, "jackmartin": 1010, "fiedler": 1010, "routlei": 1010, "zike": 1010, "janna": 1010, "brettingen": 1010, "jarfa": 1010, "laska": 1010, "jblackburn": 1010, "levesqu": 1010, "hintz": 1010, "jeremynixon": 1010, "jeroen": 1010, "jessica": 1010, "jill": 1010, "j\u00eann": 1010, "vie": 1010, "jia": 1010, "jiyuan": 1010, "johannah": 1010, "boersma": 1010, "moeller": 1010, "striebel": [1010, 1011], "joncral": 1010, "jordi": 1010, "munoz": [1010, 1016], "jrfiedler": 1010, "juliankahnert": 1010, "juliathebrav": 1010, "kaichogami": 1010, "lyon": [1010, 1011], "kingjr": 1010, "kjell": 1010, "krishna": [1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019], "kalyan": 1010, "krishnakalyan3": 1010, "kvle": 1010, "putnam": 1010, "ldavid": 1010, "leig": 1010, "leightonzhang": 1010, "leland": [1010, 1011, 1012, 1014, 1015], "mcinn": [1010, 1011, 1012, 1014, 1015], "liang": [1010, 1015, 1016], "hsieh": 1010, "lizsz": 1010, "l\u00e9oni": 1010, "born": 1010, "maniteja": [1010, 1011, 1012], "nandana": [1010, 1011, 1012], "marco": [1010, 1012, 1013, 1017, 1018, 1019], "bao": [1010, 1018], "szepieniec": 1010, "madsen": [1010, 1012], "massil": 1010, "matheu": 1010, "duboi": [1010, 1012], "moroz": 1010, "scherer": 1010, "michiaki": 1010, "ariga": 1010, "moussa": 1010, "taifi": 1010, "mrandrewandrad": 1010, "mridul": 1010, "seth": 1010, "nadya": 1010, "naoya": [1010, 1011, 1012, 1013], "kanai": [1010, 1011, 1012], "nickledav": 1010, "nico": [1010, 1017], "ningchi": 1010, "nlathia": 1010, "okbalefthand": 1010, "okhlopkov": [1010, 1011], "pano": 1010, "lourida": 1010, "strickland": 1010, "perrin": 1010, "letelli": 1010, "pestrickland": 1010, "practicalswift": 1010, "qimu": 1010, "zheng": [1010, 1011, 1016], "rachit": [1010, 1016, 1019], "kansal": 1010, "ramana": [1010, 1011], "randi": 1010, "olson": 1010, "lutz": [1010, 1014, 1017], "schucker": 1010, "jain": [1010, 1011, 1012, 1016, 1018, 1019], "ruifeng": [1010, 1011, 1016], "r\u00e9my": 1010, "l\u00e9one": 1010, "saihttam": 1010, "saiw": 1010, "yeung": 1010, "shleifer": [1010, 1011], "sartaj": 1010, "sasank": 1010, "chilamkurthi": 1010, "seal": 1010, "shagun": 1010, "sodhani": 1010, "shanmuga": 1010, "shashank": [1010, 1016], "shekhar": 1010, "shawpan": 1010, "shengxiduan": 1010, "shota": 1010, "shuckle16": 1010, "smedbergm": 1010, "srvanrel": 1010, "leriqu": [1010, 1012], "taranjeet": 1010, "themrmax": [1010, 1011], "hallock": 1010, "moreau": [1010, 1011, 1012, 1013, 1014], "tkammi": 1010, "toastedcornflak": [1010, 1011], "tomdlt": 1010, "toshihiro": [1010, 1011, 1017], "kamishima": [1010, 1011], "tracer0tong": 1010, "hauck": 1010, "vo": [1010, 1018], "varun": [1010, 1011, 1012, 1018, 1019], "jewalikar": 1010, "vikram": [1010, 1019], "villu": 1010, "ruusmann": 1010, "walter": 1010, "waterponei": [1010, 1011], "wenjian": 1010, "welch": 1010, "wyseguy7": 1010, "xyguo": [1010, 1012], "yanlend": 1010, "yen": [1010, 1011], "yenchenlin": 1010, "yoav": 1010, "zivori": 1010, "10723": [1011, 1012], "9623": 1011, "undocu": 1011, "deleteri": 1011, "9677": 1011, "ashutosh": [1011, 1012, 1014, 1016], "correlation_model": 1011, "regression_model": 1011, "belatedli": 1011, "9717": 1011, "9693": 1011, "steingold": [1011, 1012], "9711": 1011, "goncalo": [1011, 1012], "rodrigu": [1011, 1012, 1017], "9641": 1011, "bourbeau": [1011, 1012, 1013], "9865": 1011, "sachin": [1011, 1012, 1018], "kelkar": [1011, 1012, 1014], "9922": 1011, "charli": [1011, 1012], "brummitt": [1011, 1012], "9945": 1011, "9830": 1011, "9600": 1011, "kerimov": [1011, 1012], "9593": 1011, "reiichiro": [1011, 1012], "nakano": [1011, 1012], "9604": 1011, "interim": 1011, "9558": 1011, "9847": 1011, "joan": [1011, 1012, 1013, 1014], "massich": [1011, 1012, 1013, 1014], "oli": 1011, "blum": 1011, "9697": 1011, "9750": 1011, "9788": 1011, "9815": 1011, "9802": 1011, "vrishank": [1011, 1012], "bhardwaj": [1011, 1012], "nagarjuna": [1011, 1012], "nathaniel": [1011, 1012, 1014], "diegodlh": [1011, 1012], "jkleint": [1011, 1012], "oliblum90": [1011, 1012], "pasbi": [1011, 1012], "lawson": [1011, 1012, 1013], "nielsenmarkus11": [1011, 1012], "excit": 1011, "cautiou": 1011, "min_impurity_split": 1011, "7823": [1011, 1012], "8446": 1011, "5279": 1011, "8363": 1011, "5295": 1011, "7388": 1011, "userguid": 1011, "7655": 1011, "karan": [1011, 1012, 1013], "desai": [1011, 1013, 1016, 1017, 1019], "7739": 1011, "gasquez": 1011, "8120": 1011, "neeraj": 1011, "gangwar": 1011, "7548": 1011, "9206": 1011, "7441": 1011, "6101": 1011, "8698": 1011, "7794": 1011, "herilalaina": [1011, 1012, 1014], "rakotoarison": [1011, 1012, 1014], "5036": 1011, "4939": 1011, "esuli": [1011, 1016], "n_skips_": 1011, "7914": 1011, "horrel": 1011, "8591": 1011, "hadrien": [1011, 1014], "7838": 1011, "8835": 1011, "8061": 1011, "cordier": 1011, "6288": 1011, "9145": 1011, "reddi": [1011, 1012, 1013, 1018], "chinthala": 1011, "7721": 1011, "crall": [1011, 1017], "7685": 1011, "tommi": [1011, 1012, 1013], "l\u00f6fstedt": 1011, "9277": 1011, "hongkahjun": 1011, "7089": 1011, "randomized_svd_low_rank": 1011, "9067": 1011, "6181": 1011, "wendling": 1011, "8065": 1011, "lejeun": 1011, "7567": 1011, "jay": 1011, "doepk": 1011, "7573": 1011, "romain": [1011, 1016], "brault": 1011, "5229": 1011, "7990": 1011, "8586": 1011, "7723": 1011, "8028": 1011, "booth": 1011, "8005": 1011, "7863": 1011, "7506": 1011, "5991": 1011, "8845": 1011, "8053": 1011, "8282": 1011, "8117": 1011, "9259": 1011, "8094": 1011, "8335": 1011, "poughon": 1011, "7880": 1011, "karnofski": 1011, "935": 1011, "8931": 1011, "attractador": [1011, 1012], "8002": 1011, "8549": 1011, "zerodivisionerror": [1011, 1014, 1020], "7501": 1011, "dominik": 1011, "krzeminski": 1011, "7970": 1011, "8006": 1011, "p\u00f6lsterl": [1011, 1014, 1017], "8936": 1011, "8672": 1011, "mike": 1011, "benfield": 1011, "broke": 1011, "8068": 1011, "5732": 1011, "ytrue": 1011, "ypred": 1011, "8087": 1011, "7983": 1011, "8512": 1011, "8251": 1011, "aivision2020": 1011, "5814": 1011, "7849": 1011, "jair": 1011, "montoya": 1011, "martinez": 1011, "randomizedlasso": 1011, "5359": 1011, "9302": 1011, "8160": 1011, "8224": 1011, "gedeck": 1011, "vathsala": [1011, 1012, 1013, 1014], "achar": [1011, 1012, 1013, 1014], "9022": 1011, "mehmet": [1011, 1017], "basbug": 1011, "9024": 1011, "8973": 1011, "paulo": [1011, 1017, 1019], "haddad": 1011, "unmeaning": 1011, "6573": 1011, "quazi": [1011, 1012], "marufur": 1011, "rahman": [1011, 1012, 1016], "9239": 1011, "andr": [1011, 1018], "ambrosio": 1011, "boechat": 1011, "early_exager": 1011, "assertionerror": 1011, "8992": 1011, "7954": 1011, "foreman": 1011, "9105": 1011, "9108": 1011, "8306": 1011, "7872": 1011, "_c_step": 1011, "3367": 1011, "steward": 1011, "8768": 1011, "detomaso": 1011, "6507": 1011, "7819": 1011, "jayzed82": 1011, "6126": 1011, "7814": 1011, "7702": 1011, "9219": 1011, "7771": 1011, "ang": 1011, "randomizedlogisticregress": 1011, "8259": 1011, "mandatorili": 1011, "7565": 1011, "8181": 1011, "basesearchcv": [1011, 1012], "8344": 1011, "eriksson": 1011, "7661": 1011, "8295": 1011, "batula": 1011, "dylan": [1011, 1014], "werner": [1011, 1016], "meier": 1011, "7365": 1011, "aleksandr": 1011, "sandrovskii": 1011, "5697": 1011, "stijn": 1011, "tonk": 1011, "6250": 1011, "8093": 1011, "bull": 1011, "9507": 1011, "7356": 1011, "dingwal": 1011, "_check_target": 1011, "8377": 1011, "5211": 1011, "rhinehart": 1011, "8159": 1011, "8198": 1011, "fetch_": 1011, "7944": 1011, "7825": 1011, "kathleen": 1011, "7376": 1011, "7331": 1011, "yangarbit": 1011, "__getstate__": [1011, 1019], "obstruct": 1011, "8316": 1011, "holger": 1011, "8010": 1011, "7986": 1011, "najera": 1011, "9289": 1011, "makedir": 1011, "9284": 1011, "sebastin": [1011, 1012], "alert": 1011, "lgtm": 1011, "9278": 1011, "heli": 1011, "8449": 1011, "9078": 1011, "purport": 1011, "sergul": [1011, 1012, 1015], "aydor": [1011, 1012, 1015], "8922": 1011, "8137": 1011, "8139": 1011, "8995": 1011, "2879": 1011, "7459": 1011, "7812": 1011, "9100": 1011, "8481": 1011, "8174": 1011, "tahar": 1011, "zanouda": 1011, "8854": 1011, "8874": 1011, "7998": 1011, "jiacheng": 1011, "argpartit": 1011, "frombuffer_empti": 1011, "rankdata": 1011, "safe_copi": 1011, "eig": 1011, "fast_dot": 1011, "pinvh": [1011, 1013], "graph_laplacian": 1011, "sparsetool": 1011, "connected_compon": 1011, "check_decision_proba_consist": 1011, "shubham": [1011, 1014], "9019": 1011, "baseensembl": [1011, 1014], "7464": 1011, "rishikesh": 1011, "taehoon": [1011, 1012], "aashil": 1011, "balakumaran": [1011, 1012], "manoharan": [1011, 1012], "petrov": [1011, 1012], "minghui": [1011, 1012], "jc": [1011, 1012], "alexandercbooth": 1011, "chkoar": 1011, "aarshai": [1011, 1012], "gilliam": 1011, "subramanyam": 1011, "clement": [1011, 1012, 1016], "joudet": [1011, 1012], "robl": 1011, "kati": 1011, "luangkot": 1011, "lacchia": 1011, "akshay0724": 1011, "omtcyfz": 1011, "rickiepark": 1011, "jbdelafoss": 1011, "vivek": [1011, 1012, 1013], "elliott": 1011, "ldirer": 1011, "sid": 1011, "kapur": 1011, "midina": 1011, "mikebenfield": 1011, "sourav": [1011, 1014], "aseem": 1011, "bansal": 1011, "aishwaryark": 1011, "howel": 1011, "dokato": 1011, "kathi": [1011, 1014], "ferria": 1011, "nikita": [1011, 1012, 1014, 1017, 1018, 1019], "basil": 1011, "beirouti": 1011, "possa": 1011, "bednar": 1011, "janin": 1011, "harper": 1011, "artsiom": 1011, "ligo": 1011, "rahn": [1011, 1014], "seanpwilliam": 1011, "julian": [1011, 1012], "kuhlmann": [1011, 1012], "aubert": 1011, "j\u00f6rn": 1011, "hee": [1011, 1014], "shivamgargsya": [1011, 1015, 1017], "kat": 1011, "hempstalk": 1011, "kaushik": [1011, 1018, 1019, 1020], "lakshmikanth": 1011, "kennedi": [1011, 1014], "yap": 1011, "kiril": [1011, 1012, 1014, 1016], "bobyrev": 1011, "imbert": [1011, 1013, 1016, 1018], "lera": 1011, "douillard": 1011, "mainak": 1011, "tobychees": [1011, 1012], "manraj": 1011, "marc": [1011, 1013, 1014], "meketon": 1011, "marcofalk": 1011, "gilch": 1011, "mehul": 1011, "ahuja": [1011, 1018, 1019], "goetz": [1011, 1012], "dezub": 1011, "baumgartn": 1011, "vibrantabhi19": 1011, "golubin": 1011, "milen": 1011, "paskov": 1011, "antonin": 1011, "carett": 1011, "morikko": 1011, "mrmjauh": 1011, "nalepa": 1011, "namiya": 1011, "narinek": [1011, 1012], "angu": [1011, 1012, 1018], "nicol": 1011, "vavrova": 1011, "nitish": 1011, "pandei": [1011, 1016], "daniil": 1011, "olegovich": 1011, "craze": 1011, "om": 1011, "parmind": 1011, "patrick": [1011, 1012, 1017, 1018], "carlson": 1011, "pei": 1011, "ganssl": 1011, "lorek": 1011, "pete": [1011, 1015, 1016], "bachant": 1011, "csizsek": 1011, "jong": 1011, "puneet": 1011, "mathur": [1011, 1013, 1014, 1019, 1020], "quentin": [1011, 1012, 1013], "hibon": 1011, "1kastner": 1011, "rameshwar": [1011, 1012], "bhaskaran": [1011, 1012], "rebecca": 1011, "bilbro": 1011, "remi": 1011, "rampin": 1011, "pratik": 1011, "agarw": [1011, 1012, 1014], "sailesh": [1011, 1012], "choyal": [1011, 1012], "samson": 1011, "samu\u00ebl": 1011, "weber": 1011, "sarah": [1011, 1013, 1016], "abhyudai": 1011, "sharan": [1011, 1012], "yalburgi": [1011, 1012], "willduan": 1011, "siddharth": [1011, 1015], "almer": 1011, "theofilo": 1011, "papapanagiot": 1011, "alison": 1011, "boucher": 1011, "folkman": 1011, "jung": [1011, 1015, 1019], "shenoi": 1011, "vilhelm": [1011, 1012], "ehrenheim": [1011, 1012], "alan": [1011, 1012, 1015, 1017, 1018], "yee": [1011, 1012], "warut": [1011, 1012], "vijitbenjaronk": [1011, 1012], "yuichi": 1011, "fujikawa": 1011, "affanv14": 1011, "andreh7": 1011, "bradi": 1011, "salz": 1011, "campustrampu": 1011, "agamemnon": [1011, 1012, 1013, 1014, 1016, 1017], "krasouli": [1011, 1012, 1013, 1014, 1016, 1017], "ditenberg": 1011, "elena": 1011, "sharova": 1011, "filipj8": [1011, 1012], "fukatani": 1011, "guiniol": 1011, "guoci": 1011, "hakaa1": [1011, 1012], "xhy": 1011, "jakirkham": [1011, 1012, 1013, 1019], "jaroslaw": 1011, "jeroko": 1011, "jmontoyam": 1011, "josephsalmon": [1011, 1012, 1013], "jschendel": [1011, 1012], "leereev": 1011, "hahn": [1011, 1012], "mathurinm": [1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "mehak": 1011, "sachdeva": 1011, "mlewis1729": 1011, "mlliou112": 1011, "mthorrel": [1011, 1014], "ndingwal": 1011, "nuff": 1011, "plagre": 1011, "pldtc325": 1011, "breno": [1011, 1012], "olsen": 1011, "alfano": 1011, "burn": [1011, 1012], "polmauri": 1011, "charlton": 1011, "austin": 1011, "chayant": 1011, "t15h": 1011, "chinmaya": 1011, "pancholi": 1011, "danielsen": 1011, "chung": [1011, 1012], "pravarmahajan": [1011, 1012], "dariu": [1011, 1012], "morawiec": [1011, 1012], "haberth\u00fcr": 1011, "heryanto": 1011, "kirkbi": [1011, 1012], "rashchedrin": 1011, "gertrud": 1011, "devansh": [1011, 1012], "dickson": 1011, "baxlei": 1011, "don86": 1011, "klarup": 1011, "elizabeth": [1011, 1013, 1016], "ferriss": 1011, "ellen": 1011, "egli": 1011, "chieh": [1011, 1012], "chou": [1011, 1012], "grzegorz": [1011, 1014], "szpak": [1011, 1014], "zxcvbniu": 1011, "icyblad": 1011, "ilya": 1011, "laughlin": 1011, "iv\u00e1n": [1011, 1017], "vall\u00e9": 1011, "aur\u00e9lien": [1011, 1012, 1013, 1017, 1018], "bellet": [1011, 1012, 1013], "mahapatra": 1011, "bundl": [1012, 1013], "indexerror": [1012, 1013], "11756": [1012, 1013], "14237": [1012, 1013], "schuder": [1012, 1013, 1014], "13903": [1012, 1013], "13124": [1012, 1013], "13772": [1012, 1013], "vya": [1012, 1013, 1014], "12949": 1012, "prabakaran": [1012, 1013, 1016, 1018, 1019], "kumaresshan": [1012, 1013, 1016], "12946": 1012, "tallott": 1012, "13276": 1012, "13005": 1012, "13312": 1012, "11295": 1012, "vacaliuc": [1012, 1013], "13046": 1012, "12360": 1012, "aakanksha": 1012, "13134": 1012, "sandro": [1012, 1019], "casagrand": [1012, 1013], "12881": 1012, "13165": 1012, "13221": 1012, "bertrandhaut": [1012, 1013], "raghunathan": [1012, 1013, 1014, 1015, 1016, 1017, 1018], "dowon": [1012, 1013], "aria": [1012, 1013, 1019], "fibins": [1012, 1013], "finn": [1012, 1013], "shea": [1012, 1013], "joaak": [1012, 1013], "m\u00e9hault": [1012, 1013], "kms15": [1012, 1013], "kossori": [1012, 1013], "aruku": [1012, 1013], "lakshya": [1012, 1013, 1014], "ib\u00e1\u00f1ez": [1012, 1013, 1016], "gorelli": [1012, 1013, 1017, 1019], "marcogorelli": [1012, 1013], "mferrari3": [1012, 1013], "micka\u00ebl": [1012, 1013], "schoentgen": [1012, 1013], "pavlo": [1012, 1013], "kalli": [1012, 1013], "glaser": [1012, 1013], "pierretallott": [1012, 1013, 1014], "kapoor": [1012, 1013], "sandrocasagrand": [1012, 1013], "tashai": [1012, 1013], "vishaal": [1012, 1013], "zhuyi": [1012, 1013], "ziji": [1012, 1013], "zj": [1012, 1013], "poh": [1012, 1013], "12704": 1012, "12701": 1012, "12685": 1012, "12699": 1012, "adanhawth": [1012, 1013], "stine": [1012, 1013], "feda": [1012, 1013], "curic": [1012, 1013], "jeremiedbb": [1012, 1013, 1014], "katrin": [1012, 1013], "leinweb": [1012, 1013], "muhammad": [1012, 1013, 1017], "hassaan": [1012, 1013], "rafiqu": [1012, 1013], "paczuski": [1012, 1013], "waterburi": [1012, 1013], "shivam": [1012, 1013, 1014], "kotwalia": [1012, 1013], "12159": 1012, "12105": 1012, "11912": 1012, "12304": 1012, "12339": 1012, "12246": 1012, "10811": 1012, "feldbauer": [1012, 1013, 1014, 1015, 1018], "12441": 1012, "12517": 1012, "12234": 1012, "12165": 1012, "12388": 1012, "connor": [1012, 1017], "tann": [1012, 1017], "12393": 1012, "12122": 1012, "sharedmem": 1012, "12518": 1012, "12481": 1012, "12612": 1012, "12211": 1012, "lisa": [1012, 1013, 1015, 1016, 1018, 1019], "hannel": [1012, 1013], "melissa": 1012, "ferrari": 1012, "12451": 1012, "12171": 1012, "12365": 1012, "_encod": 1012, "12514": 1012, "12522": 1012, "12471": 1012, "marzinotto": [1012, 1013], "12317": 1012, "12338": 1012, "bauk": [1012, 1013], "12625": 1012, "sklearn_site_joblib": 1012, "12350": 1012, "12467": 1012, "unvendor": 1012, "12345": 1012, "navarret": [1012, 1013, 1014], "benjastudio": [1012, 1013], "cheuk": [1012, 1013], "connossor": [1012, 1013], "levinson": [1012, 1013], "kieker": [1012, 1013], "kataev": [1012, 1013], "dillon": [1012, 1013, 1014], "gardner": [1012, 1013], "vukolov": [1012, 1013], "caselli": [1012, 1013], "gauravahlawat": [1012, 1013], "gustavo": [1012, 1013, 1018], "haroldfox": [1012, 1013], "jacklangerman": [1012, 1013], "jacopo": [1012, 1013], "notarstefano": [1012, 1013], "janvanrijn": [1012, 1013], "jdethuren": [1012, 1013], "koen": [1012, 1013], "kushal": [1012, 1013], "chauhan": [1012, 1013, 1019], "jie": [1012, 1013, 1016], "lili": [1012, 1013], "xiong": [1012, 1013, 1018], "liam": [1012, 1013], "melsyt": [1012, 1013], "nichola": [1012, 1013, 1015], "shebanov": [1012, 1013], "oleksandr": [1012, 1013, 1014, 1015, 1018], "pavlyk": [1012, 1013, 1014, 1015], "hausamann": [1012, 1013], "pulkit": [1012, 1013, 1015], "maloo": [1012, 1013], "batista": [1012, 1013, 1017], "radostin": [1012, 1013], "stoyanov": [1012, 1013], "ramil": [1012, 1013], "nugmanov": [1012, 1013], "rebekah": [1012, 1013, 1014], "roopam": [1012, 1013], "tiernei": [1012, 1013, 1014], "sylvainlan": [1012, 1013, 1014, 1015, 1016], "takingitcasu": [1012, 1013], "tulio": [1012, 1013], "xing": [1012, 1013], "zach": [1012, 1013, 1018], "mountain": 1012, "sorri": 1012, "basemultilayerperceptron": [1012, 1014], "11924": 1012, "macbook": 1012, "9354": 1012, "9372": 1012, "astel": 1012, "10933": 1012, "hansen": 1012, "10471": 1012, "gaurav": [1012, 1013, 1014, 1015, 1016, 1018], "dhingra": [1012, 1013, 1016], "8003": 1012, "jo\u00ebl": 1012, "billaud": 1012, "10059": 1012, "braun": 1012, "9612": 1012, "jonatan": 1012, "samoocha": 1012, "8129": 1012, "margeta": 1012, "k_means_elkan": 1012, "11353": 1012, "11901": 1012, "9875": 1012, "9012": 1012, "11315": 1012, "9041": 1012, "9858": 1012, "artiem": 1012, "krinitsyn": 1012, "9908": 1012, "8617": 1012, "maskani": [1012, 1014, 1015, 1016], "filali": 1012, "konstantino": 1012, "katriopla": 1012, "10774": 1012, "catalfo": 1012, "10795": 1012, "takeshi": [1012, 1017, 1018, 1019], "yoshizawa": 1012, "11082": 1012, "sadhana": 1012, "srinivasan": [1012, 1015], "9731": 1012, "10045": 1012, "fetch_mldata": 1012, "11466": 1012, "6374": 1012, "normalize_compon": [1012, 1014], "11585": 1012, "ivan": [1012, 1013, 1016, 1019], "panico": [1012, 1016], "11420": 1012, "6452": 1012, "walli": 1012, "gauz": 1012, "9492": 1012, "8484": 1012, "9886": 1012, "underflow": [1012, 1017], "10142": 1012, "5956": 1012, "_class_mean": 1012, "_class_cov": 1012, "10898": 1012, "nanxin": 1012, "9832": 1012, "11951": 1012, "r\u00fcdiger": [1012, 1013, 1015], "busch": [1012, 1013, 1015], "9707": 1012, "wan": 1012, "7071": 1012, "9157": 1012, "11176": 1012, "forsyth": 1012, "11542": 1012, "anna": 1012, "9524": 1012, "9723": 1012, "10908": 1012, "10899": 1012, "melderi": 1012, "10101": 1012, "10\u2079": 1012, "9147": 1012, "clae": 1012, "fredrik": 1012, "mannbi": 1012, "10441": 1012, "mayur": 1012, "kulkarni": 1012, "6689": 1012, "nihar": 1012, "sheth": 1012, "11293": 1012, "9656": 1012, "greenhal": 1012, "n_features_to_comput": 1012, "9222": 1012, "hoh": 1012, "9234": 1012, "andrewww": 1012, "8075": 1012, "11211": 1012, "9484": 1012, "dalla": 1012, "card": 1012, "9043": 1012, "10112": 1012, "logistic_regression_path": [1012, 1013], "11724": 1012, "9939": 1012, "westov": 1012, "10998": 1012, "vazelh": [1012, 1013, 1014], "10071": 1012, "10153": 1012, "d\u00f6pfert": 1012, "10095": 1012, "cv_valu": 1012, "10297": 1012, "mabel": [1012, 1016], "10581": 1012, "yacin": 1012, "mazari": 1012, "10687": 1012, "10836": 1012, "aishwarya": 1012, "10397": 1012, "10992": 1012, "11327": 1012, "11905": 1012, "9837": 1012, "10593": 1012, "10610": 1012, "8554": 1012, "9775": 1012, "10827": 1012, "osa": 1012, "8066": 1012, "10587": 1012, "3840": 1012, "niederb\u00fchl": 1012, "9521": 1012, "11124": 1012, "arya": 1012, "11160": 1012, "barkhorn": 1012, "11679": 1012, "pacha": 1012, "10845": 1012, "perez": [1012, 1019], "parra": 1012, "toledano": 1012, "10999": 1012, "memoryerror": [1012, 1016], "11135": 1012, "10377": 1012, "9786": 1012, "10093": 1012, "alexryndin": 1012, "9772": 1012, "9515": 1012, "liddel": 1012, "manh": 1012, "dao": 1012, "9851": 1012, "10280": 1012, "10336": 1012, "haoran": 1012, "basemixtur": [1012, 1013], "10740": 1012, "10869": 1012, "g\u00e9ron": 1012, "9686": 1012, "11310": 1012, "_fit_and_scor": 1012, "11576": 1012, "ronsin": [1012, 1013], "_run_search": 1012, "9599": 1012, "11006": 1012, "11557": 1012, "boucaud": 1012, "iid": 1012, "9085": 1012, "10677": 1012, "zhdanovich": 1012, "10982": 1012, "juliet": 1012, "lawton": 1012, "10928": 1012, "solutu": 1012, "immensu": 1012, "9257": 1012, "8190": 1012, "alcorn": 1012, "9681": 1012, "mottl": [1012, 1013], "10005": 1012, "10346": 1012, "tobia": [1012, 1017, 1019], "10887": 1012, "11136": 1012, "4394": 1012, "9579": 1012, "kober": 1012, "9655": 1012, "bjerr": 1012, "11556": 1012, "11774": 1012, "9456": 1012, "unexpectedli": 1012, "9304": 1012, "11144": [1012, 1013], "9151": 1012, "10521": 1012, "7668": 1012, "9647": 1012, "10195": 1012, "10192": 1012, "11272": 1012, "11467": 1012, "11505": 1012, "giusepp": [1012, 1013], "costa": [1012, 1017], "10210": 1012, "11520": 1012, "11011": 1012, "11005": 1012, "11308": 1012, "11206": 1012, "11306": 1012, "10437": 1012, "lucija": 1012, "gregov": 1012, "10452": 1012, "10181": 1012, "nirvan": [1012, 1016], "anjirbag": 1012, "9399": 1012, "10913": 1012, "rodrigo": 1012, "agundez": 1012, "10458": 1012, "9816": 1012, "newei": 1012, "11042": 1012, "11235": 1012, "active_features_": 1012, "feature_indices_": 1012, "n_values_": 1012, "9726": 1012, "10829": 1012, "gilberto": 1012, "olimpio": 1012, "10655": 1012, "python2": 1012, "10412": 1012, "jiongyan": 1012, "9497": 1012, "8361": 1012, "neo": 1012, "_criterion": 1012, "classificationcriterion": 1012, "regressioncriterion": 1012, "10325": 1012, "camil": 1012, "stap": 1012, "basedecisiontre": [1012, 1013, 1016], "10536": 1012, "ohayon": [1012, 1013, 1020], "11464": 1012, "stott": 1012, "10663": 1012, "10229": 1012, "11553": 1012, "10881": 1012, "sevin": 1012, "ridge_regress": [1012, 1013, 1019], "10306": 1012, "siebert": 1012, "11741": 1012, "11166": 1012, "11010": 1012, "lami": 1012, "11596": 1012, "marcu": 1012, "voss": 1012, "9569": 1012, "12462": 1012, "zachariah": 1012, "10474": 1012, "10500": 1012, "9701": 1012, "9378": 1012, "check_set_param": 1012, "7738": 1012, "alvin": 1012, "chiang": 1012, "8102": 1012, "ankita": 1012, "sinha": 1012, "check_methods_subset_invari": [1012, 1018], "10428": 1012, "check_sample_weights_pandas_seri": 1012, "11558": 1012, "211217613": 1012, "absolutelynowarranti": 1012, "richi": 1012, "halford": [1012, 1019], "adelr": 1012, "adityadaflapurkar": 1012, "aidan": 1012, "fitzgerald": 1012, "aishgrt1": 1012, "akash": 1012, "shivram": 1012, "lenail": [1012, 1016], "egg": 1012, "diaz": 1012, "amanda": [1012, 1015, 1016, 1017, 1018], "aniruddha": 1012, "annaayzenshtat": 1012, "antonio": [1012, 1014], "quinonez": 1012, "anubhav": 1012, "marwaha": 1012, "arik": 1012, "pamnani": 1012, "ozga": 1012, "arunava": 1012, "geron": [1012, 1017, 1018], "ayush": [1012, 1017], "bangda": 1012, "bastian": 1012, "venthur": 1012, "benn": 1012, "koonc": 1012, "cclauss": 1012, "chadi": 1012, "kamar": 1012, "holdgraf": 1012, "hirsch": 1012, "hogan": 1012, "cnx": 1012, "cwitt": 1012, "ferreira": [1012, 1017, 1018], "gomez": [1012, 1019], "klevebr": 1012, "shwed": 1012, "mohn": [1012, 1016], "danil": 1012, "baibak": [1012, 1013], "beach": 1012, "pickup": 1012, "derek": 1012, "niederhut": [1012, 1014], "dilutedsauc": 1012, "dlovel": 1012, "dor": 1012, "dougla": 1012, "duhaim": 1012, "tuzova": 1012, "eunji": 1012, "farahsae": 1012, "raimundo": 1012, "fenx": 1012, "frankhui": 1012, "franz": 1012, "wompner": 1012, "freija": 1012, "descamp": 1012, "frsi": 1012, "calvo": [1012, 1013], "georgi": [1012, 1015], "peev": [1012, 1015], "gkevinyen5418": 1012, "vermeil": 1012, "hongh": 1012, "hossein": [1012, 1013, 1014], "pourbozorg": [1012, 1013, 1014], "hristo": [1012, 1019], "hunan": 1012, "rostomyan": 1012, "iampat": 1012, "jaewon": 1012, "malcolm": 1012, "jami": 1012, "wolosonovich": 1012, "jeb": 1012, "bearer": 1012, "jinkun": 1012, "jjabl": 1012, "johnstott": 1012, "jotasi": 1012, "julietcl": 1012, "shenk": 1012, "karl": 1012, "kasper": 1012, "primdal": 1012, "lauritzen": 1012, "ksemb": 1012, "kuai": [1012, 1013], "kyeongpil": 1012, "kang": [1012, 1014], "kye": 1012, "kyledrogo": 1012, "l\u00e9o": 1012, "liutong": 1012, "lizao": 1012, "lkjcalc": 1012, "louib": [1012, 1013], "luciano": [1012, 1019], "luke": 1012, "persola": 1012, "markiwanchyshyn": 1012, "marsgui": 1012, "gubri": [1012, 1013], "koko": [1012, 1018, 1019], "copeland": [1012, 1013], "meghann": [1012, 1014], "minh": 1012, "jamaoui": [1012, 1013, 1016], "mohammad": [1012, 1013], "shahebaz": 1012, "muayyad": 1012, "alsadi": 1012, "nabarun": 1012, "pal": [1012, 1018], "narendran": 1012, "santhanam": 1012, "suh": 1012, "eng": 1012, "av": 1012, "nicolau": 1012, "werneck": 1012, "titov": [1012, 1014, 1017, 1018], "nilesh": 1012, "kevlani": 1012, "notmatthancock": [1012, 1014], "nzw": 1012, "oren": 1012, "milman": 1012, "osaid": 1012, "rehman": 1012, "nasir": 1012, "fernand": [1012, 1018, 1019], "olden": 1012, "pierreablin": 1012, "pietruh": 1012, "pinaki": 1012, "nath": 1012, "chowdhuri": [1012, 1018], "piotr": [1012, 1013], "szyma\u0144ski": [1012, 1013], "pradeep": [1012, 1013], "raamana": [1012, 1013], "pravar": 1012, "mahajan": [1012, 1014], "qingi": 1012, "rajendra": 1012, "arora": [1012, 1019], "rankylau": 1012, "kosobrodov": 1012, "rragundez": 1012, "sagnik": 1012, "bhattacharya": 1012, "radhakrishnan": 1012, "saqib": 1012, "nizam": 1012, "shamsi": 1012, "satish": 1012, "gigant": [1012, 1014, 1019], "flennerhag": 1012, "sebastien": 1012, "shalil": 1012, "awalei": 1012, "shangwu": [1012, 1013], "sharad": 1012, "vijalapuram": 1012, "shenhanc78": 1012, "rastogi": 1012, "siftikha": 1012, "sinclert": 1012, "p\u00e9rez": 1012, "solutusimmensu": 1012, "somya": 1012, "anand": [1012, 1016], "srajan": 1012, "paliw": 1012, "sriharsha": [1012, 1013], "hatwar": [1012, 1013], "mcdowel": 1012, "syonekura": 1012, "takanori": 1012, "hayashi": 1012, "tarcusx": 1012, "theriley106": 1012, "heavei": 1012, "augspurg": [1012, 1014], "trishnendu": 1012, "ghorai": 1012, "twosigmajab": 1012, "umar": [1012, 1013], "farouk": [1012, 1013], "urvang": [1012, 1014], "patel": [1012, 1014, 1015, 1016, 1018], "vadim": [1012, 1016, 1017], "markovtsev": 1012, "vinit": 1012, "vinod": 1012, "viraj": 1012, "mavani": 1012, "navkal": 1012, "vqean3": [1012, 1013], "vufg": 1012, "wallygauz": 1012, "wdevazelh": 1012, "barnett": 1012, "rosenfeld": 1012, "yime": 1012, "ymazari": 1012, "yufeng": 1012, "griffith": [1012, 1013], "z\u00e9": 1012, "vin\u00edciu": 1012, "zhenq": 1012, "zhiqe": 1012, "xiao": [1012, 1014, 1017, 1018, 1019], "couldn": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "12955": 1013, "klopfer": 1013, "14197": 1013, "14024": 1013, "nicolashug": 1013, "13974": 1013, "hoang": [1013, 1014], "fhoang7": 1013, "14393": 1013, "guillem": [1013, 1014, 1019], "subi": [1013, 1014, 1019], "14087": 1013, "14067": 1013, "stalei": [1013, 1014], "14092": 1013, "14053": 1013, "13947": 1013, "instanci": 1013, "suffient": 1013, "13910": 1013, "13894": 1013, "myatt": [1013, 1014], "min_max_axi": 1013, "13741": 1013, "roddi": [1013, 1014], "macsween": [1013, 1014], "14309": 1013, "13864": 1013, "paresh": [1013, 1014], "13877": 1013, "_sag": 1013, "sag_solv": 1013, "3591": 1013, "13317": 1013, "13157": 1013, "13086": 1013, "cole": 1013, "13485": 1013, "assia": 1013, "benbihi": 1013, "13651": 1013, "reloc": 1013, "13486": 1013, "13427": 1013, "couvreur": [1013, 1014], "9069": 1013, "13835": 1013, "10727": 1013, "wood": 1013, "13250": 1013, "13241": 1013, "12143": 1013, "11650": 1013, "non_negative_factor": [1013, 1015, 1016, 1017], "12988": 1013, "8769": 1013, "11000": 1013, "thibault": 1013, "sejourn": 1013, "changedbehaviourwarn": 1013, "11526": 1013, "6848": 1013, "glemaitr": [1013, 1014, 1016], "11727": 1013, "13266": 1013, "13545": 1013, "sorro": 1013, "12807": 1013, "12513": 1013, "12543": 1013, "storch": 1013, "13260": 1013, "13283": 1013, "13524": 1013, "13174": 1013, "13496": 1013, "13620": 1013, "12436": 1013, "12983": 1013, "13251": 1013, "joshuakennethjon": 1013, "12715": 1013, "13164": 1013, "12834": 1013, "leastsquareserror": 1013, "update_terminal_region": 1013, "6463": 1013, "movelikeriv": 1013, "13193": 1013, "12599": 1013, "13779": 1013, "13780": 1013, "12916": 1013, "13641": 1013, "8478": 1013, "12177": 1013, "12583": 1013, "13601": 1013, "danylo": 1013, "densif": 1013, "13240": 1013, "bartosz": 1013, "13562": 1013, "11646": 1013, "11699": 1013, "make_dataset": 1013, "13336": 1013, "toleranbc": 1013, "11754": 1013, "13397": 1013, "fagan": 1013, "12174": 1013, "12972": 1013, "lucio": 1013, "fernandez": 1013, "arjona": 1013, "coeffeci": 1013, "13279": 1013, "13328": 1013, "13389": 1013, "basesgdclassifi": 1013, "13422": 1013, "cl\u00e9ment": [1013, 1017, 1019], "doumouro": 1013, "unhandl": 1013, "13363": 1013, "12821": 1013, "13350": 1013, "j\u00e9r\u00f4me": [1013, 1014, 1015], "dock\u00e8": [1013, 1014, 1015], "9907": 1013, "12232": 1013, "sangeeth": 1013, "11179": 1013, "13151": 1013, "12568": 1013, "8216": 1013, "romuald": 1013, "menuet": 1013, "12732": 1013, "12334": 1013, "13607": 1013, "12855": 1013, "pawel": 1013, "sendyk": 1013, "13628": 1013, "13447": 1013, "10580": 1013, "sandra": [1013, 1019], "mitrov": 1013, "13554": 1013, "celelibi": 1013, "13142": 1013, "11354": 1013, "12613": 1013, "12669": 1013, "torrella": [1013, 1014], "12861": 1013, "8773": 1013, "13366": 1013, "fournier": 1013, "10440": 1013, "12222": 1013, "10058": 1013, "chiotelli": 1013, "12279": 1013, "12582": 1013, "my_pipelin": 1013, "2568": 1013, "make_": 1013, "11364": 1013, "baze": 1013, "petrushev": 1013, "__len__": 1013, "13439": 1013, "12908": 1013, "drew": 1013, "13253": 1013, "12116": 1013, "12197": 1013, "12251": 1013, "float16": 1013, "13007": 1013, "raffaello": 1013, "baluyot": 1013, "13333": 1013, "13459": 1013, "hunter": 1013, "mcgushion": 1013, "8508": 1013, "6261": 1013, "vettigli": 1013, "justglow": 1013, "12300": 1013, "11458": 1013, "mitar": 1013, "milutinov": 1013, "12344": 1013, "13549": 1013, "warn_on_dtyp": 1013, "check_pairwise_arrai": 1013, "13382": 1013, "prathmesh": 1013, "saval": 1013, "11705": 1013, "11973": 1013, "our_rand_r": 1013, "madhura": [1013, 1015, 1016, 1019], "parikh": [1013, 1018, 1019, 1020], "13531": 1013, "check_fit_idempot": 1013, "alberto": [1013, 1017, 1018], "torr": 1013, "amourav": 1013, "assiaben": 1013, "micha\u0142owski": 1013, "brentfagan": 1013, "chenal": [1013, 1014, 1016], "choe": 1013, "drewmjohnston": 1013, "dror": 1013, "atariah": 1013, "esvhd": 1013, "falak": 1013, "gandenberg": 1013, "luqi": 1013, "jf": 1013, "kulbear": 1013, "leandro": [1013, 1017], "hermida": [1013, 1017], "luk": 1013, "manimaran": [1013, 1015, 1016, 1017, 1018], "gaido": 1013, "marinelm": 1013, "masstran": 1013, "roeschk": 1013, "aftab": 1013, "abdela": 1013, "ibraheem": 1013, "mwestt": 1013, "iijima": 1013, "oresti": 1013, "osman": [1013, 1019], "flanagan": [1013, 1014], "soriano": 1013, "peai": 1013, "pim": 1013, "haan": 1013, "raf": 1013, "rajdeep": 1013, "dua": 1013, "ra\u00fal": 1013, "garc\u00eda": [1013, 1014, 1019], "lekhwani": 1013, "varma": 1013, "shiyu": 1013, "duan": [1013, 1015], "smari": [1013, 1014, 1015], "st\u00e9phane": [1013, 1014, 1018, 1019], "surgan12": 1013, "thibsej": 1013, "xhan": 1013, "xinyuliu12": 1013, "zayd": 1013, "hammoudeh": 1013, "16397": [1014, 1015], "16500": 1014, "16505": 1014, "16076": 1014, "shack": [1014, 1015, 1016], "15930": 1014, "inder128": 1014, "15810": 1014, "15898": 1014, "gargsya": 1014, "15933": 1014, "15760": 1014, "15888": 1014, "15936": 1014, "dizietasahi": 1014, "15879": 1014, "bibhash": [1014, 1015], "chandra": [1014, 1015, 1018], "mitra": [1014, 1015, 1019], "15937": 1014, "blyston": [1014, 1015], "15863": 1014, "abstractmethod": 1014, "_check_x": 1014, "basenb": 1014, "15996": 1014, "brigitta": [1014, 1015, 1016, 1020], "sip\u0151cz": [1014, 1015, 1016, 1020], "15751": 1014, "tirth": [1014, 1015], "15868": 1014, "nikla": [1014, 1015], "smedemark": 1014, "marguli": 1014, "15797": 1014, "15947": 1014, "revamp": 1014, "14849": 1014, "_name_estim": 1014, "_gb": 1014, "facto": 1014, "_birch": 1014, "9250": 1014, "12927": 1014, "deprecationwarn": 1014, "interfer": 1014, "hinder": 1014, "15080": 1014, "14464": 1014, "13575": 1014, "10482": 1014, "13726": 1014, "shuzh": 1014, "9288": 1014, "15057": 1014, "korolev": 1014, "15120": 1014, "7943": 1014, "12303": 1014, "14510": 1014, "14890": 1014, "miguel": 1014, "cabrera": 1014, "14544": 1014, "15304": 1014, "jaim": 1014, "ferrando": 1014, "huerta": 1014, "12068": 1014, "12145": 1014, "13609": 1014, "camila": 1014, "williamson": 1014, "15661": 1014, "15160": 1014, "14259": 1014, "14764": 1014, "14740": 1014, "st\u00e9phan": 1014, "tulken": 1014, "14623": 1014, "sarra": 1014, "habchi": 1014, "15257": 1014, "willocx": 1014, "12650": 1014, "13960": 1014, "multiouput": 1014, "14908": 1014, "martina": [1014, 1016], "vila": [1014, 1016], "15382": 1014, "14933": 1014, "15138": 1014, "cusick": 1014, "14406": 1014, "14012": 1014, "faouzi": [1014, 1015], "13769": 1014, "14194": 1014, "least_absolute_devi": [1014, 1016, 1017], "13896": 1014, "13933": 1014, "14710": 1014, "categorical_crossentropi": [1014, 1018], "14869": 1014, "14682": 1014, "hancock": 1014, "5963": 1014, "pablo": [1014, 1017, 1018], "dubou": 1014, "14287": 1014, "15375": 1014, "14305": 1014, "14114": 1014, "15084": 1014, "14294": 1014, "14907": 1014, "14602": 1014, "chawla": 1014, "vectorizermixin": 1014, "14430": 1014, "strip_accents_unicod": 1014, "15100": 1014, "gradi": 1014, "overflowerror": 1014, "15463": 1014, "norvan": 1014, "sahin": 1014, "14520": 1014, "11635": 1014, "alec": 1014, "13704": 1014, "15557": 1014, "14378": 1014, "masashi": [1014, 1016], "shibata": 1014, "ashim": 1014, "bhattarai": 1014, "15010": 1014, "skip_comput": 1014, "13773": 1014, "14356": 1014, "15393": 1014, "venkatachalam": [1014, 1015, 1016, 1017, 1018], "14646": 1014, "14028": 1014, "15429": 1014, "14706": 1014, "14108": 1014, "14170": 1014, "14296": 1014, "13618": 1014, "13995": 1014, "14458": 1014, "14591": 1014, "14864": 1014, "15044": 1014, "15086": 1014, "15038": 1014, "15082": 1014, "13213": 1014, "14647": 1014, "linalgerror": 1014, "13393": 1014, "13707": 1014, "training_data_": 1014, "14357": 1014, "14900": 1014, "socastro": 1014, "9951": 1014, "14936": 1014, "15083": 1014, "12789": 1014, "15274": 1014, "13938": 1014, "15049": 1014, "toccac": 1014, "ptocca": 1014, "13231": 1014, "dong": 1014, "13467": 1014, "14595": 1014, "14865": 1014, "l\u00e9onard": [1014, 1019], "binet": [1014, 1019], "14732": 1014, "14417": 1014, "15625": 1014, "12258": 1014, "14898": 1014, "matcovici": 1014, "14593": 1014, "reboul": 1014, "14549": 1014, "14704": 1014, "15096": 1014, "14629": 1014, "15488": 1014, "15490": 1014, "12569": 1014, "bicker": 1014, "9597": 1014, "wenbo": [1014, 1016], "zhao": [1014, 1016, 1017, 1018, 1019], "14336": 1014, "dexter": 1014, "9274": 1014, "perri": 1014, "13806": 1014, "ana\u00ebl": 1014, "beaugnon": 1014, "15119": 1014, "15053": 1014, "13290": 1014, "13987": 1014, "_pairwis": [1014, 1016], "13925": 1014, "robson": 1014, "15524": 1014, "xun": [1014, 1016], "12557": 1014, "border": 1014, "14286": 1014, "15099": 1014, "baselibsvm": 1014, "_sparse_fit": 1014, "14894": 1014, "danna": 1014, "naser": 1014, "12887": 1014, "15028": 1014, "guan": 1014, "14381": 1014, "11232": 1014, "sievert": 1014, "10815": 1014, "14035": 1014, "14475": 1014, "14538": 1014, "14872": 1014, "upcast": [1014, 1018], "15094": 1014, "choose_check_classifiers_label": 1014, "enforce_estimator_tags_i": 1014, "mock": 1014, "mockdatafram": 1014, "checkingclassifi": 1014, "newton_cg": 1014, "random_choice_csc": 1014, "fast_dict": 1014, "parallel_help": 1014, "14902": 1014, "14971": 1014, "nep": 1014, "14702": 1014, "13013": 1014, "13875": 1014, "14680": 1014, "check_classifier_multioutput": 1014, "check_regressor_multioutput": 1014, "13392": 1014, "rok": 1014, "mihevc": 1014, "check_transformer_data_not_an_arrai": 1014, "mro": [1014, 1015], "14884": 1014, "alphonsu": 1014, "abbi": [1014, 1015], "popa": [1014, 1015], "abdur": 1014, "rahmaan": 1014, "janhang": 1014, "abenbihi": 1014, "abhinav": [1014, 1017], "sagar": 1014, "jana": 1014, "lagat": 1014, "alessandro": [1014, 1016, 1019], "surac": 1014, "siqueira": 1014, "alexgoryainov": 1014, "itk": [1014, 1015, 1016], "alexshack": [1014, 1015, 1016], "akinkunl": 1014, "kaseorg": 1014, "maldonado": [1014, 1017], "angela": [1014, 1015, 1019], "ambroz": [1014, 1015], "anisha": 1014, "keshavan": 1014, "gutierrez": 1014, "anuja": 1014, "archana": [1014, 1016], "alva": 1014, "arnaudstiegl": 1014, "arpanchowdhri": 1014, "ashimb9": 1014, "ayomid": 1014, "bamidel": 1014, "baran": 1014, "buluttekin": 1014, "barrycg": 1014, "bill": [1014, 1015], "mill": 1014, "biswadip": 1014, "mandal": 1014, "blackd0t": 1014, "barklei": 1014, "c56poni": 1014, "camilaagw": 1014, "cartman_nabana": 1014, "catajara": 1014, "cgsavard": [1014, 1015], "vesteghem": 1014, "dakota": 1014, "grusak": 1014, "datenbergwerk": 1014, "dormagen": 1014, "deeplook": 1014, "drgfreeman": 1014, "cashman": 1014, "edvardlindelof": 1014, "ndirangu": [1014, 1018], "eunseop": 1014, "jeong": 1014, "fanni": 1014, "federicopisanu": 1014, "divo": 1014, "flaviomorelli": 1014, "francidona": 1014, "franco": 1014, "luqu": 1014, "freder": 1014, "haas": 1014, "g0g0gadget": 1014, "altai": 1014, "vale": 1014, "rio": [1014, 1016, 1017, 1018], "ganevgv": 1014, "gdex1": 1014, "getgaurav2": 1014, "gideon": 1014, "sonoiya": 1014, "gpapadok": [1014, 1018], "mogavero": 1014, "h4dr1en": 1014, "hadshirt": 1014, "hailei": [1014, 1015], "nguyen": [1014, 1015, 1018, 1019], "hannah": [1014, 1016, 1018], "bruce": [1014, 1015], "macdonald": [1014, 1015], "honglu": 1014, "ingrid": 1014, "spielman": 1014, "a16": [1014, 1015], "jaehong": 1014, "jai": [1014, 1018], "jeromedock": 1014, "jesper": 1014, "dramsch": 1014, "joanna": 1014, "ortiz": 1014, "kanika": 1014, "sabharw": 1014, "katarina": [1014, 1016], "slama": [1014, 1016], "kellycarmodi": 1014, "eth": 1014, "kensuk": 1014, "arai": 1014, "kesshi": [1014, 1015], "kevad": 1014, "lofti": [1014, 1015], "winata": [1014, 1016], "sheng": 1014, "dolmatov": 1014, "kirthi": 1014, "shankar": 1014, "sivamani": 1014, "katyal": 1014, "lakshmi": 1014, "krishnan": 1014, "lalliacqua": [1014, 1017], "lbfin": 1014, "loopym": 1014, "lostcoast": 1014, "huynh": [1014, 1016], "lrjball": [1014, 1015], "roeder": 1014, "maggiecheg": [1014, 1018], "maithreyi": 1014, "venkatesh": 1014, "maltimor": 1014, "maocx": 1014, "douriez": [1014, 1015], "oywa": 1014, "aladago": 1014, "mbillingr": 1014, "clare": 1014, "micah": 1014, "miguelbarao": 1014, "mina": [1014, 1015], "naghshhnejad": [1014, 1015], "motmoti": 1014, "mschaffenroth": 1014, "natasha": 1014, "nezar": 1014, "nidhin": 1014, "pattaniyil": 1014, "nishan": 1014, "mann": 1014, "nitya": 1014, "mandyam": 1014, "novaya": [1014, 1017], "nxorabl": 1014, "oleg": 1014, "stikhin": 1014, "omar": [1014, 1019, 1020], "saleem": 1014, "panpiort8": [1014, 1016], "paula": [1014, 1015], "poorna": [1014, 1016], "pspachtholz": [1014, 1015, 1016], "qdeffens": [1014, 1017], "garg": [1014, 1015], "rapha\u00ebl": 1014, "bournhonesqu": 1014, "reza": 1014, "gharibi": 1014, "payn": 1014, "rlm": 1014, "juergen": [1014, 1019], "sanjabi": 1014, "ruchitagard": 1014, "ruth": 1014, "waithera": 1014, "sackei": 1014, "samesh": [1014, 1015], "lakhotia": [1014, 1015], "sewook": 1014, "dare": 1014, "shreya": 1014, "simoncw": 1014, "smujjiga": 1014, "s\u00f6nke": 1014, "behrend": 1014, "soumirai": 1014, "steinfurt": [1014, 1016], "cowlei": 1014, "th0rwa": [1014, 1015], "theoptip": [1014, 1015], "theotheo": 1014, "thierno": 1014, "ibrahima": 1014, "diop": 1014, "schmitt": [1014, 1015], "tilen": 1014, "kusterl": 1014, "timsaur": 1014, "tola": 1014, "topisan": 1014, "ttang131": 1014, "veerlosar": 1014, "luzgin": 1014, "jeanselm": 1014, "lostanlen": 1014, "vnherdeiro": 1014, "wendi": 1014, "willdarnel": 1014, "wolframalpha": 1014, "xcjason": 1014, "martian": 1014, "xsat": 1014, "yinglr": 1014, "yokasr": 1014, "maxin": [1014, 1015], "yulia": 1014, "zamrii": 1014, "feng": [1014, 1016, 1017, 1018], "17959": 1015, "17848": 1015, "17742": 1015, "17995": 1015, "thomaz": 1015, "santana": [1015, 1018], "dsouza": [1015, 1016, 1017, 1018], "17433": 1015, "17985": 1015, "multinomialdevi": 1015, "logloss": [1015, 1019], "17694": 1015, "rempfler": 1015, "tsutomu": 1015, "kusanagi": [1015, 1017], "17357": 1015, "18016": 1015, "x_copi": 1015, "17914": 1015, "15730": 1015, "forrest": [1015, 1016], "17309": 1015, "swier": [1015, 1016], "heer": 1015, "17812": 1015, "bruno": [1015, 1016, 1017], "idl": 1015, "17210": 1015, "17235": 1015, "17204": 1015, "changed_onli": 1015, "17205": 1015, "15005": [1015, 1017], "slep009": [1015, 1017, 1018], "estimator_samples_": 1015, "16149": 1015, "11950": 1015, "11514": 1015, "16075": 1015, "16484": 1015, "agglomerativecluclust": 1015, "16257": 1015, "simona": [1015, 1016, 1017], "maggio": [1015, 1016, 1017], "16801": 1015, "rcwoolston": 1015, "16431": 1015, "14048": 1015, "15963": 1015, "16084": 1015, "15950": 1015, "stephani": 1015, "15980": 1015, "wconnel": 1015, "15709": 1015, "15707": 1015, "maciej": 1015, "mikulski": 1015, "16006": 1015, "rushabh": 1015, "vasani": 1015, "streamhandl": 1015, "logger": 1015, "handler": 1015, "16451": 1015, "16280": 1015, "16837": 1015, "wornbb": 1015, "15669": 1015, "chaitanya": 1015, "16224": 1015, "schwetlick": [1015, 1016], "gelavizh": 1015, "ahmadi": 1015, "marija": [1015, 1016], "vlajic": [1015, 1016], "wheeler": [1015, 1016], "16841": 1015, "16655": 1015, "16718": 1015, "miotto": 1015, "16981": 1015, "g\u00f3rski": [1015, 1016], "14696": 1015, "14516": 1015, "15582": 1015, "16069": 1015, "bail": 1015, "16183": 1015, "16182": 1015, "santhosh": 1015, "16437": 1015, "hwan": 1015, "cho": 1015, "16539": 1015, "deros": 1015, "16692": 1015, "16663": 1015, "15834": 1015, "santiago": 1015, "mola": 1015, "16103": 1015, "divyaprabha": 1015, "selectormixin": 1015, "16132": 1015, "trimeta": 1015, "15503": 1015, "15782": 1015, "plgreenliru": 1015, "16403": 1015, "narendra": 1015, "mukherje": 1015, "16508": 1015, "15864": 1015, "14300": 1015, "15436": 1015, "15652": 1015, "15179": 1015, "angelaambroz": 1015, "15773": 1015, "15655": 1015, "14848": 1015, "absgrad": 1015, "_newton_cg": 1015, "16266": 1015, "standard_coef_": 1015, "standard_intercept_": 1015, "average_coef_": 1015, "average_intercept_": 1015, "16261": 1015, "brandt": 1015, "16849": 1015, "14264": 1015, "17021": 1015, "16323": 1015, "16362": 1015, "16442": 1015, "parson": [1015, 1017], "rick": 1015, "mackenbach": 1015, "16993": 1015, "emit": 1015, "15622": 1015, "mors": 1015, "15918": 1015, "kubin": 1015, "fit_grid_point": 1015, "16401": 1015, "pratama": 1015, "sutiono": 1015, "15953": 1015, "15959": 1015, "16111": 1015, "16090": 1015, "jayaratn": [1015, 1016, 1019], "14075": 1015, "meyer89": 1015, "16117": 1015, "15785": 1015, "16245": 1015, "16585": 1015, "15762": 1015, "16466": 1015, "16632": 1015, "maura": 1015, "pintor": 1015, "battista": 1015, "biggio": 1015, "15946": 1015, "ngshya": 1015, "32767": 1015, "mersenn": 1015, "twister": 1015, "31bit": 1015, "63bit": 1015, "crude": 1015, "postprocessor": 1015, "lemir": 1015, "13511": 1015, "kennel": 1015, "11296": 1015, "15558": 1015, "15806": 1015, "16331": 1015, "batiss": 1015, "15926": 1015, "16021": 1015, "sparsearrai": 1015, "16728": 1015, "uint": 1015, "17032": 1015, "_safe_tag": 1015, "16950": 1015, "15380": 1015, "acitiv": 1015, "16726": 1015, "16112": 1015, "16622": 1015, "17061": 1015, "aleksandra": 1015, "kocot": 1015, "alonso": [1015, 1017], "allend": [1015, 1017], "ana": [1015, 1017], "casado": 1015, "ankit810": 1015, "arunav": 1015, "konwar": 1015, "maingret": 1015, "beier": 1015, "berni": 1015, "bharathi": 1015, "brigi": [1015, 1016], "castachick": 1015, "castor": 1015, "corri": 1015, "bartelheim": 1015, "dani\u00ebl": 1015, "gelder": 1015, "daphn": 1015, "breuer": 1015, "cort": [1015, 1016, 1019], "dbauer9": 1015, "borovikova": 1015, "eln": 1015, "emili": [1015, 1016], "leung": 1015, "evgeni": 1015, "chasnovski": 1015, "fabiana": 1015, "facundo": [1015, 1018], "ferr\u00edn": 1015, "franziska": 1015, "boenisch": 1015, "bolmier": [1015, 1016], "gholdman1": 1015, "gonthier": 1015, "hao": [1015, 1016, 1018, 1019], "chun": [1015, 1016, 1018, 1019], "haoyin": [1015, 1017, 1018], "h\u00e9lion": 1015, "bourboux": 1015, "himanshu": [1015, 1018], "hirofumi": [1015, 1016], "suzuki": [1015, 1016], "huangk10": 1015, "kemenad": 1015, "hye": 1015, "sung": 1015, "indecisiveus": [1015, 1016], "inderjeet": 1015, "jjmistri": 1015, "haitz": [1015, 1017, 1018], "legarreta": [1015, 1017, 1018], "gorro\u00f1o": [1015, 1017, 1018], "judithabk6": 1015, "jumon": 1015, "kathryn": 1015, "krishnachaitanya9": 1015, "gia": 1015, "thuan": 1015, "lkubin": 1015, "lopusz": 1015, "lucgiffon": 1015, "lucyleeow": 1015, "kemk": 1015, "magda": 1015, "zielinska": 1015, "mandi": [1015, 1018], "gu": [1015, 1016, 1018], "manish": 1015, "aradwad": 1015, "maren": [1015, 1016, 1017, 1018, 1019], "westermann": [1015, 1016, 1017, 1018, 1019], "mariana": 1015, "meirel": 1015, "mariel": 1015, "mc4229": 1015, "shoemak": 1015, "micha\u0142": 1015, "s\u0142apek": 1015, "mojca": 1015, "bertoncelj": 1015, "narendramukherje": 1015, "nicolasservel": 1015, "nkish": 1015, "noa": 1015, "tamir": [1015, 1018], "olicairn": 1015, "ur": 1015, "lenz": [1015, 1019], "delanou": 1015, "qizhi": 1015, "quang": 1015, "rachelcjordan": 1015, "raduspaimoc": 1015, "riccardo": 1015, "folloni": 1015, "ritchi": 1015, "rori": 1015, "hartong": 1015, "redden": 1015, "sambhav": 1015, "kothari": 1015, "santhoshbala18": 1015, "sarat": 1015, "addep": 1015, "scibol": 1015, "kie\u00dfl": 1015, "sergiodsr": 1015, "shiki": 1015, "shubh": 1015, "chatterje": 1015, "simonamaggio": [1015, 1016, 1017], "snowhit": 1015, "stareh": 1015, "marsh": 1015, "sunmi": 1015, "yoon": 1015, "talgatomarov": 1015, "tamirlan1": 1015, "nonner": 1015, "vink": [1015, 1017], "tiphain": 1015, "viard": 1015, "titu": 1015, "vachan": 1015, "vandana": 1015, "iyer": 1015, "waelbenamara": 1015, "wderos": 1015, "wenliwyan": 1015, "windber": 1015, "19579": 1016, "19646": 1016, "stopiter": 1016, "19922": 1016, "19732": 1016, "ishikawa": [1016, 1017], "19407": 1016, "ushtanit": [1016, 1017], "19982": 1016, "19939": 1016, "halvic": 1016, "19703": 1016, "sobkevich": 1016, "villaz\u00f3n": 1016, "terraza": 1016, "fonari": [1016, 1017], "19182": 1016, "yosuk": [1016, 1017], "kobayashi": [1016, 1017], "19721": 1016, "19659": 1016, "19211": 1016, "19847": 1016, "xiaoyu": 1016, "chai": [1016, 1019], "19308": 1016, "19234": 1016, "19727": 1016, "delong": [1016, 1017], "transfrom": 1016, "19888": 1016, "19924": 1016, "19271": 1016, "zhaowei": 1016, "19580": 1016, "brice": [1016, 1017], "adamson": 1016, "wil": 1016, "yegelwel": 1016, "css": 1016, "19417": 1016, "19179": 1016, "19126": 1016, "17448": 1016, "17107": 1016, "17546": 1016, "17856": 1016, "17984": 1016, "riedmann": 1016, "francesco": [1016, 1019], "casalegno": 1016, "18052": 1016, "sean": [1016, 1017, 1019], "stallei": 1016, "17937": 1016, "counts_": 1016, "init_size_": 1016, "17864": 1016, "17616": 1016, "18167": 1016, "18256": 1016, "jayratn": 1016, "16392": 1016, "17095": 1016, "18746": 1016, "18525": 1016, "norm_y_weight": 1016, "x_mean_": 1016, "y_mean_": 1016, "x_std_": 1016, "y_std_": 1016, "18768": 1016, "18302": 1016, "md5": 1016, "checksum": 1016, "14800": 1016, "17396": 1016, "jiaxiang": 1016, "17491": 1016, "18280": 1016, "17499": 1016, "17610": 1016, "11064": 1016, "17414": 1016, "18149": 1016, "17679": 1016, "18528": 1016, "villanova": [1016, 1017], "14446": 1016, "18394": 1016, "16985": 1016, "garbag": 1016, "18334": 1016, "multicor": [1016, 1017], "18341": 1016, "egor": 1016, "smirnov": 1016, "18410": 1016, "17702": 1016, "18326": 1016, "changedbehaviorwarn": 1016, "nonblasdotwarn": 1016, "17804": 1016, "17367": 1016, "15427": 1016, "gangesh": 1016, "gudmalwar": 1016, "erin": 1016, "6545": 1016, "17159": 1016, "15361": 1016, "17878": 1016, "17090": 1016, "_check_bounds_param": 1016, "12638": 1016, "lannuzel": 1016, "17526": 1016, "ayako": 1016, "yagi": 1016, "17612": 1016, "srimukh": 1016, "sripada": 1016, "16493": 1016, "darshan": 1016, "15636": 1016, "18987": 1016, "16619": 1016, "16906": 1016, "roei": 1016, "kahni": 1016, "18293": 1016, "16289": 1016, "kishimoto": 1016, "18639": 1016, "13003": 1016, "s\u00e1nchez": 1016, "18545": 1016, "laurenz": 1016, "reitsam": 1016, "17578": 1016, "knox": 1016, "6624": 1016, "marijn": 1016, "vliet": 1016, "18121": 1016, "18607": 1016, "fhaselbeck": 1016, "18622": 1016, "haesun": [1016, 1019], "10493": 1016, "17997": 1016, "maisonneuv": 1016, "17662": 1016, "18278": 1016, "17412": 1016, "16625": 1016, "10591": 1016, "karnowski": 1016, "plot_det_curv": [1016, 1017], "18176": 1016, "10708": 1016, "15007": 1016, "hathidara": 1016, "10711": 1016, "17192": 1016, "avi": [1016, 1017], "17225": 1016, "17569": 1016, "17651": 1016, "mato": 1016, "17777": 1016, "shubhanshu": 1016, "mishra": [1016, 1017], "17826": 1016, "decal": 1016, "willard": 1016, "17935": 1016, "cari": 1016, "goltermann": 1016, "18114": 1016, "18405": 1016, "yakov": 1016, "pchelintsev": 1016, "13900": 1016, "17478": 1016, "teon": 1016, "13204": 1016, "kosic": 1016, "18527": 1016, "18343": 1016, "devi": 1016, "sandeep": 1016, "18595": 1016, "18222": 1016, "18266": 1016, "subrat": 1016, "sahu": 1016, "15126": 1016, "17987": 1016, "17233": 1016, "zolisa": 1016, "bleki": 1016, "histgradientboost": 1016, "18124": 1016, "brocchini": 1016, "armstrong": 1016, "17427": 1016, "17038": 1016, "neighborsbas": [1016, 1019], "17148": 1016, "18691": 1016, "18370": 1016, "18612": 1016, "17603": 1016, "17604": 1016, "17606": 1016, "17608": 1016, "17609": 1016, "17633": 1016, "17661": 1016, "17932": 1016, "16352": 1016, "17759": 1016, "18269": 1016, "17876": 1016, "18429": 1016, "biernat": 1016, "17317": 1016, "17406": 1016, "wick": 1016, "18406": 1016, "17833": 1016, "yashika": 1016, "18510": 1016, "18447": 1016, "16066": 1016, "18682": 1016, "16935": 1016, "17193": 1016, "16335": 1016, "14982": 1016, "11682": 1016, "patric": [1016, 1017], "15763": 1016, "16530": 1016, "shuhua": 1016, "17386": 1016, "17187": 1016, "x_idx_sort": 1016, "17614": 1016, "check_methods_sample_order_invari": [1016, 1018], "17598": 1016, "ngo": 1016, "17992": 1016, "endian": 1016, "17644": 1016, "18508": 1016, "abo7atm": 1016, "spannbauer": 1016, "deodhar": 1016, "alexandracraciun": 1016, "amy12xx": 1016, "tiwari": 1016, "choraria": 1016, "subramaniyan": 1016, "kushwaha": 1016, "atsushi": [1016, 1017], "nukariya": [1016, 1017], "aura": 1016, "autoviz": 1016, "auto_viml": 1016, "avinash": 1016, "anak": 1016, "barankaraku": 1016, "barberogaston": 1016, "beatrizsmg": 1016, "mainy": 1016, "bossan": [1016, 1018, 1019], "pedigo": [1016, 1017], "bhavika": 1016, "devnani": 1016, "biprateep": 1016, "dei": 1016, "bmaisonn": 1016, "byron": 1016, "ceethinwa": [1016, 1017], "chaitanyamog": 1016, "clmbst": 1016, "coelhudo": 1016, "crispinlogan": [1016, 1019, 1020], "cristina": 1016, "mula": 1016, "darioka": [1016, 1018, 1019], "declan": 1016, "neill": 1016, "deeksha": 1016, "madan": 1016, "fiegel": [1016, 1017, 1019], "khoo": 1016, "eschibli": 1016, "fran": [1016, 1017, 1018], "larsson": [1016, 1017, 1018], "sheni": 1016, "genvalen": [1016, 1017, 1018, 1019], "kiragu": 1016, "gesa": 1016, "stupperich": 1016, "ghislain": 1016, "vaillant": 1016, "gim": 1016, "seng": 1016, "chevali": 1016, "bohl": [1016, 1018], "schole": 1016, "hitesh": 1016, "somani": 1016, "hoda1394": 1016, "moin": 1016, "hugorichard": 1016, "isuru": 1016, "wiryadi": 1016, "j0rd1smit": 1016, "jaehyun": 1016, "ahn": 1016, "tae": 1016, "hoctor": 1016, "vese": 1016, "jeevan": 1016, "jeroenpeterbo": 1016, "jhay": 1016, "jigna": 1016, "panchal": 1016, "jim0421": 1016, "joaquin": 1016, "gorb": 1016, "moya": 1016, "kartik": 1016, "chugh": 1016, "kaylani2": 1016, "kendrick": 1016, "cetina": 1016, "kenni": 1016, "isakov": 1016, "koki": 1016, "nishihara": 1016, "krum": [1016, 1018], "arnaudov": [1016, 1018], "oldja": 1016, "guitton": 1016, "mariam": 1016, "l\u00f6ning": 1016, "scheubrein": 1016, "megasari": 1016, "mathschi": 1016, "giudic": 1016, "milan": 1016, "straka": 1016, "muoki": 1016, "caleb": 1016, "haiat": 1016, "nadia": 1016, "tahiri": 1016, "ph": 1016, "hamada": 1016, "neil": 1016, "botelho": 1016, "nil": 1016, "noelano": 1016, "oj_lappi": 1016, "oleh": [1016, 1018], "kozynet": [1016, 1018], "pankaj": 1016, "jindal": 1016, "pardeep": 1016, "parthiv": 1016, "chigurupati": 1016, "pgithub": 1016, "probinette4": 1016, "pwalchessen": 1016, "rachel": [1016, 1019], "fischoff": 1016, "toshniw": 1016, "rafei": 1016, "iqbal": 1016, "rahul": 1016, "jakhar": 1016, "rachum": 1016, "ramyanp": [1016, 1017], "rauwuckl": 1016, "ravi": [1016, 1019], "kiran": 1016, "boggavarapu": 1016, "rishi": 1016, "advani": 1016, "rithvik": 1016, "romijnd": 1016, "tavenard": 1016, "rubi": 1016, "werman": 1016, "ryotaro": 1016, "tsukada": 1016, "sadak": 1016, "khandelw": 1016, "ezebunandu": 1016, "kimbinyi": 1016, "shail": 1016, "keller": 1016, "shao": [1016, 1017, 1018], "shooter23": [1016, 1017], "soledad": 1016, "galli": 1016, "subrat93": 1016, "sunitha": 1016, "selvan": 1016, "kusanagi2": 1016, "terenc": [1016, 1017], "honl": [1016, 1017], "thij": [1016, 1019, 1020], "thomas9292": 1016, "thorben": 1016, "tijanajovanov": 1016, "timo": 1016, "tnwei": 1016, "ufmay": 1016, "umberto": 1016, "lupo": 1016, "vika": [1016, 1018], "viniciu": [1016, 1017], "fuck": [1016, 1017], "violeta": 1016, "watchtheblur": 1016, "willpeppo": 1016, "xethan": 1016, "qianm": 1016, "yue": 1016, "yutaro": 1016, "ikeda": 1016, "zacchari": 1016, "ramzi": 1016, "zoj613": 1016, "21271": 1017, "21833": 1017, "siavash": 1017, "rezazadeh": 1017, "19210": 1017, "21295": 1017, "22050": 1017, "21991": 1017, "19869": 1017, "21481": [1017, 1018], "andr\u00e9": [1017, 1018], "babino": [1017, 1018], "disconnect": 1017, "21915": 1017, "21694": 1017, "minknowski": 1017, "21741": 1017, "21871": 1017, "21845": 1017, "21517": 1017, "21917": 1017, "21552": 1017, "escap": [1017, 1019], "21493": 1017, "21199": 1017, "20638": 1017, "bohn\u00e9": 1017, "21179": 1017, "21195": 1017, "21130": 1017, "20761": 1017, "21251": 1017, "min_idf": 1017, "max_idf": 1017, "20752": 1017, "alek": [1017, 1018], "lefebvr": [1017, 1018], "21340": 1017, "21093": 1017, "21351": 1017, "cve": 1017, "28975": 1017, "21336": 1017, "_check_sample_weight": 1017, "only_non_neg": 1017, "20880": 1017, "andr\u00e1": [1017, 1018, 1019], "if_delegate_has_method": [1017, 1018], "21145": 1017, "zahlii": 1017, "21389": 1017, "20002": 1017, "19310": 1017, "least_squar": 1017, "19733": 1017, "lad": 1017, "absolute_loss": 1017, "20165": 1017, "18444": 1017, "18010": 1017, "threadsaf": 1017, "18736": 1017, "17443": 1017, "19641": 1017, "20087": 1017, "fauchereau": 1017, "19002": 1017, "19052": 1017, "yusuk": 1017, "nagasaka": 1017, "17622": 1017, "19024": 1017, "franki": 1017, "robertson": 1017, "20117": 1017, "natchiappan": [1017, 1018], "19883": 1017, "20597": 1017, "20899": 1017, "20200": 1017, "fit_": 1017, "partial_fit_": 1017, "19297": 1017, "20560": 1017, "18393": 1017, "bittarello": 1017, "19263": 1017, "19244": 1017, "18459": 1017, "nd": 1017, "18898": 1017, "ora": 1017, "phongpanagnam": 1017, "21080": 1017, "ledoit_wolf_shrinkag": 1017, "20416": 1017, "defoi": 1017, "20583": 1017, "19365": 1017, "ateif": 1017, "sara": 1017, "19669": 1017, "importlib": 1017, "pyoxid": 1017, "20297": 1017, "20209": 1017, "19011": 1017, "20729": 1017, "12069": 1017, "19046": 1017, "surya": [1017, 1018], "18433": 1017, "19198": 1017, "19159": 1017, "beno\u00eet": 1017, "mal\u00e9zieux": 1017, "19908": 1017, "20512": 1017, "20960": 1017, "cgroup": [1017, 1018], "quota": [1017, 1018], "20477": 1017, "19799": 1017, "19564": 1017, "19836": 1017, "19162": 1017, "10096": 1017, "fenil": 1017, "suchak": 1017, "20159": 1017, "murata": [1017, 1018], "20534": 1017, "19296": 1017, "19035": 1017, "19520": 1017, "18964": 1017, "19401": 1017, "relova": 1017, "17169": 1017, "dmytro": 1017, "lituiev": 1017, "20380": 1017, "pulido": 1017, "felip": [1017, 1018, 1019, 1020], "bidu": [1017, 1018], "rutter": 1017, "20515": 1017, "carsten": 1017, "allefeld": 1017, "19568": 1017, "shyam": 1017, "20207": 1017, "tomohiro": 1017, "endo": 1017, "20161": 1017, "shuhei": 1017, "kayawari": 1017, "arka204": [1017, 1019], "20431": 1017, "pfaffel": 1017, "19428": 1017, "hamoumi": 1017, "19411": 1017, "20959": 1017, "20554": 1017, "xiangyin": 1017, "kong": 1017, "9978": 1017, "10027": 1017, "16449": 1017, "20231": 1017, "naka": 1017, "19571": 1017, "20155": 1017, "oura": [1017, 1018, 1019], "19004": 1017, "midvidi": 1017, "19055": 1017, "19172": 1017, "19426": 1017, "19499": 1017, "strubel": 1017, "19616": 1017, "19391": 1017, "19390": 1017, "linearmodel": 1017, "17743": 1017, "17772": 1017, "17746": 1017, "17785": 1017, "17750": 1017, "17769": 1017, "20683": 1017, "19491": 1017, "19472": 1017, "shortest_path": 1017, "20531": 1017, "19415": 1017, "17036": 1017, "20326": 1017, "uttam": 1017, "9843": 1017, "19643": 1017, "attard": 1017, "19784": 1017, "18328": 1017, "20312": 1017, "divyanshu": 1017, "deoli": 1017, "18543": 1017, "20552": 1017, "19278": 1017, "20030": 1017, "tingshan": 1017, "18649": 1017, "rodion": 1017, "martynov": 1017, "20619": 1017, "baseshufflesplit": 1017, "20056": 1017, "pabloduque0": 1017, "prematur": 1017, "20904": 1017, "tomasz": 1017, "jakubek": [1017, 1018], "18925": 1017, "poznik": [1017, 1018, 1019], "18842": 1017, "19473": 1017, "jiefangxuanyan": 1017, "20072": 1017, "20842": 1017, "mart\u00edn": [1017, 1018], "19631": 1017, "19790": 1017, "flynn": [1017, 1019], "18368": 1017, "19483": 1017, "20526": 1017, "19069": 1017, "19041": 1017, "20250": 1017, "20652": 1017, "19934": 1017, "gleb": [1017, 1019, 1020], "levitskii": 1017, "19734": 1017, "robinson": 1017, "19752": 1017, "zhehao": [1017, 1018, 1019], "19527": 1017, "19788": 1017, "19356": 1017, "makoeppel": 1017, "19879": 1017, "19906": 1017, "20727": 1017, "20961": 1017, "n_input_features_": 1017, "20240": 1017, "20843": 1017, "18959": 1017, "wstate": 1017, "20023": 1017, "19336": 1017, "20272": 1017, "19459": 1017, "bezuidenhout": 1017, "clifford": 1017, "akai": 1017, "nettei": 1017, "19948": 1017, "20657": 1017, "19766": 1017, "propreti": 1017, "20385": 1017, "_weighted_percentil": 1017, "huberlossfunct": 1017, "20528": 1017, "_safe_index": 1017, "20673": 1017, "is_scalar_nan": 1017, "assert_warn": 1017, "assert_warns_messag": 1017, "20521": 1017, "abdulelah": 1017, "mesfer": 1017, "adrian": [1017, 1018, 1019], "garcia": 1017, "badaracco": 1017, "sad\u0142ocha": 1017, "rubial": 1017, "alessia": 1017, "marcolini": 1017, "alihan": 1017, "zihna": 1017, "alin": 1017, "amol": 1017, "deshmukh": 1017, "pessoa": 1017, "anavelyz": 1017, "ashish": 1017, "ashvith": 1017, "shetti": 1017, "baam": [1017, 1018], "baptbillard": 1017, "bmalezieux": 1017, "bumblebe": 1017, "caherrera": 1017, "meli": [1017, 1018, 1019], "chrissobel": 1017, "yeh": 1017, "chuliang": 1017, "cliffordemmanuel": 1017, "conner": 1017, "shen": 1017, "dimitri": [1017, 1018, 1019], "papadopoulo": [1017, 1018, 1019], "orfano": [1017, 1018, 1019], "dmallia17": 1017, "ds_ana": 1017, "jardim": 1017, "edwinwenink": 1017, "eleni": 1017, "markou": 1017, "ericellwang": [1017, 1018], "ezri": 1017, "mudd": 1017, "fato": 1017, "morina": 1017, "hafner": 1017, "flyingdutchman23": 1017, "uwha": [1017, 1018], "bereng": 1017, "frederick": 1017, "frellwan": 1017, "vicent": [1017, 1018, 1019], "geroldcsend": 1017, "glen": 1017, "gl\u00f2ria": [1017, 1019], "mu\u00f1oz": [1017, 1019], "gregorystrubel": 1017, "groceryheist": 1017, "guiweb": 1017, "haidar": [1017, 1018], "almubarak": [1017, 1018], "moritz": [1017, 1019], "g\u00fcnther": 1017, "mirza": 1017, "harutaka": 1017, "kawamura": 1017, "hassan": 1017, "alsawadi": 1017, "geovan": [1017, 1018], "gome": [1017, 1018], "lima": [1017, 1018], "ilic": 1017, "ikko": 1017, "ashimin": 1017, "isaack": 1017, "mungui": 1017, "ishaan": 1017, "bhat": [1017, 1019], "ishan": [1017, 1018], "iwhalv": 1017, "preiss": 1017, "budarz": 1017, "jannik": 1017, "jennif": 1017, "jianzhu": 1017, "guo": 1017, "jnboehm": 1017, "johanwork": 1017, "paton": 1017, "n\u00e1pole": 1017, "julio": 1017, "julyrashchenko": 1017, "jvm": 1017, "kadatatlu": 1017, "kishor": 1017, "karen": 1017, "palacio": 1017, "kmatt10": 1017, "kobaski": 1017, "kot271828": 1017, "kunj": 1017, "kurumeyuta": 1017, "kxytim": 1017, "lacrosse91": 1017, "laveen": 1017, "bagai": 1017, "leonardo": 1017, "rocco": [1017, 1018, 1019], "uieda": 1017, "leopoldo": 1017, "corona": 1017, "lsturtew": 1017, "lucca": 1017, "quadro": 1017, "ly648499246": 1017, "mabu": 1017, "manaileng": 1017, "mariangela": 1017, "marielaraj": 1017, "hirzel": 1017, "mateo": 1017, "nore\u00f1a": 1017, "mathi": 1017, "batoul": 1017, "calcot": 1017, "prieur": 1017, "\u00f6zer": 1017, "miao": 1017, "cai": 1017, "karbownik": 1017, "michalkrawczyk": [1017, 1018], "mitzi": [1017, 1018], "mlondschien": 1017, "haseeb": [1017, 1018], "khoual": 1017, "jarir": 1017, "kanji": 1017, "nadim": 1017, "kawwa": 1017, "nanshan": 1017, "naozin555": 1017, "fultz": 1017, "nic": 1017, "annau": 1017, "stefani": [1017, 1019], "nigel": 1017, "bosch": 1017, "nodar": 1017, "okroshiashvili": 1017, "ogbonna": 1017, "chibuik": 1017, "ogordon100": 1017, "phongpanangam": 1017, "duqu": 1017, "ibieta": 1017, "jimenez": [1017, 1018], "lacouth": 1017, "olszewski": 1017, "dye": 1017, "pierreattard": [1017, 1018], "yve": 1017, "borgn": 1017, "pranayanchuri": 1017, "princ": 1017, "canuma": 1017, "putschblo": 1017, "ranjanikrishnan": 1017, "rene": 1017, "corneil": 1017, "ricardojnf": 1017, "richardscottoz": 1017, "sandi": 1017, "khosasi": 1017, "benhur": 1017, "flore": 1017, "shinehid": 1017, "shinnar": 1017, "tootoonian": 1017, "solosil": 1017, "kolawol": 1017, "stagg": 1017, "swpeas": 1017, "tfifi": 1017, "caswel": 1017, "timotheemathieu": 1017, "wolodzko": 1017, "tliu68": 1017, "uhmann": 1017, "tom1092": 1017, "tom\u00e1": [1017, 1018], "moreyra": 1017, "tommaso": 1017, "noto": 1017, "tsuga": 1017, "vang": 1017, "gkiasta": 1017, "vil\u00e9m": 1017, "zouhar": 1017, "vlasovet": 1017, "waijean": 1017, "whidou": 1017, "xiaoyuchai": 1017, "yasmeen": 1017, "alsaedi": 1017, "yoch": 1017, "yusukenagasaka": 1017, "yzhenman": 1017, "zeyusun": 1017, "zhaoweiwang": 1017, "msvcp140": 1018, "dll": 1018, "24631": 1018, "24446": 1018, "10805": 1018, "mathia": 1018, "23471": 1018, "24015": 1018, "23990": 1018, "23833": 1018, "24017": 1018, "sorski": [1018, 1019], "23395": 1018, "23636": 1018, "22063": 1018, "22059": 1018, "kurz": [1018, 1019], "23608": 1018, "23548": 1018, "24087": 1018, "23273": 1018, "23194": 1018, "23198": 1018, "lise": 1018, "kleiber": 1018, "23358": 1018, "23264": 1018, "feature_names_in": 1018, "23299": 1018, "23214": 1018, "collot": [1018, 1019], "baak": 1018, "23370": 1018, "23410": 1018, "compute_sample_weight": 1018, "23115": 1018, "22868": 1018, "multiindex": 1018, "22410": 1018, "23271": 1018, "21987": 1018, "22064": 1018, "22065": 1018, "22288": 1018, "22320": 1018, "21219": 1018, "21542": 1018, "23098": 1018, "22318": 1018, "23036": 1018, "binary_crossentropi": 1018, "23040": 1018, "23046": 1018, "22856": 1018, "21032": 1018, "18170": 1018, "21038": 1018, "14975": 1018, "22526": 1018, "23095": 1018, "silk": 1018, "20031": 1018, "krawczyk": 1018, "21148": 1018, "22255": 1018, "21881": 1018, "vassard": 1018, "22217": 1018, "21735": 1018, "22154": 1018, "22537": 1018, "iofal": 1018, "arisa": [1018, 1019], "22775": 1018, "22913": 1018, "randomgeek78": 1018, "22493": 1018, "19680": 1018, "thibaut": 1018, "22119": 1018, "22016": 1018, "22015": 1018, "19747": 1018, "attalla": 1018, "22498": 1018, "21482": 1018, "pujalt": 1018, "22412": 1018, "16605": 1018, "21901": 1018, "rileran": 1018, "23113": 1018, "ilion": 1018, "beyst": 1018, "21425": 1018, "stefanini": 1018, "16948": 1018, "patricio": 1018, "cerda": 1018, "22002": 1018, "21109": 1018, "inner_stats_": 1018, "iter_offset_": 1018, "18975": 1018, "22111": 1018, "22181": 1018, "21334": 1018, "21705": 1018, "stanlei": [1018, 1019], "21432": 1018, "22806": 1018, "jihan": 1018, "benni": 1018, "21713": 1018, "haya": 1018, "21567": 1018, "maggi": 1018, "chege": 1018, "22300": 1018, "15948": 1018, "sysuresh": 1018, "22553": 1018, "19490": 1018, "ferrin": 1018, "22120": 1018, "15984": 1018, "okon": 1018, "22696": 1018, "22486": 1018, "21800": 1018, "20567": 1018, "22159": 1018, "20811": 1018, "21814": 1018, "16748": 1018, "siqi": 1018, "22215": 1018, "23047": 1018, "22695": 1018, "22697": 1018, "21762": 1018, "22106": 1018, "gijsber": 1018, "21632": 1018, "genesi": 1018, "valencia": 1018, "22566": 1018, "22908": 1018, "23097": 1018, "23079": 1018, "20803": 1018, "23023": 1018, "21573": 1018, "21832": 1018, "20145": 1018, "22356": 1018, "18482": 1018, "gameiro": 1018, "kharsa": 1018, "22370": 1018, "17819": 1018, "22235": 1018, "21837": 1018, "wagner": 1018, "22199": 1018, "aidar": 1018, "shakerimoff": 1018, "tenavi": 1018, "nakamura": 1018, "22223": 1018, "marcom": 1018, "21617": 1018, "ritter": [1018, 1019], "21114": 1018, "21078": 1018, "21448": 1018, "16061": 1018, "19438": 1018, "18310": 1018, "elfner": 1018, "22249": 1018, "22137": 1018, "22694": 1018, "22808": 1018, "22950": 1018, "21086": 1018, "22206": 1018, "21808": 1018, "22548": 1018, "22062": 1018, "trujillo": [1018, 1019], "22148": 1018, "22240": 1018, "9087": 1018, "22525": 1018, "19689": 1018, "21606": 1018, "21341": 1018, "preservs": 1018, "21767": 1018, "21724": 1018, "yar": 1018, "khine": 1018, "phyo": 1018, "21998": 1018, "22891": 1018, "22899": 1018, "23256": 1018, "19794": 1018, "21534": 1018, "22254": 1018, "21805": 1018, "jeann": 1018, "dionisi": 1018, "22685": 1018, "n_neighbour": 1018, "18832": 1018, "23033": 1018, "21565": 1018, "17266": 1018, "interpet": 1018, "22118": 1018, "ohad": 1018, "22284": 1018, "19158": 1018, "nicki": 1018, "skaft": 1018, "20753": 1018, "22108": 1018, "22635": 1018, "19085": 1018, "22866": 1018, "21576": 1018, "emil": 1018, "dugnat": 1018, "21873": 1018, "21177": 1018, "20408": 1018, "ceballo": 1018, "22058": 1018, "23034": 1018, "22203": 1018, "21026": 1018, "21880": 1018, "mrinal": 1018, "tyagi": 1018, "22982": 1018, "22508": 1018, "comb": 1018, "22604": 1018, "22212": 1018, "21430": 1018, "desislava": 1018, "vasileva": 1018, "22687": 1018, "22150": 1018, "22248": 1018, "20860": 1018, "shubhraneel": 1018, "21888": 1018, "21954": 1018, "22953": 1018, "16018": 1018, "21445": 1018, "21988": 1018, "get_output_feature_nam": 1018, "21569": 1018, "21079": 1018, "20653": 1018, "21434": 1018, "19916": 1018, "22735": 1018, "compute_inverse_transform": 1018, "21701": 1018, "22114": 1018, "21330": 1018, "21408": 1018, "22149": 1018, "21436": 1018, "22191": 1018, "22476": 1018, "21278": 1018, "21316": 1018, "clickabl": 1018, "21298": 1018, "22237": 1018, "check_scalar": 1018, "22218": 1018, "validationerror": 1018, "check_requires_y_non": 1018, "22578": 1018, "arcidiacono": [1018, 1019], "22595": 1018, "21310": 1018, "22027": 1018, "lanterni": 1018, "23077": 1018, "22188": 1018, "22830": 1018, "2357juan": [1018, 1019], "adamgonzo": 1018, "adijohar": 1018, "kumawat": 1018, "raghuwanshi": 1018, "duron": 1018, "ahmadjubair33": 1018, "aj": 1018, "druck": 1018, "peixinho": 1018, "arroyo": 1018, "alexanmv": 1018, "almeidayoel": 1018, "amar": [1018, 1019, 1020], "amrcod": 1018, "griva": [1018, 1019], "andrii": 1018, "herrou": 1018, "ducout": 1018, "arth": 1018, "arthurmello": 1018, "arturoamor": 1018, "atharva": 1018, "patil": 1018, "aufarkari": 1018, "avm19": [1018, 1019], "ayan": 1018, "bardiya": [1018, 1019], "behrouz": 1018, "ben3940": 1018, "bijil": 1018, "subhash": 1018, "bmreinig": 1018, "brenden": 1018, "kadota": 1018, "cdrig": 1018, "chalmer": 1018, "chitteti": 1018, "srinath": [1018, 1019], "chloe": 1018, "agath": 1018, "azencott": 1018, "christopherlim98": 1018, "weidemann": 1018, "combsccod": 1018, "daniela": [1018, 1019], "darren": [1018, 1019], "eargl": 1018, "gilbertson": [1018, 1019], "dea": [1018, 1019, 1020], "mar\u00eda": [1018, 1019, 1020], "denni": 1018, "osei": 1018, "dessyvv": 1018, "dev514": 1018, "diwakar": 1018, "ries": 1018, "drskd": 1018, "emiko": 1018, "sano": 1018, "emmanouil": 1018, "gionanidi": 1018, "ermolaevpa": [1018, 1019], "estefania": 1018, "barreto": 1018, "ojeda": 1018, "eyast": 1018, "fatima": 1018, "gasmi": 1018, "luna": 1018, "glushchenkov": 1018, "fkaren27": 1018, "fpgawesom": 1018, "ftorres16": [1018, 1019], "gabor": 1018, "berei": 1018, "kertesz": 1018, "gauthier": 1018, "giancarlo": 1018, "glennfrutiz": 1018, "guillermo": 1018, "fern\u00e1ndez": 1018, "hansin": [1018, 1019], "henrymooresc": [1018, 1019], "hideaki": 1018, "imamura": 1018, "hind": 1018, "hmasdev": 1018, "hvassard": 1018, "aki": [1018, 1019], "iasoon": 1018, "ingela": 1018, "cowton": 1018, "jalexand3r": 1018, "jauhar": 1018, "jaya": 1018, "kommireddi": 1018, "je": 1018, "jelfner": 1018, "jenni": 1018, "jirka": 1018, "borovec": 1018, "cipri\u00e1n": 1018, "loayza": 1018, "chazalon": 1018, "mess": 1018, "jovan": [1018, 1019], "stojanov": [1018, 1019], "jschuerz": 1018, "katotten": 1018, "ken4git": 1018, "doucet": 1018, "kimayoung": 1018, "koushik": 1018, "kranthi": 1018, "sedamaki": 1018, "krumetoft": 1018, "lesne": 1018, "casino": [1018, 1019], "logan": [1018, 1019], "lucieclair": 1018, "luiz": 1018, "magali": 1018, "mandjev": 1018, "wurp": [1018, 1019], "boerner": 1018, "wimld": 1018, "martel": 1018, "corentin": 1018, "mat\u00eda": 1018, "matjansen": 1018, "francia": 1018, "megabyt": 1018, "mehrdad": 1018, "moradizadeh": 1018, "melemo2": 1018, "micky774": [1018, 1019], "milana2": 1018, "millawel": 1018, "miwojc": 1018, "mizuki": 1018, "mlant": 1018, "mohit": 1018, "moonkyung94": 1018, "mpoemsl": 1018, "mrinaltyagi": 1018, "leu": 1018, "msabati": 1018, "nadirhan": 1018, "\u015fahin": 1018, "naipawat": [1018, 1019], "poolsawat": [1018, 1019], "nartayxd": 1018, "nastegiano": 1018, "nathansquan": 1018, "detlefsen": 1018, "niket": 1018, "nikhil": 1018, "suresh": 1018, "kondratyev": 1018, "husak": 1018, "partev": [1018, 1019], "pelennor": 1018, "piet": [1018, 1019], "br\u00f6mmel": [1018, 1019], "pinki": 1018, "poloso": 1018, "pramod": 1018, "anantharam": 1018, "puhuk": [1018, 1019], "purna": 1018, "mansingh": 1018, "quadv": 1018, "rahil": [1018, 1019, 1020], "boy": 1018, "raz": 1018, "hoshia": 1018, "rishabh": 1018, "barnowski": [1018, 1019], "rsnegrin": 1018, "yadav": 1018, "sakinaouisrani": 1018, "sanjai": 1018, "marreddi": 1018, "seel": 1018, "sele": [1018, 1019], "seyedsaman": 1018, "emami": 1018, "shandeng123": 1018, "sharmadharmp": 1018, "shaymernaturalint": 1018, "shuangchi": [1018, 1019], "siavrez": 1018, "slishak": 1018, "spikebh": 1018, "sply88": 1018, "kailasa": [1018, 1019], "sultan": 1018, "orazbayev": 1018, "sumit": 1018, "saha": 1018, "sven": [1018, 1019], "eschlbeck": 1018, "stehl": [1018, 1019], "swapnil": 1018, "teunp": 1018, "ferr\u00e9": 1018, "hjortkj\u00e6r": 1018, "thiruvenkadam": 1018, "toastedyeast": [1018, 1019], "mctiernan": [1018, 1019], "udit": 1018, "ugo": 1018, "marchand": 1018, "vera": [1018, 1019], "komey": [1018, 1019], "victoireloui": 1018, "vishwakarma": 1018, "vikrant": 1018, "khedkar": 1018, "chernyi": 1018, "weijiadu": 1018, "yuan": [1018, 1019], "yiyangq": 1018, "yosshi999": 1018, "yuki": 1018, "koyama": 1018, "zeel": 1018, "zempleni": 1018, "zhenfish": 1018, "\u8d75\u4e30": 1018, "2023": 1019, "25747": 1019, "base_estimator__": 1019, "25477": 1019, "25563": 1019, "25570": 1019, "25664": 1019, "25774": 1019, "25500": 1019, "25589": 1019, "25704": 1019, "min_sample_split": 1019, "25744": 1019, "25619": 1019, "25638": 1019, "25354": 1019, "25174": 1019, "25089": 1019, "25129": 1019, "auxillari": 1019, "25363": 1019, "25188": 1019, "25295": 1019, "spec": 1019, "25312": 1019, "backslash": 1019, "25511": 1019, "25172": 1019, "25341": 1019, "25094": 1019, "25250": 1019, "25370": 1019, "23101": 1019, "24873": 1019, "25694": 1019, "25274": 1019, "25296": 1019, "25147": 1019, "23619": 1019, "24354": 1019, "safiuddin": 1019, "khaja": 1019, "gsiisg": 1019, "23935": 1019, "22527": 1019, "_sgd_fast": 1019, "_plain_sgd": 1019, "oversc": 1019, "23798": 1019, "24543": 1019, "24465": 1019, "23734": 1019, "24699": 1019, "23865": 1019, "simd": 1019, "primit": 1019, "23446": 1019, "23197": 1019, "23604": 1019, "23585": 1019, "24556": 1019, "maladi\u00e8r": [1019, 1020], "24617": 1019, "sim4n6": 1019, "24688": 1019, "22054": 1019, "roic": 1019, "24264": 1019, "maladier": 1019, "14736": 1019, "hunt": 1019, "zhan": 1019, "20802": 1019, "pokorni": 1019, "22965": 1019, "22968": 1019, "23038": 1019, "propog": 1019, "23210": 1019, "24258": 1019, "23470": 1019, "21938": 1019, "23127": 1019, "19075": 1019, "ramo": 1019, "carre\u00f1o": 1019, "24951": 1019, "22268": 1019, "mohamedbsh": 1019, "23905": 1019, "11860": 1019, "ablin": 1019, "24528": 1019, "23726": 1019, "24421": 1019, "kshitij": [1019, 1020], "22554": 1019, "24218": 1019, "molin": 1019, "21020": 1019, "24856": 1019, "22014": 1019, "23252": 1019, "24538": 1019, "24889": 1019, "24146": 1019, "peretti": 1019, "nestor": 1019, "navarro": 1019, "nati": 1019, "tomatti": 1019, "24855": 1019, "24849": 1019, "20415": 1019, "24283": 1019, "24894": 1019, "23819": 1019, "edoardo": 1019, "abati": 1019, "24747": 1019, "24245": 1019, "24405": 1019, "salman": [1019, 1020], "16695": 1019, "vitor": 1019, "rosa": 1019, "18298": 1019, "25077": 1019, "24317": 1019, "24350": 1019, "24755": 1019, "levitski": [1019, 1020], "24637": 1019, "24767": 1019, "23275": 1019, "maxwelllzh": 1019, "24433": 1019, "yogendrasingh": 1019, "23637": 1019, "23877": 1019, "10168": 1019, "\u0142ukasz": 1019, "borchmann": 1019, "12285": 1019, "miltenberg": 1019, "13042": 1019, "parizi": 1019, "18094": 1019, "22562": 1019, "24714": 1019, "foor": 1019, "23834": 1019, "24051": 1019, "22518": 1019, "18020": 1019, "24338": 1019, "23442": 1019, "atukorala": 1019, "22710": 1019, "conroi": 1019, "trinh": 1019, "23461": 1019, "24365": 1019, "24630": 1019, "rushil": 1019, "24084": 1019, "iinfo": 1019, "24141": 1019, "24539": 1019, "23977": 1019, "23683": 1019, "andrei": 1019, "melnik": 1019, "16747": 1019, "18805": 1019, "hongshaoyang": 1019, "22269": 1019, "23139": 1019, "24645": 1019, "10468": 1019, "ruben": 1019, "22993": 1019, "24750": 1019, "rudresh": 1019, "veerkhar": 1019, "23874": 1019, "24075": 1019, "22665": 1019, "24683": 1019, "24058": 1019, "perdok": 1019, "20331": 1019, "23993": 1019, "22629": 1019, "24412": 1019, "22898": 1019, "23480": 1019, "21469": 1019, "lapack_svd_driv": 1019, "20617": 1019, "ouptut": 1019, "25067": 1019, "14862": 1019, "24512": 1019, "24667": 1019, "25080": 1019, "24523": 1019, "mia": 1019, "bajic": 1019, "3llobo": 1019, "kania": 1019, "anulekh": 1019, "admir": 1019, "demiraj": 1019, "adoublet": 1019, "ahmedbgh": 1019, "aiko": 1019, "akshita": 1019, "prasanth": 1019, "ala": 1019, "miola": 1019, "lebel": 1019, "buzenet": [1019, 1020], "kassa": 1019, "bera": 1019, "maennel": 1019, "aniket": 1019, "shirsat": 1019, "anthony22": 1019, "apostolo": 1019, "tsetogl": 1019, "aravindh": 1019, "artur": 1019, "hermano": 1019, "ashah002": 1019, "ashwin": [1019, 1020], "azaria": 1019, "gebremichael": 1019, "b0rxington": 1019, "badr": 1019, "moufad": 1019, "bart\u0142omiej": 1019, "go\u0144da": 1019, "bdegraaff": 1019, "berkecanrizai": 1019, "bernd": 1019, "fritzk": 1019, "bhoomika": 1019, "biswaroop": 1019, "cannon": 1019, "bsh": 1019, "ceh": 1019, "chalulu": 1019, "changyao": 1019, "zablit": 1019, "veenhui": 1019, "christianwaldmann": 1019, "christin": 1019, "verrier": 1019, "dangonite57": 1019, "danielgaerb": 1019, "davidblnc": 1019, "dayn": 1019, "khant": 1019, "dhanshre": 1019, "diadochokinet": 1019, "diederikwp": 1019, "litsidi": 1019, "drewhogg": 1019, "oc": 1019, "dwight": 1019, "lindquist": 1019, "eden": 1019, "brekk": 1019, "edern": 1019, "eleanor": 1019, "eliaschiavon": 1019, "emir": 1019, "fabrizio": 1019, "damicelli": 1019, "fcharra": 1019, "siola": [1019, 1020], "tuveri": 1019, "franck": 1019, "charra": 1019, "geevarghes": 1019, "georgiamaydai": 1019, "gianr": 1019, "lazz": 1019, "guitar": 1019, "gunesbayir": 1019, "harshit5674": 1019, "hasan": 1019, "yaman": 1019, "vrigazov": 1019, "htsedebenham": 1019, "humahn": 1019, "ido": 1019, "iglesi": 1019, "iliya": 1019, "zhechev": 1019, "iren": 1019, "ivanllt": 1019, "sedykh": 1019, "mcivor": 1019, "janfidor": 1019, "jiten": 1019, "sidhpura": 1019, "jkarolczak": 1019, "jo\u00e3o": 1019, "johnathanpi": 1019, "koumenti": 1019, "panga": [1019, 1020], "johnthagen": 1019, "fleme": 1019, "choo": 1019, "yun": 1019, "keat": 1019, "juanfe88": 1019, "juliaschoepp": 1019, "jygerardi": 1019, "ka00ri": 1019, "kanishk": 1019, "sachdev": 1019, "kanissh": 1019, "kendal": 1019, "kento": 1019, "nozawa": 1019, "eliasi": 1019, "kluge": 1019, "lieret": 1019, "kirandevraj": 1019, "kraig": 1019, "vamsi": 1019, "kapadni": 1019, "lingyi1110": 1019, "mantovani": 1019, "maascha": 1019, "madinak": 1019, "maksym": 1019, "mansi": 1019, "kostelac": [1019, 1020], "marvin": [1019, 1020], "krawutschk": [1019, 1020], "masanori": 1019, "kanazu": 1019, "haberland": 1019, "mauroantonioserrano": 1019, "maxi": 1019, "marufo": 1019, "maximesaur": 1019, "smolskii": 1019, "bou": 1019, "mehgarg": 1019, "mehmetcanakbai": 1019, "baji\u0107": 1019, "flak": 1019, "hornstein": 1019, "ruiter": 1019, "paradi": 1019, "iljin": 1019, "misa": 1019, "ogura": 1019, "wilksch": 1019, "mrastgoo": 1019, "naois": 1019, "holohan": 1019, "nass": 1019, "jacobi": 1019, "nawazish": 1019, "alam": 1019, "nguy\u1ec5n": 1019, "v\u0103n": 1019, "di\u1ec5n": 1019, "fanelli": 1019, "nihal": 1019, "thukarama": 1019, "jare": 1019, "nima10khodaveisi": 1019, "nima": 1019, "sarajpoor": 1019, "nitinramvelraj": 1019, "nnlnr": 1019, "npach": 1019, "nwanna": 1019, "nymark": 1019, "kho": 1019, "holman": 1019, "oll": 1019, "lukowski": 1019, "hassoun": 1019, "tamer": 1019, "ouss1508": 1019, "oyindamola": 1019, "olatunji": 1019, "pab": 1019, "pandata": 1019, "soar": 1019, "petar": 1019, "mlinari\u0107": 1019, "pooja": 1019, "subramaniam": 1019, "priyam": 1019, "kakati": 1019, "freeland": 1019, "keerti": 1019, "rafal": 1019, "wojdyla": 1019, "raghuv": 1019, "makhija": 1019, "rehan": 1019, "guha": 1019, "klima": 1019, "crockett": 1019, "homm": 1019, "roman4oo": 1019, "rowan": 1019, "mankoo": 1019, "sabri": 1019, "monaf": 1019, "safikh": 1019, "salahuddin": 1019, "yojana": 1019, "menes": 1019, "ephrem": 1019, "sangam": 1019, "sangamswadik": 1019, "sanjai_3": 1019, "sarahremu": 1019, "sashka": 1019, "savkomax": 1019, "gustafson": 1019, "sec65": 1019, "seljak": 1019, "shadi": 1019, "gewili": 1019, "shellyfung": 1019, "shinsuk": 1019, "mori": 1019, "shiva": 1019, "shoaib": 1019, "khan": 1019, "shogo": 1019, "hida": 1019, "shrankhla": 1019, "sonniv": 1019, "sortofamudkip": 1019, "stanislav": 1019, "modrak": 1019, "stellalin7": 1019, "vaerenbergh": 1019, "schmerler": 1019, "tabea": 1019, "kossen": 1019, "thedevpanda": 1019, "syd": 1019, "sre": 1019, "weezel": [1019, 1020], "bonald": 1019, "germer": 1019, "ion": 1019, "timofei": 1019, "kornev": 1019, "pitter": 1019, "tomiock": 1019, "mathew": 1019, "tspeng": 1019, "egashira": 1019, "rey": 1019, "puerta": 1019, "vishal": 1019, "vyom": 1019, "pathak": 1019, "wattai": 1019, "wchathura": 1019, "wen": 1019, "x110": 1019, "xuniu": 1019, "yanhong": 1019, "ef": 1019, "yusuf": 1019, "raji": 1019, "adil": 1019, "khwaja": 1019, "zeeshan": 1019, "lone": 1019, "25196": 1020, "24871": 1020, "25438": 1020, "yotam": 1020, "avidar": 1020, "constantini": 1020, "25294": 1020, "25308": 1020, "25291": 1020, "25367": 1020, "25402": 1020, "25044": 1020, "25102": 1020, "24568": 1020, "25805": 1020, "25251": 1020, "25784": 1020, "25490": 1020, "22409": 1020, "25177": 1020, "24882": 1020, "25186": 1020, "breve": 1020, "25506": 1020, "25601": 1020, "fidor": 1020, "sckit": 1020, "verion": 1020, "25297": 1020, "24230": 1020, "25232": 1020, "21809": 1020, "25732": 1020, "25587": 1020, "25713": 1020, "25432": 1020, "25299": 1020, "omarmanzoor": 1020, "25659": 1020, "24140": 1020, "25417": 1020, "24076": 1020, "25443": 1020, "feature_union": 1020, "25093": 1020, "25220": 1020, "22506": 1020, "24935": 1020, "seladu": 1020, "25257": 1020, "25190": 1020, "25387": 1020, "check_transformers_unfitted_stateless": 1020, "25733": 1020, "19664": 1020}, "objects": {"sklearn": [[392, 0, 0, "-", "base"], [392, 0, 0, "-", "calibration"], [392, 0, 0, "-", "cluster"], [392, 0, 0, "-", "compose"], [449, 4, 1, "", "config_context"], [392, 0, 0, "-", "covariance"], [392, 0, 0, "-", "cross_decomposition"], [392, 0, 0, "-", "datasets"], [392, 0, 0, "-", "decomposition"], [392, 0, 0, "-", "discriminant_analysis"], [392, 0, 0, "-", "dummy"], [392, 0, 0, "-", "ensemble"], [392, 0, 0, "-", "exceptions"], [392, 0, 0, "-", "experimental"], [392, 0, 0, "-", "feature_extraction"], [392, 0, 0, "-", "feature_selection"], [392, 0, 0, "-", "gaussian_process"], [607, 4, 1, "", "get_config"], [392, 0, 0, "-", "impute"], [392, 0, 0, "-", "inspection"], [392, 0, 0, "-", "isotonic"], [392, 0, 0, "-", "kernel_approximation"], [392, 0, 0, "-", "kernel_ridge"], [392, 0, 0, "-", "linear_model"], [392, 0, 0, "-", "manifold"], [392, 0, 0, "-", "metrics"], [392, 0, 0, "-", "mixture"], [392, 0, 0, "-", "model_selection"], [392, 0, 0, "-", "multiclass"], [392, 0, 0, "-", "multioutput"], [392, 0, 0, "-", "naive_bayes"], [392, 0, 0, "-", "neighbors"], [392, 0, 0, "-", "neural_network"], [392, 0, 0, "-", "pipeline"], [392, 0, 0, "-", "preprocessing"], [392, 0, 0, "-", "random_projection"], [392, 0, 0, "-", "semi_supervised"], [876, 4, 1, "", "set_config"], [877, 4, 1, "", "show_versions"], [392, 0, 0, "-", "svm"], [392, 0, 0, "-", "tree"], [392, 0, 0, "-", "utils"]], "sklearn.base": [[407, 1, 1, "", "BaseEstimator"], [408, 1, 1, "", "BiclusterMixin"], [409, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [410, 1, 1, "", "ClassifierMixin"], [411, 1, 1, "", "ClusterMixin"], [412, 1, 1, "", "DensityMixin"], [413, 1, 1, "", "OneToOneFeatureMixin"], [414, 1, 1, "", "RegressorMixin"], [415, 1, 1, "", "TransformerMixin"], [416, 4, 1, "", "clone"], [417, 4, 1, "", "is_classifier"], [418, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[407, 2, 1, "", "get_params"], [407, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[408, 3, 1, "", "biclusters_"], [408, 2, 1, "", "get_indices"], [408, 2, 1, "", "get_shape"], [408, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[409, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[410, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[411, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[412, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[413, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[414, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[415, 2, 1, "", "fit_transform"], [415, 2, 1, "", "set_output"]], "sklearn.calibration": [[419, 1, 1, "", "CalibratedClassifierCV"], [420, 1, 1, "", "CalibrationDisplay"], [421, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[419, 2, 1, "", "fit"], [419, 2, 1, "", "get_params"], [419, 2, 1, "", "predict"], [419, 2, 1, "", "predict_proba"], [419, 2, 1, "", "score"], [419, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[420, 2, 1, "", "from_estimator"], [420, 2, 1, "", "from_predictions"], [420, 2, 1, "", "plot"]], "sklearn.cluster": [[422, 1, 1, "", "AffinityPropagation"], [423, 1, 1, "", "AgglomerativeClustering"], [424, 1, 1, "", "Birch"], [425, 1, 1, "", "BisectingKMeans"], [426, 1, 1, "", "DBSCAN"], [427, 1, 1, "", "FeatureAgglomeration"], [428, 1, 1, "", "KMeans"], [429, 1, 1, "", "MeanShift"], [430, 1, 1, "", "MiniBatchKMeans"], [431, 1, 1, "", "OPTICS"], [432, 1, 1, "", "SpectralBiclustering"], [433, 1, 1, "", "SpectralClustering"], [434, 1, 1, "", "SpectralCoclustering"], [435, 4, 1, "", "affinity_propagation"], [436, 4, 1, "", "cluster_optics_dbscan"], [437, 4, 1, "", "cluster_optics_xi"], [438, 4, 1, "", "compute_optics_graph"], [404, 4, 1, "", "dbscan"], [439, 4, 1, "", "estimate_bandwidth"], [440, 4, 1, "", "k_means"], [441, 4, 1, "", "kmeans_plusplus"], [442, 4, 1, "", "mean_shift"], [443, 4, 1, "", "spectral_clustering"], [444, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[422, 2, 1, "", "fit"], [422, 2, 1, "", "fit_predict"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "predict"], [422, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[423, 2, 1, "", "fit"], [423, 2, 1, "", "fit_predict"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[424, 2, 1, "", "fit"], [424, 2, 1, "", "fit_predict"], [424, 2, 1, "", "fit_transform"], [424, 2, 1, "", "get_feature_names_out"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "partial_fit"], [424, 2, 1, "", "predict"], [424, 2, 1, "", "set_output"], [424, 2, 1, "", "set_params"], [424, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[425, 2, 1, "", "fit"], [425, 2, 1, "", "fit_predict"], [425, 2, 1, "", "fit_transform"], [425, 2, 1, "", "get_feature_names_out"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "predict"], [425, 2, 1, "", "score"], [425, 2, 1, "", "set_output"], [425, 2, 1, "", "set_params"], [425, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "fit_predict"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[427, 2, 1, "", "fit"], [427, 3, 1, "", "fit_predict"], [427, 2, 1, "", "fit_transform"], [427, 2, 1, "", "get_feature_names_out"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "inverse_transform"], [427, 2, 1, "", "set_output"], [427, 2, 1, "", "set_params"], [427, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "fit_transform"], [428, 2, 1, "", "get_feature_names_out"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "predict"], [428, 2, 1, "", "score"], [428, 2, 1, "", "set_output"], [428, 2, 1, "", "set_params"], [428, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_predict"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "predict"], [429, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "fit_predict"], [430, 2, 1, "", "fit_transform"], [430, 2, 1, "", "get_feature_names_out"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "partial_fit"], [430, 2, 1, "", "predict"], [430, 2, 1, "", "score"], [430, 2, 1, "", "set_output"], [430, 2, 1, "", "set_params"], [430, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[431, 2, 1, "", "fit"], [431, 2, 1, "", "fit_predict"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[432, 3, 1, "", "biclusters_"], [432, 2, 1, "", "fit"], [432, 2, 1, "", "get_indices"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "get_shape"], [432, 2, 1, "", "get_submatrix"], [432, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[434, 3, 1, "", "biclusters_"], [434, 2, 1, "", "fit"], [434, 2, 1, "", "get_indices"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "get_shape"], [434, 2, 1, "", "get_submatrix"], [434, 2, 1, "", "set_params"]], "sklearn.compose": [[445, 1, 1, "", "ColumnTransformer"], [446, 1, 1, "", "TransformedTargetRegressor"], [447, 4, 1, "", "make_column_selector"], [448, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_params"], [445, 3, 1, "", "named_transformers_"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "get_params"], [446, 3, 1, "", "n_features_in_"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_params"]], "sklearn.covariance": [[450, 1, 1, "", "EllipticEnvelope"], [451, 1, 1, "", "EmpiricalCovariance"], [452, 1, 1, "", "GraphicalLasso"], [453, 1, 1, "", "GraphicalLassoCV"], [454, 1, 1, "", "LedoitWolf"], [455, 1, 1, "", "MinCovDet"], [456, 1, 1, "", "OAS"], [457, 1, 1, "", "ShrunkCovariance"], [458, 4, 1, "", "empirical_covariance"], [459, 4, 1, "", "graphical_lasso"], [460, 4, 1, "", "ledoit_wolf"], [461, 4, 1, "", "ledoit_wolf_shrinkage"], [406, 4, 1, "", "oas"], [462, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[450, 2, 1, "", "correct_covariance"], [450, 2, 1, "", "decision_function"], [450, 2, 1, "", "error_norm"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_precision"], [450, 2, 1, "", "mahalanobis"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "reweight_covariance"], [450, 2, 1, "", "score"], [450, 2, 1, "", "score_samples"], [450, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[451, 2, 1, "", "error_norm"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_precision"], [451, 2, 1, "", "mahalanobis"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[452, 2, 1, "", "error_norm"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_precision"], [452, 2, 1, "", "mahalanobis"], [452, 2, 1, "", "score"], [452, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[453, 2, 1, "", "error_norm"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_precision"], [453, 2, 1, "", "mahalanobis"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[454, 2, 1, "", "error_norm"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_precision"], [454, 2, 1, "", "mahalanobis"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[455, 2, 1, "", "correct_covariance"], [455, 2, 1, "", "error_norm"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_precision"], [455, 2, 1, "", "mahalanobis"], [455, 2, 1, "", "reweight_covariance"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[456, 2, 1, "", "error_norm"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_precision"], [456, 2, 1, "", "mahalanobis"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[457, 2, 1, "", "error_norm"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_precision"], [457, 2, 1, "", "mahalanobis"], [457, 2, 1, "", "score"], [457, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[463, 1, 1, "", "CCA"], [464, 1, 1, "", "PLSCanonical"], [465, 1, 1, "", "PLSRegression"], [466, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[463, 3, 1, "", "coef_"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_transform"], [463, 2, 1, "", "get_feature_names_out"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "inverse_transform"], [463, 2, 1, "", "predict"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_output"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[464, 3, 1, "", "coef_"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_feature_names_out"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "inverse_transform"], [464, 2, 1, "", "predict"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[465, 3, 1, "", "coef_"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_transform"], [465, 2, 1, "", "get_feature_names_out"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "inverse_transform"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_output"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[466, 2, 1, "", "fit"], [466, 2, 1, "", "fit_transform"], [466, 2, 1, "", "get_feature_names_out"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "set_output"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "transform"]], "sklearn.datasets": [[467, 4, 1, "", "clear_data_home"], [468, 4, 1, "", "dump_svmlight_file"], [469, 4, 1, "", "fetch_20newsgroups"], [470, 4, 1, "", "fetch_20newsgroups_vectorized"], [471, 4, 1, "", "fetch_california_housing"], [472, 4, 1, "", "fetch_covtype"], [473, 4, 1, "", "fetch_kddcup99"], [474, 4, 1, "", "fetch_lfw_pairs"], [475, 4, 1, "", "fetch_lfw_people"], [476, 4, 1, "", "fetch_olivetti_faces"], [477, 4, 1, "", "fetch_openml"], [478, 4, 1, "", "fetch_rcv1"], [479, 4, 1, "", "fetch_species_distributions"], [480, 4, 1, "", "get_data_home"], [481, 4, 1, "", "load_breast_cancer"], [482, 4, 1, "", "load_diabetes"], [483, 4, 1, "", "load_digits"], [484, 4, 1, "", "load_files"], [485, 4, 1, "", "load_iris"], [486, 4, 1, "", "load_linnerud"], [487, 4, 1, "", "load_sample_image"], [488, 4, 1, "", "load_sample_images"], [489, 4, 1, "", "load_svmlight_file"], [490, 4, 1, "", "load_svmlight_files"], [491, 4, 1, "", "load_wine"], [492, 4, 1, "", "make_biclusters"], [493, 4, 1, "", "make_blobs"], [494, 4, 1, "", "make_checkerboard"], [495, 4, 1, "", "make_circles"], [496, 4, 1, "", "make_classification"], [497, 4, 1, "", "make_friedman1"], [498, 4, 1, "", "make_friedman2"], [499, 4, 1, "", "make_friedman3"], [500, 4, 1, "", "make_gaussian_quantiles"], [501, 4, 1, "", "make_hastie_10_2"], [502, 4, 1, "", "make_low_rank_matrix"], [503, 4, 1, "", "make_moons"], [504, 4, 1, "", "make_multilabel_classification"], [505, 4, 1, "", "make_regression"], [506, 4, 1, "", "make_s_curve"], [507, 4, 1, "", "make_sparse_coded_signal"], [508, 4, 1, "", "make_sparse_spd_matrix"], [509, 4, 1, "", "make_sparse_uncorrelated"], [510, 4, 1, "", "make_spd_matrix"], [511, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[512, 1, 1, "", "DictionaryLearning"], [513, 1, 1, "", "FactorAnalysis"], [514, 1, 1, "", "FastICA"], [515, 1, 1, "", "IncrementalPCA"], [516, 1, 1, "", "KernelPCA"], [517, 1, 1, "", "LatentDirichletAllocation"], [518, 1, 1, "", "MiniBatchDictionaryLearning"], [519, 1, 1, "", "MiniBatchNMF"], [520, 1, 1, "", "MiniBatchSparsePCA"], [521, 1, 1, "", "NMF"], [522, 1, 1, "", "PCA"], [523, 1, 1, "", "SparseCoder"], [524, 1, 1, "", "SparsePCA"], [525, 1, 1, "", "TruncatedSVD"], [526, 4, 1, "", "dict_learning"], [527, 4, 1, "", "dict_learning_online"], [405, 4, 1, "", "fastica"], [528, 4, 1, "", "non_negative_factorization"], [529, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[512, 2, 1, "", "fit"], [512, 2, 1, "", "fit_transform"], [512, 2, 1, "", "get_feature_names_out"], [512, 2, 1, "", "get_params"], [512, 2, 1, "", "set_output"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_transform"], [513, 2, 1, "", "get_covariance"], [513, 2, 1, "", "get_feature_names_out"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "get_precision"], [513, 2, 1, "", "score"], [513, 2, 1, "", "score_samples"], [513, 2, 1, "", "set_output"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "inverse_transform"], [514, 2, 1, "", "set_output"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "fit_transform"], [515, 2, 1, "", "get_covariance"], [515, 2, 1, "", "get_feature_names_out"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "get_precision"], [515, 2, 1, "", "inverse_transform"], [515, 2, 1, "", "partial_fit"], [515, 2, 1, "", "set_output"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "inverse_transform"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "partial_fit"], [517, 2, 1, "", "perplexity"], [517, 2, 1, "", "score"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "partial_fit"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "inverse_transform"], [519, 2, 1, "", "partial_fit"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "inverse_transform"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "inverse_transform"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_covariance"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "get_precision"], [522, 2, 1, "", "inverse_transform"], [522, 2, 1, "", "score"], [522, 2, 1, "", "score_samples"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_params"], [523, 3, 1, "", "n_components_"], [523, 3, 1, "", "n_features_in_"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "inverse_transform"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[530, 1, 1, "", "LinearDiscriminantAnalysis"], [531, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[530, 2, 1, "", "decision_function"], [530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "predict"], [530, 2, 1, "", "predict_log_proba"], [530, 2, 1, "", "predict_proba"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[531, 2, 1, "", "decision_function"], [531, 2, 1, "", "fit"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "predict"], [531, 2, 1, "", "predict_log_proba"], [531, 2, 1, "", "predict_proba"], [531, 2, 1, "", "score"], [531, 2, 1, "", "set_params"]], "sklearn.dummy": [[532, 1, 1, "", "DummyClassifier"], [533, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "predict_log_proba"], [532, 2, 1, "", "predict_proba"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_params"]], "sklearn.ensemble": [[534, 1, 1, "", "AdaBoostClassifier"], [535, 1, 1, "", "AdaBoostRegressor"], [536, 1, 1, "", "BaggingClassifier"], [537, 1, 1, "", "BaggingRegressor"], [538, 1, 1, "", "ExtraTreesClassifier"], [539, 1, 1, "", "ExtraTreesRegressor"], [540, 1, 1, "", "GradientBoostingClassifier"], [541, 1, 1, "", "GradientBoostingRegressor"], [542, 1, 1, "", "HistGradientBoostingClassifier"], [543, 1, 1, "", "HistGradientBoostingRegressor"], [544, 1, 1, "", "IsolationForest"], [545, 1, 1, "", "RandomForestClassifier"], [546, 1, 1, "", "RandomForestRegressor"], [547, 1, 1, "", "RandomTreesEmbedding"], [548, 1, 1, "", "StackingClassifier"], [549, 1, 1, "", "StackingRegressor"], [550, 1, 1, "", "VotingClassifier"], [551, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[534, 3, 1, "", "base_estimator_"], [534, 2, 1, "", "decision_function"], [534, 3, 1, "", "feature_importances_"], [534, 2, 1, "", "fit"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "predict_log_proba"], [534, 2, 1, "", "predict_proba"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "staged_decision_function"], [534, 2, 1, "", "staged_predict"], [534, 2, 1, "", "staged_predict_proba"], [534, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[535, 3, 1, "", "base_estimator_"], [535, 3, 1, "", "feature_importances_"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "staged_predict"], [535, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[536, 3, 1, "", "base_estimator_"], [536, 2, 1, "", "decision_function"], [536, 3, 1, "", "estimators_samples_"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "predict_log_proba"], [536, 2, 1, "", "predict_proba"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[537, 3, 1, "", "base_estimator_"], [537, 3, 1, "", "estimators_samples_"], [537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[538, 2, 1, "", "apply"], [538, 3, 1, "", "base_estimator_"], [538, 2, 1, "", "decision_path"], [538, 3, 1, "", "feature_importances_"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "predict_log_proba"], [538, 2, 1, "", "predict_proba"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[539, 2, 1, "", "apply"], [539, 3, 1, "", "base_estimator_"], [539, 2, 1, "", "decision_path"], [539, 3, 1, "", "feature_importances_"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[540, 2, 1, "", "apply"], [540, 3, 1, "", "base_estimator_"], [540, 2, 1, "", "decision_function"], [540, 3, 1, "", "feature_importances_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "predict_log_proba"], [540, 2, 1, "", "predict_proba"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "staged_decision_function"], [540, 2, 1, "", "staged_predict"], [540, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[541, 2, 1, "", "apply"], [541, 3, 1, "", "base_estimator_"], [541, 3, 1, "", "feature_importances_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[542, 2, 1, "", "decision_function"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 3, 1, "", "n_iter_"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "staged_decision_function"], [542, 2, 1, "", "staged_predict"], [542, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "get_params"], [543, 3, 1, "", "n_iter_"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_function"], [544, 3, 1, "", "estimators_samples_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_predict"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "score_samples"], [544, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[545, 2, 1, "", "apply"], [545, 3, 1, "", "base_estimator_"], [545, 2, 1, "", "decision_path"], [545, 3, 1, "", "feature_importances_"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "predict_log_proba"], [545, 2, 1, "", "predict_proba"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[546, 2, 1, "", "apply"], [546, 3, 1, "", "base_estimator_"], [546, 2, 1, "", "decision_path"], [546, 3, 1, "", "feature_importances_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[547, 2, 1, "", "apply"], [547, 3, 1, "", "base_estimator_"], [547, 2, 1, "", "decision_path"], [547, 3, 1, "", "feature_importances_"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[548, 2, 1, "", "decision_function"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_params"], [548, 3, 1, "", "n_features_in_"], [548, 3, 1, "", "named_estimators"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_params"], [549, 3, 1, "", "n_features_in_"], [549, 3, 1, "", "named_estimators"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_params"], [550, 3, 1, "", "n_features_in_"], [550, 3, 1, "", "named_estimators"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_params"], [551, 3, 1, "", "n_features_in_"], [551, 3, 1, "", "named_estimators"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.exceptions": [[552, 1, 1, "", "ConvergenceWarning"], [553, 1, 1, "", "DataConversionWarning"], [554, 1, 1, "", "DataDimensionalityWarning"], [555, 1, 1, "", "EfficiencyWarning"], [556, 1, 1, "", "FitFailedWarning"], [557, 1, 1, "", "InconsistentVersionWarning"], [558, 1, 1, "", "NotFittedError"], [559, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[552, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[553, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[554, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[555, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[556, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[557, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[558, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[559, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[560, 0, 0, "-", "enable_halving_search_cv"], [561, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[562, 1, 1, "", "DictVectorizer"], [563, 1, 1, "", "FeatureHasher"], [392, 0, 0, "-", "image"], [392, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "inverse_transform"], [562, 2, 1, "", "restrict"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[564, 1, 1, "", "PatchExtractor"], [565, 4, 1, "", "extract_patches_2d"], [566, 4, 1, "", "grid_to_graph"], [567, 4, 1, "", "img_to_graph"], [568, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[569, 1, 1, "", "CountVectorizer"], [570, 1, 1, "", "HashingVectorizer"], [571, 1, 1, "", "TfidfTransformer"], [572, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[569, 2, 1, "", "build_analyzer"], [569, 2, 1, "", "build_preprocessor"], [569, 2, 1, "", "build_tokenizer"], [569, 2, 1, "", "decode"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "get_stop_words"], [569, 2, 1, "", "inverse_transform"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[570, 2, 1, "", "build_analyzer"], [570, 2, 1, "", "build_preprocessor"], [570, 2, 1, "", "build_tokenizer"], [570, 2, 1, "", "decode"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "get_stop_words"], [570, 2, 1, "", "partial_fit"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "idf_"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[572, 2, 1, "", "build_analyzer"], [572, 2, 1, "", "build_preprocessor"], [572, 2, 1, "", "build_tokenizer"], [572, 2, 1, "", "decode"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "get_stop_words"], [572, 3, 1, "", "idf_"], [572, 2, 1, "", "inverse_transform"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_selection": [[573, 1, 1, "", "GenericUnivariateSelect"], [574, 1, 1, "", "RFE"], [575, 1, 1, "", "RFECV"], [576, 1, 1, "", "SelectFdr"], [577, 1, 1, "", "SelectFpr"], [578, 1, 1, "", "SelectFromModel"], [579, 1, 1, "", "SelectFwe"], [580, 1, 1, "", "SelectKBest"], [581, 1, 1, "", "SelectPercentile"], [582, 1, 1, "", "SelectorMixin"], [583, 1, 1, "", "SequentialFeatureSelector"], [584, 1, 1, "", "VarianceThreshold"], [585, 4, 1, "", "chi2"], [586, 4, 1, "", "f_classif"], [587, 4, 1, "", "f_regression"], [588, 4, 1, "", "mutual_info_classif"], [589, 4, 1, "", "mutual_info_regression"], [590, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "get_support"], [573, 2, 1, "", "inverse_transform"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[574, 3, 1, "", "classes_"], [574, 2, 1, "", "decision_function"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_support"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "predict_log_proba"], [574, 2, 1, "", "predict_proba"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[575, 3, 1, "", "classes_"], [575, 2, 1, "", "decision_function"], [575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_support"], [575, 2, 1, "", "inverse_transform"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "predict_log_proba"], [575, 2, 1, "", "predict_proba"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "get_support"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 3, 1, "", "n_features_in_"], [578, 2, 1, "", "partial_fit"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 3, 1, "", "threshold_"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_support"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[591, 1, 1, "", "GaussianProcessClassifier"], [592, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "get_params"], [591, 3, 1, "", "kernel_"], [591, 2, 1, "", "log_marginal_likelihood"], [591, 2, 1, "", "predict"], [591, 2, 1, "", "predict_proba"], [591, 2, 1, "", "score"], [591, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "log_marginal_likelihood"], [592, 2, 1, "", "predict"], [592, 2, 1, "", "sample_y"], [592, 2, 1, "", "score"], [592, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[593, 1, 1, "", "CompoundKernel"], [594, 1, 1, "", "ConstantKernel"], [595, 1, 1, "", "DotProduct"], [596, 1, 1, "", "ExpSineSquared"], [597, 1, 1, "", "Exponentiation"], [598, 1, 1, "", "Hyperparameter"], [599, 1, 1, "", "Kernel"], [600, 1, 1, "", "Matern"], [601, 1, 1, "", "PairwiseKernel"], [602, 1, 1, "", "Product"], [603, 1, 1, "", "RBF"], [604, 1, 1, "", "RationalQuadratic"], [605, 1, 1, "", "Sum"], [606, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[593, 2, 1, "", "__call__"], [593, 3, 1, "", "bounds"], [593, 2, 1, "", "clone_with_theta"], [593, 2, 1, "", "diag"], [593, 2, 1, "", "get_params"], [593, 3, 1, "", "hyperparameters"], [593, 2, 1, "", "is_stationary"], [593, 3, 1, "", "n_dims"], [593, 3, 1, "", "requires_vector_input"], [593, 2, 1, "", "set_params"], [593, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[594, 2, 1, "", "__call__"], [594, 3, 1, "", "bounds"], [594, 2, 1, "", "clone_with_theta"], [594, 2, 1, "", "diag"], [594, 2, 1, "", "get_params"], [594, 3, 1, "", "hyperparameters"], [594, 2, 1, "", "is_stationary"], [594, 3, 1, "", "n_dims"], [594, 3, 1, "", "requires_vector_input"], [594, 2, 1, "", "set_params"], [594, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[595, 2, 1, "", "__call__"], [595, 3, 1, "", "bounds"], [595, 2, 1, "", "clone_with_theta"], [595, 2, 1, "", "diag"], [595, 2, 1, "", "get_params"], [595, 3, 1, "", "hyperparameters"], [595, 2, 1, "", "is_stationary"], [595, 3, 1, "", "n_dims"], [595, 3, 1, "", "requires_vector_input"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[596, 2, 1, "", "__call__"], [596, 3, 1, "", "bounds"], [596, 2, 1, "", "clone_with_theta"], [596, 2, 1, "", "diag"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "hyperparameter_length_scale"], [596, 3, 1, "", "hyperparameters"], [596, 2, 1, "", "is_stationary"], [596, 3, 1, "", "n_dims"], [596, 3, 1, "", "requires_vector_input"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[598, 2, 1, "", "__call__"], [598, 5, 1, "", "bounds"], [598, 2, 1, "", "count"], [598, 5, 1, "", "fixed"], [598, 2, 1, "", "index"], [598, 5, 1, "", "n_elements"], [598, 5, 1, "", "name"], [598, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.impute": [[608, 1, 1, "", "IterativeImputer"], [609, 1, 1, "", "KNNImputer"], [610, 1, 1, "", "MissingIndicator"], [611, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "fit_transform"], [609, 2, 1, "", "get_feature_names_out"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "set_output"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "set_output"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "fit_transform"], [611, 2, 1, "", "get_feature_names_out"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "inverse_transform"], [611, 2, 1, "", "set_output"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "transform"]], "sklearn.inspection": [[612, 1, 1, "", "DecisionBoundaryDisplay"], [613, 1, 1, "", "PartialDependenceDisplay"], [614, 4, 1, "", "partial_dependence"], [615, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[612, 2, 1, "", "from_estimator"], [612, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[613, 2, 1, "", "from_estimator"], [613, 2, 1, "", "plot"]], "sklearn.isotonic": [[616, 1, 1, "", "IsotonicRegression"], [617, 4, 1, "", "check_increasing"], [618, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_output"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[619, 1, 1, "", "AdditiveChi2Sampler"], [620, 1, 1, "", "Nystroem"], [621, 1, 1, "", "PolynomialCountSketch"], [622, 1, 1, "", "RBFSampler"], [623, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "fit_transform"], [619, 2, 1, "", "get_feature_names_out"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "set_output"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "fit_transform"], [620, 2, 1, "", "get_feature_names_out"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "set_output"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "fit_transform"], [622, 2, 1, "", "get_feature_names_out"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "set_output"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[624, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"]], "sklearn.linear_model": [[625, 1, 1, "", "ARDRegression"], [626, 1, 1, "", "BayesianRidge"], [627, 1, 1, "", "ElasticNet"], [628, 1, 1, "", "ElasticNetCV"], [629, 1, 1, "", "GammaRegressor"], [630, 1, 1, "", "HuberRegressor"], [631, 1, 1, "", "Lars"], [632, 1, 1, "", "LarsCV"], [633, 1, 1, "", "Lasso"], [634, 1, 1, "", "LassoCV"], [635, 1, 1, "", "LassoLars"], [636, 1, 1, "", "LassoLarsCV"], [637, 1, 1, "", "LassoLarsIC"], [638, 1, 1, "", "LinearRegression"], [639, 1, 1, "", "LogisticRegression"], [640, 1, 1, "", "LogisticRegressionCV"], [641, 1, 1, "", "MultiTaskElasticNet"], [642, 1, 1, "", "MultiTaskElasticNetCV"], [643, 1, 1, "", "MultiTaskLasso"], [644, 1, 1, "", "MultiTaskLassoCV"], [645, 1, 1, "", "OrthogonalMatchingPursuit"], [646, 1, 1, "", "OrthogonalMatchingPursuitCV"], [647, 1, 1, "", "PassiveAggressiveClassifier"], [648, 4, 1, "", "PassiveAggressiveRegressor"], [649, 1, 1, "", "Perceptron"], [650, 1, 1, "", "PoissonRegressor"], [651, 1, 1, "", "QuantileRegressor"], [652, 1, 1, "", "RANSACRegressor"], [653, 1, 1, "", "Ridge"], [654, 1, 1, "", "RidgeCV"], [655, 1, 1, "", "RidgeClassifier"], [656, 1, 1, "", "RidgeClassifierCV"], [657, 1, 1, "", "SGDClassifier"], [658, 1, 1, "", "SGDOneClassSVM"], [659, 1, 1, "", "SGDRegressor"], [660, 1, 1, "", "TheilSenRegressor"], [661, 1, 1, "", "TweedieRegressor"], [662, 4, 1, "", "enet_path"], [663, 4, 1, "", "lars_path"], [664, 4, 1, "", "lars_path_gram"], [665, 4, 1, "", "lasso_path"], [666, 4, 1, "", "orthogonal_mp"], [667, 4, 1, "", "orthogonal_mp_gram"], [668, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "path"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "path"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "path"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"], [633, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "path"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[639, 2, 1, "", "decision_function"], [639, 2, 1, "", "densify"], [639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "predict_log_proba"], [639, 2, 1, "", "predict_proba"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[640, 2, 1, "", "decision_function"], [640, 2, 1, "", "densify"], [640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "predict_log_proba"], [640, 2, 1, "", "predict_proba"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "path"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"], [641, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "path"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "path"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[647, 2, 1, "", "decision_function"], [647, 2, 1, "", "densify"], [647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "partial_fit"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[649, 2, 1, "", "decision_function"], [649, 2, 1, "", "densify"], [649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "partial_fit"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[655, 3, 1, "", "classes_"], [655, 2, 1, "", "decision_function"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[656, 3, 1, "", "classes_"], [656, 2, 1, "", "decision_function"], [656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "partial_fit"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "predict_log_proba"], [657, 2, 1, "", "predict_proba"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "fit_predict"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "partial_fit"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score_samples"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "partial_fit"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"]], "sklearn.manifold": [[669, 1, 1, "", "Isomap"], [670, 1, 1, "", "LocallyLinearEmbedding"], [671, 1, 1, "", "MDS"], [672, 1, 1, "", "SpectralEmbedding"], [673, 1, 1, "", "TSNE"], [674, 4, 1, "", "locally_linear_embedding"], [675, 4, 1, "", "smacof"], [676, 4, 1, "", "spectral_embedding"], [677, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "fit_transform"], [669, 2, 1, "", "get_feature_names_out"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "reconstruction_error"], [669, 2, 1, "", "set_output"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "fit_transform"], [670, 2, 1, "", "get_feature_names_out"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "set_output"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "fit_transform"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "fit_transform"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "fit_transform"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "set_params"]], "sklearn.metrics": [[678, 1, 1, "", "ConfusionMatrixDisplay"], [679, 1, 1, "", "DetCurveDisplay"], [680, 1, 1, "", "DistanceMetric"], [681, 1, 1, "", "PrecisionRecallDisplay"], [682, 1, 1, "", "PredictionErrorDisplay"], [683, 1, 1, "", "RocCurveDisplay"], [684, 4, 1, "", "accuracy_score"], [685, 4, 1, "", "adjusted_mutual_info_score"], [686, 4, 1, "", "adjusted_rand_score"], [687, 4, 1, "", "auc"], [688, 4, 1, "", "average_precision_score"], [689, 4, 1, "", "balanced_accuracy_score"], [690, 4, 1, "", "brier_score_loss"], [691, 4, 1, "", "calinski_harabasz_score"], [692, 4, 1, "", "check_scoring"], [693, 4, 1, "", "class_likelihood_ratios"], [694, 4, 1, "", "classification_report"], [392, 0, 0, "-", "cluster"], [697, 4, 1, "", "cohen_kappa_score"], [698, 4, 1, "", "completeness_score"], [699, 4, 1, "", "confusion_matrix"], [700, 4, 1, "", "consensus_score"], [701, 4, 1, "", "coverage_error"], [702, 4, 1, "", "d2_absolute_error_score"], [703, 4, 1, "", "d2_pinball_score"], [704, 4, 1, "", "d2_tweedie_score"], [705, 4, 1, "", "davies_bouldin_score"], [706, 4, 1, "", "dcg_score"], [707, 4, 1, "", "det_curve"], [708, 4, 1, "", "explained_variance_score"], [709, 4, 1, "", "f1_score"], [710, 4, 1, "", "fbeta_score"], [711, 4, 1, "", "fowlkes_mallows_score"], [712, 4, 1, "", "get_scorer"], [713, 4, 1, "", "get_scorer_names"], [714, 4, 1, "", "hamming_loss"], [715, 4, 1, "", "hinge_loss"], [716, 4, 1, "", "homogeneity_completeness_v_measure"], [717, 4, 1, "", "homogeneity_score"], [718, 4, 1, "", "jaccard_score"], [719, 4, 1, "", "label_ranking_average_precision_score"], [720, 4, 1, "", "label_ranking_loss"], [721, 4, 1, "", "log_loss"], [722, 4, 1, "", "make_scorer"], [723, 4, 1, "", "matthews_corrcoef"], [724, 4, 1, "", "max_error"], [725, 4, 1, "", "mean_absolute_error"], [726, 4, 1, "", "mean_absolute_percentage_error"], [727, 4, 1, "", "mean_gamma_deviance"], [728, 4, 1, "", "mean_pinball_loss"], [729, 4, 1, "", "mean_poisson_deviance"], [730, 4, 1, "", "mean_squared_error"], [731, 4, 1, "", "mean_squared_log_error"], [732, 4, 1, "", "mean_tweedie_deviance"], [733, 4, 1, "", "median_absolute_error"], [734, 4, 1, "", "multilabel_confusion_matrix"], [735, 4, 1, "", "mutual_info_score"], [736, 4, 1, "", "ndcg_score"], [737, 4, 1, "", "normalized_mutual_info_score"], [392, 0, 0, "-", "pairwise"], [758, 4, 1, "", "pairwise_distances"], [759, 4, 1, "", "pairwise_distances_argmin"], [760, 4, 1, "", "pairwise_distances_argmin_min"], [761, 4, 1, "", "pairwise_distances_chunked"], [762, 4, 1, "", "precision_recall_curve"], [763, 4, 1, "", "precision_recall_fscore_support"], [764, 4, 1, "", "precision_score"], [765, 4, 1, "", "r2_score"], [766, 4, 1, "", "rand_score"], [767, 4, 1, "", "recall_score"], [768, 4, 1, "", "roc_auc_score"], [769, 4, 1, "", "roc_curve"], [770, 4, 1, "", "silhouette_samples"], [771, 4, 1, "", "silhouette_score"], [772, 4, 1, "", "top_k_accuracy_score"], [773, 4, 1, "", "v_measure_score"], [774, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[678, 2, 1, "", "from_estimator"], [678, 2, 1, "", "from_predictions"], [678, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[679, 2, 1, "", "from_estimator"], [679, 2, 1, "", "from_predictions"], [679, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[680, 2, 1, "", "dist_to_rdist"], [680, 2, 1, "", "get_metric"], [680, 2, 1, "", "pairwise"], [680, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[681, 2, 1, "", "from_estimator"], [681, 2, 1, "", "from_predictions"], [681, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[682, 2, 1, "", "from_estimator"], [682, 2, 1, "", "from_predictions"], [682, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[683, 2, 1, "", "from_estimator"], [683, 2, 1, "", "from_predictions"], [683, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[695, 4, 1, "", "contingency_matrix"], [696, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[738, 4, 1, "", "additive_chi2_kernel"], [739, 4, 1, "", "chi2_kernel"], [740, 4, 1, "", "cosine_distances"], [741, 4, 1, "", "cosine_similarity"], [742, 4, 1, "", "distance_metrics"], [743, 4, 1, "", "euclidean_distances"], [744, 4, 1, "", "haversine_distances"], [745, 4, 1, "", "kernel_metrics"], [746, 4, 1, "", "laplacian_kernel"], [747, 4, 1, "", "linear_kernel"], [748, 4, 1, "", "manhattan_distances"], [749, 4, 1, "", "nan_euclidean_distances"], [750, 4, 1, "", "paired_cosine_distances"], [751, 4, 1, "", "paired_distances"], [752, 4, 1, "", "paired_euclidean_distances"], [753, 4, 1, "", "paired_manhattan_distances"], [754, 4, 1, "", "pairwise_kernels"], [755, 4, 1, "", "polynomial_kernel"], [756, 4, 1, "", "rbf_kernel"], [757, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[775, 1, 1, "", "BayesianGaussianMixture"], [776, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[775, 2, 1, "", "fit"], [775, 2, 1, "", "fit_predict"], [775, 2, 1, "", "get_params"], [775, 2, 1, "", "predict"], [775, 2, 1, "", "predict_proba"], [775, 2, 1, "", "sample"], [775, 2, 1, "", "score"], [775, 2, 1, "", "score_samples"], [775, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[776, 2, 1, "", "aic"], [776, 2, 1, "", "bic"], [776, 2, 1, "", "fit"], [776, 2, 1, "", "fit_predict"], [776, 2, 1, "", "get_params"], [776, 2, 1, "", "predict"], [776, 2, 1, "", "predict_proba"], [776, 2, 1, "", "sample"], [776, 2, 1, "", "score"], [776, 2, 1, "", "score_samples"], [776, 2, 1, "", "set_params"]], "sklearn.model_selection": [[777, 1, 1, "", "GridSearchCV"], [778, 1, 1, "", "GroupKFold"], [779, 1, 1, "", "GroupShuffleSplit"], [780, 1, 1, "", "HalvingGridSearchCV"], [781, 1, 1, "", "HalvingRandomSearchCV"], [782, 1, 1, "", "KFold"], [783, 1, 1, "", "LearningCurveDisplay"], [784, 1, 1, "", "LeaveOneGroupOut"], [785, 1, 1, "", "LeaveOneOut"], [786, 1, 1, "", "LeavePGroupsOut"], [787, 1, 1, "", "LeavePOut"], [788, 1, 1, "", "ParameterGrid"], [789, 1, 1, "", "ParameterSampler"], [790, 1, 1, "", "PredefinedSplit"], [791, 1, 1, "", "RandomizedSearchCV"], [792, 1, 1, "", "RepeatedKFold"], [793, 1, 1, "", "RepeatedStratifiedKFold"], [794, 1, 1, "", "ShuffleSplit"], [795, 1, 1, "", "StratifiedGroupKFold"], [796, 1, 1, "", "StratifiedKFold"], [797, 1, 1, "", "StratifiedShuffleSplit"], [798, 1, 1, "", "TimeSeriesSplit"], [799, 4, 1, "", "check_cv"], [800, 4, 1, "", "cross_val_predict"], [801, 4, 1, "", "cross_val_score"], [802, 4, 1, "", "cross_validate"], [803, 4, 1, "", "learning_curve"], [804, 4, 1, "", "permutation_test_score"], [805, 4, 1, "", "train_test_split"], [806, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[777, 3, 1, "", "classes_"], [777, 2, 1, "", "decision_function"], [777, 2, 1, "", "fit"], [777, 2, 1, "", "get_params"], [777, 2, 1, "", "inverse_transform"], [777, 3, 1, "", "n_features_in_"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "predict_log_proba"], [777, 2, 1, "", "predict_proba"], [777, 2, 1, "", "score"], [777, 2, 1, "", "score_samples"], [777, 2, 1, "", "set_params"], [777, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[778, 2, 1, "", "get_n_splits"], [778, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[780, 3, 1, "", "classes_"], [780, 2, 1, "", "decision_function"], [780, 2, 1, "", "fit"], [780, 2, 1, "", "get_params"], [780, 2, 1, "", "inverse_transform"], [780, 3, 1, "", "n_features_in_"], [780, 2, 1, "", "predict"], [780, 2, 1, "", "predict_log_proba"], [780, 2, 1, "", "predict_proba"], [780, 2, 1, "", "score"], [780, 2, 1, "", "score_samples"], [780, 2, 1, "", "set_params"], [780, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[781, 3, 1, "", "classes_"], [781, 2, 1, "", "decision_function"], [781, 2, 1, "", "fit"], [781, 2, 1, "", "get_params"], [781, 2, 1, "", "inverse_transform"], [781, 3, 1, "", "n_features_in_"], [781, 2, 1, "", "predict"], [781, 2, 1, "", "predict_log_proba"], [781, 2, 1, "", "predict_proba"], [781, 2, 1, "", "score"], [781, 2, 1, "", "score_samples"], [781, 2, 1, "", "set_params"], [781, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[783, 2, 1, "", "from_estimator"], [783, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[785, 2, 1, "", "get_n_splits"], [785, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[791, 3, 1, "", "classes_"], [791, 2, 1, "", "decision_function"], [791, 2, 1, "", "fit"], [791, 2, 1, "", "get_params"], [791, 2, 1, "", "inverse_transform"], [791, 3, 1, "", "n_features_in_"], [791, 2, 1, "", "predict"], [791, 2, 1, "", "predict_log_proba"], [791, 2, 1, "", "predict_proba"], [791, 2, 1, "", "score"], [791, 2, 1, "", "score_samples"], [791, 2, 1, "", "set_params"], [791, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[793, 2, 1, "", "get_n_splits"], [793, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.multiclass": [[807, 1, 1, "", "OneVsOneClassifier"], [808, 1, 1, "", "OneVsRestClassifier"], [809, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_params"], [807, 3, 1, "", "n_classes_"], [807, 2, 1, "", "partial_fit"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_params"], [808, 3, 1, "", "multilabel_"], [808, 3, 1, "", "n_classes_"], [808, 2, 1, "", "partial_fit"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"]], "sklearn.multioutput": [[810, 1, 1, "", "ClassifierChain"], [811, 1, 1, "", "MultiOutputClassifier"], [812, 1, 1, "", "MultiOutputRegressor"], [813, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "partial_fit"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "partial_fit"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[814, 1, 1, "", "BernoulliNB"], [815, 1, 1, "", "CategoricalNB"], [816, 1, 1, "", "ComplementNB"], [817, 1, 1, "", "GaussianNB"], [818, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "partial_fit"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_joint_log_proba"], [814, 2, 1, "", "predict_log_proba"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "partial_fit"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_joint_log_proba"], [815, 2, 1, "", "predict_log_proba"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "partial_fit"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "predict_joint_log_proba"], [816, 2, 1, "", "predict_log_proba"], [816, 2, 1, "", "predict_proba"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "partial_fit"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_joint_log_proba"], [817, 2, 1, "", "predict_log_proba"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_joint_log_proba"], [818, 2, 1, "", "predict_log_proba"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.neighbors": [[819, 1, 1, "", "BallTree"], [820, 1, 1, "", "KDTree"], [821, 1, 1, "", "KNeighborsClassifier"], [822, 1, 1, "", "KNeighborsRegressor"], [823, 1, 1, "", "KNeighborsTransformer"], [824, 1, 1, "", "KernelDensity"], [825, 1, 1, "", "LocalOutlierFactor"], [826, 1, 1, "", "NearestCentroid"], [827, 1, 1, "", "NearestNeighbors"], [828, 1, 1, "", "NeighborhoodComponentsAnalysis"], [829, 1, 1, "", "RadiusNeighborsClassifier"], [830, 1, 1, "", "RadiusNeighborsRegressor"], [831, 1, 1, "", "RadiusNeighborsTransformer"], [832, 4, 1, "", "kneighbors_graph"], [833, 4, 1, "", "radius_neighbors_graph"], [834, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[819, 2, 1, "", "get_arrays"], [819, 2, 1, "", "get_n_calls"], [819, 2, 1, "", "get_tree_stats"], [819, 2, 1, "", "kernel_density"], [819, 2, 1, "", "query"], [819, 2, 1, "", "query_radius"], [819, 2, 1, "", "reset_n_calls"], [819, 2, 1, "", "two_point_correlation"], [819, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[820, 2, 1, "", "get_arrays"], [820, 2, 1, "", "get_n_calls"], [820, 2, 1, "", "get_tree_stats"], [820, 2, 1, "", "kernel_density"], [820, 2, 1, "", "query"], [820, 2, 1, "", "query_radius"], [820, 2, 1, "", "reset_n_calls"], [820, 2, 1, "", "two_point_correlation"], [820, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "kneighbors"], [821, 2, 1, "", "kneighbors_graph"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "kneighbors"], [822, 2, 1, "", "kneighbors_graph"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "fit_transform"], [823, 2, 1, "", "get_feature_names_out"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "kneighbors"], [823, 2, 1, "", "kneighbors_graph"], [823, 2, 1, "", "set_output"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "sample"], [824, 2, 1, "", "score"], [824, 2, 1, "", "score_samples"], [824, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[825, 2, 1, "", "decision_function"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_predict"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "kneighbors"], [825, 2, 1, "", "kneighbors_graph"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "score_samples"], [825, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "kneighbors"], [827, 2, 1, "", "kneighbors_graph"], [827, 2, 1, "", "radius_neighbors"], [827, 2, 1, "", "radius_neighbors_graph"], [827, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "radius_neighbors"], [829, 2, 1, "", "radius_neighbors_graph"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "radius_neighbors"], [830, 2, 1, "", "radius_neighbors_graph"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "fit_transform"], [831, 2, 1, "", "get_feature_names_out"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "radius_neighbors"], [831, 2, 1, "", "radius_neighbors_graph"], [831, 2, 1, "", "set_output"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "transform"]], "sklearn.neural_network": [[835, 1, 1, "", "BernoulliRBM"], [836, 1, 1, "", "MLPClassifier"], [837, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "gibbs"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "score_samples"], [835, 2, 1, "", "set_output"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"]], "sklearn.pipeline": [[838, 1, 1, "", "FeatureUnion"], [839, 1, 1, "", "Pipeline"], [840, 4, 1, "", "make_pipeline"], [841, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[838, 3, 1, "", "feature_names_in_"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_transform"], [838, 2, 1, "", "get_feature_names_out"], [838, 2, 1, "", "get_params"], [838, 3, 1, "", "n_features_in_"], [838, 2, 1, "", "set_output"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[839, 3, 1, "", "classes_"], [839, 2, 1, "", "decision_function"], [839, 3, 1, "", "feature_names_in_"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_predict"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "inverse_transform"], [839, 3, 1, "", "n_features_in_"], [839, 3, 1, "", "named_steps"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "score_samples"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing": [[842, 1, 1, "", "Binarizer"], [843, 1, 1, "", "FunctionTransformer"], [844, 1, 1, "", "KBinsDiscretizer"], [845, 1, 1, "", "KernelCenterer"], [846, 1, 1, "", "LabelBinarizer"], [847, 1, 1, "", "LabelEncoder"], [848, 1, 1, "", "MaxAbsScaler"], [849, 1, 1, "", "MinMaxScaler"], [850, 1, 1, "", "MultiLabelBinarizer"], [851, 1, 1, "", "Normalizer"], [852, 1, 1, "", "OneHotEncoder"], [853, 1, 1, "", "OrdinalEncoder"], [854, 1, 1, "", "PolynomialFeatures"], [855, 1, 1, "", "PowerTransformer"], [856, 1, 1, "", "QuantileTransformer"], [857, 1, 1, "", "RobustScaler"], [858, 1, 1, "", "SplineTransformer"], [859, 1, 1, "", "StandardScaler"], [860, 4, 1, "", "add_dummy_feature"], [861, 4, 1, "", "binarize"], [862, 4, 1, "", "label_binarize"], [863, 4, 1, "", "maxabs_scale"], [864, 4, 1, "", "minmax_scale"], [865, 4, 1, "", "normalize"], [866, 4, 1, "", "power_transform"], [867, 4, 1, "", "quantile_transform"], [868, 4, 1, "", "robust_scale"], [869, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "inverse_transform"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "inverse_transform"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "inverse_transform"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_params"], [852, 3, 1, "", "infrequent_categories_"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_params"], [854, 3, 1, "", "powers_"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "inverse_transform"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "inverse_transform"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "partial_fit"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.random_projection": [[870, 1, 1, "", "GaussianRandomProjection"], [871, 1, 1, "", "SparseRandomProjection"], [872, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[873, 1, 1, "", "LabelPropagation"], [874, 1, 1, "", "LabelSpreading"], [875, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "predict"], [873, 2, 1, "", "predict_proba"], [873, 2, 1, "", "score"], [873, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "predict"], [874, 2, 1, "", "predict_proba"], [874, 2, 1, "", "score"], [874, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[875, 2, 1, "", "decision_function"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "predict_log_proba"], [875, 2, 1, "", "predict_proba"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_params"]], "sklearn.svm": [[878, 1, 1, "", "LinearSVC"], [879, 1, 1, "", "LinearSVR"], [880, 1, 1, "", "NuSVC"], [881, 1, 1, "", "NuSVR"], [882, 1, 1, "", "OneClassSVM"], [883, 1, 1, "", "SVC"], [884, 1, 1, "", "SVR"], [885, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[878, 2, 1, "", "decision_function"], [878, 2, 1, "", "densify"], [878, 2, 1, "", "fit"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "predict"], [879, 2, 1, "", "score"], [879, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[880, 3, 1, "", "coef_"], [880, 2, 1, "", "decision_function"], [880, 2, 1, "", "fit"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "n_support_"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_log_proba"], [880, 2, 1, "", "predict_proba"], [880, 3, 1, "", "probA_"], [880, 3, 1, "", "probB_"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[881, 3, 1, "", "coef_"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "n_support_"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[882, 3, 1, "", "coef_"], [882, 2, 1, "", "decision_function"], [882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_predict"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "n_support_"], [882, 2, 1, "", "predict"], [882, 2, 1, "", "score_samples"], [882, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[883, 3, 1, "", "coef_"], [883, 2, 1, "", "decision_function"], [883, 2, 1, "", "fit"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "n_support_"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "predict_log_proba"], [883, 2, 1, "", "predict_proba"], [883, 3, 1, "", "probA_"], [883, 3, 1, "", "probB_"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[884, 3, 1, "", "coef_"], [884, 2, 1, "", "fit"], [884, 2, 1, "", "get_params"], [884, 3, 1, "", "n_support_"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"]], "sklearn.tree": [[886, 1, 1, "", "DecisionTreeClassifier"], [887, 1, 1, "", "DecisionTreeRegressor"], [888, 1, 1, "", "ExtraTreeClassifier"], [889, 1, 1, "", "ExtraTreeRegressor"], [890, 4, 1, "", "export_graphviz"], [891, 4, 1, "", "export_text"], [892, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[886, 2, 1, "", "apply"], [886, 2, 1, "", "cost_complexity_pruning_path"], [886, 2, 1, "", "decision_path"], [886, 3, 1, "", "feature_importances_"], [886, 2, 1, "", "fit"], [886, 2, 1, "", "get_depth"], [886, 2, 1, "", "get_n_leaves"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "predict_log_proba"], [886, 2, 1, "", "predict_proba"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[887, 2, 1, "", "apply"], [887, 2, 1, "", "cost_complexity_pruning_path"], [887, 2, 1, "", "decision_path"], [887, 3, 1, "", "feature_importances_"], [887, 2, 1, "", "fit"], [887, 2, 1, "", "get_depth"], [887, 2, 1, "", "get_n_leaves"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "score"], [887, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[888, 2, 1, "", "apply"], [888, 2, 1, "", "cost_complexity_pruning_path"], [888, 2, 1, "", "decision_path"], [888, 3, 1, "", "feature_importances_"], [888, 2, 1, "", "fit"], [888, 2, 1, "", "get_depth"], [888, 2, 1, "", "get_n_leaves"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "predict_log_proba"], [888, 2, 1, "", "predict_proba"], [888, 2, 1, "", "score"], [888, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[889, 2, 1, "", "apply"], [889, 2, 1, "", "cost_complexity_pruning_path"], [889, 2, 1, "", "decision_path"], [889, 3, 1, "", "feature_importances_"], [889, 2, 1, "", "fit"], [889, 2, 1, "", "get_depth"], [889, 2, 1, "", "get_n_leaves"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"]], "sklearn.utils": [[893, 1, 1, "", "Bunch"], [894, 4, 1, "", "_safe_indexing"], [896, 4, 1, "", "as_float_array"], [897, 4, 1, "", "assert_all_finite"], [898, 4, 1, "", "check_X_y"], [899, 4, 1, "", "check_array"], [900, 4, 1, "", "check_consistent_length"], [901, 4, 1, "", "check_random_state"], [902, 4, 1, "", "check_scalar"], [905, 4, 1, "", "deprecated"], [911, 4, 1, "", "estimator_html_repr"], [918, 4, 1, "", "gen_batches"], [919, 4, 1, "", "gen_even_slices"], [921, 4, 1, "", "indexable"], [927, 4, 1, "", "murmurhash3_32"], [930, 4, 1, "", "parallel_backend"], [932, 4, 1, "", "register_parallel_backend"], [933, 4, 1, "", "resample"], [934, 4, 1, "", "safe_mask"], [935, 4, 1, "", "safe_sqr"], [936, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[893, 2, 1, "", "clear"], [893, 2, 1, "", "copy"], [893, 2, 1, "", "fromkeys"], [893, 2, 1, "", "get"], [893, 2, 1, "", "items"], [893, 2, 1, "", "keys"], [893, 2, 1, "", "pop"], [893, 2, 1, "", "popitem"], [893, 2, 1, "", "setdefault"], [893, 2, 1, "", "update"], [893, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[895, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[903, 4, 1, "", "compute_class_weight"], [904, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[906, 4, 1, "", "all_displays"], [907, 4, 1, "", "all_estimators"], [908, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[909, 4, 1, "", "check_estimator"], [910, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[912, 4, 1, "", "density"], [913, 4, 1, "", "fast_logdet"], [914, 4, 1, "", "randomized_range_finder"], [915, 4, 1, "", "randomized_svd"], [916, 4, 1, "", "safe_sparse_dot"], [917, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[920, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[922, 4, 1, "", "available_if"], [923, 4, 1, "", "if_delegate_has_method"]], "sklearn.utils.multiclass": [[924, 4, 1, "", "is_multilabel"], [925, 4, 1, "", "type_of_target"], [926, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[928, 1, 1, "", "Parallel"], [929, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[928, 2, 1, "", "dispatch_next"], [928, 2, 1, "", "dispatch_one_batch"], [928, 2, 1, "", "format"], [928, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[931, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[937, 4, 1, "", "incr_mean_variance_axis"], [938, 4, 1, "", "inplace_column_scale"], [939, 4, 1, "", "inplace_csr_column_scale"], [940, 4, 1, "", "inplace_row_scale"], [941, 4, 1, "", "inplace_swap_column"], [942, 4, 1, "", "inplace_swap_row"], [943, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[944, 4, 1, "", "inplace_csr_row_normalize_l1"], [945, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[946, 4, 1, "", "check_is_fitted"], [947, 4, 1, "", "check_memory"], [948, 4, 1, "", "check_symmetric"], [949, 4, 1, "", "column_or_1d"], [950, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 379], "u": 0, "histori": [0, 1002], "govern": [0, 382], "author": [0, 1004], "contributor": [0, 367, 368, 382, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "experi": [0, 37, 367, 382], "team": [0, 367, 382], "commun": [0, 368, 382], "emeritu": 0, "core": [0, 8, 356, 367, 372, 374, 379, 382, 401, 964], "develop": [0, 366, 369, 370, 371, 372, 375, 376, 377, 382, 951], "cite": 0, "scikit": [0, 251, 306, 307, 308, 309, 310, 311, 353, 354, 366, 369, 370, 372, 373, 379, 382, 384, 980, 982, 983, 986, 988, 989, 994, 997, 1000], "learn": [0, 5, 12, 50, 94, 97, 147, 163, 165, 166, 167, 172, 216, 217, 218, 219, 231, 251, 258, 286, 293, 306, 307, 308, 309, 310, 311, 314, 315, 316, 353, 354, 356, 364, 366, 368, 369, 370, 372, 373, 379, 382, 384, 392, 398, 400, 957, 959, 967, 975, 980, 982, 983, 984, 986, 988, 989, 991, 994, 995, 996, 997, 998, 1000], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 85, 99, 103, 229, 368, 370, 379, 392, 974, 979, 982], "infrastructur": 0, "support": [0, 25, 118, 163, 190, 306, 307, 308, 309, 311, 321, 324, 333, 379, 384, 389, 391, 392, 400, 977, 985, 995, 1010], "exampl": [3, 6, 9, 53, 58, 74, 87, 101, 124, 155, 163, 192, 193, 331, 335, 356, 362, 363, 373, 379, 383, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 415, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 463, 464, 465, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 485, 487, 491, 492, 493, 494, 495, 496, 500, 501, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 562, 563, 565, 568, 569, 570, 571, 572, 574, 575, 578, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 609, 611, 612, 613, 614, 615, 616, 620, 621, 622, 624, 625, 626, 627, 629, 630, 633, 634, 636, 637, 638, 639, 640, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 678, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 698, 699, 700, 707, 709, 714, 717, 718, 721, 722, 725, 728, 729, 730, 732, 733, 735, 737, 758, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 810, 812, 814, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 864, 867, 871, 872, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 892, 893, 901, 910, 912, 919, 922, 936, 946, 951, 954, 956, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 988, 994, 995, 996, 1001, 1004], "base": [3, 4, 84, 115, 116, 145, 163, 231, 306, 307, 309, 311, 368, 392, 393, 397, 400, 402, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 958, 970, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "real": [3, 9, 74, 108, 163, 363], "world": [3, 74, 163, 363], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 57, 61, 69, 84, 87, 88, 89, 90, 91, 94, 103, 117, 118, 128, 134, 135, 148, 150, 152, 153, 155, 157, 163, 165, 166, 167, 175, 178, 185, 196, 198, 205, 214, 217, 218, 225, 230, 235, 254, 262, 263, 318, 319, 323, 339, 345, 360, 361, 362, 363, 364, 365, 373, 379, 392, 403, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 988, 994, 995, 997, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "time": [4, 15, 22, 28, 35, 67, 75, 82, 86, 92, 106, 119, 132, 138, 146, 158, 162, 170, 173, 190, 215, 223, 230, 231, 239, 248, 272, 275, 290, 296, 304, 312, 320, 337, 339, 342, 349, 397], "relat": [4, 8, 362, 368, 970, 982, 1011], "featur": [4, 51, 54, 73, 99, 114, 115, 116, 118, 122, 125, 126, 139, 141, 143, 144, 145, 163, 168, 169, 172, 175, 190, 193, 214, 230, 235, 257, 295, 299, 300, 303, 306, 308, 309, 329, 339, 340, 354, 356, 368, 372, 392, 394, 400, 401, 402, 952, 970, 972, 979, 996, 997, 1007, 1008, 1009, 1010, 1011], "engin": [4, 168, 982, 986], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 56, 57, 62, 63, 65, 66, 69, 74, 77, 79, 81, 84, 85, 95, 96, 99, 100, 101, 102, 108, 110, 115, 116, 122, 124, 128, 141, 144, 145, 153, 154, 156, 161, 165, 168, 169, 172, 176, 180, 182, 189, 190, 226, 231, 234, 237, 246, 251, 253, 257, 262, 263, 265, 266, 269, 288, 295, 298, 302, 303, 314, 326, 329, 333, 340, 341, 350, 354, 356, 363, 373, 379, 381, 393, 394, 396, 397, 402, 403, 972, 976, 986, 988, 991, 994, 996, 997], "explor": 4, "bike": [4, 167], "share": [4, 167], "demand": 4, "cross": [4, 83, 84, 134, 135, 144, 163, 185, 251, 252, 254, 255, 259, 261, 266, 329, 350, 368, 392, 396, 397, 951, 958, 992], "valid": [4, 134, 135, 144, 185, 229, 251, 252, 254, 255, 259, 261, 266, 271, 329, 350, 354, 370, 377, 392, 397, 946, 947, 948, 949, 950, 951, 957, 958, 965, 992], "gradient": [4, 118, 119, 120, 121, 122, 123, 167, 196, 204, 210, 306, 307, 309, 311, 400, 958, 976], "boost": [4, 118, 119, 120, 121, 122, 123, 167, 196, 306, 307, 309, 311, 400], "naiv": [4, 24, 25, 392, 964], "linear": [4, 25, 33, 34, 121, 148, 163, 166, 174, 175, 192, 196, 199, 202, 217, 218, 230, 307, 325, 332, 333, 354, 377, 379, 392, 956, 958, 959, 960, 972, 995], "regress": [4, 72, 74, 84, 85, 110, 121, 122, 131, 148, 153, 154, 155, 156, 175, 176, 179, 185, 187, 188, 189, 192, 194, 196, 198, 211, 213, 214, 228, 231, 288, 333, 346, 347, 364, 392, 394, 400, 403, 953, 955, 958, 962, 963, 965, 966, 976, 977, 978, 995], "step": [4, 236, 380, 394], "categori": [4, 310, 972], "trigonometr": 4, "period": [4, 197], "spline": [4, 197, 309, 972], "qualit": 4, "analysi": [4, 33, 34, 59, 94, 100, 102, 105, 121, 241, 258, 259, 266, 284, 285, 286, 339, 392, 396, 398, 956, 965, 979, 996, 997], "impact": [4, 60, 1019, 1020], "model": [4, 7, 11, 56, 74, 84, 95, 102, 108, 115, 116, 118, 122, 124, 144, 145, 148, 153, 163, 166, 167, 168, 172, 174, 175, 184, 185, 190, 196, 199, 214, 226, 231, 235, 240, 242, 246, 247, 249, 255, 256, 258, 263, 288, 295, 303, 307, 309, 333, 339, 354, 370, 379, 380, 382, 387, 388, 392, 397, 951, 957, 958, 961, 962, 964, 966, 967, 988, 992, 995, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "predict": [4, 10, 24, 85, 110, 121, 131, 149, 165, 176, 196, 231, 234, 252, 263, 314, 354, 379, 380, 396, 397, 403, 962, 973, 988, 995], "pairwis": [4, 256, 392, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 960], "interact": [4, 167, 311, 400, 995], "polynomi": [4, 172, 175, 176, 197, 954, 958, 960, 972, 995], "non": [4, 14, 94, 121, 191, 196, 217, 261, 325, 332, 333, 398, 958, 972], "kernel": [4, 5, 99, 148, 153, 154, 156, 157, 163, 171, 172, 230, 231, 280, 281, 289, 308, 322, 325, 330, 333, 392, 398, 399, 403, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 954, 955, 960, 972, 977, 995], "conclud": [4, 108, 221], "remark": [4, 56, 108, 221, 229], "imag": [5, 47, 50, 53, 65, 97, 362, 392, 401, 564, 565, 566, 567, 568], "denois": [5, 97], "us": [5, 6, 12, 17, 48, 94, 95, 97, 125, 126, 128, 183, 199, 210, 212, 256, 260, 265, 299, 333, 339, 340, 350, 356, 369, 373, 374, 376, 379, 397, 398, 400, 401, 402, 407, 415, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 463, 464, 465, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 485, 487, 491, 492, 493, 494, 495, 496, 500, 501, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 562, 563, 565, 568, 569, 570, 571, 572, 574, 575, 578, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 603, 604, 606, 608, 609, 611, 612, 613, 614, 615, 616, 620, 621, 622, 624, 625, 626, 627, 629, 630, 633, 634, 636, 637, 638, 639, 640, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 678, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 698, 699, 700, 707, 709, 714, 717, 718, 721, 722, 725, 728, 729, 730, 732, 733, 735, 737, 758, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 810, 812, 814, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 832, 835, 836, 837, 838, 839, 840, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 864, 867, 871, 872, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 887, 892, 893, 901, 910, 912, 919, 922, 936, 946, 956, 958, 959, 962, 966, 976, 977, 978, 986, 995, 997, 1014], "pca": [5, 57, 72, 94, 95, 98, 99, 100, 101, 102, 103, 303, 398, 522, 979, 996], "refer": [5, 11, 25, 27, 79, 80, 97, 112, 168, 172, 184, 256, 261, 262, 289, 362, 363, 365, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 951, 952, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978], "load": [5, 7, 17, 50, 57, 116, 118, 122, 134, 145, 168, 189, 214, 218, 226, 230, 237, 257, 265, 266, 303, 326, 329, 339, 340, 341, 361, 362, 373, 379, 401, 988, 996, 997], "via": [5, 53, 184, 185, 214, 400, 954], "openml": [5, 306, 362], "basi": [5, 157, 403, 954, 958, 995], "reconstruct": [5, 13, 97], "test": [5, 77, 140, 259, 262, 269, 339, 344, 366, 368, 370, 376, 377, 397, 988, 995, 997], "face": [6, 50, 94, 233, 363, 986, 993], "recognit": [6, 363, 365, 993], "eigenfac": [6, 94, 993], "svm": [6, 137, 141, 142, 172, 210, 230, 309, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 392, 878, 879, 880, 881, 882, 883, 884, 885, 958, 968, 976, 995, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "complex": [7, 227, 236, 255, 258, 316, 344, 354, 393, 958, 959, 965, 966, 976, 977, 978], "influenc": [7, 10, 354], "benchmark": [7, 10, 57, 339], "choos": [7, 951, 988, 990, 992], "paramet": [7, 77, 121, 254, 308, 326, 334, 368, 370, 380, 381, 392, 394, 400, 951, 958, 962, 977, 988, 992, 997], "run": [7, 57, 260], "code": [7, 94, 104, 368, 370, 373, 374, 376, 398, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 56, 62, 63, 65, 66, 77, 81, 84, 90, 91, 95, 96, 100, 108, 110, 117, 122, 124, 128, 129, 130, 131, 134, 144, 161, 167, 175, 176, 180, 188, 189, 190, 200, 201, 205, 218, 226, 230, 234, 235, 237, 246, 252, 253, 258, 260, 263, 265, 269, 271, 295, 306, 308, 309, 314, 323, 324, 329, 339, 345, 375, 392, 957, 969, 1001], "result": [7, 8, 38, 47, 49, 50, 56, 57, 62, 63, 66, 77, 79, 81, 95, 96, 108, 110, 128, 131, 161, 172, 201, 231, 234, 260, 269, 333, 340, 350, 951], "conclus": [7, 148, 185], "out": [8, 120, 356, 376, 397, 401, 951, 958, 964], "classif": [8, 26, 29, 30, 32, 33, 69, 90, 136, 149, 150, 151, 152, 156, 163, 212, 232, 259, 262, 263, 266, 279, 287, 295, 306, 313, 318, 339, 364, 392, 400, 403, 958, 962, 963, 965, 966, 976, 977, 978, 995, 997], "text": [8, 163, 227, 257, 318, 338, 339, 340, 341, 363, 392, 401, 569, 570, 571, 572, 997], "document": [8, 19, 163, 308, 309, 338, 339, 340, 368, 982, 983, 985, 1000, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "reuter": 8, "routin": [8, 355, 377], "main": [8, 196], "outlier": [9, 178, 213, 225, 234, 282, 283, 298, 392, 958, 968, 972], "detect": [9, 225, 234, 253, 282, 283, 962, 968, 977], "set": [9, 74, 77, 101, 128, 161, 263, 326, 344, 379, 397, 958, 988, 994, 995, 997], "first": [9, 37, 368], "second": [9, 37], "latenc": [10, 354], "helper": [10, 157, 218, 377], "function": [10, 34, 157, 186, 200, 201, 206, 218, 234, 251, 269, 308, 329, 341, 377, 392, 397, 400, 403, 954, 958, 962, 977, 995], "bulk": [10, 354], "atom": [10, 354], "speed": [10, 374], "variou": [10, 52, 203, 222], "regressor": [10, 110, 121, 175, 306, 309, 392, 400], "n_featur": 10, "throughput": [10, 354], "speci": [11, 289], "distribut": [11, 214, 217, 289, 302, 384, 959, 972], "visual": [12, 57, 105, 226, 231, 237, 251, 294, 307, 326, 392, 393, 394, 962, 1001], "stock": [12, 993], "market": [12, 993], "structur": [12, 39, 47, 66, 156, 316, 348, 993], "retriev": [12, 306], "from": [12, 97, 145, 168, 306, 355, 362, 366, 379, 392, 401, 958, 962, 988, 995, 996, 997, 1014], "internet": 12, "graph": [12, 306, 377, 379, 393, 401, 920], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 57, 59, 62, 63, 64, 65, 66, 94, 163, 310, 340, 364, 390, 392, 393, 398, 404, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 695, 696, 962, 996, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "affin": [12, 38, 393, 960], "propag": [12, 38, 314, 315, 316, 393, 975], "embed": [12, 52, 217, 218, 229, 286, 400, 959], "2d": [12, 52, 96, 103, 167], "space": [12, 99, 394, 951, 959], "compress": [13, 53, 354, 402], "sens": [13, 402], "tomographi": 13, "l1": [13, 187, 189, 212, 334, 402], "prior": [13, 157, 241], "lasso": [13, 180, 181, 182, 183, 184, 185, 190, 307, 633, 958], "topic": 14, "extract": [14, 73, 97, 214, 257, 340, 354, 356, 392, 401, 997], "neg": [14, 94, 191, 398, 958], "matrix": [14, 17, 156, 177, 250, 392, 393, 398, 962, 977], "factor": [14, 94, 102, 105, 282, 283, 398, 968], "latent": [14, 84, 398], "dirichlet": [14, 398, 961], "alloc": [14, 398], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 62, 63, 66, 67, 75, 77, 82, 86, 92, 106, 132, 138, 146, 158, 162, 170, 173, 189, 201, 215, 223, 239, 248, 269, 272, 275, 290, 296, 304, 312, 320, 337, 342, 349, 353, 354, 393, 394, 397, 969], "libsvm": [16, 362], "gui": 16, "wikipedia": 17, "princip": [17, 85, 100, 398, 979, 996], "eigenvector": 17, "download": [17, 128, 161, 362], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 384, 401, 997], "adjac": 17, "singular": [17, 398], "vector": [17, 25, 53, 163, 321, 324, 333, 339, 341, 363, 392, 401, 977, 995, 996], "random": [17, 94, 113, 126, 127, 168, 169, 229, 237, 262, 264, 350, 370, 377, 392, 397, 398, 400, 931, 951, 958, 974, 979], "svd": [17, 94, 398], "central": 17, "score": [17, 84, 119, 134, 144, 161, 175, 246, 255, 262, 263, 329, 393, 397, 957, 962, 977, 992], "biclust": [18, 19, 20, 163, 364, 390, 392], "spectral": [19, 20, 21, 65, 217, 390, 393, 959], "co": [19, 21, 390], "algorithm": [19, 20, 21, 38, 44, 49, 62, 63, 64, 217, 225, 374, 379, 956, 958, 961, 963, 965, 966, 970, 978, 995], "A": [20, 21, 47, 57, 62, 196, 309, 367, 374, 387, 397, 991, 994], "demo": [20, 21, 38, 47, 49, 57, 62, 64], "calibr": [23, 24, 25, 26, 27, 121, 163, 196, 391, 392, 419, 420, 421, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "probabl": [24, 25, 26, 30, 130, 151, 391, 392, 400, 977], "classifi": [24, 25, 27, 31, 131, 179, 236, 253, 274, 306, 319, 323, 326, 339, 348, 391, 392, 400, 956, 965, 995, 997], "gener": [24, 34, 38, 47, 49, 56, 62, 63, 65, 66, 77, 79, 81, 90, 91, 95, 96, 97, 115, 124, 141, 144, 148, 154, 155, 157, 163, 174, 175, 176, 180, 190, 196, 198, 231, 246, 253, 269, 288, 295, 307, 314, 333, 350, 364, 368, 381, 392, 398, 400, 958, 972, 983, 992], "synthet": [24, 74, 175, 253, 373], "gaussian": [24, 25, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 240, 241, 242, 245, 246, 247, 298, 392, 403, 961, 964, 972, 974], "bay": [24, 25, 392, 964], "curv": [25, 27, 176, 231, 237, 247, 253, 258, 263, 265, 271, 391, 957], "summari": [25, 185, 340, 341, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "3": [26, 179, 392, 997, 1012, 1013, 1018, 1020], "class": [26, 37, 109, 111, 130, 179, 205, 210, 259, 263, 265, 309, 325, 328, 381, 392, 397, 400, 401, 961, 962, 965, 968, 976, 977, 1004, 1005], "fit": [26, 56, 95, 102, 115, 116, 119, 121, 122, 153, 175, 176, 177, 190, 193, 198, 202, 263, 288, 333, 350, 370, 380, 400, 964, 968, 988], "compar": [26, 42, 44, 61, 77, 84, 119, 127, 141, 172, 175, 182, 198, 203, 225, 231, 256, 264, 284, 293, 298, 379], "comparison": [27, 31, 43, 63, 79, 103, 118, 140, 148, 217, 218, 231, 256, 267, 341, 393, 403, 958], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 57, 88, 135, 136, 218, 295, 314, 315, 365, 994], "normal": [33, 172, 196, 298, 302, 392, 851, 865, 962, 972], "ledoit": [33, 78, 395], "wolf": [33, 78, 395], "oa": [33, 77, 78, 406, 456], "discrimin": [33, 34, 392, 956], "quadrat": [34, 403, 956], "covari": [34, 76, 77, 79, 80, 81, 163, 243, 392, 395, 406, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 956, 1012, 1016, 1017, 1018], "ellipsoid": [34, 242], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 259, 303, 308, 310, 314, 340, 354, 368, 369, 393, 397, 401, 997], "evalu": [37, 57, 60, 80, 196, 234, 257, 260, 295, 340, 380, 388, 390, 393, 397, 400, 951, 957, 962, 997], "defin": [37, 47, 57, 66, 217, 234, 251, 253, 254, 341, 962], "list": [37, 985], "metric": [37, 40, 121, 260, 392, 393, 397, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 951, 959, 960, 962, 965, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "fix": [37, 372, 1004, 1007, 1008, 1009, 1010, 1011, 1017], "ground": [37, 175], "truth": [37, 175], "label": [37, 263, 314, 315, 316, 363, 364, 393, 397, 400, 962, 973, 975], "grow": 37, "number": [37, 59, 118, 144, 268, 354, 370, 951, 952, 961], "vari": [37, 292, 317, 393], "sampl": [38, 62, 77, 95, 96, 141, 177, 209, 231, 257, 269, 288, 307, 333, 336, 362, 377, 381, 392, 393, 400, 958], "agglom": [39, 40, 52, 996], "without": [39, 119, 284, 339], "differ": [40, 44, 61, 77, 157, 167, 298, 301, 323, 370, 379, 393, 958, 995], "hierarch": [41, 47, 61, 66, 393, 996], "dendrogram": 41, "birch": [42, 393, 424], "minibatchkmean": [42, 63, 94, 430], "bisect": [43, 393], "k": [43, 45, 48, 56, 57, 58, 60, 63, 66, 84, 303, 340, 393, 397, 962, 965, 972, 995, 996], "mean": [43, 45, 48, 56, 57, 58, 60, 62, 63, 115, 116, 161, 168, 340, 393, 962, 972, 996], "regular": [43, 77, 123, 166, 189, 200, 201, 292, 334, 958, 966], "toi": [44, 61, 225, 365], "segment": [46, 65], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 256], "ward": [47, 66, 393, 996], "an": [47, 58, 161, 177, 185, 234, 286, 306, 310, 379, 401, 951, 968, 988, 994, 995], "color": 48, "quantiz": [48, 53, 996], "dbscan": [49, 393, 404, 426], "onlin": [50, 203, 309, 310, 976], "dictionari": [50, 94, 97, 104, 398], "part": [50, 402], "agglomer": [51, 54, 979, 996], "origin": [53, 99, 262, 286, 298], "encod": [53, 118, 972, 973], "strategi": [53, 254, 293, 301, 356, 392, 393, 962], "memori": [53, 354, 374, 376, 393], "footprint": 53, "v": [54, 66, 77, 78, 80, 85, 99, 144, 168, 178, 188, 214, 259, 265, 269, 270, 344, 393, 952, 972, 988], "univari": [54, 84, 141, 329, 402, 952], "select": [54, 59, 71, 102, 134, 139, 141, 144, 145, 163, 184, 185, 190, 246, 249, 329, 379, 388, 392, 397, 402, 951, 958, 961, 992, 1010], "induct": 55, "demonstr": [56, 260, 301, 314], "assumpt": 56, "possibl": [56, 373], "solut": 56, "final": [56, 148], "handwritten": [57, 218, 365], "our": [57, 251, 254, 368], "reduc": [57, 354], "initi": [58, 60, 244, 961], "silhouett": [59, 393], "kmean": [59, 63, 307, 428], "empir": [60, 80, 229, 395], "linkag": [61, 393], "method": [61, 73, 84, 107, 148, 163, 217, 219, 244, 273, 381, 392, 393, 400, 954, 961, 968, 969, 996], "shift": [62, 393], "meanshift": [62, 429], "establish": [63, 172], "pariti": 63, "between": [63, 267], "optic": [64, 365, 393, 431], "four": 65, "circl": 65, "two": [65, 111, 182, 235, 256], "unstructur": 66, "we": 66, "ar": [66, 309, 379], "nearest": [66, 163, 276, 277, 278, 279, 284, 287, 288, 306, 392, 952, 965, 995], "neighbor": [66, 163, 217, 276, 277, 278, 279, 284, 288, 303, 306, 392, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 952, 959, 965, 995, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "10": [66, 1004], "pipelin": [68, 69, 71, 72, 128, 142, 163, 166, 227, 236, 257, 329, 370, 379, 380, 392, 394, 402, 838, 839, 840, 841, 979, 993, 997, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "composit": [68, 163, 392, 394, 951], "estim": [68, 76, 77, 78, 79, 80, 81, 112, 118, 120, 127, 154, 161, 163, 175, 199, 202, 227, 233, 234, 245, 264, 280, 281, 289, 306, 307, 308, 311, 350, 370, 379, 380, 381, 389, 392, 394, 395, 397, 399, 400, 403, 951, 952, 956, 958, 961, 962, 977, 982, 990, 992, 994, 1005, 1012, 1013, 1014], "column": [69, 70, 236], "transform": [69, 70, 71, 74, 84, 114, 126, 236, 308, 309, 310, 360, 379, 380, 394, 396, 397, 965, 972, 973, 974, 996], "heterogen": [69, 394], "sourc": [69, 95, 366], "20": [69, 339, 363, 997, 1012], "newsgroup": [69, 339, 363, 997], "creat": [69, 100, 102, 226, 263, 329, 379], "mix": 70, "type": [70, 241, 370, 381, 393, 988], "dimension": [71, 217, 220, 236, 285, 303, 340, 956, 959, 965, 979, 995], "reduct": [71, 217, 221, 236, 285, 303, 340, 956, 965, 979], "gridsearchcv": [71, 134, 260, 400, 777], "illustr": [71, 152, 157, 286, 403], "cach": [71, 278, 394], "within": 71, "chain": [72, 236, 274, 380, 394], "logist": [72, 179, 186, 187, 188, 189, 211, 212, 958, 995], "concaten": 73, "multipl": [73, 236, 260, 350, 375, 397, 951, 952, 962, 1012, 1013], "effect": [74, 165, 222, 298, 303, 317, 344, 965], "target": [74, 155, 214, 379, 381, 394, 396, 963, 973], "shrinkag": [77, 395, 400, 956, 995], "ledoitwolf": [77, 454], "max": [77, 962], "likelihood": [77, 175, 176, 259, 962, 967], "approach": [77, 185, 256], "robust": [79, 80, 175, 199, 202, 350, 392, 395, 951, 958], "mahalanobi": [79, 965], "distanc": [79, 392, 965], "relev": [79, 958], "minimum": [80, 395], "determin": [80, 395, 958, 962], "spars": [81, 94, 104, 166, 180, 182, 211, 306, 339, 340, 377, 395, 398, 402, 972, 974, 976], "invers": [81, 395, 974], "decomposit": [83, 84, 93, 94, 112, 163, 364, 392, 396, 398, 405, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 996, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "variabl": [84, 165, 166, 355, 379, 392, 995], "canon": [84, 396], "symmetr": 84, "pl": 84, "scatter": 84, "multivari": [84, 952], "respons": [84, 382], "pls2": 84, "pls1": 84, "cca": [84, 463], "mode": [84, 354, 366], "b": 84, "deflat": 84, "compon": [85, 94, 100, 284, 285, 286, 398, 961, 965, 979, 996], "partial": [85, 165, 167, 235, 969], "least": [85, 121, 185, 191, 194, 958], "squar": [85, 121, 157, 191, 194, 403, 954, 958, 960, 962], "The": [85, 88, 89, 165, 166, 196, 222, 229, 254, 263, 363, 372, 397, 401, 961, 962, 974, 995, 996], "one": [85, 118, 235, 958, 962], "power": [85, 196], "iri": [89, 101, 103, 117, 150, 205, 319, 323, 345, 365, 403, 994], "randomli": [90, 91], "multilabel": [91, 232, 364, 377, 392, 962, 963, 988], "prepar": [94, 108, 110, 172, 217, 265, 266, 303, 326, 372], "nmf": [94, 310, 398, 521], "independ": [94, 398, 996], "fastica": [94, 95, 96, 405, 514], "minibatchsparsepca": [94, 398, 520], "center": [94, 972], "fa": [94, 102], "posit": [94, 309], "blind": 95, "separ": [95, 208, 327, 328], "ica": [95, 398, 996], "point": [96, 286], "cloud": 96, "distort": 97, "displai": [97, 201, 226, 227, 236, 311, 376, 1001], "patch": [97, 401], "noisi": [97, 155], "them": [97, 367], "increment": [98, 356, 398], "kernelpca": [99, 516], "figur": 100, "probabilist": [102, 149, 398, 403], "lda": [103, 398, 956], "precomput": [104, 177, 306, 398], "rotat": 105, "pattern": 105, "ensembl": [107, 114, 117, 163, 310, 392, 400, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "discret": [108, 124, 156, 299, 300, 972], "versu": [108, 112, 210, 261, 319, 354], "adaboost": [108, 109, 110, 111, 400], "baselin": [108, 172, 196], "samm": 108, "r": 108, "multi": [109, 127, 190, 205, 220, 233, 260, 263, 292, 347, 374, 392, 958, 959, 962, 966, 977, 978], "decis": [109, 110, 117, 124, 129, 163, 230, 319, 343, 344, 345, 346, 347, 348, 379, 382, 392, 978], "tree": [109, 110, 114, 115, 116, 117, 126, 163, 168, 196, 306, 311, 343, 344, 345, 346, 347, 348, 379, 392, 400, 402, 886, 887, 888, 889, 890, 891, 892, 965, 970, 978, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "train": [110, 122, 124, 131, 144, 226, 231, 235, 237, 246, 269, 295, 308, 317, 326, 339, 344, 345, 348, 363, 397, 965, 975, 988, 995, 997], "decisiontre": 110, "singl": [112, 128, 214, 226, 364, 393, 952], "bag": [112, 120, 339, 400, 401, 951, 997], "bia": 112, "varianc": [112, 194, 402, 962, 972], "oob": 113, "error": [113, 121, 134, 175, 253, 269, 376, 384, 958, 962], "forest": [113, 115, 116, 127, 168, 169, 237, 363, 400, 968], "import": [115, 116, 122, 145, 168, 169, 230, 303, 306, 400, 970], "decreas": [115, 116, 168], "impur": [115, 116, 168, 344, 970], "permut": [115, 168, 169, 262, 306, 397, 970], "pixel": 116, "parallel": [116, 355, 366, 374, 393, 400, 928, 929, 951], "mdi": [116, 168], "surfac": [117, 230, 345], "categor": [118, 308, 379, 400, 964, 972], "am": 118, "hous": [118, 363], "drop": 118, "hot": 118, "ordin": 118, "nativ": [118, 306, 308], "limit": [118, 148, 354, 384, 387, 401], "split": [118, 308, 350, 397], "earli": [119, 204], "stop": [119, 204, 401, 976], "interv": 121, "quantil": [121, 198, 309, 310, 958], "confid": 121, "tune": [121, 254, 257, 308, 951, 997], "hyper": [121, 254, 308, 392, 951], "preprocess": [122, 128, 163, 166, 167, 234, 236, 297, 341, 350, 379, 392, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 972, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "devianc": [122, 962], "isolationforest": [124, 544], "boundari": [124, 129, 319], "path": [124, 183, 189, 201, 348, 384], "length": [124, 384], "monoton": [125, 400], "constraint": [125, 311, 393, 400], "name": [125, 309, 379], "specifi": [125, 379, 951], "hash": [126, 377, 401], "total": [126, 344, 400], "output": [127, 233, 298, 311, 347, 978, 995], "meta": [127, 308, 400], "combin": [128, 226], "predictor": 128, "stack": [128, 306, 400], "make": [128, 131, 161, 368, 372, 382], "measur": [128, 259, 393, 962], "votingclassifi": [129, 130, 400, 550], "calcul": 130, "individu": [131, 167, 308, 969], "vote": [131, 400], "tutori": [133, 163, 981, 989, 991, 997], "exercis": [133, 134, 135, 136, 137, 163, 992, 995, 997], "diabet": [134, 235, 365, 995], "appli": 134, "line": [134, 151], "show": [134, 265], "std": [134, 175], "bonu": 134, "how": [134, 350, 368, 374, 379], "much": 134, "can": [134, 379], "you": [134, 379], "trust": 134, "alpha": [134, 344], "f": [140, 962], "mutual": [140, 393], "inform": [140, 161, 184, 185, 372, 393, 951, 958], "anova": [142, 329], "recurs": [143, 144, 402], "elimin": [143, 144, 402, 951], "sequenti": [145, 402], "coeffici": [145, 166, 175, 200, 201, 393, 962], "discuss": [145, 367], "process": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 166, 350, 382, 392, 403, 961, 991], "machin": [147, 163, 165, 166, 167, 295, 321, 376, 392, 967, 977, 988, 995], "ridg": [148, 176, 178, 194, 200, 201, 231, 392, 403, 653, 955, 958], "simpl": [148, 281, 374, 994], "gpc": [149, 150, 151, 152, 403], "iso": [151, 263], "xor": [152, 403], "gpr": [153, 154, 403], "mauna": [153, 403], "loa": [153, 403], "co2": [153, 403], "build": [153, 161, 366, 368, 376, 997], "design": 153, "proper": 153, "extrapol": 153, "interpret": [153, 166, 234, 398, 400], "hyperparamet": [153, 154, 257, 264, 598], "nois": [154, 155, 176, 403], "level": [154, 355, 393, 400, 403], "optimis": 154, "basic": [155, 214, 380, 395, 403], "introductori": 155, "free": 155, "sequenc": [156, 379], "similar": [156, 960, 962], "under": [156, 379], "posterior": 157, "cookbook": 157, "radial": [157, 403, 954, 995], "ration": [157, 403], "quadradt": 157, "exp": [157, 403], "sine": [157, 247, 403], "dot": [157, 403], "product": [157, 214, 376, 379, 403, 602], "mat\u00e9rn": [157, 403], "miss": [159, 160, 161, 163, 306, 400, 952, 972], "valu": [159, 160, 161, 163, 222, 306, 368, 398, 400, 952, 962, 970, 972], "imput": [159, 160, 161, 163, 306, 392, 608, 609, 610, 611, 952, 972, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "variant": 160, "iterativeimput": [160, 608, 952], "befor": [161, 372], "replac": 161, "0": [161, 306, 307, 308, 309, 978, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "knn": [161, 306], "iter": [161, 268, 397, 951], "releas": [163, 305, 306, 307, 308, 309, 310, 311, 372, 384, 1002, 1010], "highlight": [163, 305, 306, 307, 308, 309, 310, 311, 1004, 1007, 1008, 1011, 1012], "mixtur": [163, 240, 241, 242, 245, 246, 247, 392, 775, 776, 961, 1012, 1013, 1017, 1018], "inspect": [163, 164, 383, 392, 612, 613, 614, 615, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "approxim": [163, 171, 172, 230, 276, 308, 392, 395, 954], "manifold": [163, 216, 217, 218, 219, 364, 392, 669, 670, 671, 672, 673, 674, 675, 676, 677, 959, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "miscellan": [163, 224, 392, 1012, 1013, 1014, 1015, 1016, 1017], "multioutput": [163, 273, 392, 810, 811, 812, 813, 963, 1012, 1013, 1014, 1015, 1016, 1019], "neural": [163, 167, 291, 392, 966, 967], "network": [163, 167, 291, 392, 966, 967], "semi": [163, 313, 314, 318, 319, 392, 975], "supervis": [163, 313, 314, 318, 319, 392, 966, 975, 984, 995], "work": [163, 338, 354, 367, 379, 997], "failur": [165, 951], "infer": [165, 961], "causal": [165, 166], "simul": 165, "hourli": 165, "wage": [165, 166], "descript": 165, "incom": 165, "fulli": 165, "observ": [165, 995, 996], "lesson": [165, 166], "common": [166, 350, 381, 401, 962], "pitfal": [166, 350], "scale": [166, 217, 220, 303, 334, 356, 401, 869, 959, 968, 972, 979], "matter": 166, "check": [166, 258, 306, 376, 1012, 1013, 1014], "problem": [166, 398, 977, 978, 988, 993, 995, 996], "correl": [166, 169, 396, 962, 970], "numer": [166, 355, 370], "wrong": [166, 379], "depend": [167, 235, 366, 969, 1004, 1017, 1018], "condit": [167, 308, 969], "expect": [167, 308, 961, 969], "preprocessor": 167, "1": [167, 193, 309, 310, 311, 379, 392, 997, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "wai": [167, 368, 379], "accuraci": [168, 230, 339, 344, 962], "": [168, 303, 371, 379, 400, 962], "multicollinear": 169, "breast": [169, 365], "cancer": [169, 365], "handl": [169, 952], "scalabl": [172, 258, 307], "partit": 172, "bayesian": [175, 176, 241, 256, 392, 958, 961], "recov": 175, "weight": [175, 177, 209, 294, 307, 336, 400, 401], "true": [175, 176], "margin": [175, 176, 208, 327, 331], "log": [175, 176, 962], "expans": 175, "sinusoid": 176, "cubic": 176, "l": 176, "elast": [177, 180, 181, 958], "net": [177, 180, 181, 958], "gram": [177, 977], "huberregressor": [178, 630], "strong": 178, "signal": [180, 398, 996], "elasticnet": [180, 307, 627], "dens": 182, "implement": [182, 379, 393, 401, 962, 965, 976, 977], "lar": [183, 631, 958], "criteria": [184, 379, 958, 978], "aic": 185, "bic": [185, 246], "criterion": [185, 308, 951, 976], "coordin": 185, "descent": [185, 204, 210, 958, 976], "angl": [185, 958], "penalti": [187, 207, 334], "sparsiti": [187, 193, 401, 995], "multinomi": [188, 212, 958, 964], "One": [188, 210, 265, 309, 325, 397, 968, 976], "rest": [188, 265], "joint": 190, "task": [190, 392, 958, 982], "seri": [190, 397], "onli": [193, 213, 1015, 1017], "2": [193, 311, 997, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "ordinari": [194, 958], "orthogon": [195, 958], "match": [195, 958], "pursuit": [195, 958], "poisson": [196, 214, 307, 308, 962], "loss": [196, 206, 307, 310, 400, 962], "french": 196, "motor": 196, "third": [196, 384], "parti": [196, 384], "liabil": 196, "claim": [196, 214], "constant": [196, 952], "rank": [196, 392, 962], "takeawai": 196, "interpol": 197, "quantileregressor": [198, 651], "linearregress": [198, 638], "ransac": [199, 958], "l2": [200, 334], "solver": [203, 398, 958], "stochast": [204, 210, 217, 293, 958, 959, 967, 976], "sgd": [205, 206, 207, 208, 209, 958, 976], "convex": 206, "maximum": [208, 327, 967], "hyperplan": [208, 327, 328], "multiclass": [211, 265, 306, 377, 391, 392, 807, 808, 809, 924, 925, 926, 962, 963, 988, 995, 1013, 1016, 1017, 1018], "20newgroup": 211, "mnist": [212, 294], "theil": [213, 958], "sen": [213, 958], "y": [213, 379, 396, 973, 975], "direct": 213, "x": 213, "tweedi": [214, 962], "insur": 214, "definit": [214, 295, 969, 1014], "frequenc": [214, 997], "sever": [214, 219], "gamma": [214, 962], "pure": 214, "premium": 214, "tweedieregressor": [214, 661], "local": [217, 218, 282, 283, 959, 968], "isomap": [217, 218, 669, 959], "multidimension": 217, "t": [217, 222, 959], "techniqu": 218, "sphere": 219, "swiss": 221, "roll": [221, 370], "And": [221, 382], "hole": 221, "sne": [222, 959], "perplex": 222, "shape": [222, 988], "anomali": 225, "object": [226, 251, 370, 379, 951, 962, 994, 1001], "confusionmatrixdisplai": [226, 678], "roccurvedisplai": [226, 683], "precisionrecalldisplai": [226, 681], "compact": 227, "represent": [227, 307, 354, 401, 996], "rich": [227, 307], "html": 227, "isoton": [228, 391, 392, 616, 617, 618, 953, 1012, 1013, 1014, 1016, 1018, 1019], "johnson": [229, 974], "lindenstrauss": [229, 974], "bound": 229, "theoret": [229, 958], "explicit": 230, "map": [230, 302, 972], "rbf": [230, 325, 326, 403, 603, 960, 977, 995], "python": [230, 355, 374, 387, 977, 981, 982, 1010], "packag": [230, 982, 1016], "svr": [231, 333, 884, 977], "construct": [231, 394], "look": [231, 333], "complet": [233, 393], "advanc": 235, "With": [235, 997], "togeth": [235, 265, 993, 996], "grid": [236, 254, 256, 264, 267, 951, 992, 997], "search": [236, 254, 256, 264, 267, 380, 951, 992, 997], "over": 236, "roc": [237, 253, 265, 266, 306, 962], "api": [237, 238, 306, 309, 311, 355, 370, 375, 381, 389, 392, 403, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014], "svc": [237, 334, 883, 977], "introduc": 238, "set_output": [238, 311, 370], "concentr": 241, "variat": [241, 961], "gmm": [243, 244], "densiti": [245, 280, 281, 289, 399, 912, 977], "best": [246, 369, 379], "confus": [250, 393, 962], "behavior": 251, "indic": 251, "mani": [251, 311, 355, 379], "cv": [251, 350], "tradeoff": [253, 962], "det": [253, 962], "custom": [254, 322, 401, 972, 977], "refit": [254, 988], "balanc": [255, 962], "statist": [256, 982, 991, 994], "frequentist": 256, "practic": [256, 350, 369, 373, 958, 959, 966, 976, 977, 978], "equival": 256, "all": [256, 265, 310, 384, 993, 1019, 1020], "take": 256, "home": 256, "messag": 256, "ratio": [259, 962], "pre": [259, 350, 380], "post": [259, 344], "invari": 259, "respect": 259, "preval": 259, "cross_val_scor": [260, 801], "nest": [261, 394, 992], "see": [261, 394], "also": [261, 372, 394], "signific": 262, "precis": [263, 962], "recal": [263, 962], "In": 263, "binari": [263, 958, 962], "averag": [263, 265, 393, 400, 962], "micro": [263, 265], "each": [263, 268, 339, 951], "f1": 263, "receiv": [265, 266, 962], "oper": [265, 266, 367, 377, 403, 962], "characterist": [265, 266, 962], "specif": [265, 366, 370, 387, 951, 982, 983], "ovr": 265, "macro": 265, "ovo": 265, "success": [267, 268, 308, 951], "halv": [267, 268, 308, 951], "candid": [268, 951], "amount": [268, 951], "resourc": [268, 355, 368, 951, 981, 985], "underfit": 270, "overfit": 270, "tsne": [276, 673], "1d": 281, "novelti": [282, 968, 977], "lof": [282, 283], "neighborhood": [284, 285, 286, 965], "centroid": [287, 965], "layer": [292, 966], "perceptron": [292, 649, 958, 966], "mlpclassifi": [293, 836], "mlp": 294, "restrict": [295, 967], "boltzmann": [295, 967], "scaler": 298, "standardscal": [298, 859], "minmaxscal": [298, 849], "maxabsscal": [298, 848], "robustscal": [298, 857], "powertransform": [298, 855], "quantiletransform": [298, 856], "uniform": [298, 972], "kbinsdiscret": [299, 301, 844], "continu": [299, 368], "rescal": 303, "22": [306, 1014], "new": [306, 308, 309, 311, 368, 379, 981, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "prune": [306, 344, 978], "datafram": [306, 379], "compat": [306, 368, 370, 389], "auc": [306, 687], "now": [306, 309, 1014], "23": [307, 1015], "stabil": 307, "improv": [307, 308, 309, 310, 311, 367, 368, 1007, 1008], "histogram": [307, 309, 311, 399, 400], "24": [308, 1016], "histgradientboost": 308, "self": [308, 317, 975], "sequentialfeatureselector": [308, 583], "polynomialcountsketch": [308, 621], "decisiontreeregressor": [308, 887], "keyword": [309, 1015, 1017], "argument": [309, 370, 1015, 1017], "more": [309, 363, 379, 387, 966], "flexibl": [309, 952], "stabl": 309, "histgradientboostingregressor": [310, 543], "get_feature_names_out": 310, "avail": [310, 951, 1000, 1001], "group": [310, 397, 986, 996], "infrequ": [310, 972], "onehotencod": [310, 852], "minibatchnmf": [310, 519], "version": [310, 362, 366, 372, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "bisectingkmean": [310, 425], "divid": 310, "panda": [311, 373, 379], "enhanc": [311, 382, 982, 1007, 1008, 1009, 1010, 1011], "faster": [311, 400], "parser": [311, 362], "fetch_openml": [311, 477], "experiment": [311, 372, 389, 392, 560, 561], "arrai": [311, 377, 389, 988], "lineardiscriminantanalysi": [311, 530], "effici": [311, 377], "most": 314, "uncertain": 314, "activ": 315, "threshold": 317, "linearsvc": [324, 878, 977], "unbalanc": [328, 977], "some": 329, "plai": 329, "percentil": 329, "case": [334, 958, 962], "tie": 335, "break": 335, "word": [339, 401, 997], "metadata": 339, "strip": 339, "quantifi": [340, 962], "qualiti": [340, 962], "tfidfvector": [340, 341, 572], "lsa": 340, "top": [340, 962], "term": [340, 381, 401], "per": 340, "hashingvector": [340, 401, 570], "featurehash": [341, 563], "dictvector": [341, 562], "special": 341, "purpos": [341, 983], "cost": [344, 978], "leav": [344, 397, 958], "understand": 348, "recommend": [350, 363, 982], "inconsist": 350, "leakag": 350, "dure": 350, "avoid": [350, 394], "control": [350, 400, 966], "none": 350, "randomst": 350, "instanc": [350, 356], "repeat": [350, 394, 397], "call": [350, 367], "splitter": [350, 392], "subtleti": 350, "get": [350, 379, 380], "reproduc": [350, 373], "across": 350, "execut": [350, 379], "configur": [354, 355], "overhead": 354, "input": [354, 370, 389, 393, 972], "tip": [354, 369, 376, 951, 959, 966, 976, 977, 978], "trick": [354, 374, 376, 401], "algebra": [354, 377], "librari": [354, 355], "reshap": [354, 994], "link": [354, 362, 962], "manag": [355, 384], "higher": 355, "joblib": [355, 374], "lower": 355, "openmp": [355, 369], "numpi": [355, 373], "scipi": 355, "oversubscript": 355, "spawn": 355, "too": 355, "thread": 355, "switch": 355, "environ": 355, "sklearn_assume_finit": 355, "sklearn_working_memori": 355, "sklearn_se": 355, "sklearn_tests_global_random_se": 355, "sklearn_skip_network_test": 355, "sklearn_run_float32_test": 355, "sklearn_enable_debug_cython_direct": 355, "sklearn_build_enable_debug_symbol": 355, "sklearn_pairwise_dist_chunk_s": 355, "computation": 356, "bigger": 356, "stream": 356, "note": [356, 394, 397, 958], "tabl": [357, 379], "Of": 357, "content": [357, 379, 988], "util": [361, 373, 377, 392, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 997, 1001, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "other": [362, 379, 982, 1004], "svmlight": 362, "format": [362, 373, 379, 387, 963], "org": [362, 372, 986], "repositori": 362, "arff": 362, "extern": [362, 981, 988, 1004, 1013], "olivetti": 363, "usag": [363, 374, 379, 389, 391, 394, 400, 401, 958], "convert": 363, "filter": 363, "realist": 363, "consider": [363, 958], "wild": 363, "covertyp": 363, "rcv1": 363, "kddcup": 363, "99": 363, "california": 363, "plant": 365, "linnerrud": 365, "wine": 365, "wisconsin": 365, "diagnost": 365, "instal": [366, 384], "nightli": 366, "runtim": 366, "tag": [366, 368, 370], "edit": 366, "platform": [366, 376, 384], "instruct": 366, "window": [366, 384], "maco": 366, "compil": [366, 374], "conda": [366, 384], "forg": 366, "homebrew": 366, "linux": [366, 379, 384], "system": 366, "freebsd": 366, "altern": [366, 951], "bug": [367, 368, 372, 985, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "triag": 367, "issu": [367, 368], "curat": 367, "fruit": 367, "pr": [367, 372], "help": [367, 368, 379], "review": [367, 368, 376, 997], "member": 367, "close": 367, "tough": 367, "typic": 367, "workflow": [367, 368], "contribut": [368, 379], "submit": 368, "report": [368, 373, 962], "request": [368, 372, 376, 379], "good": [368, 373], "video": [368, 981], "git": 368, "pull": [368, 372, 376, 379], "checklist": [368, 372], "integr": 368, "ci": 368, "stall": 368, "unclaim": 368, "easi": 368, "want": 368, "guidelin": [368, 370], "write": 368, "referenc": 368, "github": 368, "action": 368, "coverag": [368, 376, 962], "matplotlib": 368, "monitor": 368, "tracker": [368, 985], "maintain": [368, 372, 387], "backward": 368, "deprec": [368, 392, 905, 1014], "chang": [368, 382, 986, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "default": 368, "read": 368, "exist": 368, "cython": [369, 374, 376], "convent": [369, 988], "knowledg": 369, "eas": 369, "instanti": 370, "attribut": [370, 381, 951], "option": 370, "univers": 370, "your": [370, 373, 962], "own": [370, 379, 962], "templat": 370, "baseestim": [370, 407], "mixin": 370, "get_param": 370, "set_param": 370, "init": 370, "clone": [370, 416], "assert": 370, "guid": [371, 999], "major": [372, 400, 1012, 1013], "minor": 372, "known": [372, 1012, 1013], "merg": 372, "web": 372, "site": 372, "craft": 373, "minim": [373, 978, 1017, 1018], "provid": 373, "fail": 373, "comment": 373, "boil": 373, "down": 373, "script": 373, "someth": 373, "small": 373, "do": [373, 379], "NOT": 373, "unless": 373, "i": [373, 379, 397, 986], "extrem": [373, 400], "necessari": 373, "markdown": 373, "make_regress": [373, 505], "make_classif": [373, 496], "make_blob": [373, 493], "optim": [374, 392, 951, 959], "c": 374, "profil": 374, "extens": 374, "yep": 374, "gperftool": 374, "debugg": 374, "gdb": 374, "gprof": 374, "valgrind": [374, 376], "callgrind": 374, "kcachegrind": 374, "warm": 374, "restart": 374, "overview": [375, 393, 968], "ax": 375, "saniti": 376, "preserv": 376, "fold": [376, 397], "unfold": 376, "outdat": 376, "diff": 376, "remot": 376, "track": 376, "branch": 376, "pytest": 376, "alias": 376, "flag": 376, "standard": [376, 972], "repli": 376, "debug": 376, "arm64": 376, "x86_64": 376, "tool": [377, 379], "matric": [377, 972], "warn": [377, 392], "except": [377, 392, 552, 553, 554, 555, 556, 557, 558, 559, 1016, 1020], "dispatch": 378, "frequent": 379, "ask": 379, "question": [379, 985], "what": 379, "lot": 379, "peopl": [379, 1004, 1005, 1006, 1007], "pronounc": 379, "why": [379, 400], "pypi": 379, "deep": 379, "reinforc": 379, "Will": 379, "add": 379, "graphic": [379, 967], "did": 379, "remov": [379, 392, 402, 972, 1004], "hmm": 379, "gpu": 379, "need": 379, "doe": 379, "directli": 379, "plan": 379, "so": 379, "my": 379, "ani": 379, "attent": 379, "inclus": 379, "includ": 379, "should": 379, "save": 379, "export": 379, "deploi": 379, "bunch": [379, 893], "usabl": 379, "deal": 379, "string": 379, "sometim": 379, "crash": 379, "freez": 379, "n_job": 379, "osx": [379, 384], "job": 379, "than": 379, "random_st": 379, "entir": 379, "start": 380, "processor": 380, "automat": [380, 958], "next": 380, "glossari": 381, "element": 381, "concept": [381, 958], "properti": 381, "role": 382, "technic": 382, "committe": 382, "propos": 382, "slep": 382, "latest": 384, "appl": 384, "silicon": 384, "m1": 384, "hardwar": 384, "alpin": 384, "arch": 384, "debian": 384, "ubuntu": 384, "fedora": 384, "netbsd": 384, "macport": 384, "mac": 384, "anaconda": 384, "enthought": 384, "deploy": 384, "intel": 384, "channel": 384, "winpython": 384, "troubleshoot": 384, "caus": 384, "persist": 387, "serial": 387, "secur": 387, "skop": 387, "interoper": [387, 982], "mathemat": [390, 393, 400, 954, 956, 958, 965, 966, 969, 976, 977, 978], "formul": [390, 393, 400, 956, 958, 965, 966, 976, 977, 978], "sigmoid": [391, 960], "sklearn": [392, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "compos": [392, 445, 446, 447, 448, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "cross_decomposit": [392, 463, 464, 465, 466, 1014, 1016, 1018], "loader": 392, "discriminant_analysi": [392, 530, 531, 1012, 1013, 1016, 1018, 1019], "dummi": [392, 532, 533, 962, 1012, 1013, 1014, 1017, 1018], "feature_extract": [392, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "feature_select": [392, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "gaussian_process": [392, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1012, 1014, 1015, 1016, 1017, 1018, 1019], "kernel_approxim": [392, 619, 620, 621, 622, 623, 1014, 1016, 1017, 1018, 1019], "kernel_ridg": [392, 624], "linear_model": [392, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "classic": [392, 961], "glm": 392, "interfac": 392, "model_select": [392, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "naive_bay": [392, 814, 815, 816, 817, 818, 1012, 1014, 1015, 1016, 1017, 1019, 1020], "neural_network": [392, 835, 836, 837, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "random_project": [392, 870, 871, 872, 1018], "semi_supervis": [392, 873, 874, 875, 1014, 1015, 1016, 1020], "recent": 392, "To": 392, "low": [393, 400, 402], "mini": [393, 398], "batch": [393, 398], "assign": 393, "featureagglomer": [393, 427], "hierarchi": 393, "ad": 393, "connect": [393, 401, 996], "consumpt": 393, "larg": [393, 401], "size": [393, 400], "rand": 393, "index": [393, 921], "advantag": 393, "drawback": 393, "homogen": 393, "fowlk": 393, "mallow": 393, "calinski": 393, "harabasz": 393, "davi": 393, "bouldin": 393, "conting": 393, "pair": 393, "access": 394, "featureunion": [394, 838], "columntransform": [394, 445], "shrunk": 395, "oracl": 395, "plscanon": [396, 464], "plssvd": [396, 466], "plsregress": [396, 465], "held": 397, "cross_valid": [397, 802], "obtain": 397, "d": [397, 965], "loo": 397, "p": [397, 986], "lpo": 397, "shuffl": [397, 936], "stratif": 397, "stratifi": 397, "stratifiedgroupkfold": [397, 795], "predefin": [397, 962], "decompos": 398, "exact": 398, "sparsepca": [398, 524], "kpca": 398, "choic": [398, 961, 965], "truncat": 398, "semant": 398, "nnmf": 398, "frobeniu": 398, "norm": 398, "beta": 398, "diverg": 398, "addit": [400, 954], "weak": 400, "learner": 400, "rate": 400, "subsampl": 400, "hard": 400, "soft": 400, "dict": 401, "detail": [401, 954, 958, 976, 977], "tf": 401, "idf": 401, "decod": 401, "applic": [401, 996], "corpu": 401, "selectfrommodel": [402, 578], "recoveri": 402, "biclustermixin": 408, "classnameprefixfeaturesoutmixin": 409, "classifiermixin": 410, "clustermixin": 411, "densitymixin": 412, "onetoonefeaturemixin": 413, "regressormixin": 414, "transformermixin": 415, "is_classifi": 417, "is_regressor": 418, "calibratedclassifiercv": 419, "calibrationdisplai": 420, "calibration_curv": 421, "affinitypropag": 422, "agglomerativeclust": 423, "spectralbiclust": 432, "spectralclust": 433, "spectralcoclust": 434, "affinity_propag": 435, "cluster_optics_dbscan": 436, "cluster_optics_xi": 437, "compute_optics_graph": 438, "estimate_bandwidth": 439, "k_mean": 440, "kmeans_plusplu": 441, "mean_shift": 442, "spectral_clust": 443, "ward_tre": 444, "transformedtargetregressor": 446, "make_column_selector": 447, "make_column_transform": 448, "config_context": 449, "ellipticenvelop": 450, "empiricalcovari": 451, "graphicallasso": 452, "graphicallassocv": 453, "mincovdet": 455, "shrunkcovari": 457, "empirical_covari": 458, "graphical_lasso": 459, "ledoit_wolf": 460, "ledoit_wolf_shrinkag": 461, "shrunk_covari": 462, "clear_data_hom": 467, "dump_svmlight_fil": 468, "fetch_20newsgroup": 469, "fetch_20newsgroups_vector": 470, "fetch_california_h": 471, "fetch_covtyp": 472, "fetch_kddcup99": 473, "fetch_lfw_pair": 474, "fetch_lfw_peopl": 475, "fetch_olivetti_fac": 476, "fetch_rcv1": 478, "fetch_species_distribut": 479, "get_data_hom": 480, "load_breast_canc": 481, "load_diabet": 482, "load_digit": 483, "load_fil": 484, "load_iri": 485, "load_linnerud": 486, "load_sample_imag": [487, 488], "load_svmlight_fil": [489, 490], "load_win": 491, "make_biclust": 492, "make_checkerboard": 494, "make_circl": 495, "make_friedman1": 497, "make_friedman2": 498, "make_friedman3": 499, "make_gaussian_quantil": 500, "make_hastie_10_2": 501, "make_low_rank_matrix": 502, "make_moon": 503, "make_multilabel_classif": 504, "make_s_curv": 506, "make_sparse_coded_sign": 507, "make_sparse_spd_matrix": 508, "make_sparse_uncorrel": 509, "make_spd_matrix": 510, "make_swiss_rol": 511, "dictionarylearn": 512, "factoranalysi": 513, "incrementalpca": 515, "latentdirichletalloc": 517, "minibatchdictionarylearn": 518, "sparsecod": 523, "truncatedsvd": 525, "dict_learn": 526, "dict_learning_onlin": 527, "non_negative_factor": 528, "sparse_encod": 529, "quadraticdiscriminantanalysi": 531, "dummyclassifi": 532, "dummyregressor": 533, "adaboostclassifi": 534, "adaboostregressor": 535, "baggingclassifi": 536, "baggingregressor": 537, "extratreesclassifi": 538, "extratreesregressor": 539, "gradientboostingclassifi": 540, "gradientboostingregressor": 541, "histgradientboostingclassifi": 542, "randomforestclassifi": 545, "randomforestregressor": 546, "randomtreesembed": 547, "stackingclassifi": 548, "stackingregressor": 549, "votingregressor": 551, "convergencewarn": 552, "dataconversionwarn": 553, "datadimensionalitywarn": 554, "efficiencywarn": 555, "fitfailedwarn": 556, "inconsistentversionwarn": 557, "notfittederror": 558, "undefinedmetricwarn": 559, "enable_halving_search_cv": 560, "enable_iterative_imput": 561, "patchextractor": 564, "extract_patches_2d": 565, "grid_to_graph": 566, "img_to_graph": 567, "reconstruct_from_patches_2d": 568, "countvector": 569, "tfidftransform": 571, "genericunivariateselect": 573, "rfe": 574, "rfecv": 575, "selectfdr": 576, "selectfpr": 577, "selectfw": 579, "selectkbest": 580, "selectpercentil": 581, "selectormixin": 582, "variancethreshold": 584, "chi2": 585, "f_classif": 586, "f_regress": 587, "mutual_info_classif": 588, "mutual_info_regress": 589, "r_regress": 590, "gaussianprocessclassifi": 591, "gaussianprocessregressor": 592, "compoundkernel": 593, "constantkernel": 594, "dotproduct": 595, "expsinesquar": 596, "exponenti": 597, "matern": 600, "pairwisekernel": 601, "rationalquadrat": 604, "sum": 605, "whitekernel": 606, "get_config": 607, "knnimput": 609, "missingind": 610, "simpleimput": 611, "decisionboundarydisplai": 612, "partialdependencedisplai": 613, "partial_depend": 614, "permutation_import": 615, "isotonicregress": 616, "check_increas": 617, "isotonic_regress": 618, "additivechi2sampl": 619, "nystroem": [620, 954], "rbfsampler": 622, "skewedchi2sampl": 623, "kernelridg": 624, "ardregress": 625, "bayesianridg": 626, "elasticnetcv": 628, "gammaregressor": 629, "larscv": 632, "lassocv": 634, "lassolar": 635, "lassolarscv": 636, "lassolars": 637, "logisticregress": 639, "logisticregressioncv": 640, "multitaskelasticnet": 641, "multitaskelasticnetcv": 642, "multitasklasso": 643, "multitasklassocv": 644, "orthogonalmatchingpursuit": 645, "orthogonalmatchingpursuitcv": 646, "passiveaggressiveclassifi": 647, "passiveaggressiveregressor": 648, "poissonregressor": 650, "ransacregressor": 652, "ridgecv": 654, "ridgeclassifi": 655, "ridgeclassifiercv": 656, "sgdclassifi": 657, "sgdoneclasssvm": 658, "sgdregressor": 659, "theilsenregressor": 660, "enet_path": 662, "lars_path": 663, "lars_path_gram": 664, "lasso_path": 665, "orthogonal_mp": 666, "orthogonal_mp_gram": 667, "ridge_regress": 668, "locallylinearembed": 670, "md": [671, 959], "spectralembed": 672, "locally_linear_embed": 674, "smacof": 675, "spectral_embed": 676, "trustworthi": 677, "detcurvedisplai": 679, "distancemetr": 680, "predictionerrordisplai": 682, "accuracy_scor": 684, "adjusted_mutual_info_scor": 685, "adjusted_rand_scor": 686, "average_precision_scor": 688, "balanced_accuracy_scor": 689, "brier_score_loss": 690, "calinski_harabasz_scor": 691, "check_scor": 692, "class_likelihood_ratio": 693, "classification_report": 694, "contingency_matrix": 695, "pair_confusion_matrix": 696, "cohen_kappa_scor": 697, "completeness_scor": 698, "confusion_matrix": 699, "consensus_scor": 700, "coverage_error": 701, "d2_absolute_error_scor": 702, "d2_pinball_scor": 703, "d2_tweedie_scor": 704, "davies_bouldin_scor": 705, "dcg_score": 706, "det_curv": 707, "explained_variance_scor": 708, "f1_score": 709, "fbeta_scor": 710, "fowlkes_mallows_scor": 711, "get_scor": 712, "get_scorer_nam": 713, "hamming_loss": 714, "hinge_loss": 715, "homogeneity_completeness_v_measur": 716, "homogeneity_scor": 717, "jaccard_scor": 718, "label_ranking_average_precision_scor": 719, "label_ranking_loss": 720, "log_loss": 721, "make_scor": 722, "matthews_corrcoef": 723, "max_error": 724, "mean_absolute_error": 725, "mean_absolute_percentage_error": 726, "mean_gamma_devi": 727, "mean_pinball_loss": 728, "mean_poisson_devi": 729, "mean_squared_error": 730, "mean_squared_log_error": 731, "mean_tweedie_devi": 732, "median_absolute_error": 733, "multilabel_confusion_matrix": 734, "mutual_info_scor": 735, "ndcg_score": 736, "normalized_mutual_info_scor": 737, "additive_chi2_kernel": 738, "chi2_kernel": 739, "cosine_dist": 740, "cosine_similar": 741, "distance_metr": 742, "euclidean_dist": 743, "haversine_dist": 744, "kernel_metr": 745, "laplacian_kernel": 746, "linear_kernel": 747, "manhattan_dist": 748, "nan_euclidean_dist": 749, "paired_cosine_dist": 750, "paired_dist": 751, "paired_euclidean_dist": 752, "paired_manhattan_dist": 753, "pairwise_kernel": 754, "polynomial_kernel": 755, "rbf_kernel": 756, "sigmoid_kernel": 757, "pairwise_dist": 758, "pairwise_distances_argmin": 759, "pairwise_distances_argmin_min": 760, "pairwise_distances_chunk": 761, "precision_recall_curv": 762, "precision_recall_fscore_support": 763, "precision_scor": 764, "r2_score": 765, "rand_scor": 766, "recall_scor": 767, "roc_auc_scor": 768, "roc_curv": 769, "silhouette_sampl": 770, "silhouette_scor": 771, "top_k_accuracy_scor": 772, "v_measure_scor": 773, "zero_one_loss": 774, "bayesiangaussianmixtur": [775, 961], "gaussianmixtur": [776, 961], "groupkfold": 778, "groupshufflesplit": 779, "halvinggridsearchcv": 780, "halvingrandomsearchcv": 781, "kfold": 782, "learningcurvedisplai": 783, "leaveonegroupout": 784, "leaveoneout": 785, "leavepgroupsout": 786, "leavepout": 787, "parametergrid": 788, "parametersampl": 789, "predefinedsplit": 790, "randomizedsearchcv": 791, "repeatedkfold": 792, "repeatedstratifiedkfold": 793, "shufflesplit": 794, "stratifiedkfold": 796, "stratifiedshufflesplit": 797, "timeseriessplit": 798, "check_cv": 799, "cross_val_predict": 800, "learning_curv": 803, "permutation_test_scor": 804, "train_test_split": 805, "validation_curv": 806, "onevsoneclassifi": [807, 963], "onevsrestclassifi": [808, 963], "outputcodeclassifi": [809, 963], "classifierchain": [810, 963], "multioutputclassifi": [811, 963], "multioutputregressor": [812, 963], "regressorchain": [813, 963], "bernoullinb": 814, "categoricalnb": 815, "complementnb": 816, "gaussiannb": 817, "multinomialnb": 818, "balltre": [819, 965], "kdtree": [820, 965], "kneighborsclassifi": 821, "kneighborsregressor": 822, "kneighborstransform": 823, "kerneldens": 824, "localoutlierfactor": 825, "nearestcentroid": 826, "nearestneighbor": 827, "neighborhoodcomponentsanalysi": 828, "radiusneighborsclassifi": 829, "radiusneighborsregressor": 830, "radiusneighborstransform": 831, "kneighbors_graph": 832, "radius_neighbors_graph": 833, "sort_graph_by_row_valu": 834, "bernoullirbm": 835, "mlpregressor": 837, "make_pipelin": 840, "make_union": 841, "binar": [842, 861, 972, 973], "functiontransform": 843, "kernelcenter": 845, "labelbinar": [846, 973], "labelencod": 847, "multilabelbinar": [850, 973], "ordinalencod": 853, "polynomialfeatur": 854, "splinetransform": 858, "add_dummy_featur": 860, "label_binar": 862, "maxabs_scal": 863, "minmax_scal": 864, "power_transform": 866, "quantile_transform": 867, "robust_scal": 868, "gaussianrandomproject": 870, "sparserandomproject": 871, "johnson_lindenstrauss_min_dim": 872, "labelpropag": 873, "labelspread": 874, "selftrainingclassifi": 875, "set_config": 876, "show_vers": 877, "linearsvr": [879, 977], "nusvc": [880, 977], "nusvr": 881, "oneclasssvm": 882, "l1_min_c": 885, "decisiontreeclassifi": 886, "extratreeclassifi": 888, "extratreeregressor": 889, "export_graphviz": 890, "export_text": 891, "plot_tre": 892, "_safe_index": 894, "arrayfunc": 895, "min_po": 895, "as_float_arrai": 896, "assert_all_finit": 897, "check_x_i": 898, "check_arrai": 899, "check_consistent_length": 900, "check_random_st": 901, "check_scalar": 902, "class_weight": [903, 904], "compute_class_weight": 903, "compute_sample_weight": 904, "discoveri": [906, 907, 908], "all_displai": 906, "all_estim": 907, "all_funct": 908, "estimator_check": [909, 910], "check_estim": 909, "parametrize_with_check": 910, "estimator_html_repr": 911, "extmath": [912, 913, 914, 915, 916, 917], "fast_logdet": 913, "randomized_range_find": 914, "randomized_svd": 915, "safe_sparse_dot": 916, "weighted_mod": 917, "gen_batch": 918, "gen_even_slic": 919, "single_source_shortest_path_length": 920, "metaestim": [922, 923], "available_if": 922, "if_delegate_has_method": 923, "is_multilabel": 924, "type_of_target": 925, "unique_label": 926, "murmurhash3_32": 927, "delai": 929, "parallel_backend": 930, "sample_without_replac": 931, "register_parallel_backend": 932, "resampl": 933, "safe_mask": 934, "safe_sqr": 935, "sparsefunc": [937, 938, 939, 940, 941, 942, 943, 1013], "incr_mean_variance_axi": 937, "inplace_column_scal": 938, "inplace_csr_column_scal": 939, "inplace_row_scal": 940, "inplace_swap_column": 941, "inplace_swap_row": 942, "mean_variance_axi": 943, "sparsefuncs_fast": [944, 945], "inplace_csr_row_normalize_l1": 944, "inplace_csr_row_normalize_l2": 945, "check_is_fit": 946, "check_memori": 947, "check_symmetr": 948, "column_or_1d": 949, "has_fit_paramet": 950, "exhaust": 951, "min_resourc": 951, "aggress": [951, 958], "analyz": 951, "cv_results_": 951, "brute": [951, 965], "forc": [951, 965], "keep": 952, "mark": 952, "nan": 952, "chi": [954, 960], "skew": 954, "tensor": 954, "sketch": 954, "qda": 956, "omp": 958, "ard": 958, "liblinear": 958, "passiv": 958, "scenario": 958, "trade": 958, "off": 958, "which": 958, "consensu": 958, "median": [958, 962], "huber": 958, "extend": 958, "introduct": [959, 988], "modifi": 959, "hessian": 959, "eigenmap": 959, "tangent": 959, "align": 959, "nonmetr": 959, "barn": 959, "hut": 959, "cosin": 960, "laplacian": 960, "pro": 961, "con": 961, "maxim": 961, "rule": 962, "cohen": 962, "kappa": 962, "ham": 962, "jaccard": 962, "hing": 962, "matthew": 962, "zero": 962, "brier": 962, "discount": 962, "cumul": 962, "gain": 962, "r\u00b2": 962, "absolut": 962, "logarithm": 962, "percentag": 962, "explain": 962, "pinbal": 962, "d\u00b2": 962, "complement": 964, "bernoulli": [964, 967], "unsupervis": [965, 967, 979, 996, 998], "find": 965, "ball": 965, "leaf_siz": 965, "shrunken": 965, "warm_start": 966, "parametr": 967, "up": 968, "ellipt": 968, "envelop": 968, "isol": 968, "ic": 969, "outlin": 970, "mislead": 970, "strongli": 970, "rang": 972, "whiten": 972, "bin": 972, "lemma": 974, "unlabel": 975, "entri": 975, "id3": 978, "c4": 978, "5": [978, 1004], "c5": 978, "cart": 978, "welcom": 980, "talk": 981, "scientif": [981, 991], "framework": 982, "domain": 982, "translat": 982, "roadmap": 983, "thi": 983, "statement": 983, "2018": 983, "architectur": 983, "goal": 983, "subpackag": 983, "mail": 985, "user": [985, 999], "gitter": 985, "who": 986, "j": 986, "morgan": 986, "spotifi": 986, "inria": 986, "betawork": 986, "hug": 986, "evernot": 986, "t\u00e9l\u00e9com": 986, "paristech": 986, "book": 986, "com": 986, "aweb": 986, "yhat": 986, "rangespan": 986, "birchbox": 986, "bestofmedia": 986, "phimeca": 986, "howaboutw": 986, "peerindex": 986, "datarobot": 986, "okcupid": 986, "love": 986, "publica": 986, "machinali": 986, "solido": 986, "infonea": 986, "dataiku": 986, "otto": 986, "zopa": 986, "mar": 986, "bnp": 986, "pariba": 986, "cardif": 986, "section": 988, "cast": 988, "updat": [988, 1014], "right": 990, "put": 993, "open": 993, "ship": 994, "would": 994, "high": 995, "solv": [995, 996], "vocabulari": 995, "curs": 995, "iris": 995, "same": 995, "seek": 996, "constrain": 996, "inverse_transform": 996, "setup": 997, "token": 997, "occurr": 997, "languag": 997, "identif": 997, "sentiment": 997, "movi": 997, "cli": 997, "where": 997, "here": 997, "12": 1004, "changelog": [1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "11": 1004, "9": 1004, "8": 1004, "7": 1004, "6": [1004, 1010], "modul": [1004, 1012, 1013, 1019, 1020], "misc": 1004, "4": [1004, 1012], "earlier": 1004, "13": 1005, "14": 1006, "15": 1007, "16": 1008, "17": 1009, "18": 1010, "last": 1010, "19": 1011, "21": 1013, "legend": [1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "post1": 1014, "websit": 1014, "clear": 1014, "public": 1014, "futurewarn": 1014, "enforc": [1015, 1017]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1004, "authors"], [1004, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [382, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [163, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [108, "concluding-remarks"], [221, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [80, "references"], [112, "references"], [172, "references"], [184, null], [256, null], [289, "references"], [363, null], [363, null], [363, null], [365, null], [365, null], [365, null], [365, null], [365, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [401, null], [403, "references"], [952, "references"], [952, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [969, null], [972, null], [975, null], [975, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [122, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [185, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [77, "plot-results"], [95, "plot-results"], [96, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [354, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [326, "visualization"], [392, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [67, "computation-times"], [75, "computation-times"], [82, "computation-times"], [86, "computation-times"], [92, "computation-times"], [106, "computation-times"], [132, "computation-times"], [138, "computation-times"], [146, "computation-times"], [158, "computation-times"], [162, "computation-times"], [170, "computation-times"], [173, "computation-times"], [215, "computation-times"], [223, "computation-times"], [239, "computation-times"], [248, "computation-times"], [272, "computation-times"], [275, "computation-times"], [290, "computation-times"], [296, "computation-times"], [304, "computation-times"], [312, "computation-times"], [320, "computation-times"], [337, "computation-times"], [342, "computation-times"], [349, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [163, "biclustering"], [364, "biclustering"], [390, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [163, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [175, "generate-synthetic-dataset"], [175, "id1"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [185, "dataset"], [262, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [391, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [964, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [341, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [156, "classification"], [163, "classification"], [400, "classification"], [400, "id18"], [958, "classification"], [965, "id4"], [966, "classification"], [976, "classification"], [977, "classification"], [978, "classification"], [995, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"], [180, "plot"]], "Clustering": [[36, "clustering"], [163, "clustering"], [393, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Generate sample data": [[38, "generate-sample-data"], [62, "generate-sample-data"], [77, "generate-sample-data"], [95, "generate-sample-data"], [96, "generate-sample-data"], [141, "generate-sample-data"], [231, "generate-sample-data"], [269, "generate-sample-data"], [288, "generate-sample-data"], [333, "generate-sample-data"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [62, "plot-result"], [66, "plot-result"], [66, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [66, "generate-data"], [79, "generate-data"], [190, "generate-data"], [295, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [66, "compute-clustering"], [66, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [56, "data-generation"], [124, "data-generation"], [144, "data-generation"], [154, "data-generation"], [246, "data-generation"], [314, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [81, "plot-the-results"], [131, "plot-the-results"], [161, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [979, "feature-agglomeration"], [996, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Inductive Clustering": [[55, "inductive-clustering"]], "Demonstration of k-means assumptions": [[56, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[56, "fit-models-and-plot-results"]], "Possible solutions": [[56, "possible-solutions"]], "Final remarks": [[56, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[57, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[57, "load-the-dataset"]], "Define our evaluation benchmark": [[57, "define-our-evaluation-benchmark"]], "Run the benchmark": [[57, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[57, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[58, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[59, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[60, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[61, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[62, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[62, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[63, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[63, "generate-the-data"], [65, "generate-the-data"], [81, "generate-the-data"]], "Compute clustering with KMeans": [[63, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[63, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[63, "establishing-parity-between-clusters"]], "Plotting the results": [[63, "plotting-the-results"], [108, "plotting-the-results"], [110, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[64, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[65, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[65, "plotting-four-circles"]], "Plotting two circles": [[65, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[66, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[66, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[68, "pipelines-and-composite-estimators"], [163, "pipelines-and-composite-estimators"], [394, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[69, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[69, "newsgroups-dataset"]], "Creating transformers": [[69, "creating-transformers"]], "Classification pipeline": [[69, "classification-pipeline"]], "Column Transformer with Mixed Types": [[70, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[71, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[71, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[71, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[72, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[73, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[74, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[74, "synthetic-example"]], "Real-world data set": [[74, "real-world-data-set"]], "Covariance estimation": [[76, "covariance-estimation"], [163, "covariance-estimation"], [395, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[77, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[77, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[77, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[78, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[79, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[79, null], [168, null], [261, null], [262, null], [362, null], [363, null], [390, null], [390, null], [390, null], [391, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [395, null], [395, null], [395, null], [395, null], [397, null], [397, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [401, null], [402, null], [951, null], [951, null], [954, null], [955, null], [956, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [960, null], [960, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [963, null], [963, null], [963, null], [964, null], [964, null], [964, null], [965, null], [965, null], [965, null], [966, null], [967, null], [968, null], [968, null], [968, null], [968, null], [970, null], [972, null], [972, null], [974, null], [974, null], [974, null], [976, null], [976, null], [977, null], [978, null], [978, null]], "Comparison of results": [[79, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[80, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[80, "minimum-covariance-determinant-estimator"]], "Evaluation": [[80, "evaluation"], [295, "evaluation"]], "Sparse inverse covariance estimation": [[81, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[81, "estimate-the-covariance"]], "Cross decomposition": [[83, "cross-decomposition"], [163, "cross-decomposition"], [396, "cross-decomposition"]], "Compare cross decomposition methods": [[84, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[84, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[84, "canonical-symmetric-pls"]], "Transform data": [[84, "transform-data"]], "Scatter plot of scores": [[84, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[84, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[84, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[84, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[85, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[85, "the-data"]], "Projection on one component and predictive power": [[85, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[87, "dataset-examples"], [163, "dataset-examples"]], "The Digit Dataset": [[88, "the-digit-dataset"]], "The Iris Dataset": [[89, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[90, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[91, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[93, "decomposition"], [94, "decomposition"], [163, "decomposition"]], "Faces dataset decompositions": [[94, "faces-dataset-decompositions"]], "Dataset preparation": [[94, "dataset-preparation"], [217, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[94, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[94, "non-negative-components-nmf"]], "Independent components - FastICA": [[94, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[94, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[94, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[94, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[94, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[94, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[94, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[94, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[94, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[95, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[95, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[96, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[97, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[97, "generate-distorted-image"]], "Display the distorted image": [[97, "display-the-distorted-image"]], "Extract reference patches": [[97, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[97, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[97, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[98, "incremental-pca"], [398, "incremental-pca"]], "Kernel PCA": [[99, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[99, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[99, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[100, "principal-components-analysis-pca"]], "Create the data": [[100, "create-the-data"], [102, "create-the-data"]], "Plot the figures": [[100, "plot-the-figures"]], "PCA example with Iris Data-set": [[101, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[102, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[102, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[103, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[104, "sparse-coding-with-a-precomputed-dictionary"], [398, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[105, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[107, "ensemble-methods"], [163, "ensemble-methods"], [400, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[108, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[108, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[108, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[109, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[110, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[110, "preparing-the-data"], [172, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[110, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[111, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[112, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[113, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[114, "feature-transformations-with-ensembles-of-trees"]], "Feature importances with a forest of trees": [[115, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[115, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[115, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[115, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[116, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[116, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[116, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[117, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[118, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[118, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[118, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[118, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[118, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[118, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[118, "model-comparison"]], "Limiting the number of splits": [[118, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[119, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[119, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[119, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[120, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[121, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[121, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[121, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[121, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[121, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[122, "gradient-boosting-regression"]], "Data preprocessing": [[122, "data-preprocessing"]], "Fit regression model": [[122, "fit-regression-model"], [288, "fit-regression-model"], [333, "fit-regression-model"]], "Plot training deviance": [[122, "plot-training-deviance"]], "Plot feature importance": [[122, "plot-feature-importance"]], "Gradient Boosting regularization": [[123, "gradient-boosting-regularization"]], "IsolationForest example": [[124, "isolationforest-example"]], "Training of the model": [[124, "training-of-the-model"]], "Plot discrete decision boundary": [[124, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[124, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[125, "monotonic-constraints"], [400, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[125, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[126, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[127, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[128, "combine-predictors-using-stacking"]], "Download the dataset": [[128, "download-the-dataset"]], "Make pipeline to preprocess the data": [[128, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[128, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[128, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[129, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[130, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[131, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[131, "training-classifiers"]], "Making predictions": [[131, "making-predictions"]], "Tutorial exercises": [[133, "tutorial-exercises"], [163, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[134, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[134, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[134, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[134, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[135, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[136, "digits-classification-exercise"]], "SVM Exercise": [[137, "svm-exercise"]], "Feature Selection": [[139, "feature-selection"], [163, "feature-selection"]], "Comparison of F-test and mutual information": [[140, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[141, "univariate-feature-selection"]], "Univariate feature selection": [[141, "id1"], [402, "univariate-feature-selection"]], "Compare with SVMs": [[141, "compare-with-svms"]], "Pipeline ANOVA SVM": [[142, "pipeline-anova-svm"]], "Recursive feature elimination": [[143, "recursive-feature-elimination"], [402, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[144, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[144, "model-training-and-selection"], [246, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[144, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[145, "model-based-and-sequential-feature-selection"]], "Loading the data": [[145, "loading-the-data"]], "Feature importance from coefficients": [[145, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[145, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[145, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[145, "discussion"]], "Gaussian Process for Machine Learning": [[147, "gaussian-process-for-machine-learning"], [163, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[148, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[148, "generating-a-dataset"]], "Limitations of a simple linear model": [[148, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[148, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[148, "kernel-ridge"]], "Gaussian process regression": [[148, "gaussian-process-regression"]], "Final conclusion": [[148, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[149, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[150, "gaussian-process-classification-gpc-on-iris-dataset"], [403, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[151, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[152, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[153, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[153, "build-the-dataset"]], "Design the proper kernel": [[153, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[153, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[153, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[154, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[154, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[155, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[155, "dataset-generation"], [198, "dataset-generation"]], "Example with noise-free target": [[155, "example-with-noise-free-target"]], "Example with noisy targets": [[155, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[156, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[156, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[156, "regression"], [400, "regression"], [400, "id17"], [958, "regression"], [966, "regression"], [976, "regression"], [977, "regression"], [978, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[157, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[157, "helper-function"]], "Dataset and Gaussian process generation": [[157, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[157, "kernel-cookbook"]], "Radial Basis Function kernel": [[157, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[157, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[157, "exp-sine-squared-kernel"], [403, "exp-sine-squared-kernel"]], "Dot-product kernel": [[157, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[157, "matern-kernel"], [403, "matern-kernel"]], "Missing Value Imputation": [[159, "missing-value-imputation"], [163, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[160, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[161, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[161, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[161, "impute-the-missing-data-and-score"]], "Missing information": [[161, "missing-information"]], "Estimate the score": [[161, "estimate-the-score"]], "Replace missing values by 0": [[161, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[161, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[161, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[161, "iterative-imputation-of-the-missing-values"]], "Examples": [[163, "examples"], [356, "examples"], [363, null], [363, "examples"], [397, null], [397, null], [402, null], [402, null], [975, null], [975, null], [979, null], [979, null], [979, null], [1004, "examples"]], "Release Highlights": [[163, "release-highlights"], [305, "release-highlights"]], "Decision Trees": [[163, "decision-trees"], [343, "decision-trees"], [978, "decision-trees"]], "Gaussian Mixture Models": [[163, "gaussian-mixture-models"], [240, "gaussian-mixture-models"]], "Generalized Linear Models": [[163, "generalized-linear-models"], [174, "generalized-linear-models"], [958, "generalized-linear-models"]], "Inspection": [[163, "inspection"], [164, "inspection"], [383, "inspection"]], "Kernel Approximation": [[163, "kernel-approximation"], [171, "kernel-approximation"], [954, "kernel-approximation"]], "Manifold learning": [[163, "manifold-learning"], [216, "manifold-learning"], [959, "manifold-learning"]], "Miscellaneous": [[163, "miscellaneous"], [224, "miscellaneous"], [392, "miscellaneous"], [1012, "miscellaneous"], [1012, "id40"], [1013, "miscellaneous"], [1014, "miscellaneous"], [1015, "miscellaneous"], [1015, "id13"], [1016, "miscellaneous"], [1017, "miscellaneous"]], "Model Selection": [[163, "model-selection"], [249, "model-selection"]], "Multioutput methods": [[163, "multioutput-methods"], [273, "multioutput-methods"]], "Nearest Neighbors": [[163, "nearest-neighbors"], [277, "nearest-neighbors"], [965, "nearest-neighbors"]], "Neural Networks": [[163, "neural-networks"], [291, "neural-networks"]], "Preprocessing": [[163, "preprocessing"], [297, "preprocessing"]], "Semi Supervised Classification": [[163, "semi-supervised-classification"], [313, "semi-supervised-classification"]], "Support Vector Machines": [[163, "support-vector-machines"], [321, "support-vector-machines"], [977, "support-vector-machines"]], "Working with text documents": [[163, "working-with-text-documents"], [338, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[165, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[165, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[165, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[165, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[165, "income-prediction-with-partial-observations"]], "Lessons learned": [[165, "lessons-learned"], [166, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[166, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[166, "the-dataset-wages"]], "The machine-learning pipeline": [[166, "the-machine-learning-pipeline"]], "Processing the dataset": [[166, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[166, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[166, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[166, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[166, "preprocessing-numerical-variables"]], "Linear models with regularization": [[166, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[166, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[166, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[167, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[167, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[167, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[167, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[167, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[167, "way-partial-dependence-with-different-models"]], "2D interaction plots": [[167, "d-interaction-plots"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[168, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[168, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[168, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[168, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[169, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[169, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[169, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[172, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[172, "partitioning-the-data"]], "Feature normalization": [[172, "feature-normalization"]], "Establishing a baseline model": [[172, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[172, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[172, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[172, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[175, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[175, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[175, "fit-the-regressors"], [175, "id2"]], "Plot the true and estimated coefficients": [[175, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[175, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[175, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[175, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[176, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[176, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[176, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[176, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[177, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[178, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[179, "logistic-regression-3-class-classifier"]], "Lasso and Elastic Net for Sparse Signals": [[180, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[180, "data-generation"]], "Lasso": [[180, "lasso"], [958, "lasso"]], "ElasticNet": [[180, "elasticnet"]], "Lasso and Elastic Net": [[181, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[182, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[182, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[182, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[183, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[184, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[185, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[185, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[185, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[185, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[185, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[185, "summary-of-cross-validation-approach"]], "Logistic function": [[186, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[187, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[188, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[189, "regularization-path-of-l1-logistic-regression"]], "Load data": [[189, "load-data"]], "Compute regularization path": [[189, "compute-regularization-path"]], "Plot regularization path": [[189, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[190, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[190, "fit-models"]], "Plot support and time series": [[190, "plot-support-and-time-series"]], "Non-negative least squares": [[191, "non-negative-least-squares"]], "Linear Regression Example": [[192, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[193, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[194, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[195, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[196, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[196, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[196, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[196, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[196, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[196, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[196, "evaluation-of-the-ranking-power"]], "Main takeaways": [[196, "main-takeaways"]], "Polynomial and Spline interpolation": [[197, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[197, "periodic-splines"]], "Quantile regression": [[198, "quantile-regression"]], "Fitting a QuantileRegressor": [[198, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[198, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[199, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[200, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[201, "compute-paths"]], "Display results": [[201, "display-results"]], "Robust linear estimator fitting": [[202, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[203, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[204, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[205, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[206, "sgd-convex-loss-functions"]], "SGD: Penalties": [[207, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[208, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[209, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[210, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[211, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[212, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[213, "theil-sen-regression"]], "Outliers only in the y direction": [[213, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[213, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[214, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[214, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[214, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[214, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[214, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[217, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[217, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[217, "locally-linear-embeddings"]], "Isomap Embedding": [[217, "isomap-embedding"]], "Multidimensional scaling": [[217, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[217, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[217, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[218, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[218, "load-digits-dataset"]], "Helper function to plot embedding": [[218, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[218, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[219, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[220, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[221, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[221, "swiss-roll"]], "Swiss-Hole": [[221, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[222, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[225, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[226, "visualizations-with-display-objects"]], "Load Data and train model": [[226, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[226, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[226, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[226, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[226, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[227, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[227, "compact-text-representation"]], "Rich HTML representation": [[227, "rich-html-representation"]], "Isotonic Regression": [[228, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[229, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[229, "theoretical-bounds"]], "Empirical validation": [[229, "empirical-validation"]], "Remarks": [[229, "remarks"]], "Explicit feature map approximation for RBF kernels": [[230, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[230, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[230, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[230, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[231, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[231, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[231, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[231, "look-at-the-results"], [333, "look-at-the-results"]], "Visualize training and prediction times": [[231, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[231, "visualize-the-learning-curves"]], "Multilabel classification": [[232, "multilabel-classification"], [963, "multilabel-classification"]], "Face completion with a multi-output estimators": [[233, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[234, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[234, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[234, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[234, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[235, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[235, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[235, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[235, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[235, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[236, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[236, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[236, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[236, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[236, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[236, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[237, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[237, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[237, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[237, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[238, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[241, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[242, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[243, "gmm-covariances"]], "GMM Initialization Methods": [[244, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[245, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[246, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[246, "plot-the-bic-scores"]], "Plot the best model": [[246, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[247, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[250, "confusion-matrix"], [962, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[251, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[251, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[251, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[251, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[252, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[253, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[253, "generate-synthetic-data"]], "Define the classifiers": [[253, "define-the-classifiers"]], "Plot ROC and DET curves": [[253, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[254, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[254, "the-dataset"]], "Define our grid-search strategy": [[254, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[254, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[255, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[256, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[256, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[256, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[256, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[256, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[256, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[256, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[257, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[257, "data-loading"]], "Pipeline with hyperparameter tuning": [[257, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[258, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[258, "learning-curve"]], "Complexity analysis": [[258, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[259, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[259, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[259, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[259, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[260, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[260, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[260, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[261, "nested-versus-non-nested-cross-validation"]], "See Also:": [[261, null], [394, null]], "Test with permutations the significance of a classification score": [[262, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[262, "permutation-test-score"], [397, "permutation-test-score"]], "Original data": [[262, "original-data"], [298, "original-data"]], "Random data": [[262, "random-data"]], "Precision-Recall": [[263, "precision-recall"]], "In binary classification settings": [[263, "in-binary-classification-settings"]], "Dataset and model": [[263, "dataset-and-model"]], "Plot the Precision-Recall curve": [[263, "plot-the-precision-recall-curve"]], "In multi-label settings": [[263, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[263, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[263, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[263, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[263, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[264, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[265, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[265, "load-and-prepare-data"], [266, "load-and-prepare-data"], [303, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[265, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[265, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[265, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[265, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[265, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[265, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[265, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[265, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[266, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[266, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[267, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[268, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[268, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[269, "train-error-vs-test-error"]], "Compute train and test errors": [[269, "compute-train-and-test-errors"]], "Plot results functions": [[269, "plot-results-functions"]], "Underfitting vs. Overfitting": [[270, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[271, "plotting-validation-curves"]], "Classifier Chain": [[274, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[276, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[278, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[279, "nearest-neighbors-classification"], [965, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[280, "kernel-density-estimation"], [399, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[281, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[282, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[283, "outlier-detection-with-local-outlier-factor-lof"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[284, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[285, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[286, "neighborhood-components-analysis-illustration"]], "Original points": [[286, "original-points"]], "Learning an embedding": [[286, "learning-an-embedding"]], "Nearest Centroid Classification": [[287, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[288, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[289, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[292, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[293, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[294, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[295, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[295, "models-definition"]], "Training": [[295, "training"], [965, "training"]], "Plotting": [[295, "plotting"], [392, "plotting"], [392, "id7"], [392, "id9"]], "Compare the effect of different scalers on data with outliers": [[298, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[298, "standardscaler"]], "MinMaxScaler": [[298, "minmaxscaler"]], "MaxAbsScaler": [[298, "maxabsscaler"]], "RobustScaler": [[298, "robustscaler"]], "PowerTransformer": [[298, "powertransformer"]], "QuantileTransformer (uniform output)": [[298, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[298, "quantiletransformer-gaussian-output"]], "Normalizer": [[298, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[299, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[300, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[301, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[302, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[303, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[303, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[303, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[303, "effect-of-rescaling-on-model-s-performance"]], "Release Highlights for scikit-learn 0.22": [[306, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[306, "new-plotting-api"]], "Stacking Classifier and Regressor": [[306, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[306, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[306, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[306, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[306, "knn-based-imputation"]], "Tree pruning": [[306, "tree-pruning"]], "Retrieve dataframes from OpenML": [[306, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[306, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[306, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[307, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[307, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[307, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[307, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[307, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[307, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[308, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[308, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[308, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[308, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[308, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[308, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[308, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[308, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[308, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[308, "new-documentation-improvements"], [309, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[309, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[309, "keyword-and-positional-arguments"]], "Spline Transformers": [[309, "spline-transformers"]], "Quantile Regressor": [[309, "quantile-regressor"]], "Feature Names Support": [[309, "feature-names-support"]], "A more flexible plotting API": [[309, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[309, "online-one-class-svm"], [976, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[309, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[310, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[310, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[310, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[310, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[310, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[310, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[310, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[311, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[311, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[311, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[311, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[311, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[311, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[311, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[314, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[314, "semi-supervised-learning"], [975, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[314, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[315, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[316, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[317, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[318, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[319, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[322, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[323, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[324, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[325, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[326, "rbf-svm-parameters"]], "Load and prepare data set": [[326, "load-and-prepare-data-set"]], "Train classifiers": [[326, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[327, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[328, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[329, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[329, "load-some-data-to-play-with"]], "Create the pipeline": [[329, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[329, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[330, "svm-kernels"]], "SVM Margins Example": [[331, "svm-margins-example"]], "Non-linear SVM": [[332, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[333, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[334, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[334, "l1-penalty-case"]], "L2-penalty case": [[334, "l2-penalty-case"]], "SVM Tie Breaking Example": [[335, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[336, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[339, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[339, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[339, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[339, "model-without-metadata-stripping"]], "Model with metadata stripping": [[339, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[339, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[339, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[340, "clustering-text-documents-using-k-means"]], "Loading text data": [[340, "loading-text-data"]], "Quantifying the quality of clustering results": [[340, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[340, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[340, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[340, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[340, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[340, "top-terms-per-cluster"]], "HashingVectorizer": [[340, "hashingvectorizer"]], "Clustering evaluation summary": [[340, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[341, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[341, "load-data"]], "Define preprocessing functions": [[341, "define-preprocessing-functions"]], "DictVectorizer": [[341, "dictvectorizer"]], "FeatureHasher": [[341, "featurehasher"]], "Comparison with special purpose text vectorizers": [[341, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[341, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[344, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[344, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[344, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[345, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[346, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[347, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[348, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[348, "train-tree-classifier"]], "Tree structure": [[348, "tree-structure"]], "Decision path": [[348, "decision-path"]], "Common pitfalls and recommended practices": [[350, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[350, "inconsistent-preprocessing"]], "Data leakage": [[350, "data-leakage"]], "Data leakage during pre-processing": [[350, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[350, "how-to-avoid-data-leakage"]], "Controlling randomness": [[350, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[350, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[350, "estimators"], [350, "id2"], [370, "estimators"], [392, "estimators"]], "CV splitters": [[350, "cv-splitters"], [350, "id3"]], "Common pitfalls and subtleties": [[350, "common-pitfalls-and-subtleties"]], "General recommendations": [[350, "general-recommendations"]], "Getting reproducible results across multiple executions": [[350, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[350, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[353, "computing-with-scikit-learn"]], "Computational Performance": [[354, "computational-performance"]], "Bulk versus Atomic mode": [[354, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[354, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[354, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[354, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[354, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[354, "feature-extraction-latency"]], "Prediction Throughput": [[354, "prediction-throughput"]], "Tips and Tricks": [[354, "tips-and-tricks"]], "Linear algebra libraries": [[354, "linear-algebra-libraries"]], "Limiting Working Memory": [[354, "limiting-working-memory"]], "Model Compression": [[354, "model-compression"]], "Model Reshaping": [[354, "model-reshaping"]], "Links": [[354, "links"]], "Parallelism, resource management, and configuration": [[355, "parallelism-resource-management-and-configuration"]], "Parallelism": [[355, "parallelism"], [951, "parallelism"]], "Higher-level parallelism with joblib": [[355, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[355, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[355, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[355, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[355, "configuration-switches"]], "Python API": [[355, "python-api"]], "Environment variables": [[355, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[355, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[355, "sklearn-working-memory"]], "SKLEARN_SEED": [[355, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[355, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[355, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[355, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[355, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[355, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[355, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[356, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[356, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[356, "streaming-instances"]], "Extracting features": [[356, "extracting-features"]], "Incremental learning": [[356, "incremental-learning"]], "Notes": [[356, "notes"], [394, "notes"], [958, "notes"]], "Table Of Contents": [[357, "table-of-contents"]], "Dataset transformations": [[360, "dataset-transformations"]], "Dataset loading utilities": [[361, "dataset-loading-utilities"], [373, "dataset-loading-utilities"]], "Loading other datasets": [[362, "loading-other-datasets"]], "Sample images": [[362, "sample-images"]], "Examples:": [[362, null], [383, null], [390, null], [390, null], [391, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [394, null], [394, null], [394, null], [394, null], [394, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [396, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [399, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [402, null], [402, null], [402, null], [402, null], [951, null], [951, null], [951, null], [954, null], [954, null], [956, null], [956, null], [956, null], [957, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [959, null], [961, null], [961, null], [961, null], [961, null], [962, null], [962, null], [962, null], [962, null], [962, null], [963, null], [965, null], [965, null], [965, null], [965, null], [965, null], [966, null], [966, null], [967, null], [968, null], [968, null], [968, null], [968, null], [968, null], [968, null], [969, null], [970, null], [972, null], [972, null], [976, null], [976, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [978, null], [978, null], [978, null], [978, null], [1001, null]], "Datasets in svmlight / libsvm format": [[362, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[362, null]], "Downloading datasets from the openml.org repository": [[362, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[362, "dataset-versions"]], "ARFF parser": [[362, "arff-parser"]], "Loading from external datasets": [[362, "loading-from-external-datasets"], [988, null]], "Real world datasets": [[363, "real-world-datasets"]], "The Olivetti faces dataset": [[363, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[363, "the-20-newsgroups-text-dataset"]], "Usage": [[363, "usage"], [363, "id2"], [391, "usage"], [394, "usage"], [394, "id1"], [400, "usage"], [400, "id26"], [400, "id31"], [400, "id32"], [400, "id34"], [958, "usage"]], "Converting text to vectors": [[363, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[363, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[363, null]], "Recommendation": [[363, null]], "The Labeled Faces in the Wild face recognition dataset": [[363, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[363, "forest-covertypes"]], "RCV1 dataset": [[363, "rcv1-dataset"]], "Kddcup 99 dataset": [[363, "kddcup-99-dataset"]], "California Housing dataset": [[363, "california-housing-dataset"]], "Generated datasets": [[364, "generated-datasets"]], "Generators for classification and clustering": [[364, "generators-for-classification-and-clustering"]], "Single label": [[364, "single-label"]], "Multilabel": [[364, "multilabel"]], "Generators for regression": [[364, "generators-for-regression"]], "Generators for manifold learning": [[364, "generators-for-manifold-learning"]], "Generators for decomposition": [[364, "generators-for-decomposition"]], "Toy datasets": [[365, "toy-datasets"]], "Iris plants dataset": [[365, "iris-plants-dataset"]], "Diabetes dataset": [[365, "diabetes-dataset"], [995, null]], "Optical recognition of handwritten digits dataset": [[365, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[365, "linnerrud-dataset"]], "Wine recognition dataset": [[365, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[365, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[366, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[366, "installing-nightly-builds"]], "Building from source": [[366, "building-from-source"]], "Dependencies": [[366, "dependencies"]], "Runtime dependencies": [[366, "runtime-dependencies"]], "Build dependencies": [[366, "build-dependencies"]], "Test dependencies": [[366, "test-dependencies"]], "Building a specific version from a tag": [[366, "building-a-specific-version-from-a-tag"]], "Editable mode": [[366, "editable-mode"]], "Platform-specific instructions": [[366, "platform-specific-instructions"]], "Windows": [[366, "windows"]], "macOS": [[366, "macos"]], "macOS compilers from conda-forge": [[366, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[366, "macos-compilers-from-homebrew"]], "Linux": [[366, "linux"]], "Linux compilers from the system": [[366, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[366, "linux-compilers-from-conda-forge"]], "FreeBSD": [[366, "freebsd"]], "Alternative compilers": [[366, "alternative-compilers"]], "Parallel builds": [[366, "parallel-builds"]], "Bug triaging and issue curation": [[367, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[367, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[367, null]], "Working on PRs to help review": [[367, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[367, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[367, null]], "A typical workflow for triaging issues": [[367, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[368, "contributing"], [379, "contributing"]], "Our community, our values": [[368, null]], "Ways to contribute": [[368, "ways-to-contribute"]], "Contributing to related projects": [[368, null]], "Submitting a bug report or a feature request": [[368, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[368, "how-to-make-a-good-bug-report"]], "Contributing code": [[368, "contributing-code"]], "Video resources": [[368, "video-resources"]], "How to contribute": [[368, "how-to-contribute"]], "Learning git:": [[368, null]], "Pull request checklist": [[368, "pull-request-checklist"]], "Continuous Integration (CI)": [[368, "continuous-integration-ci"]], "Stalled pull requests": [[368, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[368, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[368, "issues-for-new-contributors"]], "good first issue tag": [[368, null]], "Easy tag": [[368, null]], "help wanted tag": [[368, null]], "Documentation": [[368, "documentation"], [1004, "documentation"]], "Building the documentation": [[368, "building-the-documentation"]], "Guidelines for writing documentation": [[368, "guidelines-for-writing-documentation"]], "Cross-referencing": [[368, "cross-referencing"]], "Generated documentation on GitHub Actions": [[368, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[368, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[368, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[368, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[368, "monitoring-performance"]], "Issue Tracker Tags": [[368, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[368, "maintaining-backwards-compatibility"]], "Deprecation": [[368, "deprecation"]], "Change the default value of a parameter": [[368, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[368, "code-review-guidelines"]], "Communication Guidelines": [[368, "communication-guidelines"]], "Reading the existing code base": [[368, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[369, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[369, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[369, "tips-to-ease-development"]], "Tips for performance": [[369, "tips-for-performance"]], "Using OpenMP": [[369, "using-openmp"]], "Developing scikit-learn estimators": [[370, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[370, "apis-of-scikit-learn-objects"]], "Different objects": [[370, "different-objects"]], "Instantiation": [[370, "instantiation"]], "Fitting": [[370, "fitting"]], "Estimated Attributes": [[370, "estimated-attributes"]], "Optional Arguments": [[370, "optional-arguments"]], "Universal attributes": [[370, "universal-attributes"]], "Rolling your own estimator": [[370, "rolling-your-own-estimator"]], "Project template:": [[370, null]], "BaseEstimator and mixins:": [[370, null]], "get_params and set_params": [[370, "get-params-and-set-params"]], "Parameters and init": [[370, "parameters-and-init"]], "Cloning": [[370, "cloning"]], "Pipeline compatibility": [[370, "pipeline-compatibility"]], "Estimator types": [[370, "estimator-types"]], "Specific models": [[370, "specific-models"]], "Estimator Tags": [[370, "estimator-tags"]], "Developer API for set_output": [[370, "developer-api-for-set-output"]], "Coding guidelines": [[370, "coding-guidelines"]], "Input validation": [[370, "input-validation"]], "Random Numbers": [[370, "random-numbers"]], "Numerical assertions in tests": [[370, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[371, "developer-s-guide"]], "Maintainer / core-developer information": [[372, "maintainer-core-developer-information"]], "Releasing": [[372, "releasing"]], "Before a release": [[372, "before-a-release"]], "Preparing a release PR": [[372, "preparing-a-release-pr"]], "Major version release": [[372, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[372, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[372, "making-a-release"]], "Release checklist": [[372, "release-checklist"]], "Merging Pull Requests": [[372, "merging-pull-requests"]], "The scikit-learn.org web site": [[372, "the-scikit-learn-org-web-site"]], "Experimental features": [[372, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[373, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[373, "good-practices"]], "Provide a failing code example with minimal comments": [[373, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[373, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[373, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[373, "use-markdown-formatting"]], "Synthetic dataset": [[373, "synthetic-dataset"]], "NumPy": [[373, "numpy"]], "Pandas": [[373, "pandas"]], "make_regression": [[373, "make-regression"]], "make_classification": [[373, "make-classification"]], "make_blobs": [[373, "make-blobs"]], "How to optimize for speed": [[374, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[374, "python-cython-or-c-c"]], "Profiling Python code": [[374, "profiling-python-code"]], "Memory usage profiling": [[374, "memory-usage-profiling"]], "Using Cython": [[374, "using-cython"]], "Profiling compiled extensions": [[374, "profiling-compiled-extensions"]], "Using yep and gperftools": [[374, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[374, "using-a-debugger-gdb"]], "Using gprof": [[374, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[374, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[374, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[374, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[374, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[375, "developing-with-the-plotting-api"]], "Plotting API Overview": [[375, "plotting-api-overview"]], "Plotting with Multiple Axes": [[375, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[376, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[376, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[376, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[376, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[376, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[376, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[376, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[376, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[376, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[377, "utilities-for-developers"]], "Validation Tools": [[377, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[377, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[377, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[377, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[377, "graph-routines"]], "Testing Functions": [[377, "testing-functions"]], "Multiclass and multilabel utility function": [[377, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[377, "helper-functions"]], "Hash Functions": [[377, "hash-functions"]], "Warnings and Exceptions": [[377, "warnings-and-exceptions"]], "Dispatching": [[378, "dispatching"]], "Frequently Asked Questions": [[379, "frequently-asked-questions"]], "Table of Contents": [[379, "table-of-contents"]], "About the project": [[379, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[379, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[379, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[379, "why-scikit"]], "Do you support PyPy?": [[379, "do-you-support-pypy"]], "Implementation decisions": [[379, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[379, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[379, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[379, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[379, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[379, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[379, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[379, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[379, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[379, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[379, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[379, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[379, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[379, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[379, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[379, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[379, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[379, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[379, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[379, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[379, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[379, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[380, "getting-started"]], "Fitting and predicting: estimator basics": [[380, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[380, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[380, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[380, "model-evaluation"]], "Automatic parameter searches": [[380, "automatic-parameter-searches"]], "Next steps": [[380, "next-steps"]], "Glossary of Common Terms and API Elements": [[381, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[381, "general-concepts"]], "Class APIs and Estimator Types": [[381, "class-apis-and-estimator-types"]], "Target Types": [[381, "target-types"]], "Methods": [[381, "methods"]], "Parameters": [[381, "parameters"], [400, "parameters"]], "Attributes": [[381, "attributes"]], "Data and sample properties": [[381, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[382, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[382, "roles-and-responsibilities"]], "Contributors": [[382, "contributors"]], "Communication team": [[382, "communication-team"]], "Core developers": [[382, "core-developers"]], "Technical Committee": [[382, "technical-committee"]], "Decision Making Process": [[382, "decision-making-process"]], "Governance Model Changes": [[382, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[382, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[384, "installing-scikit-learn"]], "Installing the latest release": [[384, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[384, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[384, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[384, "alpine-linux"]], "Arch Linux": [[384, "arch-linux"]], "Debian/Ubuntu": [[384, "debian-ubuntu"]], "Fedora": [[384, "fedora"]], "NetBSD": [[384, "netbsd"]], "MacPorts for Mac OSX": [[384, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[384, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[384, "intel-conda-channel"]], "WinPython for Windows": [[384, "winpython-for-windows"]], "Troubleshooting": [[384, "troubleshooting"]], "Error caused by file path length limit on Windows": [[384, "error-caused-by-file-path-length-limit-on-windows"]], "Model persistence": [[387, "model-persistence"]], "Python specific serialization": [[387, "python-specific-serialization"]], "Security & maintainability limitations": [[387, "security-maintainability-limitations"]], "A more secure format: skops": [[387, "a-more-secure-format-skops"]], "Interoperable formats": [[387, "interoperable-formats"]], "Model selection and evaluation": [[388, "model-selection-and-evaluation"]], "Array API support (experimental)": [[389, "array-api-support-experimental"]], "Example usage": [[389, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[389, "estimators-with-support-for-array-api-compatible-inputs"]], "Spectral Co-Clustering": [[390, "spectral-co-clustering"]], "Mathematical formulation": [[390, "mathematical-formulation"], [390, "id3"], [393, "mathematical-formulation"], [393, "id12"], [393, "id19"], [393, "id29"], [393, "id33"], [400, "mathematical-formulation"], [958, "mathematical-formulation"], [965, "mathematical-formulation"], [966, "mathematical-formulation"], [976, "mathematical-formulation"], [977, "mathematical-formulation"], [978, "mathematical-formulation"]], "Spectral Biclustering": [[390, "spectral-biclustering"]], "Biclustering evaluation": [[390, "biclustering-evaluation"]], "Probability calibration": [[391, "probability-calibration"]], "Calibrating a classifier": [[391, "calibrating-a-classifier"]], "Sigmoid": [[391, "sigmoid"]], "Isotonic": [[391, "isotonic"]], "Multiclass support": [[391, "multiclass-support"]], "API Reference": [[392, "api-reference"]], "sklearn.base: Base classes and utility functions": [[392, "module-sklearn.base"]], "Base classes": [[392, "base-classes"]], "Functions": [[392, "functions"], [392, "id1"]], "sklearn.calibration: Probability Calibration": [[392, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[392, "module-sklearn.cluster"]], "Classes": [[392, "classes"]], "sklearn.compose: Composite Estimators": [[392, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[392, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[392, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[392, "module-sklearn.datasets"]], "Loaders": [[392, "loaders"]], "Samples generator": [[392, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[392, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[392, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[392, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[392, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[392, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[392, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[392, "module-sklearn.feature_extraction"]], "From images": [[392, "module-sklearn.feature_extraction.image"]], "From text": [[392, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[392, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[392, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[392, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[392, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[392, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[392, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[392, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[392, "module-sklearn.linear_model"]], "Linear classifiers": [[392, "linear-classifiers"]], "Classical linear regressors": [[392, "classical-linear-regressors"]], "Regressors with variable selection": [[392, "regressors-with-variable-selection"]], "Bayesian regressors": [[392, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[392, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[392, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[392, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[392, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[392, "sklearn-metrics-metrics"]], "Model Selection Interface": [[392, "model-selection-interface"]], "Classification metrics": [[392, "classification-metrics"], [962, "classification-metrics"]], "Regression metrics": [[392, "regression-metrics"], [962, "regression-metrics"]], "Multilabel ranking metrics": [[392, "multilabel-ranking-metrics"], [962, "multilabel-ranking-metrics"]], "Clustering metrics": [[392, "clustering-metrics"], [962, "clustering-metrics"]], "Biclustering metrics": [[392, "biclustering-metrics"]], "Distance metrics": [[392, "distance-metrics"]], "Pairwise metrics": [[392, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[392, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[392, "module-sklearn.model_selection"]], "Splitter Classes": [[392, "splitter-classes"]], "Splitter Functions": [[392, "splitter-functions"]], "Hyper-parameter optimizers": [[392, "hyper-parameter-optimizers"]], "Model validation": [[392, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[392, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[392, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[392, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[392, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[392, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[392, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[392, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[392, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[392, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[392, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[392, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[392, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[392, "module-sklearn.utils"]], "Recently deprecated": [[392, "recently-deprecated"]], "To be removed in 1.3": [[392, "to-be-removed-in-1-3"]], "Input data": [[393, null]], "Overview of clustering methods": [[393, "overview-of-clustering-methods"]], "K-means": [[393, "k-means"]], "Low-level parallelism": [[393, "low-level-parallelism"], [400, "low-level-parallelism"]], "Mini Batch K-Means": [[393, "mini-batch-k-means"]], "Affinity Propagation": [[393, "affinity-propagation"]], "Mean Shift": [[393, "mean-shift"]], "Spectral clustering": [[393, "spectral-clustering"]], "Different label assignment strategies": [[393, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[393, "spectral-clustering-graphs"]], "Hierarchical clustering": [[393, "hierarchical-clustering"]], "FeatureAgglomeration": [[393, null]], "Different linkage type: Ward, complete, average, and single linkage": [[393, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[393, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[393, "adding-connectivity-constraints"]], "Varying the metric": [[393, "varying-the-metric"]], "Bisecting K-Means": [[393, "bisecting-k-means"]], "DBSCAN": [[393, "dbscan"]], "Implementation": [[393, null], [965, "implementation"]], "Memory consumption for large sample sizes": [[393, null]], "OPTICS": [[393, "optics"]], "Comparison with DBSCAN": [[393, null]], "Computational Complexity": [[393, null]], "BIRCH": [[393, "birch"]], "Clustering performance evaluation": [[393, "clustering-performance-evaluation"]], "Rand index": [[393, "rand-index"]], "Advantages": [[393, "advantages"], [393, "id10"], [393, "id17"], [393, "id21"], [393, "id24"], [393, "id27"], [393, "id31"], [393, "id35"]], "Drawbacks": [[393, "drawbacks"], [393, "id11"], [393, "id18"], [393, "id22"], [393, "id25"], [393, "id28"], [393, "id32"], [393, "id36"]], "Mutual Information based scores": [[393, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[393, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[393, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[393, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[393, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[393, "davies-bouldin-index"]], "Contingency Matrix": [[393, "contingency-matrix"]], "Pair Confusion Matrix": [[393, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[394, "pipeline-chaining-estimators"]], "Construction": [[394, "construction"]], "Accessing steps": [[394, "accessing-steps"]], "Nested parameters": [[394, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[394, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[394, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[394, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[394, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[394, "visualizing-composite-estimators"]], "Empirical covariance": [[395, "empirical-covariance"]], "Shrunk Covariance": [[395, "shrunk-covariance"]], "Basic shrinkage": [[395, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[395, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[395, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[395, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[395, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[395, "minimum-covariance-determinant"]], "PLSCanonical": [[396, "plscanonical"]], "Transforming data": [[396, "transforming-data"]], "Predicting the targets Y": [[396, "predicting-the-targets-y"]], "PLSSVD": [[396, "plssvd"]], "PLSRegression": [[396, "plsregression"]], "Canonical Correlation Analysis": [[396, "canonical-correlation-analysis"]], "Reference:": [[396, null]], "Cross-validation: evaluating estimator performance": [[397, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[397, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[397, null]], "The cross_validate function and multiple metric evaluation": [[397, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[397, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[397, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[397, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[397, "k-fold"]], "Repeated K-Fold": [[397, "repeated-k-fold"]], "Leave One Out (LOO)": [[397, "leave-one-out-loo"]], "Leave P Out (LPO)": [[397, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[397, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[397, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[397, "stratified-k-fold"]], "Stratified Shuffle Split": [[397, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[397, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[397, "group-k-fold"]], "StratifiedGroupKFold": [[397, "stratifiedgroupkfold"]], "Leave One Group Out": [[397, "leave-one-group-out"]], "Leave P Groups Out": [[397, "leave-p-groups-out"]], "Group Shuffle Split": [[397, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[397, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[397, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[397, "cross-validation-of-time-series-data"]], "Time Series Split": [[397, "time-series-split"]], "A note on shuffling": [[397, "a-note-on-shuffling"]], "Cross validation and model selection": [[397, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[398, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[398, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[398, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[398, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[398, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[398, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[398, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[398, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[398, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[398, "dictionary-learning"]], "Generic dictionary learning": [[398, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[398, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[398, null]], "Factor Analysis": [[398, "factor-analysis"]], "Independent component analysis (ICA)": [[398, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[398, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[398, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[398, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[398, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[398, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[399, "density-estimation"]], "Density Estimation: Histograms": [[399, "density-estimation-histograms"]], "Bagging meta-estimator": [[400, "bagging-meta-estimator"]], "Forests of randomized trees": [[400, "forests-of-randomized-trees"]], "Random Forests": [[400, "random-forests"]], "Extremely Randomized Trees": [[400, "extremely-randomized-trees"]], "Parallelization": [[400, "parallelization"]], "Feature importance evaluation": [[400, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[400, "totally-random-trees-embedding"]], "AdaBoost": [[400, "adaboost"]], "Gradient Tree Boosting": [[400, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[400, "fitting-additional-weak-learners"]], "Controlling the tree size": [[400, "controlling-the-tree-size"]], "Loss Functions": [[400, "loss-functions"]], "Shrinkage via learning rate": [[400, "shrinkage-via-learning-rate"]], "Subsampling": [[400, "subsampling"]], "Interpretation with feature importance": [[400, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[400, "histogram-based-gradient-boosting"]], "Missing values support": [[400, "missing-values-support"]], "Sample weight support": [[400, "sample-weight-support"]], "Categorical Features Support": [[400, "categorical-features-support"]], "Interaction constraints": [[400, "interaction-constraints"]], "Why it\u2019s faster": [[400, "why-it-s-faster"]], "Voting Classifier": [[400, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[400, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[400, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[400, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[400, "voting-regressor"]], "Stacked generalization": [[400, "stacked-generalization"]], "Feature extraction": [[401, "feature-extraction"]], "Loading features from dicts": [[401, "loading-features-from-dicts"]], "Feature hashing": [[401, "feature-hashing"]], "Implementation details": [[401, "implementation-details"], [976, "implementation-details"], [977, "implementation-details"]], "Text feature extraction": [[401, "text-feature-extraction"]], "The Bag of Words representation": [[401, "the-bag-of-words-representation"]], "Sparsity": [[401, "sparsity"], [995, "sparsity"]], "Common Vectorizer usage": [[401, "common-vectorizer-usage"]], "Using stop words": [[401, "using-stop-words"]], "Tf\u2013idf term weighting": [[401, "tfidf-term-weighting"]], "Decoding text files": [[401, "decoding-text-files"]], "Applications and examples": [[401, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[401, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[401, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[401, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[401, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[401, "image-feature-extraction"]], "Patch extraction": [[401, "patch-extraction"]], "Connectivity graph of an image": [[401, "connectivity-graph-of-an-image"]], "Feature selection": [[402, "feature-selection"]], "Removing features with low variance": [[402, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[402, null]], "Feature selection using SelectFromModel": [[402, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[402, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[402, "compressive-sensing"]], "Tree-based feature selection": [[402, "tree-based-feature-selection"]], "Sequential Feature Selection": [[402, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[402, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[403, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[403, "gaussian-process-regression-gpr"]], "GPR examples": [[403, "gpr-examples"]], "GPR with noise-level estimation": [[403, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[403, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[403, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[403, "gaussian-process-classification-gpc"]], "GPC examples": [[403, "gpc-examples"]], "Probabilistic predictions with GPC": [[403, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[403, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[403, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[403, "gaussian-process-kernel-api"]], "Basic kernels": [[403, "basic-kernels"]], "Kernel operators": [[403, "kernel-operators"]], "Radial basis function (RBF) kernel": [[403, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[403, "rational-quadratic-kernel"]], "Dot-Product kernel": [[403, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[404, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[405, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[406, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[407, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[407, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[408, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[409, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[410, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[411, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[412, "sklearn-base-densitymixin"]], "sklearn.base.OneToOneFeatureMixin": [[413, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[414, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[415, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[415, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[416, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[417, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[418, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[419, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[419, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[420, "sklearn-calibration-calibrationdisplay"]], "sklearn.calibration.calibration_curve": [[421, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[422, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[422, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[423, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[423, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[424, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[424, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[425, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[425, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[426, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[426, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[427, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[427, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.KMeans": [[428, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[428, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[429, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[429, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[430, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[430, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[431, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[431, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[432, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[432, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[433, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[433, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[434, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[434, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[435, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[435, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[436, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[436, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[437, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[438, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[439, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[439, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[440, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[441, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[441, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[442, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[443, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[443, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[444, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[445, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[445, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[446, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[446, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[447, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[447, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[448, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[448, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[449, "sklearn-config-context"]], "Examples using sklearn.config_context": [[449, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[450, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[450, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[451, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[451, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[452, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[453, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[453, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[454, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[454, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[455, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[455, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[456, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[456, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[457, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[457, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[458, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[458, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[459, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[460, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[460, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[461, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[462, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[463, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[463, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[464, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[464, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[465, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[465, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[466, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[467, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[468, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[468, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[469, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[469, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[470, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[470, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[471, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[471, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[472, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[472, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[473, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[473, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[474, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[475, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[475, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[476, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[476, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[477, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[477, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[478, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[479, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[479, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[480, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[480, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[481, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[481, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[482, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[482, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[483, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[483, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[484, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[485, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[485, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[486, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[487, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[487, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[488, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[489, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[490, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[491, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[491, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[492, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[492, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[493, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[493, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[494, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[494, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[495, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[495, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[496, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[496, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[497, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[498, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[499, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[500, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[500, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[501, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[501, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[502, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[503, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[503, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[504, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[504, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[505, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[505, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[506, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[506, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[507, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[507, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[508, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[508, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[509, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[510, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[511, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[511, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[512, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[513, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[513, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[514, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[514, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[515, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[515, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[516, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[516, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[517, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[517, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[518, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[518, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[519, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[519, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[520, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[520, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[521, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[521, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[522, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[522, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[523, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[523, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[524, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[525, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[525, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[526, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[527, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[528, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[529, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[530, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[530, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[531, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[531, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[532, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[532, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[533, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[533, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[534, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[534, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[535, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[535, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[536, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[537, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[537, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[538, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[538, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[539, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[539, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[540, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[540, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[541, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[541, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[542, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[542, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[543, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[543, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[544, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[544, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[545, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[545, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[546, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[546, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[547, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[547, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[548, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[548, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[549, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[549, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[550, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[550, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[551, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[551, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[552, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[552, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[553, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[554, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[555, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[556, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[557, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[558, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[559, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[560, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[561, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[562, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[562, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[563, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[563, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[564, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[565, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[565, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[566, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[567, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[568, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[568, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[569, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[569, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[570, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[570, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[571, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[571, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[572, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[572, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[573, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[574, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[574, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[575, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[575, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[576, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[577, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[578, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[578, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[579, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[580, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[580, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[581, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[581, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[582, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[583, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[583, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[584, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[585, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[585, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[586, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[586, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[587, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[587, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[588, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[588, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[589, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[589, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[590, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[591, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[591, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[592, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[592, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[593, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[594, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[594, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[595, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[595, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[596, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[596, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[597, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[598, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[598, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[599, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[599, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[600, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[600, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[601, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[602, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[603, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[603, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[604, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[604, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[605, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[606, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[606, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[607, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[608, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[608, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[609, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[609, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[610, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[611, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[611, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[612, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[612, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[613, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[613, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.inspection.partial_dependence": [[614, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[614, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[615, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[615, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[616, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[616, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[617, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[618, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[619, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[620, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[620, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[621, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[621, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[622, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[622, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[623, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[624, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[624, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[625, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[625, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[626, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[626, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[627, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[627, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[628, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[629, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[629, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[630, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[630, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[631, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[632, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[633, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[633, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[634, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[634, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[635, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[636, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[636, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[637, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[637, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[638, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[638, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[639, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[639, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[640, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[640, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[641, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[642, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[643, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[643, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[644, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[645, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[645, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[646, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[646, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[647, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[647, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[648, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[649, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[649, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[650, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[650, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[651, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[651, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[652, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[652, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[653, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[653, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[654, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[654, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[655, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[655, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[656, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[657, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[657, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[658, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[658, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[659, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[659, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[660, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[660, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[661, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[661, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[662, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[662, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[663, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[663, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[664, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[665, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[665, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[666, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[667, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[668, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[669, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[669, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[670, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[670, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[671, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[671, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[672, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[672, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[673, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[673, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[674, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[674, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[675, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[676, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[677, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[678, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[678, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.DetCurveDisplay": [[679, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.DistanceMetric": [[680, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[681, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[681, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.PredictionErrorDisplay": [[682, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[682, "examples-using-sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.RocCurveDisplay": [[683, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[683, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.accuracy_score": [[684, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[684, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[685, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[685, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[686, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[686, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[687, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[687, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[688, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[688, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[689, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[690, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[690, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[691, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[692, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[693, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[693, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[694, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[694, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[695, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[696, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[697, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[698, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[698, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[699, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[699, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[700, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[700, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[701, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[702, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[703, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[704, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[705, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[706, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[707, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[707, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[708, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[709, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[709, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[710, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[711, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[712, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[713, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[714, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[714, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[715, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[716, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[717, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[717, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[718, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[718, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[719, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[720, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[721, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[721, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[722, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[722, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[723, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[724, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[725, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[725, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[726, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[727, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[728, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[728, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[729, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[729, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[730, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[730, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[731, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[732, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[732, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[733, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[733, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[734, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[735, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[735, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[736, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[737, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[737, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[738, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[739, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[740, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[741, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[742, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[743, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[744, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[745, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[746, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[747, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[748, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[749, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[750, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[751, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[752, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[753, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[754, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[755, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[756, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[757, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[758, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[758, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[759, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[759, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[760, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[761, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[762, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[762, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[763, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[764, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[764, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[765, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[765, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[766, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[766, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[767, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[767, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[768, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[768, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[769, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[769, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[770, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[770, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[771, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[771, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[772, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[773, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[773, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[774, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[774, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[775, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[775, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[776, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[776, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[777, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[777, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[778, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[778, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[779, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[779, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[780, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[780, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[781, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[781, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[782, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[782, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[783, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[783, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "sklearn.model_selection.LeaveOneGroupOut": [[784, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[785, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[786, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[787, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[788, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[789, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[790, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[791, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[791, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[792, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[792, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[793, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[793, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[794, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[794, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[795, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[795, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[796, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[796, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[797, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[797, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[798, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[798, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.check_cv": [[799, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[800, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[800, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[801, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[801, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[802, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[802, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[803, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[803, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[804, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[804, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[805, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[805, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[806, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[806, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[807, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[808, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[808, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[809, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[810, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[810, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[811, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[812, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[812, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[813, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[814, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[814, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[815, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[816, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[816, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[817, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[817, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[818, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[818, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[819, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[820, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[821, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[821, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[822, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[822, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[823, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[823, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[824, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[824, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[825, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[825, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[826, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[826, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[827, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[827, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[828, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[828, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[829, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[830, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[831, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[832, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[832, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[833, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[834, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[835, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[835, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[836, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[836, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[837, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[837, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[838, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[838, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[839, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[839, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[840, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[840, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[841, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[842, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[843, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[843, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[844, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[844, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[845, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[846, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[846, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[847, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[848, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[848, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[849, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[849, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[850, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[851, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[851, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[852, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[852, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[853, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[853, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[854, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[854, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[855, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[855, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[856, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[856, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[857, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[857, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[858, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[858, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[859, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[859, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.add_dummy_feature": [[860, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[861, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[862, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[862, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[863, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[864, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[864, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[865, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[866, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[867, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[867, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[868, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[869, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[870, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[871, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[871, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[872, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[872, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[873, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[874, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[874, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[875, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[875, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[876, "sklearn-set-config"]], "Examples using sklearn.set_config": [[876, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[877, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[878, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[878, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[879, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[880, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[880, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[881, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[881, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[882, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[882, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[883, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[883, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[884, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[884, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[885, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[885, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[886, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[886, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[887, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[887, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[888, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[889, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[890, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[891, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[892, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[892, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[893, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[893, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[894, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[895, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[896, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[897, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[898, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[899, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[900, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[901, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[901, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[902, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[903, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[904, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[905, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[906, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[907, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[908, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[909, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[910, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[910, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[911, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[912, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[912, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[913, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[914, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[915, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[916, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[917, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[918, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[919, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[919, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[920, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[921, "sklearn-utils-indexable"]], "sklearn.utils.metaestimators.available_if": [[922, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[922, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.metaestimators.if_delegate_has_method": [[923, "sklearn-utils-metaestimators-if-delegate-has-method"]], "sklearn.utils.multiclass.is_multilabel": [[924, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[925, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[926, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[927, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[928, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[929, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[930, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[931, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[932, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[933, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[934, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[935, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[936, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[936, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[937, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[938, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[939, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[940, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[941, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[942, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[943, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[944, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[945, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[946, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[946, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[947, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[948, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[949, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[950, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[951, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[951, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[951, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[951, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[951, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[951, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[951, "choosing-a-resource"]], "Exhausting the available resources": [[951, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[951, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[951, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[951, "tips-for-parameter-search"]], "Specifying an objective metric": [[951, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[951, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[951, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[951, "model-selection-development-and-evaluation"]], "Robustness to failure": [[951, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[951, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[951, "model-specific-cross-validation"]], "Information Criterion": [[951, "information-criterion"]], "Out of Bag Estimates": [[951, "out-of-bag-estimates"]], "Imputation of missing values": [[952, "imputation-of-missing-values"], [972, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[952, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[952, "univariate-feature-imputation"]], "Multivariate feature imputation": [[952, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[952, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[952, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[952, "nearest-neighbors-imputation"]], "Keeping the number of features constants": [[952, "keeping-the-number-of-features-constants"]], "Marking imputed values": [[952, "marking-imputed-values"]], "Estimators that handle NaN values": [[952, "estimators-that-handle-nan-values"]], "Isotonic regression": [[953, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[954, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[954, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[954, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[954, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[954, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[954, "mathematical-details"]], "Kernel ridge regression": [[955, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[956, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[956, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[956, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[956, "qda"]], "LDA": [[956, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[956, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[956, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[956, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[957, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[957, "validation-curve"]], "Learning curve": [[957, "learning-curve"]], "Linear Models": [[958, "linear-models"]], "Ordinary Least Squares": [[958, "ordinary-least-squares"]], "Non-Negative Least Squares": [[958, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[958, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[958, "ridge-regression-and-classification"]], "Ridge Complexity": [[958, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[958, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[958, "setting-regularization-parameter"]], "Using cross-validation": [[958, "using-cross-validation"]], "Information-criteria based model selection": [[958, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[958, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[958, "multi-task-lasso"]], "Elastic-Net": [[958, "elastic-net"]], "Multi-task Elastic-Net": [[958, "multi-task-elastic-net"]], "Least Angle Regression": [[958, "least-angle-regression"]], "LARS Lasso": [[958, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[958, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[958, "bayesian-regression"]], "Bayesian Ridge Regression": [[958, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[958, "automatic-relevance-determination-ard"]], "Logistic regression": [[958, "logistic-regression"]], "Binary Case": [[958, "binary-case"]], "Multinomial Case": [[958, "multinomial-case"]], "Solvers": [[958, "solvers"]], "Differences from liblinear:": [[958, "liblinear-differences"]], "Practical considerations": [[958, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[958, "stochastic-gradient-descent-sgd"]], "Perceptron": [[958, "perceptron"]], "Passive Aggressive Algorithms": [[958, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[958, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[958, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[958, null]], "RANSAC: RANdom SAmple Consensus": [[958, "ransac-random-sample-consensus"]], "Details of the algorithm": [[958, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[958, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[958, "theoretical-considerations"]], "Huber Regression": [[958, "huber-regression"]], "Quantile Regression": [[958, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[958, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[959, "introduction"]], "Isomap": [[959, "isomap"]], "Complexity": [[959, "complexity"], [959, "id3"], [959, "id4"], [959, "id5"], [959, "id7"], [959, "id8"], [965, "complexity"], [966, "complexity"], [976, "complexity"], [977, "complexity"], [978, "complexity"]], "Locally Linear Embedding": [[959, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[959, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[959, "hessian-eigenmapping"]], "Spectral Embedding": [[959, "spectral-embedding"]], "Local Tangent Space Alignment": [[959, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[959, "multi-dimensional-scaling-mds"]], "Metric MDS": [[959, "metric-mds"]], "Nonmetric MDS": [[959, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[959, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[959, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[959, "barnes-hut-t-sne"]], "Tips on practical use": [[959, "tips-on-practical-use"], [978, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[960, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[960, "cosine-similarity"]], "Linear kernel": [[960, "linear-kernel"], [995, "linear-kernel"]], "Polynomial kernel": [[960, "polynomial-kernel"], [995, "polynomial-kernel"]], "Sigmoid kernel": [[960, "sigmoid-kernel"]], "RBF kernel": [[960, "rbf-kernel"]], "Laplacian kernel": [[960, "laplacian-kernel"]], "Chi-squared kernel": [[960, "chi-squared-kernel"]], "Gaussian mixture models": [[961, "gaussian-mixture-models"]], "Gaussian Mixture": [[961, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[961, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[961, "pros"], [961, "id2"]], "Cons": [[961, "cons"], [961, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[961, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[961, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[961, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[961, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[961, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[961, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[961, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[962, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[962, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[962, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[962, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[962, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[962, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[962, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[962, "accuracy-score"]], "Example:": [[962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [962, null], [974, null], [995, null]], "Top-k accuracy score": [[962, "top-k-accuracy-score"]], "Balanced accuracy score": [[962, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[962, "cohen-s-kappa"]], "Classification report": [[962, "classification-report"]], "Hamming loss": [[962, "hamming-loss"]], "Precision, recall and F-measures": [[962, "precision-recall-and-f-measures"]], "Binary classification": [[962, "binary-classification"]], "Multiclass and multilabel classification": [[962, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[962, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[962, "hinge-loss"]], "Log loss": [[962, "log-loss"]], "Matthews correlation coefficient": [[962, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[962, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[962, "receiver-operating-characteristic-roc"]], "Binary case": [[962, "binary-case"]], "Multi-class case": [[962, "multi-class-case"]], "Multi-label case": [[962, "multi-label-case"]], "Detection error tradeoff (DET)": [[962, "detection-error-tradeoff-det"]], "Zero one loss": [[962, "zero-one-loss"]], "Brier score loss": [[962, "brier-score-loss"]], "Class likelihood ratios": [[962, "class-likelihood-ratios"]], "Coverage error": [[962, "coverage-error"]], "Label ranking average precision": [[962, "label-ranking-average-precision"]], "Ranking loss": [[962, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[962, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[962, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[962, "mean-absolute-error"]], "Mean squared error": [[962, "mean-squared-error"]], "Mean squared logarithmic error": [[962, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[962, "mean-absolute-percentage-error"]], "Median absolute error": [[962, "median-absolute-error"]], "Max error": [[962, "max-error"]], "Explained variance score": [[962, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[962, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[962, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[962, "pinball-loss"]], "D\u00b2 score": [[962, "d2-score"]], "D\u00b2 Tweedie score": [[962, "d2-tweedie-score"]], "D\u00b2 pinball score": [[962, "d2-pinball-score"]], "D\u00b2 absolute error score": [[962, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[962, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[962, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[963, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[963, "multiclass-classification"], [995, null]], "Target format": [[963, "target-format"], [963, "id5"], [963, "id8"], [963, "id10"]], "OneVsRestClassifier": [[963, "onevsrestclassifier"]], "OneVsOneClassifier": [[963, "onevsoneclassifier"]], "OutputCodeClassifier": [[963, "outputcodeclassifier"]], "MultiOutputClassifier": [[963, "multioutputclassifier"]], "ClassifierChain": [[963, "classifierchain"]], "Multiclass-multioutput classification": [[963, "multiclass-multioutput-classification"]], "Multioutput regression": [[963, "multioutput-regression"]], "MultiOutputRegressor": [[963, "multioutputregressor"]], "RegressorChain": [[963, "regressorchain"]], "Naive Bayes": [[964, "naive-bayes"]], "Multinomial Naive Bayes": [[964, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[964, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[964, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[964, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[964, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[965, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[965, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[965, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[965, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[965, "nearest-neighbor-algorithms"]], "Brute Force": [[965, "brute-force"]], "K-D Tree": [[965, "k-d-tree"]], "Ball Tree": [[965, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[965, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[965, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[965, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[965, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[965, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[965, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[965, "neighborhood-components-analysis"]], "Dimensionality reduction": [[965, "dimensionality-reduction"]], "Mahalanobis distance": [[965, "mahalanobis-distance"]], "Transform": [[965, "transform"]], "Neural network models (supervised)": [[966, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[966, "multi-layer-perceptron"]], "Regularization": [[966, "regularization"]], "Algorithms": [[966, "algorithms"]], "Tips on Practical Use": [[966, "tips-on-practical-use"], [976, "tips-on-practical-use"], [977, "tips-on-practical-use"]], "More control with warm_start": [[966, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[967, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[967, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[967, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[967, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[967, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[968, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[968, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[968, "novelty-detection"]], "Scaling up the One-Class SVM": [[968, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[968, "id1"]], "Fitting an elliptic envelope": [[968, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[968, "isolation-forest"]], "Local Outlier Factor": [[968, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[968, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[969, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[969, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[969, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[969, "mathematical-definition"]], "Computation methods": [[969, "computation-methods"]], "Permutation feature importance": [[970, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[970, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[970, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[970, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[972, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[972, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[972, "scaling-features-to-a-range"]], "Scaling sparse data": [[972, "scaling-sparse-data"]], "Scaling data with outliers": [[972, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[972, null]], "Centering kernel matrices": [[972, "centering-kernel-matrices"]], "Non-linear transformation": [[972, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[972, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[972, "mapping-to-a-gaussian-distribution"]], "Normalization": [[972, "normalization"]], "Sparse input": [[972, null], [972, null]], "Encoding categorical features": [[972, "encoding-categorical-features"]], "Infrequent categories": [[972, "infrequent-categories"]], "Discretization": [[972, "discretization"]], "K-bins discretization": [[972, "k-bins-discretization"]], "Feature binarization": [[972, "feature-binarization"]], "Generating polynomial features": [[972, "generating-polynomial-features"]], "Polynomial features": [[972, "polynomial-features"]], "Spline transformer": [[972, "spline-transformer"]], "Custom transformers": [[972, "custom-transformers"]], "Transforming the prediction target (y)": [[973, "transforming-the-prediction-target-y"]], "Label binarization": [[973, "label-binarization"]], "LabelBinarizer": [[973, "labelbinarizer"]], "MultiLabelBinarizer": [[973, "multilabelbinarizer"]], "Label encoding": [[973, "label-encoding"]], "Random Projection": [[974, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[974, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[974, "gaussian-random-projection"]], "Sparse random projection": [[974, "sparse-random-projection"]], "Inverse Transform": [[974, "inverse-transform"]], "Unlabeled entries in y": [[975, null]], "Self Training": [[975, "self-training"]], "Label Propagation": [[975, "label-propagation"]], "Stochastic Gradient Descent": [[976, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[976, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[976, "stopping-criterion"]], "SGD": [[976, "id5"]], "Multi-class classification": [[977, "multi-class-classification"]], "Scores and probabilities": [[977, "scores-and-probabilities"]], "Unbalanced problems": [[977, "unbalanced-problems"]], "Density estimation, novelty detection": [[977, "density-estimation-novelty-detection"]], "Kernel functions": [[977, "kernel-functions"]], "Parameters of the RBF Kernel": [[977, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[977, "custom-kernels"]], "Using Python functions as kernels": [[977, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[977, "using-the-gram-matrix"]], "SVC": [[977, "svc"]], "LinearSVC": [[977, "linearsvc"]], "NuSVC": [[977, "nusvc"]], "SVR": [[977, "svr"]], "LinearSVR": [[977, "linearsvr"]], "Multi-output problems": [[978, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[978, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[978, "classification-criteria"]], "Regression criteria": [[978, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[978, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[979, "unsupervised-dimensionality-reduction"]], "Pipelining": [[979, null], [993, "pipelining"]], "PCA: principal component analysis": [[979, "pca-principal-component-analysis"]], "Random projections": [[979, "random-projections"]], "Feature scaling": [[979, null]], "Welcome to scikit-learn": [[980, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[981, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[981, "new-to-scientific-python"]], "External Tutorials": [[981, "external-tutorials"]], "Videos": [[981, "videos"]], "Related Projects": [[982, "related-projects"]], "Interoperability and framework enhancements": [[982, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[982, "other-estimators-and-tasks"]], "Statistical learning with Python": [[982, "statistical-learning-with-python"]], "Recommendation Engine packages": [[982, "recommendation-engine-packages"]], "Domain specific packages": [[982, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[982, "translations-of-scikit-learn-documentation"]], "Roadmap": [[983, "id1"]], "Purpose of this document": [[983, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[983, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[983, "architectural-general-goals"]], "Subpackage-specific goals": [[983, "subpackage-specific-goals"]], "Supervised learning": [[984, "supervised-learning"]], "Support": [[985, "support"]], "Mailing List": [[985, "mailing-list"]], "User questions": [[985, "user-questions"]], "Bug tracker": [[985, "bug-tracker"]], "Gitter": [[985, "gitter"]], "Documentation resources": [[985, "documentation-resources"]], "Who is using scikit-learn?": [[986, "who-is-using-scikit-learn"]], "J.P.Morgan": [[986, "id1"]], "Spotify": [[986, "id2"]], "Inria": [[986, "id3"]], "betaworks": [[986, "id4"]], "Hugging Face": [[986, "id5"]], "Evernote": [[986, "id6"]], "T\u00e9l\u00e9com ParisTech": [[986, "id7"]], "Booking.com": [[986, "id8"]], "AWeber": [[986, "id9"]], "Yhat": [[986, "id10"]], "Rangespan": [[986, "id11"]], "Birchbox": [[986, "id12"]], "Bestofmedia Group": [[986, "id13"]], "Change.org": [[986, "id14"]], "PHIMECA Engineering": [[986, "id15"]], "HowAboutWe": [[986, "id16"]], "PeerIndex": [[986, "id17"]], "DataRobot": [[986, "id18"]], "OkCupid": [[986, "id19"]], "Lovely": [[986, "id20"]], "Data Publica": [[986, "id21"]], "Machinalis": [[986, "id22"]], "solido": [[986, "id23"]], "INFONEA": [[986, "id24"]], "Dataiku": [[986, "id25"]], "Otto Group": [[986, "id26"]], "Zopa": [[986, "id27"]], "MARS": [[986, "id28"]], "BNP Paribas Cardif": [[986, "id29"]], "An introduction to machine learning with scikit-learn": [[988, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[988, null]], "Machine learning: the problem setting": [[988, "machine-learning-the-problem-setting"]], "Training set and testing set": [[988, null], [995, null]], "Loading an example dataset": [[988, "loading-an-example-dataset"]], "Shape of the data arrays": [[988, null]], "Learning and predicting": [[988, "learning-and-predicting"]], "Choosing the parameters of the model": [[988, null]], "Conventions": [[988, "conventions"]], "Type casting": [[988, "type-casting"]], "Refitting and updating parameters": [[988, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[988, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[989, "scikit-learn-tutorials"]], "Choosing the right estimator": [[990, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[991, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[991, null]], "Model selection: choosing estimators and their parameters": [[992, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[992, "score-and-cross-validated-scores"]], "Cross-validation generators": [[992, "cross-validation-generators"]], "Exercise": [[992, null], [992, null], [995, null], [995, null]], "Grid-search and cross-validated estimators": [[992, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[992, "grid-search"]], "Nested cross-validation": [[992, null]], "Cross-validated estimators": [[992, "cross-validated-estimators"]], "Putting it all together": [[993, "putting-it-all-together"]], "Face recognition with eigenfaces": [[993, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[993, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[994, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[994, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[994, null]], "An example of reshaping data would be the digits dataset": [[994, null]], "Estimators objects": [[994, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[995, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[995, null]], "Vocabulary: classification and regression": [[995, null]], "Nearest neighbor and the curse of dimensionality": [[995, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[995, null]], "k-Nearest neighbors classifier": [[995, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[995, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[995, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[995, "linear-regression"]], "Shrinkage": [[995, "shrinkage"]], "Different algorithms for the same problem": [[995, null]], "Shrinkage and sparsity with logistic regression": [[995, null]], "Support vector machines (SVMs)": [[995, "support-vector-machines-svms"]], "Linear SVMs": [[995, "linear-svms"]], "Using kernels": [[995, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[995, "rbf-kernel-radial-basis-function"]], "Interactive example": [[995, null]], "Unsupervised learning: seeking representations of the data": [[996, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[996, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[996, null]], "K-means clustering": [[996, "k-means-clustering"]], "Application example: vector quantization": [[996, null]], "Hierarchical agglomerative clustering: Ward": [[996, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[996, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[996, null]], "Decompositions: from a signal to components and loadings": [[996, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[996, null]], "Principal component analysis: PCA": [[996, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[996, "independent-component-analysis-ica"]], "Working With Text Data": [[997, "working-with-text-data"]], "Tutorial setup": [[997, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[997, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[997, "extracting-features-from-text-files"]], "Bags of words": [[997, "bags-of-words"]], "Tokenizing text with scikit-learn": [[997, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[997, "from-occurrences-to-frequencies"]], "Training a classifier": [[997, "training-a-classifier"]], "Building a pipeline": [[997, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[997, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[997, "parameter-tuning-using-grid-search"]], "Exercises": [[997, "exercises"]], "Exercise 1: Language identification": [[997, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[997, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[997, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[997, "where-to-from-here"]], "Unsupervised learning": [[998, "unsupervised-learning"]], "User Guide": [[999, "user-guide"]], "Available documentation for Scikit-learn": [[1000, "available-documentation-for-scikit-learn"]], "Visualizations": [[1001, "visualizations"]], "Available Plotting Utilities": [[1001, "available-plotting-utilities"]], "Display Objects": [[1001, "display-objects"]], "Release History": [[1002, "release-history"]], "Version 0.12.1": [[1004, "version-0-12-1"]], "Changelog": [[1004, "changelog"], [1004, "id1"], [1004, "id3"], [1004, "id6"], [1004, "id9"], [1004, "id12"], [1004, "id14"], [1004, "id16"], [1004, "id18"], [1004, "id19"], [1005, "changelog"], [1005, "id1"], [1006, "changelog"], [1007, "changelog"], [1008, "changelog"], [1008, "id1"], [1009, "changelog"], [1009, "id1"], [1010, "changelog"], [1010, "id1"], [1010, "id2"], [1011, "changelog"], [1011, "id1"], [1012, "changelog"], [1012, "id1"], [1012, "id5"], [1012, "id10"], [1012, "id23"], [1013, "changelog"], [1013, "id1"], [1013, "id2"], [1013, "id7"], [1014, "changelog"], [1014, "id1"], [1014, "id4"], [1015, "changelog"], [1015, "id1"], [1015, "id4"], [1016, "changelog"], [1016, "id1"], [1016, "id4"], [1017, "changelog"], [1017, "id1"], [1017, "id7"], [1018, "changelog"], [1018, "id1"], [1018, "id7"], [1019, "changelog"], [1019, "id1"], [1019, "id9"], [1020, "changelog"]], "People": [[1004, "people"], [1004, "id2"], [1004, "id5"], [1004, "id8"], [1004, "id11"], [1004, "id13"], [1004, "id15"], [1004, "id17"], [1005, "people"], [1005, "id2"], [1006, "people"], [1007, "people"]], "Version 0.12": [[1004, "version-0-12"]], "API changes summary": [[1004, "api-changes-summary"], [1004, "id4"], [1004, "id7"], [1004, "id10"], [1005, "api-changes-summary"], [1006, "api-changes-summary"], [1007, "api-changes-summary"], [1008, "api-changes-summary"], [1009, "api-changes-summary"], [1010, "api-changes-summary"], [1010, "id5"], [1011, "api-changes-summary"]], "Version 0.11": [[1004, "version-0-11"]], "Highlights": [[1004, "highlights"], [1007, "highlights"], [1008, "highlights"], [1011, "highlights"], [1012, "highlights"]], "Other changes": [[1004, "other-changes"]], "Version 0.10": [[1004, "version-0-10"]], "Version 0.9": [[1004, "version-0-9"]], "Version 0.8": [[1004, "version-0-8"]], "Version 0.7": [[1004, "version-0-7"]], "Version 0.6": [[1004, "version-0-6"]], "Version 0.5": [[1004, "version-0-5"]], "New classes": [[1004, "new-classes"]], "Fixes": [[1004, "fixes"]], "External dependencies": [[1004, "external-dependencies"]], "Removed modules": [[1004, "removed-modules"]], "Misc": [[1004, "misc"]], "Version 0.4": [[1004, "version-0-4"]], "Earlier versions": [[1004, "earlier-versions"]], "Version 0.13.1": [[1005, "version-0-13-1"]], "Version 0.13": [[1005, "version-0-13"]], "New Estimator Classes": [[1005, "new-estimator-classes"]], "Version 0.14": [[1006, "version-0-14"]], "Version 0.15.2": [[1007, "version-0-15-2"]], "Bug fixes": [[1007, "bug-fixes"], [1007, "id1"], [1007, "id2"], [1008, "bug-fixes"], [1008, "id2"], [1009, "bug-fixes"], [1009, "id2"], [1010, "bug-fixes"], [1010, "id4"], [1011, "bug-fixes"], [1011, "id3"]], "Version 0.15.1": [[1007, "version-0-15-1"]], "Version 0.15": [[1007, "version-0-15"]], "New features": [[1007, "new-features"], [1008, "new-features"], [1009, "new-features"], [1010, "new-features"], [1011, "new-features"]], "Enhancements": [[1007, "enhancements"], [1008, "enhancements"], [1009, "enhancements"], [1010, "enhancements"], [1010, "id3"], [1011, "enhancements"], [1011, "id2"]], "Documentation improvements": [[1007, "documentation-improvements"], [1008, "documentation-improvements"]], "Version 0.16.1": [[1008, "version-0-16-1"]], "Version 0.16": [[1008, "version-0-16"]], "Code Contributors": [[1008, "code-contributors"], [1009, "code-contributors"], [1010, "code-contributors"], [1010, "id6"]], "Version 0.17.1": [[1009, "version-0-17-1"]], "Version 0.17": [[1009, "version-0-17"]], "Version 0.18.2": [[1010, "version-0-18-2"]], "Last release with Python 2.6 support": [[1010, null], [1010, null]], "Version 0.18.1": [[1010, "version-0-18-1"]], "Version 0.18": [[1010, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1010, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1011, "version-0-19-2"]], "Related changes": [[1011, "related-changes"]], "Version 0.19.1": [[1011, "version-0-19-1"]], "API changes": [[1011, "api-changes"]], "Code and Documentation Contributors": [[1011, "code-and-documentation-contributors"], [1011, "id9"], [1012, "code-and-documentation-contributors"], [1012, "id8"], [1012, "id21"], [1012, "id41"], [1013, "code-and-documentation-contributors"], [1014, "code-and-documentation-contributors"], [1015, "code-and-documentation-contributors"], [1016, "code-and-documentation-contributors"], [1017, "code-and-documentation-contributors"], [1018, "code-and-documentation-contributors"], [1019, "code-and-documentation-contributors"], [1020, "code-and-documentation-contributors"]], "Version 0.19": [[1011, "version-0-19"]], "Changed models": [[1011, "changed-models"], [1012, "changed-models"], [1012, "id9"], [1012, "id22"], [1013, "changed-models"], [1013, "id6"], [1014, "changed-models"], [1015, "changed-models"], [1015, "id3"], [1016, "changed-models"], [1017, "changed-models"], [1018, "changed-models"], [1018, "id6"], [1019, "changed-models"], [1019, "id7"], [1020, "changed-models"]], "Version 0.20.4": [[1012, "version-0-20-4"]], "sklearn.cluster": [[1012, "sklearn-cluster"], [1012, "id2"], [1012, "id11"], [1012, "id24"], [1013, "sklearn-cluster"], [1013, "id8"], [1014, "sklearn-cluster"], [1014, "id5"], [1015, "sklearn-cluster"], [1015, "id2"], [1015, "id5"], [1016, "sklearn-cluster"], [1017, "sklearn-cluster"], [1017, "id2"], [1017, "id9"], [1018, "sklearn-cluster"], [1018, "id8"], [1019, "sklearn-cluster"], [1019, "id12"], [1020, "sklearn-cluster"]], "sklearn.compose": [[1012, "sklearn-compose"], [1012, "id3"], [1012, "id6"], [1012, "id12"], [1012, "id25"], [1013, "sklearn-compose"], [1013, "id9"], [1014, "sklearn-compose"], [1015, "sklearn-compose"], [1016, "sklearn-compose"], [1016, "id5"], [1017, "sklearn-compose"], [1018, "sklearn-compose"], [1019, "sklearn-compose"]], "sklearn.decomposition": [[1012, "sklearn-decomposition"], [1012, "id4"], [1012, "id14"], [1012, "id28"], [1013, "sklearn-decomposition"], [1013, "id11"], [1014, "sklearn-decomposition"], [1015, "sklearn-decomposition"], [1015, "id6"], [1016, "sklearn-decomposition"], [1016, "id7"], [1017, "sklearn-decomposition"], [1017, "id11"], [1018, "sklearn-decomposition"], [1018, "id10"], [1019, "sklearn-decomposition"], [1019, "id14"], [1020, "sklearn-decomposition"]], "sklearn.model_selection": [[1012, "sklearn-model-selection"], [1012, "id35"], [1013, "sklearn-model-selection"], [1014, "sklearn-model-selection"], [1014, "id9"], [1014, "id13"], [1015, "sklearn-model-selection"], [1016, "sklearn-model-selection"], [1016, "id12"], [1017, "sklearn-model-selection"], [1018, "sklearn-model-selection"], [1019, "sklearn-model-selection"], [1019, "id20"], [1020, "sklearn-model-selection"]], "sklearn.neighbors": [[1012, "sklearn-neighbors"], [1012, "id7"], [1012, "id18"], [1012, "id36"], [1013, "sklearn-neighbors"], [1013, "id5"], [1013, "id17"], [1014, "sklearn-neighbors"], [1014, "id11"], [1016, "sklearn-neighbors"], [1017, "sklearn-neighbors"], [1017, "id5"], [1017, "id18"], [1018, "sklearn-neighbors"], [1019, "sklearn-neighbors"], [1020, "sklearn-neighbors"]], "Version 0.20.3": [[1012, "version-0-20-3"]], "sklearn.covariance": [[1012, "sklearn-covariance"], [1012, "id26"], [1016, "sklearn-covariance"], [1017, "sklearn-covariance"], [1018, "sklearn-covariance"]], "sklearn.datasets": [[1012, "sklearn-datasets"], [1012, "id13"], [1012, "id27"], [1013, "sklearn-datasets"], [1013, "id10"], [1014, "sklearn-datasets"], [1015, "sklearn-datasets"], [1016, "sklearn-datasets"], [1017, "sklearn-datasets"], [1017, "id10"], [1018, "sklearn-datasets"], [1018, "id9"], [1019, "sklearn-datasets"], [1019, "id13"], [1020, "sklearn-datasets"]], "sklearn.feature_extraction": [[1012, "sklearn-feature-extraction"], [1012, "id15"], [1012, "id30"], [1013, "sklearn-feature-extraction"], [1014, "sklearn-feature-extraction"], [1015, "sklearn-feature-extraction"], [1015, "id8"], [1016, "sklearn-feature-extraction"], [1017, "sklearn-feature-extraction"], [1017, "id13"], [1018, "sklearn-feature-extraction"], [1019, "sklearn-feature-extraction"], [1020, "sklearn-feature-extraction"]], "sklearn.impute": [[1012, "sklearn-impute"], [1012, "id31"], [1013, "sklearn-impute"], [1013, "id13"], [1014, "sklearn-impute"], [1014, "id6"], [1015, "sklearn-impute"], [1016, "sklearn-impute"], [1017, "sklearn-impute"], [1018, "sklearn-impute"], [1018, "id12"], [1019, "sklearn-impute"], [1020, "sklearn-impute"]], "sklearn.linear_model": [[1012, "sklearn-linear-model"], [1012, "id16"], [1012, "id32"], [1013, "sklearn-linear-model"], [1013, "id15"], [1014, "sklearn-linear-model"], [1015, "sklearn-linear-model"], [1015, "id9"], [1016, "sklearn-linear-model"], [1016, "id10"], [1017, "sklearn-linear-model"], [1017, "id4"], [1017, "id15"], [1018, "sklearn-linear-model"], [1018, "id13"], [1019, "sklearn-linear-model"], [1019, "id18"], [1020, "sklearn-linear-model"]], "sklearn.preprocessing": [[1012, "sklearn-preprocessing"], [1012, "id19"], [1012, "id37"], [1013, "sklearn-preprocessing"], [1013, "id18"], [1014, "sklearn-preprocessing"], [1014, "id12"], [1015, "sklearn-preprocessing"], [1016, "sklearn-preprocessing"], [1016, "id14"], [1017, "sklearn-preprocessing"], [1017, "id20"], [1018, "sklearn-preprocessing"], [1018, "id4"], [1018, "id16"], [1019, "sklearn-preprocessing"], [1019, "id4"], [1019, "id22"], [1020, "sklearn-preprocessing"]], "sklearn.svm": [[1012, "sklearn-svm"], [1012, "id38"], [1013, "sklearn-svm"], [1014, "sklearn-svm"], [1015, "sklearn-svm"], [1016, "sklearn-svm"], [1017, "sklearn-svm"], [1017, "id21"], [1018, "sklearn-svm"], [1019, "sklearn-svm"]], "Version 0.20.2": [[1012, "version-0-20-2"]], "sklearn.metrics": [[1012, "sklearn-metrics"], [1012, "id17"], [1012, "id33"], [1013, "sklearn-metrics"], [1013, "id4"], [1013, "id16"], [1014, "sklearn-metrics"], [1014, "id2"], [1014, "id8"], [1015, "sklearn-metrics"], [1015, "id10"], [1016, "sklearn-metrics"], [1016, "id2"], [1016, "id11"], [1017, "sklearn-metrics"], [1017, "id17"], [1018, "sklearn-metrics"], [1018, "id3"], [1018, "id15"], [1019, "sklearn-metrics"], [1020, "sklearn-metrics"]], "sklearn.utils": [[1012, "sklearn-utils"], [1012, "id20"], [1012, "id39"], [1013, "sklearn-utils"], [1014, "sklearn-utils"], [1014, "id14"], [1015, "sklearn-utils"], [1015, "id12"], [1016, "sklearn-utils"], [1016, "id17"], [1017, "sklearn-utils"], [1017, "id6"], [1017, "id23"], [1018, "sklearn-utils"], [1018, "id18"], [1019, "sklearn-utils"], [1019, "id6"], [1019, "id24"], [1020, "sklearn-utils"]], "Version 0.20.1": [[1012, "version-0-20-1"]], "sklearn.ensemble": [[1012, "sklearn-ensemble"], [1012, "id29"], [1013, "sklearn-ensemble"], [1013, "id12"], [1014, "sklearn-ensemble"], [1015, "sklearn-ensemble"], [1015, "id7"], [1016, "sklearn-ensemble"], [1016, "id8"], [1017, "sklearn-ensemble"], [1017, "id3"], [1017, "id12"], [1018, "sklearn-ensemble"], [1019, "sklearn-ensemble"], [1019, "id3"], [1019, "id15"], [1020, "sklearn-ensemble"]], "sklearn.mixture": [[1012, "sklearn-mixture"], [1012, "id34"], [1013, "sklearn-mixture"], [1017, "sklearn-mixture"], [1018, "sklearn-mixture"]], "Version 0.20.0": [[1012, "version-0-20-0"]], "Known Major Bugs": [[1012, "known-major-bugs"], [1013, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1012, "sklearn-discriminant-analysis"], [1013, "sklearn-discriminant-analysis"], [1016, "sklearn-discriminant-analysis"], [1018, "sklearn-discriminant-analysis"], [1019, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1012, "sklearn-dummy"], [1013, "sklearn-dummy"], [1014, "sklearn-dummy"], [1017, "sklearn-dummy"], [1018, "sklearn-dummy"]], "sklearn.feature_selection": [[1012, "sklearn-feature-selection"], [1014, "sklearn-feature-selection"], [1015, "sklearn-feature-selection"], [1016, "sklearn-feature-selection"], [1017, "sklearn-feature-selection"], [1017, "id14"], [1018, "sklearn-feature-selection"], [1018, "id2"], [1018, "id11"], [1019, "sklearn-feature-selection"], [1019, "id16"], [1020, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1012, "sklearn-gaussian-process"], [1014, "sklearn-gaussian-process"], [1015, "sklearn-gaussian-process"], [1016, "sklearn-gaussian-process"], [1016, "id9"], [1017, "sklearn-gaussian-process"], [1018, "sklearn-gaussian-process"], [1019, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1012, "sklearn-isotonic"], [1013, "sklearn-isotonic"], [1014, "sklearn-isotonic"], [1016, "sklearn-isotonic"], [1018, "sklearn-isotonic"], [1019, "sklearn-isotonic"]], "sklearn.manifold": [[1012, "sklearn-manifold"], [1013, "sklearn-manifold"], [1014, "sklearn-manifold"], [1015, "sklearn-manifold"], [1016, "sklearn-manifold"], [1017, "sklearn-manifold"], [1017, "id16"], [1018, "sklearn-manifold"], [1018, "id14"], [1019, "sklearn-manifold"], [1019, "id19"]], "sklearn.multioutput": [[1012, "sklearn-multioutput"], [1013, "sklearn-multioutput"], [1014, "sklearn-multioutput"], [1015, "sklearn-multioutput"], [1016, "sklearn-multioutput"], [1016, "id13"], [1019, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1012, "sklearn-naive-bayes"], [1014, "sklearn-naive-bayes"], [1014, "id10"], [1015, "sklearn-naive-bayes"], [1016, "sklearn-naive-bayes"], [1017, "sklearn-naive-bayes"], [1019, "sklearn-naive-bayes"], [1020, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1012, "sklearn-neural-network"], [1013, "sklearn-neural-network"], [1014, "sklearn-neural-network"], [1015, "sklearn-neural-network"], [1016, "sklearn-neural-network"], [1017, "sklearn-neural-network"], [1018, "sklearn-neural-network"], [1019, "sklearn-neural-network"], [1019, "id21"], [1020, "sklearn-neural-network"]], "sklearn.pipeline": [[1012, "sklearn-pipeline"], [1013, "sklearn-pipeline"], [1014, "sklearn-pipeline"], [1015, "sklearn-pipeline"], [1016, "sklearn-pipeline"], [1017, "sklearn-pipeline"], [1017, "id19"], [1018, "sklearn-pipeline"], [1019, "sklearn-pipeline"], [1020, "sklearn-pipeline"]], "sklearn.tree": [[1012, "sklearn-tree"], [1013, "sklearn-tree"], [1013, "id19"], [1014, "sklearn-tree"], [1015, "sklearn-tree"], [1016, "sklearn-tree"], [1016, "id16"], [1017, "sklearn-tree"], [1017, "id22"], [1018, "sklearn-tree"], [1018, "id5"], [1018, "id17"], [1019, "sklearn-tree"], [1019, "id5"], [1019, "id23"], [1020, "sklearn-tree"]], "Multiple modules": [[1012, "multiple-modules"], [1013, "multiple-modules"]], "Changes to estimator checks": [[1012, "changes-to-estimator-checks"], [1013, "changes-to-estimator-checks"], [1014, "changes-to-estimator-checks"]], "Version 0.21.3": [[1013, "version-0-21-3"]], "Legend for changelogs": [[1013, "legend-for-changelogs"], [1014, "legend-for-changelogs"], [1015, "legend-for-changelogs"], [1016, "legend-for-changelogs"], [1017, "legend-for-changelogs"], [1018, "legend-for-changelogs"], [1019, "legend-for-changelogs"], [1020, "legend-for-changelogs"]], "sklearn.inspection": [[1013, "sklearn-inspection"], [1013, "id3"], [1013, "id14"], [1014, "sklearn-inspection"], [1014, "id7"], [1015, "sklearn-inspection"], [1015, "id11"], [1016, "sklearn-inspection"], [1017, "sklearn-inspection"], [1018, "sklearn-inspection"], [1019, "sklearn-inspection"], [1019, "id17"], [1020, "sklearn-inspection"]], "Version 0.21.2": [[1013, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1013, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1013, "version-0-21-1"]], "Version 0.21.0": [[1013, "version-0-21-0"]], "sklearn.base": [[1013, "sklearn-base"], [1014, "sklearn-base"], [1016, "sklearn-base"], [1017, "sklearn-base"], [1018, "sklearn-base"], [1019, "sklearn-base"], [1019, "id2"], [1019, "id10"], [1020, "sklearn-base"]], "sklearn.calibration": [[1013, "sklearn-calibration"], [1014, "sklearn-calibration"], [1016, "sklearn-calibration"], [1017, "sklearn-calibration"], [1017, "id8"], [1018, "sklearn-calibration"], [1019, "sklearn-calibration"], [1019, "id11"], [1020, "sklearn-calibration"]], "sklearn.externals": [[1013, "sklearn-externals"]], "sklearn.multiclass": [[1013, "sklearn-multiclass"], [1016, "sklearn-multiclass"], [1017, "sklearn-multiclass"], [1018, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1014, "version-0-22-2-post1"]], "Version 0.22.1": [[1014, "version-0-22-1"]], "sklearn.semi_supervised": [[1014, "sklearn-semi-supervised"], [1015, "sklearn-semi-supervised"], [1016, "sklearn-semi-supervised"], [1016, "id3"], [1016, "id15"], [1020, "sklearn-semi-supervised"]], "Version 0.22.0": [[1014, "version-0-22-0"]], "Website update": [[1014, "website-update"]], "Clear definition of the public API": [[1014, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1014, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1014, "sklearn-cross-decomposition"], [1016, "sklearn-cross-decomposition"], [1016, "id6"], [1018, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1014, "sklearn-kernel-approximation"], [1016, "sklearn-kernel-approximation"], [1017, "sklearn-kernel-approximation"], [1018, "sklearn-kernel-approximation"], [1019, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1015, "version-0-23-2"]], "Version 0.23.1": [[1015, "version-0-23-1"]], "Version 0.23.0": [[1015, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1015, "enforcing-keyword-only-arguments"], [1017, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1016, "version-0-24-2"]], "feature_extraction": [[1016, "feature-extraction"]], "Version 0.24.1": [[1016, "version-0-24-1"]], "Packaging": [[1016, "packaging"]], "Version 0.24.0": [[1016, "version-0-24-0"]], "sklearn.exceptions": [[1016, "sklearn-exceptions"]], "Version 1.0.2": [[1017, "version-1-0-2"]], "Version 1.0.1": [[1017, "version-1-0-1"]], "Fixed models": [[1017, "fixed-models"]], "Version 1.0.0": [[1017, "version-1-0-0"]], "Minimal dependencies": [[1017, "minimal-dependencies"], [1018, "minimal-dependencies"]], "Version 1.1.3": [[1018, "version-1-1-3"]], "Version 1.1.2": [[1018, "version-1-1-2"]], "Version 1.1.1": [[1018, "version-1-1-1"]], "Version 1.1.0": [[1018, "version-1-1-0"]], "sklearn.random_projection": [[1018, "sklearn-random-projection"]], "Version 1.2.2": [[1019, "version-1-2-2"]], "Version 1.2.1": [[1019, "version-1-2-1"]], "Changes impacting all modules": [[1019, "changes-impacting-all-modules"], [1019, "id8"], [1020, "changes-impacting-all-modules"]], "Version 1.2.0": [[1019, "version-1-2-0"]], "Version 1.3.0": [[1020, "version-1-3-0"]], "sklearn.exception": [[1020, "sklearn-exception"]]}, "indexentries": {"1d": [[381, "term-1d"]], "1d array": [[381, "term-1d-array"]], "2d": [[381, "term-2d"]], "2d array": [[381, "term-2d-array"]], "api": [[381, "term-API"]], "cv splitter": [[381, "term-CV-splitter"]], "slep": [[381, "term-SLEP"]], "sleps": [[381, "term-SLEPs"]], "x": [[381, "term-X"]], "xt": [[381, "term-Xt"]], "y": [[381, "term-Y"], [381, "term-y"]], "_estimator_type": [[381, "term-_estimator_type"]], "array-like": [[381, "term-array-like"]], "attribute": [[381, "term-attribute"]], "attributes": [[381, "term-attributes"]], "backwards compatibility": [[381, "term-backwards-compatibility"]], "binary": [[381, "term-binary"]], "callable": [[381, "term-callable"]], "categorical feature": [[381, "term-categorical-feature"]], "class_weight": [[381, "term-class_weight"]], "classes_": [[381, "term-classes_"]], "classifier": [[381, "term-classifier"]], "classifiers": [[381, "term-classifiers"]], "clone": [[381, "term-clone"]], "cloned": [[381, "term-cloned"]], "clusterer": [[381, "term-clusterer"]], "clusterers": [[381, "term-clusterers"]], "coef_": [[381, "term-coef_"]], "common tests": [[381, "term-common-tests"]], "components_": [[381, "term-components_"]], "continuous": [[381, "term-continuous"]], "continuous multi-output": [[381, "term-continuous-multi-output"]], "continuous multioutput": [[381, "term-continuous-multioutput"]], "cross-validation estimator": [[381, "term-cross-validation-estimator"]], "cross-validation generator": [[381, "term-cross-validation-generator"]], "cross-validation splitter": [[381, "term-cross-validation-splitter"]], "cv": [[381, "term-cv"]], "data leakage": [[381, "term-data-leakage"]], "data type": [[381, "term-data-type"]], "decision_function": [[381, "term-decision_function"]], "density estimator": [[381, "term-density-estimator"]], "deprecation": [[381, "term-deprecation"]], "dimensionality": [[381, "term-dimensionality"]], "docstring": [[381, "term-docstring"]], "double underscore": [[381, "term-double-underscore"]], "double underscore notation": [[381, "term-double-underscore-notation"]], "dtype": [[381, "term-dtype"]], "duck typing": [[381, "term-duck-typing"]], "early stopping": [[381, "term-early-stopping"]], "embedding_": [[381, "term-embedding_"]], "estimator": [[381, "term-estimator"]], "estimator instance": [[381, "term-estimator-instance"]], "estimator tags": [[381, "term-estimator-tags"]], "estimators": [[381, "term-estimators"]], "evaluation metric": [[381, "term-evaluation-metric"]], "evaluation metrics": [[381, "term-evaluation-metrics"]], "examples": [[381, "term-examples"]], "experimental": [[381, "term-experimental"]], "feature": [[381, "term-feature"]], "feature extractor": [[381, "term-feature-extractor"]], "feature extractors": [[381, "term-feature-extractors"]], "feature vector": [[381, "term-feature-vector"]], "feature_importances_": [[381, "term-feature_importances_"]], "features": [[381, "term-features"]], "fit": [[381, "term-fit"]], "fit_predict": [[381, "term-fit_predict"]], "fit_transform": [[381, "term-fit_transform"]], "fitted": [[381, "term-fitted"]], "fitting": [[381, "term-fitting"]], "function": [[381, "term-function"]], "gallery": [[381, "term-gallery"]], "get_feature_names_out": [[381, "term-get_feature_names_out"]], "get_n_splits": [[381, "term-get_n_splits"]], "get_params": [[381, "term-get_params"]], "groups": [[381, "term-groups"]], "hyper-parameter": [[381, "term-hyper-parameter"]], "hyperparameter": [[381, "term-hyperparameter"]], "imputation": [[381, "term-imputation"]], "impute": [[381, "term-impute"]], "indexable": [[381, "term-indexable"]], "induction": [[381, "term-induction"]], "inductive": [[381, "term-inductive"]], "joblib": [[381, "term-joblib"]], "kernel": [[381, "term-kernel"]], "label indicator matrix": [[381, "term-label-indicator-matrix"]], "labels_": [[381, "term-labels_"]], "leakage": [[381, "term-leakage"]], "max_iter": [[381, "term-max_iter"]], "memmapping": [[381, "term-memmapping"]], "memory": [[381, "term-memory"]], "memory map": [[381, "term-memory-map"]], "memory mapping": [[381, "term-memory-mapping"]], "meta-estimator": [[381, "term-meta-estimator"]], "meta-estimators": [[381, "term-meta-estimators"]], "metaestimator": [[381, "term-metaestimator"]], "metaestimators": [[381, "term-metaestimators"]], "metric": [[381, "term-metric"]], "missing values": [[381, "term-missing-values"]], "multi-class": [[381, "term-multi-class"]], "multi-class multi-output": [[381, "term-multi-class-multi-output"]], "multi-label": [[381, "term-multi-label"]], "multi-output": [[381, "term-multi-output"]], "multi-output continuous": [[381, "term-multi-output-continuous"]], "multi-output multi-class": [[381, "term-multi-output-multi-class"]], "multiclass": [[381, "term-multiclass"]], "multiclass multioutput": [[381, "term-multiclass-multioutput"]], "multilabel": [[381, "term-multilabel"]], "multilabel indicator matrices": [[381, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[381, "term-multilabel-indicator-matrix"]], "multioutput": [[381, "term-multioutput"]], "multioutput continuous": [[381, "term-multioutput-continuous"]], "multioutput multiclass": [[381, "term-multioutput-multiclass"]], "n_components": [[381, "term-n_components"]], "n_features": [[381, "term-n_features"]], "n_iter_": [[381, "term-n_iter_"]], "n_iter_no_change": [[381, "term-n_iter_no_change"]], "n_jobs": [[381, "term-n_jobs"]], "n_outputs": [[381, "term-n_outputs"]], "n_samples": [[381, "term-n_samples"]], "n_targets": [[381, "term-n_targets"]], "narrative docs": [[381, "term-narrative-docs"]], "narrative documentation": [[381, "term-narrative-documentation"]], "np": [[381, "term-np"]], "online learning": [[381, "term-online-learning"]], "out-of-core": [[381, "term-out-of-core"]], "outlier detector": [[381, "term-outlier-detector"]], "outlier detectors": [[381, "term-outlier-detectors"]], "outputs": [[381, "term-outputs"]], "pair": [[381, "term-pair"]], "pairwise metric": [[381, "term-pairwise-metric"]], "pairwise metrics": [[381, "term-pairwise-metrics"]], "param": [[381, "term-param"]], "parameter": [[381, "term-parameter"]], "parameters": [[381, "term-parameters"]], "params": [[381, "term-params"]], "partial_fit": [[381, "term-partial_fit"]], "pd": [[381, "term-pd"]], "pos_label": [[381, "term-pos_label"]], "precomputed": [[381, "term-precomputed"]], "predict": [[381, "term-predict"]], "predict_log_proba": [[381, "term-predict_log_proba"]], "predict_proba": [[381, "term-predict_proba"]], "predictor": [[381, "term-predictor"]], "predictors": [[381, "term-predictors"]], "random_state": [[381, "term-random_state"]], "rectangular": [[381, "term-rectangular"]], "regressor": [[381, "term-regressor"]], "regressors": [[381, "term-regressors"]], "sample": [[381, "term-sample"]], "sample properties": [[381, "term-sample-properties"]], "sample property": [[381, "term-sample-property"]], "sample_weight": [[381, "term-sample_weight"]], "samples": [[381, "term-samples"]], "scikit-learn enhancement proposals": [[381, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[381, "term-scikit-learn-contrib"]], "score": [[381, "term-score"]], "score_samples": [[381, "term-score_samples"]], "scorer": [[381, "term-scorer"]], "scoring": [[381, "term-scoring"]], "semi-supervised": [[381, "term-semi-supervised"]], "semi-supervised learning": [[381, "term-semi-supervised-learning"]], "semisupervised": [[381, "term-semisupervised"]], "set_params": [[381, "term-set_params"]], "sparse graph": [[381, "term-sparse-graph"]], "sparse matrix": [[381, "term-sparse-matrix"]], "split": [[381, "term-split"]], "stateless": [[381, "term-stateless"]], "supervised": [[381, "term-supervised"]], "supervised learning": [[381, "term-supervised-learning"]], "target": [[381, "term-target"]], "targets": [[381, "term-targets"]], "transduction": [[381, "term-transduction"]], "transductive": [[381, "term-transductive"]], "transform": [[381, "term-transform"]], "transformer": [[381, "term-transformer"]], "transformers": [[381, "term-transformers"]], "unlabeled": [[381, "term-unlabeled"]], "unlabeled data": [[381, "term-unlabeled-data"]], "unsupervised": [[381, "term-unsupervised"]], "unsupervised learning": [[381, "term-unsupervised-learning"]], "vectorizer": [[381, "term-vectorizer"]], "vectorizers": [[381, "term-vectorizers"]], "verbose": [[381, "term-verbose"]], "warm_start": [[381, "term-warm_start"]], "module": [[392, "module-sklearn.base"], [392, "module-sklearn.calibration"], [392, "module-sklearn.cluster"], [392, "module-sklearn.compose"], [392, "module-sklearn.covariance"], [392, "module-sklearn.cross_decomposition"], [392, "module-sklearn.datasets"], [392, "module-sklearn.decomposition"], [392, "module-sklearn.discriminant_analysis"], [392, "module-sklearn.dummy"], [392, "module-sklearn.ensemble"], [392, "module-sklearn.exceptions"], [392, "module-sklearn.experimental"], [392, "module-sklearn.feature_extraction"], [392, "module-sklearn.feature_extraction.image"], [392, "module-sklearn.feature_extraction.text"], [392, "module-sklearn.feature_selection"], [392, "module-sklearn.gaussian_process"], [392, "module-sklearn.impute"], [392, "module-sklearn.inspection"], [392, "module-sklearn.isotonic"], [392, "module-sklearn.kernel_approximation"], [392, "module-sklearn.kernel_ridge"], [392, "module-sklearn.linear_model"], [392, "module-sklearn.manifold"], [392, "module-sklearn.metrics"], [392, "module-sklearn.metrics.cluster"], [392, "module-sklearn.metrics.pairwise"], [392, "module-sklearn.mixture"], [392, "module-sklearn.model_selection"], [392, "module-sklearn.multiclass"], [392, "module-sklearn.multioutput"], [392, "module-sklearn.naive_bayes"], [392, "module-sklearn.neighbors"], [392, "module-sklearn.neural_network"], [392, "module-sklearn.pipeline"], [392, "module-sklearn.preprocessing"], [392, "module-sklearn.random_projection"], [392, "module-sklearn.semi_supervised"], [392, "module-sklearn.svm"], [392, "module-sklearn.tree"], [392, "module-sklearn.utils"], [560, "module-sklearn.experimental.enable_halving_search_cv"], [561, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[392, "module-sklearn.base"]], "sklearn.calibration": [[392, "module-sklearn.calibration"]], "sklearn.cluster": [[392, "module-sklearn.cluster"]], "sklearn.compose": [[392, "module-sklearn.compose"]], "sklearn.covariance": [[392, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[392, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[392, "module-sklearn.datasets"]], "sklearn.decomposition": [[392, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[392, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[392, "module-sklearn.dummy"]], "sklearn.ensemble": [[392, "module-sklearn.ensemble"]], "sklearn.exceptions": [[392, "module-sklearn.exceptions"]], "sklearn.experimental": [[392, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[392, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[392, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[392, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[392, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[392, "module-sklearn.gaussian_process"]], "sklearn.impute": [[392, "module-sklearn.impute"]], "sklearn.inspection": [[392, "module-sklearn.inspection"]], "sklearn.isotonic": [[392, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[392, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[392, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[392, "module-sklearn.linear_model"]], "sklearn.manifold": [[392, "module-sklearn.manifold"]], "sklearn.metrics": [[392, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[392, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[392, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[392, "module-sklearn.mixture"]], "sklearn.model_selection": [[392, "module-sklearn.model_selection"]], "sklearn.multiclass": [[392, "module-sklearn.multiclass"]], "sklearn.multioutput": [[392, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[392, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[392, "module-sklearn.neighbors"]], "sklearn.neural_network": [[392, "module-sklearn.neural_network"]], "sklearn.pipeline": [[392, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[392, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[392, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[392, "module-sklearn.semi_supervised"]], "sklearn.svm": [[392, "module-sklearn.svm"]], "sklearn.tree": [[392, "module-sklearn.tree"]], "sklearn.utils": [[392, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[404, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[405, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[406, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[407, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[407, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[407, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[408, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[408, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[408, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[408, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[408, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[409, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[409, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[410, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[410, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[411, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[411, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[412, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[412, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[413, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[413, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[414, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[414, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[415, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[415, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[415, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[416, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[417, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[418, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[419, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[419, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[419, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[419, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[419, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[419, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[419, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[420, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[420, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[420, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[420, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[421, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[422, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[422, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[422, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[422, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[422, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[422, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[423, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[423, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[423, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[423, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[423, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[424, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[424, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[425, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[425, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[426, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[426, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[426, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[426, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[426, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[427, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[427, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[427, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[428, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[428, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[429, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[429, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[429, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[429, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[429, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[429, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[430, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[430, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[431, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[431, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[431, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[431, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[431, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[432, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[432, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[432, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[432, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[432, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[432, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[432, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[432, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[433, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[433, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[433, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[433, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[433, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[434, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[434, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[434, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[434, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[434, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[434, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[434, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[434, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[435, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[436, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[437, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[438, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[439, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[440, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[441, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[442, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[443, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[444, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[445, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[445, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[445, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[446, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[446, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[446, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[446, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[446, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[446, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[446, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[447, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[448, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[449, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[450, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[450, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[451, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[451, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[452, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[452, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[453, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[453, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[454, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[454, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[455, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[455, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[456, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[456, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[457, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[457, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[458, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[459, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[460, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[461, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[462, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[463, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[463, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[463, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[464, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[464, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[464, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[465, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[465, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[465, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[466, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[466, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[467, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[468, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[469, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[470, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[471, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[472, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[473, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[476, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[477, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[478, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[479, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[480, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[481, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[482, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[483, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[484, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[488, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[489, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[490, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[491, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[512, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[512, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[513, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[513, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[514, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[514, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[515, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[515, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[516, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[516, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[517, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[517, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[518, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[519, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[519, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[520, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[520, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[521, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[521, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[522, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[522, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[523, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[523, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[523, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[523, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[524, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[524, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[525, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[525, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[526, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[527, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[528, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[529, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[530, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[531, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[532, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[532, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[533, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[533, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[533, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[533, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[533, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[533, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[534, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[534, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[534, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[534, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[535, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[535, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[535, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[535, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[536, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[536, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[536, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[536, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[537, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[537, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[537, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[537, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[537, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[537, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[537, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[537, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[538, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[538, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[538, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[538, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[539, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[539, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[539, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[539, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[540, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[540, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[540, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[540, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[541, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[541, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[541, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[541, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[542, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[543, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[544, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[544, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[544, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[544, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[545, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[545, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[545, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[545, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[546, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[546, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[546, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[546, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[547, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[547, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[547, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[547, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[548, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[548, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[548, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[548, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[549, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[549, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[549, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[549, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[550, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[550, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[550, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[551, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[551, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[551, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[552, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[552, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[553, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[553, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[554, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[554, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[555, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[555, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[556, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[556, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[557, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[557, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[558, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[558, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[559, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[559, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[560, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[561, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[562, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[562, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[563, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[563, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[564, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[564, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[565, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[566, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[567, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[568, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[569, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[569, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[570, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[570, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[571, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[571, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[572, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[573, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[573, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[574, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[574, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[574, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[575, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[575, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[575, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[576, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[576, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[577, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[578, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[578, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[578, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[579, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[580, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[581, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[582, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[582, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[583, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[584, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[585, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[586, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[587, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[588, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[589, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[590, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[591, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[592, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[593, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[594, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[595, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[595, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[595, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[596, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[597, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[598, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[599, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[599, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[600, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[600, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[601, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[602, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[602, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[603, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[603, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[604, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[605, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[605, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[606, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[607, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[608, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[608, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[609, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[609, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[610, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[610, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[611, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[611, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[612, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[612, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[612, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[613, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[613, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[613, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[614, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[615, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[616, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[616, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[617, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[618, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[619, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[620, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[620, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[621, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[622, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[622, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[623, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[624, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[624, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[625, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[625, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[626, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[626, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[627, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[627, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[627, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[627, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[628, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[628, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[628, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[629, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[629, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[630, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[630, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[631, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[631, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[632, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[632, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[633, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[633, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[633, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[633, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[634, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[634, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[634, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[635, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[635, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[636, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[637, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[637, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[638, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[638, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[639, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[639, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[640, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[641, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[641, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[641, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[642, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[643, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[643, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[643, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[643, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[644, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[645, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[646, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[647, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[648, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[649, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[649, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[650, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[650, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[651, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[651, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[652, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[653, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[654, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[655, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[655, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[655, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[656, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[656, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[657, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[657, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[658, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[658, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[659, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[659, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[660, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[660, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[661, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[661, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[662, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[663, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[664, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[665, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[666, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[667, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[668, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[669, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[669, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[670, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[670, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[671, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[671, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[672, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[672, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[673, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.fit_transform"]], "get_params() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.get_params"]], "set_params() (sklearn.manifold.tsne method)": [[673, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[674, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[675, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[676, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[677, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[678, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[678, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[678, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[678, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[679, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[679, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[679, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[679, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[680, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[680, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[681, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[681, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[681, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[681, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[682, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[682, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[682, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[682, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[683, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[683, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[683, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[683, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[684, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[685, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[687, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[690, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[691, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[692, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[693, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[694, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[695, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[696, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[699, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[701, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[707, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[712, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[713, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[714, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[715, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[716, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[720, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[721, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[722, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[723, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[724, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[725, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[726, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[727, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[728, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[729, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[730, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[731, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[732, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[733, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[734, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[758, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[759, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[760, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[761, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[762, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[763, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[765, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[766, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[767, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[768, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[769, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[770, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[771, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[772, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[773, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[774, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[775, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[775, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[776, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[776, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[777, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[777, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[777, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[777, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[778, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[778, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[778, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[779, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[779, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[779, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[780, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[780, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[780, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[780, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[781, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[781, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[782, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[782, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[782, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[783, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[783, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[783, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[784, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[784, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[784, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[785, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[785, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[785, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[786, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[786, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[786, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[787, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[787, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[787, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[788, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[789, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[790, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[790, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[790, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[791, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[791, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[791, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[791, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[792, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[792, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[792, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[793, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[793, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[793, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[794, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[794, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[794, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[795, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[795, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[795, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[796, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[796, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[796, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[797, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[797, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[797, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[798, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[798, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[798, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[799, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[800, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[801, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[802, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[803, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[804, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[805, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[806, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[807, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[807, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[807, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[808, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[808, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[808, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[808, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[809, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[809, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[810, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[810, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[811, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[811, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[812, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[812, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[813, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[813, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[814, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[814, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[815, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[815, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[816, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[816, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[817, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[817, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[818, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[818, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[819, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[819, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[820, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[820, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[821, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[821, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[822, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[822, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[823, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[823, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[824, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[824, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[825, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[825, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[826, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[826, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[827, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[827, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[828, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[829, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[830, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[831, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[832, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[833, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[834, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[835, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[835, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[836, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[836, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[837, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[837, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[838, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[838, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[838, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[838, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[839, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[839, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[839, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[840, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[841, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[842, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[843, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[844, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[845, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[846, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[847, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[848, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[849, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[850, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[851, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[852, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[852, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[853, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[854, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[854, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[855, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[856, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[857, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[858, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[859, "sklearn.preprocessing.StandardScaler.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[860, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[861, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[862, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[863, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[864, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[865, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[866, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[867, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[868, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[869, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[870, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[870, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[871, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[871, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[872, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[873, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[873, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[874, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[874, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[875, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[876, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[877, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[878, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[878, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[879, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[879, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[880, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[880, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[880, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[881, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[881, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[881, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[881, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[882, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[882, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[882, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[882, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[883, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[883, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[883, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[884, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[884, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[884, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[884, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[885, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[886, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[886, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[886, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[887, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[887, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[887, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[888, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[888, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[888, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[889, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[889, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[889, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[890, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[891, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[892, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[893, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[893, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[894, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[895, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[896, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[897, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[898, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[899, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[900, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[901, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[902, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[903, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[904, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[905, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[906, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[907, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[908, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[909, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[910, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[911, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[912, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[913, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[914, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[915, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[916, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[917, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[918, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[919, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[920, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[921, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[922, "sklearn.utils.metaestimators.available_if"]], "if_delegate_has_method() (in module sklearn.utils.metaestimators)": [[923, "sklearn.utils.metaestimators.if_delegate_has_method"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[924, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[925, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[926, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[927, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[928, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[928, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[929, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[930, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[931, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[932, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[933, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[934, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[935, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[936, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[937, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[938, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[939, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[940, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[941, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[942, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[943, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[944, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[945, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[946, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[947, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[948, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[949, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[950, "sklearn.utils.validation.has_fit_parameter"]]}})