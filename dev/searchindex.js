Search.setIndex({"alltitles": {"(Generalized) linear models": [[197, "generalized-linear-models"]], "1-way partial dependence with different models": [[168, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[68, "newsgroups-dataset"]], "2D interaction plots": [[168, "d-interaction-plots"]], "3D representation": [[168, "d-representation"]], "A constant prediction baseline": [[197, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[56, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[45, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "A demo of the Spectral Biclustering algorithm": [[18, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[19, "a-demo-of-the-spectral-co-clustering-algorithm"]], "A demo of the mean-shift clustering algorithm": [[61, "a-demo-of-the-mean-shift-clustering-algorithm"]], "A more flexible plotting API": [[318, "a-more-flexible-plotting-api"]], "A note on shuffling": [[413, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[11, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[385, "a-simple-algorithmic-trick-warm-restarts"]], "A simple example shipped with scikit-learn: iris dataset": [[1025, null]], "A tutorial on statistical-learning for scientific data processing": [[1022, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "A typical workflow for triaging issues": [[378, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[988, "aic-and-bic-criteria"]], "API Interface": [[399, "api-interface"]], "API Reference": [[407, "api-reference"]], "API changes": [[1042, "api-changes"]], "API changes summary": [[1035, "api-changes-summary"], [1035, "id4"], [1035, "id7"], [1035, "id10"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1041, "id6"], [1042, "api-changes-summary"]], "APIs of scikit-learn objects": [[381, "apis-of-scikit-learn-objects"]], "ARFF parser": [[373, "arff-parser"]], "AWeber": [[1017, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[155, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Ablation study": [[236, "ablation-study"]], "About the project": [[391, "about-the-project"]], "About us": [[0, "about-us"]], "Access pipeline steps": [[410, "access-pipeline-steps"]], "Access to nested parameters": [[410, "access-to-nested-parameters"]], "Accuracy of the Model": [[169, "accuracy-of-the-model"]], "Accuracy score": [[992, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[355, "accuracy-vs-alpha-for-training-and-testing-sets"]], "AdaBoost": [[416, "adaboost"]], "Add support for monotonic constraints in tree-based models": [[322, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[409, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[984, "additive-chi-squared-kernel"]], "Addressing the problem with a business metric": [[253, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[35, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Advanced Plotting With Partial Dependence": [[237, "advanced-plotting-with-partial-dependence"]], "Advantages:": [[409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null]], "Affinity Propagation": [[409, "affinity-propagation"]], "Agglomerative clustering with and without structure": [[37, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[38, "agglomerative-clustering-with-different-metrics"]], "Aggressive elimination of candidates": [[981, "aggressive-elimination-of-candidates"]], "Algorithms": [[996, "algorithms"]], "Alpine Linux": [[396, "alpine-linux"]], "Alternative compilers": [[377, "alternative-compilers"]], "Alternatives to brute force parameter search": [[981, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[236, "ames-housing-dataset"]], "Amount of resource and number of candidates at each iteration": [[981, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "An example custom estimator implementing a simple classifier": [[107, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[57, "an-example-of-k-means-initialization"]], "An example of reshaping data would be the digits dataset": [[1025, null]], "An introduction to machine learning with scikit-learn": [[1019, "an-introduction-to-machine-learning-with-scikit-learn"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[396, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[109, "analysis"]], "Analysis of a bag-of-words document classifier": [[350, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[168, "analysis-of-the-plots"]], "Analysis of the results": [[25, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[981, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[11, "analyzing-the-bike-sharing-demand-dataset"]], "Application example: vector quantization": [[1027, null]], "Applications and examples": [[417, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[283, "approximate-nearest-neighbors-in-tsne"]], "Arch Linux": [[396, "arch-linux"]], "Architectural / general goals": [[1013, "architectural-general-goals"]], "Array API support (experimental)": [[404, "array-api-support-experimental"]], "Artwork": [[0, "artwork"]], "Attributes": [[393, "attributes"]], "Authors": [[1035, "authors"], [1035, "id20"]], "Automatic Relevance Determination (ARD)": [[181, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[988, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[392, "automatic-parameter-searches"]], "Available Plotting Utilities": [[1032, "available-plotting-utilities"]], "Available documentation for Scikit-learn": [[1031, "available-documentation-for-scikit-learn"]], "BIRCH": [[409, "birch"]], "BNP Paribas Cardif": [[1017, "id29"]], "Bagging meta-estimator": [[416, "bagging-meta-estimator"]], "Bags of words": [[1028, "bags-of-words"]], "Balance model complexity and cross-validated score": [[258, "balance-model-complexity-and-cross-validated-score"]], "Balanced accuracy score": [[992, "balanced-accuracy-score"]], "Ball Tree": [[995, "ball-tree"]], "Base classes": [[407, "base-classes"]], "BaseEstimator and mixins:": [[381, null]], "Basic kernels": [[419, "basic-kernels"]], "Basic shrinkage": [[411, "basic-shrinkage"]], "Bayesian Regression": [[988, "bayesian-regression"]], "Bayesian Ridge Regression": [[988, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[176, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[407, "bayesian-regressors"]], "Before a release": [[383, "before-a-release"]], "Benchmark and plot helper functions": [[8, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[8, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[5, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[8, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[8, "benchmark-throughput"]], "Benchmarking classifiers": [[350, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[994, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[997, "bernoulli-restricted-boltzmann-machines"]], "Bestofmedia Group": [[1017, "id13"]], "Biclustering": [[16, "biclustering"], [164, "biclustering"], [375, "biclustering"], [405, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[17, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Biclustering evaluation": [[405, "biclustering-evaluation"]], "Biclustering metrics": [[407, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[168, "bike-sharing-dataset-preprocessing"]], "Binary Case": [[988, "binary-case"]], "Binary case": [[992, "binary-case"]], "Binary classification": [[992, "binary-classification"]], "Birchbox": [[1017, "id12"]], "Bisecting K-Means": [[409, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[41, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "BisectingKMeans: divide and cluster": [[319, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[94, "blind-source-separation-using-fastica"]], "Boil down your script to something as small as possible": [[384, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[136, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1017, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[376, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[992, "brier-score-loss"]], "Brute Force": [[995, "brute-force"]], "Bug Tracker": [[1016, "bug-tracker"]], "Bug fixes": [[1038, "bug-fixes"], [1038, "id1"], [1038, "id3"], [1039, "bug-fixes"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id5"], [1042, "bug-fixes"], [1042, "id4"]], "Bug triaging and issue curation": [[378, "bug-triaging-and-issue-curation"]], "Build a pipeline": [[410, "build-a-pipeline"]], "Build dependencies": [[377, "build-dependencies"]], "Build the dataset": [[154, "build-the-dataset"]], "Building a pipeline": [[1028, "building-a-pipeline"]], "Building a specific version from a tag": [[377, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[387, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[377, "building-from-source"]], "Building the documentation": [[379, "building-the-documentation"]], "Bulk versus Atomic mode": [[365, "bulk-versus-atomic-mode"]], "CCA (PLS mode B with symmetric deflation)": [[83, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[361, "cv-splitters"], [361, "id3"]], "Caching nearest neighbors": [[285, "caching-nearest-neighbors"]], "Caching transformers within a Pipeline": [[70, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[410, "caching-transformers-avoid-repeated-computation"]], "Calibrating a classifier": [[406, "calibrating-a-classifier"]], "Calibration": [[21, "calibration"], [164, "calibration"]], "Calibration curves": [[23, "calibration-curves"], [25, "calibration-curves"], [406, "calibration-curves"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "California Housing dataset": [[374, "california-housing-dataset"]], "Calinski-Harabasz Index": [[409, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[83, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[412, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[236, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Categorical Features Support": [[416, "categorical-features-support"]], "Categorical Naive Bayes": [[994, "categorical-naive-bayes"]], "Centering kernel matrices": [[1002, "centering-kernel-matrices"]], "Chain of binary classifiers": [[281, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[379, "change-the-default-value-of-a-parameter"]], "Change.org": [[1017, "id14"]], "Changed displays": [[1051, "changed-displays"]], "Changed models": [[1042, "changed-models"], [1043, "changed-models"], [1043, "id9"], [1043, "id22"], [1044, "changed-models"], [1044, "id6"], [1045, "changed-models"], [1046, "changed-models"], [1046, "id3"], [1047, "changed-models"], [1048, "changed-models"], [1049, "changed-models"], [1049, "id6"], [1050, "changed-models"], [1050, "id7"], [1051, "changed-models"], [1051, "id4"], [1052, "changed-models"], [1053, "changed-models"]], "Changelog": [[1035, "changelog"], [1035, "id1"], [1035, "id3"], [1035, "id6"], [1035, "id9"], [1035, "id12"], [1035, "id14"], [1035, "id16"], [1035, "id18"], [1035, "id19"], [1036, "changelog"], [1036, "id2"], [1037, "changelog"], [1038, "changelog"], [1039, "changelog"], [1039, "id2"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id1"], [1041, "id3"], [1042, "changelog"], [1042, "id2"], [1043, "changelog"], [1043, "id1"], [1043, "id5"], [1043, "id10"], [1043, "id23"], [1044, "changelog"], [1044, "id1"], [1044, "id2"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id4"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id6"], [1049, "changelog"], [1049, "id1"], [1049, "id7"], [1050, "changelog"], [1050, "id1"], [1050, "id9"], [1051, "changelog"], [1051, "id1"], [1051, "id6"], [1052, "changelog"], [1052, "id2"], [1053, "changelog"], [1054, "changelog"]], "Changes impacting all modules": [[1050, "changes-impacting-all-modules"], [1050, "id8"], [1051, "changes-impacting-all-modules"], [1051, "id5"], [1052, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1052, "changes-impacting-many-modules"], [1053, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1043, "changes-to-estimator-checks"], [1044, "changes-to-estimator-checks"], [1045, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[387, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[315, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[167, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[990, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[414, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[5, "choose-parameters"]], "Choosing a resource": [[981, "choosing-a-resource"]], "Choosing min_resources and the number of candidates": [[981, "choosing-min-resources-and-the-number-of-candidates"]], "Choosing the parameters of the model": [[1019, null]], "Choosing the right estimator": [[1021, "choosing-the-right-estimator"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[393, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[262, "class-likelihood-ratios-to-measure-classification-performance"]], "Class likelihood ratios": [[992, "class-likelihood-ratios"]], "Classes": [[407, "classes"]], "Classical linear regressors": [[407, "classical-linear-regressors"]], "Classification": [[27, "classification"], [30, "classification"], [157, "classification"], [164, "classification"], [988, "classification"], [995, "id4"], [996, "classification"], [1006, "classification"], [1007, "classification"], [1008, "classification"], [1026, "classification"]], "Classification and ROC analysis": [[269, "classification-and-roc-analysis"]], "Classification criteria": [[1008, "classification-criteria"]], "Classification metrics": [[407, "classification-metrics"], [992, "classification-metrics"]], "Classification of text documents using sparse features": [[350, "classification-of-text-documents-using-sparse-features"]], "Classification pipeline": [[68, "classification-pipeline"]], "Classification report": [[992, "classification-report"]], "Classifier comparison": [[29, "classifier-comparison"]], "ClassifierChain": [[993, "classifierchain"]], "Classifying irises:": [[1026, null]], "Clear definition of the public API": [[1045, "clear-definition-of-the-public-api"]], "Cloning": [[381, "cloning"]], "Closing issues: a tough call": [[378, null]], "Cluster centers - MiniBatchKMeans": [[93, "cluster-centers-minibatchkmeans"]], "Clustering": [[34, "clustering"], [164, "clustering"], [409, "clustering"]], "Clustering evaluation summary": [[351, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[414, null]], "Clustering metrics": [[407, "clustering-metrics"], [992, "clustering-metrics"]], "Clustering performance evaluation": [[409, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[351, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[351, "clustering-text-documents-using-k-means"]], "Clustering using affinity propagation": [[10, "clustering-using-affinity-propagation"]], "Clustering: grouping observations together": [[1027, "clustering-grouping-observations-together"]], "Code Contributors": [[1039, "code-contributors"], [1040, "code-contributors"], [1041, "code-contributors"], [1041, "id7"]], "Code Review Guidelines": [[379, "code-review-guidelines"]], "Code and Documentation Contributors": [[1042, "code-and-documentation-contributors"], [1042, "id10"], [1043, "code-and-documentation-contributors"], [1043, "id8"], [1043, "id21"], [1043, "id41"]], "Coding guidelines": [[381, "coding-guidelines"]], "Cohen\u2019s kappa": [[992, "cohen-s-kappa"]], "Color Quantization using K-Means": [[46, "color-quantization-using-k-means"]], "Column Transformer with Heterogeneous Data Sources": [[68, "column-transformer-with-heterogeneous-data-sources"]], "Column Transformer with Mixed Types": [[69, "column-transformer-with-mixed-types"]], "ColumnTransformer for heterogeneous data": [[410, "columntransformer-for-heterogeneous-data"]], "Combine predictors using stacking": [[130, "combine-predictors-using-stacking"]], "Combining the display objects into a single plot": [[227, "combining-the-display-objects-into-a-single-plot"]], "Common Vectorizer usage": [[417, "common-vectorizer-usage"]], "Common cases: predefined values": [[992, "common-cases-predefined-values"]], "Common estimator checks": [[404, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[361, "common-pitfalls-and-recommended-practices"]], "Common pitfalls and subtleties": [[361, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[167, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[228, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[40, "compare-birch-and-minibatchkmeans"]], "Compare Stochastic learning strategies for MLPClassifier": [[300, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Compare cross decomposition methods": [[83, "compare-cross-decomposition-methods"]], "Compare different approaches to setting the regularization parameter": [[76, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[24, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[305, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Compare times of SVR and Kernel Ridge Regression": [[232, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[176, "comparing-linear-bayesian-regressors"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[291, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Comparing QuantileRegressor and LinearRegression": [[199, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[115, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Comparing Target Encoder with Other Encoders": [[311, "comparing-target-encoder-with-other-encoders"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[226, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Comparing different clustering algorithms on toy datasets": [[42, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Comparing different hierarchical linkage methods on toy datasets": [[60, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "Comparing random forests and the multi-output meta estimator": [[129, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Comparing randomized search and grid search for hyperparameter estimation": [[267, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Comparing the results": [[173, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[183, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[183, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[259, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[259, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[204, "comparing-various-online-solvers"]], "Comparison between grid search and successive halving": [[270, "comparison-between-grid-search-and-successive-halving"]], "Comparison of Calibration of Classifiers": [[25, "comparison-of-calibration-of-classifiers"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[101, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Comparison of LDA and QDA": [[32, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[218, "comparison-of-manifold-learning-methods"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Comparison of kernel ridge regression and SVR": [[232, "comparison-of-kernel-ridge-regression-and-svr"]], "Comparison of results": [[78, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[62, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Comparison with special purpose text vectorizers": [[352, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[988, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[994, "complement-naive-bayes"]], "Complexity": [[995, "complexity"], [996, "complexity"], [1006, "complexity"], [1007, "complexity"], [1008, "complexity"]], "Complexity analysis": [[261, "complexity-analysis"]], "Components and loadings": [[1027, null]], "Composite estimators and parameter spaces": [[981, "composite-estimators-and-parameter-spaces"]], "Compression via vector quantization": [[51, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[12, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Computation methods": [[999, "computation-methods"]], "Computation times": [[14, "computation-times"], [20, "computation-times"], [26, "computation-times"], [33, "computation-times"], [66, "computation-times"], [74, "computation-times"], [81, "computation-times"], [85, "computation-times"], [91, "computation-times"], [104, "computation-times"], [106, "computation-times"], [134, "computation-times"], [139, "computation-times"], [147, "computation-times"], [159, "computation-times"], [163, "computation-times"], [171, "computation-times"], [174, "computation-times"], [216, "computation-times"], [224, "computation-times"], [241, "computation-times"], [250, "computation-times"], [276, "computation-times"], [279, "computation-times"], [282, "computation-times"], [297, "computation-times"], [303, "computation-times"], [313, "computation-times"], [323, "computation-times"], [331, "computation-times"], [332, "computation-times"], [348, "computation-times"], [353, "computation-times"], [360, "computation-times"], [1014, "computation-times"]], "Computational Performance": [[365, "computational-performance"]], "Compute Affinity Propagation": [[36, "compute-affinity-propagation"]], "Compute DBSCAN": [[47, "compute-dbscan"]], "Compute clustering": [[45, "compute-clustering"], [65, "compute-clustering"], [65, "id1"]], "Compute clustering with KMeans": [[62, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[61, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[62, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[202, "compute-paths"]], "Compute regularization path": [[190, "compute-regularization-path"]], "Compute score and computation times": [[115, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[76, "compute-the-likelihood-on-test-data"]], "Compute train and test errors": [[272, "compute-train-and-test-errors"]], "Computing Centrality scores": [[15, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[15, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[413, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[15, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[364, "computing-with-scikit-learn"]], "Concatenating multiple feature extraction methods": [[72, "concatenating-multiple-feature-extraction-methods"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[243, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Concluding remarks": [[2, "concluding-remarks"], [222, "concluding-remarks"]], "Conclusion": [[5, "conclusion"], [11, "conclusion"], [186, "conclusion"], [278, "conclusion"], [286, "conclusion"], [312, "conclusion"], [342, "conclusion"]], "Conclusions": [[181, "conclusions"]], "Configuration switches": [[366, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[365, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[252, "confusion-matrix"], [992, "confusion-matrix"]], "Connectivity graph of an image": [[417, "connectivity-graph-of-an-image"]], "Connectivity-constrained clustering": [[1027, "connectivity-constrained-clustering"]], "Cons:": [[991, null], [991, null]], "Consideration regarding model refitting and cross-validation": [[253, "consideration-regarding-model-refitting-and-cross-validation"]], "Construct the kernel-based regression models": [[232, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[233, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[233, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[409, "contingency-matrix"]], "Continuous Integration (CI)": [[379, "continuous-integration-ci"]], "Contributing": [[379, "contributing"], [391, "contributing"]], "Contributing code": [[379, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[394, "contributors"]], "Controlling randomness": [[361, "controlling-randomness"]], "Controlling the tree size": [[416, "controlling-the-tree-size"]], "Conventions": [[1019, "conventions"]], "Convergence of the AdaBoostClassifier": [[109, "convergence-of-the-adaboostclassifier"]], "Core Contributors": [[394, "core-contributors"]], "Cosine similarity": [[990, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[253, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[253, "cost-sensitive-learning-with-constant-gains-and-costs"]], "Covariance estimation": [[75, "covariance-estimation"], [164, "covariance-estimation"], [411, "covariance-estimation"]], "Coverage error": [[992, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[384, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Create ConfusionMatrixDisplay": [[227, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[227, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[227, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[312, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[266, "create-multi-label-data-fit-and-predict"]], "Create the data": [[100, "create-the-data"]], "Create the pipeline": [[341, "create-the-pipeline"]], "Creating a dataset": [[342, "creating-a-dataset"]], "Creating a non-noisy data set": [[201, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[109, "creating-the-dataset"]], "Creating transformers": [[68, "creating-transformers"]], "Cross decomposition": [[82, "cross-decomposition"], [164, "cross-decomposition"], [412, "cross-decomposition"]], "Cross validation and model selection": [[413, "cross-validation-and-model-selection"]], "Cross validation iterators": [[413, "cross-validation-iterators"]], "Cross validation of time series data": [[413, "cross-validation-of-time-series-data"]], "Cross-validated estimators": [[1023, "cross-validated-estimators"]], "Cross-validation generators": [[1023, "cross-validation-generators"]], "Cross-validation iterators for grouped data": [[413, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[413, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[413, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[262, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[136, "cross-validation-on-diabetes-dataset-exercise"]], "Cross-validation: evaluating estimator performance": [[413, "cross-validation-evaluating-estimator-performance"]], "Curve Fitting with Bayesian Ridge Regression": [[177, "curve-fitting-with-bayesian-ridge-regression"]], "Custom Kernels": [[1007, "custom-kernels"]], "Custom refit strategy of a grid search with cross-validation": [[257, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "Custom transformers": [[1002, "custom-transformers"]], "Customizing the vectorizer classes": [[417, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[380, "cython-best-practices-conventions-and-knowledge"]], "DBSCAN": [[409, "dbscan"]], "DO NOT report your data unless it is extremely necessary": [[384, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[24, "data"]], "Data Considerations": [[374, null]], "Data Loading and Feature Engineering": [[169, "data-loading-and-feature-engineering"]], "Data Preparation": [[120, "data-preparation"]], "Data Publica": [[1017, "id21"]], "Data and sample properties": [[393, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[2, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[32, "data-generation"], [47, "data-generation"], [55, "data-generation"], [126, "data-generation"], [145, "data-generation"], [155, "data-generation"], [248, "data-generation"], [325, "data-generation"], [345, "data-generation"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Data leakage": [[361, "data-leakage"]], "Data leakage during pre-processing": [[361, "data-leakage-during-pre-processing"]], "Data loading": [[260, "data-loading"]], "Data preprocessing": [[123, "data-preprocessing"]], "DataFrame Support": [[1052, "dataframe-support"]], "DataRobot": [[1017, "id18"]], "Dataiku": [[1017, "id25"]], "Dataset": [[23, "dataset"], [25, "dataset"], [186, "dataset"], [265, "dataset"]], "Dataset Versions": [[373, "dataset-versions"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[266, "dataset-and-model"]], "Dataset based latent variables model": [[83, "dataset-based-latent-variables-model"]], "Dataset examples": [[86, "dataset-examples"], [164, "dataset-examples"]], "Dataset generation": [[156, "dataset-generation"], [199, "dataset-generation"]], "Dataset loading utilities": [[372, "dataset-loading-utilities"], [384, "dataset-loading-utilities"]], "Dataset preparation": [[93, "dataset-preparation"], [218, "dataset-preparation"]], "Dataset preprocessing and model training": [[236, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[371, "dataset-transformations"]], "Datasets": [[1025, "datasets"]], "Datasets in svmlight / libsvm format": [[373, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[409, "davies-bouldin-index"]], "Debian/Ubuntu": [[396, "debian-ubuntu"]], "Debugging memory errors in Cython with valgrind": [[387, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[394, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[231, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[357, "decision-tree-regression"]], "Decision Tree Regression with AdaBoost": [[110, "decision-tree-regression-with-adaboost"]], "Decision Trees": [[164, "decision-trees"], [354, "decision-trees"], [1008, "decision-trees"]], "Decision boundary": [[286, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[330, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "Decision path": [[359, "decision-path"]], "Decoding text files": [[417, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[414, "decomposing-signals-in-components-matrix-factorization-problems"]], "Decomposition": [[92, "decomposition"], [93, "decomposition"], [164, "decomposition"]], "Decomposition: Dictionary learning": [[93, "decomposition-dictionary-learning"]], "Decompositions: from a signal to components and loadings": [[1027, "decompositions-from-a-signal-to-components-and-loadings"]], "Define a function to visualize cross-validation behavior": [[254, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[218, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[56, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[257, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[352, "define-preprocessing-functions"]], "Define structure of the data": [[45, "define-structure-of-the-data"]], "Define the classifiers": [[256, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[35, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[992, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[47, "demo-of-dbscan-clustering-algorithm"]], "Demo of HDBSCAN clustering algorithm": [[53, "demo-of-hdbscan-clustering-algorithm"]], "Demo of OPTICS clustering algorithm": [[63, "demo-of-optics-clustering-algorithm"]], "Demo of affinity propagation clustering algorithm": [[36, "demo-of-affinity-propagation-clustering-algorithm"]], "Demonstrating the different strategies of KBinsDiscretizer": [[308, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Demonstration of k-means assumptions": [[55, "demonstration-of-k-means-assumptions"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[263, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Density Estimation": [[415, "density-estimation"]], "Density Estimation for a Gaussian mixture": [[247, "density-estimation-for-a-gaussian-mixture"]], "Density Estimation: Histograms": [[415, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1007, "density-estimation-novelty-detection"]], "Dependencies": [[377, "dependencies"]], "Deprecation": [[379, "deprecation"]], "Deprecation / Default Value Change": [[233, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1045, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[166, "description-of-the-simulated-data"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Detection error tradeoff (DET)": [[992, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[256, "detection-error-tradeoff-det-curve"]], "Developer API for HTML representation": [[381, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[381, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[381, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[387, "developers-tips-and-tricks"]], "Developer\u2019s Guide": [[382, "developer-s-guide"]], "Developing Estimators": [[105, "developing-estimators"], [164, "developing-estimators"]], "Developing scikit-learn estimators": [[381, "developing-scikit-learn-estimators"]], "Developing with the Plotting API": [[386, "developing-with-the-plotting-api"]], "Diabetes dataset": [[376, "diabetes-dataset"], [1026, null]], "DictVectorizer": [[352, "dictvectorizer"]], "Dictionary Learning": [[414, "dictionary-learning"]], "Dictionary learning": [[93, "dictionary-learning"]], "Dictionary learning - positive code": [[93, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[93, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[93, "dictionary-learning-positive-dictionary-code"]], "Differences between solvers": [[988, "differences-between-solvers"]], "Different algorithms for the same problem": [[1026, null]], "Different label assignment strategies": [[409, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[409, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[381, "different-objects"]], "Different scenario and useful concepts": [[988, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[399, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "Digits dataset": [[30, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[292, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Dimensionality reduction": [[995, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[986, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discretization": [[1002, "discretization"]], "Dispatching": [[389, "dispatching"]], "Display Objects": [[1032, "display-objects"]], "Display code coverage in pull requests": [[387, "display-code-coverage-in-pull-requests"]], "Display results": [[202, "display-results"]], "Display the distorted image": [[96, "display-the-distorted-image"]], "Displaying Pipelines": [[238, "displaying-pipelines"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[238, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[238, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[238, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[238, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[238, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[228, "displaying-estimators-and-complex-pipelines"]], "Distance metrics": [[407, "distance-metrics"]], "Do you plan to implement transform for target y in a pipeline?": [[391, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[391, "do-you-support-pypy"]], "Documentation": [[379, "documentation"], [1035, "documentation"]], "Documentation Resources": [[1016, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1038, "documentation-improvements"], [1039, "documentation-improvements"]], "Domain specific packages": [[1012, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[419, "dot-product-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Download data, if not already on disk": [[15, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[130, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[373, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null]], "Dummy estimators": [[992, "dummy-estimators"]], "D\u00b2 score": [[992, "d2-score"]], "D\u00b2 score for classification": [[992, "d2-score-for-classification"]], "Earlier versions": [[1035, "earlier-versions"]], "Early stopping in Gradient Boosting": [[120, "early-stopping-in-gradient-boosting"]], "Early stopping of Stochastic Gradient Descent": [[205, "early-stopping-of-stochastic-gradient-descent"]], "Easy tag": [[379, null]], "Effect of number of trees and early stopping": [[125, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[310, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[310, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[310, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[73, "effect-of-transforming-the-targets-in-regression-model"]], "Effect of varying threshold for self-training": [[328, "effect-of-varying-threshold-for-self-training"]], "Efficient Linear Algebra & Array Operations": [[388, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[388, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[388, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[93, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[988, "elastic-net"]], "ElasticNet": [[181, "elasticnet"]], "Embedding in 2D space": [[10, "embedding-in-2d-space"]], "Embedding techniques comparison": [[219, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Empirical covariance": [[411, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[59, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Empirical validation": [[230, "empirical-validation"]], "Encoding categorical features": [[1002, "encoding-categorical-features"]], "Encoding strategy": [[51, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1046, "enforcing-keyword-only-arguments"], [1048, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[394, "enhancement-proposals-sleps"]], "Enhancements": [[1038, "enhancements"], [1039, "enhancements"], [1040, "enhancements"], [1041, "enhancements"], [1041, "id4"], [1042, "enhancements"], [1042, "id3"]], "Enriched estimator displays": [[322, "enriched-estimator-displays"]], "Ensemble methods": [[108, "ensemble-methods"], [164, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[416, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Environment variables": [[366, "environment-variables"]], "Error Calculation": [[120, "error-calculation"]], "Error caused by file path length limit on Windows": [[396, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[109, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[173, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[62, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[173, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[173, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[80, "estimate-the-covariance"]], "Estimate the score": [[162, "estimate-the-score"]], "Estimated Attributes": [[381, "estimated-attributes"]], "Estimation algorithms": [[986, "estimation-algorithms"]], "Estimator Tags": [[381, "estimator-tags"]], "Estimator types": [[381, "estimator-types"]], "Estimators": [[361, "estimators"], [361, "id2"], [381, "estimators"], [404, "estimators"], [407, "estimators"]], "Estimators objects": [[1025, "estimators-objects"]], "Estimators that handle NaN values": [[982, "estimators-that-handle-nan-values"]], "Evaluation": [[79, "evaluation"], [302, "evaluation"]], "Evaluation metrics": [[253, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[236, "evaluation-of-outlier-detection-estimators"]], "Evaluation of the calibration of predictions": [[197, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the performance on the test set": [[1028, "evaluation-of-the-performance-on-the-test-set"]], "Evaluation of the ranking power": [[197, "evaluation-of-the-ranking-power"]], "Evernote": [[1017, "id6"]], "Exact Kernel PCA": [[414, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[414, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[404, "example-usage"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Example:": [[992, null], [992, null], [992, null], [992, null], [992, null], [992, null], [992, null], [992, null], [1004, null], [1026, null]], "Examples": [[164, "examples"], [367, "examples"], [374, null], [408, "examples"], [413, null], [413, null], [418, null], [418, null], [419, null], [985, null], [988, null], [988, null], [988, null], [1005, null], [1005, null], [1009, null], [1009, null], [1009, null], [1035, "examples"]], "Examples based on real world datasets": [[1, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "Examples using sklearn.base.BaseEstimator": [[423, "examples-using-sklearn-base-baseestimator"]], "Examples using sklearn.base.ClassifierMixin": [[426, "examples-using-sklearn-base-classifiermixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[429, "examples-using-sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.RegressorMixin": [[432, "examples-using-sklearn-base-regressormixin"]], "Examples using sklearn.base.TransformerMixin": [[433, "examples-using-sklearn-base-transformermixin"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[437, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[438, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "Examples using sklearn.cluster.AffinityPropagation": [[440, "examples-using-sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[441, "examples-using-sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.Birch": [[442, "examples-using-sklearn-cluster-birch"]], "Examples using sklearn.cluster.BisectingKMeans": [[443, "examples-using-sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.DBSCAN": [[444, "examples-using-sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[445, "examples-using-sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.HDBSCAN": [[446, "examples-using-sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.KMeans": [[447, "examples-using-sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.MeanShift": [[448, "examples-using-sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[449, "examples-using-sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.OPTICS": [[450, "examples-using-sklearn-cluster-optics"]], "Examples using sklearn.cluster.SpectralBiclustering": [[451, "examples-using-sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[452, "examples-using-sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[453, "examples-using-sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.affinity_propagation": [[454, "examples-using-sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[455, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.estimate_bandwidth": [[458, "examples-using-sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.kmeans_plusplus": [[460, "examples-using-sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.spectral_clustering": [[462, "examples-using-sklearn-cluster-spectral-clustering"]], "Examples using sklearn.compose.ColumnTransformer": [[464, "examples-using-sklearn-compose-columntransformer"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[465, "examples-using-sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.make_column_selector": [[466, "examples-using-sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_transformer": [[467, "examples-using-sklearn-compose-make-column-transformer"]], "Examples using sklearn.config_context": [[468, "examples-using-sklearn-config-context"]], "Examples using sklearn.covariance.EllipticEnvelope": [[469, "examples-using-sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[470, "examples-using-sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[472, "examples-using-sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.LedoitWolf": [[473, "examples-using-sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.MinCovDet": [[474, "examples-using-sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.OAS": [[475, "examples-using-sklearn-covariance-oas"]], "Examples using sklearn.covariance.ShrunkCovariance": [[476, "examples-using-sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.empirical_covariance": [[477, "examples-using-sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.ledoit_wolf": [[479, "examples-using-sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.cross_decomposition.CCA": [[482, "examples-using-sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[483, "examples-using-sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[484, "examples-using-sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[488, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[489, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_california_housing": [[490, "examples-using-sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_covtype": [[491, "examples-using-sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_kddcup99": [[492, "examples-using-sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_lfw_people": [[494, "examples-using-sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[495, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_openml": [[496, "examples-using-sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_species_distributions": [[498, "examples-using-sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.get_data_home": [[499, "examples-using-sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.load_breast_cancer": [[500, "examples-using-sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_diabetes": [[501, "examples-using-sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_digits": [[502, "examples-using-sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_iris": [[504, "examples-using-sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_sample_image": [[506, "examples-using-sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_wine": [[510, "examples-using-sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.make_biclusters": [[511, "examples-using-sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_blobs": [[512, "examples-using-sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_checkerboard": [[513, "examples-using-sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_circles": [[514, "examples-using-sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_classification": [[515, "examples-using-sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[519, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_hastie_10_2": [[520, "examples-using-sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[521, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_moons": [[522, "examples-using-sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_multilabel_classification": [[523, "examples-using-sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_regression": [[524, "examples-using-sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_s_curve": [[525, "examples-using-sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[526, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[527, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_swiss_roll": [[530, "examples-using-sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.decomposition.FactorAnalysis": [[532, "examples-using-sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FastICA": [[533, "examples-using-sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.IncrementalPCA": [[534, "examples-using-sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.KernelPCA": [[535, "examples-using-sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[536, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[537, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[538, "examples-using-sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[539, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.NMF": [[540, "examples-using-sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.PCA": [[541, "examples-using-sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.SparseCoder": [[542, "examples-using-sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparsePCA": [[543, "examples-using-sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.TruncatedSVD": [[544, "examples-using-sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.dummy.DummyClassifier": [[551, "examples-using-sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyRegressor": [[552, "examples-using-sklearn-dummy-dummyregressor"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[553, "examples-using-sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[554, "examples-using-sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[556, "examples-using-sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[557, "examples-using-sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[558, "examples-using-sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[559, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[560, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[561, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[562, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.IsolationForest": [[563, "examples-using-sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[564, "examples-using-sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[565, "examples-using-sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[566, "examples-using-sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.StackingClassifier": [[567, "examples-using-sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingRegressor": [[568, "examples-using-sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.VotingClassifier": [[569, "examples-using-sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingRegressor": [[570, "examples-using-sklearn-ensemble-votingregressor"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[571, "examples-using-sklearn-exceptions-convergencewarning"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[581, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[582, "examples-using-sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[584, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[587, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[588, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[589, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[590, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[591, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_selection.RFE": [[593, "examples-using-sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFECV": [[594, "examples-using-sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.SelectFromModel": [[597, "examples-using-sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectKBest": [[599, "examples-using-sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectPercentile": [[600, "examples-using-sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[602, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.chi2": [[604, "examples-using-sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.f_classif": [[605, "examples-using-sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_regression": [[606, "examples-using-sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[607, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[608, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[610, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[611, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[613, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[614, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[615, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[617, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[618, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[619, "examples-using-sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[622, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[623, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[625, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.impute.IterativeImputer": [[627, "examples-using-sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.KNNImputer": [[628, "examples-using-sklearn-impute-knnimputer"]], "Examples using sklearn.impute.SimpleImputer": [[630, "examples-using-sklearn-impute-simpleimputer"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[631, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[631, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[632, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[632, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "Examples using sklearn.inspection.partial_dependence": [[633, "examples-using-sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.permutation_importance": [[634, "examples-using-sklearn-inspection-permutation-importance"]], "Examples using sklearn.isotonic.IsotonicRegression": [[635, "examples-using-sklearn-isotonic-isotonicregression"]], "Examples using sklearn.kernel_approximation.Nystroem": [[639, "examples-using-sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[640, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[641, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[643, "examples-using-sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.linear_model.ARDRegression": [[644, "examples-using-sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.BayesianRidge": [[645, "examples-using-sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.ElasticNet": [[646, "examples-using-sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNetCV": [[647, "examples-using-sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.GammaRegressor": [[648, "examples-using-sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[649, "examples-using-sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.Lasso": [[652, "examples-using-sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.LassoCV": [[653, "examples-using-sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[655, "examples-using-sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsIC": [[656, "examples-using-sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LinearRegression": [[657, "examples-using-sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[658, "examples-using-sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[659, "examples-using-sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[662, "examples-using-sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[664, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[666, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.Perceptron": [[668, "examples-using-sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.PoissonRegressor": [[669, "examples-using-sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[670, "examples-using-sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[671, "examples-using-sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.Ridge": [[672, "examples-using-sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.RidgeCV": [[673, "examples-using-sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeClassifier": [[674, "examples-using-sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[676, "examples-using-sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[677, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDRegressor": [[678, "examples-using-sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[679, "examples-using-sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[680, "examples-using-sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.enet_path": [[681, "examples-using-sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.lars_path": [[682, "examples-using-sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lasso_path": [[684, "examples-using-sklearn-linear-model-lasso-path"]], "Examples using sklearn.manifold.Isomap": [[688, "examples-using-sklearn-manifold-isomap"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[689, "examples-using-sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.MDS": [[690, "examples-using-sklearn-manifold-mds"]], "Examples using sklearn.manifold.SpectralEmbedding": [[691, "examples-using-sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.TSNE": [[692, "examples-using-sklearn-manifold-tsne"]], "Examples using sklearn.manifold.locally_linear_embedding": [[693, "examples-using-sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[697, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[697, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[697, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[700, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[700, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[700, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[701, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[701, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[701, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "Examples using sklearn.metrics.RocCurveDisplay": [[702, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[702, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[702, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "Examples using sklearn.metrics.accuracy_score": [[703, "examples-using-sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[704, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[705, "examples-using-sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.auc": [[706, "examples-using-sklearn-metrics-auc"]], "Examples using sklearn.metrics.average_precision_score": [[707, "examples-using-sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.brier_score_loss": [[709, "examples-using-sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[712, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.classification_report": [[713, "examples-using-sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.completeness_score": [[717, "examples-using-sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.confusion_matrix": [[718, "examples-using-sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.consensus_score": [[719, "examples-using-sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.det_curve": [[727, "examples-using-sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.f1_score": [[729, "examples-using-sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.get_scorer": [[732, "examples-using-sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.hamming_loss": [[734, "examples-using-sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hinge_loss": [[735, "examples-using-sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.homogeneity_score": [[737, "examples-using-sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.jaccard_score": [[738, "examples-using-sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.log_loss": [[741, "examples-using-sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.make_scorer": [[742, "examples-using-sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.mean_absolute_error": [[745, "examples-using-sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[746, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_pinball_loss": [[748, "examples-using-sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[749, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_squared_error": [[750, "examples-using-sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[752, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.median_absolute_error": [[753, "examples-using-sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.mutual_info_score": [[755, "examples-using-sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[757, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[761, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise_distances": [[778, "examples-using-sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[779, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.precision_recall_curve": [[782, "examples-using-sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_score": [[784, "examples-using-sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.r2_score": [[785, "examples-using-sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.rand_score": [[786, "examples-using-sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.recall_score": [[787, "examples-using-sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.roc_auc_score": [[788, "examples-using-sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_curve": [[789, "examples-using-sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.root_mean_squared_error": [[790, "examples-using-sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.silhouette_samples": [[792, "examples-using-sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_score": [[793, "examples-using-sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.v_measure_score": [[795, "examples-using-sklearn-metrics-v-measure-score"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[797, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[798, "examples-using-sklearn-mixture-gaussianmixture"]], "Examples using sklearn.model_selection.FixedThresholdClassifier": [[799, "examples-using-sklearn-model-selection-fixedthresholdclassifier"]], "Examples using sklearn.model_selection.GridSearchCV": [[800, "examples-using-sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GroupKFold": [[801, "examples-using-sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[802, "examples-using-sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[803, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[804, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.KFold": [[805, "examples-using-sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[806, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[806, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[814, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RepeatedKFold": [[815, "examples-using-sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[816, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.ShuffleSplit": [[817, "examples-using-sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[818, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[819, "examples-using-sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[820, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[821, "examples-using-sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TunedThresholdClassifierCV": [[822, "examples-using-sklearn-model-selection-tunedthresholdclassifiercv"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[823, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "Examples using sklearn.model_selection.cross_val_predict": [[825, "examples-using-sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_score": [[826, "examples-using-sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_validate": [[827, "examples-using-sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.learning_curve": [[828, "examples-using-sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.permutation_test_score": [[829, "examples-using-sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.train_test_split": [[830, "examples-using-sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.validation_curve": [[831, "examples-using-sklearn-model-selection-validation-curve"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[832, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[833, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[834, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multioutput.ClassifierChain": [[835, "examples-using-sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[837, "examples-using-sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[839, "examples-using-sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[841, "examples-using-sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[842, "examples-using-sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[843, "examples-using-sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[846, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[847, "examples-using-sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[848, "examples-using-sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KernelDensity": [[849, "examples-using-sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[850, "examples-using-sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.NearestCentroid": [[851, "examples-using-sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestNeighbors": [[852, "examples-using-sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[853, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.kneighbors_graph": [[857, "examples-using-sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neural_network.BernoulliRBM": [[860, "examples-using-sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.MLPClassifier": [[861, "examples-using-sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPRegressor": [[862, "examples-using-sklearn-neural-network-mlpregressor"]], "Examples using sklearn.pipeline.FeatureUnion": [[863, "examples-using-sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.Pipeline": [[864, "examples-using-sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[865, "examples-using-sklearn-pipeline-make-pipeline"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[868, "examples-using-sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[869, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[871, "examples-using-sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[873, "examples-using-sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[874, "examples-using-sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.Normalizer": [[876, "examples-using-sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[877, "examples-using-sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[878, "examples-using-sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[879, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PowerTransformer": [[880, "examples-using-sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[881, "examples-using-sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.RobustScaler": [[882, "examples-using-sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.SplineTransformer": [[883, "examples-using-sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.StandardScaler": [[884, "examples-using-sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.TargetEncoder": [[885, "examples-using-sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.label_binarize": [[888, "examples-using-sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.minmax_scale": [[890, "examples-using-sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.quantile_transform": [[893, "examples-using-sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[897, "examples-using-sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[898, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[900, "examples-using-sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[901, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.set_config": [[902, "examples-using-sklearn-set-config"]], "Examples using sklearn.svm.LinearSVC": [[904, "examples-using-sklearn-svm-linearsvc"]], "Examples using sklearn.svm.NuSVR": [[907, "examples-using-sklearn-svm-nusvr"]], "Examples using sklearn.svm.OneClassSVM": [[908, "examples-using-sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.SVC": [[909, "examples-using-sklearn-svm-svc"]], "Examples using sklearn.svm.SVR": [[910, "examples-using-sklearn-svm-svr"]], "Examples using sklearn.svm.l1_min_c": [[911, "examples-using-sklearn-svm-l1-min-c"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[912, "examples-using-sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[913, "examples-using-sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.plot_tree": [[918, "examples-using-sklearn-tree-plot-tree"]], "Examples using sklearn.utils.Bunch": [[919, "examples-using-sklearn-utils-bunch"]], "Examples using sklearn.utils.check_random_state": [[927, "examples-using-sklearn-utils-check-random-state"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[936, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.extmath.density": [[938, "examples-using-sklearn-utils-extmath-density"]], "Examples using sklearn.utils.gen_even_slices": [[945, "examples-using-sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[949, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[950, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[951, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[952, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metaestimators.available_if": [[953, "examples-using-sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.shuffle": [[966, "examples-using-sklearn-utils-shuffle"]], "Examples using sklearn.utils.validation.check_is_fitted": [[976, "examples-using-sklearn-utils-validation-check-is-fitted"]], "Examples:": [[373, null], [374, null], [395, null], [405, null], [405, null], [406, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [410, null], [410, null], [410, null], [410, null], [410, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [412, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [415, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [418, null], [418, null], [418, null], [418, null], [981, null], [981, null], [981, null], [983, null], [984, null], [984, null], [984, null], [986, null], [986, null], [986, null], [987, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [989, null], [991, null], [991, null], [991, null], [991, null], [992, null], [992, null], [992, null], [992, null], [992, null], [993, null], [995, null], [995, null], [995, null], [995, null], [995, null], [996, null], [996, null], [997, null], [998, null], [998, null], [998, null], [998, null], [998, null], [998, null], [999, null], [1000, null], [1002, null], [1002, null], [1002, null], [1006, null], [1006, null], [1007, null], [1007, null], [1007, null], [1007, null], [1007, null], [1007, null], [1008, null], [1008, null], [1008, null], [1008, null], [1032, null]], "Exercise": [[1023, null], [1023, null], [1026, null], [1026, null]], "Exercise 1: Language identification": [[1028, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1028, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1028, "exercise-3-cli-text-classification-utility"]], "Exercises": [[1028, "exercises"]], "Exhausting the available resources": [[981, "exhausting-the-available-resources"]], "Exhaustive Grid Search": [[981, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[158, "exp-sine-squared-kernel"], [419, "exp-sine-squared-kernel"]], "Experimental / Under Development": [[1051, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[320, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental features": [[383, "experimental-features"]], "Explained variance score": [[992, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[231, "explicit-feature-map-approximation-for-rbf-kernels"]], "External Resources, Videos and Talks": [[1011, "external-resources-videos-and-talks"]], "External Tutorials": [[1011, "external-tutorials"]], "External dependencies": [[1035, "external-dependencies"]], "Extract noisy patches and reconstruct them using the dictionary": [[96, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[96, "extract-reference-patches"]], "Extracting features": [[367, "extracting-features"]], "Extracting features from text files": [[1028, "extracting-features-from-text-files"]], "Extremely Randomized Trees": [[416, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[235, "face-completion-with-a-multi-output-estimators"]], "Face recognition with eigenfaces": [[1024, "face-recognition-with-eigenfaces"]], "Faces dataset decompositions": [[93, "faces-dataset-decompositions"]], "Faces recognition example using eigenfaces and SVMs": [[4, "faces-recognition-example-using-eigenfaces-and-svms"]], "Factor Analysis": [[414, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[103, "factor-analysis-with-rotation-to-visualize-patterns"]], "Factor Analysis components - FA": [[93, "factor-analysis-components-fa"]], "Failure of Machine Learning to infer causal effects": [[166, "failure-of-machine-learning-to-infer-causal-effects"]], "FastICA on 2D point clouds": [[95, "fastica-on-2d-point-clouds"]], "Faster parser in fetch_openml": [[320, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[365, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[351, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[318, "feature-names-support"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Feature agglomeration": [[49, "feature-agglomeration"], [1009, "feature-agglomeration"], [1027, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[52, "feature-agglomeration-vs-univariate-selection"]], "Feature binarization": [[1002, "feature-binarization"]], "Feature discretization": [[307, "feature-discretization"]], "Feature extraction": [[417, "feature-extraction"]], "Feature hashing": [[417, "feature-hashing"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[416, "feature-importance-evaluation"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Feature normalization": [[173, "feature-normalization"]], "Feature scaling": [[1009, null]], "Feature selection": [[418, "feature-selection"]], "Feature selection as part of a pipeline": [[418, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[418, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[418, null]], "Feature transformations with ensembles of trees": [[114, "feature-transformations-with-ensembles-of-trees"]], "FeatureAgglomeration": [[409, null]], "FeatureHasher": [[352, "featurehasher"]], "FeatureHasher and DictVectorizer Comparison": [[352, "featurehasher-and-dictvectorizer-comparison"]], "FeatureUnion: composite feature spaces": [[410, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[125, "features-in-histogram-gradient-boosting-trees"]], "Fedora": [[396, "fedora"]], "Final conclusion": [[149, "final-conclusion"]], "Final remarks": [[55, "final-remarks"]], "Finding the Nearest Neighbors": [[995, "finding-the-nearest-neighbors"]], "First example": [[7, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[35, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[94, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[177, "fit-by-cubic-polynomial"]], "Fit models": [[191, "fit-models"], [281, "fit-models"]], "Fit models and plot results": [[55, "fit-models-and-plot-results"]], "Fit regression model": [[123, "fit-regression-model"], [295, "fit-regression-model"], [344, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[290, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[100, "fit-the-models"]], "Fit the regressors": [[176, "fit-the-regressors"], [176, "id2"]], "Fitting": [[381, "fitting"]], "Fitting SpectralBiclustering": [[18, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[199, "fitting-a-quantileregressor"]], "Fitting additional trees": [[416, "fitting-additional-trees"]], "Fitting additional weak-learners": [[416, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[178, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "Fitting an elliptic envelope": [[998, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[24, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[392, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1048, "fixed-models"]], "Fixes": [[1035, "fixes"]], "Flexibility of IterativeImputer": [[982, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[387, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[154, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Forest covertypes": [[374, "forest-covertypes"]], "Forest covertypes dataset": [[236, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[409, "fowlkes-mallows-scores"]], "FreeBSD": [[377, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[215, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[391, "frequently-asked-questions"]], "From binary to multiclass and multilabel": [[992, "from-binary-to-multiclass-and-multilabel"]], "From images": [[407, "module-sklearn.feature_extraction.image"]], "From occurrences to frequencies": [[1028, "from-occurrences-to-frequencies"]], "From text": [[407, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[378, null]], "Functions": [[407, "functions"], [407, "id1"]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[246, "gmm-initialization-methods"]], "GMM covariances": [[245, "gmm-covariances"]], "GPC examples": [[419, "gpc-examples"]], "Gamma loss for gradient boosting": [[321, "gamma-loss-for-gradient-boosting"]], "Gaussian Mixture": [[991, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[244, "gaussian-mixture-model-ellipsoids"]], "Gaussian Mixture Model Selection": [[248, "gaussian-mixture-model-selection"]], "Gaussian Mixture Model Sine Curve": [[249, "gaussian-mixture-model-sine-curve"]], "Gaussian Mixture Models": [[164, "gaussian-mixture-models"], [242, "gaussian-mixture-models"]], "Gaussian Naive Bayes": [[23, "gaussian-naive-bayes"], [994, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[22, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[419, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[419, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[148, "gaussian-process-for-machine-learning"], [164, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[419, "gaussian-processes"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Gaussian mixture models": [[991, "gaussian-mixture-models"]], "Gaussian process classification (GPC) on iris dataset": [[151, "gaussian-process-classification-gpc-on-iris-dataset"], [419, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Gaussian random projection": [[1004, "gaussian-random-projection"]], "General Concepts": [[393, "general-concepts"]], "General recommendations": [[361, "general-recommendations"]], "Generalized Linear Models": [[164, "generalized-linear-models"], [175, "generalized-linear-models"], [988, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[316, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[407, "generalized-linear-models-glm-for-regression"]], "Generate data": [[45, "generate-data"], [65, "generate-data"], [78, "generate-data"], [191, "generate-data"], [302, "generate-data"]], "Generate data with outliers": [[290, "generate-data-with-outliers"]], "Generate distorted image": [[96, "generate-distorted-image"]], "Generate sample data": [[18, "generate-sample-data"], [36, "generate-sample-data"], [53, "generate-sample-data"], [61, "generate-sample-data"], [76, "generate-sample-data"], [94, "generate-sample-data"], [95, "generate-sample-data"], [142, "generate-sample-data"], [232, "generate-sample-data"], [272, "generate-sample-data"], [295, "generate-sample-data"], [344, "generate-sample-data"]], "Generate sinusoidal data with noise": [[177, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[256, "generate-synthetic-data"]], "Generate synthetic dataset": [[22, "generate-synthetic-dataset"], [176, "generate-synthetic-dataset"], [176, "id1"], [181, "generate-synthetic-dataset"]], "Generate the data": [[62, "generate-the-data"], [64, "generate-the-data"], [80, "generate-the-data"]], "Generated datasets": [[375, "generated-datasets"]], "Generated documentation on GitHub Actions": [[379, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[11, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Generating polynomial features": [[1002, "generating-polynomial-features"]], "Generators for classification and clustering": [[375, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[375, "generators-for-decomposition"]], "Generators for manifold learning": [[375, "generators-for-manifold-learning"]], "Generators for regression": [[375, "generators-for-regression"]], "Generic dictionary learning": [[414, "generic-dictionary-learning"]], "Getting Started": [[392, "getting-started"]], "Getting reproducible results across multiple executions": [[361, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1016, "gitter"]], "Glossary of Common Terms and API Elements": [[393, "glossary-of-common-terms-and-api-elements"]], "Good practices": [[384, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[394, "governance-model-changes"]], "Gradient Boosting": [[2, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "Gradient Boosting Regression Trees for Poisson regression": [[197, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "Gradient boosting": [[168, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[416, "gradient-boosted-trees"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[416, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[416, null]], "Graph Routines": [[388, "graph-routines"]], "Graphical model and parametrization": [[997, "graphical-model-and-parametrization"]], "Grid-search": [[1023, "grid-search"]], "Grid-search and cross-validated estimators": [[1023, "grid-search-and-cross-validated-estimators"]], "Group Shuffle Split": [[413, "group-shuffle-split"]], "Group k-fold": [[413, "group-k-fold"]], "Grouping infrequent categories in OneHotEncoder": [[319, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[321, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "HDBSCAN": [[409, "hdbscan"]], "HDBSCAN: hierarchical density-based clustering": [[321, "hdbscan-hierarchical-density-based-clustering"]], "Hamming loss": [[992, "hamming-loss"]], "Handling Multicollinear Features": [[170, "handling-multicollinear-features"]], "Hash Functions": [[388, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[128, "hashing-feature-transformation-using-totally-random-trees"]], "HashingVectorizer": [[351, "hashingvectorizer"]], "Helper Functions": [[388, "helper-functions"]], "Helper function": [[158, "helper-function"]], "Helper function to plot embedding": [[219, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[989, "hessian-eigenmapping"]], "Hierarchical Clustering": [[409, "id11"]], "Hierarchical agglomerative clustering: Ward": [[1027, "hierarchical-agglomerative-clustering-ward"]], "Hierarchical clustering": [[409, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[65, "hierarchical-clustering-structured-vs-unstructured-ward"]], "Higher-level parallelism with joblib": [[366, "higher-level-parallelism-with-joblib"]], "Highlights": [[1035, "highlights"], [1038, "highlights"], [1039, "highlights"], [1042, "highlights"], [1043, "highlights"]], "Hinge loss": [[992, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[322, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Histogram-Based Gradient Boosting": [[416, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[318, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[409, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[391, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[391, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[391, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[391, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[391, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[391, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[391, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[391, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[361, "how-to-avoid-data-leakage"]], "How to contribute": [[379, "how-to-contribute"]], "How to make a good bug report": [[379, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[385, "how-to-optimize-for-speed"]], "HowAboutWe": [[1017, "id16"]], "Huber Regression": [[988, "huber-regression"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[179, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Hugging Face": [[1017, "id5"]], "Hyper-parameter optimizers": [[407, "hyper-parameter-optimizers"]], "Hyperparameter Robustness": [[53, "hyperparameter-robustness"]], "ICE vs. PDP": [[168, "ice-vs-pdp"]], "INFONEA": [[1017, "id24"]], "Illustration of GPC on the XOR dataset": [[419, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Illustration of Pipeline and GridSearchCV": [[70, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Image denoising using dictionary learning": [[96, "image-denoising-using-dictionary-learning"]], "Image denoising using kernel PCA": [[3, "image-denoising-using-kernel-pca"]], "Image feature extraction": [[417, "image-feature-extraction"]], "Implementation": [[995, "implementation"]], "Implementation decisions": [[391, "implementation-decisions"]], "Implementation details": [[1006, "implementation-details"], [1007, "implementation-details"]], "Implementing your own scoring object": [[992, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[310, "importance-of-feature-scaling"]], "Important notes regarding the internal cross-validation": [[408, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[320, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[322, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[317, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[316, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[982, "imputation-of-missing-values"], [1002, "imputation-of-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "In binary classification settings": [[266, "in-binary-classification-settings"]], "In multi-label settings": [[266, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[166, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[166, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[361, "inconsistent-preprocessing"]], "Incremental PCA": [[97, "incremental-pca"], [414, "incremental-pca"]], "Incremental learning": [[367, "incremental-learning"]], "Independent Component Analysis: ICA": [[1027, "independent-component-analysis-ica"]], "Independent component analysis (ICA)": [[414, "independent-component-analysis-ica"]], "Independent components - FastICA": [[93, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[317, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[999, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[54, "inductive-clustering"]], "Influence of the Input Data Representation": [[365, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[365, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[365, "influence-of-the-number-of-features"]], "Information Criterion": [[981, "information-criterion"]], "Information-criteria based model selection": [[988, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1002, "infrequent-categories"]], "Input and parameter validation": [[407, "module-sklearn.utils.validation"]], "Input data": [[409, null]], "Input validation": [[381, "input-validation"]], "Inria": [[1017, "id3"]], "Inspection": [[164, "inspection"], [165, "inspection"], [395, "inspection"]], "Installing nightly builds": [[377, "installing-nightly-builds"]], "Installing scikit-learn": [[396, "installing-scikit-learn"]], "Installing the development version of scikit-learn": [[377, "installing-the-development-version-of-scikit-learn"]], "Installing the latest release": [[396, "installing-the-latest-release"]], "Instantiation": [[381, "instantiation"]], "Intel Extension for Scikit-learn": [[396, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[416, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[320, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interactive example": [[1026, null]], "Interoperability and framework enhancements": [[1012, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[416, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[167, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[167, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[201, "interpreting-the-plots"]], "Introducing the set_output API": [[240, "introducing-the-set-output-api"]], "Introduction": [[989, "introduction"]], "Invariance with respect to prevalence": [[262, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1004, "inverse-transform"]], "Iris plants dataset": [[376, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Isolation Forest": [[998, "isolation-forest"]], "IsolationForest example": [[126, "isolationforest-example"]], "Isomap": [[989, "isomap"]], "Isomap Embedding": [[218, "isomap-embedding"]], "Isotonic": [[406, "isotonic"]], "Isotonic Regression": [[229, "isotonic-regression"]], "Isotonic regression": [[983, "isotonic-regression"]], "Issue Tracker Tags": [[379, "issue-tracker-tags"]], "Issues for New Contributors": [[379, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "J.P.Morgan": [[1017, "id1"]], "Jaccard similarity coefficient score": [[992, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[191, "joint-feature-selection-with-multi-task-lasso"]], "K-D Tree": [[995, "k-d-tree"]], "K-bins discretization": [[1002, "k-bins-discretization"]], "K-fold": [[413, "k-fold"]], "K-means": [[409, "k-means"]], "K-means Clustering": [[43, "k-means-clustering"]], "K-means clustering": [[1027, "k-means-clustering"]], "K-means clustering on text features": [[351, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[286, "k-nearest-neighbors-classifier"]], "KDDCup99 - SA dataset": [[236, "kddcup99-sa-dataset"]], "KDTree and BallTree Classes": [[995, "kdtree-and-balltree-classes"]], "KNN Based Imputation": [[315, "knn-based-imputation"]], "Kddcup 99 dataset": [[374, "kddcup-99-dataset"]], "Keeping the number of features constant": [[982, "keeping-the-number-of-features-constant"]], "Kernel Approximation": [[164, "kernel-approximation"], [172, "kernel-approximation"], [984, "kernel-approximation"]], "Kernel Density Estimate of Species Distributions": [[296, "kernel-density-estimate-of-species-distributions"]], "Kernel Density Estimation": [[287, "kernel-density-estimation"], [415, "kernel-density-estimation"]], "Kernel PCA": [[98, "kernel-pca"]], "Kernel Principal Component Analysis (kPCA)": [[414, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Kernel functions": [[1007, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[419, "kernel-operators"]], "Kernel ridge": [[149, "kernel-ridge"]], "Kernel ridge regression": [[985, "kernel-ridge-regression"]], "Kernels": [[407, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[419, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[318, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1043, "known-major-bugs"], [1044, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[188, "l1-penalty-and-sparsity-in-logistic-regression"]], "L1-based feature selection": [[418, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[181, "l1-based-models-for-sparse-signals"]], "L1-penalty case": [[345, "l1-penalty-case"]], "L2-penalty case": [[345, "l2-penalty-case"]], "LARS Lasso": [[988, "lars-lasso"]], "LDA": [[986, "lda"]], "Label Propagation": [[1005, "label-propagation"]], "Label Propagation digits active learning": [[326, "label-propagation-digits-active-learning"]], "Label Propagation digits: Demonstrating performance": [[325, "label-propagation-digits-demonstrating-performance"]], "Label Propagation learning a complex structure": [[327, "label-propagation-learning-a-complex-structure"]], "Label binarization": [[1003, "label-binarization"]], "Label encoding": [[1003, "label-encoding"]], "Label ranking average precision": [[992, "label-ranking-average-precision"]], "LabelBinarizer": [[1003, "labelbinarizer"]], "Lagged features for time series forecasting": [[11, "lagged-features-for-time-series-forecasting"]], "Laplacian kernel": [[990, "laplacian-kernel"]], "Lasso": [[181, "lasso"], [988, "lasso"]], "Lasso and Elastic Net": [[182, "lasso-and-elastic-net"]], "Lasso model selection via information criteria": [[185, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[186, "lasso-model-selection-aic-bic-cross-validation"]], "Lasso on dense and sparse data": [[183, "lasso-on-dense-and-sparse-data"]], "Lasso path using LARS": [[184, "lasso-path-using-lars"]], "Lasso via coordinate descent": [[186, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[186, "lasso-via-least-angle-regression"]], "Latent Dirichlet Allocation (LDA)": [[414, "latent-dirichlet-allocation-lda"]], "Learn the PCA basis": [[3, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[96, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[48, "learn-the-dictionary-of-images"]], "Learning Curve": [[261, "learning-curve"]], "Learning a graph structure": [[10, "learning-a-graph-structure"]], "Learning an embedding": [[293, "learning-an-embedding"]], "Learning and predicting": [[1019, "learning-and-predicting"]], "Learning curve": [[987, "learning-curve"]], "Learning git:": [[379, null]], "Least Angle Regression": [[988, "least-angle-regression"]], "Leave One Group Out": [[413, "leave-one-group-out"]], "Leave One Out (LOO)": [[413, "leave-one-out-loo"]], "Leave P Groups Out": [[413, "leave-p-groups-out"]], "Leave P Out (LPO)": [[413, "leave-p-out-lpo"]], "Ledoit-Wolf shrinkage": [[411, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[77, "ledoit-wolf-vs-oas-estimation"]], "Lessons learned": [[166, "lessons-learned"], [167, "lessons-learned"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[417, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[365, "limiting-working-memory"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Linear Models": [[988, "linear-models"]], "Linear Regression Example": [[193, "linear-regression-example"]], "Linear SVMs": [[1026, "linear-svms"]], "Linear algebra libraries": [[365, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[986, "linear-and-quadratic-discriminant-analysis"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[32, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Linear classifiers": [[407, "linear-classifiers"]], "Linear kernel": [[342, "linear-kernel"], [990, "linear-kernel"], [1026, "linear-kernel"]], "Linear model: from regression to sparsity": [[1026, "linear-model-from-regression-to-sparsity"]], "Linear models with regularization": [[167, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[167, "linear-models-with-sparse-coefficients"]], "Linear regression": [[1026, "linear-regression"]], "Linear support vector classifier": [[23, "linear-support-vector-classifier"]], "Link to R\u00b2 score, the coefficient of determination": [[992, null]], "Links": [[365, "links"]], "Linnerrud dataset": [[376, "linnerrud-dataset"]], "Linux": [[377, "linux"]], "Linux compilers from conda-forge": [[377, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[377, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Load Data": [[352, "load-data"]], "Load Data and Train a SVC": [[239, "load-data-and-train-a-svc"]], "Load Data and train model": [[227, "load-data-and-train-model"]], "Load and prepare data": [[268, "load-and-prepare-data"], [269, "load-and-prepare-data"], [310, "load-and-prepare-data"]], "Load and prepare data set": [[338, "load-and-prepare-data-set"]], "Load data": [[190, "load-data"]], "Load dataset": [[115, "load-dataset"]], "Load dataset and apply GridSearchCV": [[136, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[219, "load-digits-dataset"]], "Load some data to play with": [[341, "load-some-data-to-play-with"]], "Load the data": [[5, "load-the-data"], [48, "load-the-data"], [123, "load-the-data"], [286, "load-the-data"]], "Load the dataset": [[56, "load-the-dataset"]], "Load the dataset via OpenML": [[3, "load-the-dataset-via-openml"]], "Loaders": [[407, "loaders"]], "Loading Data from OpenML": [[311, "loading-data-from-openml"]], "Loading a dataset": [[281, "loading-a-dataset"]], "Loading an example dataset": [[1019, "loading-an-example-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[350, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[215, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[417, "loading-features-from-dicts"]], "Loading from external datasets": [[373, "loading-from-external-datasets"], [1019, null]], "Loading other datasets": [[373, "loading-other-datasets"]], "Loading text data": [[351, "loading-text-data"]], "Loading the 20 newsgroups dataset": [[1028, "loading-the-20-newsgroups-dataset"]], "Loading the data": [[146, "loading-the-data"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[88, "loading-the-iris-dataset"]], "Loading the redirect files": [[15, "loading-the-redirect-files"]], "Local Outlier Factor": [[998, "local-outlier-factor"]], "Local Tangent Space Alignment": [[989, "local-tangent-space-alignment"]], "Locally Linear Embedding": [[989, "locally-linear-embedding"]], "Locally Linear Embeddings": [[218, "locally-linear-embeddings"]], "Log loss": [[992, "log-loss"]], "Logistic Regression 3-class Classifier": [[180, "logistic-regression-3-class-classifier"]], "Logistic function": [[187, "logistic-function"]], "Logistic regression": [[988, "logistic-regression"]], "LogisticRegression wrapped by OneVsRestClassifier": [[281, "logisticregression-wrapped-by-onevsrestclassifier"]], "Look at the results": [[232, "look-at-the-results"], [344, "look-at-the-results"]], "Loss Functions": [[416, "loss-functions"]], "Lovely": [[1017, "id20"]], "Low-level parallelism": [[409, "low-level-parallelism"], [416, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[366, "lower-level-parallelism-with-openmp"]], "MARS": [[1017, "id28"]], "MNIST classification using multinomial logistic + L1": [[213, "mnist-classification-using-multinomial-logistic-l1"]], "MacPorts for Mac OSX": [[396, "macports-for-mac-osx"]], "Machinalis": [[1017, "id22"]], "Machine learning: the problem setting": [[1019, "machine-learning-the-problem-setting"]], "Mailing Lists": [[1016, "mailing-lists"]], "Main": [[6, "main"]], "Main takeaways": [[197, "main-takeaways"]], "Maintainer / core-developer information": [[383, "maintainer-core-developer-information"]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[379, "maintaining-backwards-compatibility"]], "Major version release": [[383, "major-version-release"]], "Majority Class Labels (Majority/Hard Voting)": [[416, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[130, "make-pipeline-to-preprocess-the-data"]], "Making a release": [[383, "making-a-release"]], "Making predictions": [[133, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[220, "manifold-learning-methods-on-a-severed-sphere"]], "Manifold learning": [[164, "manifold-learning"], [217, "manifold-learning"], [989, "manifold-learning"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[219, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Manually setting the decision threshold": [[408, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[253, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[309, "map-data-to-a-normal-distribution"]], "Mapping to a Gaussian distribution": [[1002, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1002, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[982, "marking-imputed-values"]], "Mathematical Definition": [[999, "mathematical-definition"]], "Mathematical Details": [[984, "mathematical-details"]], "Mathematical formulation": [[405, "mathematical-formulation"], [405, "id3"], [416, "mathematical-formulation"], [995, "mathematical-formulation"], [1006, "mathematical-formulation"], [1007, "mathematical-formulation"], [1008, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[986, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[986, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[992, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[158, "matern-kernel"], [419, "matern-kernel"]], "Max error": [[992, "max-error"]], "MaxAbsScaler": [[305, "maxabsscaler"]], "Mean Poisson, Gamma, and Tweedie deviances": [[992, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[409, "mean-shift"]], "Mean absolute error": [[992, "mean-absolute-error"]], "Mean absolute percentage error": [[992, "mean-absolute-percentage-error"]], "Mean squared error": [[992, "mean-squared-error"]], "Mean squared logarithmic error": [[992, "mean-squared-logarithmic-error"]], "Measure and plot the results": [[130, "measure-and-plot-the-results"]], "Median absolute error": [[992, "median-absolute-error"]], "Memory footprint": [[51, "memory-footprint"]], "Memory usage profiling": [[385, "memory-usage-profiling"]], "Merging Pull Requests": [[383, "merging-pull-requests"]], "Metadata Routing": [[233, "metadata-routing"], [321, "metadata-routing"], [393, "metadata-routing"], [399, "metadata-routing"], [1052, "metadata-routing"], [1052, "id1"], [1053, "metadata-routing"], [1054, "metadata-routing"]], "Metadata Routing Support": [[322, "metadata-routing-support"]], "Metadata Routing Support Status": [[399, "metadata-routing-support-status"]], "Metadata routing": [[407, "module-sklearn.utils.metadata_routing"]], "Methods": [[393, "methods"]], "Metrics": [[404, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[992, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "MinMaxScaler": [[305, "minmaxscaler"]], "Mini Batch K-Means": [[409, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[414, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[414, "mini-batch-dictionary-learning"]], "MiniBatchNMF: an online version of NMF": [[319, "minibatchnmf-an-online-version-of-nmf"]], "Minimal Cost-Complexity Pruning": [[1008, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1048, "minimal-dependencies"], [1049, "minimal-dependencies"]], "Minimum Covariance Determinant": [[411, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[79, "minimum-covariance-determinant-estimator"]], "Minor version release (also known as bug-fix release)": [[383, "minor-version-release-also-known-as-bug-fix-release"]], "Misc": [[1035, "misc"]], "Miscellaneous": [[164, "miscellaneous"], [225, "miscellaneous"], [407, "miscellaneous"], [1043, "miscellaneous"], [1043, "id40"], [1044, "miscellaneous"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1046, "id13"], [1047, "miscellaneous"], [1048, "miscellaneous"], [1051, "miscellaneous"]], "Misleading values on strongly correlated features": [[1000, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[160, "missing-value-imputation"], [164, "missing-value-imputation"]], "Missing Values Support": [[1008, "missing-values-support"]], "Missing information": [[162, "missing-information"]], "Missing value support for Random Forest": [[322, "missing-value-support-for-random-forest"]], "Missing values support": [[416, "missing-values-support"]], "Missing values support in decision trees": [[321, "missing-values-support-in-decision-trees"]], "Model Complexity Influence": [[5, "model-complexity-influence"]], "Model Compression": [[365, "model-compression"]], "Model Reshaping": [[365, "model-reshaping"]], "Model Selection": [[164, "model-selection"], [251, "model-selection"]], "Model Selection Enhancements and API Changes": [[1041, "model-selection-enhancements-and-api-changes"]], "Model Selection Interface": [[407, "model-selection-interface"]], "Model Training and Comparison": [[120, "model-training-and-comparison"]], "Model comparison": [[119, "model-comparison"]], "Model evaluation": [[392, "model-evaluation"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Model persistence": [[402, "model-persistence"]], "Model selection and evaluation": [[403, "model-selection-and-evaluation"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[100, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Model selection: choosing estimators and their parameters": [[1023, "model-selection-choosing-estimators-and-their-parameters"]], "Model selection: development and evaluation": [[981, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[981, "model-specific-cross-validation"]], "Model training and selection": [[145, "model-training-and-selection"], [248, "model-training-and-selection"]], "Model validation": [[407, "model-validation"]], "Model with metadata stripping": [[350, "model-with-metadata-stripping"]], "Model without metadata stripping": [[350, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Modeling non-linear feature interactions with kernels": [[2, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[2, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[11, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[302, "models-definition"]], "Models robustness to recover the ground truth weights": [[176, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[989, "modified-locally-linear-embedding"]], "Monitoring performance": [[379, "monitoring-performance"]], "Monotonic Constraints": [[127, "monotonic-constraints"], [416, "monotonic-constraints"]], "Monotonic constraints": [[125, "monotonic-constraints"]], "More control with warm_start": [[996, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[53, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[109, "multi-class-adaboosted-decision-trees"]], "Multi-class case": [[992, "multi-class-case"]], "Multi-class classification": [[1007, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[385, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[989, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[221, "multi-dimensional-scaling"]], "Multi-label case": [[992, "multi-label-case"]], "Multi-label confusion matrix": [[992, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[996, "multi-layer-perceptron"]], "Multi-layer perceptron": [[168, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[358, "multi-output-decision-tree-regression"]], "Multi-output problems": [[1008, "multi-output-problems"]], "Multi-task Elastic-Net": [[988, "multi-task-elastic-net"]], "Multi-task Lasso": [[988, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[407, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[1003, "multilabelbinarizer"]], "MultiOutputClassifier": [[993, "multioutputclassifier"]], "MultiOutputRegressor": [[993, "multioutputregressor"]], "Multiclass Receiver Operating Characteristic (ROC)": [[268, "multiclass-receiver-operating-characteristic-roc"]], "Multiclass and multilabel classification": [[992, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[388, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[993, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[993, "multiclass-classification"], [1026, null]], "Multiclass classification strategies": [[407, "multiclass-classification-strategies"]], "Multiclass methods": [[164, "multiclass-methods"], [277, "multiclass-methods"]], "Multiclass sparse logistic regression on 20newgroups": [[212, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Multiclass support": [[406, "multiclass-support"]], "Multiclass vs. multilabel fitting": [[1019, "multiclass-vs-multilabel-fitting"]], "Multiclass-multioutput classification": [[993, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[218, "multidimensional-scaling"]], "Multilabel": [[375, "multilabel"]], "Multilabel classification": [[234, "multilabel-classification"], [993, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[281, "multilabel-classification-using-a-classifier-chain"]], "Multilabel ranking metrics": [[407, "multilabel-ranking-metrics"], [992, "multilabel-ranking-metrics"]], "Multinomial Case": [[988, "multinomial-case"]], "Multinomial Naive Bayes": [[994, "multinomial-naive-bayes"]], "Multioutput methods": [[164, "multioutput-methods"], [280, "multioutput-methods"]], "Multioutput regression": [[993, "multioutput-regression"]], "Multiple modules": [[1043, "multiple-modules"], [1044, "multiple-modules"]], "Multiple vs. Single Imputation": [[982, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[982, "multivariate-feature-imputation"]], "Mutual Information based scores": [[409, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[409, "mutual-reachability-graph"]], "NMF with a beta-divergence": [[414, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[414, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[994, "naive-bayes"]], "Naive evaluation of the next hour bike demand regression": [[11, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[2, "naive-linear-regression"]], "Native Categorical Feature Support": [[311, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[317, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[315, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[294, "nearest-centroid-classification"]], "Nearest Centroid Classifier": [[995, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[995, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[164, "nearest-neighbors"], [284, "nearest-neighbors"], [995, "nearest-neighbors"]], "Nearest Neighbors Classification": [[286, "nearest-neighbors-classification"], [995, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[995, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[995, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[295, "nearest-neighbors-regression"]], "Nearest Shrunken Centroid": [[995, "nearest-shrunken-centroid"]], "Nearest neighbor and the curse of dimensionality": [[1026, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Nearest neighbors imputation": [[982, "nearest-neighbors-imputation"]], "Neighborhood Components Analysis": [[995, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[293, "neighborhood-components-analysis-illustration"]], "Nested cross-validation": [[1023, null]], "Nested versus non-nested cross-validation": [[264, "nested-versus-non-nested-cross-validation"]], "NetBSD": [[396, "netbsd"]], "Neural Networks": [[164, "neural-networks"], [298, "neural-networks"]], "Neural network models (supervised)": [[996, "neural-network-models-supervised"]], "Neural network models (unsupervised)": [[997, "neural-network-models-unsupervised"]], "New Estimator Classes": [[1036, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[317, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[317, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[317, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[320, "new-and-enhanced-displays"]], "New classes": [[1035, "new-classes"]], "New display model_selection.ValidationCurveDisplay": [[321, "new-display-model-selection-validationcurvedisplay"]], "New documentation improvements": [[317, "new-documentation-improvements"], [318, "new-documentation-improvements"]], "New features": [[1038, "new-features"], [1039, "new-features"], [1040, "new-features"], [1041, "new-features"], [1042, "new-features"]], "New plotting API": [[315, "new-plotting-api"]], "New self-training meta-estimator": [[317, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1011, "new-to-scientific-python"]], "Next steps": [[392, "next-steps"]], "Non-Negative Least Squares": [[988, "non-negative-least-squares"]], "Non-linear transformation": [[1002, "non-linear-transformation"]], "Non-negative components - NMF": [[93, "non-negative-components-nmf"]], "Non-negative least squares": [[192, "non-negative-least-squares"]], "Non-negative matrix factorization (NMF or NNMF)": [[414, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[31, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Normalization": [[1002, "normalization"]], "Normalized Discounted Cumulative Gain": [[992, "normalized-discounted-cumulative-gain"]], "Normalizer": [[305, "normalizer"]], "Note on MPS device support": [[404, "note-on-mps-device-support"]], "Notes": [[367, "notes"]], "Novelty Detection": [[998, "novelty-detection"]], "Novelty and Outlier Detection": [[998, "novelty-and-outlier-detection"]], "Novelty detection with Local Outlier Factor": [[998, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[289, "novelty-detection-with-local-outlier-factor-lof"]], "NumPy": [[384, "numpy"]], "Number of candidates and amount of resource at each iteration": [[271, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[381, "numerical-assertions-in-tests"]], "Nystroem Method for Kernel Approximation": [[984, "nystroem-method-for-kernel-approximation"]], "ONNX": [[402, "onnx"]], "OOB Errors for Random Forests": [[113, "oob-errors-for-random-forests"]], "OPTICS": [[409, "optics"]], "Obtaining predictions by cross-validation": [[413, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1017, "id19"]], "Older Versions": [[1035, "older-versions"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[211, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "One-class SVM with non-linear kernel (RBF)": [[337, "one-class-svm-with-non-linear-kernel-rbf"]], "One-vs-One multiclass ROC": [[268, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[268, "one-vs-rest-multiclass-roc"]], "OneVsOneClassifier": [[993, "onevsoneclassifier"]], "OneVsRestClassifier": [[993, "onevsrestclassifier"]], "Online One-Class SVM": [[318, "online-one-class-svm"], [1006, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[48, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Open problem: Stock Market Structure": [[1024, "open-problem-stock-market-structure"]], "Optical recognition of handwritten digits dataset": [[376, "optical-recognition-of-handwritten-digits-dataset"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[381, "optional-arguments"]], "Options to tune the decision threshold": [[408, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[411, "oracle-approximating-shrinkage"]], "Ordinary Least Squares": [[988, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[988, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[195, "ordinary-least-squares-and-ridge-regression-variance"]], "Original data": [[265, "original-data"], [305, "original-data"]], "Original image": [[51, "original-image"]], "Original points": [[293, "original-points"]], "Orthogonal Matching Pursuit": [[196, "orthogonal-matching-pursuit"]], "Orthogonal Matching Pursuit (OMP)": [[988, "orthogonal-matching-pursuit-omp"]], "Other changes": [[1035, "other-changes"]], "Other estimators and tasks": [[1012, "other-estimators-and-tasks"]], "Otto Group": [[1017, "id26"]], "Our community, our values": [[379, null]], "Our vanilla classifier": [[273, "our-vanilla-classifier"]], "Out of Bag Estimates": [[981, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[6, "out-of-core-classification-of-text-documents"]], "Out-of-core naive Bayes model fitting": [[994, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[998, "id1"]], "Outlier detection on a real data set": [[7, "outlier-detection-on-a-real-data-set"]], "Outlier detection with Local Outlier Factor (LOF)": [[290, "outlier-detection-with-local-outlier-factor-lof"]], "Outlier-robust regressors": [[407, "outlier-robust-regressors"]], "Outliers in the X direction": [[214, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[214, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1000, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[993, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[366, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[409, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[278, "overview-of-multiclass-training-meta-estimators"]], "Overview of outlier detection methods": [[998, "overview-of-outlier-detection-methods"]], "PCA example with Iris Data-set": [[99, "pca-example-with-iris-data-set"]], "PCA using randomized SVD": [[414, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1009, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1017, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[83, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[83, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[412, "plscanonical"]], "PLSRegression": [[412, "plsregression"]], "PLSSVD": [[412, "plssvd"]], "Packaging": [[1047, "packaging"]], "Pair Confusion Matrix": [[409, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[259, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[259, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise metrics": [[407, "pairwise-metrics"]], "Pairwise metrics, Affinities and Kernels": [[990, "pairwise-metrics-affinities-and-kernels"]], "Pandas": [[384, "pandas"]], "Pandas output with set_output API": [[320, "pandas-output-with-set-output-api"]], "Parallel NumPy and SciPy routines from numerical libraries": [[366, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallelism": [[366, "parallelism"], [981, "parallelism"]], "Parallelism, resource management, and configuration": [[366, "parallelism-resource-management-and-configuration"]], "Parallelization": [[416, "parallelization"]], "Parameter tuning using grid search": [[1028, "parameter-tuning-using-grid-search"]], "Parameters": [[393, "parameters"], [416, "parameters"]], "Parameters and init": [[381, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1007, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[168, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial Dependence and Individual Conditional Expectation plots": [[999, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[999, "partial-dependence-plots"]], "Partitioning the data": [[173, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[988, "passive-aggressive-algorithms"]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[417, "patch-extraction"]], "PeerIndex": [[1017, "id17"]], "People": [[1035, "people"], [1035, "id2"], [1035, "id5"], [1035, "id8"], [1035, "id11"], [1035, "id13"], [1035, "id15"], [1035, "id17"], [1036, "people"], [1036, "id3"], [1037, "people"], [1038, "people"]], "Perceptron": [[988, "perceptron"]], "Performance improvements": [[319, "performance-improvements"]], "Performing dimensionality reduction using LSA": [[351, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[198, "periodic-splines"]], "Periodic spline features": [[2, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[169, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[170, "permutation-importance-with-multicollinear-or-correlated-features"]], "Permutation feature importance": [[1000, "permutation-feature-importance"]], "Permutation test score": [[265, "permutation-test-score"], [413, "permutation-test-score"]], "Permutation-based feature importance": [[315, "permutation-based-feature-importance"]], "Pinball loss": [[992, "pinball-loss"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Pipeline compatibility": [[381, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[260, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[410, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[67, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"], [410, "pipelines-and-composite-estimators"]], "Pipelines: chaining pre-processors and estimators": [[392, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1009, null], [1024, "pipelining"]], "Pipelining: chaining a PCA and a logistic regression": [[71, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Platform-specific instructions": [[377, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[39, "plot-hierarchical-clustering-dendrogram"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[266, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[256, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[202, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Plot a PCA representation": [[88, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[350, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[268, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[268, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[181, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[236, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[132, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot classification boundaries with different SVM Kernels": [[342, "plot-classification-boundaries-with-different-svm-kernels"]], "Plot classification probability": [[28, "plot-classification-probability"]], "Plot data and the predicted probabilities": [[22, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[335, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot discrete decision boundary": [[126, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[136, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[133, "plot-individual-and-voting-regression-predictions"]], "Plot multi-class SGD on the iris dataset": [[206, "plot-multi-class-sgd-on-the-iris-dataset"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[189, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Plot number of features VS. cross-validation scores": [[145, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[126, "plot-path-length-decision-boundary"]], "Plot randomly generated classification dataset": [[89, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[90, "plot-randomly-generated-multilabel-dataset"]], "Plot regularization path": [[190, "plot-regularization-path"]], "Plot result": [[36, "plot-result"], [61, "plot-result"], [65, "plot-result"], [65, "id2"]], "Plot results": [[6, "plot-results"], [47, "plot-results"], [76, "plot-results"], [94, "plot-results"], [95, "plot-results"], [115, "plot-results"], [281, "plot-results"], [290, "plot-results"]], "Plot results functions": [[272, "plot-results-functions"]], "Plot support and time series": [[191, "plot-support-and-time-series"]], "Plot the BIC scores": [[248, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[266, "plot-the-precision-recall-curve"]], "Plot the best model": [[248, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[341, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[131, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot the decision surface of decision trees trained on the iris dataset": [[356, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Plot the marginal log-likelihood": [[176, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[266, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[325, "plot-the-most-uncertain-predictions"]], "Plot the results": [[48, "plot-the-results"], [80, "plot-the-results"], [133, "plot-the-results"], [162, "plot-the-results"]], "Plot the results on an image": [[45, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[336, "plot-the-support-vectors-in-linearsvc"]], "Plot the true and estimated coefficients": [[176, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[177, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plotting": [[302, "plotting"], [407, "plotting"], [407, "id7"], [407, "id9"]], "Plotting API Overview": [[386, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[255, "plotting-cross-validated-predictions"]], "Plotting Functions": [[32, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[261, "plotting-learning-curves-and-checking-models-scalability"]], "Plotting Validation Curves": [[275, "plotting-validation-curves"]], "Plotting four circles": [[64, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[237, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[237, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[237, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[176, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[18, "plotting-results"]], "Plotting the ROC Curve": [[239, "plotting-the-roc-curve"]], "Plotting the Results": [[311, "plotting-the-results"]], "Plotting the result": [[263, "plotting-the-result"]], "Plotting the results": [[62, "plotting-the-results"], [110, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[201, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[64, "plotting-two-circles"]], "Plotting with Multiple Axes": [[386, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[197, "poisson-regression-and-non-normal-loss"]], "Polars output in set_output": [[322, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[984, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[198, "polynomial-and-spline-interpolation"]], "Polynomial features": [[1002, "polynomial-features"]], "Polynomial kernel": [[342, "polynomial-kernel"], [990, "polynomial-kernel"], [1026, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[988, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Possible solutions": [[55, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[355, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Post-fit model tuning": [[407, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[273, "post-hoc-tuning-the-cut-off-point-of-decision-function"]], "Post-tuning the decision threshold": [[408, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[253, "post-tuning-the-decision-threshold-for-cost-sensitive-learning"]], "PowerTransformer": [[305, "powertransformer"]], "Pre-test vs. post-test analysis": [[262, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[992, "precision-recall-and-f-measures"]], "Precision-Recall": [[266, "precision-recall"]], "Precomputed sparse nearest neighbors graph": [[315, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[413, "predefined-fold-splits-validation-sets"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Prediction Latency": [[8, "prediction-latency"], [365, "prediction-latency"]], "Prediction Throughput": [[365, "prediction-throughput"]], "Preparing a release PR": [[383, "preparing-a-release-pr"]], "Preparing the data": [[110, "preparing-the-data"], [125, "preparing-the-data"], [173, "preparing-the-data"]], "Preprocessing": [[164, "preprocessing"], [304, "preprocessing"]], "Preprocessing data": [[1002, "preprocessing-data"]], "Preprocessing numerical variables": [[167, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[168, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[168, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[168, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[84, "principal-component-regression-vs-partial-least-squares-regression"]], "Principal component analysis (PCA)": [[414, "principal-component-analysis-pca"]], "Principal component analysis: PCA": [[1027, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1052, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[419, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Probability Calibration curves": [[23, "probability-calibration-curves"]], "Probability Calibration for 3-class classification": [[24, "probability-calibration-for-3-class-classification"]], "Probability calibration": [[406, "probability-calibration"]], "Probability calibration of classifiers": [[22, "probability-calibration-of-classifiers"]], "Processing the dataset": [[167, "processing-the-dataset"]], "Productivity and sanity-preserving tips": [[387, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[385, "profiling-python-code"]], "Profiling compiled extensions": [[385, "profiling-compiled-extensions"]], "Project template:": [[381, null]], "Projecting data: PCA vs. KernelPCA": [[98, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[98, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[84, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[11, "proper-next-hour-forecasting-evaluation"]], "Pros:": [[991, null], [991, null]], "Provide a failing code example with minimal comments": [[384, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[379, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[215, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1013, "purpose-of-this-document"]], "Purpose of this example": [[201, "purpose-of-this-example"]], "Putting it all together": [[1024, "putting-it-all-together"]], "PyTorch Support": [[404, "pytorch-support"]], "Python API": [[366, "python-api"]], "Python package and dataset imports, load dataset": [[231, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[385, "python-cython-or-c-c"]], "QDA": [[986, "qda"]], "Qualitative analysis of the impact of features on linear model predictions": [[2, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[351, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[988, "quantile-regression"]], "Quantile Regressor": [[318, "quantile-regressor"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[319, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "Quantile regression": [[199, "quantile-regression"]], "QuantileTransformer (Gaussian output)": [[305, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[305, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[988, "ransac-random-sample-consensus"]], "RBF SVM parameters": [[338, "rbf-svm-parameters"]], "RBF kernel": [[342, "rbf-kernel"], [990, "rbf-kernel"]], "RBF kernel (Radial Basis Function)": [[1026, "rbf-kernel-radial-basis-function"]], "RCV1 dataset": [[374, "rcv1-dataset"]], "ROC AUC now supports multiclass classification": [[315, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[239, "roc-curve-with-visualization-api"]], "ROC curve showing a specific class": [[268, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[268, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[268, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[268, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[984, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[419, "radial-basis-function-rbf-kernel"]], "Rand index": [[409, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[170, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[416, "random-forests"]], "Random Numbers": [[381, "random-numbers"]], "Random Projection": [[1004, "random-projection"]], "Random data": [[265, "random-data"]], "Random forests and other randomized tree ensembles": [[416, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[413, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1009, "random-projections"]], "Randomized Parameter Optimization": [[981, "randomized-parameter-optimization"]], "Rangespan": [[1017, "id11"]], "Ranking loss": [[992, "ranking-loss"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Rational quadratic kernel": [[419, "rational-quadratic-kernel"]], "Reading the existing code base": [[379, "reading-the-existing-code-base"]], "Real world datasets": [[374, "real-world-datasets"]], "Real-world data set": [[73, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[269, "receiver-operating-characteristic-roc-with-cross-validation"]], "Receiver operating characteristic (ROC)": [[992, "receiver-operating-characteristic-roc"]], "Recently deprecated": [[407, "recently-deprecated"]], "Recognizing hand-written digits": [[30, "recognizing-hand-written-digits"]], "Recommendation": [[374, null]], "Recommendation Engine packages": [[1012, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[3, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[144, "recursive-feature-elimination"], [418, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "Reference": [[418, null], [418, null]], "References": [[3, null], [9, "references"], [23, "references"], [25, "references"], [79, "references"], [112, "references"], [173, "references"], [181, "references"], [185, null], [259, null], [278, "references"], [296, "references"], [374, null], [374, null], [374, null], [374, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [417, null], [419, "references"], [982, "references"], [982, null], [999, null], [1002, null], [1002, null], [1005, null], [1005, null]], "References:": [[78, null], [109, null], [169, null], [264, null], [265, null], [373, null], [374, null], [405, null], [405, null], [405, null], [406, null], [409, null], [409, null], [409, null], [411, null], [411, null], [411, null], [411, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [417, null], [417, null], [981, null], [981, null], [984, null], [985, null], [986, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [988, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [989, null], [990, null], [990, null], [992, null], [992, null], [992, null], [992, null], [992, null], [992, null], [993, null], [993, null], [993, null], [995, null], [997, null], [998, null], [998, null], [998, null], [998, null], [1000, null], [1004, null], [1004, null], [1004, null], [1006, null], [1006, null], [1007, null]], "Refitting and updating parameters": [[1019, "refitting-and-updating-parameters"]], "Region of Practical Equivalence": [[259, "region-of-practical-equivalence"]], "Regression": [[157, "regression"], [988, "regression"], [996, "regression"], [1006, "regression"], [1007, "regression"], [1008, "regression"]], "Regression criteria": [[1008, "regression-criteria"]], "Regression metrics": [[407, "regression-metrics"], [992, "regression-metrics"]], "RegressorChain": [[993, "regressorchain"]], "Regressors with variable selection": [[407, "regressors-with-variable-selection"]], "Regularization": [[996, "regularization"]], "Regularization path of L1- Logistic Regression": [[190, "regularization-path-of-l1-logistic-regression"]], "Related Projects": [[1012, "related-projects"]], "Related changes": [[1042, "related-changes"]], "Related links:": [[373, null]], "Relation to impurity-based importance in trees": [[1000, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[164, "release-highlights"], [314, "release-highlights"]], "Release Highlights for scikit-learn 0.22": [[315, "release-highlights-for-scikit-learn-0-22"]], "Release Highlights for scikit-learn 0.23": [[316, "release-highlights-for-scikit-learn-0-23"]], "Release Highlights for scikit-learn 0.24": [[317, "release-highlights-for-scikit-learn-0-24"]], "Release Highlights for scikit-learn 1.0": [[318, "release-highlights-for-scikit-learn-1-0"]], "Release Highlights for scikit-learn 1.1": [[319, "release-highlights-for-scikit-learn-1-1"]], "Release Highlights for scikit-learn 1.2": [[320, "release-highlights-for-scikit-learn-1-2"]], "Release Highlights for scikit-learn 1.3": [[321, "release-highlights-for-scikit-learn-1-3"]], "Release Highlights for scikit-learn 1.4": [[322, "release-highlights-for-scikit-learn-1-4"]], "Release History": [[1033, "release-history"]], "Release checklist": [[383, "release-checklist"]], "Releasing": [[383, "releasing"]], "Remarks": [[230, "remarks"]], "Removed modules": [[1035, "removed-modules"]], "Removing features with low variance": [[418, "removing-features-with-low-variance"]], "Repeated K-Fold": [[413, "repeated-k-fold"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[402, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[302, "restricted-boltzmann-machine-features-for-digit-classification"]], "Restricted Boltzmann machines": [[997, "restricted-boltzmann-machines"]], "Results interpretation": [[281, "results-interpretation"]], "Retrieve dataframes from OpenML": [[315, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[10, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[6, "reuters-dataset-related-routines"]], "Rich HTML representation": [[228, "rich-html-representation"]], "Rich visual representation of estimators": [[316, "rich-visual-representation-of-estimators"]], "Ridge Complexity": [[988, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[201, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Ridge regression and classification": [[988, "ridge-regression-and-classification"]], "Roadmap": [[1013, "roadmap"]], "Robust Covariance Estimation": [[411, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[78, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "Robust linear estimator fitting": [[203, "robust-linear-estimator-fitting"]], "Robust linear model estimation using RANSAC": [[200, "robust-linear-model-estimation-using-ransac"]], "Robust vs Empirical covariance estimate": [[79, "robust-vs-empirical-covariance-estimate"]], "RobustScaler": [[305, "robustscaler"]], "Robustness of cross-validation results": [[361, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[988, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[981, "robustness-to-failure"]], "Roles And Responsibilities": [[394, "roles-and-responsibilities"]], "Rolling your own estimator": [[381, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[233, "routing-meta-estimator"]], "Run the benchmark": [[56, "run-the-benchmark"]], "Run the code and plot the results": [[5, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[263, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[377, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[992, "r2-score-the-coefficient-of-determination"]], "SGD": [[1006, "id5"]], "SGD: Maximum margin separating hyperplane": [[209, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Penalties": [[208, "sgd-penalties"]], "SGD: Weighted samples": [[210, "sgd-weighted-samples"]], "SGD: convex loss functions": [[207, "sgd-convex-loss-functions"]], "SKLEARN_ASSUME_FINITE": [[366, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[366, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[366, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[366, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[366, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[366, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[366, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[366, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[366, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[366, "sklearn-working-memory"]], "SVC": [[1007, "svc"]], "SVM Exercise": [[138, "svm-exercise"]], "SVM Margins Example": [[343, "svm-margins-example"]], "SVM Tie Breaking Example": [[346, "svm-tie-breaking-example"]], "SVM with custom kernel": [[334, "svm-with-custom-kernel"]], "SVM-Anova: SVM with univariate feature selection": [[341, "svm-anova-svm-with-univariate-feature-selection"]], "SVM: Maximum margin separating hyperplane": [[339, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[340, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM: Weighted samples": [[347, "svm-weighted-samples"]], "SVR": [[1007, "svr"]], "Sample images": [[373, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[260, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Sample weight support": [[416, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[316, "sample-weight-support-for-lasso-and-elasticnet"]], "Samples generator": [[407, "samples-generator"]], "Scalability and stability improvements to KMeans": [[316, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[173, "scalable-learning-with-polynomial-kernel-approximation"]], "Scale Invariance": [[53, "scale-invariance"]], "Scaling data with outliers": [[1002, "scaling-data-with-outliers"]], "Scaling features to a range": [[1002, "scaling-features-to-a-range"]], "Scaling sparse data": [[1002, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[345, "scaling-the-regularization-parameter-for-svcs"]], "Scaling up the One-Class SVM": [[998, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[367, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[88, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[83, "scatter-plot-of-scores"]], "Scikit-learn compatibility checker": [[407, "module-sklearn.utils.estimator_checks"]], "Scikit-learn governance and decision-making": [[394, "scikit-learn-governance-and-decision-making"]], "Scikit-learn object discovery": [[407, "module-sklearn.utils.discovery"]], "Score, and cross-validated scores": [[1023, "score-and-cross-validated-scores"]], "Scores and probabilities": [[1007, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[981, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[7, "second-example"]], "Second experiment: varying number of classes and clusters": [[35, "second-experiment-varying-number-of-classes-and-clusters"]], "Section contents": [[1019, null]], "Security": [[1053, "security"]], "Security & Maintainability Limitations": [[402, "security-maintainability-limitations"]], "See Also:": [[264, null], [410, null]], "Segmenting the picture of greek coins in regions": [[44, "segmenting-the-picture-of-greek-coins-in-regions"]], "Selecting Lasso via an information criterion": [[186, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[186, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[70, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[58, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Self Training": [[1005, "self-training"]], "Semi Supervised Classification": [[164, "semi-supervised-classification"], [324, "semi-supervised-classification"]], "Semi-supervised Classification on a Text Dataset": [[329, "semi-supervised-classification-on-a-text-dataset"]], "Semi-supervised learning": [[325, "semi-supervised-learning"], [1005, "semi-supervised-learning"]], "Sequence similarity matrix under the kernel": [[157, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[418, "sequential-feature-selection"]], "Serving the model artifact": [[402, "serving-the-model-artifact"]], "Setting regularization parameter": [[988, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[988, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[215, "severity-model-gamma-distribution"]], "Shape of the data arrays": [[1019, null]], "Shrinkage": [[1026, "shrinkage"]], "Shrinkage and Covariance Estimator": [[986, "shrinkage-and-covariance-estimator"]], "Shrinkage and sparsity with logistic regression": [[1026, null]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[76, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Shrinkage via learning rate": [[416, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[411, "shrunk-covariance"]], "Sigmoid": [[406, "sigmoid"]], "Sigmoid kernel": [[342, "sigmoid-kernel"], [990, "sigmoid-kernel"], [1026, "sigmoid-kernel"]], "Silhouette Coefficient": [[409, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[288, "simple-1d-kernel-density-estimation"]], "Simple Pipeline": [[233, "simple-pipeline"]], "Single estimator versus bagging: bias-variance decomposition": [[112, "single-estimator-versus-bagging-bias-variance-decomposition"]], "Single label": [[375, "single-label"]], "Skewed Chi Squared Kernel": [[984, "skewed-chi-squared-kernel"]], "Social Media": [[1016, "social-media"]], "Solvers": [[988, "solvers"]], "Sparse coding with a precomputed dictionary": [[102, "sparse-coding-with-a-precomputed-dictionary"], [414, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[93, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1002, null]], "Sparse inverse covariance": [[411, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[80, "sparse-inverse-covariance-estimation"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[414, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1004, "sparse-random-projection"]], "Sparsity": [[417, "sparsity"], [1026, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[194, "sparsity-example-fitting-only-features-1-and-2"]], "Species distribution dataset": [[374, "species-distribution-dataset"]], "Species distribution modeling": [[9, "species-distribution-modeling"]], "Specific models": [[381, "specific-models"]], "Specifying an objective metric": [[981, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[981, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[405, "spectral-biclustering"]], "Spectral Clustering Graphs": [[409, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[405, "spectral-co-clustering"]], "Spectral Embedding": [[989, "spectral-embedding"]], "Spectral clustering": [[409, "spectral-clustering"]], "Spectral clustering for image segmentation": [[64, "spectral-clustering-for-image-segmentation"]], "Spectral embedding for non-linear dimensionality reduction": [[218, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "Spline Transformers": [[318, "spline-transformers"]], "Spline transformer": [[1002, "spline-transformer"]], "Splitter Classes": [[407, "splitter-classes"]], "Splitter Functions": [[407, "splitter-functions"]], "Spotify": [[1017, "id2"]], "Sprints": [[0, "sprints"]], "Stack of predictors on a single data set": [[130, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[416, "stacked-generalization"]], "Stacking Classifier and Regressor": [[315, "stacking-classifier-and-regressor"]], "Stalled and Unclaimed Issues": [[379, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[379, "stalled-pull-requests"]], "Standard replies for reviewing": [[387, "standard-replies-for-reviewing"]], "StandardScaler": [[305, "standardscaler"]], "Standardization, or mean removal and variance scaling": [[1002, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1013, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[259, "statistical-comparison-of-models-using-grid-search"]], "Statistical learning": [[1022, null]], "Statistical learning with Python": [[1012, "statistical-learning-with-python"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1025, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Stochastic Gradient Descent": [[1006, "stochastic-gradient-descent"]], "Stochastic Gradient Descent - SGD": [[988, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1006, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[997, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1006, "stopping-criterion"]], "Strategies comparison": [[278, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[367, "strategies-to-scale-computationally-bigger-data"]], "Stratified Shuffle Split": [[413, "stratified-shuffle-split"]], "Stratified k-fold": [[413, "stratified-k-fold"]], "StratifiedGroupKFold": [[413, "stratifiedgroupkfold"]], "Streaming instances": [[367, "streaming-instances"]], "Submitting a bug report or a feature request": [[379, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1013, "subpackage-specific-goals"]], "Subsampling": [[416, "subsampling"]], "Successive Halving Iterations": [[271, "successive-halving-iterations"]], "Successive Halving estimators for tuning hyper-parameters": [[317, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Summarizing the key points": [[402, "summarizing-the-key-points"]], "Summary": [[23, "summary"], [120, "summary"], [352, "summary"]], "Summary of cross-validation approach": [[186, "summary-of-cross-validation-approach"]], "Supervised learning": [[1015, "supervised-learning"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1026, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "Support": [[1016, "support"]], "Support Vector Machines": [[164, "support-vector-machines"], [333, "support-vector-machines"], [1007, "support-vector-machines"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[344, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Support for Array API": [[1052, "support-for-array-api"], [1053, "support-for-array-api"], [1054, "support-for-array-api"]], "Support for Array API-compatible inputs": [[404, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1052, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1053, "support-for-building-with-meson"]], "Support for missing values": [[125, "support-for-missing-values"]], "Support for quantile loss": [[125, "support-for-quantile-loss"]], "Support vector machines (SVMs)": [[1026, "support-vector-machines-svms"]], "Swiss Roll": [[222, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[222, "swiss-roll-and-swiss-hole-reduction"]], "Swiss-Hole": [[222, "swiss-hole"]], "Synthetic dataset": [[384, "synthetic-dataset"]], "Synthetic example": [[73, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[218, "t-distributed-stochastic-neighbor-embedding"]], "Table Of Contents": [[368, "table-of-contents"]], "Table of Contents": [[391, "table-of-contents"]], "Take-home messages": [[259, "take-home-messages"]], "Target Encoder": [[1002, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[312, "target-encoder-s-internal-cross-fitting"]], "Target Types": [[393, "target-types"]], "Target format": [[993, "target-format"], [993, "id5"], [993, "id8"], [993, "id10"]], "TargetEncoder: a new category encoding strategy": [[321, "targetencoder-a-new-category-encoding-strategy"]], "Technical Committee": [[394, "technical-committee"]], "Test dependencies": [[377, "test-dependencies"]], "Test with permutations the significance of a classification score": [[265, "test-with-permutations-the-significance-of-a-classification-score"]], "Testing Functions": [[388, "testing-functions"]], "Testing and improving test coverage": [[379, "testing-and-improving-test-coverage"]], "Text feature extraction": [[417, "text-feature-extraction"]], "TfidfVectorizer": [[352, "tfidfvectorizer"]], "Tf\u2013idf term weighting": [[417, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[374, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[417, "the-bag-of-words-representation"]], "The Digit Dataset": [[87, "the-digit-dataset"]], "The Dirichlet Process": [[991, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[197, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[88, "the-iris-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[230, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "The Johnson-Lindenstrauss lemma": [[1004, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[374, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[387, "the-meson-build-backend"]], "The Olivetti faces dataset": [[374, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[278, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[266, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[253, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[413, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The curse of dimensionality": [[1026, "the-curse-of-dimensionality"]], "The data": [[84, "the-data"]], "The dataset": [[257, "the-dataset"]], "The dataset: simulated hourly wages": [[166, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[167, "the-dataset-wages"]], "The diabetes dataset": [[273, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[278, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[167, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[167, "the-problem-of-correlated-variables"]], "The problem solved in clustering": [[1027, null]], "The problem solved in supervised learning": [[1026, null]], "The scikit-learn.org web site": [[383, "the-scikit-learn-org-web-site"]], "The scoring parameter: defining model evaluation rules": [[992, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[214, "theil-sen-regression"]], "Theil-Sen estimator: generalized-median-based estimator": [[988, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical bounds": [[230, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[233, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[396, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[413, "time-series-split"]], "Time-based cross-validation": [[2, "time-based-cross-validation"]], "Time-related feature engineering": [[2, "time-related-feature-engineering"]], "Time-steps as categories": [[2, "time-steps-as-categories"]], "Timing and accuracy plots": [[231, "timing-and-accuracy-plots"]], "Tips and Tricks": [[365, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[380, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[981, "tips-for-parameter-search"]], "Tips for performance": [[380, "tips-for-performance"]], "Tips on Practical Use": [[996, "tips-on-practical-use"], [1006, "tips-on-practical-use"], [1007, "tips-on-practical-use"]], "Tips on practical use": [[989, "tips-on-practical-use"], [1008, "tips-on-practical-use"]], "Tips to ease development": [[380, "tips-to-ease-development"]], "Tokenizing text with scikit-learn": [[1028, "tokenizing-text-with-scikit-learn"]], "Tools": [[404, "tools"]], "Top terms per cluster": [[351, "top-terms-per-cluster"]], "Top-k accuracy score": [[992, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[13, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Total impurity of leaves vs effective alphas of pruned tree": [[355, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[416, "totally-random-trees-embedding"]], "Toy datasets": [[376, "toy-datasets"]], "Tracking feature names in a pipeline": [[410, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[988, null]], "Train and Persist the Model": [[402, "train-and-persist-the-model"]], "Train classifiers": [[338, "train-classifiers"]], "Train error vs Test error": [[272, "train-error-vs-test-error"]], "Train models on the diabetes dataset": [[237, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[359, "train-tree-classifier"]], "Training": [[302, "training"], [995, "training"]], "Training SVC model and plotting decision boundaries": [[342, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[239, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[312, "training-a-ridge-regressor"]], "Training a classifier": [[1028, "training-a-classifier"]], "Training and Evaluating Pipelines with Different Encoders": [[311, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[110, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[133, "training-classifiers"]], "Training of the model": [[126, "training-of-the-model"]], "Training set and testing set": [[1019, null], [1026, null]], "Training the AdaBoostClassifier": [[109, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[201, "training-the-ridge-regressor"]], "Transform": [[995, "transform"]], "Transform data": [[83, "transform-data"]], "Transformers and pre-processors": [[392, "transformers-and-pre-processors"]], "Transforming target in regression": [[410, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1003, "transforming-the-prediction-target-y"]], "Translations of scikit-learn documentation": [[1012, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1008, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[315, "tree-pruning"]], "Tree structure": [[359, "tree-structure"]], "Tree-based feature selection": [[418, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[169, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[378, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[2, "trigonometric-features"]], "Troubleshooting": [[396, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[414, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Tuning hyper-parameters": [[257, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[253, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[253, "tuning-the-decision-threshold"], [273, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[408, "tuning-the-decision-threshold-for-class-prediction"]], "Tuning the hyper-parameters of an estimator": [[981, "tuning-the-hyper-parameters-of-an-estimator"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[135, "tutorial-exercises"], [164, "tutorial-exercises"]], "Tutorial setup": [[1028, "tutorial-setup"]], "Tweedie regression on insurance claims": [[215, "tweedie-regression-on-insurance-claims"]], "Two-class AdaBoost": [[111, "two-class-adaboost"]], "Type casting": [[1019, "type-casting"]], "Type of return values and fitted attributes": [[404, "type-of-return-values-and-fitted-attributes"]], "Types": [[380, "types"]], "T\u00e9l\u00e9com ParisTech": [[1017, "id7"]], "Unbalanced problems": [[1007, "unbalanced-problems"]], "Under Development": [[1030, "under-development"]], "Underfitting vs. Overfitting": [[274, "underfitting-vs-overfitting"]], "Understanding the decision tree structure": [[359, "understanding-the-decision-tree-structure"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Univariate feature imputation": [[982, "univariate-feature-imputation"]], "Univariate feature selection": [[142, "id1"], [418, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[982, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[381, "universal-attributes"]], "Unlabeled entries in y": [[1005, null]], "Unsupervised Nearest Neighbors": [[995, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1009, "unsupervised-dimensionality-reduction"]], "Unsupervised learning": [[1029, "unsupervised-learning"]], "Unsupervised learning: seeking representations of the data": [[1027, "unsupervised-learning-seeking-representations-of-the-data"]], "Unweighted feature selection": [[399, "unweighted-feature-selection"]], "Usage": [[406, "usage"], [410, "usage"], [410, "id1"], [416, "usage"], [416, "id24"], [416, "id25"], [416, "id27"], [416, "id35"], [988, "usage"]], "Usage Examples": [[399, "usage-examples"]], "Use markdown formatting": [[384, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[387, "useful-pytest-aliases-and-flags"]], "User Guide": [[1030, "user-guide"]], "User Questions": [[1016, "user-questions"]], "Using Cython": [[385, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[306, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Using None or RandomState instances, and repeated calls to fit and split": [[361, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[380, "using-openmp"]], "Using a debugger, gdb": [[385, "using-a-debugger-gdb"]], "Using cross-validation": [[988, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[413, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[127, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[385, "using-gprof"]], "Using kernels": [[1026, "using-kernels"]], "Using multiple metric evaluation": [[992, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[146, "using-negative-tolerance-values"]], "Using scikit-learn": [[391, "using-scikit-learn"]], "Using stop words": [[417, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[385, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[385, "using-yep-and-gperftools"]], "Utilities for Developers": [[388, "utilities-for-developers"]], "Utilities for optimal mathematical operations": [[407, "module-sklearn.utils.extmath"]], "Utilities for parallel computing": [[407, "module-sklearn.utils.parallel"]], "Utilities for random sampling": [[407, "module-sklearn.utils.random"]], "Utilities to deal with multiclass target in classifiers": [[407, "module-sklearn.utils.multiclass"]], "Utilities to handle weights based on class labels": [[407, "module-sklearn.utils.class_weight"]], "Utilities to operate on arrays": [[407, "module-sklearn.utils.arrayfuncs"]], "Utilities to work with graphs": [[407, "module-sklearn.utils.graph"]], "Utilities to work with sparse matrices and arrays": [[407, "module-sklearn.utils.sparsefuncs"]], "Utilities used in meta-estimators": [[407, "module-sklearn.utils.metaestimators"]], "Validation Tools": [[388, "validation-tools"]], "Validation curve": [[987, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[987, "validation-curves-plotting-scores-to-evaluate-models"]], "Vanilla predictive model": [[253, "vanilla-predictive-model"]], "Variational Bayesian Gaussian Mixture": [[991, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[50, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Varying regularization in Multi-layer Perceptron": [[299, "varying-regularization-in-multi-layer-perceptron"]], "Varying the metric": [[409, "varying-the-metric"]], "Vector Quantization Example": [[51, "vector-quantization-example"]], "Vectorizing a large text corpus with the hashing trick": [[417, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1035, "version-0-10"]], "Version 0.11": [[1035, "version-0-11"]], "Version 0.12": [[1035, "version-0-12"]], "Version 0.12.1": [[1035, "version-0-12-1"]], "Version 0.13": [[1036, "version-0-13"], [1036, "changes-0-13"]], "Version 0.13.1": [[1036, "version-0-13-1"]], "Version 0.14": [[1037, "version-0-14"], [1037, "changes-0-14"]], "Version 0.15": [[1038, "version-0-15"], [1038, "changes-0-15"]], "Version 0.15.1": [[1038, "version-0-15-1"]], "Version 0.15.2": [[1038, "version-0-15-2"]], "Version 0.16": [[1039, "version-0-16"], [1039, "changes-0-16"]], "Version 0.16.1": [[1039, "version-0-16-1"]], "Version 0.17": [[1040, "version-0-17"], [1040, "changes-0-17"]], "Version 0.17.1": [[1040, "version-0-17-1"]], "Version 0.18": [[1041, "version-0-18"], [1041, "changes-0-18"]], "Version 0.18.1": [[1041, "version-0-18-1"]], "Version 0.18.2": [[1041, "version-0-18-2"]], "Version 0.19": [[1042, "version-0-19"], [1042, "id1"]], "Version 0.19.1": [[1042, "version-0-19-1"]], "Version 0.19.2": [[1042, "version-0-19-2"]], "Version 0.20": [[1043, "version-0-20"]], "Version 0.20.0": [[1043, "version-0-20-0"]], "Version 0.20.1": [[1043, "version-0-20-1"]], "Version 0.20.2": [[1043, "version-0-20-2"]], "Version 0.20.3": [[1043, "version-0-20-3"]], "Version 0.20.4": [[1043, "version-0-20-4"]], "Version 0.21": [[1044, "version-0-21"]], "Version 0.21.0": [[1044, "version-0-21-0"]], "Version 0.21.1": [[1044, "version-0-21-1"]], "Version 0.21.2": [[1044, "version-0-21-2"]], "Version 0.21.3": [[1044, "version-0-21-3"]], "Version 0.22": [[1045, "version-0-22"]], "Version 0.22.0": [[1045, "version-0-22-0"]], "Version 0.22.1": [[1045, "version-0-22-1"]], "Version 0.22.2.post1": [[1045, "version-0-22-2-post1"]], "Version 0.23": [[1046, "version-0-23"]], "Version 0.23.0": [[1046, "version-0-23-0"]], "Version 0.23.1": [[1046, "version-0-23-1"]], "Version 0.23.2": [[1046, "version-0-23-2"]], "Version 0.24": [[1047, "version-0-24"]], "Version 0.24.0": [[1047, "version-0-24-0"]], "Version 0.24.1": [[1047, "version-0-24-1"]], "Version 0.24.2": [[1047, "version-0-24-2"]], "Version 0.4": [[1035, "version-0-4"]], "Version 0.5": [[1035, "version-0-5"]], "Version 0.6": [[1035, "version-0-6"]], "Version 0.7": [[1035, "version-0-7"]], "Version 0.8": [[1035, "version-0-8"]], "Version 0.9": [[1035, "version-0-9"]], "Version 1.0": [[1048, "version-1-0"]], "Version 1.0.0": [[1048, "version-1-0-0"]], "Version 1.0.1": [[1048, "version-1-0-1"]], "Version 1.0.2": [[1048, "version-1-0-2"]], "Version 1.1": [[1049, "version-1-1"]], "Version 1.1.0": [[1049, "version-1-1-0"]], "Version 1.1.1": [[1049, "version-1-1-1"]], "Version 1.1.2": [[1049, "version-1-1-2"]], "Version 1.1.3": [[1049, "version-1-1-3"]], "Version 1.2": [[1050, "version-1-2"]], "Version 1.2.0": [[1050, "version-1-2-0"]], "Version 1.2.1": [[1050, "version-1-2-1"]], "Version 1.2.2": [[1050, "version-1-2-2"]], "Version 1.3": [[1051, "version-1-3"]], "Version 1.3.0": [[1051, "version-1-3-0"]], "Version 1.3.1": [[1051, "version-1-3-1"]], "Version 1.3.2": [[1051, "version-1-3-2"]], "Version 1.4": [[1052, "version-1-4"]], "Version 1.4.0": [[1052, "version-1-4-0"]], "Version 1.4.1": [[1052, "version-1-4-1"]], "Version 1.4.2": [[1052, "version-1-4-2"]], "Version 1.5": [[1053, "version-1-5"]], "Version 1.5.0": [[1053, "version-1-5-0"]], "Version 1.6": [[1054, "version-1-6"]], "Version 1.6.0": [[1054, "version-1-6-0"]], "Video resources": [[379, "video-resources"]], "Videos": [[1011, "videos"]], "Visual evaluation of regression models": [[992, "visual-evaluation-of-regression-models"]], "Visualization": [[10, "visualization"], [338, "visualization"], [407, "visualization"]], "Visualization of MLP weights on MNIST": [[301, "visualization-of-mlp-weights-on-mnist"]], "Visualization of cluster hierarchy": [[409, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1032, "visualizations"]], "Visualizations with Display Objects": [[227, "visualizations-with-display-objects"]], "Visualize Comparison": [[120, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[254, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[254, "visualize-our-data"]], "Visualize the learning curves": [[232, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[56, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[232, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[410, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[254, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualizing the stock market structure": [[10, "visualizing-the-stock-market-structure"]], "Vocabulary: classification and regression": [[1026, null]], "Voting Classifier": [[416, "voting-classifier"]], "Voting Regressor": [[416, "voting-regressor"]], "Warnings and Exceptions": [[388, "warnings-and-exceptions"]], "Ways to contribute": [[379, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[65, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1045, "website-update"]], "Weighted Average Probabilities (Soft Voting)": [[416, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[399, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[399, "weighted-scoring-and-unweighted-fitting"]], "Welcome to scikit-learn": [[1010, "welcome-to-scikit-learn"]], "What are the inclusion criteria for new algorithms?": [[391, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[391, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[359, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[391, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "Where to from here": [[1028, "where-to-from-here"]], "Who is using scikit-learn?": [[1017, "who-is-using-scikit-learn"]], "Why are there so many different estimators for linear models?": [[391, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[391, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[391, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[391, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[391, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[391, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[391, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[391, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[391, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[416, "why-it-s-faster"]], "Why scikit?": [[391, "why-scikit"]], "Wikipedia principal eigenvector": [[15, "wikipedia-principal-eigenvector"]], "Will you add GPU support?": [[391, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[391, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[396, "winpython-for-windows"]], "Windows": [[377, "windows"]], "Wine recognition dataset": [[376, "wine-recognition-dataset"]], "Workflow Overview": [[402, "workflow-overview"]], "Working With Text Data": [[1028, "working-with-text-data"]], "Working on PRs to help review": [[378, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[378, "working-on-issues-to-improve-them"]], "Working with text documents": [[164, "working-with-text-documents"], [349, "working-with-text-documents"]], "Wrong causal interpretation": [[167, "wrong-causal-interpretation"]], "XOR dataset": [[342, "xor-dataset"]], "Yhat": [[1017, "id10"]], "Zero one loss": [[992, "zero-one-loss"]], "Zopa": [[1017, "id27"]], "__sklearn_is_fitted__ as Developer API": [[107, "sklearn-is-fitted-as-developer-api"]], "betaworks": [[1017, "id4"]], "dbscan_clustering": [[53, "dbscan-clustering"]], "get_feature_names_out Available in all Transformers": [[319, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[381, "get-params-and-set-params"]], "good first issue tag": [[379, null]], "help wanted tag": [[379, null]], "k-Nearest neighbors classifier": [[1026, "k-nearest-neighbors-classifier"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "kcachegrind": [[385, "kcachegrind"]], "macOS": [[377, "macos"]], "macOS compilers from Homebrew": [[377, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[377, "macos-compilers-from-conda-forge"]], "make_blobs": [[384, "make-blobs"]], "make_classification": [[384, "make-classification"]], "make_regression": [[384, "make-regression"]], "min_cluster_size": [[53, "min-cluster-size"]], "min_samples": [[53, "min-samples"]], "pickle, joblib, and cloudpickle": [[402, "pickle-joblib-and-cloudpickle"]], "scikit-learn Tutorials": [[1020, "scikit-learn-tutorials"]], "sklearn": [[1051, "sklearn"]], "sklearn.base": [[1044, "sklearn-base"], [1045, "sklearn-base"], [1047, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1050, "id2"], [1050, "id10"], [1051, "sklearn-base"], [1052, "sklearn-base"]], "sklearn.base.BaseEstimator": [[423, "sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[424, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[425, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[426, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[427, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[428, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[429, "sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[430, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[431, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[432, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[433, "sklearn-base-transformermixin"]], "sklearn.base.clone": [[434, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[435, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[436, "sklearn-base-is-regressor"]], "sklearn.base: Base classes and utility functions": [[407, "module-sklearn.base"]], "sklearn.calibration": [[1044, "sklearn-calibration"], [1045, "sklearn-calibration"], [1047, "sklearn-calibration"], [1048, "sklearn-calibration"], [1048, "id7"], [1049, "sklearn-calibration"], [1050, "sklearn-calibration"], [1050, "id11"], [1051, "sklearn-calibration"], [1051, "id7"], [1052, "sklearn-calibration"], [1052, "id3"], [1053, "sklearn-calibration"]], "sklearn.calibration.CalibratedClassifierCV": [[437, "sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[438, "sklearn-calibration-calibrationdisplay"]], "sklearn.calibration.calibration_curve": [[439, "sklearn-calibration-calibration-curve"]], "sklearn.calibration: Probability Calibration": [[407, "module-sklearn.calibration"]], "sklearn.cluster": [[1043, "sklearn-cluster"], [1043, "id2"], [1043, "id11"], [1043, "id24"], [1044, "sklearn-cluster"], [1044, "id8"], [1045, "sklearn-cluster"], [1045, "id5"], [1046, "sklearn-cluster"], [1046, "id2"], [1046, "id5"], [1047, "sklearn-cluster"], [1048, "sklearn-cluster"], [1048, "id1"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id12"], [1051, "sklearn-cluster"], [1051, "id8"], [1052, "sklearn-cluster"], [1052, "id4"], [1053, "sklearn-cluster"]], "sklearn.cluster.AffinityPropagation": [[440, "sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[441, "sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[442, "sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[443, "sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[444, "sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[445, "sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[446, "sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[447, "sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[448, "sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[449, "sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[450, "sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[451, "sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[452, "sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[453, "sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[454, "sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[455, "sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[456, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[457, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.dbscan": [[420, "sklearn-cluster-dbscan"]], "sklearn.cluster.estimate_bandwidth": [[458, "sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[459, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[460, "sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[461, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[462, "sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[463, "sklearn-cluster-ward-tree"]], "sklearn.cluster: Clustering": [[407, "module-sklearn.cluster"]], "sklearn.compose": [[1043, "sklearn-compose"], [1043, "id3"], [1043, "id6"], [1043, "id12"], [1043, "id25"], [1044, "sklearn-compose"], [1044, "id9"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1047, "id5"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1052, "id5"], [1053, "sklearn-compose"]], "sklearn.compose.ColumnTransformer": [[464, "sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[465, "sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[466, "sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[467, "sklearn-compose-make-column-transformer"]], "sklearn.compose: Composite Estimators": [[407, "module-sklearn.compose"]], "sklearn.config_context": [[468, "sklearn-config-context"]], "sklearn.covariance": [[1043, "sklearn-covariance"], [1043, "id26"], [1047, "sklearn-covariance"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"], [1051, "sklearn-covariance"], [1052, "sklearn-covariance"]], "sklearn.covariance.EllipticEnvelope": [[469, "sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[470, "sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[471, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[472, "sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[473, "sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[474, "sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[475, "sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[476, "sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[477, "sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[478, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[479, "sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[480, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.oas": [[422, "sklearn-covariance-oas"]], "sklearn.covariance.shrunk_covariance": [[481, "sklearn-covariance-shrunk-covariance"]], "sklearn.covariance: Covariance Estimators": [[407, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"], [1047, "id6"], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"], [1053, "sklearn-cross-decomposition"]], "sklearn.cross_decomposition.CCA": [[482, "sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[483, "sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[484, "sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[485, "sklearn-cross-decomposition-plssvd"]], "sklearn.cross_decomposition: Cross decomposition": [[407, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[1043, "sklearn-datasets"], [1043, "id13"], [1043, "id27"], [1044, "sklearn-datasets"], [1044, "id10"], [1045, "sklearn-datasets"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1048, "id9"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1050, "id13"], [1051, "sklearn-datasets"], [1051, "id9"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"]], "sklearn.datasets.clear_data_home": [[486, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[487, "sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[488, "sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[489, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[490, "sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[491, "sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[492, "sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[493, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[494, "sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[495, "sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[496, "sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[497, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[498, "sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[499, "sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[500, "sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[501, "sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[502, "sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[503, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[504, "sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[505, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[506, "sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[507, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[508, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[509, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[510, "sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[511, "sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[512, "sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[513, "sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[514, "sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[515, "sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[516, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[517, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[518, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[519, "sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[520, "sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[521, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[522, "sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[523, "sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[524, "sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[525, "sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[526, "sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[527, "sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[528, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[529, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[530, "sklearn-datasets-make-swiss-roll"]], "sklearn.datasets: Datasets": [[407, "module-sklearn.datasets"]], "sklearn.decomposition": [[1043, "sklearn-decomposition"], [1043, "id4"], [1043, "id14"], [1043, "id28"], [1044, "sklearn-decomposition"], [1044, "id11"], [1045, "sklearn-decomposition"], [1046, "sklearn-decomposition"], [1046, "id6"], [1047, "sklearn-decomposition"], [1047, "id7"], [1048, "sklearn-decomposition"], [1048, "id10"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1050, "id14"], [1051, "sklearn-decomposition"], [1051, "id10"], [1052, "sklearn-decomposition"], [1053, "sklearn-decomposition"]], "sklearn.decomposition.DictionaryLearning": [[531, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[532, "sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[533, "sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[534, "sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[535, "sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[536, "sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[537, "sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[538, "sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[539, "sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[540, "sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[541, "sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[542, "sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[543, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[544, "sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[545, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[546, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.fastica": [[421, "sklearn-decomposition-fastica"]], "sklearn.decomposition.non_negative_factorization": [[547, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[548, "sklearn-decomposition-sparse-encode"]], "sklearn.decomposition: Matrix Decomposition": [[407, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[1043, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[407, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[1043, "sklearn-dummy"], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1053, "sklearn-dummy"]], "sklearn.dummy.DummyClassifier": [[551, "sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[552, "sklearn-dummy-dummyregressor"]], "sklearn.dummy: Dummy estimators": [[407, "module-sklearn.dummy"]], "sklearn.ensemble": [[1043, "sklearn-ensemble"], [1043, "id29"], [1044, "sklearn-ensemble"], [1044, "id12"], [1045, "sklearn-ensemble"], [1046, "sklearn-ensemble"], [1046, "id7"], [1047, "sklearn-ensemble"], [1047, "id8"], [1048, "sklearn-ensemble"], [1048, "id2"], [1048, "id11"], [1049, "sklearn-ensemble"], [1050, "sklearn-ensemble"], [1050, "id3"], [1050, "id15"], [1051, "sklearn-ensemble"], [1051, "id11"], [1052, "sklearn-ensemble"], [1052, "id6"], [1053, "sklearn-ensemble"]], "sklearn.ensemble.AdaBoostClassifier": [[553, "sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[554, "sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[555, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[556, "sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[557, "sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[558, "sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[559, "sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[560, "sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[561, "sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[562, "sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[563, "sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[564, "sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[565, "sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[566, "sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[567, "sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[568, "sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[569, "sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[570, "sklearn-ensemble-votingregressor"]], "sklearn.ensemble: Ensemble Methods": [[407, "module-sklearn.ensemble"]], "sklearn.exceptions": [[1047, "sklearn-exceptions"], [1051, "sklearn-exceptions"]], "sklearn.exceptions.ConvergenceWarning": [[571, "sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[572, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[573, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[574, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[575, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[576, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[577, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[578, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.exceptions: Exceptions and warnings": [[407, "module-sklearn.exceptions"]], "sklearn.experimental.enable_halving_search_cv": [[579, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[580, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.experimental: Experimental": [[407, "module-sklearn.experimental"]], "sklearn.externals": [[1044, "sklearn-externals"]], "sklearn.feature_extraction": [[1043, "sklearn-feature-extraction"], [1043, "id15"], [1043, "id30"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1046, "id8"], [1047, "sklearn-feature-extraction"], [1047, "id9"], [1048, "sklearn-feature-extraction"], [1048, "id12"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"]], "sklearn.feature_extraction.DictVectorizer": [[581, "sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[582, "sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[583, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[584, "sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[585, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[586, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[587, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[588, "sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[589, "sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[590, "sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[591, "sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_extraction: Feature Extraction": [[407, "module-sklearn.feature_extraction"]], "sklearn.feature_selection": [[1043, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1048, "id13"], [1049, "sklearn-feature-selection"], [1049, "id2"], [1049, "id11"], [1050, "sklearn-feature-selection"], [1050, "id16"], [1051, "sklearn-feature-selection"], [1051, "id12"], [1052, "sklearn-feature-selection"], [1053, "sklearn-feature-selection"]], "sklearn.feature_selection.GenericUnivariateSelect": [[592, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[593, "sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[594, "sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[595, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[596, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[597, "sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[598, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[599, "sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[600, "sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[601, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[602, "sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[603, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[604, "sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[605, "sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[606, "sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[607, "sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[608, "sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[609, "sklearn-feature-selection-r-regression"]], "sklearn.feature_selection: Feature Selection": [[407, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[1043, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1047, "id10"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[610, "sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[611, "sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[612, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[613, "sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[614, "sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[615, "sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[616, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[617, "sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[618, "sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[619, "sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[620, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[621, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[622, "sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[623, "sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[624, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[625, "sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.gaussian_process: Gaussian Processes": [[407, "module-sklearn.gaussian_process"]], "sklearn.get_config": [[626, "sklearn-get-config"]], "sklearn.impute": [[1043, "sklearn-impute"], [1043, "id31"], [1044, "sklearn-impute"], [1044, "id13"], [1045, "sklearn-impute"], [1045, "id6"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1049, "id12"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1051, "id13"], [1052, "sklearn-impute"], [1053, "sklearn-impute"]], "sklearn.impute.IterativeImputer": [[627, "sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[628, "sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[629, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[630, "sklearn-impute-simpleimputer"]], "sklearn.impute: Impute": [[407, "module-sklearn.impute"]], "sklearn.inspection": [[1044, "sklearn-inspection"], [1044, "id3"], [1044, "id14"], [1045, "sklearn-inspection"], [1045, "id7"], [1046, "sklearn-inspection"], [1046, "id11"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1050, "id17"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1052, "id7"], [1053, "sklearn-inspection"]], "sklearn.inspection.DecisionBoundaryDisplay": [[631, "sklearn-inspection-decisionboundarydisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[632, "sklearn-inspection-partialdependencedisplay"]], "sklearn.inspection.partial_dependence": [[633, "sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[634, "sklearn-inspection-permutation-importance"]], "sklearn.inspection: Inspection": [[407, "module-sklearn.inspection"]], "sklearn.isotonic": [[1043, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1047, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1050, "sklearn-isotonic"]], "sklearn.isotonic.IsotonicRegression": [[635, "sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[636, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[637, "sklearn-isotonic-isotonic-regression"]], "sklearn.isotonic: Isotonic regression": [[407, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[1045, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[638, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[639, "sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[640, "sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[641, "sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[642, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_approximation: Kernel Approximation": [[407, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[1052, "sklearn-kernel-ridge"]], "sklearn.kernel_ridge.KernelRidge": [[643, "sklearn-kernel-ridge-kernelridge"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[407, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[1043, "sklearn-linear-model"], [1043, "id16"], [1043, "id32"], [1044, "sklearn-linear-model"], [1044, "id15"], [1045, "sklearn-linear-model"], [1046, "sklearn-linear-model"], [1046, "id9"], [1047, "sklearn-linear-model"], [1047, "id11"], [1048, "sklearn-linear-model"], [1048, "id3"], [1048, "id14"], [1049, "sklearn-linear-model"], [1049, "id13"], [1050, "sklearn-linear-model"], [1050, "id18"], [1051, "sklearn-linear-model"], [1052, "sklearn-linear-model"], [1052, "id8"], [1053, "sklearn-linear-model"]], "sklearn.linear_model.ARDRegression": [[644, "sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[645, "sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[646, "sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[647, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[648, "sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[649, "sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[650, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[651, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[652, "sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[653, "sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[654, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[655, "sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[656, "sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[657, "sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[658, "sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[659, "sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[660, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[661, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[662, "sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[663, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[664, "sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[666, "sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[667, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[668, "sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[669, "sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[670, "sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[671, "sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[672, "sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[673, "sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[674, "sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[675, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[676, "sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[677, "sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[678, "sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[679, "sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[680, "sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[681, "sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[682, "sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[683, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[684, "sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[685, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[686, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[687, "sklearn-linear-model-ridge-regression"]], "sklearn.linear_model: Linear Models": [[407, "module-sklearn.linear_model"]], "sklearn.manifold": [[1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1048, "id15"], [1049, "sklearn-manifold"], [1049, "id14"], [1050, "sklearn-manifold"], [1050, "id19"], [1051, "sklearn-manifold"], [1053, "sklearn-manifold"]], "sklearn.manifold.Isomap": [[688, "sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[689, "sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[690, "sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[691, "sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[692, "sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[693, "sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[694, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[695, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[696, "sklearn-manifold-trustworthiness"]], "sklearn.manifold: Manifold Learning": [[407, "module-sklearn.manifold"]], "sklearn.metrics": [[1043, "sklearn-metrics"], [1043, "id17"], [1043, "id33"], [1044, "sklearn-metrics"], [1044, "id4"], [1044, "id16"], [1045, "sklearn-metrics"], [1045, "id2"], [1045, "id8"], [1046, "sklearn-metrics"], [1046, "id10"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id12"], [1048, "sklearn-metrics"], [1048, "id16"], [1049, "sklearn-metrics"], [1049, "id3"], [1049, "id15"], [1050, "sklearn-metrics"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id14"], [1052, "sklearn-metrics"], [1053, "sklearn-metrics"]], "sklearn.metrics.ConfusionMatrixDisplay": [[697, "sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.DetCurveDisplay": [[698, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.DistanceMetric": [[699, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[700, "sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.PredictionErrorDisplay": [[701, "sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.RocCurveDisplay": [[702, "sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.accuracy_score": [[703, "sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[704, "sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[705, "sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[706, "sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[707, "sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[708, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[709, "sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[710, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[711, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[712, "sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[713, "sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[714, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[715, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[716, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[717, "sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[718, "sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[719, "sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[720, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[721, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_log_loss_score": [[722, "sklearn-metrics-d2-log-loss-score"]], "sklearn.metrics.d2_pinball_score": [[723, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[724, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[725, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[726, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[727, "sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[728, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[729, "sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[730, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[731, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[732, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[733, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[734, "sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[735, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[736, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[737, "sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[738, "sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[739, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[740, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[741, "sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[742, "sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[743, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[744, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[745, "sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[746, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[747, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[748, "sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[749, "sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[750, "sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[751, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[752, "sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[753, "sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[754, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[755, "sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[756, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[757, "sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[758, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[759, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[760, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[761, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[762, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[763, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[764, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[765, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[766, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[767, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[768, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[769, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[770, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[771, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[772, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[773, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[774, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[775, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[776, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[777, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[778, "sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[779, "sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[780, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[781, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[782, "sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[783, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[784, "sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[785, "sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[786, "sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[787, "sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[788, "sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[789, "sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[790, "sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[791, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[792, "sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[793, "sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[794, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[795, "sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[796, "sklearn-metrics-zero-one-loss"]], "sklearn.metrics: Metrics": [[407, "sklearn-metrics-metrics"]], "sklearn.mixture": [[1043, "sklearn-mixture"], [1043, "id34"], [1044, "sklearn-mixture"], [1048, "sklearn-mixture"], [1049, "sklearn-mixture"], [1051, "sklearn-mixture"], [1051, "id15"], [1053, "sklearn-mixture"]], "sklearn.mixture.BayesianGaussianMixture": [[797, "sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[798, "sklearn-mixture-gaussianmixture"]], "sklearn.mixture: Gaussian Mixture Models": [[407, "module-sklearn.mixture"]], "sklearn.model_selection": [[1043, "sklearn-model-selection"], [1043, "id35"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1045, "id9"], [1045, "id13"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id13"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1050, "id20"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"]], "sklearn.model_selection.FixedThresholdClassifier": [[799, "sklearn-model-selection-fixedthresholdclassifier"]], "sklearn.model_selection.GridSearchCV": [[800, "sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[801, "sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[802, "sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[803, "sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[804, "sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[805, "sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[806, "sklearn-model-selection-learningcurvedisplay"]], "sklearn.model_selection.LeaveOneGroupOut": [[807, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[808, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[809, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[810, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[811, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[812, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[813, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[814, "sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[815, "sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[816, "sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[817, "sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[818, "sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[819, "sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[820, "sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[821, "sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[822, "sklearn-model-selection-tunedthresholdclassifiercv"]], "sklearn.model_selection.ValidationCurveDisplay": [[823, "sklearn-model-selection-validationcurvedisplay"]], "sklearn.model_selection.check_cv": [[824, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[825, "sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[826, "sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[827, "sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[828, "sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[829, "sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[830, "sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[831, "sklearn-model-selection-validation-curve"]], "sklearn.model_selection: Model Selection": [[407, "module-sklearn.model_selection"]], "sklearn.multiclass": [[1044, "sklearn-multiclass"], [1047, "sklearn-multiclass"], [1048, "sklearn-multiclass"], [1049, "sklearn-multiclass"]], "sklearn.multiclass.OneVsOneClassifier": [[832, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[833, "sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[834, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multiclass: Multiclass classification": [[407, "module-sklearn.multiclass"]], "sklearn.multioutput": [[1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1047, "id14"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"]], "sklearn.multioutput.ClassifierChain": [[835, "sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[836, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[837, "sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[838, "sklearn-multioutput-regressorchain"]], "sklearn.multioutput: Multioutput regression and classification": [[407, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[1043, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1045, "id10"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"]], "sklearn.naive_bayes.BernoulliNB": [[839, "sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[840, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[841, "sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[842, "sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[843, "sklearn-naive-bayes-multinomialnb"]], "sklearn.naive_bayes: Naive Bayes": [[407, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[1043, "sklearn-neighbors"], [1043, "id7"], [1043, "id18"], [1043, "id36"], [1044, "sklearn-neighbors"], [1044, "id5"], [1044, "id17"], [1045, "sklearn-neighbors"], [1045, "id11"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"], [1048, "id4"], [1048, "id17"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"], [1051, "id16"], [1052, "sklearn-neighbors"], [1053, "sklearn-neighbors"]], "sklearn.neighbors.BallTree": [[844, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[845, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[846, "sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[847, "sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[848, "sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[849, "sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[850, "sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[851, "sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[852, "sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[853, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[854, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[855, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[856, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[857, "sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[858, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[859, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neighbors: Nearest Neighbors": [[407, "module-sklearn.neighbors"]], "sklearn.neural_network": [[1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1050, "id21"], [1051, "sklearn-neural-network"]], "sklearn.neural_network.BernoulliRBM": [[860, "sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[861, "sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[862, "sklearn-neural-network-mlpregressor"]], "sklearn.neural_network: Neural network models": [[407, "module-sklearn.neural_network"]], "sklearn.pipeline": [[1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1048, "id18"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1053, "sklearn-pipeline"]], "sklearn.pipeline.FeatureUnion": [[863, "sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[864, "sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[865, "sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[866, "sklearn-pipeline-make-union"]], "sklearn.pipeline: Pipeline": [[407, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[1043, "sklearn-preprocessing"], [1043, "id19"], [1043, "id37"], [1044, "sklearn-preprocessing"], [1044, "id18"], [1045, "sklearn-preprocessing"], [1045, "id12"], [1046, "sklearn-preprocessing"], [1047, "sklearn-preprocessing"], [1047, "id15"], [1048, "sklearn-preprocessing"], [1048, "id19"], [1049, "sklearn-preprocessing"], [1049, "id4"], [1049, "id16"], [1050, "sklearn-preprocessing"], [1050, "id4"], [1050, "id22"], [1051, "sklearn-preprocessing"], [1051, "id17"], [1052, "sklearn-preprocessing"], [1052, "id9"], [1053, "sklearn-preprocessing"]], "sklearn.preprocessing.Binarizer": [[867, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[868, "sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[869, "sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[870, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[871, "sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[872, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[873, "sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[874, "sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[875, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[876, "sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[877, "sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[878, "sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[879, "sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[880, "sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[881, "sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[882, "sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[883, "sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[884, "sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[885, "sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[886, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[887, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[888, "sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[889, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[890, "sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[891, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[892, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[893, "sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[894, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[895, "sklearn-preprocessing-scale"]], "sklearn.preprocessing: Preprocessing and Normalization": [[407, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[1049, "sklearn-random-projection"]], "sklearn.random_projection.GaussianRandomProjection": [[896, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[897, "sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[898, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.random_projection: Random projection": [[407, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[1045, "sklearn-semi-supervised"], [1046, "sklearn-semi-supervised"], [1047, "sklearn-semi-supervised"], [1047, "id3"], [1047, "id16"], [1051, "sklearn-semi-supervised"]], "sklearn.semi_supervised.LabelPropagation": [[899, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[900, "sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[901, "sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[407, "module-sklearn.semi_supervised"]], "sklearn.set_config": [[902, "sklearn-set-config"]], "sklearn.show_versions": [[903, "sklearn-show-versions"]], "sklearn.svm": [[1043, "sklearn-svm"], [1043, "id38"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1048, "id20"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"]], "sklearn.svm.LinearSVC": [[904, "sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[905, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[906, "sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[907, "sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[908, "sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[909, "sklearn-svm-svc"]], "sklearn.svm.SVR": [[910, "sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[911, "sklearn-svm-l1-min-c"]], "sklearn.svm: Support Vector Machines": [[407, "module-sklearn.svm"]], "sklearn.tree": [[1043, "sklearn-tree"], [1044, "sklearn-tree"], [1044, "id19"], [1045, "sklearn-tree"], [1046, "sklearn-tree"], [1047, "sklearn-tree"], [1047, "id17"], [1048, "sklearn-tree"], [1048, "id21"], [1049, "sklearn-tree"], [1049, "id5"], [1049, "id17"], [1050, "sklearn-tree"], [1050, "id5"], [1050, "id23"], [1051, "sklearn-tree"], [1051, "id3"], [1051, "id18"], [1052, "sklearn-tree"], [1052, "id10"], [1053, "sklearn-tree"]], "sklearn.tree.DecisionTreeClassifier": [[912, "sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[913, "sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[914, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[915, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[916, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[917, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[918, "sklearn-tree-plot-tree"]], "sklearn.tree: Decision Trees": [[407, "module-sklearn.tree"]], "sklearn.utils": [[1043, "sklearn-utils"], [1043, "id20"], [1043, "id39"], [1044, "sklearn-utils"], [1045, "sklearn-utils"], [1045, "id14"], [1046, "sklearn-utils"], [1046, "id12"], [1047, "sklearn-utils"], [1047, "id18"], [1048, "sklearn-utils"], [1048, "id5"], [1048, "id22"], [1049, "sklearn-utils"], [1049, "id18"], [1050, "sklearn-utils"], [1050, "id6"], [1050, "id24"], [1051, "sklearn-utils"], [1052, "sklearn-utils"], [1052, "id11"], [1053, "sklearn-utils"]], "sklearn.utils.Bunch": [[919, "sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[920, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[921, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[922, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[923, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[924, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[925, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[926, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[927, "sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[928, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[929, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[930, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[931, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[932, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[933, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[934, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[935, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[936, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[937, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[938, "sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[939, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[940, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[941, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[942, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[943, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[944, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[945, "sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[946, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[947, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[948, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[949, "sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[950, "sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[951, "sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[952, "sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[953, "sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[954, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[955, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[956, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[957, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[958, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[959, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[960, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[961, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[962, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[963, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[964, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[965, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[966, "sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs": [[1044, "sklearn-utils-sparsefuncs"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[967, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[968, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[969, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[970, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[971, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[972, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[973, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[974, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[975, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[976, "sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[977, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[978, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[979, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[980, "sklearn-utils-validation-has-fit-parameter"]], "sklearn.utils: Utilities": [[407, "module-sklearn.utils"]], "sklearn: Settings and information tools": [[407, "module-sklearn"]], "skops.io": [[402, "skops-io"]], "solido": [[1017, "id23"]], "t-SNE: The effect of various perplexity values on the shape": [[223, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[989, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "transform and inverse_transform methods": [[1027, null]], "\u201cStatlog\u201d German credit dataset": [[253, "statlog-german-credit-dataset"]]}, "docnames": ["about", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sg_execution_times", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sg_execution_times.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[393, "term-1d", true]], "1d array": [[393, "term-1d-array", true]], "2d": [[393, "term-2d", true]], "2d array": [[393, "term-2d-array", true]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "_estimator_type": [[393, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[920, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[949, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[950, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[949, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[454, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[440, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[441, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[932, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[933, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[934, "sklearn.utils.discovery.all_functions", false]], "api": [[393, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ARDRegression", false]], "array-like": [[393, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[922, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[923, "sklearn.utils.assert_all_finite", false]], "attribute": [[393, "term-attribute", true]], "attributes": [[393, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[706, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[953, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[393, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[844, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[423, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[797, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[645, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[839, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[860, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[424, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[424, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[451, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[453, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.Binarizer", false]], "binary": [[393, "term-binary", true]], "birch (class in sklearn.cluster)": [[442, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[443, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[709, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[919, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[437, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[439, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[438, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[393, "term-callable", true]], "categorical feature": [[393, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[840, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[925, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[926, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[935, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[636, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[976, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[977, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[927, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[928, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[711, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[978, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[924, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[712, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[393, "term-class_weight", true]], "classes_": [[393, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[593, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[594, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[674, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[675, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[799, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[800, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[803, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[814, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[713, "sklearn.metrics.classification_report", false]], "classifier": [[393, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[835, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[426, "sklearn.base.ClassifierMixin", false]], "classifiers": [[393, "term-classifiers", true]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[425, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[486, "sklearn.datasets.clear_data_home", false]], "clone": [[393, "term-clone", true]], "clone() (in module sklearn.base)": [[434, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[393, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[455, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[456, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[393, "term-clusterer", true]], "clusterers": [[393, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[427, "sklearn.base.ClusterMixin", false]], "coef_": [[393, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[907, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[908, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[910, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[979, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[464, "sklearn.compose.ColumnTransformer", false]], "common tests": [[393, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[841, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.completeness_score", false]], "components_": [[393, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[929, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[457, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[930, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[468, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[718, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[393, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[948, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[949, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[714, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[393, "term-continuous", true]], "continuous multi-output": [[393, "term-continuous-multi-output", true]], "continuous multioutput": [[393, "term-continuous-multioutput", true]], "convergencewarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[720, "sklearn.metrics.coverage_error", false]], "cross fitting": [[393, "term-0", true]], "cross validation": [[393, "term-1", true]], "cross-fitting": [[393, "term-cross-fitting", true]], "cross-validation": [[393, "term-cross-validation", true]], "cross-validation estimator": [[393, "term-cross-validation-estimator", true]], "cross-validation generator": [[393, "term-cross-validation-generator", true]], "cross-validation splitter": [[393, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.cross_validate", false]], "cv": [[393, "term-cv", true]], "cv splitter": [[393, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[393, "term-data-leakage", true]], "data type": [[393, "term-data-type", true]], "dataconversionwarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[444, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[420, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.dcg_score", false]], "decision_function": [[393, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[631, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[912, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[913, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[959, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[393, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[938, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[428, "sklearn.base.DensityMixin", false]], "deprecated() (in module sklearn.utils)": [[931, "sklearn.utils.deprecated", false]], "deprecation": [[393, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[727, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[531, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[581, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[393, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[958, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[958, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[699, "sklearn.metrics.DistanceMetric", false]], "docstring": [[393, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[393, "term-double-underscore", true]], "double underscore notation": [[393, "term-double-underscore-notation", true]], "dtype": [[393, "term-dtype", true]], "duck typing": [[393, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[551, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[552, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[487, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[393, "term-early-stopping", true]], "efficiencywarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[646, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[469, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[393, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[477, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[470, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[458, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[393, "term-estimator", true]], "estimator instance": [[393, "term-estimator-instance", true]], "estimator tags": [[393, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[937, "sklearn.utils.estimator_html_repr", false]], "estimators": [[393, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[555, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[556, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[557, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[558, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[563, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[564, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[565, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[566, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[393, "term-evaluation-metric", true]], "evaluation metrics": [[393, "term-evaluation-metrics", true]], "examples": [[393, "term-examples", true]], "experimental": [[393, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[916, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[917, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[914, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[915, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[532, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[939, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[533, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[421, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.fbeta_score", false]], "feature": [[393, "term-feature", true]], "feature extractor": [[393, "term-feature-extractor", true]], "feature extractors": [[393, "term-feature-extractors", true]], "feature vector": [[393, "term-feature-vector", true]], "feature_importances_": [[393, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[553, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[554, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[557, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[558, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[559, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[560, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[564, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[565, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[566, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[912, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[913, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[914, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[915, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[863, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[445, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[582, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[393, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[863, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_covtype", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[393, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[393, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[427, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[431, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[393, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[433, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning (class in sklearn.exceptions)": [[575, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[393, "term-fitted", true]], "fitting": [[393, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[799, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[958, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[632, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[806, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[823, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.fromkeys", false]], "function": [[393, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[393, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[798, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[896, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[944, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[945, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[626, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[499, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[393, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[425, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[430, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[424, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[423, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[699, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[393, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[393, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[423, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[951, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[732, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[733, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[424, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[424, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[478, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[471, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[472, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[800, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.GroupKFold", false]], "groups": [[393, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[734, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[980, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[446, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[735, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[736, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[393, "term-hyper-parameter", true]], "hyperparameter": [[393, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[393, "term-imputation", true]], "impute": [[393, "term-impute", true]], "inconsistentversionwarning (class in sklearn.exceptions)": [[576, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[967, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[534, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[393, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[947, "sklearn.utils.indexable", false]], "induction": [[393, "term-induction", true]], "inductive": [[393, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[877, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[878, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[885, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[968, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[969, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[974, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[975, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[970, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[971, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[972, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[435, "sklearn.base.is_classifier", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[954, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[436, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[563, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[688, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[637, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[635, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[627, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.jaccard_score", false]], "joblib": [[393, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[898, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[459, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[845, "sklearn.neighbors.KDTree", false]], "kernel": [[393, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[643, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[460, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[857, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[846, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[847, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[628, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[911, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[393, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[899, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[393, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[900, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[652, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[536, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[393, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[808, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[479, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[480, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[473, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[904, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[905, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[693, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[689, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_classification", false]], "make_column_selector() (in module sklearn.compose)": [[466, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[467, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[865, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[742, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[866, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[743, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[744, "sklearn.metrics.max_error", false]], "max_iter": [[393, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[690, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[461, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[973, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[448, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[393, "term-memmapping", true]], "memory": [[393, "term-memory", true]], "memory map": [[393, "term-memory-map", true]], "memory mapping": [[393, "term-memory-mapping", true]], "meta-estimator": [[393, "term-meta-estimator", true]], "meta-estimators": [[393, "term-meta-estimators", true]], "metadata": [[393, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[948, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[949, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[393, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[429, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[393, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[950, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[393, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[921, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[474, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[393, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[629, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[861, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[862, "sklearn.neural_network.MLPRegressor", false]], "module": [[407, "module-sklearn", false], [407, "module-sklearn.base", false], [407, "module-sklearn.calibration", false], [407, "module-sklearn.cluster", false], [407, "module-sklearn.compose", false], [407, "module-sklearn.covariance", false], [407, "module-sklearn.cross_decomposition", false], [407, "module-sklearn.datasets", false], [407, "module-sklearn.decomposition", false], [407, "module-sklearn.discriminant_analysis", false], [407, "module-sklearn.dummy", false], [407, "module-sklearn.ensemble", false], [407, "module-sklearn.exceptions", false], [407, "module-sklearn.experimental", false], [407, "module-sklearn.feature_extraction", false], [407, "module-sklearn.feature_extraction.image", false], [407, "module-sklearn.feature_extraction.text", false], [407, "module-sklearn.feature_selection", false], [407, "module-sklearn.gaussian_process", false], [407, "module-sklearn.gaussian_process.kernels", false], [407, "module-sklearn.impute", false], [407, "module-sklearn.inspection", false], [407, "module-sklearn.isotonic", false], [407, "module-sklearn.kernel_approximation", false], [407, "module-sklearn.kernel_ridge", false], [407, "module-sklearn.linear_model", false], [407, "module-sklearn.manifold", false], [407, "module-sklearn.metrics", false], [407, "module-sklearn.metrics.cluster", false], [407, "module-sklearn.metrics.pairwise", false], [407, "module-sklearn.mixture", false], [407, "module-sklearn.model_selection", false], [407, "module-sklearn.multiclass", false], [407, "module-sklearn.multioutput", false], [407, "module-sklearn.naive_bayes", false], [407, "module-sklearn.neighbors", false], [407, "module-sklearn.neural_network", false], [407, "module-sklearn.pipeline", false], [407, "module-sklearn.preprocessing", false], [407, "module-sklearn.random_projection", false], [407, "module-sklearn.semi_supervised", false], [407, "module-sklearn.svm", false], [407, "module-sklearn.tree", false], [407, "module-sklearn.utils", false], [407, "module-sklearn.utils.arrayfuncs", false], [407, "module-sklearn.utils.class_weight", false], [407, "module-sklearn.utils.discovery", false], [407, "module-sklearn.utils.estimator_checks", false], [407, "module-sklearn.utils.extmath", false], [407, "module-sklearn.utils.graph", false], [407, "module-sklearn.utils.metadata_routing", false], [407, "module-sklearn.utils.metaestimators", false], [407, "module-sklearn.utils.multiclass", false], [407, "module-sklearn.utils.parallel", false], [407, "module-sklearn.utils.random", false], [407, "module-sklearn.utils.sparsefuncs", false], [407, "module-sklearn.utils.sparsefuncs_fast", false], [407, "module-sklearn.utils.validation", false], [579, "module-sklearn.experimental.enable_halving_search_cv", false], [580, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[393, "term-multi-class", true]], "multi-class multi-output": [[393, "term-multi-class-multi-output", true]], "multi-label": [[393, "term-multi-label", true]], "multi-output": [[393, "term-multi-output", true]], "multi-output continuous": [[393, "term-multi-output-continuous", true]], "multi-output multi-class": [[393, "term-multi-output-multi-class", true]], "multiclass": [[393, "term-multiclass", true]], "multiclass multioutput": [[393, "term-multiclass-multioutput", true]], "multilabel": [[393, "term-multilabel", true]], "multilabel indicator matrices": [[393, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[393, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[833, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[754, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[393, "term-multioutput", true]], "multioutput continuous": [[393, "term-multioutput-continuous", true]], "multioutput multiclass": [[393, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[836, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[837, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[957, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[755, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[832, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[833, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[393, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[542, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[393, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[465, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[542, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[567, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[568, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[569, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[570, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[597, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[800, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[803, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[814, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[863, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[393, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[393, "term-n_iter_no_change", true]], "n_jobs": [[393, "term-n_jobs", true]], "n_outputs": [[393, "term-n_outputs", true]], "n_samples": [[393, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[907, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[908, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[910, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[393, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[567, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[568, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[569, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[570, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[464, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[393, "term-narrative-docs", true]], "narrative documentation": [[393, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[851, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[852, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[540, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.Normalizer", false]], "notfittederror (class in sklearn.exceptions)": [[577, "sklearn.exceptions.NotFittedError", false]], "np": [[393, "term-np", true]], "nusvc (class in sklearn.svm)": [[906, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[907, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[475, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[422, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[908, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[430, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[832, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[833, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[393, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[450, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[393, "term-out-of-core", true]], "outlier detector": [[393, "term-outlier-detector", true]], "outlier detectors": [[393, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[431, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[834, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[393, "term-outputs", true]], "pair": [[393, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[715, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[393, "term-pairwise-metric", true]], "pairwise metrics": [[393, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[780, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[958, "sklearn.utils.parallel.Parallel", false]], "parallel_backend() (in module sklearn.utils)": [[960, "sklearn.utils.parallel_backend", false]], "param": [[393, "term-param", true]], "parameter": [[393, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[811, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[393, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[936, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[393, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[633, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[393, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[632, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[646, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[647, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[652, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[653, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[662, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.PCA", false]], "pd": [[393, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[668, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[634, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[864, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[438, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[632, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[698, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[701, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[702, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[806, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[823, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[918, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[393, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[879, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[782, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[783, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[393, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[813, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[393, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[393, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[393, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[393, "term-predictor", true]], "predictors": [[393, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[958, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[952, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[858, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.rand_score", false]], "random_state": [[393, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[940, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[941, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[814, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[393, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[962, "sklearn.utils.register_parallel_backend", false]], "regressor": [[393, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[838, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[432, "sklearn.base.RegressorMixin", false]], "regressors": [[393, "term-regressors", true]], "repeatedkfold (class in sklearn.model_selection)": [[815, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[963, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[672, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[789, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[790, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[791, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[949, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[393, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[964, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[942, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[965, "sklearn.utils.safe_sqr", false]], "sample": [[393, "term-sample", true]], "sample properties": [[393, "term-sample-properties", true]], "sample property": [[393, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[393, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[961, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[393, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[393, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[393, "term-scikit-learn-contrib", true]], "score": [[393, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[426, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[428, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[432, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[393, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[393, "term-scorer", true]], "scoring": [[393, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[393, "term-semi-supervised", true]], "semi-supervised learning": [[393, "term-semi-supervised-learning", true]], "semisupervised": [[393, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[902, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[433, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[393, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[423, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[903, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[481, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[476, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[966, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[792, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[630, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[946, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[407, "module-sklearn", false]], "sklearn.base": [[407, "module-sklearn.base", false]], "sklearn.calibration": [[407, "module-sklearn.calibration", false]], "sklearn.cluster": [[407, "module-sklearn.cluster", false]], "sklearn.compose": [[407, "module-sklearn.compose", false]], "sklearn.covariance": [[407, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[407, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[407, "module-sklearn.datasets", false]], "sklearn.decomposition": [[407, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[407, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[407, "module-sklearn.dummy", false]], "sklearn.ensemble": [[407, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[407, "module-sklearn.exceptions", false]], "sklearn.experimental": [[407, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[579, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[580, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[407, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[407, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[407, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[407, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[407, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[407, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[407, "module-sklearn.impute", false]], "sklearn.inspection": [[407, "module-sklearn.inspection", false]], "sklearn.isotonic": [[407, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[407, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[407, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[407, "module-sklearn.linear_model", false]], "sklearn.manifold": [[407, "module-sklearn.manifold", false]], "sklearn.metrics": [[407, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[407, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[407, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[407, "module-sklearn.mixture", false]], "sklearn.model_selection": [[407, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[407, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[407, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[407, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[407, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[407, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[407, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[407, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[407, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[407, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[407, "module-sklearn.svm", false]], "sklearn.tree": [[407, "module-sklearn.tree", false]], "sklearn.utils": [[407, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[407, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[407, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[407, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[407, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[407, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[407, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[407, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[407, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[407, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[407, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[407, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[407, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[407, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[407, "module-sklearn.utils.validation", false]], "slep": [[393, "term-SLEP", true]], "sleps": [[393, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[694, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[859, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[393, "term-sparse-graph", true]], "sparse matrix": [[393, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[646, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[652, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[660, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[662, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[542, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[897, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[462, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[695, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[691, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.SplineTransformer", false]], "split": [[393, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[393, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[818, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[393, "term-supervised", true]], "supervised learning": [[393, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[909, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[910, "sklearn.svm.SVR", false]], "target": [[393, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[393, "term-targets", true]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[597, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.train_test_split", false]], "transduction": [[393, "term-transduction", true]], "transductive": [[393, "term-transductive", true]], "transform": [[393, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[465, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[393, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[433, "sklearn.base.TransformerMixin", false]], "transformers": [[393, "term-transformers", true]], "truncatedsvd (class in sklearn.decomposition)": [[544, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[696, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[692, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[955, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning (class in sklearn.exceptions)": [[578, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[956, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[393, "term-unlabeled", true]], "unlabeled data": [[393, "term-unlabeled-data", true]], "unsupervised": [[393, "term-unsupervised", true]], "unsupervised learning": [[393, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.v_measure_score", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[949, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[823, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[393, "term-vectorizer", true]], "vectorizers": [[393, "term-vectorizers", true]], "verbose": [[393, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[463, "sklearn.cluster.ward_tree", false]], "warm_start": [[393, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[943, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[571, "sklearn.exceptions.ConvergenceWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[572, "sklearn.exceptions.DataConversionWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[573, "sklearn.exceptions.DataDimensionalityWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[574, "sklearn.exceptions.EfficiencyWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[575, "sklearn.exceptions.FitFailedWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[576, "sklearn.exceptions.InconsistentVersionWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[577, "sklearn.exceptions.NotFittedError.with_traceback", false]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[578, "sklearn.exceptions.UndefinedMetricWarning.with_traceback", false]], "x": [[393, "term-X", true]], "xt": [[393, "term-Xt", true]], "y": [[393, "term-Y", true], [393, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[796, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[407, 0, 0, "-", "sklearn"]], "sklearn": [[407, 0, 0, "-", "base"], [407, 0, 0, "-", "calibration"], [407, 0, 0, "-", "cluster"], [407, 0, 0, "-", "compose"], [468, 4, 1, "", "config_context"], [407, 0, 0, "-", "covariance"], [407, 0, 0, "-", "cross_decomposition"], [407, 0, 0, "-", "datasets"], [407, 0, 0, "-", "decomposition"], [407, 0, 0, "-", "discriminant_analysis"], [407, 0, 0, "-", "dummy"], [407, 0, 0, "-", "ensemble"], [407, 0, 0, "-", "exceptions"], [407, 0, 0, "-", "experimental"], [407, 0, 0, "-", "feature_extraction"], [407, 0, 0, "-", "feature_selection"], [407, 0, 0, "-", "gaussian_process"], [626, 4, 1, "", "get_config"], [407, 0, 0, "-", "impute"], [407, 0, 0, "-", "inspection"], [407, 0, 0, "-", "isotonic"], [407, 0, 0, "-", "kernel_approximation"], [407, 0, 0, "-", "kernel_ridge"], [407, 0, 0, "-", "linear_model"], [407, 0, 0, "-", "manifold"], [407, 0, 0, "-", "metrics"], [407, 0, 0, "-", "mixture"], [407, 0, 0, "-", "model_selection"], [407, 0, 0, "-", "multiclass"], [407, 0, 0, "-", "multioutput"], [407, 0, 0, "-", "naive_bayes"], [407, 0, 0, "-", "neighbors"], [407, 0, 0, "-", "neural_network"], [407, 0, 0, "-", "pipeline"], [407, 0, 0, "-", "preprocessing"], [407, 0, 0, "-", "random_projection"], [407, 0, 0, "-", "semi_supervised"], [902, 4, 1, "", "set_config"], [903, 4, 1, "", "show_versions"], [407, 0, 0, "-", "svm"], [407, 0, 0, "-", "tree"], [407, 0, 0, "-", "utils"]], "sklearn.base": [[423, 1, 1, "", "BaseEstimator"], [424, 1, 1, "", "BiclusterMixin"], [425, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [426, 1, 1, "", "ClassifierMixin"], [427, 1, 1, "", "ClusterMixin"], [428, 1, 1, "", "DensityMixin"], [429, 1, 1, "", "MetaEstimatorMixin"], [430, 1, 1, "", "OneToOneFeatureMixin"], [431, 1, 1, "", "OutlierMixin"], [432, 1, 1, "", "RegressorMixin"], [433, 1, 1, "", "TransformerMixin"], [434, 4, 1, "", "clone"], [435, 4, 1, "", "is_classifier"], [436, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[423, 2, 1, "", "get_metadata_routing"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[424, 3, 1, "", "biclusters_"], [424, 2, 1, "", "get_indices"], [424, 2, 1, "", "get_shape"], [424, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[425, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[426, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[427, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[428, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[430, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[431, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[432, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[433, 2, 1, "", "fit_transform"], [433, 2, 1, "", "set_output"]], "sklearn.calibration": [[437, 1, 1, "", "CalibratedClassifierCV"], [438, 1, 1, "", "CalibrationDisplay"], [439, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "predict_proba"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_fit_request"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[438, 2, 1, "", "from_estimator"], [438, 2, 1, "", "from_predictions"], [438, 2, 1, "", "plot"]], "sklearn.cluster": [[440, 1, 1, "", "AffinityPropagation"], [441, 1, 1, "", "AgglomerativeClustering"], [442, 1, 1, "", "Birch"], [443, 1, 1, "", "BisectingKMeans"], [444, 1, 1, "", "DBSCAN"], [445, 1, 1, "", "FeatureAgglomeration"], [446, 1, 1, "", "HDBSCAN"], [447, 1, 1, "", "KMeans"], [448, 1, 1, "", "MeanShift"], [449, 1, 1, "", "MiniBatchKMeans"], [450, 1, 1, "", "OPTICS"], [451, 1, 1, "", "SpectralBiclustering"], [452, 1, 1, "", "SpectralClustering"], [453, 1, 1, "", "SpectralCoclustering"], [454, 4, 1, "", "affinity_propagation"], [455, 4, 1, "", "cluster_optics_dbscan"], [456, 4, 1, "", "cluster_optics_xi"], [457, 4, 1, "", "compute_optics_graph"], [420, 4, 1, "", "dbscan"], [458, 4, 1, "", "estimate_bandwidth"], [459, 4, 1, "", "k_means"], [460, 4, 1, "", "kmeans_plusplus"], [461, 4, 1, "", "mean_shift"], [462, 4, 1, "", "spectral_clustering"], [463, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "partial_fit"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_score_request"], [443, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[445, 2, 1, "", "fit"], [445, 3, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "inverse_transform"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[446, 2, 1, "", "dbscan_clustering"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "partial_fit"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_partial_fit_request"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[451, 3, 1, "", "biclusters_"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_indices"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_shape"], [451, 2, 1, "", "get_submatrix"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[453, 3, 1, "", "biclusters_"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_indices"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_shape"], [453, 2, 1, "", "get_submatrix"], [453, 2, 1, "", "set_params"]], "sklearn.compose": [[464, 1, 1, "", "ColumnTransformer"], [465, 1, 1, "", "TransformedTargetRegressor"], [466, 4, 1, "", "make_column_selector"], [467, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_feature_names_out"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 3, 1, "", "named_transformers_"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 3, 1, "", "n_features_in_"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[469, 1, 1, "", "EllipticEnvelope"], [470, 1, 1, "", "EmpiricalCovariance"], [471, 1, 1, "", "GraphicalLasso"], [472, 1, 1, "", "GraphicalLassoCV"], [473, 1, 1, "", "LedoitWolf"], [474, 1, 1, "", "MinCovDet"], [475, 1, 1, "", "OAS"], [476, 1, 1, "", "ShrunkCovariance"], [477, 4, 1, "", "empirical_covariance"], [478, 4, 1, "", "graphical_lasso"], [479, 4, 1, "", "ledoit_wolf"], [480, 4, 1, "", "ledoit_wolf_shrinkage"], [422, 4, 1, "", "oas"], [481, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[469, 2, 1, "", "correct_covariance"], [469, 2, 1, "", "decision_function"], [469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_predict"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "reweight_covariance"], [469, 2, 1, "", "score"], [469, 2, 1, "", "score_samples"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[474, 2, 1, "", "correct_covariance"], [474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "reweight_covariance"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[482, 1, 1, "", "CCA"], [483, 1, 1, "", "PLSCanonical"], [484, 1, 1, "", "PLSRegression"], [485, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "transform"]], "sklearn.datasets": [[486, 4, 1, "", "clear_data_home"], [487, 4, 1, "", "dump_svmlight_file"], [488, 4, 1, "", "fetch_20newsgroups"], [489, 4, 1, "", "fetch_20newsgroups_vectorized"], [490, 4, 1, "", "fetch_california_housing"], [491, 4, 1, "", "fetch_covtype"], [492, 4, 1, "", "fetch_kddcup99"], [493, 4, 1, "", "fetch_lfw_pairs"], [494, 4, 1, "", "fetch_lfw_people"], [495, 4, 1, "", "fetch_olivetti_faces"], [496, 4, 1, "", "fetch_openml"], [497, 4, 1, "", "fetch_rcv1"], [498, 4, 1, "", "fetch_species_distributions"], [499, 4, 1, "", "get_data_home"], [500, 4, 1, "", "load_breast_cancer"], [501, 4, 1, "", "load_diabetes"], [502, 4, 1, "", "load_digits"], [503, 4, 1, "", "load_files"], [504, 4, 1, "", "load_iris"], [505, 4, 1, "", "load_linnerud"], [506, 4, 1, "", "load_sample_image"], [507, 4, 1, "", "load_sample_images"], [508, 4, 1, "", "load_svmlight_file"], [509, 4, 1, "", "load_svmlight_files"], [510, 4, 1, "", "load_wine"], [511, 4, 1, "", "make_biclusters"], [512, 4, 1, "", "make_blobs"], [513, 4, 1, "", "make_checkerboard"], [514, 4, 1, "", "make_circles"], [515, 4, 1, "", "make_classification"], [516, 4, 1, "", "make_friedman1"], [517, 4, 1, "", "make_friedman2"], [518, 4, 1, "", "make_friedman3"], [519, 4, 1, "", "make_gaussian_quantiles"], [520, 4, 1, "", "make_hastie_10_2"], [521, 4, 1, "", "make_low_rank_matrix"], [522, 4, 1, "", "make_moons"], [523, 4, 1, "", "make_multilabel_classification"], [524, 4, 1, "", "make_regression"], [525, 4, 1, "", "make_s_curve"], [526, 4, 1, "", "make_sparse_coded_signal"], [527, 4, 1, "", "make_sparse_spd_matrix"], [528, 4, 1, "", "make_sparse_uncorrelated"], [529, 4, 1, "", "make_spd_matrix"], [530, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[531, 1, 1, "", "DictionaryLearning"], [532, 1, 1, "", "FactorAnalysis"], [533, 1, 1, "", "FastICA"], [534, 1, 1, "", "IncrementalPCA"], [535, 1, 1, "", "KernelPCA"], [536, 1, 1, "", "LatentDirichletAllocation"], [537, 1, 1, "", "MiniBatchDictionaryLearning"], [538, 1, 1, "", "MiniBatchNMF"], [539, 1, 1, "", "MiniBatchSparsePCA"], [540, 1, 1, "", "NMF"], [541, 1, 1, "", "PCA"], [542, 1, 1, "", "SparseCoder"], [543, 1, 1, "", "SparsePCA"], [544, 1, 1, "", "TruncatedSVD"], [545, 4, 1, "", "dict_learning"], [546, 4, 1, "", "dict_learning_online"], [421, 4, 1, "", "fastica"], [547, 4, 1, "", "non_negative_factorization"], [548, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "score"], [532, 2, 1, "", "score_samples"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_inverse_transform_request"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "set_transform_request"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_covariance"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "get_precision"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_partial_fit_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "perplexity"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_covariance"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "get_precision"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "score"], [541, 2, 1, "", "score_samples"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 3, 1, "", "n_components_"], [542, 3, 1, "", "n_features_in_"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[549, 1, 1, "", "LinearDiscriminantAnalysis"], [550, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, 2, 1, "", "decision_function"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"], [549, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[551, 1, 1, "", "DummyClassifier"], [552, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_predict_request"], [552, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[553, 1, 1, "", "AdaBoostClassifier"], [554, 1, 1, "", "AdaBoostRegressor"], [555, 1, 1, "", "BaggingClassifier"], [556, 1, 1, "", "BaggingRegressor"], [557, 1, 1, "", "ExtraTreesClassifier"], [558, 1, 1, "", "ExtraTreesRegressor"], [559, 1, 1, "", "GradientBoostingClassifier"], [560, 1, 1, "", "GradientBoostingRegressor"], [561, 1, 1, "", "HistGradientBoostingClassifier"], [562, 1, 1, "", "HistGradientBoostingRegressor"], [563, 1, 1, "", "IsolationForest"], [564, 1, 1, "", "RandomForestClassifier"], [565, 1, 1, "", "RandomForestRegressor"], [566, 1, 1, "", "RandomTreesEmbedding"], [567, 1, 1, "", "StackingClassifier"], [568, 1, 1, "", "StackingRegressor"], [569, 1, 1, "", "VotingClassifier"], [570, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[553, 2, 1, "", "decision_function"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_decision_function"], [553, 2, 1, "", "staged_predict"], [553, 2, 1, "", "staged_predict_proba"], [553, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[555, 2, 1, "", "decision_function"], [555, 3, 1, "", "estimators_samples_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_path"], [557, 3, 1, "", "estimators_samples_"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "estimators_samples_"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_function"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[560, 2, 1, "", "apply"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[561, 2, 1, "", "decision_function"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_iter_"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_decision_function"], [561, 2, 1, "", "staged_predict"], [561, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_iter_"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[563, 2, 1, "", "decision_function"], [563, 3, 1, "", "estimators_samples_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_predict"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score_samples"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[567, 2, 1, "", "decision_function"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.exceptions": [[571, 1, 1, "", "ConvergenceWarning"], [572, 1, 1, "", "DataConversionWarning"], [573, 1, 1, "", "DataDimensionalityWarning"], [574, 1, 1, "", "EfficiencyWarning"], [575, 1, 1, "", "FitFailedWarning"], [576, 1, 1, "", "InconsistentVersionWarning"], [577, 1, 1, "", "NotFittedError"], [578, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[575, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[576, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[577, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[578, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[579, 0, 0, "-", "enable_halving_search_cv"], [580, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[581, 1, 1, "", "DictVectorizer"], [582, 1, 1, "", "FeatureHasher"], [407, 0, 0, "-", "image"], [407, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "restrict"], [581, 2, 1, "", "set_inverse_transform_request"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "set_transform_request"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[583, 1, 1, "", "PatchExtractor"], [584, 4, 1, "", "extract_patches_2d"], [585, 4, 1, "", "grid_to_graph"], [586, 4, 1, "", "img_to_graph"], [587, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[588, 1, 1, "", "CountVectorizer"], [589, 1, 1, "", "HashingVectorizer"], [590, 1, 1, "", "TfidfTransformer"], [591, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[588, 2, 1, "", "build_analyzer"], [588, 2, 1, "", "build_preprocessor"], [588, 2, 1, "", "build_tokenizer"], [588, 2, 1, "", "decode"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_stop_words"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_fit_request"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 2, 1, "", "partial_fit"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "set_transform_request"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[591, 2, 1, "", "build_analyzer"], [591, 2, 1, "", "build_preprocessor"], [591, 2, 1, "", "build_tokenizer"], [591, 2, 1, "", "decode"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_stop_words"], [591, 3, 1, "", "idf_"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_fit_request"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection": [[592, 1, 1, "", "GenericUnivariateSelect"], [593, 1, 1, "", "RFE"], [594, 1, 1, "", "RFECV"], [595, 1, 1, "", "SelectFdr"], [596, 1, 1, "", "SelectFpr"], [597, 1, 1, "", "SelectFromModel"], [598, 1, 1, "", "SelectFwe"], [599, 1, 1, "", "SelectKBest"], [600, 1, 1, "", "SelectPercentile"], [601, 1, 1, "", "SelectorMixin"], [602, 1, 1, "", "SequentialFeatureSelector"], [603, 1, 1, "", "VarianceThreshold"], [604, 4, 1, "", "chi2"], [605, 4, 1, "", "f_classif"], [606, 4, 1, "", "f_regression"], [607, 4, 1, "", "mutual_info_classif"], [608, 4, 1, "", "mutual_info_regression"], [609, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[593, 3, 1, "", "classes_"], [593, 2, 1, "", "decision_function"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "predict_log_proba"], [593, 2, 1, "", "predict_proba"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[594, 3, 1, "", "classes_"], [594, 2, 1, "", "decision_function"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "predict_log_proba"], [594, 2, 1, "", "predict_proba"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_fit_request"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 3, 1, "", "n_features_in_"], [597, 2, 1, "", "partial_fit"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "threshold_"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[610, 1, 1, "", "GaussianProcessClassifier"], [611, 1, 1, "", "GaussianProcessRegressor"], [407, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "kernel_"], [610, 2, 1, "", "log_marginal_likelihood"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "predict_proba"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "log_marginal_likelihood"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "sample_y"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_predict_request"], [611, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[612, 1, 1, "", "CompoundKernel"], [613, 1, 1, "", "ConstantKernel"], [614, 1, 1, "", "DotProduct"], [615, 1, 1, "", "ExpSineSquared"], [616, 1, 1, "", "Exponentiation"], [617, 1, 1, "", "Hyperparameter"], [618, 1, 1, "", "Kernel"], [619, 1, 1, "", "Matern"], [620, 1, 1, "", "PairwiseKernel"], [621, 1, 1, "", "Product"], [622, 1, 1, "", "RBF"], [623, 1, 1, "", "RationalQuadratic"], [624, 1, 1, "", "Sum"], [625, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameter_length_scale"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[617, 2, 1, "", "__call__"], [617, 5, 1, "", "bounds"], [617, 2, 1, "", "count"], [617, 5, 1, "", "fixed"], [617, 2, 1, "", "index"], [617, 5, 1, "", "n_elements"], [617, 5, 1, "", "name"], [617, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.impute": [[627, 1, 1, "", "IterativeImputer"], [628, 1, 1, "", "KNNImputer"], [629, 1, 1, "", "MissingIndicator"], [630, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "inverse_transform"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.inspection": [[631, 1, 1, "", "DecisionBoundaryDisplay"], [632, 1, 1, "", "PartialDependenceDisplay"], [633, 4, 1, "", "partial_dependence"], [634, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[631, 2, 1, "", "from_estimator"], [631, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[632, 2, 1, "", "from_estimator"], [632, 2, 1, "", "plot"]], "sklearn.isotonic": [[635, 1, 1, "", "IsotonicRegression"], [636, 4, 1, "", "check_increasing"], [637, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_predict_request"], [635, 2, 1, "", "set_score_request"], [635, 2, 1, "", "set_transform_request"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[638, 1, 1, "", "AdditiveChi2Sampler"], [639, 1, 1, "", "Nystroem"], [640, 1, 1, "", "PolynomialCountSketch"], [641, 1, 1, "", "RBFSampler"], [642, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[643, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[644, 1, 1, "", "ARDRegression"], [645, 1, 1, "", "BayesianRidge"], [646, 1, 1, "", "ElasticNet"], [647, 1, 1, "", "ElasticNetCV"], [648, 1, 1, "", "GammaRegressor"], [649, 1, 1, "", "HuberRegressor"], [650, 1, 1, "", "Lars"], [651, 1, 1, "", "LarsCV"], [652, 1, 1, "", "Lasso"], [653, 1, 1, "", "LassoCV"], [654, 1, 1, "", "LassoLars"], [655, 1, 1, "", "LassoLarsCV"], [656, 1, 1, "", "LassoLarsIC"], [657, 1, 1, "", "LinearRegression"], [658, 1, 1, "", "LogisticRegression"], [659, 1, 1, "", "LogisticRegressionCV"], [660, 1, 1, "", "MultiTaskElasticNet"], [661, 1, 1, "", "MultiTaskElasticNetCV"], [662, 1, 1, "", "MultiTaskLasso"], [663, 1, 1, "", "MultiTaskLassoCV"], [664, 1, 1, "", "OrthogonalMatchingPursuit"], [665, 1, 1, "", "OrthogonalMatchingPursuitCV"], [666, 1, 1, "", "PassiveAggressiveClassifier"], [667, 1, 1, "", "PassiveAggressiveRegressor"], [668, 1, 1, "", "Perceptron"], [669, 1, 1, "", "PoissonRegressor"], [670, 1, 1, "", "QuantileRegressor"], [671, 1, 1, "", "RANSACRegressor"], [672, 1, 1, "", "Ridge"], [673, 1, 1, "", "RidgeCV"], [674, 1, 1, "", "RidgeClassifier"], [675, 1, 1, "", "RidgeClassifierCV"], [676, 1, 1, "", "SGDClassifier"], [677, 1, 1, "", "SGDOneClassSVM"], [678, 1, 1, "", "SGDRegressor"], [679, 1, 1, "", "TheilSenRegressor"], [680, 1, 1, "", "TweedieRegressor"], [681, 4, 1, "", "enet_path"], [682, 4, 1, "", "lars_path"], [683, 4, 1, "", "lars_path_gram"], [684, 4, 1, "", "lasso_path"], [685, 4, 1, "", "orthogonal_mp"], [686, 4, 1, "", "orthogonal_mp_gram"], [687, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_predict_request"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_predict_request"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"], [646, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"], [652, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "predict_log_proba"], [658, 2, 1, "", "predict_proba"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[668, 2, 1, "", "decision_function"], [668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[674, 3, 1, "", "classes_"], [674, 2, 1, "", "decision_function"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[675, 3, 1, "", "classes_"], [675, 2, 1, "", "decision_function"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[676, 2, 1, "", "decision_function"], [676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "predict_log_proba"], [676, 2, 1, "", "predict_proba"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_predict"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score_samples"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[678, 2, 1, "", "densify"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "partial_fit"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_partial_fit_request"], [678, 2, 1, "", "set_score_request"], [678, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[688, 1, 1, "", "Isomap"], [689, 1, 1, "", "LocallyLinearEmbedding"], [690, 1, 1, "", "MDS"], [691, 1, 1, "", "SpectralEmbedding"], [692, 1, 1, "", "TSNE"], [693, 4, 1, "", "locally_linear_embedding"], [694, 4, 1, "", "smacof"], [695, 4, 1, "", "spectral_embedding"], [696, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_feature_names_out"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "reconstruction_error"], [688, 2, 1, "", "set_output"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_fit_request"], [690, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"]], "sklearn.metrics": [[697, 1, 1, "", "ConfusionMatrixDisplay"], [698, 1, 1, "", "DetCurveDisplay"], [699, 1, 1, "", "DistanceMetric"], [700, 1, 1, "", "PrecisionRecallDisplay"], [701, 1, 1, "", "PredictionErrorDisplay"], [702, 1, 1, "", "RocCurveDisplay"], [703, 4, 1, "", "accuracy_score"], [704, 4, 1, "", "adjusted_mutual_info_score"], [705, 4, 1, "", "adjusted_rand_score"], [706, 4, 1, "", "auc"], [707, 4, 1, "", "average_precision_score"], [708, 4, 1, "", "balanced_accuracy_score"], [709, 4, 1, "", "brier_score_loss"], [710, 4, 1, "", "calinski_harabasz_score"], [711, 4, 1, "", "check_scoring"], [712, 4, 1, "", "class_likelihood_ratios"], [713, 4, 1, "", "classification_report"], [407, 0, 0, "-", "cluster"], [716, 4, 1, "", "cohen_kappa_score"], [717, 4, 1, "", "completeness_score"], [718, 4, 1, "", "confusion_matrix"], [719, 4, 1, "", "consensus_score"], [720, 4, 1, "", "coverage_error"], [721, 4, 1, "", "d2_absolute_error_score"], [722, 4, 1, "", "d2_log_loss_score"], [723, 4, 1, "", "d2_pinball_score"], [724, 4, 1, "", "d2_tweedie_score"], [725, 4, 1, "", "davies_bouldin_score"], [726, 4, 1, "", "dcg_score"], [727, 4, 1, "", "det_curve"], [728, 4, 1, "", "explained_variance_score"], [729, 4, 1, "", "f1_score"], [730, 4, 1, "", "fbeta_score"], [731, 4, 1, "", "fowlkes_mallows_score"], [732, 4, 1, "", "get_scorer"], [733, 4, 1, "", "get_scorer_names"], [734, 4, 1, "", "hamming_loss"], [735, 4, 1, "", "hinge_loss"], [736, 4, 1, "", "homogeneity_completeness_v_measure"], [737, 4, 1, "", "homogeneity_score"], [738, 4, 1, "", "jaccard_score"], [739, 4, 1, "", "label_ranking_average_precision_score"], [740, 4, 1, "", "label_ranking_loss"], [741, 4, 1, "", "log_loss"], [742, 4, 1, "", "make_scorer"], [743, 4, 1, "", "matthews_corrcoef"], [744, 4, 1, "", "max_error"], [745, 4, 1, "", "mean_absolute_error"], [746, 4, 1, "", "mean_absolute_percentage_error"], [747, 4, 1, "", "mean_gamma_deviance"], [748, 4, 1, "", "mean_pinball_loss"], [749, 4, 1, "", "mean_poisson_deviance"], [750, 4, 1, "", "mean_squared_error"], [751, 4, 1, "", "mean_squared_log_error"], [752, 4, 1, "", "mean_tweedie_deviance"], [753, 4, 1, "", "median_absolute_error"], [754, 4, 1, "", "multilabel_confusion_matrix"], [755, 4, 1, "", "mutual_info_score"], [756, 4, 1, "", "ndcg_score"], [757, 4, 1, "", "normalized_mutual_info_score"], [407, 0, 0, "-", "pairwise"], [778, 4, 1, "", "pairwise_distances"], [779, 4, 1, "", "pairwise_distances_argmin"], [780, 4, 1, "", "pairwise_distances_argmin_min"], [781, 4, 1, "", "pairwise_distances_chunked"], [782, 4, 1, "", "precision_recall_curve"], [783, 4, 1, "", "precision_recall_fscore_support"], [784, 4, 1, "", "precision_score"], [785, 4, 1, "", "r2_score"], [786, 4, 1, "", "rand_score"], [787, 4, 1, "", "recall_score"], [788, 4, 1, "", "roc_auc_score"], [789, 4, 1, "", "roc_curve"], [790, 4, 1, "", "root_mean_squared_error"], [791, 4, 1, "", "root_mean_squared_log_error"], [792, 4, 1, "", "silhouette_samples"], [793, 4, 1, "", "silhouette_score"], [794, 4, 1, "", "top_k_accuracy_score"], [795, 4, 1, "", "v_measure_score"], [796, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[699, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[714, 4, 1, "", "contingency_matrix"], [715, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[758, 4, 1, "", "additive_chi2_kernel"], [759, 4, 1, "", "chi2_kernel"], [760, 4, 1, "", "cosine_distances"], [761, 4, 1, "", "cosine_similarity"], [762, 4, 1, "", "distance_metrics"], [763, 4, 1, "", "euclidean_distances"], [764, 4, 1, "", "haversine_distances"], [765, 4, 1, "", "kernel_metrics"], [766, 4, 1, "", "laplacian_kernel"], [767, 4, 1, "", "linear_kernel"], [768, 4, 1, "", "manhattan_distances"], [769, 4, 1, "", "nan_euclidean_distances"], [770, 4, 1, "", "paired_cosine_distances"], [771, 4, 1, "", "paired_distances"], [772, 4, 1, "", "paired_euclidean_distances"], [773, 4, 1, "", "paired_manhattan_distances"], [774, 4, 1, "", "pairwise_kernels"], [775, 4, 1, "", "polynomial_kernel"], [776, 4, 1, "", "rbf_kernel"], [777, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[797, 1, 1, "", "BayesianGaussianMixture"], [798, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[797, 2, 1, "", "fit"], [797, 2, 1, "", "fit_predict"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "sample"], [797, 2, 1, "", "score"], [797, 2, 1, "", "score_samples"], [797, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[798, 2, 1, "", "aic"], [798, 2, 1, "", "bic"], [798, 2, 1, "", "fit"], [798, 2, 1, "", "fit_predict"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "sample"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"]], "sklearn.model_selection": [[799, 1, 1, "", "FixedThresholdClassifier"], [800, 1, 1, "", "GridSearchCV"], [801, 1, 1, "", "GroupKFold"], [802, 1, 1, "", "GroupShuffleSplit"], [803, 1, 1, "", "HalvingGridSearchCV"], [804, 1, 1, "", "HalvingRandomSearchCV"], [805, 1, 1, "", "KFold"], [806, 1, 1, "", "LearningCurveDisplay"], [807, 1, 1, "", "LeaveOneGroupOut"], [808, 1, 1, "", "LeaveOneOut"], [809, 1, 1, "", "LeavePGroupsOut"], [810, 1, 1, "", "LeavePOut"], [811, 1, 1, "", "ParameterGrid"], [812, 1, 1, "", "ParameterSampler"], [813, 1, 1, "", "PredefinedSplit"], [814, 1, 1, "", "RandomizedSearchCV"], [815, 1, 1, "", "RepeatedKFold"], [816, 1, 1, "", "RepeatedStratifiedKFold"], [817, 1, 1, "", "ShuffleSplit"], [818, 1, 1, "", "StratifiedGroupKFold"], [819, 1, 1, "", "StratifiedKFold"], [820, 1, 1, "", "StratifiedShuffleSplit"], [821, 1, 1, "", "TimeSeriesSplit"], [822, 1, 1, "", "TunedThresholdClassifierCV"], [823, 1, 1, "", "ValidationCurveDisplay"], [824, 4, 1, "", "check_cv"], [825, 4, 1, "", "cross_val_predict"], [826, 4, 1, "", "cross_val_score"], [827, 4, 1, "", "cross_validate"], [828, 4, 1, "", "learning_curve"], [829, 4, 1, "", "permutation_test_score"], [830, 4, 1, "", "train_test_split"], [831, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[799, 3, 1, "", "classes_"], [799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "inverse_transform"], [800, 3, 1, "", "n_features_in_"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "set_split_request"], [801, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "set_split_request"], [802, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 3, 1, "", "n_features_in_"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[806, 2, 1, "", "from_estimator"], [806, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "set_split_request"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[814, 3, 1, "", "classes_"], [814, 2, 1, "", "decision_function"], [814, 2, 1, "", "fit"], [814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "inverse_transform"], [814, 3, 1, "", "n_features_in_"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_log_proba"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "score_samples"], [814, 2, 1, "", "set_params"], [814, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "set_split_request"], [818, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[822, 3, 1, "", "classes_"], [822, 2, 1, "", "decision_function"], [822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[823, 2, 1, "", "from_estimator"], [823, 2, 1, "", "plot"]], "sklearn.multiclass": [[832, 1, 1, "", "OneVsOneClassifier"], [833, 1, 1, "", "OneVsRestClassifier"], [834, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[832, 2, 1, "", "decision_function"], [832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 3, 1, "", "n_classes_"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[833, 2, 1, "", "decision_function"], [833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 3, 1, "", "multilabel_"], [833, 3, 1, "", "n_classes_"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[835, 1, 1, "", "ClassifierChain"], [836, 1, 1, "", "MultiOutputClassifier"], [837, 1, 1, "", "MultiOutputRegressor"], [838, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[835, 2, 1, "", "decision_function"], [835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[839, 1, 1, "", "BernoulliNB"], [840, 1, 1, "", "CategoricalNB"], [841, 1, 1, "", "ComplementNB"], [842, 1, 1, "", "GaussianNB"], [843, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_joint_log_proba"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_joint_log_proba"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_joint_log_proba"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[844, 1, 1, "", "BallTree"], [845, 1, 1, "", "KDTree"], [846, 1, 1, "", "KNeighborsClassifier"], [847, 1, 1, "", "KNeighborsRegressor"], [848, 1, 1, "", "KNeighborsTransformer"], [849, 1, 1, "", "KernelDensity"], [850, 1, 1, "", "LocalOutlierFactor"], [851, 1, 1, "", "NearestCentroid"], [852, 1, 1, "", "NearestNeighbors"], [853, 1, 1, "", "NeighborhoodComponentsAnalysis"], [854, 1, 1, "", "RadiusNeighborsClassifier"], [855, 1, 1, "", "RadiusNeighborsRegressor"], [856, 1, 1, "", "RadiusNeighborsTransformer"], [857, 4, 1, "", "kneighbors_graph"], [858, 4, 1, "", "radius_neighbors_graph"], [859, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[844, 2, 1, "", "get_arrays"], [844, 2, 1, "", "get_n_calls"], [844, 2, 1, "", "get_tree_stats"], [844, 2, 1, "", "kernel_density"], [844, 2, 1, "", "query"], [844, 2, 1, "", "query_radius"], [844, 2, 1, "", "reset_n_calls"], [844, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[845, 2, 1, "", "get_arrays"], [845, 2, 1, "", "get_n_calls"], [845, 2, 1, "", "get_tree_stats"], [845, 2, 1, "", "kernel_density"], [845, 2, 1, "", "query"], [845, 2, 1, "", "query_radius"], [845, 2, 1, "", "reset_n_calls"], [845, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "kneighbors"], [846, 2, 1, "", "kneighbors_graph"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "sample"], [849, 2, 1, "", "score"], [849, 2, 1, "", "score_samples"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[850, 2, 1, "", "decision_function"], [850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_predict"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score_samples"], [850, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "radius_neighbors"], [852, 2, 1, "", "radius_neighbors_graph"], [852, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_proba"], [854, 2, 1, "", "radius_neighbors"], [854, 2, 1, "", "radius_neighbors_graph"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neural_network": [[860, 1, 1, "", "BernoulliRBM"], [861, 1, 1, "", "MLPClassifier"], [862, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "gibbs"], [860, 2, 1, "", "partial_fit"], [860, 2, 1, "", "score_samples"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_log_proba"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_partial_fit_request"], [861, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[863, 1, 1, "", "FeatureUnion"], [864, 1, 1, "", "Pipeline"], [865, 4, 1, "", "make_pipeline"], [866, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[863, 3, 1, "", "feature_names_in_"], [863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 3, 1, "", "n_features_in_"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[864, 3, 1, "", "classes_"], [864, 2, 1, "", "decision_function"], [864, 3, 1, "", "feature_names_in_"], [864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_predict"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 3, 1, "", "n_features_in_"], [864, 3, 1, "", "named_steps"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "predict_log_proba"], [864, 2, 1, "", "predict_proba"], [864, 2, 1, "", "score"], [864, 2, 1, "", "score_samples"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_score_request"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing": [[867, 1, 1, "", "Binarizer"], [868, 1, 1, "", "FunctionTransformer"], [869, 1, 1, "", "KBinsDiscretizer"], [870, 1, 1, "", "KernelCenterer"], [871, 1, 1, "", "LabelBinarizer"], [872, 1, 1, "", "LabelEncoder"], [873, 1, 1, "", "MaxAbsScaler"], [874, 1, 1, "", "MinMaxScaler"], [875, 1, 1, "", "MultiLabelBinarizer"], [876, 1, 1, "", "Normalizer"], [877, 1, 1, "", "OneHotEncoder"], [878, 1, 1, "", "OrdinalEncoder"], [879, 1, 1, "", "PolynomialFeatures"], [880, 1, 1, "", "PowerTransformer"], [881, 1, 1, "", "QuantileTransformer"], [882, 1, 1, "", "RobustScaler"], [883, 1, 1, "", "SplineTransformer"], [884, 1, 1, "", "StandardScaler"], [885, 1, 1, "", "TargetEncoder"], [886, 4, 1, "", "add_dummy_feature"], [887, 4, 1, "", "binarize"], [888, 4, 1, "", "label_binarize"], [889, 4, 1, "", "maxabs_scale"], [890, 4, 1, "", "minmax_scale"], [891, 4, 1, "", "normalize"], [892, 4, 1, "", "power_transform"], [893, 4, 1, "", "quantile_transform"], [894, 4, 1, "", "robust_scale"], [895, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_transform_request"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_fit_request"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_inverse_transform_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "partial_fit"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "partial_fit"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_transform_request"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 3, 1, "", "infrequent_categories_"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "infrequent_categories_"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "powers_"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "set_fit_request"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "partial_fit"], [884, 2, 1, "", "set_fit_request"], [884, 2, 1, "", "set_inverse_transform_request"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "set_partial_fit_request"], [884, 2, 1, "", "set_transform_request"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "infrequent_categories_"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.random_projection": [[896, 1, 1, "", "GaussianRandomProjection"], [897, 1, 1, "", "SparseRandomProjection"], [898, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[896, 2, 1, "", "fit"], [896, 2, 1, "", "fit_transform"], [896, 2, 1, "", "get_feature_names_out"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "inverse_transform"], [896, 2, 1, "", "set_output"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[897, 2, 1, "", "fit"], [897, 2, 1, "", "fit_transform"], [897, 2, 1, "", "get_feature_names_out"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "inverse_transform"], [897, 2, 1, "", "set_output"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[899, 1, 1, "", "LabelPropagation"], [900, 1, 1, "", "LabelSpreading"], [901, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "predict_proba"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[901, 2, 1, "", "decision_function"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_log_proba"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_params"]], "sklearn.svm": [[904, 1, 1, "", "LinearSVC"], [905, 1, 1, "", "LinearSVR"], [906, 1, 1, "", "NuSVC"], [907, 1, 1, "", "NuSVR"], [908, 1, 1, "", "OneClassSVM"], [909, 1, 1, "", "SVC"], [910, 1, 1, "", "SVR"], [911, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[904, 2, 1, "", "decision_function"], [904, 2, 1, "", "densify"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"], [904, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[906, 3, 1, "", "coef_"], [906, 2, 1, "", "decision_function"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 3, 1, "", "n_support_"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_log_proba"], [906, 2, 1, "", "predict_proba"], [906, 3, 1, "", "probA_"], [906, 3, 1, "", "probB_"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[907, 3, 1, "", "coef_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 3, 1, "", "n_support_"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[908, 3, 1, "", "coef_"], [908, 2, 1, "", "decision_function"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "fit_predict"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 3, 1, "", "n_support_"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score_samples"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 3, 1, "", "probA_"], [909, 3, 1, "", "probB_"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.tree": [[912, 1, 1, "", "DecisionTreeClassifier"], [913, 1, 1, "", "DecisionTreeRegressor"], [914, 1, 1, "", "ExtraTreeClassifier"], [915, 1, 1, "", "ExtraTreeRegressor"], [916, 4, 1, "", "export_graphviz"], [917, 4, 1, "", "export_text"], [918, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[912, 2, 1, "", "apply"], [912, 2, 1, "", "cost_complexity_pruning_path"], [912, 2, 1, "", "decision_path"], [912, 3, 1, "", "feature_importances_"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_depth"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_n_leaves"], [912, 2, 1, "", "get_params"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "predict_log_proba"], [912, 2, 1, "", "predict_proba"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_predict_proba_request"], [912, 2, 1, "", "set_predict_request"], [912, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[913, 2, 1, "", "apply"], [913, 2, 1, "", "cost_complexity_pruning_path"], [913, 2, 1, "", "decision_path"], [913, 3, 1, "", "feature_importances_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_depth"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_n_leaves"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_predict_request"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[914, 2, 1, "", "apply"], [914, 2, 1, "", "cost_complexity_pruning_path"], [914, 2, 1, "", "decision_path"], [914, 3, 1, "", "feature_importances_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_depth"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_n_leaves"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "predict_log_proba"], [914, 2, 1, "", "predict_proba"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_predict_proba_request"], [914, 2, 1, "", "set_predict_request"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_predict_request"], [915, 2, 1, "", "set_score_request"]], "sklearn.utils": [[919, 1, 1, "", "Bunch"], [920, 4, 1, "", "_safe_indexing"], [407, 0, 0, "-", "arrayfuncs"], [922, 4, 1, "", "as_float_array"], [923, 4, 1, "", "assert_all_finite"], [924, 4, 1, "", "check_X_y"], [925, 4, 1, "", "check_array"], [926, 4, 1, "", "check_consistent_length"], [927, 4, 1, "", "check_random_state"], [928, 4, 1, "", "check_scalar"], [407, 0, 0, "-", "class_weight"], [931, 4, 1, "", "deprecated"], [407, 0, 0, "-", "discovery"], [407, 0, 0, "-", "estimator_checks"], [937, 4, 1, "", "estimator_html_repr"], [407, 0, 0, "-", "extmath"], [944, 4, 1, "", "gen_batches"], [945, 4, 1, "", "gen_even_slices"], [407, 0, 0, "-", "graph"], [947, 4, 1, "", "indexable"], [407, 0, 0, "-", "metadata_routing"], [407, 0, 0, "-", "metaestimators"], [407, 0, 0, "-", "multiclass"], [957, 4, 1, "", "murmurhash3_32"], [407, 0, 0, "-", "parallel"], [960, 4, 1, "", "parallel_backend"], [407, 0, 0, "-", "random"], [962, 4, 1, "", "register_parallel_backend"], [963, 4, 1, "", "resample"], [964, 4, 1, "", "safe_mask"], [965, 4, 1, "", "safe_sqr"], [966, 4, 1, "", "shuffle"], [407, 0, 0, "-", "sparsefuncs"], [407, 0, 0, "-", "sparsefuncs_fast"], [407, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[919, 2, 1, "", "clear"], [919, 2, 1, "", "copy"], [919, 2, 1, "", "fromkeys"], [919, 2, 1, "", "get"], [919, 2, 1, "", "items"], [919, 2, 1, "", "keys"], [919, 2, 1, "", "pop"], [919, 2, 1, "", "popitem"], [919, 2, 1, "", "setdefault"], [919, 2, 1, "", "update"], [919, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[921, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[929, 4, 1, "", "compute_class_weight"], [930, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[932, 4, 1, "", "all_displays"], [933, 4, 1, "", "all_estimators"], [934, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[935, 4, 1, "", "check_estimator"], [936, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[938, 4, 1, "", "density"], [939, 4, 1, "", "fast_logdet"], [940, 4, 1, "", "randomized_range_finder"], [941, 4, 1, "", "randomized_svd"], [942, 4, 1, "", "safe_sparse_dot"], [943, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[946, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[948, 1, 1, "", "MetadataRequest"], [949, 1, 1, "", "MetadataRouter"], [950, 1, 1, "", "MethodMapping"], [951, 4, 1, "", "get_routing_for_object"], [952, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[948, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[949, 2, 1, "", "add"], [949, 2, 1, "", "add_self_request"], [949, 2, 1, "", "consumes"], [949, 2, 1, "", "route_params"], [949, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[950, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[953, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[954, 4, 1, "", "is_multilabel"], [955, 4, 1, "", "type_of_target"], [956, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[958, 1, 1, "", "Parallel"], [959, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[958, 2, 1, "", "dispatch_next"], [958, 2, 1, "", "dispatch_one_batch"], [958, 2, 1, "", "format"], [958, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[961, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[967, 4, 1, "", "incr_mean_variance_axis"], [968, 4, 1, "", "inplace_column_scale"], [969, 4, 1, "", "inplace_csr_column_scale"], [970, 4, 1, "", "inplace_row_scale"], [971, 4, 1, "", "inplace_swap_column"], [972, 4, 1, "", "inplace_swap_row"], [973, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[974, 4, 1, "", "inplace_csr_row_normalize_l1"], [975, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[976, 4, 1, "", "check_is_fitted"], [977, 4, 1, "", "check_memory"], [978, 4, 1, "", "check_symmetric"], [979, 4, 1, "", "column_or_1d"], [980, 4, 1, "", "has_fit_parameter"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "terms": {"": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 15, 17, 18, 22, 25, 32, 36, 37, 38, 40, 41, 42, 44, 45, 46, 50, 51, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 68, 69, 76, 77, 80, 83, 88, 89, 90, 93, 94, 95, 98, 101, 102, 103, 107, 109, 111, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 167, 168, 170, 173, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 195, 197, 199, 201, 203, 204, 206, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 226, 227, 230, 232, 233, 234, 236, 243, 245, 246, 248, 253, 254, 259, 260, 261, 262, 263, 266, 270, 272, 274, 283, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 302, 304, 305, 308, 311, 313, 315, 317, 318, 319, 320, 321, 322, 326, 327, 335, 336, 337, 338, 339, 342, 343, 344, 347, 350, 351, 352, 356, 357, 358, 359, 361, 365, 366, 367, 368, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 393, 394, 395, 396, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 423, 430, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 491, 496, 498, 500, 504, 510, 511, 519, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 708, 711, 716, 720, 722, 735, 741, 758, 759, 779, 780, 797, 798, 799, 800, 802, 803, 804, 809, 814, 818, 819, 822, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 922, 924, 925, 928, 941, 943, 949, 950, 952, 976, 980, 981, 983, 984, 986, 988, 989, 990, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1017, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 365, 366, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 924, 925, 929, 930, 932, 933, 934, 935, 936, 938, 940, 941, 943, 944, 945, 946, 953, 954, 955, 957, 958, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "00": [11, 14, 20, 26, 30, 33, 66, 74, 78, 81, 85, 91, 96, 104, 106, 134, 139, 147, 159, 163, 167, 168, 171, 174, 188, 212, 215, 216, 224, 230, 241, 250, 257, 260, 276, 279, 282, 297, 302, 303, 313, 322, 323, 325, 326, 331, 332, 348, 351, 353, 360, 373, 376, 385, 409, 416, 417, 605, 606, 713, 715, 788, 800, 814, 828, 913, 988, 992, 1002, 1004, 1006, 1014, 1027], "000": [2, 3, 14, 19, 23, 25, 40, 72, 106, 150, 169, 173, 230, 253, 257, 259, 261, 297, 310, 318, 332, 350, 351, 361, 374, 385, 416, 417, 490, 561, 562, 644, 677, 1006, 1014, 1028, 1046], "0000": [2, 320], "000000": [42, 167, 186, 215, 259, 309, 737], "00000000": 152, "000000e": 215, "000024": 365, "000045": 167, "00005": 13, "0000ff": [29, 291, 299], "0001": [8, 146, 205, 257, 381, 421, 443, 447, 459, 471, 472, 478, 533, 538, 540, 547, 549, 550, 559, 560, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 668, 669, 672, 674, 676, 678, 680, 687, 689, 693, 861, 862, 904, 905, 981], "000175": 5, "000176": 5, "000190": 5, "000198": 167, "000225": 5, "000249": 5, "000262": 5, "0002652948464431897": 272, "000285": 5, "0003": 112, "000394": 5, "0004": [112, 310, 604], "000485": 350, "000547": 350, "000581": 350, "000596": 5, "000622": 350, "000698": 350, "0007": 350, "0008": 387, "000819": 5, "000977": 259, "00099547": 152, "000e": 417, "001": [5, 12, 30, 42, 60, 120, 146, 149, 167, 181, 206, 226, 236, 243, 257, 259, 261, 328, 351, 376, 385, 413, 536, 537, 539, 546, 627, 644, 645, 646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 684, 689, 690, 693, 694, 797, 798, 861, 862, 899, 900, 906, 907, 908, 909, 910, 981, 1019, 1028], "0012": [2, 694], "0013": 2, "00134": 350, "0014": 2, "0015": 2, "001540": 11, "00166409": 661, "00171": 350, "00171412": [758, 759, 990], "001727": 253, "001882": [185, 186], "002": [2, 10, 146, 149, 351, 376], "002592": [185, 186], "0026": 350, "00274": 197, "0028": 2, "002861": [185, 186], "003": 2, "0032": 2, "0034189458230957995": 4, "003533": 186, "003586": 536, "00360392": 536, "0036211": 536, "00362644": 536, "00364": 319, "00368320": 11, "00375": 1023, "00393284e": 178, "003935": [185, 186], "003e": 417, "004": 2, "0044": 911, "004577621581492997": 312, "00462428": 751, "004854": 257, "0049896314219659565": 312, "005": [2, 4, 116, 259, 263, 288, 305, 351, 385], "005027": 262, "005383": [185, 186], "005422": 259, "005670": [185, 186], "0057717": 11, "005840": 262, "005861": 262, "006": [2, 267, 309, 313, 385, 1014], "006360": 262, "007": [243, 267, 283, 351], "0072b2": 243, "0075": [473, 541], "00755": 541, "007581": 264, "00768662e": 178, "0077": 1023, "007822": 273, "007833": 264, "008": [146, 351, 376, 385], "008142": [185, 186], "0083899664": 764, "008449": [185, 186], "00860051": 658, "008915": 262, "009": [2, 385], "009075": 167, "00911944e": 178, "0092": 112, "009362": [185, 186], "009747": 273, "009778": 262, "009788": 273, "0098": 112, "00ff00": 291, "01": [4, 6, 8, 11, 12, 14, 26, 33, 38, 42, 49, 60, 66, 74, 93, 95, 96, 112, 121, 123, 125, 127, 128, 134, 146, 154, 158, 159, 167, 168, 178, 181, 188, 204, 209, 210, 215, 216, 218, 219, 226, 230, 231, 232, 236, 237, 241, 245, 249, 250, 252, 258, 259, 260, 264, 266, 267, 268, 276, 282, 288, 297, 300, 302, 303, 305, 313, 316, 322, 323, 340, 348, 351, 357, 358, 360, 374, 376, 384, 409, 418, 449, 471, 515, 521, 532, 539, 543, 545, 595, 596, 598, 605, 642, 646, 654, 658, 678, 696, 715, 800, 814, 898, 961, 988, 992, 996, 1002, 1004, 1006, 1014, 1024, 1028], "010": [11, 351, 385, 829, 1000], "0106": 649, "010877306503748912": 267, "011": [2, 56, 267, 283, 351, 385], "011595": [185, 186], "0116": 604, "011e": 417, "012": [11, 143, 147, 170, 173, 181, 351, 1014], "012191": [185, 186], "012521": 186, "012831": 186, "0129126": 373, "013": [2, 11, 267, 351], "01327": 374, "013519": 167, "014": [2, 170, 171, 267, 318, 323, 385, 1014], "0144": 615, "015": [351, 355, 1000], "0152": 112, "015347e": 215, "015414e": 215, "015579": 273, "015587e": 215, "015596": [185, 186], "0157": 544, "015716e": 215, "016": 351, "01621459": 409, "016445": 259, "017": [385, 471, 472], "017379": 11, "017646": [185, 186], "018": [11, 259, 315, 323, 472, 1014], "0182": 897, "018727": 167, "0188ff": 309, "018900": 186, "019": [146, 376, 385, 471], "019023": 259, "019069": 186, "01915283": 103, "019163": [185, 186], "0193": [470, 476], "0195": [422, 475], "0196": 112, "0198e1": 90, "019907": [185, 186], "01e": 183, "02": [2, 10, 11, 26, 28, 42, 48, 50, 56, 60, 62, 66, 74, 80, 81, 83, 93, 96, 104, 111, 118, 134, 146, 151, 156, 159, 166, 167, 171, 178, 215, 224, 226, 234, 236, 241, 253, 254, 260, 266, 267, 276, 288, 299, 302, 303, 305, 307, 313, 323, 330, 334, 351, 356, 373, 376, 384, 408, 413, 441, 445, 597, 605, 658, 676, 800, 814, 883, 899, 913, 988, 1014], "020": [2, 11, 1000], "02069427": 51, "021849": 320, "021872": [185, 186], "022": [351, 1000], "022594": 167, "0226": 649, "022688": [185, 186], "023": [11, 267, 905, 1000], "02306214": 667, "024": 212, "02449161": 103, "02456369": 181, "024991": [185, 186], "025": [29, 163, 199, 236, 256, 690, 694], "025102": 167, "025118864315095794": 1026, "025422": 259, "0255": 112, "0256": 152, "02564103": 359, "025930": [185, 186], "026": [46, 84, 228, 241, 351, 1014], "026328": [185, 186], "026711": 52, "027": [11, 146, 351, 376], "0272": 350, "027400": 365, "028": 257, "02818216": 83, "02891072": 993, "029": [183, 1000], "0292": 350, "02d": 186, "03": [10, 11, 50, 66, 78, 93, 125, 134, 146, 147, 154, 167, 171, 178, 215, 230, 241, 243, 249, 260, 276, 297, 313, 326, 351, 376, 417, 748, 800, 988, 992, 1014], "030": [125, 351], "030462": 69, "030498": 69, "0305": 350, "030585": 273, "030677e": 215, "030867": 167, "031": [56, 146, 351, 376], "031020": 69, "031025": 167, "031255": 167, "031555": 186, "03162278": 10, "031988": [185, 186], "032": [13, 46, 149], "0321": 835, "032179": 186, "03228": 622, "03228706": 610, "032356": [185, 186], "03237920e": 178, "032405": 167, "03260883": 993, "033": 1000, "033299": 5, "033764e": 215, "033823": 167, "034": [9, 14, 125, 471, 1014], "034077": 186, "034194": [185, 186], "034278": 262, "034309": [185, 186], "03433306456": 4, "034821": [185, 186], "03498585": 993, "035": [56, 193, 216, 1014], "035005": 167, "03531816": [826, 827], "035445": 273, "0358": 5, "035914": 273, "036": [38, 66, 385, 472, 1014], "036038": [185, 186], "036086": 5, "036385": [185, 186], "036445": 259, "036592": 273, "036656": [185, 186], "0367": 154, "0368": 619, "037": 709, "0370": 850, "037600e": 215, "038": [471, 472, 861], "038076": [185, 186], "03812219": 993, "038159": 812, "03823144": 152, "038689": 248, "0387": 604, "039": [4, 257, 751, 781, 992], "039493": [185, 186], "039497": 240, "03f": 257, "04": [11, 14, 28, 38, 40, 52, 65, 83, 95, 102, 134, 146, 154, 159, 167, 171, 178, 196, 215, 234, 243, 249, 259, 260, 272, 276, 296, 297, 323, 344, 348, 376, 416, 418, 471, 472, 646, 647, 652, 660, 661, 662, 681, 788, 800, 814, 988, 992, 996, 1006, 1014], "040530e": 215, "041": 11, "041297": 300, "0416": 408, "042": [220, 233, 241, 385, 1014], "0427": [215, 469, 474], "042898": 300, "043": 385, "043401": [185, 186], "044": [2, 257, 258, 276, 751, 992, 1014], "044223": [185, 186], "044451": [185, 186], "044642": [185, 186], "0448": 215, "045": [55, 66, 180, 216, 723, 1014], "045037": 5, "04520": 136, "0453": 544, "045311": 300, "045390e": 215, "045599": [185, 186], "045934": 300, "046010e": 215, "046636": 167, "046641": [185, 186], "047": 385, "0479": 544, "048": 1000, "049": 471, "049530": 300, "049540": 300, "0499": 544, "04995982": 83, "05": [5, 6, 11, 13, 14, 17, 20, 22, 24, 35, 42, 50, 58, 60, 62, 63, 65, 66, 73, 83, 89, 98, 112, 115, 122, 125, 128, 134, 136, 139, 142, 146, 157, 158, 163, 167, 177, 178, 196, 199, 211, 216, 222, 223, 224, 226, 236, 243, 245, 246, 249, 250, 259, 260, 268, 270, 288, 291, 296, 305, 307, 315, 319, 326, 328, 331, 343, 353, 376, 418, 450, 456, 478, 525, 530, 531, 546, 592, 595, 596, 598, 613, 614, 615, 619, 620, 622, 623, 625, 632, 633, 649, 690, 694, 756, 800, 853, 904, 905, 988, 996, 1002, 1014], "050": [11, 320, 323, 1000, 1014], "05063247886572012": 267, "050680": [185, 186], "0508": 350, "051": [87, 91, 220, 472, 1014], "0512": 544, "051474": [185, 186], "0517578125e": 5, "052": 537, "05216586": 83, "052506": 320, "053": [2, 109, 134, 146, 351, 376, 385, 1014], "05306648": 101, "05317": 154, "054045": 262, "054699": 167, "0547": 908, "055": [146, 376, 992], "05518": 623, "05532": 620, "05534985": 301, "0556": 908, "056": [11, 755, 1000], "0561": 908, "0566": 623, "05663": 620, "0568": 747, "057": [144, 147, 385, 829, 1014], "057122": 186, "05752333": 103, "057711": 186, "057958": 5, "058": [146, 257, 376], "05840206": 103, "059": [57, 66, 351, 1014], "0595": 473, "05968": 136, "05994843": 10, "05e": 158, "06": [11, 14, 26, 33, 65, 81, 139, 158, 167, 188, 196, 197, 236, 259, 260, 276, 302, 303, 307, 331, 344, 353, 385, 408, 482, 483, 484, 644, 645, 689, 693, 797, 798, 800, 814, 913, 988, 1002, 1004, 1014], "060": [2, 11, 351, 751], "0602": 5, "061": [183, 216, 257, 1014], "0614": 623, "06165": 620, "061696": [185, 186], "062": 351, "0622": [470, 476], "0626": 835, "063": [13, 14, 192, 216, 257, 259, 437, 1014], "0631": 11, "064": [385, 1000], "065": [137, 139, 257, 385, 1014], "06506307": 301, "0652": 622, "06525643": 610, "066": [257, 648], "06686804": 212, "06694199": 103, "06695631e": 78, "067": [158, 339, 343, 348, 1014], "067109": 186, "067528": 186, "068": [2, 11, 13, 209, 216, 259, 1014], "068332": [185, 186], "06880943": 83, "06896552": 449, "069": 257, "069196": 257, "0693": 619, "07": [11, 14, 83, 102, 134, 167, 193, 215, 216, 253, 268, 276, 353, 361, 374, 409, 561, 562, 692, 694, 992, 1006, 1014], "070": [4, 353], "0707": 623, "07073": 620, "071": [146, 376, 437], "071964": 167, "072": [437, 648], "073": [210, 216, 257, 471, 472, 1014], "074": [184, 216, 257, 1014], "074412": [185, 186], "075": [13, 71, 74, 96, 359, 360, 1014], "07582983e": 178, "075887": 186, "076": [2, 892], "077": [262, 276, 283, 1014], "077846": 259, "0779": 5, "078": [2, 112, 134, 1014], "07846529": 301, "07880": 136, "079": [99, 104, 146, 290, 297, 376, 1014], "079297": 259, "07963978e": 178, "07993421": 212, "08": [2, 14, 42, 48, 96, 104, 134, 163, 167, 168, 181, 241, 250, 302, 313, 376, 478, 531, 543, 545, 563, 641, 658, 800, 861, 862, 883, 998, 1014], "08022103": [826, 827], "080295": 186, "081": 1000, "0813": [469, 474], "082": [2, 357, 360, 1014], "0825": 310, "083": [257, 351], "08333333": 359, "08377444": 751, "084": [17, 20, 22, 1014], "0849": 350, "085299": [185, 186], "08533159": 200, "085711": 52, "086": 220, "08604995": 83, "086944": 240, "08699432": 201, "0872422": 660, "088": [236, 241, 669, 1000, 1014], "089063": [185, 186], "08d": 15, "08t16": 373, "09": [14, 95, 96, 102, 167, 230, 234, 272, 276, 302, 409, 529, 607, 735, 842, 992, 1002, 1006, 1014], "090": [200, 212, 216, 334, 348, 1014], "09000": 197, "090528": 167, "090808": 167, "091": [46, 261, 276, 1014], "091053": 167, "091621": 52, "092204": [185, 186], "093": [39, 66, 185, 207, 216, 238, 241, 471, 1014, 1040], "094": 472, "09443967": 301, "095": 232, "09517222": 1026, "09541846": 536, "096": [26, 139, 322, 323, 1014], "09684337": 212, "096950": 300, "097": [2, 146, 376], "098": [117, 179, 183, 216, 220, 351, 1014], "098332": 23, "0986": [417, 868], "09861229": [612, 1002], "098758": 23, "098776": 259, "098932": 23, "099": 2, "099820": 23, "09999999999999999": [232, 267, 338], "0d": 1036, "0e": [270, 549, 550], "0e4": 204, "0f": [17, 56], "0min": 52, "0rc1": [383, 1031], "0x": 927, "0x7f0276b1aaf0": 69, "0x7f0276b1acd0": 69, "0x7f0295ae3240": 266, "0x7f0295bc25b0": 237, "0x7f0295d006a0": 197, "0x7f0296279240": 271, "0x7f0296279340": 271, "0x7f0296c68160": 257, "0x7f0296e75730": 325, "0x7f02971fc6d0": 271, "0x7f02ac995820": 271, "0x7f02acb42790": 130, "0x7f02acb42d30": 130, "0x7f02ace285e0": 248, "0x7f02acffe5e0": 114, "0x7f02ad0fe700": 114, "0x7f02d180e790": 70, "0x7f02d1827280": 69, "1": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 392, 393, 394, 396, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 935, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1031, 1033, 1037], "10": [2, 3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 18, 23, 24, 25, 28, 29, 30, 33, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 69, 70, 72, 76, 77, 78, 79, 80, 83, 84, 90, 95, 96, 97, 98, 102, 103, 109, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 125, 127, 128, 131, 133, 138, 143, 146, 150, 151, 153, 155, 156, 158, 159, 161, 162, 166, 167, 168, 169, 170, 173, 176, 181, 187, 188, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 226, 229, 230, 231, 232, 233, 235, 236, 237, 239, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 274, 276, 278, 281, 288, 299, 300, 301, 302, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 336, 337, 338, 340, 341, 343, 344, 345, 347, 350, 351, 352, 361, 365, 373, 374, 375, 376, 377, 379, 381, 384, 385, 391, 392, 393, 396, 399, 400, 401, 405, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 422, 438, 443, 447, 449, 451, 452, 453, 459, 460, 462, 475, 488, 492, 493, 496, 500, 501, 502, 504, 510, 511, 512, 513, 516, 520, 521, 524, 526, 528, 531, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 548, 552, 555, 556, 557, 558, 561, 562, 564, 565, 566, 567, 568, 570, 582, 583, 587, 593, 594, 599, 600, 605, 607, 611, 617, 619, 627, 630, 632, 634, 635, 636, 637, 640, 642, 643, 644, 646, 647, 649, 652, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 672, 673, 675, 676, 677, 678, 681, 685, 686, 691, 692, 695, 696, 699, 705, 715, 726, 742, 756, 769, 797, 798, 800, 801, 802, 803, 804, 811, 814, 815, 816, 817, 818, 820, 821, 823, 828, 830, 831, 832, 833, 839, 840, 841, 843, 844, 845, 851, 860, 861, 862, 864, 870, 874, 877, 878, 881, 893, 901, 907, 910, 912, 913, 917, 928, 938, 941, 945, 956, 960, 961, 962, 968, 969, 978, 981, 982, 987, 988, 989, 990, 992, 993, 995, 996, 998, 999, 1002, 1006, 1007, 1014, 1019, 1023, 1024, 1026, 1027, 1028, 1032, 1033, 1036, 1037, 1038, 1043, 1045, 1046, 1047, 1049, 1050], "100": [2, 3, 5, 8, 10, 11, 15, 17, 23, 25, 35, 40, 48, 51, 55, 59, 64, 69, 70, 73, 77, 78, 93, 95, 96, 102, 110, 115, 125, 126, 129, 132, 150, 154, 157, 158, 167, 168, 170, 173, 176, 177, 179, 181, 183, 187, 188, 189, 191, 196, 197, 198, 199, 201, 206, 207, 208, 210, 212, 213, 215, 220, 221, 223, 229, 230, 231, 232, 233, 237, 243, 245, 249, 253, 254, 255, 257, 259, 262, 264, 269, 270, 274, 288, 289, 290, 302, 303, 306, 307, 309, 311, 312, 318, 322, 329, 330, 336, 337, 339, 340, 341, 344, 345, 347, 350, 351, 355, 358, 359, 365, 367, 374, 376, 379, 381, 384, 385, 399, 405, 409, 410, 413, 414, 415, 416, 417, 437, 441, 445, 449, 471, 472, 478, 490, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 530, 534, 536, 539, 544, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 605, 607, 610, 631, 632, 633, 639, 640, 641, 642, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 665, 667, 669, 671, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 746, 797, 798, 802, 822, 828, 829, 834, 839, 840, 841, 843, 844, 845, 849, 861, 862, 880, 882, 885, 894, 911, 981, 982, 985, 989, 992, 993, 999, 1002, 1004, 1019, 1023, 1027, 1028, 1043, 1044, 1045, 1048, 1049], "1000": [2, 5, 6, 13, 24, 29, 35, 48, 70, 73, 83, 102, 112, 114, 116, 120, 121, 122, 127, 132, 137, 141, 155, 159, 173, 183, 189, 200, 220, 229, 230, 232, 243, 247, 253, 257, 259, 265, 268, 270, 288, 290, 306, 309, 316, 317, 319, 321, 322, 339, 340, 346, 350, 351, 384, 385, 392, 406, 417, 437, 473, 479, 480, 531, 532, 537, 539, 541, 542, 543, 545, 546, 548, 553, 564, 632, 646, 647, 651, 652, 653, 655, 660, 661, 662, 663, 666, 667, 668, 672, 676, 677, 678, 687, 692, 698, 701, 764, 881, 893, 899, 904, 905, 981, 985, 1007, 1014, 1023, 1026, 1042, 1044, 1053], "10000": [2, 9, 11, 28, 41, 61, 70, 71, 123, 136, 183, 190, 197, 205, 213, 230, 232, 272, 317, 335, 337, 361, 367, 416, 417, 561, 562, 644, 679, 881, 910, 1004, 1024, 1028], "100000": [153, 232, 243, 379, 613, 614, 615, 619, 620, 622, 623, 625, 893, 985, 1026, 1028], "1000000": [15, 536], "10005": 1043, "1000x": 1041, "1001": [208, 240], "10027": 1048, "10045": 1043, "1005": 1007, "10058": 1044, "10059": 1043, "10065": 236, "1007": 705, "10070308464041304": 197, "10071": 1043, "10093": 1043, "10095": 1043, "10096": 1048, "100_000": [23, 25, 167], "100k": 230, "100x": [1035, 1038, 1052], "101": [25, 146, 278, 376, 850, 1036], "10101": 1043, "10112": 1043, "1013": 1000, "10142": 1043, "10153": 1043, "10168": 1050, "10181": 1043, "10192": 1043, "10195": 1043, "101alexmartin": 1052, "102": [385, 1026, 1037], "10210": 1043, "10229": 1043, "1024": [51, 102, 449, 468, 538, 902, 1048], "10280": 1043, "10297": 1043, "103": [125, 281, 283, 374, 416, 497, 555, 556, 1035], "10306": 1043, "10325": 1043, "10336": 1043, "10346": 1043, "10377": 1043, "1038": 409, "10397": 1043, "104": [2, 22], "10403": 215, "10412": 1043, "10428": 1043, "10437": 1043, "10440": 1044, "10441": 1043, "1045": 69, "10452": 1043, "10458": 1043, "1046": [69, 248], "10463": 1013, "10468": 1050, "10469096": 152, "1047": 69, "10471": 1043, "10474": 1043, "10478008": 409, "10482": 1045, "1048576": [582, 589], "10493": 1047, "105": [187, 216, 309, 1014], "10500": 1043, "10521": 1043, "10526": 409, "10536": 1043, "10580": 1044, "10581": 1043, "10584743": 152, "10587": 1043, "10591": 1047, "10593": 1043, "106": [146, 240, 376, 880, 986, 1036], "10606655": 212, "10610": 1043, "10655": 1043, "10663": 1043, "10677": 1043, "10687": 1043, "107": [125, 190, 206, 216, 320, 409, 899, 993, 1014, 1037], "10708": 1047, "10711": 1047, "10723": [1042, 1043], "10727": 1044, "1073": [374, 488], "10733": 1013, "10740": 1043, "1076": 329, "10774": 1043, "10795": 1043, "108": [0, 6, 1036], "1080": [373, 409], "10805": 1049, "10811": 1043, "10815": 1045, "10827": 1043, "10829": 1043, "10834": 215, "10836": 1043, "1084": 248, "10845": 1043, "10869": 1043, "1088": 240, "10881": 1043, "108843": 262, "10887": 1043, "108880": 23, "10898": 1043, "10899": 1043, "109": [22, 51, 993, 1037], "10908": 1043, "10913": 1043, "10914094": 212, "10928": 1043, "10933": 1043, "10982": 1043, "10992": 1043, "10998": 1043, "10999": 1043, "10_000": [5, 23, 73, 114, 122, 166, 173, 230, 262, 283, 559, 560, 564, 565, 881], "10_fold": [374, 493], "10e": [176, 181], "10k": [316, 447], "10x": 1035, "10x10": 202, "10\u2079": 1043, "11": [2, 14, 17, 72, 79, 95, 104, 146, 152, 167, 168, 181, 197, 198, 199, 202, 218, 224, 230, 236, 241, 253, 256, 264, 265, 271, 276, 286, 287, 289, 309, 317, 320, 321, 337, 341, 345, 350, 352, 373, 376, 377, 385, 392, 409, 412, 413, 416, 450, 457, 482, 483, 484, 485, 496, 501, 517, 518, 612, 650, 656, 670, 715, 721, 723, 724, 778, 779, 780, 801, 804, 818, 821, 829, 856, 913, 942, 956, 984, 988, 990, 1002, 1006, 1007, 1014, 1019, 1026, 1028, 1033, 1037, 1041, 1043, 1044, 1046, 1049, 1050], "110": [88, 176, 194, 204, 229, 311, 322, 437, 986, 987], "1100": 48, "11000": 1044, "11005": 1043, "11006": 1043, "11010": 1043, "11011": 1043, "11021": 125, "11042": 1043, "11047": [1013, 1045], "11064": 1047, "11082": 1043, "110923": 186, "11099": 764, "111": [2, 5, 6, 51, 65, 66, 88, 99, 117, 134, 168, 194, 212, 222, 259, 283, 856, 1014, 1027, 1038], "1111": [650, 656], "1111111111111111": 267, "11124": 1043, "1112658": [898, 1004], "11135": 1043, "11136": 1043, "1114": 248, "11144": [1043, 1044], "11144673": 212, "11160": 1043, "11166": 1043, "1117": 619, "11176": 1043, "11179": 1044, "1118": 69, "112": [52, 146, 374, 376, 1037], "11206": 1043, "11211": 1043, "112141": 385, "11232": 1045, "11235": 1043, "112589990684262": 746, "11272": 1043, "11293": 1043, "11295": 1043, "11296": 1046, "113": [278, 385, 1038], "11306": 1043, "11308": 1043, "11310": 1043, "11314": 374, "11315": 1043, "11327": 1043, "113516": 262, "11353": 1043, "11354": 1044, "11364": 1044, "11364637": 10, "113781": 320, "11378556": 301, "114": [232, 320, 710, 1035], "1140": 374, "11413": 2, "11420": 1043, "1145": [173, 409, 676], "11452112": 212, "11458": 1044, "11464": 1043, "11466": 1043, "11467": 1043, "1148": 248, "115": [168, 1000], "11505": 1043, "11514": 1046, "11520": 1043, "11526": 1044, "11528972": 212, "11542": 1043, "11553": 1043, "11556": 1043, "11557": 1043, "11558": 1043, "11576": 1043, "11585": 1043, "11596": 1043, "116": 1035, "1162": 409, "11635": 1045, "11646": 1044, "11650": 1044, "11679": 1043, "11680": 6, "11682": 1047, "11682692": 212, "11693539": 83, "11699": 1044, "117": 1036, "11705": 1044, "117154": 167, "11724": 1043, "11727": 1044, "11741": 1043, "11754": 1044, "11756": [1043, 1044], "117608": 23, "11774": 1043, "1179": 248, "118": [90, 91, 590, 1014], "11805": 1013, "11841": [898, 1004], "1185": 385, "11860": 1050, "1189": 416, "119": [986, 1038], "11901": 1043, "11905": 1043, "11912": 1043, "11915045": 361, "11924": 1043, "11931": 197, "11932": 197, "11933": 197, "11935": 197, "11950": 1046, "11951": 1043, "11958": 154, "11973": 1044, "11977": 1013, "12": [0, 2, 4, 18, 32, 38, 40, 41, 51, 53, 54, 55, 71, 72, 83, 118, 119, 120, 123, 125, 146, 152, 153, 154, 162, 167, 168, 170, 171, 177, 181, 183, 197, 205, 215, 218, 221, 222, 223, 226, 227, 229, 237, 240, 245, 246, 253, 258, 259, 261, 262, 265, 271, 273, 286, 302, 309, 310, 311, 320, 345, 350, 352, 376, 377, 384, 392, 394, 396, 400, 401, 402, 409, 413, 417, 443, 447, 449, 457, 482, 483, 484, 485, 496, 532, 534, 541, 570, 646, 647, 652, 660, 661, 662, 664, 669, 671, 681, 685, 686, 689, 692, 693, 725, 730, 797, 798, 801, 818, 821, 835, 856, 872, 973, 981, 982, 984, 988, 990, 993, 1002, 1006, 1007, 1014, 1019, 1024, 1033, 1036, 1038, 1042, 1043, 1045, 1046, 1051, 1052], "120": [126, 219, 322, 418, 590, 1035], "1200": [48, 121, 305, 416], "12000": 520, "12068": 1045, "12069": 1048, "121": [65, 111, 162, 231, 618, 669, 1002], "12105": 1043, "1211": 254, "12116": 1044, "1212": 498, "12122": 1043, "121351": 186, "12143": 1044, "12145": 1045, "12147": 1013, "12159": 1043, "12165": 1043, "12165031": 993, "1217": 197, "12171": 1043, "12174": 1044, "12177": 1044, "12190903": 83, "12196": 197, "12197": 1044, "122": [0, 111, 154, 162, 168, 231, 240, 241, 385, 993, 1014], "1220": 619, "12211": 1043, "12222": 1044, "12232": 1044, "12234": 1043, "12246": 1043, "12251": 1044, "12258": 1045, "12274212": 993, "12279": 1044, "12285": 1050, "1229": 517, "123": [113, 132, 361, 416, 516, 517, 518, 555, 556, 837, 993, 1000], "12300": 1044, "12303": 1045, "12304": 1043, "12317": [154, 1043], "1232": 416, "12326": 2, "12327": 2, "12328": [2, 1044], "12329": 2, "12330": [2, 1043], "12334": 1044, "12338": 1043, "12339": 1043, "1234": [177, 246, 262, 379], "12344": 1044, "12345": 1043, "12350": 1043, "1236": 311, "12360": 1043, "12365": 1043, "12379": 2, "12380": 2, "12381": 2, "12382": 2, "123828": 262, "12383": 2, "12388": 1043, "12393": 1043, "124": [5, 416, 1037], "124225": 186, "12436": 1044, "12441": 1043, "12451": 1043, "12462": 1043, "12467": 1043, "12471": 1043, "12481": 1043, "125": [2, 51, 78, 96, 318, 351, 534, 981, 992, 1002], "12513": 1044, "12514": 1043, "125140": 262, "12517": 1043, "12518": 1043, "12522": 1043, "125247168": 11, "12543": 1044, "12557": 1045, "12568": 1044, "12569": 1045, "12582": 1044, "12583": 1044, "1259": 17, "12599": 1044, "126": 416, "12612": 1043, "12613": 1044, "12625": 1043, "1263": 385, "12638": 1047, "12650": 1045, "126502": 186, "12669": 1044, "1268187": 212, "12685": 1043, "12699": 1043, "127": [121, 1035], "12701": 1043, "12704": 1043, "127128": 122, "12715": 1044, "12732": 1044, "1276": 6, "12789": 1045, "128": [12, 13, 197, 264, 276, 365, 536, 1014], "12800": 1013, "12807": 1044, "12821": 1044, "12834": 1044, "12852": [1013, 1045], "12855": 1044, "12860": [215, 1044], "12861": 1044, "12866": 1013, "1288": [4, 374], "12881": 1043, "12883823": 413, "12887": 1045, "129": [149, 199, 1024, 1035], "12908": 1044, "12914884": 993, "12916": 1044, "12927": 1045, "12946": 1043, "12949": 1043, "12955": 1044, "12972": 1044, "12983": 1044, "12988": 1044, "1299": [870, 1002], "12th": 1004, "13": [2, 4, 8, 9, 11, 14, 42, 48, 53, 66, 72, 98, 102, 118, 121, 123, 161, 167, 173, 183, 206, 223, 252, 253, 260, 263, 265, 297, 302, 305, 309, 331, 338, 374, 376, 379, 385, 392, 413, 421, 496, 510, 513, 532, 533, 551, 552, 582, 606, 635, 639, 734, 759, 818, 848, 863, 870, 896, 897, 988, 992, 993, 998, 999, 1002, 1007, 1010, 1014, 1019, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1047], "130": 385, "1300": 48, "13003": 1047, "13005": 1043, "13007": 1044, "130107": [212, 230, 489], "13013": 1045, "13042": 1050, "13046": 1043, "13077794": 361, "13086": 1044, "131": [2, 12, 54, 152, 159, 247, 250, 385, 992, 1014, 1036], "13124": [1043, 1044], "13134": 1043, "13142": 1044, "13146": [1013, 1045], "13151": 1044, "13157": 1044, "13164": 1044, "13165": 1043, "13170937": 1026, "13174": 1044, "1319": [870, 1002], "131900": 68, "13193": 1044, "132": [2, 6, 12, 49, 54, 66, 416, 1014], "13204": 1047, "13213": 1045, "1322": 622, "13221": 1043, "13222543": 610, "13227": 1013, "1323": 197, "13231": 1045, "13233": [374, 493, 494], "13240": 1044, "13241": 1044, "13250": 1044, "13251": 1044, "13253": 1044, "13260": 1044, "13266": 1044, "13276": 1043, "13279": 1044, "13283": 1044, "13286": 982, "13290": 1045, "133": [12, 54], "13312": 1043, "13317": 1044, "13328": 1044, "13333": 1044, "13336": 1044, "13350": 1044, "13363": 1044, "13366": 1044, "13374": 2, "13375": 2, "13376": 2, "13377": 2, "13378": 2, "1338": 254, "13382": 1044, "13389": 1044, "13392": 1045, "13393": 1045, "13397": 1044, "134": [43, 51, 99, 121, 253, 259, 1038], "13422": 1044, "13427": 1044, "13439": 1044, "13447": 1044, "13459": 1044, "13467": 1045, "13485": 1044, "13486": 1044, "13496": 1044, "135": [45, 146, 320, 352, 376], "13511": 1046, "13524": 1044, "1353": 350, "13531": 1044, "13545": 1044, "13549": 1044, "13554": 1044, "13562": 1044, "13575": 1045, "136": [337, 348, 1014], "13601": 1044, "13607": 1044, "13609": 1045, "13618": 1045, "13620": 1044, "13628": 1044, "13636": [988, 1044], "13641": 1044, "13649": 1052, "13651": 1044, "137": [229, 236, 241, 385, 1014, 1036], "13704": 1045, "13707": 1045, "1371": 534, "13726": 1045, "1373": 989, "1374": 534, "13741": 1044, "13769": 1045, "13772": [1043, 1044], "13773": 1045, "13779": 1044, "1378": 215, "13780": 1044, "1379": 215, "138": [385, 416, 992], "13806": 1045, "1382": 524, "13822072286080167": 267, "13835": 1044, "1385": 474, "13864": 1044, "13875": 1045, "13877": 1044, "13894": 1044, "13896": 1045, "139": [215, 283, 385, 416, 452, 462, 691, 695, 993], "13900": 1047, "13902": [1013, 1045], "13903": [1043, 1044], "13910": 1044, "13911": [1013, 1045], "13925": 1045, "13933": 1045, "13938": 1045, "13947": 1044, "1396": 989, "13960": 1045, "1397": 385, "13974": 1044, "13983521": 301, "13987": 1045, "13988486": 212, "13995": 1045, "13th": 25, "14": [2, 9, 11, 36, 47, 58, 60, 61, 64, 72, 79, 98, 141, 163, 168, 181, 186, 188, 215, 220, 226, 231, 236, 253, 258, 264, 265, 274, 281, 283, 297, 303, 308, 309, 320, 344, 347, 348, 366, 374, 376, 377, 392, 396, 400, 401, 409, 413, 496, 498, 510, 553, 554, 635, 643, 692, 814, 818, 870, 985, 988, 992, 1002, 1007, 1010, 1019, 1033, 1035, 1036, 1038, 1039, 1043, 1048], "140": [51, 322, 416, 510, 516, 517, 518, 555, 556, 993], "1400": [48, 474], "14012": 1045, "14024": 1044, "14028": 1045, "14035": 1045, "14048": 1046, "14053": 1044, "14067": 1044, "14075": 1046, "14087": 1044, "14092": 1044, "141": [278, 501, 534, 904, 993], "14108": 1045, "14114": 1045, "14156": 215, "14170": 1045, "14180": [1013, 1046], "1419": 2, "14194": 1045, "14197": 1044, "142": [2, 416], "1422": 2, "14228": 366, "14237": [1043, 1044], "14259": 1045, "14264": 1046, "142857": 215, "14286": 1045, "14287": 1045, "14294": 1045, "14296": 1045, "143": [146, 376, 471, 472, 1004, 1035, 1036], "14300": 1046, "14302": 236, "14305": 1045, "14309": 1044, "14336": 1045, "14338": 982, "14356": 1045, "14357": 1045, "14378": 1045, "14381": 1045, "14393": 1044, "144": [259, 385, 1035], "1440": 2, "14406": 1045, "1441": 622, "14410151": 610, "14417": 1045, "144204": 122, "1443": 998, "14430": 1045, "14446": 1047, "14458": 1045, "14464": 1045, "14475": 1045, "144943": 23, "14496": [385, 1044], "145": [11, 409], "14510": 1045, "14516": 1046, "14520": 1045, "14538": 1045, "14544": 1045, "14549": 1045, "1456": 215, "14582": 1013, "14591": 1045, "14593": 1045, "14595": 1045, "145957": 122, "146": [4, 416], "1460": [119, 130], "14602": 1045, "14603365": 212, "14623": 1045, "14625": 6, "14629": 1045, "1464": 227, "14646": 1045, "14647": 1045, "14680": 1045, "14682": 1045, "14696": 1046, "147": 993, "14702": 1045, "147022": 186, "14704": 1045, "14706": 1045, "1471": 998, "14710": 1045, "14732": 1045, "14736": 1050, "1474": 385, "14740": 1045, "14764": 1045, "148": [239, 241, 1014, 1038], "14800": 1047, "14810": 311, "14848": 1046, "14849": 1045, "14862": 1050, "14864": 1045, "14865": 1045, "14869": 1045, "14872": 1045, "14884": 1045, "14890": 1045, "14894": 1045, "14898": 1045, "149": [69, 74, 115, 134, 293, 297, 993, 1014, 1035], "14900": 1045, "14902": 1045, "14907": 1045, "14908": 1045, "14933": 1045, "14936": 1045, "14971": 1045, "14975": 1049, "14982": 1047, "1499": 6, "15": [2, 4, 5, 8, 10, 11, 12, 13, 14, 28, 29, 32, 38, 42, 51, 52, 59, 60, 64, 71, 72, 78, 80, 90, 96, 102, 113, 115, 118, 119, 122, 125, 141, 143, 145, 149, 153, 161, 166, 167, 168, 186, 194, 199, 211, 215, 219, 220, 223, 224, 226, 241, 245, 246, 253, 254, 262, 264, 267, 270, 271, 274, 287, 291, 299, 300, 305, 307, 309, 321, 326, 336, 338, 341, 344, 347, 356, 373, 374, 377, 379, 392, 396, 400, 401, 413, 416, 417, 440, 454, 490, 496, 497, 498, 531, 537, 545, 546, 555, 556, 598, 604, 609, 644, 652, 661, 663, 668, 676, 678, 692, 818, 833, 856, 885, 981, 987, 988, 989, 992, 995, 996, 1002, 1007, 1010, 1014, 1019, 1024, 1031, 1033, 1037, 1047, 1049, 1050], "150": [2, 4, 88, 90, 113, 122, 136, 219, 223, 226, 272, 322, 327, 331, 342, 345, 376, 413, 418, 504, 601, 602, 825, 826, 827, 992, 1014, 1023, 1024, 1025], "1500": [37, 48, 55, 60, 65, 90, 218, 222, 243], "15000": [672, 687, 861, 862], "15005": [1046, 1048], "15007": 1047, "15010": 1045, "1502": 1028, "15028": 1045, "15038": 1045, "150407": 385, "15044": 1045, "15049": 1045, "150527": 300, "15053": 1045, "15057": 1045, "1506": 387, "15080": 1045, "15082": 1045, "15083": 1045, "15084": 1045, "15086": 1045, "15094": 1045, "15096": 1045, "15099": 1045, "150x4": 88, "151": [320, 385, 416, 501, 1004], "15100": 1045, "1511007": 240, "151101": 240, "15119": 1045, "15120": 1045, "15126": 1047, "15138": 1045, "15160": 1045, "1517": 302, "15179": 1046, "152": [56, 385], "15257": 1045, "1527": 860, "15274": 1045, "15297572": 536, "153": 663, "15304": 1045, "15319": 1013, "153244303321897735": 409, "15361": 1047, "15375": 1045, "15380": 1046, "15382": 1045, "15393": 1045, "154": [302, 651, 993], "1542": 385, "15427": 1047, "15429": 1045, "15436": 1046, "154453": 300, "15463": 1045, "15488": 1045, "15490": 1045, "15503": 1046, "15521": 136, "15524": 1045, "1553374": 409, "1553511": 409, "1554": 860, "15550": 1013, "15557": 1045, "15558": 1046, "15582": 1046, "156": [146, 167, 350, 376], "15611": 982, "15622": 1046, "15625": 1045, "156252": 186, "15636": 1047, "15652": 1046, "15655": 1046, "15661": 1045, "15669": 1046, "15699552": 993, "157": [47, 66, 385, 1014], "15707": 1046, "15709": 1046, "15730": 1046, "157334": 300, "15751": 1045, "15760": 1045, "15762": 1046, "15763": 1047, "15773": 1046, "15782": 1046, "15785": 1046, "15797": 1045, "158": [40, 416, 669], "15806": 1046, "15810": 1045, "15834": 1046, "15863": 1045, "15864": 1046, "15868": 1045, "1587": 6, "15879": 1045, "15888": 1045, "15898": 1045, "159": [51, 374, 1035], "15918": 1046, "1592": 498, "15926": 1046, "15930": 1045, "15933": 1045, "15936": 1045, "15937": 1045, "1594": 6, "159419": 240, "15946": 1046, "15947": 1045, "15948": 1049, "15950": 1046, "15953": 1046, "15959": 1046, "15963": 1046, "1597": 253, "15980": 1046, "15984": 1049, "15996": 1045, "15e": 93, "16": [2, 3, 11, 17, 25, 41, 48, 49, 52, 64, 72, 78, 93, 96, 141, 168, 190, 196, 197, 198, 215, 218, 219, 222, 224, 231, 235, 241, 253, 261, 262, 263, 287, 302, 305, 309, 315, 342, 345, 348, 351, 357, 374, 376, 385, 392, 413, 414, 417, 442, 457, 459, 471, 472, 478, 479, 497, 498, 502, 516, 534, 535, 570, 589, 595, 596, 607, 608, 639, 650, 651, 654, 655, 656, 657, 682, 683, 813, 818, 830, 879, 905, 913, 968, 969, 970, 981, 988, 992, 1002, 1007, 1010, 1014, 1019, 1028, 1031, 1033, 1035, 1036, 1040, 1041, 1043, 1044], "160": [234, 981, 1026], "1600": 48, "160030": 186, "16006": 1046, "1600x1600": 52, "16018": 1049, "16021": 1046, "16052385": 103, "16061": 1049, "16066": 1047, "16069": 1046, "16075": 1046, "16076": 1045, "16084": 1046, "16090": 1046, "16103": 1046, "16111": 1046, "16112": 1046, "16117": 1046, "161245": 52, "16132": 1046, "1614": 6, "16144": 385, "16147": 376, "16149": 1046, "16159": [385, 1046], "1616": 473, "16182": 1046, "16183": 1046, "162": [56, 340, 348, 376, 1014], "1621": 6, "16224": 1046, "1623": 17, "1624": 498, "16245": 1046, "16257": 1046, "1626": 1013, "16261": 1046, "16266": 1046, "16280": 1046, "16289": 1047, "163": [146, 278, 376, 1000], "163224": 186, "16323": 1046, "16326": [2, 1047], "16327": 2, "16328": 2, "16329": 2, "16330": 2, "16331": 1046, "16335": 1047, "16352": 1047, "16362": 1046, "16379": 2, "1638": 351, "16380": 2, "16381": 2, "16382": 2, "16383": 2, "16392": 1047, "16397": [1045, 1046], "164": [252, 276, 416, 1014], "164009": 262, "16401": 1046, "16403": 1046, "16431": 1046, "16437": 1046, "16442": 1046, "16443186": 993, "16449": 1048, "16451": 1046, "16466": 1046, "16484": 1046, "16493": 1047, "165": 993, "16500": 1045, "16505": 1045, "16508": 1046, "16530": 1047, "16531": 125, "16539": 1046, "16585": 1046, "166": [2, 194, 216, 302, 385, 992, 1014, 1035], "16605": 1049, "16619": 1047, "16622": 1046, "16625": 1047, "16632": 1046, "16655": 1046, "16663": 1046, "166667315173": 11, "16692": 1046, "16695": 1050, "167": [62, 66, 385, 1014, 1035], "16718": 1046, "16726": 1046, "16728": 1046, "16747": 1050, "16748": 1049, "168": 1035, "1680": 376, "16801": 1046, "16837": 1046, "16841": 1046, "16849": 1046, "1689": 351, "169": [56, 302], "16906": 1047, "1691": 988, "169106": 259, "1693": 904, "16935": 1047, "16948": 1049, "16950": 1046, "169504": 215, "16979946": 993, "1698": 649, "16981": 1046, "16985": 1047, "16993": 1046, "17": [11, 17, 37, 50, 72, 78, 125, 150, 167, 196, 223, 230, 253, 262, 278, 279, 299, 309, 374, 377, 384, 396, 400, 401, 409, 413, 444, 461, 487, 497, 498, 500, 523, 531, 536, 540, 547, 549, 550, 555, 559, 560, 569, 570, 597, 628, 649, 657, 658, 659, 666, 669, 672, 674, 687, 692, 729, 730, 740, 761, 766, 784, 787, 789, 818, 842, 853, 868, 873, 874, 882, 884, 890, 906, 909, 912, 913, 914, 915, 942, 981, 982, 993, 995, 1002, 1010, 1014, 1031, 1033, 1035, 1036, 1037, 1038, 1041, 1044, 1049], "170": [42, 55, 56, 60, 385], "1700": 48, "170087": 300, "17021": 1046, "17032": 1046, "17036": 1048, "17038": 1047, "170388": 993, "1706": 329, "17061": 1046, "17090": 1047, "17095": 1047, "171": [51, 146, 221, 224, 376, 385, 788, 992, 1014], "17107": 1047, "1714": 988, "17148": 1047, "17159": 1047, "17169": 1048, "17187": 1047, "17192": 1047, "17193": 1047, "172": [385, 493, 494, 649, 988], "17204": 1046, "17205": 1046, "17210": [11, 1046], "17225": 1047, "17226834": 51, "1723": 5, "17233": 1047, "17235": 1046, "17236387": 200, "17266": 1049, "17289014": 152, "1729": 168, "173": [88, 91, 146, 385, 584, 1014], "17309": 1046, "17317": 1047, "17357": 1046, "17360": [6, 1046], "17367": 1047, "17370318": 212, "17374": 2, "17375": 2, "17376": 2, "17377": 2, "17378": 2, "17379": [2, 11, 1047], "1738": 992, "17386": 1047, "17388": 1051, "17396": 1047, "174": [121, 302, 385, 584], "17406": 1047, "17412": 1047, "17414": 1047, "17427": 1047, "17433": 1046, "17443": 1048, "17448": 1047, "1747": 168, "17474": 215, "17478": 1047, "17491": 1047, "17499": 1047, "175": [220, 224, 294, 297, 385, 1002, 1014], "17526": 1047, "175298": 262, "17546": 1047, "17569": 1047, "17578": 1047, "17598": 1047, "176": [58, 66, 183, 256, 276, 385, 837, 993, 1000, 1014], "17603": 1047, "17604": 1047, "17606": 1047, "17608": 1047, "17609": 1047, "17610": 1047, "17612": 1047, "17614": 1047, "17616": 1047, "17622": 1048, "17633": 1047, "17644": 1047, "17651": 1047, "17661": 1047, "17662": 1047, "17679": 1047, "17694": 1046, "177": 385, "17702": 1047, "1771": 351, "17742": 1046, "17743": 1048, "17746": 1048, "17750": 1048, "17759": 1047, "17769": 1048, "17772": 1048, "17777": 1047, "17785": 1048, "178": [5, 376, 385, 510, 848], "178000": 307, "17804": 1047, "17812": 1046, "17819": 1049, "17826": 1047, "17833": 1047, "17848": 1046, "17856": 1047, "17864": 1047, "17876": 1047, "17878": 1047, "179": [376, 385, 416, 1035], "17914": 1046, "17928620": 373, "17932": 1047, "17935": 1047, "17937": 1047, "17959": 1046, "1797": [56, 87, 257, 302, 325, 376, 421, 445, 502, 532, 533, 534, 535, 599, 600, 688, 689, 690, 691, 693, 995, 1025], "17984": 1047, "17985": 1046, "17985197": 212, "17987": 1047, "17992": 1047, "17995": 1046, "17997": 1047, "17_760": 125, "17t14": 373, "18": [2, 5, 6, 17, 38, 40, 42, 47, 51, 58, 60, 72, 100, 122, 125, 134, 158, 167, 173, 174, 197, 208, 212, 216, 226, 231, 253, 259, 302, 309, 311, 326, 350, 351, 352, 379, 385, 413, 414, 417, 447, 459, 492, 500, 501, 502, 504, 505, 510, 535, 536, 538, 540, 541, 557, 558, 559, 560, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 578, 589, 594, 599, 600, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 646, 649, 658, 659, 671, 714, 718, 731, 734, 735, 741, 743, 760, 770, 797, 798, 821, 837, 860, 861, 862, 868, 874, 882, 883, 894, 904, 905, 912, 913, 914, 915, 916, 940, 941, 981, 990, 992, 1002, 1010, 1014, 1031, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1045, 1046], "180": [32, 234, 241, 243, 244, 245, 248, 249, 292, 296, 336, 348, 385, 502, 1014], "1800": 48, "18000": [352, 374], "18010": 1048, "18016": 1046, "18020": 1050, "1804243": 373, "18052": 1047, "18094": 1050, "181": [255, 276, 278, 302, 385, 1014], "18114": 1047, "18121": 1047, "18124": 1047, "18149": 1047, "18167": 1047, "18170": 1049, "18176": 1047, "18197458": 361, "182": [142, 147, 149, 196, 216, 269, 276, 302, 385, 416, 1014], "18222": 1047, "18256": 1047, "18266": 1047, "18269": 1047, "18278": 1047, "18280": 1047, "18293": 1047, "18298": 1050, "183": [326, 385, 993, 1035], "18302": 1047, "18310": 1049, "18326": 1047, "18328": 1048, "18334": 1047, "18341": 1047, "18343": 1047, "18368": 1048, "18370": 1047, "18393": 1048, "18394": 1047, "184": [2, 189, 197, 216, 230, 241, 302, 385, 799, 1014, 1026], "18405": 1047, "18406": 1047, "18410": 1047, "18429": 1047, "18433": 1048, "18444": 1048, "18447": 1047, "18459": 1048, "1847": 5, "18482": 1049, "18488": 1051, "185": [51, 146, 158, 376, 385, 861, 862], "1850": [4, 374], "18508": 1047, "18510": 1047, "18525": 1047, "18527": 1047, "18528": 1047, "18543": 1048, "18545": 1047, "18555": 1053, "185654": 262, "18565811e": 1027, "185659": 186, "18595": 1047, "186": [101, 104, 197, 302, 385, 788, 992, 1014], "18607": 1047, "18612": 1047, "18622": 1047, "18639": 1047, "18649": 1048, "1865": 6, "18682": 1047, "18689": 1052, "18691": 1047, "187": [259, 385, 584, 993, 1026, 1037], "1871": 1007, "18723": 1051, "18736": 1048, "1874": 1007, "18746": 1047, "1875": 973, "18768": 1047, "188": [146, 154, 376, 385, 584], "1880": 385, "18805": 1050, "18815268": 240, "188153": 240, "18818427": 667, "18832": 1049, "18842": 1048, "18843": 1053, "18846": [374, 488, 489], "1887": 351, "18898": 1048, "189": [197, 385, 901, 1005], "18925": 1048, "189267": 262, "18959": 1048, "189631": 186, "18964": 1048, "18975": 1049, "189830": 320, "18987": 1047, "19": [2, 11, 154, 159, 167, 201, 216, 220, 223, 248, 253, 309, 310, 326, 353, 376, 377, 383, 393, 396, 400, 401, 409, 417, 420, 444, 492, 516, 517, 518, 536, 540, 541, 547, 549, 550, 557, 558, 559, 560, 564, 565, 566, 582, 589, 607, 648, 658, 659, 666, 667, 668, 671, 672, 674, 676, 678, 687, 707, 781, 785, 799, 800, 814, 827, 832, 833, 835, 836, 850, 851, 870, 881, 902, 906, 909, 912, 913, 914, 915, 981, 992, 1002, 1010, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1043, 1052], "190": [9, 121, 215, 232, 254, 268, 276, 296, 374, 385, 498, 1014], "1900": 48, "19002": 1048, "19004": 1048, "19011": 1048, "19024": 1048, "19035": 1048, "1903908407869": 200, "19041": 1048, "19046": 1048, "19047631514961908949361222113": 11, "1905": [146, 376], "19052": 1048, "19055": 1048, "19069": 1048, "19075": 1050, "19085": 1049, "19096215": 322, "191": [120, 134, 245, 250, 385, 993, 1014], "19112072e": 178, "19126": 1047, "19145": 352, "19158": 1049, "19159": 1048, "19162": 1048, "19172": 1048, "19174891": 301, "19179": 1047, "19182": 1047, "19198": 1048, "192": [59, 66, 121, 335, 348, 385, 1014, 1035], "19210": 1048, "19211": 1047, "19234": 1047, "19244": 1048, "19263": 1048, "19271": 1047, "19278": 1048, "192913": 262, "192938": 11, "19296": 1048, "19297": 1048, "193": [13, 274, 276, 385, 416, 715, 786, 1005, 1014], "19308": 1047, "1931": 78, "19310": 1048, "19317": 154, "19336": 1048, "19346747e": 1027, "193548": 215, "19356": 1048, "1936": 376, "19365": 1048, "19390": 1048, "19391": 1048, "193949": 262, "194": 302, "1940": 215, "19401": 1048, "19407": 1047, "19411": 1048, "19415": 1048, "19417": 1047, "194239": 385, "19426": 1048, "19428": 1048, "19438": 1049, "19459": 1048, "19472": 1048, "19473": 1048, "1948": 17, "19483": 1048, "19490": 1049, "19491": 1048, "19499": 1048, "195": [493, 494], "1950": [376, 992], "1951": 215, "195133": 385, "19520": 1048, "19522393": 212, "19527": 1048, "19564": 1048, "19568": 1048, "19571": 1048, "19579": 1047, "1958": [154, 414, 416, 532], "19580": 1047, "196": [901, 1005], "1960": [627, 716], "19616": 1048, "19631": 1048, "1964": [690, 694, 880, 892, 989], "19641": 1048, "19643": 1048, "19646": 1047, "19659": 1047, "19662693": [844, 845], "19664": 1051, "19669": 1048, "196795181": 11, "19680": 1049, "196861": 186, "19689": 1049, "19703": 1047, "1972": 376, "19721": 1047, "19727": 1047, "1973": [376, 406], "19732": 1047, "19733": 1048, "19734": 1048, "1974": [409, 417, 710], "19747": 1049, "1975": 995, "19752": 1048, "19766": 1048, "197666": 262, "1977": 635, "1978": [215, 988], "19784": 1048, "19788": 1048, "1979": [409, 725, 769], "19790": 1048, "19794": 1049, "19799": 1048, "198": 1035, "1980": 376, "19803308": 83, "1981": [215, 988], "19829832": 212, "1983": [409, 731, 884], "19836": 1048, "1984": [78, 79, 411, 474, 912, 913, 1008], "19847": 1047, "1985": [167, 409, 705, 715, 786], "1986": [982, 1008], "19869": 1048, "1987": [409, 607, 608, 792, 793], "198766": 262, "19879": 1048, "1988": 376, "19883": 1048, "19888": 1047, "1989": [268, 635, 788, 861, 862, 988, 995], "199": [81, 647, 791, 1007], "1990": 374, "19906": 1048, "19908": 1048, "1990a": 406, "1991": [516, 517, 518], "19916": 1049, "1992": [146, 374, 376, 413, 416, 567, 568, 645, 988], "19922": 1047, "19924": 1047, "1993": [146, 376, 474, 664, 685, 686, 1008], "19934": 1048, "19939": 1047, "1993apr6": 68, "1994": [146, 374, 376, 644], "19948": 1048, "1995": [146, 259, 376, 406, 416, 553, 554, 834, 901, 993], "1996": [25, 125, 409, 416, 420, 444, 516, 517, 518, 555, 556, 1002], "1997": [110, 374, 414, 416, 535, 554, 690, 694, 988, 989, 992], "1998": [125, 259, 374, 376, 414, 416, 555, 556, 834, 839, 870, 993, 994, 996, 1002, 1006], "19982": 1047, "1999": [157, 374, 406, 409, 411, 414, 416, 437, 450, 457, 469, 474, 534, 541, 555, 556, 559, 560, 723, 898, 906, 907, 909, 910, 998, 1004], "19th": 409, "1_": 1002, "1_000": [3, 25, 32, 46, 70, 98, 125, 149, 154, 156, 168, 230, 256, 345, 408, 537, 539, 701, 799, 822, 823, 831], "1d": [110, 112, 164, 168, 198, 230, 284, 287, 296, 297, 310, 344, 357, 379, 386, 388, 392, 393, 410, 415, 464, 467, 617, 630, 633, 653, 657, 660, 663, 684, 703, 712, 713, 719, 729, 730, 734, 738, 742, 783, 784, 787, 796, 846, 847, 848, 849, 850, 852, 854, 855, 856, 869, 920, 924, 925, 955, 979, 993, 1014, 1019, 1026, 1035, 1040, 1041, 1042, 1044, 1048, 1049, 1053], "1dlabel": 381, "1e": [3, 4, 5, 8, 15, 24, 44, 93, 146, 149, 152, 154, 155, 156, 157, 158, 161, 167, 177, 190, 197, 198, 204, 211, 215, 221, 226, 232, 237, 243, 246, 249, 257, 267, 270, 301, 312, 318, 321, 329, 336, 338, 345, 350, 385, 421, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 559, 560, 561, 562, 592, 597, 606, 608, 609, 611, 613, 614, 615, 619, 620, 622, 623, 625, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 689, 690, 691, 692, 693, 694, 695, 728, 785, 797, 798, 814, 839, 840, 841, 842, 843, 844, 845, 853, 861, 862, 869, 899, 900, 904, 905, 906, 907, 908, 909, 910, 978, 981, 992, 996, 1000, 1002, 1006, 1024, 1028, 1043, 1048, 1049, 1050], "1e0": [149, 232, 249, 267, 981], "1e1": [149, 155, 197, 232, 338], "1e15": 158, "1e2": [8, 149, 156, 232, 249, 338, 746], "1e3": [4, 5, 8, 149, 155, 161, 232, 270, 321, 981, 1024], "1e4": [270, 659, 679, 898, 1004], "1e5": [4, 154, 178, 180, 187, 270, 613, 614, 615, 619, 620, 622, 623, 625, 893, 898, 1004, 1024, 1026], "1e6": [6, 8, 190, 230, 350, 352, 365, 536, 898, 992, 1004], "1e7": 385, "1er": 417, "1f": [11, 18, 48, 51, 96, 177, 197, 230, 243, 245, 266, 315, 322, 351, 352], "1gb": 365, "1kastner": 1042, "1m": 958, "1mb": [366, 1040], "1mo": 154, "1nn": 376, "1or": 417, "1px": 302, "1qlettinn8oi": 350, "1st": [0, 2, 58, 88, 157, 198, 310, 882, 883], "1x": 322, "1x4": 417, "1x5": 417, "1x6": 417, "1z": 417, "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 136, 138, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 167, 168, 169, 170, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 388, 391, 392, 393, 396, 399, 400, 401, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 493, 496, 500, 501, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 584, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 706, 707, 708, 711, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 763, 764, 767, 768, 769, 771, 773, 774, 775, 776, 778, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 897, 898, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 919, 920, 921, 922, 924, 925, 926, 930, 933, 939, 940, 941, 942, 943, 944, 945, 946, 947, 953, 954, 955, 956, 957, 958, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1053], "20": [2, 5, 6, 11, 13, 17, 23, 24, 25, 31, 32, 37, 38, 41, 44, 45, 48, 52, 53, 59, 65, 76, 80, 90, 93, 100, 102, 111, 115, 118, 119, 122, 126, 130, 131, 133, 138, 141, 142, 143, 146, 155, 166, 168, 169, 171, 179, 186, 187, 189, 193, 194, 196, 197, 198, 201, 206, 209, 210, 211, 212, 214, 221, 230, 236, 245, 247, 248, 253, 259, 260, 262, 263, 265, 270, 271, 274, 278, 283, 287, 288, 289, 290, 291, 294, 302, 309, 310, 311, 316, 317, 318, 319, 321, 323, 325, 326, 329, 335, 337, 341, 343, 347, 351, 352, 357, 358, 372, 376, 377, 379, 381, 383, 384, 385, 396, 400, 401, 409, 416, 417, 441, 446, 447, 449, 464, 465, 469, 471, 472, 478, 488, 489, 490, 491, 492, 494, 496, 497, 500, 502, 504, 505, 511, 512, 515, 516, 523, 531, 536, 537, 542, 545, 546, 548, 552, 555, 556, 559, 560, 561, 562, 563, 569, 570, 582, 589, 590, 592, 594, 597, 599, 629, 630, 645, 649, 658, 666, 667, 668, 676, 678, 696, 704, 708, 713, 716, 725, 726, 739, 756, 757, 767, 792, 793, 797, 798, 799, 800, 814, 826, 827, 828, 831, 833, 836, 837, 838, 841, 842, 849, 850, 861, 862, 863, 864, 866, 868, 869, 877, 878, 879, 880, 885, 899, 900, 902, 903, 908, 911, 916, 922, 924, 925, 928, 970, 981, 988, 992, 995, 998, 999, 1002, 1005, 1010, 1014, 1016, 1017, 1020, 1026, 1030, 1031, 1033, 1035, 1041, 1044, 1047, 1049, 1050], "200": [31, 32, 42, 48, 52, 58, 73, 83, 85, 96, 111, 122, 129, 153, 183, 192, 198, 201, 202, 203, 209, 214, 219, 226, 238, 241, 243, 260, 266, 268, 269, 305, 308, 327, 337, 338, 358, 361, 374, 381, 391, 414, 416, 421, 440, 454, 468, 471, 472, 522, 533, 534, 535, 538, 539, 540, 543, 547, 584, 649, 651, 671, 679, 692, 814, 861, 862, 902, 906, 907, 908, 909, 910, 1007, 1014], "2000": [13, 24, 38, 48, 73, 94, 100, 173, 246, 249, 259, 278, 299, 319, 351, 374, 376, 409, 410, 416, 421, 452, 462, 533, 534, 559, 689, 691, 693, 743, 788, 797, 850, 880, 892, 989, 992, 998, 1004, 1019, 1027], "20000": [17, 95], "200000": [215, 869], "20002": 1048, "2001": [25, 154, 169, 253, 258, 405, 409, 416, 437, 451, 452, 453, 462, 511, 559, 560, 564, 565, 628, 634, 639, 645, 691, 696, 735, 788, 885, 897, 929, 982, 984, 988, 992, 998, 1000, 1002, 1004, 1007], "2002": [61, 406, 409, 416, 437, 448, 593, 594, 726, 756, 851, 899, 984, 992], "20023": 1048, "2003": [10, 405, 409, 414, 417, 451, 452, 462, 513, 515, 689, 693, 839, 841, 988, 989, 994, 1004, 1043], "20030": 1048, "20031": 1049, "2004": [3, 146, 259, 278, 374, 376, 409, 411, 414, 473, 535, 607, 608, 689, 693, 705, 743, 783, 900, 986, 988, 989, 994, 1007, 1026], "2005": [23, 25, 79, 376, 406, 437, 439, 853, 988, 995, 1005], "20056": 1048, "2006": [9, 296, 374, 416, 419, 462, 498, 557, 558, 565, 566, 610, 611, 614, 619, 622, 649, 666, 667, 741, 788, 789, 797, 839, 897, 914, 915, 988, 992, 994, 997, 1004, 1005], "2007": [0, 36, 185, 374, 409, 418, 440, 452, 454, 460, 462, 566, 656, 691, 717, 734, 737, 758, 759, 795, 984, 988, 990, 992], "20072": 1048, "2008": [10, 411, 413, 414, 478, 534, 563, 590, 645, 664, 685, 686, 692, 716, 726, 756, 834, 839, 843, 860, 986, 989, 990, 992, 993, 994, 997, 998, 1007], "20087": 1048, "2009": [109, 112, 113, 124, 181, 409, 413, 414, 416, 417, 519, 520, 528, 531, 537, 538, 540, 541, 544, 547, 553, 559, 560, 635, 671, 679, 696, 835, 912, 913, 940, 941, 988, 992, 993, 999, 1008], "200_000": [869, 1051], "200j": 138, "200m": 374, "200x": 1035, "201": [3, 14, 121, 146, 376, 584, 1014], "2010": [0, 45, 65, 77, 168, 264, 265, 405, 409, 411, 413, 414, 422, 475, 536, 704, 708, 719, 720, 740, 829, 861, 862, 984, 988, 992, 996, 1006, 1011, 1035], "2011": [0, 45, 168, 219, 385, 414, 417, 535, 538, 540, 541, 547, 590, 627, 638, 658, 730, 982, 996, 1006, 1011, 1035], "20117": 1048, "2012": [0, 79, 406, 416, 555, 556, 563, 639, 743, 981, 985, 992, 1011, 1035], "2013": [0, 173, 376, 409, 413, 414, 536, 726, 756, 984, 992, 1011, 1036, 1037], "2014": [0, 50, 373, 402, 414, 416, 419, 530, 607, 608, 622, 623, 658, 692, 861, 862, 940, 941, 989, 996, 1017, 1038], "20145": 1049, "2015": [0, 168, 373, 708, 721, 723, 724, 861, 862, 992, 999, 1017, 1039, 1040], "201520": 186, "20155": 1048, "20159": 1048, "2016": [0, 223, 373, 409, 981, 1040, 1041], "20161": 1048, "20165": 1048, "2017": [0, 259, 373, 406, 409, 420, 444, 992, 1041, 1042], "2018": [0, 197, 215, 417, 450, 981, 992, 1010, 1017, 1042, 1043], "2019": [0, 168, 377, 409, 452, 462, 692, 989, 992, 999, 1002, 1043, 1044, 1045], "2020": [0, 374, 1045, 1046, 1047, 1048], "20200": 1048, "20207": 1048, "20209": 1048, "2021": [0, 377, 379, 671, 1047, 1048], "2022": [0, 366, 416, 705, 1002, 1049, 1050], "2023": [0, 391, 402, 406, 1050, 1051], "20231": 1048, "2024": 1052, "20240": 1048, "20250": 1048, "20272": 1048, "20297": 1048, "203": 51, "20312": 1048, "203174": 186, "20326": 1048, "20331": 1050, "2034": [350, 374], "20380": 1048, "20385": 1048, "2039": 262, "204": [1000, 1005], "20408": 1049, "20415": 1050, "20416": 1048, "20431": 1048, "20477": 1048, "20512": 1048, "20515": 1048, "20521": 1048, "20524": 1051, "20526": 1048, "20528": 1048, "20531": 1048, "20534": 1048, "20552": 1048, "20554": 1048, "20560": 1048, "20567": 1049, "20583": 1048, "20597": 1048, "206": [141, 147, 1014], "20617": 1050, "20619": 1048, "20638": 1048, "20640": [115, 162, 374, 490], "20652": 1048, "20653": 1049, "20657": 1048, "20673": 1048, "20683": 1048, "207": [157, 159, 302, 1014, 1035], "2071716": [844, 845], "20727": 1048, "20729": 1048, "20752": 1048, "2075215": 212, "20753": 1049, "20761": 1048, "207667": 262, "2079": 264, "208": [146, 283, 376], "20802": 1050, "20803": 1049, "20811": 1049, "20842": 1048, "20843": 1048, "20860": 1049, "20880": 1048, "208864": 186, "20899": 1048, "209": [13, 244, 250, 741, 880, 1014], "20904": 1048, "20959": 1048, "20960": 1048, "20961": 1048, "20_000": 283, "20new": [374, 1028], "20newgroup": [28, 164, 175, 189, 213, 216, 302, 489, 571, 658, 830, 833, 988, 1014], "20news_hom": 374, "20newsgroup": [212, 372, 1035], "20th": 708, "21": [2, 11, 71, 146, 167, 186, 198, 205, 215, 216, 223, 248, 253, 283, 302, 307, 309, 321, 376, 377, 381, 383, 396, 405, 416, 417, 441, 445, 474, 478, 529, 532, 561, 562, 563, 569, 570, 588, 589, 591, 627, 669, 687, 754, 800, 802, 814, 827, 870, 877, 879, 885, 902, 918, 940, 984, 988, 993, 1002, 1010, 1014, 1031, 1033, 1035, 1036, 1038, 1042, 1043, 1045], "2100": [48, 318], "2102": 544, "21020": 1050, "21026": 1049, "21032": 1049, "21038": 1049, "2107": 264, "21078": 1049, "21079": 1049, "21080": 1048, "21086": 1049, "21093": 1048, "211": [264, 320, 328, 351, 880, 892], "21109": 1049, "21114": 1049, "211217613": 1043, "21130": 1048, "21145": 1048, "21148": 1049, "2117": 329, "21177": 1049, "21179": 1048, "21194": [44, 1048], "21195": 1048, "21199": 1048, "212": [121, 146, 264, 328, 376, 469, 500, 998, 1026], "21219": 1049, "212197e": 215, "21243": 44, "21251": 1048, "2126": 236, "21271": 1048, "21278": 1049, "21295": 1048, "21298": 1049, "21301203": 152, "213056e": 215, "21310": 1049, "21316": 1049, "21330": 1049, "21334": 1049, "21336": 1048, "21340": 1048, "21341": 1049, "21351": 1048, "21389": 1048, "2139": [197, 215], "214": [150, 584], "21408": 1049, "21425": 1049, "21430": 1049, "21432": 1049, "21434": 1049, "21436": 1049, "21443888": 212, "21445": 1049, "21448": 1049, "21469": 1050, "21481": [1048, 1049], "21482": 1049, "21493": 1048, "215": 584, "21517": 1048, "21534": 1049, "21542": 1049, "21544347": 10, "21552": 1048, "21565": 1049, "2156660": 322, "21567": 1049, "21569": 1049, "21573": 1049, "21576": 1049, "21578": [6, 1048], "2159048": [653, 663, 684], "216": 1005, "21606": 1049, "21616": 741, "21617": 1049, "21632": 1049, "21694": 1048, "217": [535, 541, 799], "21701": 1049, "21705": 1049, "2171": 5, "21713": 1049, "21724": 1049, "2173": [185, 656, 988], "21735": 1049, "21741": 1048, "21762": 1049, "21767": 1049, "2179": 6, "218": [306, 313, 376, 471, 715, 786, 1014], "2180": 17, "21800": 1049, "21805": 1049, "21807": 1052, "21808": 1049, "21809": 1051, "21814": 1049, "21832": 1049, "21833": 1048, "21837": 1049, "21845": 1048, "21871": 1048, "21873": 1049, "21880": 1049, "21881": 1049, "21888": 1049, "218997": 186, "219": [13, 97, 104, 258, 1014], "21901": 1049, "21915": 1048, "21917": 1048, "2192": [185, 656, 988], "21938": 1050, "21954": 1049, "21987": 1049, "21988": 1049, "21991": 1048, "21998": 1049, "22": [2, 11, 40, 90, 113, 114, 116, 130, 134, 161, 162, 164, 167, 168, 169, 214, 223, 236, 239, 248, 253, 256, 268, 278, 285, 302, 305, 309, 314, 317, 320, 321, 322, 323, 326, 329, 352, 379, 383, 384, 396, 405, 437, 448, 472, 478, 488, 489, 495, 496, 504, 515, 524, 531, 537, 542, 545, 546, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 594, 609, 627, 628, 632, 634, 645, 647, 651, 653, 655, 658, 659, 661, 663, 665, 669, 688, 692, 702, 704, 713, 757, 769, 778, 783, 784, 788, 800, 801, 805, 814, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 848, 850, 852, 854, 855, 856, 861, 862, 863, 865, 868, 884, 895, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 935, 936, 984, 992, 1002, 1010, 1014, 1031, 1033, 1035, 1038, 1043, 1046, 1048], "220": [42, 253, 1035], "2200": [48, 374, 493], "22002": 1049, "22014": 1050, "22015": 1049, "22016": 1049, "22027": 1049, "220446049250313e": [471, 472, 478, 650, 651, 654, 655, 656, 682, 683], "22050": 1048, "22054": 1050, "22058": 1049, "22059": 1049, "22062": 1049, "22063": 1049, "22064": 1049, "22065": 1049, "221": [83, 128, 253, 1038], "22106": 1049, "22108": 1049, "2211": 634, "22111": 1049, "22114": 1049, "22118": 1049, "22119": 1049, "22120": 1049, "22137": 1049, "22148": 1049, "22149": 1049, "22150": 1049, "22154": 1049, "22159": 1049, "22181": 1049, "22188": 1049, "22191": 1049, "22199": 1049, "222": [83, 128, 329, 1007], "22203": 1049, "22206": 1049, "22212": 1049, "22215": 1049, "22217": 1049, "22218": 1049, "2222": 656, "22223": 1049, "22235": 1049, "22237": 1049, "2224": 1037, "22240": 1049, "22248": 1049, "22249": 1049, "22254": 1049, "22255": 1049, "22268": 1050, "22269": 1050, "22284": 1049, "22288": 1049, "223": [13, 83, 128, 146, 213, 376], "22300": 1049, "22314355": 590, "22318": 1049, "22320": 1049, "22356": 1049, "22361": 376, "22370": 1049, "223745": 197, "224": [51, 83, 128, 409, 725, 822], "22409": 1051, "22410": 1049, "22412": 1049, "22438": 391, "2246": 215, "22476": 1049, "22486": 1049, "22493": 1049, "22498": 1049, "225": [248, 250, 416, 1014], "22504": 409, "22506": 1051, "22508": 1049, "22518": 1050, "22525": 1049, "22526": 1049, "22527": 1050, "22537": 1049, "22548": 1049, "22553": 1049, "22554": 1050, "22562": 1050, "22566": 1049, "2257": 1028, "22578": 1049, "225806": 215, "22595": 1049, "226": [409, 420, 444], "22604": 1049, "22629": 1050, "22635": 1049, "22665": 1050, "22685": 1049, "22687": 1049, "22692": 96, "22694": 1049, "22695": 1049, "22696": 1049, "22697": 1049, "227": [224, 259, 350, 409, 725], "22710": 1050, "22735": 1049, "22747343e": 78, "22775": 1049, "22784907": 827, "22806": 1049, "22808": 1049, "22830": 1049, "2284": 168, "22856": 1049, "2286": 374, "22866": 1049, "22868": 1049, "2287": 374, "2288": 374, "22891": 1049, "22898": 1050, "22899": 1049, "229": [191, 216, 992, 1014], "22908": 1049, "22913": 1049, "22950": 1049, "22953": 1049, "22965": 1050, "22968": 1050, "22982": 1049, "22993": 1050, "22nd": 439, "22publish": 383, "22wheel": 383, "23": [2, 17, 24, 32, 48, 96, 125, 127, 146, 164, 178, 197, 223, 228, 238, 240, 248, 253, 261, 276, 302, 309, 314, 317, 318, 319, 321, 322, 323, 326, 376, 377, 385, 396, 400, 401, 416, 422, 432, 440, 447, 452, 454, 462, 465, 467, 468, 475, 478, 479, 480, 482, 483, 484, 490, 492, 500, 501, 502, 504, 505, 510, 512, 514, 522, 524, 538, 539, 540, 543, 547, 554, 556, 558, 560, 561, 562, 565, 568, 569, 570, 607, 608, 611, 627, 630, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 675, 678, 679, 680, 681, 717, 730, 778, 830, 836, 837, 838, 847, 855, 862, 865, 877, 884, 892, 893, 902, 905, 907, 910, 913, 915, 922, 924, 925, 935, 936, 941, 992, 1010, 1014, 1031, 1033, 1035, 1036, 1042, 1043, 1044, 1047], "230": 584, "2300": [48, 186], "23023": 1049, "23033": 1049, "23034": 1049, "23036": 1049, "23038": 1050, "23040": 1049, "23046": 1049, "23047": 1049, "23077": 1049, "23079": 1049, "23095": 1049, "23097": 1049, "23098": 1049, "23099": 1051, "231": [9, 296, 374, 409, 420, 444, 498, 584], "23101": 1050, "23113": 1049, "23115": 1049, "23127": 1050, "23139": 1050, "2314": 6, "23149": [374, 497, 1049], "2318": 6, "23194": 1049, "23197": 1050, "23198": 1049, "232": [253, 992], "23210": 1050, "23214": 1049, "2323": [689, 693, 989], "23252": 1050, "23256": 1049, "23264": 1049, "2327": 6, "23271": 1049, "23273": 1049, "23275": 1050, "2328": 254, "23299": 1049, "2330": 6, "2331": 2, "23317": 1052, "2332": 2, "2333": 2, "2334": 2, "2335": 2, "23358": 1049, "2336": 385, "23370": 1049, "23395": 1049, "233mb": [4, 1024], "234": [51, 358, 360, 839, 843, 861, 862, 994, 1014], "2341": 524, "23410": 1049, "234137": 186, "23442": 1050, "23446": 1050, "23461": 1050, "23470": 1050, "23471": 1049, "23480": 1050, "235": 311, "235430": 262, "23548": 1049, "2357juan": [1049, 1050, 1051], "23585": 1050, "23595": 1051, "236": [253, 276, 1014], "23604": 1050, "23608": 1049, "23619": 1050, "23636": 1049, "23637": 1050, "23668876": [653, 663, 684], "236720": 186, "23683": 1050, "23689075": [653, 663, 684], "237": [230, 1026], "23726": 1050, "23731": 1051, "23734": 1050, "237703": 186, "23773583": 78, "23786125": 193, "23798": 1050, "23819": [1050, 1051], "23833": 1049, "23834": 1050, "23865": 1050, "23874": 1050, "238744": 186, "23877": 1050, "238955": 262, "239": 1035, "23905": 1050, "23935": 1050, "23977": 1050, "23990": 1049, "23993": 1050, "24": [2, 3, 11, 64, 96, 125, 143, 146, 164, 168, 173, 181, 237, 253, 271, 276, 283, 311, 313, 314, 315, 316, 318, 320, 321, 322, 323, 325, 326, 377, 379, 383, 396, 400, 401, 409, 416, 417, 437, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 492, 496, 504, 515, 516, 517, 518, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 613, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 698, 699, 700, 702, 708, 714, 727, 746, 753, 797, 798, 800, 803, 804, 814, 821, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 865, 867, 868, 869, 870, 873, 874, 876, 878, 879, 880, 881, 882, 884, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 935, 936, 940, 967, 973, 981, 999, 1002, 1010, 1014, 1031, 1033, 1035, 1043, 1044, 1045, 1046, 1048], "240": [2, 11, 28, 33, 42, 1000, 1014, 1035], "2400": 48, "24000": 520, "24015": 1049, "24017": 1049, "24027": 1051, "24051": 1050, "24058": 1050, "24075": 1050, "24076": 1051, "24083": 1051, "24084": 1050, "24087": 1049, "241": [416, 567, 568], "2410": 544, "24140": 1051, "24141": 1050, "24145": 1051, "24146": 1050, "24160": 320, "242": [884, 1035], "24218": 1050, "24230": 1051, "24245": 1050, "24258": 1050, "24264": 1050, "24283": 1050, "243": 584, "2431": 475, "24317": 1050, "24338": 1050, "24350": 1050, "24354": 1050, "24365": 1050, "2438": 6, "243802": 300, "2439": 6, "244": [278, 584], "24404831511191221642141021252626109": 11, "24405": 1050, "2441": 215, "24412": 1050, "24421": 1050, "2443": 6, "24433": 1050, "2444": 6, "24446": 1049, "244466": 240, "24465": 1050, "2449": 385, "245": [1004, 1037], "24512": 1050, "24523": 1050, "24528": 1050, "24538": 1050, "24539": 1050, "24543": 1050, "24556": 1050, "24568": 1051, "245961": 122, "245mb": 352, "246": [181, 1000, 1035], "24617": 1050, "2463": 988, "24630": 1050, "24631": 1049, "24637": 1050, "24640578": 78, "24645": 1050, "2465": 6, "24667": 1050, "24668": 1051, "2467": 6, "24677": 1051, "24683": 1050, "24688": 1050, "24699": 1050, "247": 884, "24714": 1050, "2473": 6, "24747": 1050, "24750": 1050, "24755": 1050, "2476": 6, "24767": 1050, "24769": 1051, "2477": 6, "2478": 6, "248": [168, 195, 216, 1014], "2481": 6, "2482": 6, "24838": 1052, "24849": 1050, "24855": 1050, "24856": 1050, "24871": 1051, "24873": 1050, "2487575": 173, "2487591": 173, "24882": 1051, "24889": 1050, "24894": 1050, "24935": 1051, "24951": 1050, "25": [2, 3, 4, 5, 7, 8, 9, 11, 17, 22, 24, 40, 43, 52, 53, 78, 83, 89, 100, 102, 113, 122, 134, 142, 143, 150, 161, 167, 177, 187, 201, 223, 226, 236, 245, 253, 259, 296, 299, 302, 305, 307, 320, 325, 326, 348, 350, 358, 361, 365, 385, 413, 416, 417, 420, 444, 477, 481, 501, 504, 521, 570, 597, 618, 678, 734, 796, 817, 830, 856, 874, 879, 881, 882, 885, 893, 894, 896, 897, 938, 942, 973, 988, 992, 993, 995, 1002, 1024, 1035, 1037, 1043, 1046], "250": [8, 63, 122, 173, 218, 493, 692, 822, 981, 1004, 1042], "2500": 992, "25000": 40, "2501": [146, 376], "25044": 1051, "250639": 186, "25067": 1050, "25077": 1050, "25080": 1050, "25089": 1050, "25093": 1051, "25094": 1050, "251": [146, 220, 376], "25102": 1051, "25120": 1051, "25129": 1050, "2513": 6, "2514": 6, "25147": 1050, "2516": 6, "25163598": 387, "2517": 6, "25172": 1050, "25174": 1050, "25177": 1051, "25183501383331797": 267, "25186": 1051, "25188": 1050, "25190": 1051, "25193977": 993, "25196": 1051, "252": [146, 220, 376, 534, 880, 892], "25209": 1051, "25214": 1051, "25220": 1051, "25232": 1051, "25250": 1050, "25251": 1051, "25257": 1051, "25274": 1050, "25275": 1052, "25291": 1051, "25291366": 361, "25294": 1051, "25295": 1050, "25296": 1050, "25297": 1051, "25299": 1051, "253": [48, 66, 121, 534, 1014], "25308": 1051, "2531": 6, "25312": 1050, "2533": 6, "25334": 1051, "25341": 1050, "253445": 122, "25349312e": 178, "2535": [469, 474], "25354": 1050, "2536": 476, "25363": 1050, "25367": 1051, "2537": 6, "25370": 1050, "25387": 1051, "2539": 6, "254": [305, 313, 1014], "25402": 1051, "25417": 1051, "25432": 1051, "25438": 1051, "25443": 1051, "25477": 1050, "2548": 193, "25490": 1051, "25499205": 536, "255": [46, 96, 283, 301, 311, 318, 374, 416, 493, 494, 561, 562], "25500": 1050, "25506": 1051, "25511": 1050, "25531": 1051, "25563": 1050, "25570": 1050, "25587": 1051, "25589": 1050, "256": [40, 46, 51, 121, 311, 366, 374, 409, 416, 449, 468, 537, 546, 563, 860, 892, 902, 1028, 1049], "25601": 1051, "25619": 1050, "25629": 1051, "25638": 1050, "25659": 1051, "25664": 1050, "25672": 1051, "25677": 1051, "2568": 1044, "25694": 1050, "25697": 1051, "257": [220, 257, 295, 297, 1014], "25704": 1050, "25713": 1051, "25719016": 993, "25732": 1051, "25733": 1051, "25744": 1050, "25747": 1050, "25752": 1051, "25774": 1050, "25784": 1051, "2579": 692, "258": 220, "25805": 1051, "25813": 1051, "25814": 1051, "25815": 1051, "259": [9, 220, 296, 374, 416, 498, 567, 568], "259031": 186, "259297": 186, "25931": 1051, "25956": 1051, "25973": 1051, "25987": 1051, "25991": 1053, "25th": [2, 236, 882], "26": [2, 44, 52, 78, 95, 96, 104, 154, 167, 235, 253, 260, 272, 326, 385, 570, 648, 729, 783, 822, 880, 892, 941, 992, 1002, 1014, 1035, 1038, 1039, 1047, 1053], "260": [253, 258, 1048], "26019": 1051, "26021": 1051, "26033": 1051, "2605": 692, "26059924": 322, "26082": 1051, "26093": 1051, "26106": 1051, "26108": 1051, "26113448": 143, "26120": 1053, "26121": 1051, "26163": 1052, "26194": 1051, "262": [177, 216, 1014, 1035], "26207": 1051, "26242": 1051, "26243": 1052, "26253567e": 78, "26264": 1051, "26267": 1052, "26278": 1052, "26286": 1051, "26286057": 212, "26289": 1051, "26299": 1052, "263": [102, 104, 1014], "26315": 1052, "26316": 154, "26318": 1051, "26323": 1051, "263234": 240, "26323428": 240, "26325": 1051, "26333": 1051, "26337": 1051, "26362917": 212, "26366": 1052, "263758": [583, 587], "26376": 1051, "26385": 1051, "26386": 1051, "26386883": 152, "26391": 1052, "264": [328, 331, 1014], "2640": 835, "26400": 1051, "26410": 1052, "26411": 1052, "26416": 1051, "26424": 1051, "26433": 1051, "26454": 1051, "26459": 1052, "26464": 1052, "26466": 1051, "265": [208, 216, 273, 276, 735, 839, 843, 994, 1014], "26503": 1051, "26506": 1052, "26521": 1051, "2652124": 815, "26525": 1052, "26551": 1051, "26566": 1051, "26579": 1051, "26593496": 212, "266": [351, 353, 1014], "26600": 1051, "26602": 1051, "26616": 1052, "26634": 1052, "26642044": 666, "26644": 1051, "26648": 1052, "26653": 1051, "26657": 1051, "2666": 992, "2667": 498, "26674": 1052, "26683": 1052, "267": [78, 81, 146, 1014, 1035], "2671": 1002, "26721": 1052, "26734": 1052, "26736": 1052, "26744": 1052, "26748": 1051, "2675": 5, "26754": 1051, "26760": 1051, "26765": 1052, "267703": 52, "26772": 1051, "26786": 1052, "26789": 1052, "268": [230, 253, 273, 285, 297, 1014], "26814": 1051, "268147": 262, "26828": 1052, "26830": 1052, "26831": 1052, "26837": 1053, "26840": 1052, "26855": 1052, "26862": 1052, "26893": 1051, "26896": 1052, "269": 511, "26903": 1051, "26909": 1052, "26913": 1051, "2692": 1002, "26931": 1051, "26934744": 103, "26940": 1051, "26944": 1052, "26957": 1052, "26th": [409, 726, 756, 992], "27": [2, 4, 11, 17, 29, 45, 52, 253, 325, 326, 346, 376, 409, 417, 517, 524, 605, 713, 788, 789, 885, 905, 992, 1002, 1027, 1035, 1037], "270": [181, 244, 326], "27000": 215, "27002": 1051, "27005": 1052, "27006": 1052, "27017": 1052, "27018": 1052, "27044": 1051, "27054655": 212, "27058": 1052, "27098": 1052, "271": [123, 134, 1014], "27100": 1052, "27104": 1052, "27110": 1052, "27137": 1052, "27139": 1052, "2714": 236, "271411": 240, "27161": 1052, "27161955": 143, "27166": 1052, "27167": 1051, "27179": 1052, "27185": 1052, "27204": 1052, "27219": 1052, "272214": 584, "27239": 1052, "27240": 1052, "27243": 1051, "27250": 1052, "27252": 1052, "2727": 558, "27274": 1052, "27277": 1052, "27291": 1052, "27292": 1051, "27301": 1052, "27308": 1052, "27309": 1052, "27311": 1051, "27314": 1052, "27315": 1052, "27328": 1052, "27336": 1052, "2734": 385, "27344": 1053, "27372": 1052, "27381": 1054, "27389": 1052, "274": 511, "27417": 1052, "27431": 1052, "27438": 1052, "27456": 1053, "27468": 1051, "27478": 1052, "27490": 1052, "27491": 1053, "27499706": 10, "275": [2, 326, 1038], "27500": 1052, "27526": 1053, "27538": 1052, "27544": 1052, "27556": 1052, "27558": 1052, "27560": 1053, "27566": 1053, "275706": 52, "27573": 1051, "27576": 1053, "27577": 1052, "27580": 1051, "27583": 1051, "27584": 1053, "275851": 240, "2759": [896, 897], "27597342": 83, "276": 259, "27601": 1052, "27614": 1052, "27624": 1052, "2763": [422, 475], "27636": 1053, "27645": 1052, "27650": 1052, "27651": 1052, "27657": 1053, "27668": 1052, "27670": 1052, "27675": 1052, "27678": 1052, "277": [342, 348, 1000, 1014, 1037], "27700": 1053, "27702": 1052, "27710": 1052, "27718": 1052, "27720": 1052, "27721": 1052, "27734": 1052, "27736": 1054, "27757": 1052, "27760": 1052, "27772182": 11, "278": [232, 241, 376, 844, 845, 1014], "2780": 385, "27800": 1053, "27801": 1052, "27817": 1052, "27821": 1052, "27828": 1052, "27834": 1052, "27835": 1052, "27841": 1052, "27844": 1053, "27865": 1052, "27898": 1052, "27899": 1052, "279": [89, 91, 158, 988, 1014], "27904": 1053, "27937": 1053, "27979": 1052, "27990": 1053, "28": [2, 64, 122, 146, 167, 213, 236, 253, 260, 268, 276, 301, 325, 326, 376, 385, 409, 413, 450, 457, 1002, 1014, 1024, 1035, 1038, 1041], "280": 326, "28009951": 827, "2802": 17, "28040": 1053, "28048": 1052, "28051": 1053, "28053": 1053, "28074": 1052, "28085": 1053, "28090": 1052, "28092": 1053, "28095": 1052, "28102": 1053, "28106": 1054, "28111": 1052, "28121": 1052, "28136": 1053, "28160": 1053, "28165": 1052, "28167": 1052, "2818": 470, "28184": 1052, "28187": 1053, "28188": 1052, "28191": 1052, "28195": 1052, "28198": 1052, "282": [1024, 1035], "28205": 1053, "28207552": 212, "28210": 1053, "28222": 1052, "28225276": 51, "2823": 329, "28233": 1052, "28235": 1052, "28240": 1052, "28241": 1052, "28247": 1052, "2825": 0, "28256": 1052, "28261": 1053, "28262": 1052, "28263": 1052, "28295": 1052, "283": [43, 66, 213, 216, 1014], "2830": 0, "28306": 1053, "28327": 1052, "2833": 385, "28351": 1053, "28352": 1053, "28360": 1053, "28365": 1052, "28377": 1052, "28385": 1052, "28399": 1053, "284": 649, "28407": 1053, "28425": 1053, "284315": 253, "28432": 1053, "28435": 1053, "28471": 1053, "284806": 253, "284807": 253, "28483": 1053, "28491": 1053, "28498": 1053, "285": [240, 326, 724], "28521": 1053, "28552": 1053, "28557": 1053, "28582": 1053, "286": 416, "28604": 1053, "28612": 1053, "28651": 1053, "28664": 1053, "28670": 1053, "28692": 1053, "287": [168, 1004], "28701": 1054, "28703": 1053, "28712": 1053, "28718": 1053, "28722": 1053, "28756": 1053, "28763": 1053, "28768": 1053, "2879": 1042, "288": [182, 216, 535, 541, 1014], "28808734": 201, "28822": 1053, "28823": 1053, "28843": 1053, "28847": 1053, "289": [45, 66, 167, 1014], "28915": 1053, "28925": 1053, "28951": 1053, "28975": [1048, 1054], "28988": 1053, "28x28": 301, "29": [11, 79, 90, 134, 150, 154, 188, 197, 201, 214, 253, 320, 326, 376, 416, 559, 560, 690, 694, 781, 797, 856, 988, 989, 1006], "290": [312, 313, 326, 351, 688, 689, 693, 989, 1014], "290075": 186, "29014": 1054, "290584": 300, "291": [36, 66, 146, 351, 374, 376, 1014], "2914": 494, "292": [313, 396, 416, 735, 1014], "2928359": 212, "293": 230, "29316": 154, "2939931": 322, "29473397": [844, 845], "295040e": 215, "29543452": 322, "295505e": 215, "296": 1004, "2961": 651, "296575": 186, "297": 374, "298": 1000, "298688": 259, "29898468": 212, "299": [110, 680], "299546e": 215, "2_": 984, "2_000": 109, "2_2": [646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684], "2_f": 652, "2_fro": [653, 662, 663, 684], "2_poli": 259, "2_y": 994, "2c": [643, 652, 672, 673, 674, 675, 687, 984], "2d": [2, 31, 34, 37, 39, 42, 45, 46, 47, 51, 59, 60, 66, 87, 88, 92, 94, 97, 99, 103, 104, 128, 164, 191, 198, 203, 218, 219, 220, 223, 226, 229, 230, 292, 325, 326, 335, 338, 359, 373, 375, 379, 381, 388, 393, 409, 410, 414, 417, 419, 441, 452, 462, 464, 467, 481, 488, 490, 491, 492, 493, 494, 500, 501, 502, 504, 510, 514, 533, 541, 549, 584, 586, 635, 643, 657, 672, 691, 738, 779, 825, 829, 833, 871, 920, 924, 925, 940, 955, 978, 979, 986, 988, 989, 992, 999, 1003, 1008, 1014, 1019, 1025, 1035, 1039, 1042, 1043, 1044, 1047, 1049, 1053], "2darrai": 381, "2dlabel": 381, "2e": [183, 274], "2e6": 992, "2ec5ac": 309, "2f": [3, 6, 9, 11, 17, 29, 37, 40, 42, 44, 48, 50, 60, 62, 65, 83, 90, 96, 102, 122, 125, 129, 130, 141, 167, 168, 173, 177, 186, 188, 193, 197, 212, 213, 214, 215, 226, 230, 236, 253, 258, 262, 263, 265, 267, 268, 269, 273, 291, 292, 299, 307, 310, 319, 338, 350, 351, 361, 410, 413, 416, 696, 828, 831], "2fbf01908075": 705, "2fx": 246, "2g": [220, 223, 697, 1046], "2h": 415, "2k": 161, "2l": [419, 622], "2n": [696, 984, 996], "2n_": 988, "2nd": [58, 88, 157, 310, 409, 420, 444, 530, 1002, 1050], "2t_p": 266, "2x": 1035, "2x2": [335, 409, 754], "2x_iy_i": 984, "3": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 72, 73, 76, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 139, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 173, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 230, 231, 232, 233, 234, 236, 238, 240, 243, 244, 245, 247, 248, 249, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 328, 329, 330, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 356, 357, 359, 361, 366, 367, 373, 374, 376, 377, 379, 380, 381, 384, 385, 391, 392, 393, 396, 399, 400, 401, 402, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 504, 505, 506, 507, 510, 512, 515, 516, 517, 518, 519, 521, 523, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 587, 588, 590, 591, 593, 594, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 617, 618, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 692, 693, 694, 696, 699, 700, 702, 703, 704, 705, 707, 709, 710, 713, 716, 717, 721, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 756, 757, 768, 769, 775, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 892, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925, 926, 930, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 955, 956, 958, 959, 960, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 981, 982, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 998, 999, 1002, 1003, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1019, 1020, 1023, 1024, 1026, 1027, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1047, 1048, 1050, 1052, 1053], "30": [2, 6, 8, 13, 17, 32, 37, 38, 42, 52, 58, 69, 71, 76, 90, 100, 109, 118, 122, 125, 129, 136, 146, 149, 150, 153, 155, 168, 173, 176, 191, 195, 197, 215, 218, 219, 223, 231, 235, 236, 247, 253, 259, 264, 273, 274, 276, 278, 283, 292, 293, 309, 310, 311, 320, 321, 325, 326, 330, 336, 339, 341, 342, 365, 374, 376, 384, 385, 413, 417, 420, 444, 450, 455, 456, 457, 500, 531, 535, 537, 538, 539, 541, 543, 545, 546, 570, 592, 595, 596, 598, 648, 692, 735, 783, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 885, 900, 913, 970, 981, 986, 992, 993, 995, 1000, 1014, 1024, 1035, 1036, 1042, 1043, 1044], "300": [2, 18, 19, 20, 32, 36, 48, 56, 96, 109, 110, 111, 115, 162, 187, 223, 226, 230, 247, 253, 262, 293, 308, 317, 325, 342, 345, 381, 443, 447, 448, 459, 461, 513, 639, 644, 645, 679, 690, 692, 694, 861, 988, 1014, 1045], "3000": [11, 62, 221, 896, 897], "30000": 374, "300343": 186, "30061": 541, "301": [410, 1006], "3015": 17, "30151134": 466, "302": [132, 134, 259, 627, 1014], "30258509": 419, "303": [215, 635], "30349955": 1026, "30357143": 359, "304": [146, 309, 341, 348, 351, 376, 1014], "3044": 123, "305": 385, "30506066": 181, "3053": [469, 474], "305438": 122, "306": 627, "306012": 186, "30750": 409, "308": 635, "30897646": 212, "309": [22, 26, 351, 1014], "30m": 374, "31": [2, 66, 68, 77, 146, 147, 215, 253, 288, 318, 325, 326, 405, 417, 500, 561, 562, 597, 649, 671, 679, 957, 993, 1014, 1035], "3109306": 152, "311": 351, "312": [125, 1038], "3121": 708, "313": [24, 26, 325, 331, 1014, 1026], "313276e": 215, "315": [283, 376], "316": [154, 158, 611, 614, 625, 880], "31622776601683794": 136, "3164764": [197, 215], "317": 154, "31760": 988, "318": [227, 241, 351, 450, 1014], "318387": 300, "319": [150, 1028], "31958": 154, "31973683": 212, "31bit": 1046, "31st": [198, 883], "32": [2, 3, 11, 14, 49, 90, 166, 169, 235, 273, 319, 326, 373, 377, 384, 393, 405, 416, 417, 445, 564, 565, 582, 589, 634, 676, 883, 885, 924, 925, 957, 1000, 1002, 1027, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052], "320": [351, 374, 981, 1006, 1035], "3204": 1041, "321": [89, 321, 323, 1014], "321301": 23, "322": [4, 89, 128, 134, 471, 472, 1014], "3221": [692, 989], "323": [89, 230], "323200": 23, "324": [89, 374], "324084": 186, "3245": [692, 989], "325": [89, 202, 216, 1014], "325198e": 215, "3252": 597, "326": 89, "32634568": 201, "3264": 5, "327": [24, 730, 1026], "3272984419327777": 355, "3273": 746, "327407": 240, "327605": 240, "32767": 1046, "32782448": 152, "3279": 5, "328": 730, "3288": 544, "329": 450, "329616": 186, "32987858": 565, "32bit": [365, 957], "32x32": 376, "33": [2, 78, 197, 320, 326, 374, 376, 383, 384, 385, 409, 417, 461, 532, 637, 648, 712, 713, 729, 730, 738, 743, 783, 784, 787, 806, 828, 830, 832, 891, 915, 974, 988, 992, 1002, 1024, 1035, 1043], "330": 326, "33035714": 359, "331263": 186, "3315057": [826, 827], "3317": 197, "332": [351, 892], "333": [119, 134, 846, 1014], "3333": 498, "333333": 215, "33333333": [854, 1002], "334": 152, "334795": 262, "335": 2, "335919": 300, "336": [125, 385, 1002], "336188": 300, "3367": 1042, "337": [94, 104, 385, 1014], "3375": 320, "338": [236, 345, 348, 1014], "3383": 5, "3384": 351, "3387": 351, "3397": [664, 685, 686], "33rd": [901, 1005], "34": [2, 122, 146, 149, 288, 302, 325, 326, 359, 376, 413, 520, 529, 570, 597, 649, 667, 716, 764, 1024, 1035], "340": [232, 325, 351], "34118": 374, "34125758": 212, "3415": [664, 685, 686], "341523": 300, "3419": 262, "341949": 186, "342": [73, 74, 351, 822, 1014], "34279478": 212, "343": [65, 66, 1014], "3433": 5, "34346583": 51, "3445": 5, "345": [7, 14, 146, 376, 1014], "34545455": 988, "3456": 5, "34586917": 212, "346": [416, 501, 555, 556], "3467": 615, "347717": 122, "348": 350, "34867495": 993, "349": [109, 385, 553], "34990341": 83, "35": [2, 4, 5, 7, 9, 53, 69, 111, 132, 147, 167, 168, 176, 185, 226, 278, 310, 325, 326, 544, 648, 649, 656, 702, 706, 707, 727, 741, 756, 782, 789, 837, 981, 988, 992, 998, 999, 1002, 1024, 1028, 1035, 1037], "350": [77, 81, 167, 351, 1014], "351390": 259, "352": [259, 351, 385], "352124": 186, "35278655": 212, "353": [351, 1028], "3534": 17, "3539": 68, "354": 351, "354394": 122, "3551": 5, "355440": 259, "355445": 122, "356": 1000, "356497": 122, "3565178": 957, "357": [95, 104, 146, 376, 500, 905, 1014], "3573": 827, "3577618906572577": 316, "35788": 1028, "3582": 5, "358295": 186, "358990": 186, "3591": 1044, "36": [2, 4, 5, 11, 12, 95, 146, 155, 167, 215, 236, 341, 376, 385, 416, 417, 555, 556, 570, 735, 759, 992, 1028, 1035], "360": [109, 553], "360000": 300, "36047253": 212, "361": [12, 14, 154, 159, 374, 416, 555, 556, 1014], "362176": 320, "363": 11, "3635": 827, "364": [351, 471, 472, 1036], "365": [93, 104, 411, 473, 1014], "3659": 1040, "36607143": 359, "367": [116, 351, 416, 1035], "36787944": 990, "3680": [611, 614, 625], "3684": 835, "36851234": 816, "368896": 23, "3690483151908911912247722318110": 11, "3696": 613, "3697": 850, "3697178": 11, "37": [2, 181, 262, 273, 325, 359, 374, 416, 524, 716, 884, 895, 1002, 1035], "370000e": 215, "370039": 186, "370738": 23, "372": [32, 33, 1014], "37257991": 83, "373333": 262, "374": [266, 276, 1014], "375": [51, 449, 750, 992], "376": [113, 134, 1000, 1014], "37647423": 11, "376999": 23, "377": [30, 33, 351, 1014], "37741762": 103, "377eb8": [38, 42, 60, 61, 226], "378": [167, 416, 1028, 1035], "37815029": 212, "37845099": 361, "379": [61, 66, 1014], "37967282": 993, "379710": 167, "379763": 122, "38": [90, 168, 188, 196, 201, 252, 268, 288, 321, 416, 632, 885, 940, 992, 1002, 1035, 1036, 1037], "380": 1028, "3800": 186, "3803": 352, "381327": 374, "382": 104, "382005": 122, "382120e": 215, "383": [211, 216, 350, 1014], "38353048": 212, "383973": 262, "384": [296, 297, 353, 696, 905, 1014], "3840": 1043, "384338": 186, "384616559": 388, "385000e": 215, "3854": [664, 665], "3855": 1013, "386": 880, "3862": 868, "38629436": 1002, "38690531511642143152471231333333107": 11, "387": 1035, "387580e": 215, "387599": 11, "387830e": 215, "388": [166, 171, 297, 1014], "3889": 475, "3889873516666431": 11, "389": [593, 594, 1028], "3894": 615, "39": [2, 11, 146, 240, 374, 376, 377, 383, 409, 417, 495, 895, 913, 942], "390": [103, 104, 1014], "3908844": 827, "391": 696, "3910350737": 388, "3911": 6, "3928": 470, "393": [72, 74, 1014], "393297": 240, "39329747": 240, "394": [68, 158], "3947": 1004, "395": [2, 351], "39566012": 322, "39568399": 536, "396": [68, 146, 181, 216, 376, 1014, 1028], "3964": [422, 475], "397": 374, "3972": 655, "398": [647, 1028], "3986": 215, "3996": 651, "3_": 984, "3_poli": 259, "3a": 383, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 6, "3c479a6885bfa0438971388283a1ce32": 373, "3d": [43, 46, 65, 88, 99, 194, 218, 220, 222, 359, 417, 506, 586, 955, 1027, 1042, 1043, 1045], "3f": [2, 4, 6, 9, 11, 13, 15, 19, 22, 24, 36, 38, 45, 46, 47, 56, 69, 71, 73, 84, 109, 116, 117, 125, 142, 146, 149, 150, 151, 153, 158, 166, 168, 169, 177, 181, 183, 189, 197, 199, 203, 212, 213, 215, 219, 230, 232, 253, 257, 259, 260, 262, 265, 267, 270, 283, 299, 329, 350, 351, 352, 822, 829, 1000, 1024], "3k": 696, "3l": 419, "3llobo": 1050, "3m": 10, "3rd": [88, 157, 839, 882, 994, 1002], "3ssnporch": 119, "3x1": 947, "3x2": [963, 966], "3x3": 978, "4": [2, 3, 4, 5, 6, 7, 8, 10, 11, 15, 17, 18, 23, 24, 25, 26, 29, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 62, 63, 64, 68, 69, 70, 71, 72, 79, 80, 83, 84, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 109, 110, 112, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 142, 146, 149, 152, 154, 155, 157, 158, 161, 162, 164, 167, 168, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 201, 203, 204, 205, 207, 210, 211, 215, 218, 220, 226, 230, 231, 232, 233, 234, 235, 236, 238, 240, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 270, 271, 273, 274, 281, 283, 285, 287, 288, 289, 290, 293, 299, 301, 302, 303, 305, 306, 308, 309, 311, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 335, 337, 338, 341, 342, 343, 345, 346, 347, 350, 351, 352, 359, 361, 366, 373, 374, 376, 377, 379, 384, 385, 388, 391, 392, 393, 396, 399, 400, 401, 406, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 491, 496, 504, 512, 513, 516, 517, 518, 524, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 617, 618, 619, 622, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 676, 677, 679, 680, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 698, 699, 702, 706, 707, 715, 716, 725, 726, 727, 732, 734, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 756, 768, 769, 781, 782, 788, 789, 790, 791, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 832, 833, 834, 835, 838, 839, 840, 841, 843, 848, 852, 853, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 892, 896, 897, 898, 902, 904, 905, 908, 912, 913, 914, 915, 920, 921, 923, 924, 925, 926, 930, 940, 941, 942, 943, 945, 946, 947, 948, 949, 956, 960, 963, 964, 965, 967, 968, 969, 970, 973, 974, 975, 981, 982, 985, 986, 987, 988, 990, 992, 993, 994, 995, 1002, 1003, 1006, 1007, 1010, 1014, 1019, 1023, 1024, 1025, 1026, 1028, 1031, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1053], "40": [2, 13, 52, 64, 76, 88, 93, 104, 126, 132, 149, 181, 188, 189, 191, 214, 216, 220, 222, 234, 236, 247, 260, 289, 295, 301, 307, 325, 326, 336, 337, 339, 341, 343, 344, 359, 366, 374, 413, 446, 495, 517, 518, 799, 844, 845, 849, 861, 862, 981, 993, 1002, 1035, 1036], "400": [3, 24, 48, 93, 124, 126, 129, 134, 149, 162, 203, 223, 271, 300, 351, 374, 414, 495, 1014, 1028], "4000": [57, 124, 246], "400000e": 215, "4017": 524, "4018260": 322, "402": 263, "402344": 385, "4025": 1040, "403": [263, 351], "404": 215, "40597": 281, "406": [689, 693, 989], "4066": 5, "407": [146, 376], "40842387": 10, "40887718": 55, "409": 351, "40945": 69, "4096": [93, 374, 414, 495], "40966": 373, "409717": 262, "41": [11, 146, 197, 236, 313, 359, 374, 376, 457, 469, 481, 492, 621, 624, 635, 646, 647, 652, 658, 660, 661, 662, 664, 681, 685, 686, 699, 781, 839, 994, 998], "41075698": 415, "41076071": 415, "41082": 3, "411": [167, 329, 411, 421, 473, 533], "4110": 476, "41187": 154, "412": [76, 81, 496, 988, 1014], "412021": 122, "41214": [197, 215], "41215": 215, "412304": 186, "414": [215, 410, 726, 756, 880, 892, 992], "41421356": [763, 769, 995], "4143": 391, "414810": 240, "414912": 125, "416": [307, 313, 739, 992, 1014], "416010": 320, "41666667": 750, "41691605": 103, "417": 281, "41726413": 103, "418": [168, 188, 216, 348, 1014], "41888636": 662, "419": [323, 351, 616], "4194": 376, "42": [2, 3, 4, 11, 18, 22, 23, 24, 25, 29, 42, 44, 54, 76, 83, 95, 100, 109, 116, 117, 119, 120, 122, 123, 125, 126, 130, 142, 143, 162, 167, 169, 170, 173, 176, 186, 189, 191, 192, 199, 203, 204, 205, 211, 212, 214, 218, 219, 220, 226, 231, 232, 233, 236, 239, 253, 258, 260, 263, 273, 276, 283, 289, 290, 291, 299, 305, 306, 307, 308, 310, 312, 315, 317, 319, 328, 336, 338, 350, 351, 361, 366, 381, 384, 385, 393, 399, 409, 413, 416, 417, 420, 437, 444, 478, 488, 492, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 527, 529, 531, 537, 544, 545, 546, 557, 558, 565, 566, 567, 568, 570, 605, 606, 607, 608, 609, 677, 694, 695, 696, 760, 792, 793, 797, 799, 802, 822, 828, 830, 844, 845, 849, 853, 856, 896, 897, 899, 900, 901, 911, 914, 915, 927, 940, 957, 961, 995, 1002, 1014, 1024, 1028, 1031, 1032, 1035], "420": [352, 353, 1014], "42074": 311, "420mb": 350, "421": [68, 74, 198, 216, 726, 756, 992, 1014], "421087": 262, "42165": 119, "422": [130, 134, 355, 360, 593, 594, 726, 756, 992, 1014], "4226193151": 11, "4232": [2, 11], "423641": 186, "424": 215, "4242": [2, 11], "42425183539869404": 316, "425": [219, 351, 615], "4254": [146, 376], "4260": [749, 752], "427": [146, 376, 506, 507, 583, 584, 587], "427329": 240, "4285714285714286": 992, "429": [110, 134, 278, 1014], "4294": 1041, "43": [70, 74, 146, 156, 171, 194, 230, 259, 283, 376, 384, 800, 814, 885, 1014], "430": [421, 533], "43026679e": 1027, "431": 376, "4310090": 769, "432": [259, 411], "4325": 17, "433": 376, "43348936": 212, "4337": 988, "434": [344, 348, 1014], "43475": 878, "436": [153, 159, 230, 1014], "4362": 1040, "437362": 186, "438": [167, 1000], "43847489": 103, "43873": 352, "4387766": 11, "4394": 1043, "44": [2, 154, 167, 168, 181, 278, 287, 479, 781, 885, 905, 908, 975, 992, 999, 1035], "440": 167, "440409": 186, "4406": 473, "4409": [2, 11], "441": [4, 14, 1014], "44139186": 301, "4415": 17, "442": [124, 134, 146, 162, 376, 501, 1014, 1026], "4425765": [653, 663, 684], "44300751539296973": 11, "44300752": 11, "443238": 262, "44373091": 993, "44381023": 201, "44412786": 536, "445": [157, 253, 1000], "445978": 186, "446": [351, 726, 756, 992], "447": 351, "447268": 52, "4472869": 103, "4474": 385, "4478": 1040, "448": 283, "4486": 544, "449": [3, 414, 535], "4496": [2, 11], "4497": 1013, "45": [38, 62, 71, 83, 125, 142, 154, 169, 186, 197, 215, 266, 270, 271, 326, 338, 413, 416, 417, 564, 565, 627, 634, 646, 647, 652, 660, 661, 662, 681, 682, 683, 788, 797, 908, 982, 992, 1000, 1011, 1024, 1031, 1035, 1038], "4500": 212, "45070924": 666, "451": 646, "45192": 136, "451933": 52, "452": [18, 20, 40, 66, 1014], "453": [162, 163, 1014], "45333333": 359, "454": [156, 159, 1014], "4544": 2, "455": [153, 155, 311], "4550": 373, "456": [3, 414, 535], "45612256": 660, "45663524": 660, "457": [52, 66, 615, 1014], "4576": 835, "458": [249, 250, 1014], "458333315172": 11, "459": [409, 442], "459074": 240, "46": [2, 11, 51, 90, 197, 236, 267, 361, 385, 593, 594, 682, 683, 716, 822, 908, 913, 1002, 1031], "46033": 496, "46043": 496, "46081961": 993, "461": 385, "462234": 240, "463": [215, 278], "463088": 11, "46428631511221642143151251232633109": 11, "465660": 23, "465730": 186, "466": [63, 66, 999, 1014], "4666": 634, "46779927": 10, "468": 56, "46858513287221654": 321, "46874778": [653, 663, 684], "469": 56, "4690": 1028, "46915237": [653, 663, 684], "4694": 524, "469474": 186, "46958558": 661, "4697": 45, "47": [2, 158, 193, 236, 241, 374, 493, 494, 535, 541, 1014], "471": 376, "47140": 409, "47236": [374, 497], "4733": 123, "47330339": 417, "4738": 1040, "475": 109, "476": [80, 81, 1014], "47668": 352, "477": [25, 26, 158, 1014], "478": [347, 348, 1014], "478522": 186, "47885": 352, "4792": 215, "47922861": 240, "479229": 240, "47928": 352, "4794": 186, "4795": 186, "4796": 186, "4798": 186, "47985": 496, "47987268e": 178, "4799": 186, "48": [2, 11, 43, 83, 99, 125, 154, 240, 311, 376, 385, 409, 510, 597, 699, 746, 828, 839, 981, 994, 1002, 1031], "480": [181, 351], "4801": 186, "4802": 186, "4803": 186, "4804": 186, "4805": 186, "4806": 186, "4807": 186, "4809": [186, 262], "481": 158, "4810": 186, "4812": 5, "4815": 186, "482": [145, 147, 259, 276, 1014], "48204257": 993, "4828": 186, "483": 648, "4830": 186, "4831": [186, 655], "4832": 186, "4836": 186, "484": 158, "4841": 186, "484109": 186, "4846": 186, "485": [326, 331, 696, 1014], "4852": 186, "4855": 186, "4857596147013469": 58, "486": 199, "4860": 186, "4866": 186, "4867": 186, "4869": 186, "487": [11, 267, 276, 724, 1014], "4872": 186, "48736655": 667, "4874": 186, "4876": 186, "488": [138, 139, 1014], "4880": 186, "4881": [186, 1040], "48841": 496, "48842": 496, "4885": 186, "48858": 385, "4888": 186, "489": [129, 134, 1014], "4891": 186, "48938813e": 178, "4894": 186, "48979592": 449, "4898431": [374, 492], "49": [2, 74, 146, 189, 201, 236, 373, 374, 376, 384, 409, 450, 457, 713, 726, 756, 764, 793, 797, 800, 885, 992, 1002, 1038], "491": [134, 146, 696], "492": [253, 643, 985, 1026], "4923": 649, "4928": 186, "493": [643, 904, 985], "4936": 186, "4939": 1042, "494": 232, "494021": 492, "4948": 5, "495": [158, 159, 1014], "4951": 653, "495761": 385, "49665188": 201, "4967": 524, "497": [271, 276, 1014], "4976": 597, "498": [121, 134, 168, 1014], "499": [146, 376, 385], "4995": 1041, "49999993": 988, "4daf4a": [42, 60], "4dbd33": 90, "4e": 219, "4e9a06": [57, 62], "4eacc5": [57, 62], "4f": [5, 6, 17, 112, 121, 123, 212, 213, 215, 310, 911], "4gb": 1028, "4i": 48, "4th": [146, 157, 376], "4x": [385, 1050], "4x10": 417, "4x1048576": 417, "4x11": 287, "4x4": [376, 414, 417], "4x9": 417, "5": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 19, 22, 23, 24, 25, 29, 30, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 68, 69, 71, 72, 73, 77, 78, 79, 80, 81, 83, 84, 90, 93, 94, 95, 96, 97, 99, 100, 102, 107, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136, 138, 141, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 171, 173, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 203, 205, 208, 209, 210, 211, 212, 213, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 374, 376, 377, 379, 381, 384, 385, 387, 391, 392, 393, 396, 400, 401, 402, 406, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 424, 437, 438, 439, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 469, 472, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 504, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 528, 531, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 552, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 582, 592, 593, 594, 597, 602, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 641, 643, 646, 647, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 688, 689, 691, 692, 693, 695, 696, 699, 703, 705, 707, 709, 712, 713, 720, 721, 722, 723, 724, 726, 727, 728, 730, 732, 735, 738, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 769, 770, 781, 782, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 898, 904, 905, 906, 907, 908, 909, 910, 912, 914, 920, 921, 924, 925, 929, 930, 939, 940, 941, 942, 943, 945, 946, 947, 955, 956, 960, 961, 963, 964, 967, 968, 969, 970, 971, 972, 973, 981, 982, 984, 987, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1015, 1019, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1049, 1050, 1051, 1054], "50": [0, 2, 5, 8, 11, 13, 22, 30, 31, 36, 48, 50, 57, 58, 63, 64, 68, 69, 83, 90, 93, 96, 102, 109, 112, 115, 122, 125, 128, 129, 146, 150, 152, 153, 154, 155, 166, 167, 168, 177, 181, 192, 197, 200, 204, 205, 209, 211, 213, 215, 218, 222, 223, 229, 230, 232, 240, 253, 254, 259, 261, 262, 272, 283, 302, 305, 309, 317, 319, 326, 328, 330, 336, 344, 351, 374, 376, 379, 384, 413, 416, 417, 418, 421, 442, 473, 479, 480, 500, 504, 521, 523, 526, 533, 539, 544, 553, 554, 569, 593, 594, 606, 608, 609, 615, 617, 658, 659, 666, 667, 668, 670, 676, 677, 678, 692, 713, 792, 800, 814, 833, 853, 904, 913, 987, 988, 992, 993, 995, 998, 1002, 1014, 1016, 1035, 1052], "500": [8, 42, 48, 55, 58, 59, 61, 64, 66, 83, 84, 100, 102, 113, 115, 123, 145, 149, 173, 210, 211, 219, 237, 238, 243, 244, 248, 253, 259, 262, 272, 273, 283, 289, 295, 309, 316, 321, 322, 342, 347, 365, 416, 422, 469, 470, 474, 475, 476, 481, 482, 483, 484, 611, 613, 614, 616, 621, 624, 625, 650, 651, 654, 655, 656, 680, 682, 683, 862, 981, 1007, 1014], "5000": [54, 183, 212, 213, 215, 317, 885], "50000": 22, "500000": 300, "5000000": 15, "50000000": 152, "50000013": 988, "5000083": 11, "500526": 125, "500x500": 541, "5012": 1041, "5016": [411, 422, 475], "5025616": 11, "5029": [411, 422, 475], "503452": 300, "5036": 1042, "504185": 300, "50447799": 993, "505": 829, "507": [84, 85, 410, 1014], "50755672": 466, "507943": 262, "508": 1026, "5082": 1013, "50931238": 322, "50941682": 993, "50_000": [312, 351], "51": [22, 40, 66, 154, 215, 278, 283, 409, 410, 766, 776, 781, 988, 1031], "510": [215, 216, 1014, 1026], "51082562": 590, "512": 196, "512281": 248, "512595": 300, "51292546": 612, "513": [853, 995], "513034": 300, "5131": [5, 1040], "51341712": 990, "514": 352, "5141": 1041, "51462041": 849, "5149": 5, "515": 2, "515390": 385, "5166": 673, "5166646": 764, "517": [6, 452, 462, 1026], "517272": 248, "5182": 1040, "5186": 1040, "5193": 5, "51958": 154, "51961675": 1026, "51963999": 78, "52": [2, 115, 134, 154, 197, 224, 531, 633, 797, 940, 1014, 1035], "520": [628, 853, 982, 995], "52003279": 993, "5208": 186, "521": [70, 74, 1014], "52106591": 103, "5211": 1042, "5212": 186, "522": [46, 66, 905, 1014], "5224167": 11, "5229": 1042, "523": 524, "524": 11, "5243": 417, "52433293": 417, "5244": 186, "525": [439, 628, 982], "5251": 1041, "526": 904, "526599": 186, "527": [98, 104, 1014], "5279": 1042, "5282": 1040, "52875032": 661, "5289": 5, "529": [214, 216, 316, 323, 1014], "5291": 1041, "5295": 1042, "52955942": 849, "5299": 1041, "53": [2, 51, 236, 409, 416, 535, 541, 546, 792, 793], "53060544": 1026, "531": [127, 134, 317, 323, 1014], "5315170": 11, "5316": 350, "53284267": 240, "532843": 240, "533": [167, 219, 224, 275, 276, 1014], "5337": 1040, "534": 167, "5355": 1040, "5359": 1042, "536": [154, 283], "5360": 1040, "537": [199, 216, 1014], "53777511": 11, "53844117956": 764, "5395559": 212, "53959628e": 178, "54": [11, 90, 96, 146, 173, 181, 197, 200, 236, 374, 376, 409, 491, 1036, 1037], "54035582": 764, "541": [167, 171, 237, 241, 452, 462, 1014], "5415": 989, "5417": 215, "542": [136, 139, 146, 376, 1014], "5420": 544, "542052": 186, "54209": 136, "5425": 524, "543": [53, 66, 181, 1014], "5431": 1040, "543841": 186, "54434690031882": 71, "54488318": 388, "5460": 1041, "546068": 240, "54606834": 240, "54666667": 359, "5467523": 11, "5469": 376, "548": 352, "5488135": 388, "549": [24, 159], "5495": 1040, "54980": 541, "55": [40, 167, 173, 192, 197, 215, 220, 326, 384, 409, 413, 491, 597, 800, 806, 814, 828, 992, 1035], "5500": [320, 688, 989], "550213": 186, "551": 147, "55102041": 449, "5515": 746, "552": 992, "55212743": 361, "5523": 1013, "55249": 597, "55390036": 103, "554": [205, 213, 301], "5540": 1041, "55422893": 417, "555": 716, "5555555555555556": 267, "5557": 262, "5558": 5, "556": 168, "55800226": 212, "559": 616, "5591": [689, 693, 989], "55968825": 646, "56": [2, 206, 215, 230, 329, 385, 646, 647, 652, 660, 661, 662, 681, 713, 735, 992, 1002, 1031, 1035], "560": [197, 517, 518], "561": 409, "561464362648773": 58, "564": 197, "56479934": 361, "56485654": 103, "565": 259, "566": 197, "569": [146, 328, 376, 500, 592, 595, 596, 598], "5697": 1042, "56b4e9": 243, "57": [11, 149, 167, 213, 268, 302, 376, 377, 396, 400, 401, 410, 705, 761, 781, 837, 992, 1002, 1035], "570": [146, 376, 1026], "570655": 186, "5713": 663, "57142857": 721, "572": [161, 163, 1014], "573": [50, 66, 417, 1014], "5732": 1042, "57320793": 417, "573491": 186, "574": [56, 534, 541], "5748": 494, "5749": [374, 493, 494], "575": [5, 14, 68, 197, 250, 1014], "5762": 1041, "576989": 240, "577": [146, 376], "578": 352, "579": 524, "58": [64, 77, 376, 411, 422, 475, 607, 764, 1002, 1024], "580": [351, 844, 845], "5804131": 103, "5805": 1041, "5807": 995, "581": 173, "581012": [374, 491], "5814": 1042, "58149261": 417, "58195950e": 178, "582": 905, "5828": [374, 493, 494], "583": [409, 1026], "5833": [738, 992], "583333315172": 11, "58364548": 990, "585": 1026, "5853": 1013, "5854": 1026, "5855": 1026, "5857": 1040, "5863": 385, "58667835e": 178, "586798": 186, "5871": 679, "5874": 1041, "5882004012129721": 58, "589715": 186, "59": [2, 6, 96, 173, 181, 215, 343, 376, 385, 409, 410, 510, 822, 992, 1031, 1035], "59122734": 667, "592": [611, 614, 625, 999], "592373": 320, "5925110": 11, "5929": 1041, "593": 113, "594": [158, 197], "594754": 186, "59489497": 212, "595": [171, 197], "5956": 1043, "596": 716, "5960": 212, "5963": 1045, "597": 197, "598": [56, 100, 150, 541], "5981": 544, "598533": 186, "599": 680, "5991": 1042, "5_000": 173, "5a": 884, "5d": 6, "5e": [3, 93, 182, 595, 596, 598], "5e5": 197, "5f": [136, 319], "5m": 15, "5n_": 79, "5th": [11, 122, 125, 157, 409], "5x": 1052, "6": [2, 6, 7, 8, 9, 10, 11, 17, 24, 25, 29, 30, 31, 38, 42, 44, 47, 48, 50, 54, 55, 58, 59, 60, 61, 62, 63, 65, 71, 72, 73, 74, 76, 77, 78, 80, 83, 88, 93, 95, 102, 110, 122, 123, 125, 127, 129, 136, 141, 146, 147, 149, 152, 154, 156, 157, 161, 162, 167, 168, 170, 173, 176, 177, 178, 181, 186, 190, 195, 197, 198, 199, 201, 211, 215, 218, 219, 222, 224, 226, 229, 230, 234, 237, 238, 243, 244, 245, 246, 248, 249, 252, 253, 254, 258, 259, 260, 261, 262, 264, 268, 269, 270, 271, 272, 275, 281, 285, 288, 296, 299, 301, 302, 305, 307, 309, 310, 312, 315, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 338, 339, 341, 343, 345, 347, 350, 351, 352, 358, 361, 373, 374, 376, 377, 379, 384, 385, 392, 396, 400, 401, 406, 409, 410, 413, 414, 416, 417, 418, 424, 441, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 482, 483, 484, 485, 490, 496, 505, 517, 524, 527, 530, 537, 538, 539, 540, 541, 545, 546, 547, 553, 561, 562, 563, 567, 568, 569, 570, 593, 594, 604, 605, 606, 608, 611, 614, 615, 625, 627, 628, 630, 636, 637, 644, 645, 670, 676, 677, 689, 693, 699, 721, 728, 738, 742, 745, 746, 750, 751, 753, 769, 785, 788, 790, 797, 798, 799, 801, 802, 807, 809, 810, 812, 817, 818, 821, 825, 826, 827, 828, 830, 839, 840, 841, 843, 844, 845, 852, 854, 855, 856, 871, 872, 874, 877, 879, 882, 883, 887, 888, 919, 920, 924, 925, 940, 941, 942, 944, 946, 947, 955, 967, 970, 978, 981, 982, 986, 988, 989, 992, 1002, 1003, 1006, 1007, 1008, 1010, 1016, 1019, 1023, 1024, 1026, 1031, 1033, 1036, 1037, 1038, 1041, 1043, 1048, 1052, 1053], "60": [2, 4, 6, 57, 71, 80, 197, 209, 215, 218, 219, 240, 246, 267, 272, 326, 341, 350, 373, 409, 413, 450, 457, 713, 800, 992, 1002, 1024, 1035, 1038], "600": [24, 48, 56, 120, 129, 130, 374, 680], "6000": [302, 627], "601": [246, 250, 1014], "601052": 300, "601707": 186, "602": 168, "60244657": 849, "60276338": 388, "603": [61, 360, 448], "604": [100, 541], "606": [131, 134, 613, 834, 993, 1014], "60648906": 1026, "607275806426107": 149, "607752": 122, "607mb": 350, "608": [176, 216, 1014], "60809415": 662, "60834549": 55, "60836363e": 178, "609": [111, 134, 158, 385, 1014], "61": [6, 79, 168, 215, 373, 376, 385, 410, 458, 541, 560, 646, 647, 652, 660, 661, 662, 681, 713, 822, 942], "610": [287, 297, 1014], "6101": 1042, "611": [11, 14, 257, 259, 541, 1014], "6114": 827, "6114326": 197, "6114327": 197, "6114328": 197, "6114329": 197, "6114330": 197, "611676": 186, "612": [146, 147, 790, 1014], "6121": 1041, "6126": 1042, "613": [288, 297, 1014], "6147": 1040, "615": [33, 46], "615373": 167, "616": [841, 994, 1002], "61611719": 152, "617": [56, 262, 409, 769], "617050e": 215, "6173": 1041, "617715": 122, "6178": 1041, "618": [56, 257], "6181": 1042, "6182": 1041, "618263": 186, "619": [61, 448], "619052": 374, "61958": 154, "6196": [262, 1040], "6198": 746, "62": [11, 168, 173, 215, 252, 320, 326, 361, 374, 493, 494, 844, 845, 1031, 1038], "620": 498, "621": [56, 66, 769, 1014], "621645": 186, "622": [56, 91, 541], "62241605": 181, "622811": 122, "623": [841, 994], "6231": 1013, "6237": 215, "624": 999, "625": [51, 197, 618, 708], "6250": 1042, "6258": 1040, "626": [47, 183], "6261": 1044, "626286": 186, "62717609": 212, "62722912": 11, "62745778": 993, "628": 351, "6282": 1041, "6284": 1013, "6288": 1042, "6291456": 51, "63": [4, 220, 253, 376, 416, 557, 558, 565, 566, 646, 647, 652, 660, 661, 662, 681, 699, 726, 800, 814, 822, 914, 915, 992], "630": 724, "63035731": 417, "630382": 320, "631": [114, 134, 1014], "6312": 11, "632": [218, 224, 311, 1014], "6323": 1013, "633": [268, 276, 1014], "6331": 2, "6332": 2, "63327171": 181, "6333": 2, "6334": 2, "6335": 2, "6338211367102258": 312, "63394388": 181, "635": [2, 302, 303, 616, 1014], "636": [181, 385], "63667341": 55, "6371000": 764, "6374": 1043, "6375861597263857": 939, "638": [351, 352, 385], "638768": 52, "638843": 300, "63931533": 1026, "63bit": 1046, "64": [2, 11, 30, 46, 51, 56, 87, 93, 154, 167, 219, 230, 231, 235, 257, 268, 287, 292, 350, 356, 365, 366, 376, 377, 385, 393, 410, 414, 421, 495, 498, 502, 599, 600, 646, 658, 688, 689, 690, 691, 693, 905, 995, 1025, 1031, 1035, 1037, 1043, 1044, 1047, 1048, 1049, 1052], "640": [406, 490, 506, 507, 583, 584, 587, 981], "640000e": 215, "640770e": 215, "640880e": 215, "641": [42, 66, 1014], "64185414": 666, "642": [122, 134, 286, 297, 1014], "64236448": 536, "6424": 1013, "6425": 1013, "643": [37, 66, 257, 1014], "644": 329, "6440": 212, "64447187": 51, "645": 56, "6451": 1013, "6452": 1043, "646": 157, "6463": 1044, "647": 56, "6472": 1041, "6476": 524, "647689": 186, "648026": 122, "649": [231, 241, 1014], "6497": 1041, "64bit": [396, 1035], "64x64": [93, 374, 414], "65": [2, 31, 168, 197, 268, 311, 409, 439, 502, 517, 597, 699, 741, 792, 793, 822, 999, 1024, 1035, 1036, 1037], "650": 406, "6505186632729437": 58, "6507": 1042, "651": 385, "652": 351, "652739": 186, "653": [308, 313, 385, 611, 614, 625, 1014], "6545": 1047, "656": 374, "6567": 851, "657": [168, 171, 240, 259, 1014], "6572": 851, "6573": 1042, "65799352e": 178, "658": 84, "6586": 1041, "659": [158, 201, 216, 1014], "6599": 1013, "65e": 183, "66": [2, 222, 311, 376, 409, 426, 461, 532, 632, 712, 783, 784, 795, 883, 891, 974, 992, 1004], "660": 240, "660797": 240, "661086": 262, "6624": 1047, "662409": 186, "663": [898, 1000, 1004], "664": [146, 376], "665": 2, "6650": 11, "6651": 1041, "666": [152, 409, 846, 982], "6660": 1041, "6666": [738, 992, 1041], "66666667": [729, 782, 854, 1002], "666667315174": 11, "6667": 1041, "66670169e": 178, "667": [720, 740, 992], "667219": 122, "668": 253, "6689": 1043, "6691": 1041, "6697": 1041, "669930e": 215, "67": [64, 167, 215, 376, 498, 516, 517, 518, 627, 667, 713, 814, 982, 992, 1006, 1031, 1035], "670": [199, 253], "671": 1004, "6715": 1013, "67251877": 666, "673": [84, 155, 159, 351, 385, 1014], "67443065": 103, "67451144e": 178, "675": 149, "675318": 52, "676": 669, "6764": 1041, "678008": 197, "678009": 197, "678010": 197, "678011": 197, "678012": 197, "678013": [197, 215], "678359": 186, "679": [199, 904], "68": [2, 6, 158, 188, 302, 325, 409, 478, 535, 541, 590, 685, 686, 1035], "681": [56, 385], "6817": 1041, "682": 385, "6821": 6, "682880e": 215, "683": [265, 276, 1014], "683980e": 215, "684": [69, 78], "6846": 1041, "6848": 1044, "685": [720, 740, 992], "6852": 259, "6860": 121, "687": 1004, "6875": 716, "688": [31, 33, 78, 1014], "689": 4, "689015": 300, "689143": 300, "689751": 300, "69": [4, 6, 188, 253, 310, 326, 409, 471, 472, 607, 608, 756, 992, 1002, 1026], "690": 199, "6902": 1041, "691": 721, "6913": 1041, "692": 109, "692270e": 215, "692470": 300, "6929": 1013, "692901": 122, "693": [272, 276, 992, 1014], "6931": 868, "69314718": [419, 612, 1002], "695": [79, 81, 183, 257, 1014], "69513": 56, "6954": 1041, "69545": 56, "695740e": 215, "69735": 56, "698": 56, "6984743": 152, "69892343": 201, "699691": 374, "6d": 6, "6f": [15, 97, 264, 737, 795], "6ppm": 154, "6th": 157, "6x3": 417, "7": [2, 3, 4, 6, 10, 11, 12, 13, 17, 24, 28, 30, 32, 37, 40, 42, 44, 51, 52, 53, 54, 58, 62, 63, 65, 69, 70, 72, 78, 80, 96, 109, 112, 122, 124, 125, 126, 130, 131, 146, 158, 166, 167, 168, 170, 173, 178, 179, 196, 197, 198, 199, 204, 213, 215, 218, 226, 230, 231, 232, 238, 240, 243, 244, 247, 248, 250, 253, 254, 259, 263, 265, 266, 270, 272, 278, 281, 283, 285, 288, 289, 291, 301, 302, 305, 309, 315, 318, 319, 320, 322, 325, 326, 328, 329, 335, 342, 345, 346, 351, 352, 361, 374, 376, 377, 383, 384, 385, 396, 400, 401, 406, 413, 414, 416, 417, 418, 420, 421, 424, 439, 444, 445, 448, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 467, 471, 472, 482, 483, 484, 485, 491, 496, 498, 532, 533, 534, 535, 536, 538, 540, 544, 561, 562, 588, 591, 600, 605, 606, 627, 628, 630, 637, 646, 647, 649, 652, 658, 659, 660, 661, 662, 673, 675, 681, 682, 683, 692, 699, 707, 709, 721, 723, 724, 726, 728, 744, 745, 746, 750, 751, 753, 782, 785, 790, 791, 794, 797, 799, 800, 801, 802, 803, 804, 807, 810, 814, 817, 818, 821, 827, 830, 834, 844, 845, 853, 862, 863, 864, 869, 876, 877, 899, 900, 940, 941, 944, 945, 947, 956, 961, 981, 982, 987, 988, 990, 992, 993, 995, 996, 998, 1002, 1006, 1007, 1019, 1023, 1026, 1031, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1048, 1053], "70": [2, 4, 9, 64, 69, 71, 109, 168, 236, 243, 259, 326, 374, 376, 413, 493, 494, 682, 683, 713, 726, 756, 800, 814, 891, 981, 1002, 1024], "700": [48, 253, 317], "7000": 215, "701": 56, "702266": 186, "703": [406, 513], "70359377": 181, "704": 350, "70432034": 83, "7049": 1041, "7049787496083262": 58, "706026": 186, "707": [85, 880, 892], "7071": 1043, "70763101": 51, "708": [2, 14, 538, 540, 547, 750, 1014], "70814003": 361, "7083": 992, "708333315174": 11, "7089": 1042, "709": 260, "70x": 1052, "71": [2, 90, 146, 201, 215, 376, 510, 730, 736, 766, 776, 992, 1026, 1031, 1037], "710": [310, 313, 406, 1014], "7101": 1041, "711": 230, "714": 317, "71518937": 388, "7152": 1041, "7154": 1041, "715413": 122, "7159": 1041, "716": [96, 104, 513, 1014], "7187": 1041, "718747": 186, "719": [197, 216, 257, 276, 289, 297, 1014], "7194": 1041, "72": [2, 4, 5, 11, 115, 152, 384, 822, 828], "7200": 649, "721": [538, 540, 547], "722128e": 215, "72295655": 83, "723": [56, 232, 292], "723665": 273, "7239": 1041, "724": [297, 1014], "7242": 1013, "724702": 262, "7248": 1041, "7256": 635, "726": 1000, "7260": 1041, "7261": 1041, "726573": 167, "72667194": 993, "727": 352, "7271482064048191": 267, "72850319": 993, "7295": 1041, "7298221281347033": 2, "73": [90, 111, 263, 326, 392, 481, 736, 800, 814, 850, 913, 1002, 1024, 1035, 1037], "7301": 1041, "730119e": 215, "731249e": 215, "7313": 5, "73153": 385, "732": 199, "7321432711315247203224138160467097": 11, "7323": 1041, "7325": 1041, "732913": 273, "733": 283, "7331": 1042, "7332": 908, "7337046907": 158, "7345": 317, "7350": 1041, "7353": 1041, "7356": 1042, "7365": 1042, "73654189": 11, "73698041": 1026, "737": [232, 524], "7376": 1042, "7382": 1013, "7387": 476, "7388": 1042, "739865e": 215, "739950": 273, "74": [2, 17, 213, 325, 326, 376, 590, 694, 800, 814, 883, 1031], "7411": [469, 474, 1041], "7419": 1041, "743": [257, 1026], "74310541": 152, "7436926291700353": 192, "744": [257, 283], "744029": 273, "744042e": 215, "7441": 1042, "744497e": 215, "74495357": 181, "745": 146, "7459": 1042, "746": [311, 313, 376, 1014], "7464": 1042, "746492": 259, "748": [350, 385], "7490": [1041, 1042], "75": [2, 4, 5, 6, 8, 11, 31, 42, 53, 80, 112, 143, 156, 157, 162, 167, 173, 176, 179, 188, 204, 215, 240, 245, 246, 253, 259, 268, 272, 288, 305, 318, 347, 350, 361, 449, 501, 551, 637, 658, 694, 706, 712, 734, 739, 740, 745, 753, 756, 794, 800, 882, 890, 894, 901, 917, 929, 930, 973, 992, 994, 1002, 1008, 1011, 1024, 1037], "750": [47, 53, 117, 259], "75000": 197, "7501": 1042, "750348": 122, "750389": 186, "7506": 1042, "752": [14, 178, 216, 350, 1014], "752470": 273, "752867": 186, "753": [36, 235, 241, 350, 1014], "7532": 489, "7533": [422, 475, 1042], "754": 352, "75474165": 993, "7548": 1042, "7548291": 322, "7553": 1041, "7565": 1042, "756687e": 215, "7567": 1042, "756746e": 215, "7569": 470, "757": [60, 66, 146, 257, 283, 376, 1014], "7573": 1042, "75747153": 201, "7578": [262, 1042], "75788833": 143, "757915": 273, "758": 241, "759": [243, 250, 283, 1014], "7593": 1041, "7594": 1041, "75949622": 201, "75th": [236, 882], "76": [2, 6, 173, 197, 326, 350, 361, 376, 385, 777, 781, 864, 1026, 1031], "760": [2, 125], "7608": 1013, "76195467e": 178, "762": 350, "7621951219512195": 240, "7632": 1041, "7638": 988, "764": [721, 992], "7646": 1013, "764779": 186, "765012": 320, "7655": 1042, "765671": 186, "7660": 1041, "7661": 1042, "7668": 1043, "7674": [524, 1042], "767498": 122, "7676": 1041, "768": [51, 291, 297, 1014], "7680": 1041, "76823": 4, "7685": 1042, "769": [203, 216, 283, 1014], "76995": 374, "77": [2, 4, 6, 42, 146, 173, 268, 326, 373, 376, 534, 707, 736, 775, 822, 1031], "770": [329, 331, 1014], "77000": 197, "7702": 1042, "770926": 273, "772": [350, 723], "7721": 1042, "7723": 1042, "7724": 1041, "773": [259, 329, 648, 842], "77310": 374, "7732": 1041, "77322639": 83, "7738": 1043, "7739": 1042, "774": [222, 224, 1014], "77426368": 10, "775": 17, "7750": 1041, "775047": 676, "775151": 676, "7756": 1041, "77630514": 417, "7768366": 990, "777": 385, "7771": 1042, "77764": 404, "77777215": 83, "7786": 1041, "779": 350, "7794": 1042, "779751": 273, "7798": 908, "7799": 1041, "78": [2, 6, 44, 51, 90, 173, 215, 268, 307, 326, 493, 494, 646, 647, 652, 653, 655, 660, 661, 662, 664, 665, 681, 685, 686, 800, 806, 822, 828, 992, 1013, 1024], "780": 257, "781": [278, 279, 1014], "7812": 1042, "781265": [374, 497], "7814": 1042, "7816": 11, "7819": [409, 1042], "7823": [1042, 1043], "7825": 1042, "7825594": 10, "7826": 376, "782755": 23, "783": [10, 14, 1014], "7831": 350, "783149": 69, "7833": 475, "783392": 259, "7838": 1042, "784": 301, "7840": 52, "7849": 1042, "785": [230, 338, 348, 1014], "785063": 69, "78571427112143152472031331383346104": 11, "786": [51, 69], "786015": 69, "7863": 1042, "786432": 51, "78681467": 51, "787": [205, 216, 253, 1014], "7872": 1042, "7880": 1042, "7885988040212891": 316, "7887550": 11, "788808": 320, "789": [142, 301, 303, 416, 1014], "7894": [898, 1004], "79": [2, 4, 6, 28, 30, 78, 79, 96, 146, 173, 302, 326, 376, 384, 411, 474, 524, 597, 694, 822, 842, 1035, 1037], "790": [2, 68], "7906": [622, 649], "79064206": 610, "79084103": 361, "791": [158, 356, 360, 1014], "7914": 1042, "791667315161908911936472223112": 11, "79269019073225": 287, "7927845601690917": 312, "7929": [351, 1042], "7943": 1045, "7944": 1042, "7946": 1041, "795": 648, "7954": 1042, "796": 122, "7970": 1042, "7971": 663, "7972": 554, "79769376": 83, "798": [69, 149, 159, 416, 1014], "7983": 1042, "798301": 240, "7986": 1042, "7986499491396727": 149, "798982054": 992, "799": [158, 351], "7990": 1042, "7998": 1042, "7_qbz5n2kfra8p0": 396, "8": [2, 3, 4, 5, 6, 7, 10, 11, 12, 17, 23, 24, 25, 29, 30, 32, 35, 41, 42, 43, 46, 48, 51, 53, 58, 60, 62, 63, 68, 70, 72, 73, 79, 83, 88, 89, 90, 93, 94, 96, 97, 98, 101, 103, 109, 112, 114, 115, 119, 121, 122, 124, 128, 131, 132, 136, 145, 146, 150, 152, 154, 155, 157, 158, 162, 166, 167, 168, 170, 173, 176, 177, 182, 183, 188, 191, 197, 198, 201, 205, 207, 213, 215, 218, 219, 220, 222, 223, 227, 231, 232, 234, 238, 239, 240, 243, 244, 245, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 269, 270, 278, 281, 285, 287, 291, 295, 299, 301, 302, 305, 307, 308, 309, 310, 311, 313, 315, 320, 323, 325, 326, 327, 329, 330, 335, 338, 342, 343, 344, 345, 346, 350, 351, 352, 358, 361, 366, 373, 374, 376, 377, 379, 384, 385, 396, 402, 406, 409, 413, 414, 416, 417, 418, 420, 422, 439, 443, 444, 447, 449, 450, 452, 455, 456, 457, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 483, 484, 485, 487, 490, 496, 498, 502, 503, 514, 516, 531, 534, 538, 540, 543, 545, 547, 549, 550, 555, 556, 565, 570, 582, 588, 589, 590, 591, 604, 605, 628, 629, 636, 637, 648, 658, 670, 676, 689, 692, 693, 694, 695, 699, 702, 706, 707, 709, 710, 715, 721, 727, 728, 729, 741, 745, 746, 750, 751, 753, 782, 783, 785, 788, 789, 790, 791, 795, 797, 799, 801, 802, 807, 810, 817, 818, 821, 822, 823, 830, 831, 833, 842, 844, 845, 851, 861, 862, 863, 869, 876, 883, 885, 906, 909, 939, 940, 941, 945, 961, 967, 968, 969, 970, 971, 972, 973, 981, 982, 988, 989, 990, 992, 995, 1000, 1002, 1006, 1017, 1019, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1036, 1037, 1038, 1042, 1043, 1048, 1049, 1051], "80": [2, 4, 9, 25, 65, 79, 130, 138, 143, 168, 176, 234, 307, 311, 325, 341, 343, 350, 357, 361, 374, 376, 379, 406, 413, 418, 420, 444, 479, 510, 541, 713, 800, 814, 822, 885, 898, 917, 981, 987, 988, 992, 999, 1005, 1008, 1028], "800": [48, 318, 374, 584, 692], "8000": [215, 262, 263], "800000011920929": 359, "8000184677460305": 312, "8002": 1042, "8003": 1043, "8005": 1042, "8006": 1042, "8010": 1042, "801770e": 215, "802": [5, 146, 376], "8022": [5, 393, 473, 1044], "802601": 186, "8028": 1042, "803483": 122, "803882e": 215, "8040": 1041, "804414": [374, 497], "805": 199, "8053": 1042, "8059798": 181, "806": 649, "8061": 1042, "8065": 1042, "8066": 1043, "8068": 1042, "807": [257, 259], "8075": 1043, "8086": [619, 1042], "8087": 1042, "8093": 1042, "8094": 1042, "80956739": 993, "80_000": 114, "81": [2, 48, 240, 325, 326, 409, 699, 761, 788, 800, 814, 831, 992, 993, 995, 1002], "810": [169, 829], "8100": 1013, "8102": 1043, "810596": 374, "8117": 1042, "8120": 1042, "8125": 721, "812526": 186, "8129": 1043, "8133333333333334": 294, "81355169": 417, "8137": 1042, "8139": 1042, "814": [169, 1026], "81458798": 1026, "815": [8, 14, 253, 1014], "815476315189119122164721021826110": 11, "8157": 1013, "8159": 1042, "816": [6, 14, 260, 471, 472, 1014], "8160": 1042, "8174": 1042, "817724": 186, "8181": 1042, "819": 417, "8190": 1043, "81940995": 417, "8198": 1042, "82": [2, 28, 51, 56, 118, 143, 200, 294, 325, 788, 800, 814, 940, 992, 995, 1024, 1035], "820": [2, 11, 844, 845], "820705": 186, "8216": 1044, "822": 790, "822097": 167, "8224": 1042, "8225220806196525": 192, "823": 283, "8243": 1013, "825": 750, "8251": 1042, "8253": 213, "8259": 1042, "827917": 122, "828": 283, "8282": 1042, "829": [173, 174, 351, 1014], "829429": 248, "8295": 1042, "83": [4, 28, 32, 37, 325, 376, 381, 694, 707, 786, 987, 992, 1024, 1028, 1038], "830000": 300, "8306": 1042, "8316": 1042, "832": [169, 416, 555, 556], "83236428": 417, "83281226": [844, 845], "8333": 498, "83333": 764, "833333": 167, "8335": 1042, "834": 329, "834310": 186, "8344": 1042, "8345": 597, "8348": 1028, "835": 20, "8353": 5, "8354": [622, 1042], "83548752": 610, "8355": 1041, "8361": 1043, "836224": 23, "8363": 1042, "837": [300, 303, 1014], "8370": 1013, "8377": 1042, "838": [116, 134, 299, 303, 1014], "83816048": 646, "83822343": 990, "83833": 385, "8387": 835, "839": 680, "84": [2, 4, 6, 68, 143, 188, 215, 307, 325, 361, 376, 416, 417, 788, 814, 992, 1002, 1024], "840": 385, "84000": 197, "840000": 300, "8407": 68, "84077985": 181, "841": 69, "84127814": 666, "84253": 993, "844": [416, 555, 556], "8446": 1042, "8449": 1042, "847": 253, "847222222222214": 192, "8473": 417, "8478": 1044, "848": [146, 254], "8480": 1013, "8481": 1042, "8484": 1043, "84845219": 1026, "848743": 23, "849835": 52, "85": [4, 6, 15, 30, 44, 48, 53, 68, 96, 143, 212, 215, 270, 302, 326, 361, 416, 439, 498, 500, 555, 556, 597, 652, 658, 745, 753, 788, 800, 828, 992, 993, 1024, 1035], "850000": 300, "850031": 186, "8508": 1044, "851": [259, 276], "8512": 1042, "8513": 619, "851348": 23, "8515": [417, 1042], "85151335": 417, "851792": 23, "85253229": 55, "852774": 122, "853174": 23, "853846": 186, "854": 257, "85418642": 361, "8549": 1042, "855": 6, "8554": 1043, "855465": 300, "857": [168, 260, 351], "857400": 23, "858486250088675": 312, "85857475": 103, "8586": 1042, "859007": 23, "8591": 1042, "86": [6, 11, 30, 68, 143, 188, 307, 325, 326, 408, 788, 912, 992, 1024], "860000": 300, "861": [146, 319, 323, 376, 788, 789, 992, 1014], "861053": 23, "861106": 23, "8614": 1013, "861533": 23, "8617": 1043, "861868": 23, "8626621": 322, "8628": 635, "8640": 168, "865400": 23, "866": 1000, "866161": 23, "866571": 23, "867": 72, "8672": 1042, "8676": [620, 1042], "8678": 623, "868": [122, 142], "868443": 9, "869": [260, 276, 1014], "8698": 1042, "87": [4, 30, 68, 158, 257, 326, 597, 667, 777, 788, 800, 822, 880, 892, 992, 1028], "870": [146, 376], "871": [36, 78, 79, 186, 216, 411, 474, 1014], "871277": 23, "871965": 23, "872": [36, 1000], "8720": [556, 1043], "872186": 23, "873": [146, 376], "873724": 23, "87382323": 662, "874": [71, 788, 789, 992], "87421f": 90, "874771": 122, "875": [51, 150, 669], "875315171": 11, "875315173": 11, "875941": 23, "87600388": 152, "8768": 1042, "8769": 1044, "877": [6, 257], "877206": 257, "8773": 1044, "877981": 23, "878": 6, "878051": 186, "878964": 812, "87mb": 350, "88": [2, 4, 30, 188, 201, 236, 258, 302, 325, 326, 355, 374, 376, 379, 408, 411, 473, 646, 647, 652, 660, 661, 662, 681, 864, 940, 1024, 1035], "880": [2, 125, 134, 331, 1014], "880191": 186, "880298": 186, "88089948": 417, "88096009": 103, "882": [35, 66, 259, 1014], "88213": 374, "882561": 259, "883": 47, "883065": 23, "8833": 498, "8835": 1042, "884": 283, "8845": 1042, "885": [6, 146, 281, 282, 329, 376, 1014], "8854": 1042, "886": 216, "8874": 1042, "8878": 835, "8880": 620, "8881": 623, "889": [257, 437], "88978285": 993, "89": [2, 6, 30, 154, 188, 325, 326, 975, 987, 992, 1002, 1028, 1035, 1038, 1046], "890": 257, "891": 6, "892": [204, 216, 1014], "8922": 1042, "893055": 186, "8931": 1042, "8936": 1042, "894264": 240, "8947": 914, "8948018": 11, "89483932": 990, "8948621": 993, "896": 648, "8963": 262, "8965": 416, "897": [330, 331, 1014], "8973": 1042, "898": 253, "89856": 812, "899": [30, 257], "8992": 1042, "8995": 1042, "8pt": 1002, "8x8": [30, 87, 188, 230, 292, 302, 376, 502, 1025], "9": [2, 5, 7, 10, 11, 12, 22, 24, 25, 29, 30, 32, 40, 42, 48, 53, 56, 60, 62, 72, 80, 83, 89, 118, 119, 121, 122, 128, 130, 136, 137, 138, 146, 152, 156, 162, 166, 167, 168, 178, 179, 188, 197, 210, 211, 214, 215, 218, 221, 230, 231, 240, 243, 244, 245, 246, 252, 253, 257, 262, 266, 268, 281, 285, 287, 288, 291, 292, 293, 299, 300, 302, 305, 307, 308, 309, 311, 312, 320, 321, 325, 326, 328, 329, 330, 338, 342, 347, 352, 361, 376, 377, 385, 392, 396, 400, 401, 406, 408, 410, 411, 413, 416, 417, 439, 443, 450, 457, 463, 482, 483, 484, 485, 490, 496, 498, 516, 518, 520, 527, 534, 538, 539, 540, 547, 560, 567, 570, 583, 591, 604, 605, 607, 608, 627, 630, 634, 637, 639, 646, 647, 652, 658, 660, 661, 662, 681, 682, 683, 687, 692, 699, 709, 723, 726, 741, 748, 769, 778, 779, 780, 797, 799, 801, 803, 804, 818, 821, 822, 828, 830, 833, 841, 842, 846, 847, 852, 855, 861, 862, 870, 876, 879, 940, 941, 945, 965, 981, 987, 988, 992, 996, 1002, 1006, 1007, 1019, 1023, 1028, 1031, 1033, 1036, 1037, 1038, 1040, 1049, 1051], "90": [4, 6, 8, 9, 11, 13, 30, 72, 102, 103, 121, 122, 123, 125, 143, 154, 170, 177, 188, 194, 196, 199, 204, 215, 243, 268, 270, 307, 311, 321, 325, 326, 361, 365, 379, 385, 413, 563, 781, 800, 828, 833, 885, 987, 992, 1024, 1028, 1050, 1051], "900": [6, 48, 72, 73, 74], "9000": 215, "900000e": 215, "9010": 1041, "9012": 1043, "9015": [663, 1043], "9019": 1042, "9022": 1042, "9024": 1042, "9026666666666666": 122, "903": [6, 253], "904": [168, 257, 410], "9041": 1043, "9043": 1043, "9044": [259, 1042], "90453403": 466, "904556e": 215, "904558e": 215, "904747e": 215, "904751e": 215, "905": 257, "905206": 52, "9067": 1042, "9069": 1044, "9078": 1042, "908": [346, 348, 992, 1014], "90809432": 103, "9085": 1043, "9087": 1049, "90885631": 51, "909": 6, "909293": 300, "909909": 122, "91": [4, 6, 30, 49, 154, 254, 302, 325, 326, 416, 987, 1024, 1028], "910": 2, "9100": 1042, "9101": [1028, 1043], "9105": 1042, "9108": 1042, "912": 36, "912632": 300, "913": [133, 134, 416, 559, 1014], "914370e": 215, "914387e": 215, "9144052": 11, "9145": 1042, "914538e": 215, "914573e": 215, "9147": 1043, "9149": 1041, "915": 6, "9151": 1043, "9157": 1043, "916": 47, "91629073": 590, "916555e": 215, "91666667": 359, "9167": 320, "917": 47, "917281": 122, "9173": 1013, "917618e": 215, "92": [11, 30, 48, 96, 143, 173, 257, 302, 325, 326, 338, 374, 376, 538, 540, 547, 562, 597, 696, 800, 814, 822, 987, 1028], "9206": 1042, "921": [54, 66, 1014], "9219": 1042, "922": 1023, "9221": 649, "9222": 1043, "92222222": 1023, "9226260871125187": 267, "923223": 812, "92329566": 103, "9234": 1043, "9239": 1042, "924": 6, "92461872": 101, "925": [992, 1023], "9250": 1045, "92529176": 993, "9257": 1043, "9259": 1042, "9266666666666666": 118, "927": 437, "92708922": 1023, "9274": 1045, "9277": 1042, "9278": 1042, "928": [79, 437], "9284": 1042, "928571": 215, "9288": 1045, "9289": 1042, "9289253508854807": 322, "929": 260, "93": [4, 30, 146, 197, 240, 257, 326, 350, 376, 646, 647, 652, 660, 661, 662, 681, 777, 788, 800, 822, 828, 912, 987, 992, 1024, 1028], "930": 1023, "9300": 259, "930000": 300, "9302": 1042, "93036212": 1023, "9304": 1043, "93192644": 1023, "932": 6, "9326": 1013, "93271427": 152, "933": [6, 72, 413], "933197": 240, "933253": 122, "9333": 413, "933333": [137, 853], "934": 1023, "935": 1042, "9354": 1043, "936": [6, 13, 437, 992], "936480": 23, "937": [29, 33, 1014], "9372": 1043, "937443": 23, "937532": 23, "937597": 23, "9378": 1043, "938": [6, 193, 785, 992, 1023], "938613": 23, "939": [668, 1023], "9399": 1043, "93fletcher": 988, "93goldfarb": 988, "93lindenstrauss_lemma": 898, "93shanno_algorithm": 988, "94": [2, 30, 32, 52, 95, 118, 196, 234, 272, 307, 325, 326, 408, 416, 663, 788, 822, 987, 992, 993, 1002, 1028, 1035], "940": 2, "9400": 259, "940000": 300, "940184": 122, "940201": 23, "940374": 23, "9403917": 83, "941": 6, "94114649": [844, 845], "9416": 11, "9417": 671, "942": [100, 104, 1014], "943": [223, 224, 1014, 1023], "9431": 835, "944": [6, 1023], "9456": 1043, "94592424": 662, "946": 79, "94731329": 667, "9473684210526315": 315, "947958": 981, "948": [785, 992], "9484": 1043, "949": 6, "9490": 376, "9492": 1043, "9497": 1043, "9499": 638, "95": [4, 11, 13, 30, 42, 50, 55, 65, 89, 99, 118, 122, 125, 156, 167, 176, 197, 199, 204, 215, 245, 246, 249, 259, 260, 288, 296, 307, 311, 319, 326, 338, 361, 416, 527, 632, 633, 636, 647, 661, 748, 822, 901, 988, 992, 993, 1005, 1028, 1038], "950": 6, "950000047683716": 359, "9502547": 181, "9507": 1042, "9515": 1043, "951751e": 215, "951958": 981, "952": [6, 47], "9521": 1043, "952289": 186, "9524": 1043, "953": [6, 47], "953061": 301, "95373": 374, "954": [880, 892], "95433992": 83, "955": [66, 283, 413, 654], "9558": 1042, "955989": 981, "956": [6, 1023], "956038": 300, "9565": 376, "9569": 1043, "957": [6, 310, 728, 992], "9579": 1043, "958": 6, "9583": 408, "9584": [627, 1042], "959": [880, 892], "9593": 1042, "9595": 674, "9597": 1045, "9599": 1043, "95th": [11, 122, 125, 748], "96": [2, 11, 30, 46, 60, 156, 226, 236, 257, 302, 307, 310, 311, 325, 326, 376, 413, 553, 682, 683, 711, 822, 981, 987, 992, 1002, 1035], "9600": 1042, "9604": 1042, "961": 861, "961009": 981, "961111": 137, "9612": 1043, "961904": 853, "96190476": 995, "962": 6, "96228895": 103, "9623": 1042, "963": 1023, "9630": 675, "96362897": 1023, "9637883": 1023, "96388889": 1023, "9641": 1042, "9647": 1043, "965": [6, 992], "9655": 1043, "9656": 1043, "96578289": 1023, "966": 4, "9666": 543, "96681476": 1023, "966981": 186, "967": [72, 263, 276, 992, 996, 1014], "9677": 1042, "968": [154, 166, 257], "9681": 1043, "9686": 1043, "969": 373, "9693": 1042, "9694149248180188": 321, "9697": 1042, "97": [30, 102, 146, 170, 234, 236, 249, 326, 338, 376, 385, 392, 413, 646, 647, 652, 658, 660, 661, 662, 681, 682, 683, 987, 993, 1002, 1035], "9701": 1043, "9707": 1043, "9711": 1042, "9717": 1042, "9723": 1043, "9726": 1043, "973": [351, 413], "9731": 1043, "9733": [620, 623], "973554": 320, "973770": 186, "97435897": 359, "974e": 417, "975": [118, 134, 146, 166, 1007, 1014], "9750": 1042, "97545464": 240, "975455": 240, "9759": 6, "976": [41, 66, 189, 267, 1014], "976158": 374, "977": [2, 413], "9771": 554, "9772": 1043, "9775": 1043, "977890": 248, "9781605585161": 409, "978444": 300, "9786": 1043, "9788": 1042, "98": [30, 40, 42, 52, 60, 62, 80, 96, 146, 226, 236, 257, 299, 307, 326, 376, 383, 413, 416, 659, 839, 895, 987, 992, 994, 1023, 1028], "980000": 300, "9802": 1042, "981": [146, 376, 992], "9815": 1042, "9816": 1043, "9821": 850, "983": 728, "9830": 1042, "9832": 1043, "9833": 498, "98350372e": 178, "983667": 981, "9837": 1043, "984": [270, 276, 1014], "9843": 1048, "9847": 1042, "984ea3": [42, 60], "9850": 197, "9851": 1043, "9858": 1043, "986": 168, "98633022": 103, "986429": 301, "9865": 1042, "9866": [610, 619, 622], "9866666666666667": 118, "9868": [898, 1004], "986989": 262, "987": [267, 351], "9870002136752136": 315, "9875": 1043, "98809919e": 178, "9884": 679, "9885": 671, "9886": 1043, "989341": 186, "98mb": 350, "99": [4, 11, 23, 30, 42, 44, 49, 60, 93, 215, 226, 230, 236, 243, 245, 257, 260, 305, 326, 366, 372, 376, 383, 413, 416, 417, 492, 647, 661, 671, 682, 683, 788, 822, 851, 961, 987, 992, 1002, 1006, 1024, 1030, 1037], "990": [669, 992], "9900": 215, "9907": 1044, "9908": 1043, "991": [267, 992], "9915849773450223": 149, "991653": 300, "9922": 1042, "9924": 541, "99244": 541, "992766": 300, "993": [267, 351], "9933333333333333": 118, "9935": 835, "993879": 300, "9939": 1043, "993919": 9, "994": [44, 66, 283, 1014], "9945": 1042, "995": [169, 171, 189, 1014], "9951": 1045, "996": [151, 159, 1014], "9969977": 11, "997": [5, 38, 146], "9978": 1048, "9979": 2, "9979281": 11, "998": [23, 26, 146, 996, 1014], "9980": [2, 1043], "9981": 2, "998142": 11, "998273": 253, "9987": 639, "99891212e": 178, "999": [215, 253, 259, 383, 416, 717, 861, 862], "9990": 215, "9991": [664, 665, 1043], "99918858": 103, "9993": [2, 653, 655, 1043], "9994": 663, "9995": 2, "9996": 651, "999791942438998": 316, "9998": [9, 296], "9999": [9, 215, 296, 328, 498, 627, 1043], "99999": 328, "999999": [42, 60], "999999999999999e": 136, "A": [0, 12, 15, 16, 17, 20, 23, 25, 29, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 51, 52, 55, 57, 58, 59, 60, 62, 65, 66, 73, 76, 79, 84, 90, 94, 95, 96, 100, 110, 111, 116, 117, 119, 129, 133, 136, 137, 138, 143, 145, 149, 152, 154, 156, 157, 158, 164, 167, 168, 181, 185, 198, 201, 207, 211, 212, 215, 219, 233, 236, 246, 253, 259, 260, 262, 266, 274, 278, 299, 305, 307, 310, 315, 317, 320, 326, 327, 328, 330, 332, 338, 342, 343, 350, 351, 352, 357, 359, 361, 365, 367, 368, 373, 374, 376, 377, 379, 381, 382, 384, 387, 391, 392, 393, 394, 395, 399, 403, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 490, 491, 492, 494, 497, 500, 501, 502, 503, 504, 508, 510, 511, 512, 513, 514, 520, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 710, 711, 712, 716, 717, 719, 721, 722, 723, 724, 725, 726, 731, 736, 737, 740, 742, 743, 744, 747, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 764, 766, 767, 774, 775, 776, 777, 778, 781, 788, 790, 791, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 939, 940, 941, 948, 949, 951, 952, 977, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1019, 1020, 1026, 1027, 1028, 1030, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "AND": 735, "AS": 421, "AT": [374, 495], "And": [11, 164, 217, 218, 219, 220, 223, 224, 233, 259, 350, 387, 402, 409, 413, 417, 530, 588, 589, 591, 692, 693, 988, 992, 1010, 1014, 1042], "As": [0, 2, 5, 18, 23, 28, 38, 41, 51, 53, 55, 56, 64, 80, 84, 98, 109, 110, 116, 119, 120, 121, 123, 125, 129, 141, 144, 149, 154, 162, 167, 169, 170, 173, 176, 179, 181, 186, 188, 197, 201, 205, 215, 223, 233, 246, 253, 254, 256, 257, 259, 260, 262, 272, 281, 288, 306, 318, 328, 338, 342, 351, 352, 355, 357, 358, 361, 365, 366, 374, 378, 379, 381, 383, 384, 391, 392, 393, 402, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 446, 493, 554, 562, 566, 619, 632, 655, 656, 672, 674, 687, 735, 758, 764, 846, 847, 848, 850, 852, 883, 981, 986, 988, 989, 991, 992, 993, 995, 999, 1002, 1006, 1007, 1008, 1012, 1013, 1017, 1019, 1023, 1026, 1028, 1035, 1041, 1046, 1051, 1053], "At": [11, 73, 109, 202, 233, 253, 271, 278, 281, 325, 328, 365, 366, 383, 394, 399, 404, 412, 416, 437, 440, 465, 588, 589, 591, 602, 832, 834, 871, 956, 981, 988, 991, 993, 997, 1006, 1017], "Be": [143, 158, 350, 379, 411, 567, 568, 648, 654, 655, 656, 658, 659, 669, 680, 704, 818, 819, 879, 1002, 1032, 1036], "Being": [379, 393, 394, 988, 995], "But": [2, 7, 51, 166, 198, 199, 259, 283, 305, 379, 391, 409, 412, 415, 416, 462, 746, 912, 913, 981, 992, 1007, 1013], "By": [17, 43, 93, 125, 126, 127, 176, 201, 233, 253, 268, 278, 305, 315, 321, 322, 342, 350, 366, 379, 381, 385, 386, 393, 399, 408, 409, 410, 412, 413, 414, 415, 416, 418, 438, 441, 445, 446, 450, 464, 467, 468, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 524, 549, 550, 557, 558, 559, 560, 564, 565, 585, 586, 588, 589, 591, 606, 609, 632, 633, 671, 673, 675, 677, 690, 692, 694, 697, 699, 700, 702, 703, 718, 729, 730, 734, 738, 783, 784, 787, 794, 796, 803, 804, 850, 864, 865, 877, 878, 880, 882, 892, 894, 902, 907, 908, 912, 913, 914, 915, 924, 925, 960, 981, 982, 984, 988, 992, 999, 1000, 1002, 1004, 1008, 1019, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052, 1053], "For": [2, 6, 7, 10, 11, 12, 17, 25, 30, 35, 38, 42, 44, 46, 47, 51, 53, 55, 56, 58, 65, 71, 78, 84, 89, 94, 112, 114, 117, 122, 123, 125, 126, 128, 142, 143, 146, 149, 151, 156, 161, 162, 167, 168, 181, 185, 186, 197, 198, 201, 202, 205, 214, 215, 218, 220, 223, 226, 227, 229, 230, 231, 233, 240, 248, 253, 256, 259, 260, 266, 273, 275, 281, 283, 293, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 330, 338, 340, 342, 345, 350, 351, 352, 355, 356, 359, 361, 365, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 399, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 425, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 472, 474, 482, 483, 484, 485, 489, 496, 498, 503, 512, 514, 515, 519, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 597, 602, 607, 608, 609, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 692, 693, 695, 701, 704, 706, 707, 729, 730, 738, 741, 742, 763, 769, 778, 783, 784, 787, 788, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 930, 955, 976, 981, 982, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1011, 1016, 1017, 1019, 1026, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "If": [0, 2, 9, 11, 25, 30, 40, 47, 53, 69, 80, 96, 107, 117, 122, 125, 130, 158, 162, 167, 178, 197, 212, 214, 215, 233, 236, 253, 259, 266, 273, 275, 288, 296, 305, 310, 311, 338, 342, 345, 346, 350, 351, 352, 359, 361, 365, 366, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 396, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 515, 519, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 711, 712, 713, 714, 716, 717, 718, 722, 726, 727, 728, 729, 730, 731, 732, 736, 738, 741, 742, 745, 746, 748, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 812, 814, 817, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 933, 939, 941, 943, 945, 949, 951, 955, 958, 960, 961, 963, 966, 967, 973, 976, 977, 978, 979, 981, 982, 984, 986, 987, 988, 989, 990, 992, 995, 996, 998, 999, 1002, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1019, 1020, 1026, 1027, 1028, 1035, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "In": [0, 2, 3, 5, 7, 9, 10, 11, 12, 13, 23, 24, 25, 32, 35, 37, 46, 47, 51, 53, 55, 56, 58, 64, 65, 69, 70, 72, 73, 76, 78, 79, 80, 84, 87, 88, 93, 95, 98, 100, 101, 107, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 130, 133, 142, 143, 145, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 181, 185, 186, 188, 192, 197, 198, 199, 200, 201, 202, 205, 214, 215, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 246, 248, 252, 253, 256, 257, 259, 260, 261, 262, 264, 265, 268, 269, 271, 273, 274, 275, 278, 283, 286, 289, 290, 292, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 319, 320, 322, 327, 329, 338, 342, 345, 350, 351, 352, 355, 359, 361, 365, 366, 367, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 437, 440, 441, 442, 443, 444, 447, 448, 449, 452, 462, 463, 464, 469, 472, 475, 493, 496, 503, 508, 509, 511, 523, 534, 536, 538, 540, 541, 542, 544, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 591, 602, 606, 609, 610, 611, 630, 632, 633, 634, 636, 643, 644, 645, 647, 648, 649, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 669, 674, 675, 676, 679, 680, 684, 685, 686, 696, 699, 703, 712, 718, 720, 726, 728, 729, 734, 735, 738, 740, 742, 754, 756, 757, 781, 783, 785, 788, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 869, 871, 877, 878, 882, 883, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 909, 912, 914, 919, 923, 925, 941, 981, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1013, 1017, 1019, 1026, 1027, 1028, 1032, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "Ines": 1052, "It": [0, 2, 5, 6, 7, 11, 18, 23, 32, 35, 38, 51, 53, 56, 70, 76, 78, 80, 93, 96, 97, 102, 109, 112, 114, 115, 118, 120, 122, 130, 146, 154, 155, 156, 161, 162, 167, 168, 169, 177, 181, 185, 186, 194, 197, 201, 211, 214, 215, 218, 219, 226, 231, 233, 236, 253, 254, 255, 257, 259, 260, 262, 265, 266, 273, 278, 283, 289, 290, 291, 293, 294, 296, 305, 309, 310, 312, 315, 321, 334, 338, 342, 345, 350, 351, 352, 361, 365, 366, 367, 372, 374, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 396, 399, 402, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 434, 437, 438, 441, 442, 443, 444, 445, 447, 448, 449, 452, 459, 462, 467, 468, 469, 474, 478, 485, 487, 496, 508, 515, 524, 533, 535, 536, 538, 540, 541, 549, 550, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 589, 596, 602, 606, 607, 608, 611, 614, 615, 619, 620, 622, 623, 627, 630, 631, 632, 633, 641, 642, 643, 646, 647, 650, 652, 653, 654, 655, 658, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 681, 682, 683, 684, 687, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 708, 709, 710, 716, 723, 734, 742, 743, 747, 758, 759, 762, 765, 781, 783, 788, 799, 800, 802, 803, 804, 806, 812, 813, 814, 822, 823, 825, 828, 831, 840, 841, 846, 847, 848, 850, 853, 854, 855, 856, 860, 861, 862, 866, 867, 868, 872, 873, 874, 878, 881, 883, 893, 896, 897, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 928, 941, 949, 950, 960, 963, 966, 968, 969, 970, 971, 972, 973, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1017, 1019, 1025, 1026, 1027, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "Its": [76, 257, 261, 375, 381, 393, 414, 419, 538, 987, 988, 997, 1000, 1006, 1012, 1017, 1038, 1052], "NOT": [233, 289, 376, 382, 810, 844, 845], "Nearness": 627, "No": [22, 111, 124, 181, 189, 203, 205, 206, 233, 253, 326, 343, 345, 356, 376, 387, 396, 409, 474, 559, 560, 590, 591, 635, 645, 664, 676, 678, 685, 686, 797, 988, 1052], "Not": [53, 136, 168, 365, 391, 409, 427, 428, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 627, 628, 629, 630, 677, 688, 689, 690, 691, 693, 794, 797, 798, 800, 803, 804, 814, 841, 844, 845, 848, 849, 850, 852, 856, 868, 876, 879, 880, 882, 885, 896, 897, 908, 992, 998, 1012, 1044], "OF": 376, "ON": 320, "ONE": [373, 607, 608], "OR": [305, 409, 420, 444, 1046], "Of": [7, 23, 25, 161, 273, 365, 381, 409, 417, 982], "On": [2, 10, 11, 15, 24, 65, 69, 70, 83, 84, 98, 109, 112, 114, 116, 117, 122, 126, 127, 130, 133, 141, 143, 153, 154, 167, 168, 169, 178, 185, 186, 199, 201, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 243, 245, 248, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 271, 273, 302, 305, 307, 309, 310, 311, 316, 317, 319, 320, 322, 327, 338, 345, 359, 365, 377, 380, 381, 383, 391, 393, 404, 406, 409, 413, 414, 416, 418, 419, 643, 656, 691, 735, 761, 869, 885, 981, 985, 988, 991, 992, 994, 998, 1000, 1005, 1007, 1023, 1026], "One": [2, 7, 10, 22, 28, 47, 53, 89, 98, 100, 117, 119, 122, 125, 126, 164, 167, 170, 175, 201, 206, 212, 216, 226, 237, 248, 253, 259, 266, 269, 278, 281, 289, 290, 292, 306, 322, 333, 335, 336, 346, 348, 351, 365, 376, 379, 392, 393, 402, 408, 409, 412, 414, 415, 416, 417, 418, 420, 444, 449, 472, 474, 478, 512, 566, 631, 639, 658, 666, 668, 673, 675, 676, 677, 788, 807, 808, 832, 833, 834, 865, 866, 877, 908, 955, 982, 984, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1002, 1007, 1014, 1015, 1030, 1039, 1041, 1048, 1050], "Or": [350, 359, 413, 414, 877, 992, 998, 1006], "Such": [12, 126, 149, 154, 166, 176, 181, 186, 198, 253, 262, 350, 393, 394, 402, 413, 414, 416, 555, 556, 656, 982, 992, 995, 1002, 1008, 1026, 1045, 1050, 1052], "THE": 376, "That": [11, 25, 93, 109, 125, 146, 167, 186, 226, 259, 263, 351, 352, 366, 373, 387, 393, 408, 413, 418, 419, 443, 446, 447, 557, 564, 593, 818, 912, 913, 981, 989, 990, 998, 1008, 1044, 1045], "The": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 24, 25, 28, 29, 30, 32, 35, 37, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 55, 56, 58, 59, 60, 61, 63, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 86, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 218, 220, 221, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 248, 249, 252, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 335, 336, 338, 342, 343, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 752, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 766, 767, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 940, 941, 943, 944, 948, 949, 952, 955, 957, 958, 959, 960, 961, 962, 963, 966, 974, 975, 976, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "Their": [167, 374, 376, 394, 409, 644, 1035], "Then": [69, 110, 114, 117, 125, 130, 133, 143, 167, 173, 181, 185, 197, 201, 222, 227, 233, 239, 253, 261, 262, 278, 350, 373, 383, 385, 387, 396, 405, 406, 409, 412, 414, 417, 418, 570, 593, 719, 756, 800, 814, 904, 905, 982, 991, 992, 998, 1007, 1028, 1044], "There": [37, 44, 115, 149, 215, 222, 233, 249, 254, 256, 259, 281, 350, 372, 374, 376, 379, 380, 381, 384, 391, 393, 394, 396, 405, 407, 409, 414, 416, 417, 418, 446, 452, 462, 534, 553, 554, 559, 560, 588, 589, 591, 606, 645, 982, 988, 989, 990, 991, 992, 995, 999, 1002, 1006, 1007, 1008, 1011, 1016, 1027, 1035, 1043], "These": [2, 3, 5, 25, 49, 93, 95, 114, 118, 164, 168, 186, 197, 198, 199, 227, 253, 266, 278, 283, 287, 302, 305, 312, 314, 319, 326, 328, 361, 365, 366, 372, 375, 376, 379, 381, 383, 386, 388, 391, 393, 396, 399, 402, 405, 406, 407, 408, 409, 412, 414, 416, 417, 418, 419, 442, 446, 448, 498, 508, 509, 515, 538, 567, 568, 602, 603, 668, 676, 677, 699, 706, 733, 778, 794, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 849, 850, 869, 981, 983, 986, 988, 989, 992, 993, 1003, 1005, 1007, 1012, 1019, 1023, 1028, 1035, 1041, 1043, 1044, 1045, 1048, 1052], "To": [2, 6, 24, 25, 30, 44, 53, 55, 76, 78, 80, 84, 98, 109, 119, 122, 123, 132, 136, 146, 154, 155, 158, 161, 162, 166, 167, 173, 178, 181, 185, 197, 198, 199, 201, 205, 215, 230, 231, 233, 236, 238, 240, 248, 253, 254, 256, 257, 259, 261, 262, 264, 266, 273, 278, 281, 301, 305, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 347, 351, 355, 361, 365, 366, 372, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 402, 404, 405, 409, 410, 411, 412, 413, 414, 416, 417, 446, 448, 449, 450, 461, 464, 467, 492, 496, 502, 503, 507, 508, 509, 531, 537, 538, 539, 541, 543, 544, 545, 546, 557, 558, 559, 560, 564, 565, 569, 597, 611, 627, 632, 646, 647, 652, 653, 656, 658, 659, 660, 661, 662, 663, 684, 700, 712, 728, 763, 785, 793, 803, 804, 826, 833, 864, 875, 880, 894, 895, 904, 905, 909, 912, 913, 914, 915, 931, 941, 960, 979, 981, 982, 984, 987, 988, 989, 990, 992, 993, 994, 995, 998, 999, 1002, 1006, 1007, 1008, 1017, 1019, 1023, 1025, 1026, 1028, 1035, 1038, 1040, 1041, 1042, 1044, 1046], "Will": [379, 497, 534, 627, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 707, 714, 788, 869, 873, 883, 884, 1038, 1039, 1041, 1043, 1053], "Willing": [1041, 1042], "With": [22, 32, 42, 65, 73, 88, 98, 125, 127, 142, 164, 168, 197, 199, 225, 227, 232, 234, 240, 241, 259, 287, 365, 368, 374, 377, 379, 381, 393, 399, 409, 410, 413, 416, 418, 437, 439, 501, 541, 582, 632, 633, 658, 862, 865, 867, 878, 884, 885, 911, 913, 985, 988, 989, 992, 993, 995, 996, 999, 1006, 1008, 1014, 1019, 1020, 1027, 1032, 1038, 1042, 1043, 1045, 1047, 1049], "_": [2, 3, 5, 6, 7, 9, 10, 11, 13, 18, 23, 24, 25, 28, 30, 31, 38, 41, 48, 51, 53, 56, 61, 65, 68, 80, 88, 90, 93, 98, 100, 102, 112, 113, 114, 125, 141, 149, 154, 155, 156, 166, 167, 168, 170, 173, 176, 180, 181, 182, 184, 185, 186, 189, 194, 195, 197, 199, 201, 210, 211, 214, 219, 222, 227, 232, 236, 240, 253, 254, 259, 261, 262, 263, 265, 266, 268, 273, 278, 286, 291, 294, 302, 307, 310, 311, 312, 316, 319, 320, 321, 326, 327, 337, 342, 345, 350, 352, 356, 381, 385, 393, 414, 416, 417, 421, 446, 478, 532, 533, 534, 535, 536, 538, 539, 540, 543, 545, 546, 547, 566, 597, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 691, 693, 695, 696, 698, 700, 710, 764, 800, 806, 814, 823, 848, 856, 877, 878, 885, 982, 988, 989, 992, 994, 995, 996, 999, 1000, 1002, 1007, 1008, 1026, 1027, 1042], "_0": [196, 685, 988, 992, 1007], "_1": [318, 342, 411, 414, 417, 531, 537, 538, 540, 545, 546, 547, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 766, 988, 990, 992, 1007], "_11": 652, "_2": [79, 154, 342, 414, 417, 531, 537, 545, 546, 646, 652, 988, 996, 1006, 1007], "_21": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "__": [71, 260, 393, 410, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 1024, 1043, 1044], "______________________________________________________________________": 326, "________________________________________________________________________________": [9, 52, 350], "__________________________________________________________________________________": 56, "________________________________________________________ward_tre": 52, "_____________________________________________________f_regress": 52, "__add__": [419, 624], "__array__": [1038, 1045], "__array_function__": [1013, 1045], "__c": 381, "__call__": [157, 338, 393, 417, 419, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 1042], "__class__": [161, 197, 199, 233, 236, 261, 307, 350, 351, 352, 386], "__class_weight": 381, "__dataframe__": [561, 562], "__doc__": [41, 73, 154, 246, 393], "__file__": [6, 8, 1048], "__getattr__": 381, "__getitem__": 1053, "__getstate__": [1042, 1050], "__init__": [6, 54, 107, 157, 233, 283, 338, 379, 381, 383, 384, 385, 386, 393, 417, 423, 426, 429, 432, 433, 618, 953, 1036, 1041, 1043, 1048, 1049, 1050, 1051], "__init_subclass__": 381, "__len__": 1044, "__main__": [329, 391], "__metadata_request__fit": 233, "__mul__": 621, "__mul___": 419, "__name__": [5, 23, 59, 161, 197, 199, 233, 236, 240, 254, 261, 307, 329, 350, 351, 352, 386, 391, 877], "__pow__": [419, 616], "__repr__": [381, 1013, 1044], "__sklearn_clone__": [381, 434, 1051], "__sklearn_is_fitted__": [6, 25, 54, 105, 106, 157, 164, 233, 283, 381, 423, 426, 976, 1014, 1048, 1049], "__traceback__": [571, 572, 573, 574, 575, 576, 577, 578], "__version__": 383, "_agglom": 52, "_array_api": 404, "_bag": 933, "_base": [244, 381], "_basehmm": 1035, "_bay": 933, "_birch": 1045, "_breast_cancer_dataset": 146, "_build": 379, "_c_step": 1042, "_cfnode": 442, "_check_bounds_param": 1047, "_check_param_grid": 1041, "_check_sample_weight": 1048, "_check_stop_list": 591, "_check_target": 1042, "_check_x": 1045, "_class": 992, "_class_cov": 1043, "_class_mean": 1043, "_classif": 302, "_classifier_ha": 54, "_column_transform": [69, 130], "_compon": [230, 536], "_coo": [585, 586], "_count_nonzero_coeffici": 5, "_criterion": 1043, "_csr": 877, "_cython_bla": 380, "_devianc": 992, "_diabetes_dataset": 146, "_distn_infrastructur": 271, "_doc_link_modul": 381, "_doc_link_templ": 381, "_doc_link_url_param_gener": 381, "_dotbla": 385, "_encod": 1043, "_error": 992, "_estimator_html_repr": 937, "_estimator_typ": [381, 393, 426, 427, 428, 431, 432, 1040], "_estimator_with_converted_arrai": 404, "_f": [157, 988], "_featur": [414, 538, 540, 547], "_fit_and_scor": 1043, "_fit_stag": [559, 560], "_fro": [531, 537, 545, 546, 646, 647, 652, 660, 661, 662, 681], "_g": 157, "_gb": 1045, "_generate_center_coordin": 12, "_get_support_mask": 601, "_get_tag": [381, 1046], "_get_warnings_filters_info_list": 366, "_gpr": 158, "_h": [538, 540, 547], "_hist_gradient_boost": 383, "_i": [406, 416, 983, 988, 992, 996, 1007], "_idx": 393, "_init": 177, "_init_t": 1006, "_initialize_nmf": 385, "_is_fit": 107, "_iter": 383, "_j": [406, 983], "_k": [411, 986, 988], "_l": 992, "_learntselectormixin": 1040, "_level": [419, 625], "_lfw": 1024, "_logist": 379, "_loss": [393, 992], "_m": 1008, "_mean": 311, "_mean_frequency_by_risk_group": 197, "_method": 952, "_more_tag": 381, "_my": 379, "_n": [417, 992], "_n_cluster": 379, "_n_compon": 547, "_n_features_out": 425, "_name_estim": 1045, "_neg": 385, "_newton_cg": 1046, "_nls_subproblem": 385, "_nmf": 385, "_not_in_sphinx": [6, 8], "_num_thread": 366, "_obj": 952, "_openmp_help": 380, "_pairwis": [1045, 1047], "_pairwise_cal": 628, "_plain_sgd": 1050, "_plot": 325, "_po": 385, "_posterior_mod": 610, "_preprocess_data": 687, "_pvalu": 1035, "_rand": 361, "_ratio": [538, 540, 547], "_request": [233, 399, 1053], "_required_paramet": [381, 429], "_reset": 6, "_run_search": 1043, "_safe_index": [1048, 1052, 1053], "_safe_split": 381, "_safe_tag": 1046, "_sag": 1044, "_sampl": [230, 414, 538, 540, 547], "_samples_gener": 246, "_score": [393, 800, 814, 827, 992, 1035, 1048], "_search": 1041, "_serial": 233, "_sgd_fast": 1050, "_skip_test": 381, "_spars": 385, "_sparse_fit": 1045, "_split": 254, "_std": 311, "_t": 1006, "_test": [205, 307, 366, 381, 1048], "_test_scor": [259, 472, 594, 1048], "_transform_select": 1041, "_tree": [912, 913, 914, 915, 1036, 1038], "_typedef": 380, "_univariate_select": 52, "_valu": [419, 613], "_w": [538, 540, 547], "_weight": [12, 215], "_weight_boost": 933, "_weighted_percentil": 1048, "_x_is_even": 953, "_xfail_check": 381, "a16": [1045, 1046], "a65628": [42, 60], "a674e682c281": 384, "a_": [94, 405, 409, 538, 540, 547, 988, 1027], "a_column": 719, "a_i": 409, "a_mask": 268, "a_n": 405, "a_row": 719, "a_tru": 268, "aaa": 157, "aaaaff": [288, 291], "aaai": [409, 420, 444, 839, 994], "aact": 157, "aaffaa": 291, "aagaard": 1039, "aakanksha": 1043, "aapl": 10, "aarch64": 387, "aaron": [494, 988, 1038, 1039, 1040, 1045], "aarshai": [1042, 1043], "aashil": 1042, "ab": [10, 15, 38, 73, 97, 103, 111, 119, 130, 142, 146, 170, 184, 188, 208, 210, 213, 215, 221, 259, 305, 336, 347, 409, 538, 540, 547, 627, 746, 844, 845, 879, 992], "ab_mask": 268, "abadi": [1041, 1042], "abandon": 379, "abati": [1050, 1052, 1054], "abbi": [1045, 1046], "abbrevi": 699, "abdela": 1044, "abdulelah": 1048, "abdur": 1045, "abenbihi": 1045, "abhijeet": 1037, "abhinav": [1045, 1048], "abhishek": [1038, 1039, 1045, 1049, 1051, 1052], "abhyudai": 1042, "abi": 383, "abid": 379, "abil": [7, 11, 59, 78, 94, 122, 148, 149, 150, 154, 156, 158, 159, 161, 164, 166, 167, 169, 197, 201, 215, 226, 350, 367, 396, 416, 417, 419, 611, 622, 625, 782, 783, 784, 787, 788, 989, 992, 995, 998, 1008, 1013, 1014, 1035, 1037, 1042, 1044, 1048, 1049], "abirami": 409, "abl": [2, 3, 7, 22, 45, 53, 59, 80, 84, 97, 98, 125, 127, 155, 167, 170, 181, 186, 197, 213, 215, 222, 265, 270, 322, 338, 361, 365, 366, 367, 373, 377, 379, 381, 383, 384, 391, 402, 409, 411, 413, 417, 485, 503, 534, 829, 876, 981, 982, 988, 991, 992, 993, 998, 1002, 1005, 1008, 1009, 1013, 1019, 1027, 1028, 1041, 1042, 1046, 1053], "ablin": 1050, "abnorm": [211, 226, 289, 337, 374, 492, 563, 850, 998, 1043], "abnormal_termination_in_lnsrch": 158, "abo7atm": 1047, "abort": 692, "about": [5, 9, 27, 42, 51, 55, 60, 68, 84, 87, 118, 143, 158, 164, 166, 170, 201, 214, 226, 233, 253, 256, 257, 259, 261, 266, 281, 288, 310, 315, 317, 318, 319, 320, 321, 326, 350, 352, 359, 361, 365, 366, 368, 372, 374, 378, 379, 383, 384, 385, 387, 392, 393, 394, 402, 407, 408, 413, 414, 417, 419, 438, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 515, 561, 562, 593, 594, 607, 608, 614, 640, 676, 678, 743, 800, 806, 814, 823, 833, 883, 925, 982, 988, 989, 991, 993, 995, 998, 999, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1016, 1017, 1019, 1020, 1026, 1028, 1040, 1041, 1051, 1053], "abov": [2, 23, 24, 25, 35, 42, 64, 68, 111, 114, 115, 122, 125, 133, 145, 146, 167, 168, 183, 197, 199, 203, 208, 230, 233, 234, 253, 259, 265, 278, 288, 307, 310, 311, 316, 318, 322, 342, 351, 352, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 381, 383, 385, 391, 393, 394, 406, 409, 410, 411, 413, 414, 415, 416, 417, 419, 441, 445, 464, 467, 489, 495, 496, 497, 523, 590, 634, 704, 755, 800, 804, 812, 814, 825, 867, 868, 881, 887, 893, 901, 955, 981, 982, 984, 986, 988, 989, 992, 995, 997, 999, 1002, 1006, 1007, 1008, 1013, 1019, 1020, 1026, 1027, 1028, 1041, 1053], "abraham": [1035, 1036, 1041, 1045], "abrahamowicz": 1002, "absenc": [226, 262, 393, 712, 867, 991, 992], "absent": [393, 417, 729, 754, 825], "absgrad": 1046, "absher": 1037, "absolut": [2, 11, 73, 97, 119, 146, 167, 197, 199, 203, 215, 381, 402, 409, 411, 413, 414, 416, 417, 418, 419, 420, 444, 450, 456, 457, 531, 537, 542, 545, 546, 548, 549, 550, 558, 560, 561, 562, 565, 588, 590, 591, 593, 597, 602, 619, 627, 632, 646, 649, 650, 652, 654, 656, 671, 672, 674, 676, 678, 682, 683, 704, 717, 721, 736, 737, 745, 746, 748, 753, 755, 757, 795, 802, 806, 817, 820, 828, 830, 842, 844, 845, 849, 868, 873, 876, 889, 913, 915, 978, 988, 989, 1002, 1006, 1008, 1026, 1027, 1036, 1041, 1046, 1047, 1048, 1049, 1052], "absolute_error": [11, 416, 558, 560, 562, 565, 671, 913, 915, 1048], "absolute_loss": 1048, "absolutelynowarranti": 1043, "absp": 860, "abstain": 534, "abstract": [393, 414, 419, 618, 769, 1012, 1035], "abstractmethod": 1045, "absurd": 999, "abund": 374, "ac": [236, 530, 664, 685, 686, 988, 1005, 1028], "acad": [689, 693, 989], "academ": [413, 1017], "academi": [78, 851], "acc": 121, "acc_clf1": 31, "acc_clf2": 31, "acc_clf3": 31, "acc_histori": 6, "acc_knn": 292, "acceler": [231, 320, 365, 391, 404, 409, 468, 692, 902, 989, 1012, 1017, 1044, 1048, 1050, 1052], "accent": [346, 588, 589, 591, 1045], "accept": [146, 149, 233, 253, 256, 315, 338, 350, 352, 361, 365, 366, 373, 379, 381, 388, 391, 392, 393, 394, 399, 404, 409, 417, 437, 441, 444, 445, 448, 461, 464, 467, 508, 509, 555, 556, 561, 562, 569, 570, 581, 582, 593, 594, 597, 628, 635, 639, 643, 646, 647, 652, 653, 679, 727, 742, 778, 797, 798, 799, 803, 804, 822, 846, 847, 854, 855, 864, 868, 922, 924, 925, 928, 988, 990, 992, 995, 1000, 1002, 1007, 1012, 1013, 1023, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "accept_large_spars": [924, 925, 1043], "accept_spars": [868, 924, 925, 1042, 1052], "access": [2, 47, 76, 120, 236, 244, 249, 322, 350, 359, 365, 366, 379, 380, 381, 387, 391, 393, 394, 404, 409, 411, 412, 416, 417, 419, 450, 457, 464, 467, 536, 567, 568, 569, 570, 617, 862, 863, 864, 919, 981, 988, 991, 992, 998, 999, 1000, 1006, 1007, 1013, 1017, 1019, 1027, 1028, 1035, 1037, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051], "accid": [197, 215], "accident": [1035, 1039, 1044], "accommod": [154, 1043], "accompani": [259, 1043], "accomplish": [233, 381, 406, 546, 989, 993, 995, 1017, 1052], "accord": [15, 22, 24, 35, 47, 76, 115, 121, 146, 150, 180, 197, 215, 230, 315, 342, 351, 361, 379, 381, 391, 392, 393, 394, 402, 405, 406, 409, 411, 413, 414, 416, 417, 419, 437, 450, 452, 456, 460, 462, 465, 469, 504, 516, 517, 518, 525, 530, 532, 535, 536, 538, 540, 550, 553, 554, 561, 562, 563, 566, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 641, 642, 644, 645, 649, 658, 659, 670, 680, 691, 695, 735, 779, 780, 800, 801, 802, 803, 804, 807, 808, 809, 814, 825, 839, 840, 841, 842, 843, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 867, 874, 882, 894, 896, 897, 904, 905, 906, 907, 909, 910, 986, 988, 992, 994, 995, 1002, 1005, 1006, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "accordingli": [125, 168, 236, 342, 379, 383, 384, 1042, 1043, 1050], "account": [11, 12, 53, 95, 101, 109, 125, 154, 161, 167, 215, 233, 253, 259, 286, 292, 345, 347, 351, 365, 375, 379, 393, 394, 399, 409, 412, 413, 414, 416, 417, 463, 561, 562, 567, 568, 627, 628, 630, 632, 633, 649, 673, 679, 704, 707, 728, 729, 730, 738, 743, 756, 783, 784, 787, 788, 801, 805, 818, 878, 984, 986, 990, 992, 993, 994, 995, 1002, 1006, 1008, 1040, 1042, 1043, 1044, 1047, 1048, 1050, 1052, 1053], "acctactagaagtt": 391, "acctcctagaag": 391, "accumul": [6, 48, 116, 117, 186, 383, 385, 409, 417, 992, 1036, 1043], "accur": [2, 7, 11, 19, 23, 24, 78, 93, 124, 149, 156, 167, 168, 201, 212, 215, 259, 266, 270, 278, 319, 350, 351, 361, 378, 393, 406, 409, 411, 414, 416, 417, 418, 437, 443, 447, 451, 453, 459, 531, 538, 540, 542, 543, 545, 546, 547, 607, 608, 634, 803, 804, 844, 845, 940, 941, 984, 989, 992, 1008, 1049], "accuraci": [2, 4, 5, 6, 23, 28, 29, 30, 31, 68, 69, 70, 71, 109, 115, 116, 120, 121, 128, 142, 143, 145, 150, 170, 173, 197, 201, 205, 212, 213, 245, 253, 257, 258, 259, 260, 261, 263, 265, 273, 275, 278, 285, 291, 292, 293, 302, 307, 310, 321, 325, 326, 328, 338, 341, 342, 345, 361, 365, 381, 392, 393, 407, 408, 409, 413, 416, 417, 418, 426, 437, 449, 469, 471, 472, 478, 532, 534, 541, 549, 550, 551, 553, 555, 557, 558, 559, 561, 564, 565, 567, 569, 610, 634, 658, 659, 666, 668, 671, 674, 675, 676, 692, 697, 703, 708, 711, 713, 718, 732, 733, 734, 738, 743, 754, 763, 787, 794, 796, 799, 822, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 853, 854, 861, 899, 900, 904, 906, 909, 912, 914, 940, 941, 981, 986, 987, 988, 989, 993, 995, 996, 1000, 1004, 1006, 1008, 1023, 1028, 1043, 1044, 1053], "accuracy_histori": 6, "accuracy_scor": [28, 109, 150, 263, 310, 328, 350, 361, 392, 399, 404, 426, 557, 564, 708, 729, 730, 734, 738, 783, 784, 787, 794, 796, 934, 981, 992, 1036, 1037, 1038, 1047, 1052], "acf": 119, "achar": [1042, 1043, 1044, 1045], "achiev": [2, 10, 15, 17, 25, 29, 96, 109, 118, 120, 125, 128, 157, 173, 197, 205, 256, 259, 266, 310, 328, 338, 341, 342, 345, 350, 361, 365, 367, 373, 374, 376, 381, 385, 391, 393, 405, 406, 408, 409, 413, 414, 416, 417, 553, 558, 565, 640, 649, 676, 678, 707, 729, 730, 738, 740, 763, 783, 784, 787, 803, 804, 840, 884, 981, 982, 984, 988, 992, 1002, 1005, 1007, 1028, 1048], "achin": 1017, "achliopta": [230, 897, 898, 1004], "acid": [310, 376], "acknowledg": [378, 609, 1052], "acl": [901, 1005, 1006], "acm": [373, 374, 409, 420, 444, 450, 457, 460, 511, 563, 676, 726, 756, 850, 992, 995, 998, 1004], "acoust": 992, "acq": 6, "acquaint": 379, "acquir": [12, 117, 261, 1047], "acquisit": [405, 719], "acronym": 383, "across": [0, 2, 11, 53, 59, 65, 83, 88, 115, 136, 167, 186, 191, 219, 254, 256, 259, 273, 283, 305, 310, 342, 380, 381, 388, 393, 402, 407, 409, 413, 416, 417, 418, 421, 437, 440, 450, 452, 454, 457, 460, 462, 469, 472, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 588, 591, 594, 602, 607, 608, 610, 611, 632, 633, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 676, 678, 679, 685, 686, 689, 690, 691, 692, 693, 694, 695, 704, 705, 717, 731, 757, 788, 793, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 849, 853, 860, 861, 862, 869, 873, 874, 881, 882, 884, 885, 893, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 940, 941, 960, 963, 966, 981, 988, 990, 992, 1002, 1006, 1008, 1013, 1017, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1053], "act": [338, 350, 379, 392, 415, 416, 713, 729, 730, 738, 783, 784, 787, 879, 883, 989, 992, 995, 1007, 1043], "action": [318, 350, 378, 382, 383, 396, 408, 1002, 1045], "activ": [0, 30, 87, 164, 205, 235, 243, 249, 260, 324, 325, 327, 331, 352, 373, 374, 377, 379, 380, 385, 387, 391, 393, 394, 396, 399, 410, 496, 502, 526, 632, 635, 637, 650, 651, 653, 654, 655, 663, 664, 665, 682, 683, 684, 685, 686, 713, 718, 797, 860, 861, 862, 900, 958, 988, 989, 990, 991, 995, 996, 997, 1005, 1014, 1016, 1046], "active_": [650, 651, 654, 655], "active_features_": 1043, "actual": [2, 11, 25, 44, 58, 73, 84, 115, 125, 146, 167, 173, 186, 197, 201, 205, 245, 255, 262, 352, 361, 365, 367, 376, 379, 381, 384, 385, 391, 392, 393, 406, 409, 414, 416, 417, 418, 434, 509, 515, 516, 527, 535, 538, 540, 547, 562, 563, 644, 645, 648, 658, 659, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 687, 691, 695, 701, 704, 709, 715, 721, 722, 723, 724, 785, 797, 803, 804, 819, 820, 850, 881, 904, 910, 932, 933, 934, 967, 984, 991, 992, 995, 999, 1000, 1016, 1042, 1043, 1049, 1050, 1051], "actual_vs_predict": [2, 73, 130, 167, 255, 320, 701], "actuari": 406, "ad": [2, 12, 18, 73, 100, 102, 109, 115, 125, 142, 149, 155, 156, 176, 181, 199, 201, 222, 232, 233, 259, 260, 261, 305, 316, 317, 318, 319, 320, 321, 322, 329, 342, 351, 378, 379, 381, 383, 385, 391, 393, 394, 414, 416, 417, 418, 419, 420, 421, 427, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 510, 512, 514, 522, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 708, 713, 714, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 739, 740, 741, 742, 743, 746, 753, 754, 757, 761, 766, 767, 769, 775, 777, 778, 782, 783, 784, 785, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 813, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 922, 924, 925, 931, 935, 936, 940, 941, 948, 949, 950, 951, 952, 955, 958, 960, 962, 967, 973, 979, 981, 985, 987, 988, 989, 993, 995, 996, 998, 1013, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adaboost": [29, 89, 108, 112, 113, 118, 120, 126, 129, 130, 133, 134, 152, 164, 306, 342, 356, 357, 358, 519, 551, 553, 554, 559, 631, 703, 830, 912, 913, 1014, 1015, 1030, 1037], "adaboost_clf": 109, "adaboostclassifi": [29, 111, 118, 399, 416, 554, 559, 561, 933, 1037, 1038, 1041, 1042, 1044, 1045, 1048, 1050, 1051, 1052], "adaboostregressor": [110, 399, 416, 553, 562, 933, 1037, 1038, 1041, 1044, 1045, 1048, 1050, 1051], "adagrad": 1012, "adam": [281, 300, 861, 862, 996, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adamgonzo": 1049, "adamson": 1047, "adanhawth": [1043, 1044], "adapt": [51, 53, 109, 121, 122, 152, 243, 244, 253, 307, 342, 366, 377, 378, 379, 388, 409, 416, 419, 515, 516, 517, 518, 676, 677, 678, 861, 862, 988, 994, 996, 1002, 1006, 1012, 1013, 1043, 1044, 1051, 1052], "adarsh": 1052, "add": [3, 10, 11, 15, 18, 23, 24, 25, 30, 31, 38, 42, 52, 73, 78, 79, 84, 94, 118, 121, 142, 144, 146, 149, 154, 155, 156, 161, 162, 179, 186, 192, 198, 200, 201, 212, 221, 226, 230, 232, 233, 266, 268, 269, 283, 295, 307, 309, 315, 317, 318, 341, 342, 344, 345, 351, 365, 377, 378, 379, 380, 381, 383, 385, 387, 393, 396, 404, 406, 413, 416, 417, 418, 515, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 602, 627, 628, 630, 632, 658, 659, 694, 697, 821, 844, 845, 901, 931, 949, 950, 960, 981, 982, 991, 998, 1002, 1005, 1006, 1013, 1026, 1027, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "add_2d_scatt": 218, "add_artist": [32, 219, 243, 244, 245, 248, 249], "add_ax": [168, 222, 270], "add_categori": 236, "add_collect": [10, 221, 229], "add_ind": [130, 162, 627, 628, 630, 982, 1044, 1047, 1051], "add_missing_valu": 162, "add_nois": 155, "add_self_request": [233, 949], "add_subplot": [5, 23, 25, 40, 43, 62, 65, 88, 99, 168, 194, 212, 220, 222, 325, 326, 386, 1027], "add_trac": 115, "adddatapointbatch": 283, "addep": 1046, "addison": [590, 730], "addit": [2, 3, 5, 10, 12, 13, 64, 69, 80, 88, 93, 96, 109, 113, 115, 116, 119, 120, 145, 154, 155, 156, 162, 167, 168, 176, 181, 186, 198, 199, 201, 222, 237, 253, 261, 268, 274, 281, 305, 316, 317, 322, 327, 342, 352, 357, 361, 365, 366, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 385, 387, 391, 392, 393, 394, 396, 402, 407, 408, 409, 411, 413, 414, 417, 418, 419, 420, 433, 441, 442, 444, 445, 446, 450, 457, 469, 474, 496, 503, 532, 534, 536, 537, 539, 541, 542, 543, 549, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 612, 619, 628, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 670, 687, 688, 692, 698, 699, 702, 742, 758, 759, 788, 792, 797, 798, 806, 823, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 896, 897, 904, 905, 935, 941, 981, 986, 988, 992, 993, 995, 996, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1019, 1030, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "addition": [51, 70, 111, 125, 167, 197, 215, 233, 316, 318, 351, 379, 391, 406, 417, 610, 611, 646, 652, 671, 881, 981, 982, 992, 1000, 1012, 1041, 1052], "additional_nois": 38, "additive_chi2": [620, 638, 765, 774], "additive_chi2_kernel": [638, 759, 765, 984], "additivechi2sampl": [639, 640, 641, 642, 758, 759, 984, 1049, 1051], "address": [2, 46, 201, 233, 350, 374, 379, 408, 409, 417, 447, 657, 988, 989, 994, 995, 996, 997, 998, 1002, 1017, 1026, 1043], "adelr": 1043, "adequ": [366, 385, 567, 1019, 1048], "adher": [365, 381, 393, 935, 936, 1035, 1036], "adien": 1051, "adijohar": 1049, "adil": 1050, "adimension": 167, "adithya": 1040, "aditya": [1041, 1043, 1044, 1045, 1049, 1050], "adityadaflapurkar": 1043, "adjac": [409, 414, 452, 462, 585, 586, 635, 691, 695, 946, 989, 995, 1027], "adjacency_matrix": 409, "adjust": [2, 7, 15, 34, 36, 47, 56, 66, 76, 109, 122, 141, 164, 201, 226, 231, 239, 260, 278, 315, 329, 345, 351, 386, 409, 410, 414, 416, 417, 524, 553, 554, 557, 559, 561, 562, 564, 658, 659, 666, 668, 674, 675, 676, 704, 705, 708, 714, 715, 755, 757, 786, 795, 839, 840, 842, 843, 874, 896, 897, 904, 905, 906, 909, 912, 914, 930, 991, 992, 996, 1002, 1014, 1026, 1032, 1035, 1041, 1051], "adjusted_mutual_info_scor": [35, 36, 47, 56, 409, 705, 715, 733, 755, 757, 786, 992, 1035, 1043, 1047, 1051], "adjusted_rand_index": 705, "adjusted_rand_scor": [35, 36, 47, 56, 351, 409, 704, 715, 733, 757, 786, 992, 1048], "administr": 396, "admir": [1050, 1051], "admiss": [230, 366], "adopt": [381, 391, 393, 900, 992, 1006, 1043, 1050, 1052], "adoublet": [1050, 1051], "adpot": 321, "adrian": [1048, 1049, 1050], "adrien": 1035, "adrin": [0, 63, 346, 394, 397, 402, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adrinjalali": [1038, 1047], "adult": [322, 496, 1002], "advanc": [3, 127, 164, 168, 225, 227, 241, 259, 281, 367, 409, 414, 489, 501, 535, 632, 639, 783, 797, 853, 862, 865, 884, 913, 984, 992, 995, 1002, 1014, 1017, 1032, 1037], "advani": 1047, "advantag": [2, 3, 37, 53, 55, 93, 98, 123, 197, 198, 226, 244, 260, 281, 319, 361, 393, 406, 413, 414, 417, 419, 441, 445, 460, 534, 589, 649, 674, 675, 763, 832, 833, 834, 864, 865, 904, 905, 906, 907, 908, 909, 910, 981, 984, 987, 988, 989, 992, 993, 995, 996, 1000, 1002, 1006, 1007, 1008, 1038], "advic": [387, 419, 622, 623], "advik": 1052, "advis": [11, 198, 233, 361, 377, 379, 409, 417, 437, 646, 652, 654, 660, 662, 672, 687, 960, 984, 988, 994, 996, 1007, 1049], "advoc": 993, "aeberhard": 376, "aesthet": [305, 1008, 1040], "af": 36, "affan": 1041, "affanv14": 1042, "affect": [5, 23, 78, 125, 156, 166, 167, 201, 222, 236, 237, 262, 269, 310, 321, 361, 365, 366, 367, 375, 393, 395, 406, 409, 412, 413, 415, 417, 420, 422, 444, 450, 457, 473, 475, 479, 549, 550, 569, 699, 712, 788, 800, 803, 804, 805, 814, 818, 819, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 884, 885, 895, 909, 991, 995, 1007, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "affili": 374, "affin": [34, 35, 42, 47, 53, 61, 62, 66, 164, 305, 327, 371, 381, 393, 407, 414, 440, 441, 452, 454, 462, 512, 535, 691, 695, 704, 705, 717, 737, 793, 795, 900, 986, 989, 992, 1014, 1029, 1030, 1035, 1036, 1039, 1045, 1046, 1048, 1050], "affinity_matrix": [691, 695], "affinity_matrix_": [440, 452, 691], "affinity_propag": [10, 42], "affinitypropag": [36, 42, 319, 409, 1035, 1038, 1039, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "affirm": 2, "afnlp": 1006, "afor": [896, 897], "aforement": [366, 993], "afraid": 396, "africa": 1002, "afroj": 1052, "aft": [311, 1038], "aftab": 1044, "after": [2, 15, 18, 19, 24, 44, 51, 53, 68, 69, 73, 79, 95, 109, 120, 125, 128, 130, 133, 142, 146, 154, 156, 158, 161, 167, 173, 190, 197, 236, 237, 240, 246, 259, 268, 281, 283, 291, 293, 305, 306, 309, 310, 350, 351, 367, 374, 376, 378, 379, 381, 383, 385, 386, 387, 391, 393, 402, 404, 405, 406, 409, 410, 413, 414, 417, 418, 421, 442, 447, 450, 451, 452, 453, 456, 462, 515, 532, 536, 553, 554, 559, 560, 561, 562, 597, 627, 630, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 692, 712, 726, 756, 794, 797, 798, 803, 804, 853, 860, 864, 877, 883, 904, 909, 910, 981, 982, 986, 988, 992, 996, 997, 1002, 1004, 1006, 1007, 1008, 1013, 1019, 1026, 1028, 1035, 1038, 1042, 1043, 1046, 1047, 1050, 1053], "afterward": [18, 383, 535, 541, 828], "ag": [69, 146, 167, 169, 185, 186, 197, 215, 237, 238, 240, 253, 305, 318, 319, 320, 322, 374, 376, 496, 1017, 1019, 1026], "again": [2, 18, 65, 70, 122, 153, 155, 157, 167, 222, 260, 350, 361, 383, 388, 393, 394, 409, 410, 411, 416, 417, 472, 567, 568, 634, 647, 651, 653, 655, 661, 663, 665, 692, 981, 988, 992, 1006, 1032, 1035, 1043, 1052], "against": [25, 35, 84, 102, 112, 123, 141, 173, 188, 189, 206, 214, 233, 268, 311, 315, 338, 374, 379, 394, 402, 406, 409, 413, 417, 438, 509, 542, 548, 551, 676, 678, 755, 757, 788, 802, 807, 809, 829, 833, 958, 984, 988, 992, 993, 995, 1007, 1011, 1019], "agamemnon": [1042, 1043, 1044, 1045, 1047, 1048], "agarw": [1042, 1043, 1045], "agath": 1049, "agc": 157, "agct": 157, "agent": 1017, "agg": 154, "aggfunc": 270, "agglo": [49, 445, 1027], "agglom": [10, 18, 19, 34, 35, 39, 40, 42, 45, 58, 60, 64, 65, 66, 87, 164, 219, 221, 285, 325, 326, 409, 441, 445, 502, 691, 778, 857, 1014, 1038], "agglomer": [3, 30, 34, 45, 48, 66, 70, 87, 142, 144, 164, 179, 196, 235, 272, 287, 325, 326, 371, 409, 417, 445, 502, 600, 606, 645, 800, 805, 864, 1014, 1030], "agglomerativeclust": [37, 38, 39, 42, 45, 50, 54, 60, 65, 393, 409, 440, 442, 445, 1027, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052], "aggreg": [58, 113, 215, 262, 268, 273, 319, 321, 409, 416, 418, 534, 555, 556, 594, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 993, 995, 1002, 1051], "aggress": [6, 204, 666, 667, 803, 804, 1015, 1030, 1036], "aggressive_elimin": [803, 804, 981], "agnost": [991, 1000], "ago": [10, 1013], "agraw": [1038, 1043, 1049, 1050], "agre": [141, 387, 394, 407, 409, 786, 1019], "agreement": [0, 409, 704, 716, 755, 757, 795, 992], "agricultur": 988, "aguiar": 418, "agundez": 1043, "ahead": 888, "ahmadi": 1046, "ahmadjubair33": 1049, "ahmedbgh": [1050, 1051], "ahn": 1047, "ahuja": [1042, 1049, 1050], "ai": [72, 113, 188, 231, 327, 345, 413], "ai8rahim": 1038, "aic": [136, 164, 175, 181, 183, 184, 185, 191, 205, 216, 248, 501, 651, 653, 654, 655, 656, 798, 865, 884, 981, 1014, 1035, 1042, 1048, 1049], "aic_criterion": 185, "aid": [256, 409, 792, 793, 989, 1017, 1035, 1047], "aidan": 1043, "aidar": 1049, "aig": 10, "aiko": 1050, "aim": [11, 18, 79, 125, 162, 201, 253, 291, 327, 342, 367, 374, 377, 379, 393, 402, 409, 411, 417, 448, 988, 992, 995, 1002, 1007, 1012, 1019, 1027, 1049], "air": [154, 764], "airport": 764, "airspe": 379, "aishgrt1": 1043, "aishwarya": 1043, "aishwaryark": 1042, "aistat": 1005, "aivision2020": 1042, "aj": [494, 1049], "ak": [406, 1049, 1050], "aka": [4, 299, 350, 391, 417, 452, 536, 538, 540, 544, 547, 581, 582, 615, 622, 651, 652, 654, 655, 656, 658, 659, 662, 666, 667, 668, 670, 676, 677, 678, 741, 871, 875, 877, 988, 996, 1006, 1019, 1024, 1037, 1049], "akai": 1048, "akaik": [185, 186, 248, 656, 798, 981, 988], "akash": 1043, "aki": [1049, 1050, 1051], "akihiro": 1053, "akin": [2, 198, 393], "akinkunl": 1045, "akitti": 1040, "akshai": [1039, 1042, 1047], "akshay0724": 1042, "akshayah3": 1039, "akshita": 1050, "al": [0, 9, 76, 77, 109, 124, 185, 296, 374, 376, 405, 409, 411, 414, 416, 417, 418, 451, 498, 519, 520, 528, 535, 541, 544, 563, 682, 683, 719, 720, 839, 841, 861, 862, 897, 940, 941, 988, 989, 992, 998, 1002, 1004, 1007, 1008, 1043, 1048, 1051, 1052], "ala": [1050, 1051], "aladago": 1045, "alam": [1050, 1051], "alan": [1042, 1043, 1046, 1048, 1049], "alastuei": 1038, "albeit": 23, "albert": [0, 226, 369, 1042, 1043, 1044, 1047, 1048], "alberto": [1044, 1048, 1049], "alcalin": 376, "alcohol": [310, 376], "alcorn": 1043, "aldrian": 1039, "aleator": 11, "alec": 1045, "alejandro": [1036, 1041, 1052], "alek": [1048, 1049], "aleksandr": 1042, "aleksandra": 1046, "alemagnani": 1038, "alert": 1042, "alessandro": [1045, 1047, 1050], "alessia": 1048, "alex": [402, 417, 1007, 1035, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "alexand": [0, 398, 409, 414, 535, 870, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1048, 1049, 1052], "alexandercbooth": 1042, "alexandr": [0, 22, 23, 28, 40, 45, 52, 65, 93, 95, 100, 182, 184, 185, 186, 188, 190, 191, 226, 229, 265, 272, 295, 394, 397, 398, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "alexandracraciun": 1047, "alexandru": 439, "alexanmv": 1049, "alexei": 1040, "alexfield": 1041, "alexgoryainov": 1045, "alexi": [1035, 1038, 1039, 1042, 1052], "alexl": [1051, 1052], "alexryndin": 1043, "alexshack": [1045, 1046, 1047], "alfalfa": 17, "alfano": 1042, "alfaro": [0, 369, 1046, 1047, 1048, 1049, 1050], "alfr": 0, "algebra": [366, 377, 382, 391, 414, 417, 462, 870, 1002], "algesheim": 409, "algo": [41, 102], "algo_param": [42, 60], "algorithm": [7, 12, 15, 16, 20, 27, 29, 34, 35, 37, 40, 41, 43, 44, 48, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 68, 77, 78, 83, 93, 95, 109, 110, 111, 115, 118, 126, 164, 173, 184, 186, 200, 211, 213, 220, 222, 225, 229, 230, 236, 241, 244, 245, 246, 249, 256, 259, 268, 283, 289, 290, 292, 296, 305, 307, 310, 315, 316, 317, 320, 322, 327, 328, 329, 337, 350, 351, 352, 361, 365, 367, 372, 373, 374, 375, 376, 379, 380, 381, 382, 387, 388, 392, 393, 395, 404, 405, 407, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 469, 474, 475, 478, 482, 483, 484, 488, 503, 511, 512, 513, 514, 515, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 553, 554, 555, 556, 559, 560, 563, 591, 603, 604, 610, 611, 635, 637, 639, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 708, 717, 719, 735, 737, 743, 774, 778, 779, 793, 795, 797, 798, 832, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 860, 865, 869, 871, 884, 888, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 924, 940, 941, 943, 957, 961, 967, 982, 984, 987, 989, 990, 991, 992, 994, 997, 998, 1002, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1023, 1025, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "algorithm_nam": 41, "ali": [1040, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "alia": [11, 233, 380, 383, 387, 393, 399, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 610, 611, 617, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 966, 998, 1013, 1035, 1049], "alias": [44, 45, 233, 377, 379, 382, 399, 597, 1035, 1039, 1049], "aliased_sample_weight": 233, "align": [32, 123, 125, 162, 218, 243, 270, 352, 393, 689, 693, 984, 995, 1006, 1029, 1030, 1051, 1052], "alihan": 1048, "alik": [414, 990], "alin": 1048, "alison": 1042, "all": [0, 2, 3, 5, 6, 9, 12, 17, 22, 23, 25, 32, 36, 37, 38, 40, 41, 46, 50, 51, 52, 53, 58, 62, 73, 80, 89, 93, 95, 96, 107, 114, 115, 117, 118, 122, 125, 132, 133, 146, 154, 155, 157, 164, 166, 167, 168, 170, 176, 181, 183, 189, 190, 191, 197, 198, 199, 200, 201, 206, 208, 212, 214, 215, 218, 219, 226, 232, 233, 236, 237, 240, 244, 246, 248, 253, 257, 260, 261, 262, 263, 265, 266, 267, 269, 271, 278, 283, 286, 288, 301, 305, 306, 310, 315, 316, 317, 318, 320, 321, 322, 325, 327, 328, 329, 335, 338, 342, 343, 345, 346, 350, 351, 352, 356, 359, 361, 365, 366, 367, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 508, 509, 515, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 705, 709, 713, 714, 715, 716, 717, 718, 720, 721, 723, 726, 728, 729, 730, 732, 733, 735, 736, 737, 738, 742, 745, 746, 748, 750, 751, 753, 756, 761, 769, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 806, 807, 809, 810, 812, 814, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 930, 932, 933, 934, 935, 946, 949, 955, 960, 967, 976, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1054], "all_class": 6, "all_displai": [388, 1050], "all_estim": [388, 1045, 1046, 1050], "all_funct": [388, 1050], "all_label": 901, "all_model": 122, "all_or_ani": [976, 1045], "all_scor": 733, "all_split": [2, 11], "all_uppercas": 417, "allan": [350, 406, 1047], "allclos": [94, 127, 1004, 1027], "allefeld": 1048, "allen": [320, 1038, 1040, 1042, 1045], "allend": [1046, 1048], "allevi": [55, 125, 176, 181, 409, 994], "allison": 320, "alloc": [1, 4, 14, 23, 59, 164, 223, 271, 317, 319, 375, 379, 380, 409, 417, 443, 447, 459, 488, 536, 538, 540, 584, 588, 591, 646, 652, 660, 662, 803, 804, 806, 823, 828, 831, 981, 1002, 1012, 1014, 1029, 1030, 1039, 1040, 1045, 1046, 1052], "allow": [2, 18, 54, 56, 72, 73, 88, 97, 98, 112, 113, 120, 128, 149, 154, 156, 158, 191, 197, 201, 215, 219, 227, 230, 237, 239, 240, 243, 253, 259, 273, 281, 315, 316, 317, 318, 320, 342, 343, 350, 359, 361, 365, 373, 374, 379, 380, 381, 383, 386, 388, 391, 393, 394, 399, 402, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 437, 443, 444, 446, 447, 449, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 523, 524, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 593, 594, 597, 603, 610, 611, 615, 627, 628, 630, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 690, 692, 699, 742, 762, 765, 774, 778, 781, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 811, 814, 818, 821, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 859, 861, 862, 864, 866, 867, 869, 870, 871, 876, 883, 884, 888, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 922, 924, 925, 935, 936, 956, 960, 981, 982, 984, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1019, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "allow_nan": [381, 923, 925, 1051], "allow_nd": [924, 925], "allow_non": 711, "allow_single_clust": [42, 446], "allow_unlabel": [90, 234, 523], "allowed_extens": 503, "allwein": 278, "almeida": [1036, 1037, 1048], "almeidayoel": 1049, "almer": 1042, "almost": [2, 32, 115, 121, 199, 205, 233, 236, 253, 274, 310, 328, 361, 372, 374, 383, 385, 391, 392, 393, 399, 409, 413, 414, 470, 471, 472, 473, 475, 476, 477, 797, 981, 987, 988, 991, 992, 1007, 1027, 1028, 1043, 1048], "almubarak": [1048, 1049], "alon": [167, 201, 265, 338, 393, 406, 648, 669, 680, 742, 1042, 1044], "along": [10, 12, 54, 57, 64, 84, 116, 122, 125, 154, 184, 197, 231, 233, 263, 315, 351, 352, 361, 374, 379, 383, 385, 387, 388, 393, 396, 399, 402, 405, 414, 416, 417, 418, 421, 533, 550, 587, 611, 612, 630, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 676, 678, 681, 682, 683, 684, 685, 686, 779, 780, 792, 800, 814, 873, 874, 877, 878, 881, 882, 883, 884, 889, 890, 891, 893, 894, 895, 920, 943, 967, 973, 981, 988, 995, 1002, 1005, 1017, 1035, 1040, 1041, 1043, 1047, 1048], "alongsid": [46, 379, 385, 393, 396, 418, 825, 826, 827, 828, 992, 999, 1012, 1013], "alonso": [1046, 1048], "alpaydin": 376, "alpha": [2, 3, 5, 6, 8, 10, 11, 12, 15, 22, 24, 29, 32, 35, 38, 40, 43, 50, 54, 58, 63, 73, 80, 84, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 118, 122, 125, 126, 127, 129, 130, 131, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 167, 176, 177, 178, 179, 181, 182, 183, 185, 186, 191, 192, 194, 195, 197, 198, 199, 201, 202, 206, 209, 210, 215, 218, 219, 222, 231, 232, 239, 243, 259, 260, 261, 262, 263, 266, 267, 269, 271, 272, 281, 283, 286, 288, 291, 293, 299, 301, 305, 306, 307, 308, 310, 312, 316, 318, 319, 322, 327, 329, 335, 336, 339, 340, 342, 343, 345, 346, 347, 350, 365, 374, 381, 385, 391, 411, 412, 414, 416, 418, 419, 421, 446, 471, 472, 478, 527, 531, 533, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 560, 595, 596, 598, 611, 613, 615, 616, 623, 631, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 723, 748, 839, 840, 841, 843, 861, 862, 900, 912, 913, 914, 915, 981, 988, 992, 994, 996, 1000, 1005, 1006, 1007, 1008, 1023, 1026, 1028, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "alpha_": [2, 80, 136, 167, 177, 185, 186, 472, 611, 644, 645, 647, 651, 653, 655, 656, 661, 663, 673, 675, 988, 1008, 1023, 1035, 1042], "alpha_1": [644, 645, 988], "alpha_2": [644, 645, 988], "alpha_a": 186, "alpha_b": 186, "alpha_bound": [158, 623], "alpha_h": [13, 414, 538, 540, 547, 1048], "alpha_i": [994, 1007], "alpha_init": [177, 645, 988, 1045], "alpha_max": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "alpha_min": [646, 647, 650, 652, 653, 654, 656, 660, 661, 662, 663, 681, 682, 683, 684], "alpha_optim": 272, "alpha_per_target": [673, 1047], "alpha_w": [13, 414, 538, 540, 547, 1048], "alphabet": [70, 393, 722, 741], "alphalpha": 17, "alphanumer": [393, 588, 589, 591], "alphas_": [185, 186, 647, 650, 651, 653, 654, 655, 656, 661, 663, 682, 683, 1035, 1038, 1048], "alphas_enet": 182, "alphas_lasso": 182, "alphas_positive_enet": 182, "alphas_positive_lasso": 182, "alphavantag": 10, "alphonsu": 1045, "alreadi": [2, 4, 8, 53, 56, 88, 98, 109, 125, 130, 146, 167, 227, 234, 236, 239, 253, 260, 266, 283, 318, 321, 379, 380, 384, 391, 393, 406, 408, 411, 413, 415, 416, 421, 437, 499, 523, 533, 567, 568, 634, 646, 649, 664, 665, 666, 667, 668, 674, 676, 677, 678, 685, 686, 768, 778, 839, 859, 867, 873, 874, 876, 881, 901, 904, 905, 927, 951, 981, 984, 998, 1002, 1003, 1013, 1019, 1024, 1028, 1032, 1036, 1040, 1043, 1047, 1048, 1049, 1050], "alsadi": 1043, "alsaedi": 1048, "alsalhi": [0, 1038, 1039], "alsawadi": 1048, "also": [0, 2, 5, 9, 11, 15, 17, 18, 22, 23, 24, 25, 30, 44, 46, 51, 55, 56, 58, 62, 68, 69, 76, 78, 83, 84, 93, 100, 102, 109, 112, 115, 117, 119, 120, 121, 122, 123, 125, 128, 130, 142, 143, 144, 146, 149, 151, 154, 162, 167, 168, 169, 170, 173, 177, 178, 180, 186, 189, 190, 193, 197, 198, 199, 201, 202, 206, 214, 215, 218, 229, 231, 233, 236, 237, 249, 253, 257, 259, 260, 261, 262, 265, 266, 268, 269, 270, 273, 278, 281, 283, 291, 294, 296, 299, 305, 306, 307, 309, 310, 315, 316, 317, 318, 322, 330, 334, 335, 336, 338, 340, 342, 350, 351, 352, 355, 356, 359, 361, 365, 366, 367, 372, 373, 374, 376, 377, 378, 379, 381, 382, 385, 387, 388, 391, 392, 393, 394, 396, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 437, 438, 439, 441, 442, 445, 446, 447, 448, 450, 452, 462, 463, 465, 467, 482, 484, 492, 496, 498, 503, 508, 532, 533, 535, 536, 541, 546, 549, 551, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 622, 632, 633, 635, 643, 644, 645, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 672, 676, 678, 681, 684, 687, 691, 694, 695, 699, 710, 713, 723, 729, 730, 738, 743, 763, 779, 780, 783, 784, 787, 797, 798, 800, 803, 804, 814, 817, 820, 826, 827, 828, 829, 830, 831, 833, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 860, 861, 862, 864, 866, 867, 872, 873, 877, 881, 884, 889, 893, 906, 909, 912, 913, 914, 915, 924, 943, 949, 956, 960, 981, 982, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1019, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "alt": [17, 260, 329, 350, 351, 352, 374, 387, 488, 1028], "altai": 1045, "alter": [23, 162, 381, 393, 729, 730, 738, 783, 784, 787, 1040, 1044, 1047], "altern": [2, 24, 69, 84, 116, 117, 123, 125, 130, 169, 181, 197, 215, 227, 246, 249, 253, 268, 315, 342, 350, 351, 352, 361, 374, 382, 383, 385, 391, 393, 394, 396, 402, 403, 405, 406, 409, 410, 411, 413, 414, 416, 417, 419, 441, 442, 445, 446, 447, 452, 458, 463, 499, 538, 540, 541, 547, 553, 554, 557, 558, 559, 560, 564, 565, 566, 582, 588, 589, 591, 617, 620, 643, 692, 706, 708, 771, 774, 778, 781, 802, 833, 868, 874, 877, 890, 897, 899, 912, 913, 914, 915, 959, 960, 986, 988, 989, 991, 992, 995, 996, 1000, 1002, 1004, 1005, 1007, 1008, 1013, 1023, 1028, 1030, 1040, 1042, 1048, 1049, 1053], "alternate_sign": [6, 417, 582, 589, 1042], "although": [2, 7, 23, 116, 130, 166, 194, 215, 226, 245, 281, 342, 361, 367, 381, 393, 409, 410, 414, 417, 496, 817, 820, 875, 991, 993, 994, 995, 998, 1008, 1019, 1026, 1027, 1028, 1035, 1043, 1050], "altman": [628, 982], "altogeth": [119, 385, 1043], "alva": 1045, "alvaro": [1041, 1043], "alvin": 1043, "alwai": [115, 119, 122, 167, 176, 197, 215, 223, 230, 253, 262, 265, 269, 312, 335, 342, 345, 351, 361, 365, 366, 373, 377, 379, 380, 381, 385, 392, 393, 396, 402, 406, 409, 410, 413, 416, 417, 418, 419, 426, 432, 443, 449, 464, 465, 467, 469, 482, 483, 484, 488, 496, 508, 509, 544, 549, 551, 552, 554, 556, 558, 559, 560, 561, 562, 564, 565, 568, 570, 581, 588, 589, 591, 594, 611, 627, 628, 630, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 676, 678, 679, 695, 705, 709, 715, 721, 722, 723, 724, 732, 734, 735, 739, 782, 785, 786, 797, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 837, 838, 847, 848, 855, 856, 862, 869, 877, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 905, 906, 907, 909, 910, 912, 913, 915, 942, 951, 952, 981, 982, 984, 986, 988, 991, 992, 995, 998, 1000, 1004, 1005, 1007, 1008, 1017, 1019, 1026, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "alyssa": [1038, 1042], "alyssaq": 1041, "am": [68, 73, 78, 130, 168, 350, 384, 411, 474, 493, 1042], "amai": 1051, "aman": [1041, 1042, 1043, 1049, 1050], "amanda": [1043, 1046, 1047, 1048, 1049], "amar": [1049, 1050, 1051, 1053], "amax": 76, "amazon": 10, "amber": 393, "ambient": 222, "ambigu": [260, 384, 417, 572, 712, 941, 995, 1044, 1046, 1048], "ambival": 58, "ambrosio": 1042, "ambroz": [1045, 1046], "amelia": 982, "amen": [385, 391, 419, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 981], "america": [9, 10, 78, 296, 374, 851, 1002], "american": [9, 10, 68, 79, 374, 409, 411, 415, 416, 417, 469, 474, 731, 884], "ames_h": 236, "amg": [44, 64, 409, 452, 462, 691, 695, 1045, 1049, 1050], "amherst": 374, "ami": [35, 47, 56, 409, 704], "amicel": [1035, 1038], "amin": 76, "aminaka": 1039, "amit": [1035, 1049, 1050], "amlan": 1041, "amo": 1038, "amol": 1048, "among": [25, 157, 168, 170, 173, 197, 248, 281, 359, 367, 374, 381, 393, 394, 406, 407, 412, 447, 449, 512, 519, 794, 829, 847, 852, 854, 906, 909, 912, 913, 914, 915, 981, 984, 992, 993, 999, 1002, 1007, 1035, 1041, 1042, 1045, 1052], "amongst": [10, 1008], "amor": [0, 35, 55, 115, 125, 176, 181, 236, 260, 262, 310, 350, 351, 352, 390, 1049, 1050, 1051, 1052], "amormachin": 1038, "amort": 995, "amount": [6, 10, 43, 51, 64, 76, 79, 93, 97, 110, 112, 155, 167, 181, 201, 215, 231, 253, 317, 325, 328, 330, 338, 345, 352, 365, 366, 367, 391, 407, 409, 411, 414, 416, 417, 418, 443, 454, 469, 538, 539, 541, 543, 563, 596, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 665, 681, 684, 692, 803, 804, 844, 845, 850, 885, 900, 901, 914, 915, 987, 988, 991, 994, 996, 1002, 1004, 1005, 1006, 1007, 1026, 1027, 1048, 1052], "amount_fraud": 253, "amount_iter": 328, "amount_label": 328, "amount_test": 253, "amount_train": 253, "amourav": 1044, "amplitud": [122, 154, 156, 191, 988], "amplitude_nois": 38, "amput": 1013, "amrcod": 1049, "amsterdam": [402, 872, 1003], "amuel": [72, 113, 188, 231, 327, 345], "amy12xx": 1047, "amzn": 10, "an": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 19, 23, 24, 25, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 71, 73, 76, 77, 78, 79, 87, 93, 94, 95, 96, 97, 98, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 133, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 158, 160, 161, 163, 164, 166, 167, 168, 169, 173, 175, 176, 177, 180, 181, 185, 192, 197, 198, 199, 201, 202, 204, 205, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 229, 230, 231, 232, 233, 234, 236, 240, 243, 244, 246, 248, 249, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 272, 275, 281, 283, 286, 289, 290, 291, 294, 295, 296, 305, 310, 311, 312, 316, 317, 318, 320, 321, 322, 326, 330, 334, 335, 337, 338, 340, 341, 342, 350, 351, 352, 355, 358, 359, 361, 365, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 612, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 709, 711, 712, 718, 720, 721, 727, 729, 730, 734, 735, 737, 742, 743, 745, 746, 748, 750, 751, 753, 756, 758, 759, 763, 764, 766, 767, 768, 769, 770, 773, 775, 776, 777, 778, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 919, 921, 922, 924, 925, 927, 928, 931, 935, 936, 937, 939, 940, 941, 943, 945, 948, 949, 950, 951, 952, 953, 955, 956, 957, 960, 962, 963, 966, 967, 973, 976, 978, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1022, 1023, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "ana": [1046, 1048], "anaconda": [0, 366, 377, 383], "anak": 1047, "analog": [2, 17, 124, 385, 416, 992, 993, 1007, 1044], "analogi": [991, 992], "analys": [218, 359, 414, 803, 804, 989, 1012, 1017], "analysen": 450, "analysi": [3, 5, 7, 8, 13, 18, 23, 27, 33, 34, 35, 55, 61, 63, 66, 76, 77, 78, 79, 80, 83, 84, 88, 90, 92, 94, 95, 97, 98, 99, 101, 102, 104, 119, 137, 162, 164, 167, 186, 219, 242, 244, 248, 249, 250, 253, 256, 259, 260, 264, 270, 284, 285, 286, 294, 295, 297, 305, 310, 345, 351, 368, 371, 374, 376, 379, 381, 394, 405, 409, 411, 416, 417, 421, 439, 447, 448, 473, 475, 476, 482, 483, 485, 502, 504, 512, 515, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 556, 631, 638, 688, 690, 691, 692, 693, 710, 719, 725, 726, 756, 788, 789, 792, 793, 797, 800, 826, 830, 846, 853, 864, 865, 870, 880, 884, 892, 940, 941, 982, 988, 989, 991, 992, 1002, 1011, 1012, 1014, 1015, 1017, 1020, 1029, 1030, 1035, 1036, 1037, 1039, 1044], "analyst": 867, "analyt": [98, 414, 419, 532, 620, 708, 982, 986, 992, 1011, 1017], "analyz": [2, 5, 15, 181, 261, 268, 320, 350, 352, 384, 385, 409, 417, 503, 588, 589, 591, 788, 989, 992, 999, 1000, 1008, 1028, 1035, 1044], "anam": 1052, "anand": [1043, 1047], "ananiad": 1006, "anantharam": 1049, "anavelyz": 1048, "ana\u00ebl": 1045, "anbari": 528, "anchor": 270, "ander": [1039, 1045], "andersen": [743, 1049], "anderson": [9, 296, 374, 498, 1041, 1047], "andi": [1035, 1042], "ando": 1040, "andr": [1042, 1049], "andrea": [0, 29, 72, 98, 113, 188, 231, 306, 307, 327, 345, 346, 394, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "andreh7": 1042, "andrei": [1050, 1052, 1053], "andrew": [44, 409, 462, 691, 695, 717, 737, 795, 879, 996, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "andrewww": 1043, "andrii": 1049, "andriushchenko": [1041, 1042], "androutsopoulo": [839, 994], "andrzej": [538, 540, 547], "andr\u00e1": [1048, 1049, 1050, 1051], "andr\u00e9": [1048, 1049, 1051], "ands": 875, "andyscanzio": 1052, "ang": 1042, "angel": [0, 398], "angela": [1045, 1046, 1050], "angelaambroz": 1046, "angermuel": [1039, 1040], "angl": [12, 32, 96, 146, 243, 244, 245, 248, 249, 376, 414, 531, 537, 539, 542, 543, 545, 546, 548, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 682, 683, 684, 685, 686, 692, 989, 990, 1015, 1030, 1035], "angmar": 17, "angu": [1042, 1043, 1049], "angular": [415, 692, 764], "anh": [538, 540, 547], "ani": [2, 6, 7, 11, 12, 17, 42, 44, 53, 55, 65, 127, 141, 146, 155, 156, 166, 167, 168, 169, 170, 186, 197, 201, 215, 226, 229, 230, 233, 244, 248, 249, 253, 259, 260, 262, 265, 268, 278, 296, 305, 306, 309, 315, 317, 318, 320, 338, 342, 352, 361, 365, 366, 367, 373, 374, 376, 377, 379, 381, 383, 384, 385, 387, 392, 393, 394, 396, 399, 402, 404, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 434, 440, 446, 448, 449, 450, 452, 454, 456, 457, 461, 464, 467, 488, 489, 508, 509, 523, 534, 537, 539, 546, 551, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 588, 589, 591, 593, 603, 610, 611, 620, 627, 632, 633, 645, 648, 658, 659, 666, 667, 668, 669, 676, 677, 678, 679, 680, 692, 696, 699, 700, 704, 716, 717, 719, 724, 736, 737, 752, 755, 757, 774, 778, 779, 780, 781, 792, 793, 795, 800, 803, 804, 812, 813, 833, 836, 844, 845, 850, 854, 863, 864, 868, 869, 873, 875, 877, 878, 885, 894, 895, 898, 901, 904, 905, 912, 913, 914, 915, 916, 918, 920, 924, 925, 962, 976, 981, 982, 984, 987, 988, 989, 992, 993, 994, 995, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1016, 1019, 1021, 1025, 1026, 1028, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aniket": [1050, 1052], "anil": [409, 452, 462], "anim": [350, 417], "anirban": 417, "aniruddha": 1043, "anish": [1040, 1041], "anisha": 1045, "aniso": [42, 60], "anisotrop": [55, 151, 419, 617, 619, 622], "anisotropicli": [42, 60], "anjirbag": 1043, "ankan": 1040, "ankerst": [409, 450, 457], "ankit": [1038, 1045, 1047, 1049], "ankit810": 1046, "ankita": 1043, "ankur": [1040, 1051], "ann": [1035, 1047, 1049], "anna": 1043, "annaayzenshtat": 1043, "annal": [146, 181, 185, 376, 416, 474, 516, 517, 518, 559, 560, 656, 988], "annau": 1048, "annegnx": 1051, "anno": [692, 989], "annoi": 366, "annot": [2, 7, 24, 132, 144, 173, 219, 263, 266, 350, 379, 380, 381, 409, 716, 918, 992, 1008, 1044], "annotationbbox": 219, "announc": [315, 316, 317, 318, 319, 320, 321, 322, 383], "annual": [376, 409, 726, 756, 901, 992, 1005], "anomali": [7, 78, 126, 164, 211, 225, 236, 241, 289, 290, 374, 407, 469, 512, 522, 563, 639, 677, 850, 865, 908, 998, 1012, 1014, 1041, 1042], "anomaly_algorithm": 226, "anomaly_frac": 236, "anoth": [2, 35, 93, 98, 109, 120, 124, 146, 149, 157, 162, 167, 186, 201, 205, 223, 226, 233, 237, 244, 253, 259, 261, 262, 265, 269, 273, 293, 350, 352, 355, 361, 365, 367, 373, 374, 377, 379, 381, 385, 391, 393, 402, 405, 409, 413, 414, 416, 417, 418, 420, 442, 444, 452, 455, 462, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 508, 538, 540, 547, 673, 676, 692, 709, 719, 806, 822, 823, 863, 864, 885, 981, 982, 987, 988, 989, 992, 993, 995, 998, 1002, 1006, 1007, 1019, 1026, 1027, 1028, 1044, 1045, 1052], "anova": [8, 52, 72, 140, 142, 145, 146, 147, 164, 257, 333, 348, 410, 504, 515, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 713, 826, 830, 864, 865, 884, 904, 909, 1007, 1014], "anova__percentil": [52, 341], "anova_filt": 143, "anova_svm": 143, "ansam": 1051, "answer": [136, 166, 259, 379, 391, 402, 408, 726, 756, 992, 1017], "ant": [718, 754, 992], "anthoni": [1040, 1042, 1043], "anthony22": [1050, 1051], "anti": [181, 361, 606, 839, 994], "anti_alias": [44, 45, 1027], "anticip": 11, "antoin": [1035, 1037, 1038, 1039, 1042], "antoni": [1039, 1041, 1047, 1050], "antonin": 1042, "antonio": [1043, 1045], "anubhav": 1043, "anuja": 1045, "anulekh": 1050, "anupam": [898, 1004, 1050], "any_method": 952, "anymor": [125, 169, 197, 261, 315, 316, 338, 361, 383, 410, 670, 1041, 1044, 1047, 1048, 1049, 1051, 1052], "anyon": [379, 394, 408, 1016, 1017], "anyth": [352, 383, 385, 393, 399, 410, 413, 952, 956, 1049], "anywai": [7, 350, 381, 665, 685, 686], "anywher": 306, "anz": 1036, "aoif": [708, 992], "ap": [266, 707, 708, 992], "apart": [167, 318, 338, 391, 393, 399, 410, 412, 418, 725, 1007, 1017, 1043], "api": [0, 6, 10, 25, 48, 54, 69, 105, 106, 114, 157, 164, 225, 227, 233, 237, 238, 241, 256, 261, 268, 269, 283, 322, 351, 352, 367, 368, 372, 373, 379, 380, 382, 383, 388, 389, 391, 392, 394, 396, 402, 408, 414, 416, 417, 419, 423, 426, 427, 428, 431, 433, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 504, 508, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 563, 564, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 671, 677, 688, 689, 690, 691, 692, 702, 797, 798, 803, 804, 806, 823, 830, 848, 850, 852, 853, 856, 860, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 908, 909, 958, 960, 976, 981, 990, 991, 992, 995, 1002, 1006, 1012, 1013, 1014, 1017, 1019, 1023, 1025, 1030, 1032, 1033, 1034, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "apk": 396, "apostolo": 1050, "appar": [83, 994, 1017], "appdata": 396, "appeal": 394, "appear": [0, 6, 44, 46, 112, 167, 170, 254, 256, 257, 289, 290, 299, 301, 306, 326, 342, 350, 351, 352, 374, 377, 379, 384, 393, 411, 414, 488, 489, 555, 567, 568, 579, 610, 627, 628, 630, 697, 700, 702, 712, 716, 718, 782, 789, 801, 818, 839, 840, 841, 842, 843, 906, 909, 943, 988, 994, 998, 1035, 1043, 1047, 1048], "append": [5, 6, 7, 10, 11, 15, 23, 31, 35, 38, 42, 48, 59, 69, 100, 112, 113, 115, 120, 122, 125, 162, 170, 190, 201, 202, 204, 205, 212, 215, 231, 232, 259, 262, 268, 269, 272, 299, 300, 311, 328, 338, 341, 350, 351, 352, 355, 359, 385, 393, 410, 417, 658, 659, 904, 905, 911, 931, 1002, 1023], "appendix": [645, 676, 988, 1002], "appl": [10, 365, 377, 391, 993], "appli": [7, 13, 17, 23, 25, 30, 38, 42, 44, 45, 53, 54, 56, 60, 69, 73, 84, 88, 93, 94, 99, 101, 103, 114, 115, 120, 122, 142, 149, 167, 169, 181, 186, 201, 202, 211, 218, 219, 220, 226, 231, 233, 259, 260, 262, 271, 273, 281, 292, 305, 309, 310, 316, 338, 342, 352, 359, 361, 365, 371, 379, 381, 387, 391, 392, 393, 399, 405, 406, 407, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 440, 446, 452, 462, 464, 465, 467, 469, 474, 482, 483, 484, 485, 508, 509, 516, 517, 518, 524, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 548, 549, 550, 553, 554, 557, 558, 559, 560, 564, 565, 566, 588, 589, 590, 591, 627, 632, 633, 638, 639, 641, 642, 658, 659, 668, 676, 677, 678, 691, 699, 701, 707, 726, 756, 758, 759, 781, 788, 792, 793, 800, 814, 830, 833, 839, 840, 841, 842, 843, 853, 863, 864, 873, 880, 881, 884, 889, 890, 892, 893, 894, 895, 900, 911, 912, 913, 914, 915, 924, 930, 933, 940, 941, 964, 982, 984, 988, 989, 990, 991, 992, 994, 996, 998, 1000, 1002, 1006, 1007, 1008, 1009, 1011, 1017, 1036, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "applic": [1, 3, 14, 17, 47, 53, 78, 164, 173, 197, 214, 220, 252, 253, 262, 305, 365, 367, 374, 376, 379, 381, 385, 387, 388, 391, 393, 406, 408, 409, 413, 414, 415, 416, 419, 421, 444, 446, 452, 496, 498, 532, 533, 534, 553, 554, 629, 688, 689, 690, 694, 712, 729, 730, 738, 783, 784, 787, 830, 981, 988, 989, 990, 991, 992, 996, 998, 1004, 1008, 1012, 1013, 1014, 1016, 1017, 1026, 1028, 1035, 1036, 1041, 1043, 1046], "apply_along_axi": 302, "appr": 619, "appreci": [0, 379, 391], "approach": [3, 6, 56, 61, 64, 97, 146, 149, 161, 167, 170, 179, 185, 197, 199, 205, 215, 218, 253, 278, 311, 342, 350, 351, 352, 367, 378, 379, 385, 388, 393, 396, 402, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 437, 443, 446, 448, 452, 462, 520, 532, 582, 589, 611, 635, 658, 659, 674, 675, 833, 849, 941, 981, 982, 988, 989, 992, 993, 995, 996, 1002, 1006, 1007, 1011, 1012, 1017, 1021, 1026, 1027, 1039, 1051], "appropri": [53, 55, 100, 154, 167, 201, 233, 268, 273, 355, 361, 377, 379, 381, 387, 393, 402, 406, 407, 409, 413, 415, 416, 420, 444, 450, 457, 489, 490, 491, 496, 500, 501, 502, 504, 505, 510, 577, 582, 591, 592, 595, 596, 598, 599, 600, 672, 674, 687, 709, 846, 847, 848, 850, 852, 854, 855, 856, 976, 988, 991, 992, 1002, 1039, 1042, 1048, 1051, 1053], "approv": [379, 394, 416], "approx": [25, 93, 231, 414, 416, 417, 992, 999, 1006], "approxim": [2, 3, 25, 31, 44, 51, 78, 97, 98, 102, 113, 121, 122, 146, 150, 167, 174, 177, 193, 197, 198, 211, 215, 220, 223, 225, 226, 229, 232, 241, 249, 259, 264, 274, 275, 284, 285, 292, 297, 305, 307, 308, 310, 315, 318, 350, 352, 357, 358, 361, 368, 371, 376, 388, 391, 393, 405, 406, 410, 412, 413, 414, 416, 419, 421, 422, 423, 433, 449, 469, 470, 473, 474, 475, 476, 482, 483, 484, 491, 496, 502, 521, 524, 533, 534, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 559, 560, 582, 589, 610, 611, 619, 638, 639, 640, 641, 642, 645, 657, 658, 659, 672, 674, 676, 677, 679, 687, 692, 758, 759, 764, 797, 801, 818, 825, 829, 830, 844, 845, 848, 852, 854, 855, 856, 860, 864, 865, 870, 874, 876, 877, 881, 893, 904, 909, 910, 940, 941, 966, 985, 986, 987, 988, 989, 991, 995, 996, 997, 998, 999, 1000, 1004, 1006, 1007, 1008, 1012, 1013, 1014, 1028, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "approximate_nearest_neighbor": [283, 297, 1014], "approximateident": 1036, "april": [374, 664, 685, 686, 1039, 1047, 1052], "apriori": 215, "apt": [377, 387, 396], "aptitud": 167, "aqua": 268, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 30, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 64, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 83, 84, 88, 90, 93, 95, 98, 100, 103, 107, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 142, 143, 145, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 206, 208, 215, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 244, 245, 246, 248, 252, 254, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 281, 283, 285, 288, 289, 293, 296, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 325, 327, 328, 329, 330, 336, 338, 340, 342, 345, 346, 350, 351, 352, 355, 359, 361, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 508, 509, 510, 512, 515, 516, 517, 518, 519, 520, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 748, 750, 751, 753, 754, 756, 757, 761, 762, 763, 765, 767, 768, 769, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 928, 929, 930, 933, 935, 940, 941, 942, 945, 946, 948, 949, 952, 955, 956, 958, 960, 963, 966, 967, 971, 972, 973, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "arab": 627, "arabi": [409, 705, 715, 786], "aradwad": 1046, "arafat": 1041, "arai": 1045, "arang": [2, 9, 11, 12, 38, 56, 58, 63, 71, 77, 78, 100, 103, 118, 119, 121, 123, 124, 128, 132, 142, 149, 151, 156, 157, 161, 162, 170, 181, 197, 200, 202, 206, 221, 229, 231, 254, 259, 262, 267, 270, 281, 283, 296, 299, 307, 318, 325, 326, 328, 330, 338, 344, 350, 352, 357, 358, 359, 361, 391, 405, 413, 417, 465, 544, 830, 879, 883, 987, 988, 996, 1002, 1006, 1024], "aravindh": 1050, "arbitarili": 350, "arbitrari": [2, 53, 84, 93, 94, 95, 114, 156, 176, 197, 214, 215, 257, 305, 309, 311, 317, 350, 359, 366, 379, 391, 393, 402, 410, 413, 414, 416, 417, 421, 446, 450, 455, 457, 465, 532, 533, 559, 560, 581, 639, 648, 669, 680, 688, 742, 789, 801, 802, 807, 809, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 868, 870, 883, 981, 983, 984, 988, 989, 992, 995, 1002, 1013, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1045, 1049, 1051], "arbitrarili": [150, 244, 249, 350, 393, 419, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 721, 722, 723, 724, 746, 785, 789, 837, 838, 847, 855, 862, 885, 905, 907, 910, 913, 915, 992, 995, 1002, 1008], "arc": [376, 416], "archana": [1045, 1047], "archit": 1041, "architectur": [377, 381, 387, 391, 396, 402, 468, 902, 996, 1010, 1017, 1035, 1052], "archiv": [6, 278, 373, 374, 376, 377, 409, 442, 500, 502, 510, 758, 759, 990, 1007, 1028], "archive_filenam": 6, "archive_path": 6, "archive_sha256": 6, "arci": [708, 992], "arcidiacono": [1049, 1050, 1052], "arcsin": [699, 764], "arctan": [32, 244, 249, 375, 518], "arctan2": [243, 245, 248], "ard": [176, 644, 645], "ard_poli": 176, "ard_scor": 176, "ardregress": [176, 181, 645, 933, 988, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "area": [9, 11, 126, 146, 197, 215, 236, 256, 259, 266, 268, 269, 338, 342, 343, 346, 376, 379, 383, 391, 409, 417, 702, 706, 707, 708, 742, 788, 789, 989, 992, 995, 1011, 1037], "aren": [233, 350, 374, 383, 396, 407, 726, 756, 997, 1045, 1047], "arezki": 1035, "arfa": 1041, "arff": [320, 379, 496, 1047, 1050, 1051], "arg": [233, 300, 342, 380, 393, 414, 416, 423, 571, 572, 573, 574, 575, 576, 577, 578, 617, 699, 868, 960, 988, 994, 995], "arg1": 1028, "arg2": 1028, "arg3": 1028, "arg_sort_bi": 11, "argentina": 764, "argmax": [24, 100, 258, 272, 381, 416, 569, 832, 912, 1007, 1048], "argmin": [10, 121, 258, 381, 411, 531, 537, 545, 546, 685, 779, 780, 1008], "argpartit": 1042, "argsort": [13, 15, 17, 18, 19, 121, 123, 169, 170, 197, 215, 315, 325, 326, 350, 351, 374, 1000], "argument": [70, 198, 227, 230, 233, 366, 373, 374, 379, 380, 382, 384, 385, 387, 388, 391, 393, 409, 410, 413, 414, 416, 418, 420, 421, 423, 427, 431, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 457, 459, 461, 463, 468, 469, 493, 496, 503, 508, 533, 535, 536, 538, 540, 551, 559, 560, 563, 567, 568, 569, 570, 577, 581, 582, 588, 589, 591, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 631, 639, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 668, 676, 677, 681, 684, 688, 692, 696, 698, 699, 700, 701, 702, 714, 719, 735, 742, 763, 779, 780, 806, 823, 825, 826, 827, 828, 832, 833, 836, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 861, 864, 868, 902, 908, 918, 922, 931, 936, 959, 960, 961, 962, 976, 981, 984, 988, 989, 990, 992, 995, 999, 1000, 1007, 1008, 1019, 1023, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "argv": 230, "ari": [35, 56, 351, 409, 705, 1040, 1046], "aria": [1043, 1044, 1050], "aric": 15, "arida": [54, 1044, 1045, 1047, 1049, 1052], "ariel": [4, 374, 1035, 1041], "ariga": 1041, "arik": 1043, "arima": 1012, "aris": [167, 262, 345, 366, 384, 409, 715, 988, 989, 1047], "arisa": [1049, 1050], "arithmet": [232, 385, 387, 409, 551, 648, 669, 680, 704, 717, 736, 737, 757, 795, 851, 992, 1043], "ari\u00f1o": 1038, "arjona": 1044, "arka204": [1048, 1050], "arm": [377, 379, 387, 981], "arm64": [377, 382], "arm64v8": 387, "armstrong": 1047, "arnaud": [0, 398, 1036, 1037, 1038, 1039, 1040, 1041], "arnaudov": [1047, 1049], "arnaudstiegl": 1045, "arnold": [1035, 1036], "arnoldi": [688, 689, 693], "aroma": 311, "arora": [1043, 1050], "around": [0, 2, 24, 35, 50, 83, 109, 112, 122, 155, 168, 173, 233, 236, 253, 262, 273, 302, 325, 327, 328, 338, 341, 342, 350, 351, 352, 361, 374, 376, 379, 385, 391, 408, 409, 413, 414, 417, 471, 472, 515, 544, 620, 640, 649, 668, 704, 742, 797, 806, 823, 850, 852, 854, 855, 856, 884, 988, 989, 991, 992, 998, 1002, 1006, 1012, 1013, 1016, 1017, 1026, 1028, 1039, 1040], "arpack": [10, 17, 42, 44, 64, 68, 219, 322, 414, 451, 452, 453, 462, 535, 541, 544, 688, 689, 691, 693, 695, 989, 1041, 1042, 1047, 1051, 1052, 1053], "arpanchowdhri": 1045, "arrai": [4, 5, 6, 8, 9, 10, 11, 12, 17, 30, 31, 32, 38, 42, 44, 46, 51, 52, 59, 60, 62, 68, 70, 79, 83, 90, 94, 95, 121, 123, 125, 126, 129, 132, 143, 146, 150, 151, 152, 157, 167, 176, 178, 181, 190, 191, 194, 197, 198, 204, 214, 219, 220, 226, 230, 233, 236, 237, 240, 243, 244, 245, 247, 248, 253, 254, 255, 257, 259, 260, 263, 264, 268, 281, 296, 308, 315, 318, 319, 321, 322, 326, 334, 341, 342, 350, 358, 361, 365, 366, 372, 373, 374, 379, 380, 381, 382, 384, 385, 387, 389, 391, 392, 393, 402, 405, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 515, 519, 523, 524, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 583, 584, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 929, 930, 939, 940, 941, 942, 943, 945, 946, 947, 954, 955, 956, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 979, 982, 987, 988, 990, 992, 993, 995, 996, 998, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1017, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "arrang": [18, 281, 632, 835, 836, 837, 838, 992], "array_api": 404, "array_api_compat": 404, "array_api_dispatch": [404, 468, 902], "array_api_support": [381, 404], "array_convert": 925, "array_equ": [569, 1042], "array_lik": 939, "array_paramet": 379, "array_split": 1023, "array_sym": 978, "arrayfunc": [388, 407], "arrow": [24, 1049], "arrow_arg": 7, "arrowprop": [7, 24], "arrowstyl": 7, "arroyo": 1049, "art": [317, 385, 649, 692, 1012, 1017], "artem": [1039, 1042, 1052], "arth": 1049, "arthur": [212, 213, 409, 447, 460, 1040, 1041, 1042, 1043, 1044, 1047, 1049], "arthurmello": 1049, "articl": [0, 15, 68, 350, 374, 378, 379, 387, 413, 422, 475, 705, 988, 992, 1028, 1048], "artiem": 1043, "artifact": [2, 12, 44, 45, 305, 367, 383, 1030], "artifici": [116, 119, 127, 146, 162, 201, 218, 232, 253, 302, 350, 374, 375, 376, 384, 405, 407, 409, 413, 414, 535, 696, 834, 861, 862, 985, 989, 991, 993, 999, 1004, 1008, 1013, 1017, 1035], "artist": [386, 438, 632, 698, 700, 701, 702, 806, 823, 918], "artsiom": 1042, "artsion": 1041, "artstein": 716, "artur": [1050, 1051], "arturo": [0, 35, 55, 115, 125, 176, 181, 236, 260, 262, 310, 350, 351, 352, 390, 1049, 1050, 1051, 1052], "arturoamor": 1049, "artwork": 1010, "aruku": [1043, 1044], "arunav": 1046, "arunava": 1043, "arxiv": [379, 462], "arya": 1043, "as_float_arrai": 388, "as_fram": [2, 3, 11, 69, 73, 115, 119, 125, 130, 154, 167, 168, 169, 170, 185, 186, 197, 205, 213, 215, 236, 240, 253, 273, 278, 283, 286, 301, 310, 311, 315, 317, 319, 320, 373, 374, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 1045, 1046, 1047, 1048, 1051], "asanyarrai": 381, "asarrai": [6, 15, 197, 215, 302, 327, 350, 351, 381, 393, 404, 726, 756, 852, 854, 855, 856, 1002, 1007, 1052], "ascend": [18, 69, 169, 311, 416, 450, 456, 594, 627, 635, 916, 917, 918, 1006, 1045, 1051], "ascent": [154, 419], "ascii": [9, 296, 417, 487, 588, 589, 591], "ascontiguousarrai": 541, "asctim": 93, "aseem": 1042, "asgd": [204, 1006], "ash": [7, 376, 1038, 1041], "ashah002": [1050, 1051, 1052], "ashim": 1045, "ashimb9": 1045, "ashimin": 1048, "ashish": [1048, 1051], "ashra": 644, "ashutosh": [1042, 1043, 1045, 1047], "ashvith": 1048, "ashwin": [1050, 1051], "asia": [259, 1002], "asian": 417, "asid": [120, 205, 402, 559, 560, 561, 562, 666, 667, 668, 676, 678, 861, 862], "asish": [1041, 1042], "ask": [0, 161, 162, 259, 368, 378, 379, 383, 384, 387, 393, 394, 402, 418, 846, 847, 848, 850, 852, 854, 855, 856, 1010, 1016, 1051], "asnt": 1041, "aspect": [5, 56, 84, 93, 153, 168, 218, 226, 268, 273, 292, 365, 366, 367, 379, 393, 394, 409, 491, 658, 659, 1008, 1017, 1052], "aspir": [146, 376, 379], "ass": [78, 79, 411, 474], "assembl": [281, 312, 352, 864], "assert": [6, 15, 46, 94, 230, 259, 268, 366, 382, 1013], "assert_all_finit": [365, 388, 468], "assert_allclos": 381, "assert_array_equ": 417, "assert_warn": 1048, "assert_warns_messag": 1048, "assertionerror": 1042, "assess": [3, 11, 35, 58, 109, 120, 122, 167, 197, 215, 236, 255, 256, 258, 262, 406, 416, 701, 743, 991, 992, 998, 1013, 1050], "assia": 1044, "assiaben": 1044, "assign": [6, 15, 18, 32, 35, 44, 47, 55, 56, 58, 109, 114, 126, 128, 142, 144, 151, 210, 215, 226, 231, 234, 253, 299, 307, 312, 330, 345, 351, 374, 379, 381, 393, 405, 413, 414, 416, 417, 418, 419, 440, 441, 442, 443, 445, 446, 447, 448, 449, 452, 454, 456, 459, 460, 461, 462, 515, 536, 561, 562, 593, 594, 607, 608, 610, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 716, 717, 720, 729, 730, 731, 738, 739, 743, 755, 757, 783, 784, 786, 787, 793, 794, 795, 800, 803, 804, 806, 809, 814, 823, 825, 826, 827, 828, 831, 848, 854, 856, 857, 858, 871, 899, 900, 904, 905, 906, 907, 908, 909, 910, 986, 988, 991, 992, 993, 994, 995, 996, 997, 1002, 1005, 1017, 1019, 1028, 1035, 1040, 1042, 1043, 1052, 1053], "assign_label": [44, 409, 452, 462], "assist": [0, 379, 391, 408, 1002, 1016, 1017], "associ": [0, 9, 22, 23, 78, 109, 149, 166, 167, 201, 246, 253, 311, 325, 327, 350, 387, 409, 411, 413, 414, 416, 417, 427, 446, 449, 469, 470, 471, 472, 473, 474, 475, 476, 493, 494, 495, 524, 557, 561, 564, 605, 606, 630, 645, 658, 659, 666, 668, 674, 675, 676, 689, 695, 699, 731, 739, 822, 827, 847, 855, 869, 881, 893, 901, 910, 912, 914, 930, 991, 992, 995, 1002, 1005, 1017, 1027, 1035, 1047, 1051], "assum": [7, 32, 53, 55, 156, 162, 166, 167, 186, 197, 215, 226, 229, 236, 249, 259, 268, 305, 345, 352, 366, 378, 379, 381, 383, 385, 391, 392, 393, 395, 402, 405, 406, 409, 411, 413, 414, 416, 417, 419, 420, 425, 430, 437, 439, 444, 446, 450, 457, 463, 469, 470, 471, 472, 473, 474, 475, 476, 503, 508, 509, 532, 542, 548, 549, 561, 562, 567, 568, 587, 588, 589, 591, 620, 632, 643, 644, 646, 647, 652, 658, 659, 660, 661, 662, 666, 667, 668, 671, 672, 676, 677, 678, 681, 685, 687, 688, 692, 709, 722, 726, 735, 741, 756, 764, 769, 774, 778, 781, 800, 803, 804, 814, 840, 846, 847, 850, 852, 854, 855, 860, 871, 884, 952, 968, 969, 970, 982, 986, 988, 990, 991, 992, 994, 995, 997, 998, 999, 1002, 1006, 1008, 1041, 1047], "assume_cent": [31, 77, 411, 422, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "assume_finit": [365, 366, 468, 902], "assumpt": [2, 7, 11, 23, 25, 34, 41, 66, 76, 77, 96, 154, 158, 164, 166, 197, 199, 226, 255, 281, 305, 385, 391, 392, 395, 406, 407, 409, 411, 413, 414, 417, 419, 447, 451, 453, 488, 503, 512, 532, 534, 541, 650, 654, 798, 800, 803, 804, 814, 841, 896, 897, 986, 988, 992, 993, 994, 995, 997, 998, 999, 1002, 1005, 1008, 1014, 1042, 1048], "assur": [0, 393, 797, 798, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "astel": 1043, "astolfi": 1035, "astrai": 393, "astro": [9, 156, 218, 246], "astroml": 1012, "astronom": 1011, "astronomi": 1012, "astropi": 379, "astyp": [2, 12, 35, 39, 42, 43, 51, 58, 60, 64, 79, 99, 119, 121, 138, 166, 168, 187, 188, 215, 221, 232, 236, 253, 270, 283, 312, 402, 417, 982, 988, 1042], "asv": 379, "asv_benchmark": 379, "asymmetr": [122, 199, 393, 1040], "asymmetri": [199, 350], "asymptot": [76, 77, 186, 365, 411, 474, 536, 730, 988, 991, 1045], "atag": 157, "atariah": 1044, "ateif": 1048, "atharva": 1049, "atheism": [17, 260, 329, 350, 351, 352, 374, 488, 1028], "atheist": 350, "athena": 1017, "ation": 417, "atla": [365, 377], "atleast_2d": [122, 381], "atmospher": 154, "atol": [381, 672, 674, 844, 845, 849], "atom": [96, 102, 414, 531, 537, 539, 542, 543, 545, 546, 653, 663, 684, 988, 1035, 1048], "atomic_benchmark": 8, "atomic_benchmark_estim": 8, "atomic_runtim": 8, "atsushi": [1047, 1048], "attach": [6, 350, 434, 849, 1036, 1046], "attack": [236, 374], "attalla": 1049, "attard": 1048, "attempt": [2, 52, 168, 193, 203, 254, 350, 365, 378, 393, 409, 421, 446, 450, 457, 464, 468, 631, 688, 689, 693, 818, 846, 847, 848, 850, 852, 854, 855, 856, 882, 884, 902, 924, 925, 988, 989, 995, 1008, 1019, 1042, 1047, 1052], "attenberg": 417, "attend": 0, "attent": [387, 607, 608, 1006], "attenu": 149, "attia": 797, "attr": [6, 54], "attract": [420, 444, 986, 995, 1012], "attractador": [1042, 1043], "attrgett": [593, 597], "attribut": [6, 23, 30, 47, 69, 101, 107, 109, 116, 117, 120, 142, 146, 197, 205, 233, 248, 257, 258, 263, 271, 292, 296, 318, 342, 352, 359, 367, 368, 372, 373, 374, 376, 379, 382, 386, 391, 402, 405, 406, 409, 410, 411, 412, 414, 416, 417, 418, 419, 424, 425, 426, 427, 428, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 736, 795, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 953, 976, 984, 986, 988, 993, 995, 996, 998, 1002, 1005, 1006, 1007, 1008, 1017, 1019, 1025, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "attributeerror": [410, 559, 577, 953, 1027, 1044, 1045, 1047, 1051, 1052], "attrselect": 1035, "atukorala": 1050, "atuo": [1051, 1052], "aubert": 1042, "auc": [9, 23, 146, 197, 215, 236, 256, 259, 263, 266, 268, 269, 322, 406, 702, 708, 788, 992, 1040, 1043, 1047], "auc_scor": [1035, 1037], "audio": [373, 503], "aufarkari": 1049, "aug": 1007, "augment": [328, 630, 886, 1000, 1017], "augspurg": [1043, 1045], "august": [146, 376, 409, 511, 534, 1007, 1035, 1037, 1038, 1042, 1049], "aura": 1047, "auroc": 992, "aur\u00e9lien": [1042, 1043, 1044, 1048, 1049], "austin": 1042, "australian": [125, 396], "author": [0, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 30, 35, 37, 38, 40, 44, 45, 46, 50, 51, 52, 54, 55, 59, 63, 64, 65, 68, 69, 70, 72, 73, 80, 93, 95, 97, 98, 100, 103, 107, 110, 111, 112, 113, 114, 115, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 198, 199, 201, 202, 204, 205, 212, 213, 214, 218, 219, 220, 221, 223, 226, 229, 231, 232, 234, 236, 243, 245, 246, 253, 258, 260, 262, 263, 265, 272, 281, 283, 285, 288, 295, 296, 299, 302, 305, 306, 308, 309, 310, 325, 326, 327, 328, 330, 345, 350, 351, 352, 373, 379, 383, 387, 391, 393, 394, 413, 451, 534, 871, 984, 1012, 1038], "authorit": 394, "authorship": 383, "auto": [17, 31, 55, 56, 90, 146, 153, 180, 218, 223, 238, 283, 286, 291, 315, 316, 317, 318, 319, 320, 334, 335, 341, 344, 352, 373, 374, 381, 416, 419, 420, 441, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 459, 462, 496, 508, 509, 535, 538, 540, 541, 544, 547, 549, 557, 558, 561, 562, 563, 564, 565, 567, 593, 594, 597, 602, 607, 608, 629, 631, 632, 633, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 702, 799, 803, 804, 822, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 862, 877, 878, 885, 896, 897, 901, 904, 905, 906, 907, 908, 909, 910, 914, 915, 940, 941, 958, 961, 983, 986, 988, 989, 995, 1002, 1012, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "auto_exampl": [14, 20, 26, 33, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 241, 250, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 353, 360], "auto_examples_jupyt": 164, "auto_examples_python": 164, "auto_viml": 1047, "auto_wrap_output_kei": 381, "autoclass": 376, "autocorrel": 413, "autolabel": 6, "autom": [260, 383, 396, 692, 981, 988, 989, 992, 1012, 1017], "automat": [2, 6, 10, 11, 25, 44, 61, 63, 69, 100, 125, 136, 145, 176, 200, 243, 244, 253, 257, 260, 305, 312, 316, 320, 329, 340, 342, 366, 368, 374, 377, 379, 381, 383, 387, 393, 396, 402, 404, 409, 410, 411, 414, 416, 417, 418, 433, 450, 452, 456, 462, 464, 465, 467, 496, 499, 515, 538, 540, 541, 547, 549, 551, 557, 561, 564, 583, 588, 591, 594, 602, 643, 645, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 672, 674, 675, 676, 678, 681, 684, 687, 688, 691, 695, 802, 817, 820, 830, 840, 861, 862, 865, 866, 868, 877, 878, 885, 896, 897, 904, 905, 906, 909, 912, 914, 918, 930, 963, 966, 981, 983, 986, 991, 996, 1002, 1006, 1008, 1012, 1013, 1023, 1035, 1038, 1039, 1040, 1046, 1049, 1050, 1051, 1052, 1053], "automl": [992, 1012], "automobil": 1017, "autoregress": 374, "autoviml": 1012, "autoviz": 1047, "auxiliari": [162, 377, 407, 1017, 1050], "av": 1043, "avail": [0, 3, 9, 10, 12, 39, 54, 55, 96, 117, 121, 125, 146, 149, 154, 158, 166, 167, 168, 186, 197, 205, 215, 219, 233, 236, 253, 256, 257, 262, 263, 266, 273, 288, 289, 290, 296, 310, 315, 316, 317, 318, 320, 321, 328, 330, 361, 365, 373, 374, 376, 377, 378, 379, 380, 384, 388, 392, 393, 396, 402, 405, 407, 409, 410, 413, 414, 415, 416, 417, 418, 420, 447, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 508, 535, 549, 555, 556, 557, 558, 559, 560, 564, 565, 567, 568, 569, 570, 593, 594, 610, 611, 627, 632, 633, 647, 651, 653, 655, 657, 661, 663, 665, 668, 670, 671, 672, 673, 674, 675, 676, 689, 696, 699, 732, 733, 800, 803, 804, 814, 826, 827, 832, 833, 834, 835, 836, 837, 838, 850, 861, 862, 864, 871, 880, 883, 888, 892, 897, 948, 953, 960, 982, 986, 989, 991, 992, 993, 994, 995, 998, 1002, 1005, 1006, 1007, 1011, 1012, 1013, 1016, 1017, 1019, 1023, 1028, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "available_if": [54, 393, 1048, 1049, 1052], "avebedrm": [305, 374, 490], "aventi": 10, "aveoccup": [305, 317, 374, 490], "averag": [2, 11, 23, 25, 35, 37, 38, 42, 50, 58, 60, 112, 113, 118, 122, 125, 126, 131, 132, 133, 146, 154, 168, 178, 186, 197, 204, 215, 236, 253, 262, 264, 267, 269, 273, 281, 305, 315, 321, 329, 350, 361, 365, 374, 376, 381, 391, 405, 406, 411, 413, 417, 418, 420, 421, 437, 438, 441, 444, 445, 446, 447, 449, 490, 493, 494, 523, 531, 532, 533, 537, 538, 540, 541, 545, 546, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 587, 594, 632, 633, 648, 658, 659, 666, 667, 669, 672, 674, 676, 677, 678, 680, 687, 700, 703, 704, 706, 707, 708, 713, 720, 721, 723, 725, 726, 728, 729, 730, 734, 735, 736, 738, 739, 740, 743, 745, 746, 748, 750, 751, 753, 756, 764, 781, 782, 783, 784, 785, 787, 788, 790, 791, 795, 796, 797, 798, 828, 831, 850, 870, 885, 978, 982, 987, 988, 993, 996, 998, 999, 1006, 1007, 1008, 1026, 1028, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "average_bike_rent": 168, "average_coef_": 1046, "average_feature_effect": 350, "average_intercept_": 1046, "average_linkag": 42, "average_method": [409, 704, 757, 1043], "average_pr": 125, "average_precis": [266, 700, 707, 742, 992], "average_precision_scor": [266, 700, 706, 708, 782, 788, 992, 1035, 1038, 1042, 1043, 1049, 1051], "average_week_demand": [2, 125], "averoom": [305, 317, 374, 490], "avg": [4, 30, 68, 143, 257, 302, 325, 326, 569, 704, 713, 822, 992, 1024, 1028, 1051], "avg_dist": [38, 781], "avgclaim": 215, "avgclaimamount": 215, "avi": [1047, 1048], "avidar": 1051, "avinash": 1047, "avm19": [1049, 1050, 1052], "avoid": [2, 5, 10, 11, 42, 55, 60, 70, 114, 115, 120, 125, 167, 168, 199, 201, 206, 215, 221, 233, 236, 253, 254, 260, 264, 291, 293, 294, 309, 310, 322, 334, 335, 351, 366, 377, 379, 380, 381, 383, 384, 385, 391, 393, 394, 396, 402, 406, 409, 411, 413, 416, 417, 420, 440, 442, 444, 452, 462, 468, 493, 494, 495, 499, 508, 509, 534, 539, 543, 634, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 689, 691, 693, 695, 712, 792, 800, 801, 805, 811, 814, 825, 826, 827, 864, 867, 873, 874, 876, 881, 882, 883, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 902, 941, 986, 989, 991, 992, 995, 996, 998, 1000, 1002, 1007, 1008, 1013, 1016, 1028, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aw": 387, "awai": [23, 24, 25, 58, 76, 118, 149, 150, 154, 200, 342, 343, 374, 406, 419, 628, 846, 847, 854, 855, 991, 992, 1007, 1026], "await": 316, "awalei": 1043, "awar": [7, 13, 143, 158, 253, 335, 350, 377, 379, 381, 391, 394, 408, 413, 417, 567, 568, 648, 654, 655, 656, 658, 659, 669, 680, 850, 879, 998, 1002, 1008, 1032, 1035, 1036, 1049], "aweb": 1010, "awesom": 1017, "ax": [2, 3, 5, 6, 7, 8, 10, 11, 13, 23, 25, 28, 29, 30, 32, 38, 40, 41, 43, 51, 53, 54, 55, 62, 64, 70, 73, 78, 80, 84, 88, 90, 93, 99, 103, 109, 111, 114, 116, 119, 120, 125, 127, 128, 130, 131, 132, 152, 153, 158, 161, 166, 167, 168, 169, 170, 173, 176, 177, 180, 181, 186, 188, 189, 192, 194, 195, 197, 198, 199, 201, 202, 205, 206, 208, 210, 211, 212, 215, 218, 219, 220, 221, 222, 223, 227, 232, 236, 237, 239, 243, 245, 248, 253, 254, 255, 256, 259, 261, 262, 263, 265, 266, 268, 269, 270, 271, 273, 274, 278, 281, 283, 285, 286, 287, 288, 291, 293, 294, 299, 300, 301, 305, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 334, 335, 336, 337, 339, 340, 342, 344, 345, 346, 347, 350, 351, 352, 355, 356, 381, 382, 414, 419, 438, 534, 541, 550, 631, 632, 697, 698, 700, 701, 702, 718, 806, 823, 918, 992, 995, 999, 1027, 1032, 1045, 1051], "ax0": [71, 73, 197, 229, 351, 1024], "ax1": [5, 8, 55, 58, 63, 65, 71, 73, 78, 90, 119, 162, 170, 197, 227, 229, 237, 243, 262, 270, 306, 310, 311, 328, 350, 351, 1024], "ax2": [5, 55, 58, 63, 65, 78, 90, 119, 162, 170, 197, 227, 237, 243, 262, 270, 293, 306, 310, 311, 328, 350], "ax3": [63, 328], "ax4": 63, "ax_": [126, 252, 262, 266, 268, 275, 286, 310, 315, 386, 438, 631, 697, 698, 700, 701, 702, 806, 823], "ax_bc": 309, "ax_bottom": 386, "ax_calibration_curv": [23, 25], "ax_colorbar": 305, "ax_det": 256, "ax_histi": 305, "ax_histx": 305, "ax_histx_zoom": 305, "ax_histy_zoom": 305, "ax_idx": 261, "ax_origin": 309, "ax_qt": 309, "ax_roc": 256, "ax_row": 32, "ax_scatt": 305, "ax_scatter_zoom": 305, "ax_top_left": 386, "ax_top_right": 386, "ax_yj": 309, "ax_zoom_in": 305, "ax_zoom_out": 305, "axa": 0, "axarr": [131, 305], "axes_": [125, 127, 237, 316, 322, 386, 632], "axes_idx": 309, "axes_list": 309, "axes_row": 188, "axesimag": 697, "axhlin": [100, 136, 187, 258, 262], "axi": [2, 3, 5, 9, 10, 12, 13, 15, 17, 23, 24, 35, 37, 38, 45, 46, 48, 50, 51, 52, 53, 59, 69, 70, 73, 80, 84, 89, 90, 93, 94, 95, 96, 97, 102, 111, 112, 116, 118, 126, 129, 133, 138, 142, 153, 158, 161, 166, 167, 178, 182, 184, 186, 189, 190, 191, 197, 202, 206, 209, 211, 212, 214, 215, 219, 220, 223, 226, 230, 231, 235, 243, 245, 247, 248, 255, 256, 260, 261, 266, 268, 269, 281, 283, 288, 289, 290, 293, 294, 295, 302, 305, 309, 312, 322, 326, 328, 330, 334, 337, 338, 341, 343, 344, 345, 347, 350, 351, 356, 357, 358, 359, 374, 381, 388, 393, 406, 409, 417, 421, 438, 445, 464, 467, 531, 533, 536, 537, 539, 541, 543, 545, 546, 550, 585, 612, 631, 632, 685, 686, 701, 763, 779, 780, 781, 782, 806, 823, 832, 873, 874, 881, 882, 884, 889, 890, 891, 893, 894, 895, 918, 920, 924, 925, 943, 967, 973, 982, 992, 999, 1002, 1007, 1025, 1027, 1043, 1045, 1047, 1052, 1053], "axis_idx": 2, "axis_list": 95, "axp": 10, "axvlin": [51, 58, 71, 80, 100, 121, 132, 167, 169, 170, 186, 265, 273, 345, 1024], "ayako": 1047, "ayan": 1049, "aydor": [1042, 1043, 1046], "ayerdi": 1039, "aymer": 1036, "aymericbasset": 1051, "ayomid": 1045, "ayush": [1043, 1048], "ayzenshtat": [1017, 1043], "azaria": [1050, 1051], "azencott": 1049, "azim": [43, 65, 88, 99, 168, 194, 218, 222], "azur": [0, 379], "b": [0, 6, 8, 22, 24, 57, 63, 78, 100, 111, 112, 118, 122, 123, 133, 136, 150, 151, 152, 157, 162, 179, 181, 182, 197, 198, 203, 215, 234, 236, 253, 258, 262, 264, 269, 274, 281, 318, 328, 361, 374, 376, 379, 383, 384, 385, 405, 406, 409, 412, 413, 414, 417, 437, 482, 498, 500, 541, 566, 588, 589, 590, 591, 607, 608, 610, 611, 628, 646, 647, 648, 649, 658, 669, 672, 674, 676, 680, 687, 688, 705, 719, 730, 731, 792, 793, 811, 812, 851, 877, 878, 879, 880, 883, 884, 892, 919, 926, 941, 942, 955, 957, 982, 984, 988, 989, 990, 992, 995, 997, 1002, 1006, 1007, 1023, 1035, 1043, 1046, 1048, 1049, 1050], "b0noi": 1041, "b0rxington": 1050, "b1": [211, 289, 337], "b12": [197, 215], "b1996": 416, "b1998": 416, "b1999": 416, "b2": [211, 289, 337], "b2001": 416, "b2011": 409, "b2c": 1017, "b30065": 307, "b5": 320, "b7a2ff": 309, "b_1": 996, "b_2": 996, "b_column": 719, "b_i": 997, "b_iv_i": 997, "b_j": 409, "b_k": 409, "b_mask": 268, "b_row": 719, "b_true": 268, "ba": [10, 861, 862, 996], "baak": 1049, "baam": [1048, 1049], "babino": [1048, 1049], "bac": 10, "bach": [414, 531, 536, 537, 538, 658, 988], "bachant": 1042, "back": [2, 98, 238, 366, 377, 379, 381, 393, 394, 402, 410, 417, 434, 443, 446, 447, 459, 482, 483, 484, 508, 509, 533, 534, 535, 538, 540, 541, 544, 581, 630, 658, 659, 666, 667, 668, 676, 677, 678, 728, 869, 871, 872, 873, 877, 878, 879, 881, 882, 884, 896, 897, 904, 988, 992, 996, 1013, 1019, 1028, 1038, 1043, 1045, 1046, 1049], "backend": [366, 382, 393, 468, 902, 958, 960, 962, 992, 1038, 1043, 1044, 1045, 1046], "backend_nam": 960, "background": [3, 9, 45, 64, 126, 302, 307, 374, 379, 387, 409, 493, 494, 989, 997, 1006, 1045], "background_point": 9, "backlink": 1040, "backport": [383, 388, 1042], "backprop": [996, 1006], "backpropag": 996, "backslash": 1050, "backtick": [379, 384], "backup": [508, 1035], "backward": [146, 233, 317, 382, 393, 418, 496, 577, 602, 614, 615, 618, 619, 620, 622, 623, 917, 920, 996, 1013, 1035, 1038, 1043, 1044, 1045, 1047, 1049, 1051], "bad": [43, 58, 59, 150, 167, 253, 350, 361, 379, 409, 419, 692, 746, 981, 988, 989, 994, 1000, 1027, 1035], "badaracco": 1048, "badli": [186, 197, 350, 367, 884, 988, 1002], "badr": 1050, "baeza": [590, 730, 1038], "bag": [8, 25, 68, 95, 108, 113, 115, 123, 124, 134, 164, 169, 278, 351, 352, 375, 406, 407, 516, 517, 518, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 741, 805, 830, 913, 990, 993, 1014, 1015, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1048, 1049, 1051], "bagai": 1048, "baggingclassifi": [393, 399, 416, 556, 914, 933, 982, 1038, 1041, 1042, 1043, 1046, 1050, 1051, 1053], "baggingregressor": [112, 399, 416, 555, 915, 982, 1038, 1041, 1043, 1046, 1050, 1051, 1053], "baharev": 1040, "bahavior": 350, "bahaviour": 350, "baibak": [1043, 1044], "bail": 1046, "bailei": [409, 704], "bajic": 1050, "baji\u0107": 1050, "bakir2003": 414, "bakiri": [834, 993], "bak\u0131r": [3, 414, 535], "bala": [1035, 1038], "balakumaran": [1042, 1043], "balanc": [2, 4, 11, 25, 51, 64, 70, 109, 115, 120, 145, 164, 201, 202, 251, 253, 257, 260, 262, 263, 273, 276, 305, 367, 391, 393, 406, 408, 413, 414, 416, 502, 515, 534, 540, 541, 547, 557, 561, 564, 640, 658, 659, 666, 668, 674, 675, 676, 703, 708, 729, 743, 782, 787, 800, 801, 818, 864, 904, 906, 909, 912, 914, 929, 930, 981, 1007, 1008, 1014, 1024, 1035, 1037, 1040, 1041, 1044, 1045, 1049], "balanced_accuraci": [253, 273, 708, 822, 992, 1043], "balanced_accuracy_scor": [253, 703, 787, 992, 1043], "balanced_subsampl": [557, 564, 1043], "balaz": [22, 1039], "baldi": 743, "ball": [68, 288, 296, 409, 415, 448, 692, 844, 845, 849, 852, 854, 855, 856, 1035, 1037, 1040, 1046], "ball_tre": [296, 420, 444, 446, 450, 457, 688, 689, 846, 847, 848, 849, 850, 852, 854, 855, 856, 995, 1035, 1052], "balltre": [420, 444, 446, 450, 457, 688, 689, 699, 846, 847, 848, 849, 850, 852, 854, 855, 856, 989, 1035, 1037, 1039, 1043, 1048, 1051, 1052], "baloo": 989, "baluyot": 1044, "bamidel": 1045, "banana": [7, 992], "band": [11, 262, 307, 1002], "bandit": 981, "bandol": 311, "bandwidth": [7, 42, 61, 232, 287, 288, 296, 391, 393, 409, 415, 448, 458, 461, 844, 845, 849, 985, 998, 1046, 1050], "bandwidth_": 849, "bangda": 1043, "banilo": [1039, 1040], "bank": [10, 17, 1017], "bannerje": [1051, 1052], "bansal": 1042, "bansod": [1040, 1041, 1042], "bao": [1041, 1049], "baod": 409, "baptbillard": 1048, "baptist": [1038, 1046], "bar": [6, 8, 13, 70, 115, 116, 119, 120, 123, 132, 142, 146, 157, 161, 168, 176, 243, 248, 258, 260, 264, 281, 310, 311, 319, 320, 351, 381, 412, 581, 632, 648, 669, 680, 992, 999, 1006, 1008, 1041, 1042, 1043, 1044], "bar_color": 6, "bar_kw": 632, "bar_siz": 350, "baran": 1045, "barang": 1051, "baraniuk": 418, "barankaraku": 1047, "barata": 1051, "barber": 532, "barberogaston": 1047, "bardiya": [1049, 1050], "bare": [374, 989, 1028], "barh": [13, 123, 161, 162, 166, 167, 169, 170, 240, 312, 350, 351, 352], "barikbin": 1051, "barkhorn": 1043, "barklei": 1045, "barmalei": [1039, 1040], "barn": [692, 989, 1040, 1042, 1045], "barnes_hut": [283, 692, 1042, 1043], "barnett": 1043, "barnhil": [593, 594], "barnowski": [1049, 1050], "barreca": [885, 1002], "barreto": 1049, "barri": [374, 1043], "barrier": 417, "barrycg": 1045, "bars_": 632, "bartelheim": 1046, "barth\u00e9lemi": [1051, 1052], "bartosz": 1044, "bart\u0142omiej": 1050, "barycent": [295, 1035], "basbug": 1042, "base": [3, 10, 11, 12, 13, 15, 18, 23, 24, 25, 32, 47, 54, 55, 56, 65, 68, 69, 73, 78, 88, 93, 94, 107, 109, 110, 115, 120, 121, 122, 123, 125, 128, 130, 133, 140, 143, 144, 147, 149, 154, 155, 157, 166, 168, 169, 170, 175, 176, 182, 183, 185, 186, 191, 192, 197, 198, 205, 214, 215, 216, 218, 226, 233, 234, 236, 256, 257, 262, 273, 278, 281, 283, 296, 302, 305, 306, 308, 310, 317, 319, 330, 336, 342, 351, 355, 365, 366, 368, 373, 374, 375, 376, 377, 380, 381, 382, 387, 391, 393, 394, 395, 402, 406, 408, 410, 414, 415, 417, 419, 420, 421, 437, 444, 446, 447, 448, 449, 450, 452, 456, 457, 461, 463, 464, 465, 466, 467, 487, 500, 501, 508, 509, 532, 533, 535, 536, 537, 538, 539, 541, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 578, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 616, 617, 618, 621, 624, 632, 633, 635, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 664, 669, 671, 672, 673, 674, 675, 680, 682, 683, 685, 686, 687, 690, 692, 704, 717, 726, 735, 736, 737, 739, 741, 755, 756, 757, 785, 788, 795, 799, 800, 802, 803, 804, 806, 807, 809, 814, 818, 819, 820, 821, 828, 830, 834, 835, 838, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 865, 866, 869, 876, 877, 879, 883, 884, 885, 893, 896, 897, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 927, 935, 960, 961, 981, 983, 984, 986, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1017, 1023, 1028, 1030, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1053], "base_classifi": [328, 330, 1005], "base_clf": 437, "base_estim": [317, 381, 406, 553, 554, 555, 556, 835, 838, 901, 981, 1046, 1048, 1049, 1050, 1051], "base_estimator_": [553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 610, 901, 1050], "base_estimator__": 1050, "base_lr": [281, 835], "base_model": 408, "base_x_test": 76, "base_x_train": 76, "basebag": [1041, 1043], "basebal": [17, 374], "basedecisiontre": [1043, 1044, 1047], "basedictionarylearn": 1035, "baseensembl": [1042, 1045], "baseestim": [54, 107, 233, 283, 379, 392, 393, 419, 424, 426, 427, 431, 432, 433, 601, 632, 633, 933, 1035, 1042, 1045, 1047, 1049, 1050], "basegradientboost": 1036, "baselabelpropag": 1042, "baselibsvm": 1045, "baselin": [23, 109, 119, 122, 133, 146, 170, 176, 215, 253, 269, 281, 317, 351, 376, 409, 418, 551, 552, 634, 992, 995, 1028, 1051], "baseline_similar": 157, "baseline_similarity_bound": 157, "basemap": [9, 296], "basemixtur": [1043, 1044], "basemultilayerperceptron": [1043, 1045], "basenb": 1045, "baserandomproject": [896, 897], "basesearchcv": [1042, 1043], "basesgd": 1006, "basesgdclassifi": 1044, "baseshufflesplit": 1048, "bash": [366, 387], "bashrc": 387, "basi": [2, 4, 12, 98, 149, 154, 156, 198, 301, 318, 338, 342, 371, 377, 380, 409, 414, 416, 452, 534, 622, 632, 639, 691, 883, 990, 1002, 1007, 1015, 1023, 1024, 1027, 1030, 1043, 1045, 1048], "basic": [122, 148, 149, 154, 155, 158, 159, 162, 164, 195, 273, 312, 343, 365, 367, 368, 379, 381, 383, 391, 393, 409, 413, 414, 416, 611, 622, 900, 912, 913, 914, 915, 981, 982, 995, 1006, 1011, 1012, 1013, 1014, 1017, 1026], "basicconfig": 93, "basil": 1042, "basis_1": 198, "basis_2": 198, "basri": 513, "bassett": 988, "bastiaan": [1036, 1037], "bastian": 1043, "bat": 377, "batch": [6, 9, 62, 93, 97, 296, 319, 367, 388, 393, 417, 440, 442, 447, 449, 451, 453, 531, 533, 534, 536, 537, 538, 539, 540, 542, 543, 545, 546, 664, 685, 686, 805, 818, 819, 839, 840, 841, 842, 843, 861, 862, 873, 874, 884, 897, 944, 958, 996, 997, 1006, 1035, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051], "batch_dict_estim": 93, "batch_pca_estim": 93, "batch_siz": [13, 17, 40, 62, 93, 96, 97, 351, 414, 449, 534, 536, 537, 538, 539, 546, 860, 861, 862, 944, 945, 958, 1036, 1043, 1046, 1048, 1049], "batch_size_": 534, "batchkarov": [1036, 1040], "batiss": 1046, "batista": [1043, 1044, 1048], "batistaki": 409, "batoul": 1048, "battista": 1046, "batula": 1042, "bauk": [1043, 1044], "baum": 446, "baumgartn": 1042, "baxlei": 1042, "bay": [25, 29, 112, 128, 149, 186, 248, 261, 350, 368, 374, 406, 414, 416, 417, 536, 549, 550, 656, 839, 840, 841, 842, 843, 885, 986, 987, 988, 1002, 1015, 1028, 1030, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "bayer": [0, 1035, 1036, 1040], "bayesian": [5, 25, 52, 63, 90, 162, 164, 175, 181, 185, 198, 201, 203, 216, 242, 244, 248, 249, 250, 262, 270, 274, 288, 293, 306, 309, 310, 414, 437, 524, 528, 532, 611, 644, 645, 656, 657, 797, 798, 865, 867, 879, 884, 981, 1012, 1014, 1015, 1029, 1030, 1041, 1048], "bayesiangaussianmixtur": [243, 244, 249, 798, 991, 1041, 1043, 1044, 1048, 1049, 1053], "bayesianridg": [52, 161, 176, 177, 181, 317, 627, 644, 988, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "baz": [381, 581], "baze": 1044, "bbbbbb": 62, "bbox": [7, 10, 32, 43, 99, 243, 244, 245, 248, 249, 307], "bbox_arg": 7, "bbox_to_anchor": [2, 35, 158, 264, 344], "bc": 309, "bcde": 119, "bcross_val": 1035, "bde": 119, "bdegraaff": 1050, "bdt": 111, "beach": 1043, "beam": [112, 1035], "bear": [416, 1012], "bearer": 1043, "beat": 253, "beatrizsmg": 1047, "beauchamp": [1036, 1039], "beaugnon": 1045, "becam": [130, 394, 1043], "becaus": [2, 3, 11, 17, 23, 25, 38, 45, 48, 69, 80, 84, 109, 114, 117, 122, 125, 146, 150, 153, 156, 167, 168, 170, 177, 183, 190, 197, 201, 203, 205, 215, 232, 233, 244, 253, 256, 259, 260, 265, 281, 283, 300, 301, 302, 305, 309, 310, 311, 312, 327, 338, 342, 350, 351, 352, 355, 359, 361, 365, 366, 374, 381, 384, 387, 391, 392, 393, 399, 402, 405, 406, 408, 409, 410, 413, 414, 415, 416, 417, 419, 422, 432, 447, 448, 461, 465, 475, 482, 483, 484, 534, 536, 552, 554, 556, 558, 560, 562, 565, 568, 570, 607, 608, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 676, 677, 678, 679, 680, 689, 699, 709, 712, 713, 721, 722, 723, 724, 746, 763, 785, 788, 794, 800, 814, 828, 832, 837, 838, 847, 850, 852, 854, 855, 856, 862, 873, 874, 882, 884, 885, 889, 890, 892, 893, 894, 895, 905, 907, 910, 913, 915, 956, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 997, 999, 1002, 1007, 1008, 1017, 1027, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1051], "becker": [409, 1017, 1038, 1047], "becom": [48, 53, 55, 70, 78, 120, 167, 199, 201, 233, 236, 261, 283, 306, 310, 338, 342, 350, 361, 373, 379, 381, 383, 387, 393, 394, 409, 411, 416, 417, 419, 440, 450, 454, 455, 457, 553, 581, 588, 589, 591, 619, 627, 658, 659, 676, 678, 878, 904, 905, 911, 987, 988, 989, 991, 995, 1002, 1007, 1026, 1028, 1036, 1043, 1044, 1047, 1048, 1049, 1050, 1052], "bednar": 1042, "bedroom": [305, 374], "been": [0, 2, 7, 24, 42, 51, 58, 79, 98, 107, 109, 146, 149, 154, 156, 167, 222, 226, 228, 233, 234, 257, 259, 265, 315, 316, 317, 318, 319, 321, 322, 327, 350, 361, 366, 373, 374, 376, 377, 378, 379, 381, 383, 385, 387, 388, 391, 392, 393, 394, 399, 402, 405, 406, 408, 409, 411, 413, 414, 416, 419, 434, 437, 469, 471, 472, 474, 478, 487, 523, 534, 536, 549, 550, 567, 568, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 633, 634, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 720, 778, 779, 780, 793, 800, 803, 804, 806, 814, 822, 823, 828, 829, 853, 901, 904, 982, 984, 985, 987, 988, 989, 992, 993, 995, 998, 1002, 1004, 1006, 1007, 1013, 1017, 1019, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "befor": [6, 10, 23, 40, 68, 70, 73, 84, 120, 125, 130, 142, 156, 158, 160, 161, 163, 164, 167, 168, 170, 178, 181, 185, 186, 190, 233, 253, 259, 266, 285, 286, 306, 309, 310, 312, 318, 341, 361, 365, 366, 374, 377, 379, 381, 382, 384, 385, 387, 388, 391, 393, 394, 395, 402, 404, 406, 409, 410, 411, 413, 414, 416, 418, 421, 422, 443, 447, 448, 449, 459, 461, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 490, 501, 534, 537, 538, 539, 540, 541, 544, 546, 547, 561, 562, 565, 567, 569, 570, 577, 588, 589, 591, 611, 627, 628, 630, 645, 666, 667, 668, 671, 676, 678, 687, 692, 694, 797, 798, 805, 806, 818, 819, 821, 826, 828, 830, 844, 845, 852, 853, 854, 855, 856, 859, 864, 865, 868, 871, 878, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 901, 912, 913, 941, 976, 982, 988, 989, 992, 998, 1002, 1006, 1007, 1008, 1013, 1014, 1028, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "beforehand": [286, 1008], "begin": [17, 107, 146, 149, 254, 261, 281, 318, 350, 361, 379, 384, 385, 393, 405, 409, 416, 553, 554, 559, 561, 562, 666, 667, 676, 677, 678, 981, 984, 988, 992, 1002, 1004, 1006, 1043, 1049, 1050], "beginn": 1013, "behav": [2, 10, 50, 55, 201, 253, 254, 305, 317, 338, 361, 379, 385, 391, 392, 409, 410, 413, 884, 988, 1002, 1007, 1009, 1013, 1028, 1035, 1042, 1044, 1048, 1049], "behavior": [23, 35, 37, 50, 161, 164, 167, 168, 197, 215, 233, 249, 251, 253, 262, 264, 269, 276, 301, 302, 305, 307, 312, 338, 361, 366, 373, 376, 379, 381, 383, 387, 388, 393, 406, 408, 409, 413, 416, 417, 536, 551, 566, 666, 667, 668, 676, 677, 678, 699, 701, 729, 730, 783, 784, 787, 801, 802, 805, 817, 818, 819, 820, 821, 841, 877, 904, 905, 981, 988, 992, 993, 998, 1002, 1007, 1014, 1017, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "behaviour": [37, 98, 125, 198, 199, 215, 340, 379, 393, 402, 409, 416, 559, 560, 564, 565, 602, 742, 801, 802, 805, 817, 818, 819, 820, 821, 902, 912, 913, 965, 981, 982, 992, 1002, 1043, 1046, 1047, 1050, 1051], "behind": [51, 78, 109, 278, 381, 383, 387, 407, 411, 416, 991, 995, 1004, 1010, 1051], "behrend": 1045, "behrouz": 1049, "behzad": 1041, "beier": 1046, "being": [22, 25, 32, 43, 50, 53, 80, 84, 88, 98, 109, 113, 125, 127, 149, 154, 169, 173, 191, 233, 236, 252, 259, 302, 309, 310, 338, 342, 350, 352, 377, 378, 379, 381, 383, 384, 391, 393, 394, 408, 409, 411, 413, 416, 417, 418, 419, 420, 422, 441, 442, 444, 445, 450, 456, 469, 475, 493, 523, 569, 640, 649, 656, 672, 674, 687, 690, 694, 712, 718, 734, 736, 783, 789, 797, 844, 845, 850, 852, 854, 855, 856, 879, 897, 942, 981, 982, 988, 991, 992, 995, 998, 999, 1002, 1004, 1006, 1007, 1008, 1035, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "beings": 350, "beirouti": 1042, "belatedli": 1042, "belief": [17, 259, 860, 997], "believ": [350, 351, 387, 391, 1017], "belkin": 989, "belkina": [692, 989], "bell": [521, 1043, 1045, 1047, 1048], "bella": 992, "bella2012": 992, "bellet": [1042, 1043, 1044], "belmont": [912, 913, 1008], "belong": [22, 25, 28, 53, 58, 236, 259, 315, 321, 327, 373, 374, 405, 406, 409, 410, 412, 413, 416, 424, 440, 443, 447, 448, 449, 451, 453, 523, 712, 731, 807, 813, 825, 871, 885, 948, 949, 988, 991, 992, 994, 995, 996, 998, 1007, 1012, 1019, 1026], "below": [0, 7, 11, 23, 24, 25, 30, 32, 53, 58, 68, 73, 78, 87, 88, 93, 107, 113, 116, 117, 122, 141, 166, 168, 180, 193, 194, 197, 199, 213, 214, 219, 223, 228, 233, 236, 238, 240, 254, 257, 262, 264, 265, 266, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 343, 350, 359, 361, 366, 372, 373, 377, 379, 381, 383, 384, 388, 393, 394, 396, 409, 411, 412, 413, 414, 416, 417, 418, 419, 444, 446, 448, 471, 472, 478, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 510, 531, 537, 542, 548, 582, 595, 596, 597, 598, 599, 600, 633, 646, 652, 658, 659, 667, 668, 673, 675, 692, 699, 705, 743, 763, 797, 798, 800, 811, 814, 833, 864, 867, 877, 878, 881, 887, 893, 981, 982, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1007, 1008, 1009, 1012, 1021, 1028, 1031, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "ben": [1037, 1038, 1039, 1042, 1043, 1044, 1047, 1052], "ben3940": 1049, "benavoli": 259, "benbihi": 1044, "bench_k_mean": 56, "benchmark": [283, 317, 351, 352, 365, 372, 374, 379, 391, 396, 401, 406, 468, 515, 902], "benchmark_estim": 8, "benchmark_influ": 5, "benchmark_throughput": 8, "bend": 342, "benedek": 1051, "benedikt": 1039, "benediktsson": [1035, 1036, 1037], "benefici": [70, 72, 76, 93, 128, 253, 305, 306, 402, 408, 989], "benefit": [2, 44, 54, 72, 73, 109, 110, 120, 125, 167, 211, 222, 229, 231, 253, 285, 319, 365, 379, 388, 393, 406, 409, 448, 461, 468, 508, 567, 568, 658, 659, 666, 667, 668, 676, 677, 678, 835, 902, 904, 981, 987, 995, 1002, 1013, 1017, 1035, 1038, 1039, 1040, 1047, 1048, 1049, 1050], "benefit_cost": 253, "benfield": 1042, "bengio": [259, 861, 862, 981, 1005], "bengtsson": 1039, "benhel": 380, "benhur": 1048, "benign": [146, 376, 500], "benjamin": [641, 1037, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "benjamini": [595, 1041, 1042], "benjaminirv": 1040, "benjastudio": [1043, 1044], "benn": 1043, "bennett": [146, 376, 992], "benni": 1049, "benoit": 1052, "beno\u00eet": 1048, "benson": 17, "bentlei": 995, "bera": 1050, "berei": 1049, "beren": 692, "berenbaum": 1051, "bereng": 1048, "berg": [374, 1036, 1037, 1047, 1052], "bergman": 1052, "bergstra": [981, 1035, 1036], "berk": 1035, "berkecanrizai": 1050, "berkelei": [641, 912, 913], "berlin": [409, 414, 535, 696, 726, 756, 992], "bernardo": 1041, "bernd": 1050, "bernhard": [3, 414, 535, 835, 870, 900, 993, 998, 1007, 1041], "bernhardsson": 1017, "berni": 1046, "bernoulli": [302, 417, 418, 839, 840, 841, 842, 843, 860, 861, 862, 867, 988, 1002, 1015, 1030, 1035], "bernoullinb": [128, 367, 840, 841, 842, 843, 993, 994, 1036, 1037, 1039, 1042, 1047, 1048, 1050], "bernoullirbm": [302, 861, 862, 997, 1002, 1037, 1038, 1047, 1049, 1052], "bertin": 1017, "bertoncelj": 1046, "bertrand": [0, 397, 1035, 1041, 1042, 1047, 1048], "bertrandhaut": [1043, 1044], "besid": [130, 229, 273, 379, 384, 589, 981, 1043], "bessel": [419, 619], "bessi": 320, "besson": [1040, 1041], "best": [0, 2, 4, 6, 10, 11, 12, 17, 22, 24, 25, 38, 44, 52, 53, 59, 68, 69, 70, 71, 76, 83, 93, 97, 100, 101, 102, 112, 115, 119, 121, 122, 123, 125, 130, 133, 146, 149, 150, 155, 161, 167, 176, 181, 185, 186, 193, 211, 212, 213, 218, 221, 226, 231, 232, 236, 244, 245, 249, 252, 253, 257, 258, 259, 260, 263, 266, 267, 270, 271, 274, 281, 287, 292, 306, 311, 317, 318, 338, 341, 342, 350, 351, 352, 358, 365, 366, 368, 373, 376, 378, 379, 382, 385, 392, 393, 396, 399, 402, 405, 406, 408, 409, 413, 414, 416, 417, 418, 419, 432, 443, 446, 447, 449, 451, 452, 453, 459, 462, 465, 472, 482, 483, 484, 538, 545, 546, 552, 554, 556, 557, 558, 559, 560, 562, 564, 565, 566, 568, 570, 593, 594, 597, 602, 610, 611, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 688, 689, 690, 693, 694, 703, 708, 719, 720, 721, 722, 723, 724, 728, 729, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 783, 784, 785, 787, 790, 791, 792, 793, 794, 796, 797, 798, 800, 803, 804, 814, 827, 829, 832, 837, 838, 847, 855, 861, 862, 905, 907, 910, 912, 913, 914, 915, 981, 986, 987, 988, 989, 992, 995, 996, 998, 1006, 1008, 1012, 1013, 1017, 1019, 1024, 1028, 1035, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "best_alpha": [1026, 1035], "best_c": 345, "best_c_scal": 345, "best_clf": 71, "best_estim": [800, 803, 804, 814], "best_estimator_": [4, 52, 70, 71, 72, 76, 100, 232, 248, 253, 257, 259, 260, 263, 271, 287, 800, 803, 804, 814, 981, 1023, 1024, 1042], "best_idx": [17, 258], "best_index": [257, 263], "best_index_": [258, 263, 800, 803, 804, 814], "best_loss": [676, 678], "best_loss_": [861, 862, 1050], "best_low_complex": 258, "best_n_it": 459, "best_paramet": 260, "best_parameters_": 248, "best_params_": [69, 71, 122, 149, 232, 248, 257, 263, 317, 338, 392, 800, 803, 804, 814, 981, 1024, 1028], "best_recal": 257, "best_recall_std": 257, "best_recall_threshold": 257, "best_scor": 263, "best_score_": [69, 71, 232, 253, 260, 263, 264, 338, 408, 673, 675, 800, 803, 804, 814, 822, 1023, 1024, 1028, 1046], "best_score_idx": 258, "best_threshold_": [253, 273, 822], "best_validation_score_": [861, 862, 1050], "bestofmedia": 1010, "beta": [44, 83, 166, 201, 385, 406, 409, 412, 536, 538, 540, 547, 644, 729, 730, 736, 742, 783, 795, 797, 992, 1026, 1037, 1040, 1042, 1044, 1045], "beta_": [201, 414], "beta_1": [861, 862], "beta_2": [861, 862], "beta_k": 414, "beta_loss": [13, 538, 540, 547, 1042], "betatim": [114, 129, 1050, 1053], "betawork": 1010, "better": [2, 3, 7, 11, 17, 18, 22, 29, 48, 53, 72, 73, 76, 77, 78, 79, 84, 88, 93, 96, 112, 115, 120, 121, 122, 125, 130, 141, 153, 154, 155, 157, 161, 167, 169, 177, 181, 183, 186, 197, 198, 199, 205, 212, 214, 215, 222, 231, 232, 233, 236, 248, 252, 253, 259, 261, 262, 265, 268, 269, 278, 281, 302, 309, 310, 319, 320, 338, 345, 350, 351, 352, 355, 361, 365, 374, 378, 379, 380, 381, 383, 384, 385, 387, 393, 395, 404, 406, 409, 411, 413, 414, 415, 416, 417, 419, 449, 450, 538, 540, 547, 559, 560, 561, 562, 607, 608, 630, 671, 677, 692, 709, 725, 734, 739, 742, 763, 798, 829, 839, 840, 841, 842, 843, 844, 845, 850, 861, 862, 881, 882, 885, 893, 896, 897, 904, 905, 981, 982, 984, 985, 986, 988, 989, 991, 992, 994, 995, 996, 1000, 1002, 1005, 1006, 1008, 1013, 1017, 1021, 1023, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "better_prob": 259, "between": [2, 3, 6, 7, 9, 10, 11, 18, 32, 35, 36, 37, 38, 40, 41, 51, 58, 59, 64, 83, 88, 96, 98, 101, 109, 112, 115, 119, 120, 122, 125, 141, 149, 154, 155, 157, 164, 166, 167, 168, 169, 176, 181, 183, 188, 192, 193, 197, 198, 199, 201, 202, 205, 215, 218, 226, 231, 233, 236, 251, 253, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 273, 276, 278, 281, 285, 289, 290, 292, 293, 305, 310, 312, 318, 328, 338, 342, 344, 345, 350, 351, 352, 359, 361, 365, 366, 374, 379, 381, 388, 391, 392, 393, 394, 399, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 430, 440, 441, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 458, 463, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 514, 515, 521, 524, 527, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 549, 550, 553, 554, 559, 560, 562, 563, 564, 565, 584, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 620, 627, 632, 633, 634, 639, 642, 645, 646, 647, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 676, 678, 679, 681, 684, 688, 690, 692, 694, 695, 696, 699, 701, 703, 704, 705, 707, 709, 710, 714, 715, 716, 717, 719, 724, 725, 726, 729, 730, 731, 734, 736, 737, 743, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 809, 817, 818, 819, 820, 821, 829, 830, 832, 834, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 868, 871, 872, 874, 875, 877, 878, 881, 882, 883, 885, 890, 893, 894, 898, 904, 905, 909, 912, 913, 914, 915, 917, 938, 949, 950, 961, 981, 984, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1013, 1014, 1026, 1027, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "bewar": 418, "beyond": [2, 25, 198, 199, 253, 365, 367, 378, 379, 391, 406, 416, 729, 730, 738, 783, 784, 787, 909, 989, 993, 1002, 1007, 1013, 1043], "beyst": 1049, "bezuidenhout": 1048, "bf5fff": 90, "bfg": [300, 610, 611, 648, 649, 658, 669, 672, 674, 680, 687, 995, 996, 1050], "bgm": 797, "bharat": [413, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "bharathi": 1046, "bhardwaj": [1042, 1043], "bhargav": 1041, "bhaskaran": [1042, 1043], "bhat": [1048, 1050, 1051, 1052], "bhattacharya": 1043, "bhattarai": 1045, "bhavika": 1047, "bhoomika": 1050, "bhsu": 1039, "bhtsne": [692, 1042], "bi": [53, 417], "bia": [2, 8, 25, 76, 95, 108, 116, 117, 122, 125, 134, 164, 167, 169, 176, 177, 179, 264, 299, 342, 345, 361, 374, 381, 393, 406, 411, 415, 416, 419, 524, 556, 559, 560, 607, 608, 614, 642, 648, 649, 658, 659, 669, 670, 680, 861, 862, 877, 879, 883, 889, 890, 892, 893, 894, 895, 913, 987, 988, 991, 992, 996, 997, 1000, 1006, 1014, 1026], "bianca": 25, "bianp": 385, "bias": [7, 80, 96, 122, 129, 166, 167, 169, 264, 374, 395, 406, 416, 524, 549, 860, 884, 895, 987, 991, 1000, 1006, 1008], "bibhash": [1045, 1046], "bibl": 351, "bibliograph": 379, "bibtex": 0, "bic": [136, 164, 175, 181, 183, 184, 185, 191, 205, 216, 418, 501, 651, 653, 654, 655, 656, 798, 865, 884, 981, 991, 1014, 1035, 1042, 1048, 1049], "bic_criterion": 185, "bicker": 1045, "biclust": [19, 20, 68, 327, 329, 350, 351, 352, 368, 417, 424, 449, 451, 453, 488, 511, 513, 591, 719, 795, 992, 1014, 1029, 1030, 1037, 1041], "bicluster_ncut": 17, "biclusters_": [18, 19, 424, 451, 453], "bidu": [1048, 1049], "biernat": 1047, "big": [2, 42, 58, 60, 202, 219, 236, 249, 366, 379, 385, 394, 411, 417, 421, 538, 561, 562, 564, 565, 806, 828, 839, 840, 841, 842, 843, 1013, 1017, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "bigg": [419, 619], "bigger": [6, 38, 58, 210, 259, 302, 342, 347, 351, 364, 366, 417, 438, 439, 508, 538, 850, 1023, 1030], "biggest": [409, 412, 414, 443], "biggest_inertia": [409, 443], "biggio": 1046, "bigram": [260, 417, 588, 589, 591, 1028], "bigram_vector": 417, "bijil": 1049, "bike": 999, "bike_shar": [2, 11], "bike_sharing_demand": [2, 11, 168], "bilbro": 1042, "bill": [1045, 1046], "billaud": 1043, "billi": 1039, "billing": [1038, 1039, 1040], "billion": 1017, "bimod": [309, 415], "bin": [2, 22, 23, 25, 51, 73, 111, 115, 197, 230, 236, 253, 265, 288, 305, 306, 307, 308, 309, 311, 312, 377, 387, 396, 406, 415, 416, 438, 439, 448, 461, 561, 562, 867, 869, 883, 943, 1027, 1043, 1044, 1045, 1049, 1053], "bin_cent": [51, 197], "bin_edg": 51, "bin_edges_": [51, 306, 869], "bin_seed": [42, 61, 448, 461, 1046], "binar": [266, 268, 269, 371, 373, 407, 754, 839, 868, 869, 871, 875, 877, 885, 888, 992, 994, 1019, 1030, 1049, 1051], "binari": [6, 12, 23, 25, 113, 115, 126, 128, 143, 157, 167, 173, 188, 190, 197, 205, 219, 227, 236, 239, 253, 256, 257, 262, 268, 273, 275, 278, 287, 338, 342, 359, 361, 373, 374, 375, 381, 383, 384, 393, 396, 402, 405, 406, 407, 408, 409, 416, 417, 419, 437, 438, 439, 452, 487, 500, 508, 509, 520, 523, 549, 550, 553, 555, 559, 561, 566, 567, 568, 581, 588, 589, 591, 593, 594, 602, 610, 627, 628, 629, 630, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 700, 703, 707, 708, 709, 712, 713, 715, 718, 720, 722, 727, 729, 730, 734, 735, 738, 739, 740, 741, 742, 743, 782, 783, 784, 787, 788, 789, 794, 796, 799, 800, 801, 803, 804, 805, 806, 814, 818, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 850, 860, 871, 875, 877, 885, 888, 904, 906, 909, 955, 982, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1019, 1032, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1053], "binary_crossentropi": 1049, "binary_eros": 12, "binary_onli": [381, 1045, 1046], "binarytre": [849, 1039, 1043, 1047], "bincount": [393, 413, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 904, 906, 909, 912, 914, 929, 930, 1042], "bind": [396, 1012, 1035, 1042, 1043], "binder": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359], "binesh": [1051, 1052], "binet": [1045, 1050], "bing": [1041, 1042], "bingham": 1004, "binned_numer": [197, 215], "binom": 988, "binomi": [121, 124, 416, 553, 559, 561, 988, 1049, 1052], "bio": 262, "bioinformat": [628, 982], "biologi": 9, "biometrika": [880, 892], "biostatist": [411, 478], "bipartit": [405, 453, 511, 997], "biprateep": 1047, "birch": [34, 38, 42, 59, 62, 66, 89, 164, 319, 367, 393, 446, 449, 512, 1014, 1029, 1030, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "birch_model": 40, "birchbox": 1010, "bird": [582, 718, 754, 992], "birodkar": [1040, 1041, 1043], "bischl": 373, "bisect": [34, 38, 55, 57, 58, 59, 66, 158, 164, 255, 443, 447, 512, 1014, 1049], "bisect_km": 319, "bisect_mean": 443, "bisecting_strategi": [409, 443], "bisectingkmean": [41, 409, 1049, 1050, 1051], "bisector": 32, "bishop": [532, 534, 541, 741, 797, 988, 993, 1007], "bistochast": [405, 451], "biswadip": 1045, "biswaroop": 1050, "bit": [2, 11, 25, 46, 51, 76, 96, 195, 199, 278, 305, 338, 351, 361, 365, 374, 377, 393, 416, 417, 582, 589, 658, 834, 924, 925, 989, 993, 1011, 1021, 1028, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052, 1053], "bithash": 640, "bithash_": 640, "bitli": 1017, "bitmap": 376, "bittarello": 1048, "bjerr": 1043, "bla": [365, 366, 377, 380, 385, 778, 1035, 1043, 1044, 1046, 1047, 1053], "black": [2, 7, 8, 9, 11, 24, 32, 42, 47, 53, 54, 78, 79, 90, 93, 118, 141, 144, 149, 150, 154, 155, 158, 162, 167, 168, 176, 185, 186, 187, 189, 193, 197, 198, 199, 203, 206, 209, 210, 215, 226, 236, 243, 246, 288, 299, 300, 302, 330, 347, 356, 357, 358, 379, 396, 401, 409, 416, 419, 555, 556, 631, 998, 999, 1008, 1012, 1019], "blackberri": 311, "blackburn": [1038, 1041], "blackd0t": 1045, "blair": [4, 374], "blakeflei": 1041, "blame": 379, "blanc": 311, "blanchard": [1039, 1040], "blank": [58, 384, 982, 1008], "bldgtype": 119, "bleed": 1017, "blei": [414, 536, 797], "bleich": [168, 999], "bleki": 1047, "blend": [118, 130, 311, 393, 413, 1012], "bli": [366, 377, 391], "blind": [92, 95, 104, 164, 196, 350, 414, 533, 541, 1014], "blindli": 383, "blink": 338, "blis_num_thread": 366, "blob": [22, 31, 32, 40, 42, 55, 60, 62, 89, 409, 448, 512, 1040], "blobs_param": 226, "block": [288, 305, 319, 374, 376, 379, 384, 387, 393, 405, 409, 412, 415, 452, 453, 462, 473, 479, 480, 488, 489, 511, 513, 695, 960, 995, 997], "block_siz": [473, 479, 480, 1039], "blocker": [383, 1053], "blocknum": 6, "blockwis": [405, 988], "blog": [319, 365, 379, 385, 387, 394, 1046], "blogpost": 384, "blondel": [0, 22, 46, 98, 188, 198, 219, 234, 260, 350, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "blood": [146, 227, 376, 1026], "bloom": [388, 957], "blown": 341, "blue": [5, 7, 11, 18, 19, 24, 32, 78, 90, 93, 109, 112, 116, 124, 125, 127, 130, 132, 144, 154, 156, 173, 177, 185, 186, 193, 195, 221, 230, 252, 253, 254, 259, 300, 310, 316, 322, 327, 376, 409, 414, 1052], "blueviolet": [211, 289, 337], "blum": 1042, "blyston": [1045, 1046], "bmaisonn": 1047, "bmalezieux": 1048, "bmatrix": [405, 984], "bmc": 1002, "bmi": [146, 185, 186, 237, 376, 1000], "bmreinig": 1049, "bmug": 17, "bmva": 671, "bmvc": [671, 988], "bnp": 1010, "bo": [24, 1047], "board": 0, "boat": 320, "bob": [1036, 1042], "bobyrev": 1042, "boca": 988, "bodega": 311, "bodenhof": [405, 719], "bodi": [6, 68, 146, 237, 320, 376], "body_bow": 68, "body_stat": 68, "boe": 10, "boechat": 1042, "boenisch": 1046, "boerner": 1049, "boersma": 1041, "bogazici": 376, "bogdan": 1035, "boggavarapu": 1047, "bohl": [1047, 1049], "bohn\u00e9": 1048, "boil": [109, 382, 393, 411], "boilerpl": [233, 381, 1017, 1028], "boisberrang": [0, 397, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bold": [58, 122, 186, 192, 379], "boll": 988, "bolmier": [1046, 1047, 1051], "boltzmann": [71, 83, 137, 164, 187, 212, 298, 303, 502, 658, 713, 830, 860, 861, 862, 864, 890, 1014, 1029, 1030, 1037], "bommarito": [1038, 1039], "bonald": 1050, "bone": [210, 347], "bonferroni": 259, "bonn": [72, 113, 188, 231, 327, 345], "bonu": [215, 377, 379, 1023, 1028], "bonusmalu": [197, 215], "boo": [146, 376], "book": [46, 68, 443, 447, 449, 834, 839, 843, 988, 989, 990, 993, 1010, 1047], "booktitl": 0, "bool": [47, 64, 79, 162, 215, 359, 379, 421, 422, 423, 424, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 714, 726, 727, 728, 729, 730, 731, 738, 741, 742, 750, 751, 754, 756, 761, 763, 767, 769, 774, 778, 782, 783, 784, 785, 787, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 822, 823, 824, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 935, 941, 942, 954, 957, 963, 965, 973, 978, 979, 980, 982, 1044, 1047, 1048], "bool_": 199, "boolean": [107, 233, 359, 374, 379, 381, 388, 410, 416, 417, 418, 464, 561, 562, 581, 582, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 629, 632, 633, 636, 649, 671, 699, 778, 833, 839, 860, 867, 887, 920, 976, 982, 988, 994, 999, 1002, 1008, 1035, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1053], "boom": 1053, "boost": [5, 11, 69, 108, 109, 110, 113, 114, 116, 117, 127, 130, 133, 134, 156, 164, 169, 170, 177, 199, 205, 221, 258, 260, 300, 309, 311, 319, 322, 344, 380, 385, 393, 407, 408, 418, 448, 466, 467, 490, 496, 501, 520, 553, 554, 559, 560, 561, 562, 564, 565, 632, 633, 634, 635, 741, 742, 748, 750, 790, 800, 803, 804, 805, 821, 827, 830, 865, 877, 878, 988, 992, 1012, 1014, 1015, 1030, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1048], "booster": 1040, "boosting_error": 109, "boostingdecis": 416, "booth": 1042, "bootstrap": [112, 113, 121, 161, 262, 271, 317, 413, 416, 554, 555, 556, 557, 558, 563, 564, 565, 930, 963, 988, 1035, 1036, 1038, 1040, 1043, 1045, 1048], "bootstrap_featur": [416, 555, 556], "bootstrap_indic": 262, "borchmann": 1050, "border": [446, 1045], "borderaxespad": 78, "borderpad": 356, "borderwidth": 115, "borg": [690, 694, 989], "borgn": 1048, "bori": [1039, 1047, 1051], "borja": 1039, "born": 1041, "borovec": 1049, "borovikova": 1046, "bosch": 1048, "bossan": [1047, 1049, 1050, 1051, 1053], "bossch": [0, 397, 1042, 1043, 1044, 1048], "boston": 1017, "bot": [383, 997, 1049, 1052], "botelho": 1047, "both": [2, 3, 5, 7, 8, 11, 13, 18, 23, 24, 25, 32, 40, 52, 53, 62, 69, 76, 78, 83, 84, 98, 100, 107, 112, 115, 116, 119, 120, 125, 129, 130, 133, 141, 142, 144, 146, 149, 156, 158, 166, 167, 168, 169, 176, 181, 183, 185, 186, 197, 198, 199, 201, 202, 203, 205, 215, 222, 232, 233, 234, 243, 244, 245, 246, 247, 248, 253, 259, 260, 261, 262, 266, 268, 270, 275, 283, 295, 305, 309, 310, 315, 317, 321, 327, 328, 335, 340, 342, 350, 351, 352, 359, 361, 365, 366, 367, 372, 373, 374, 375, 377, 379, 381, 385, 386, 388, 391, 392, 393, 394, 396, 399, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 422, 437, 446, 452, 462, 468, 475, 482, 483, 484, 485, 488, 489, 496, 497, 500, 502, 505, 507, 508, 509, 534, 538, 540, 547, 551, 555, 556, 557, 563, 564, 565, 566, 567, 577, 588, 589, 591, 597, 607, 608, 627, 632, 633, 643, 657, 658, 659, 672, 674, 676, 678, 687, 699, 704, 712, 716, 729, 730, 731, 736, 738, 757, 761, 767, 774, 778, 783, 784, 787, 788, 789, 795, 803, 804, 806, 823, 833, 861, 862, 876, 878, 880, 892, 897, 902, 904, 905, 912, 914, 928, 933, 942, 955, 967, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1023, 1026, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "botstein": [628, 982], "bottleneck": [365, 385, 416, 448, 861, 862], "bottom": [4, 6, 10, 12, 13, 32, 35, 37, 40, 42, 43, 49, 51, 60, 62, 89, 90, 120, 128, 133, 197, 208, 226, 243, 245, 246, 249, 256, 259, 270, 288, 305, 326, 328, 338, 379, 406, 409, 415, 587, 916, 986, 988, 992, 1000, 1013, 1024, 1027], "bottom_h": 305, "bottou": [676, 677, 678, 996, 1006], "bou": [1050, 1051], "boucaud": 1043, "boucher": 1042, "bouckaert": 259, "boulard": 1052, "bould": 409, "bouldin": 725, "boulogn": 1038, "boun": 376, "bound": [25, 53, 153, 155, 157, 164, 199, 215, 221, 225, 241, 258, 386, 409, 414, 417, 419, 420, 444, 489, 502, 512, 523, 536, 595, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 635, 637, 650, 654, 658, 677, 705, 735, 788, 797, 798, 844, 845, 881, 893, 896, 897, 898, 906, 907, 908, 911, 928, 960, 988, 991, 992, 995, 1004, 1006, 1007, 1009, 1014, 1043, 1046, 1047, 1049], "bound_": 536, "boundari": [6, 9, 12, 23, 24, 25, 29, 32, 54, 56, 58, 107, 108, 111, 118, 128, 132, 134, 138, 150, 151, 153, 157, 164, 168, 180, 198, 206, 226, 231, 234, 262, 274, 275, 291, 293, 294, 296, 299, 305, 307, 310, 324, 329, 331, 333, 335, 336, 337, 338, 340, 341, 346, 347, 348, 356, 375, 406, 416, 417, 419, 450, 456, 504, 536, 549, 550, 569, 588, 589, 591, 631, 735, 761, 800, 833, 846, 852, 854, 855, 856, 879, 883, 900, 901, 906, 908, 909, 912, 928, 986, 995, 998, 1002, 1005, 1006, 1007, 1014, 1035, 1037, 1039, 1048, 1049, 1050, 1052], "bounding_ax_": [386, 632], "boundscheck": [366, 380], "bourassa": 416, "bourbeau": [1042, 1043, 1044], "bourboux": 1046, "bourguignat": 1040, "bournhonesqu": 1045, "bousquet": 900, "boutili": 1004, "boutsidi": 414, "bow": 410, "bown": 1041, "box": [2, 8, 28, 53, 168, 169, 219, 278, 305, 309, 386, 414, 416, 512, 555, 556, 880, 892, 916, 918, 992, 993, 999, 1002, 1008, 1012, 1019, 1043, 1051], "boxplot": [8, 78, 123, 167, 170, 273, 315], "boxplot_runtim": 8, "boxstyl": [7, 307], "boy": 1049, "boyd": 988, "boyl": 1052, "boyuan": [1039, 1040, 1041], "bp": [8, 123, 146, 185, 186, 376, 1000], "bpo": 878, "br": 111, "br_estim": 161, "bracket": [379, 988], "bradi": 1042, "bradlei": [146, 376, 988], "bradshaw": [1038, 1039, 1042], "bradypu": [9, 296, 374, 498], "bradypus_variegatus_0": 9, "brain": 373, "branch": [365, 377, 379, 382, 383, 409, 416, 442, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 912, 913, 914, 915, 917, 995, 999, 1008], "branching_factor": 442, "brand": [394, 396], "brandon": [1041, 1042, 1049, 1050], "brandt": 1046, "brandyn": 1035, "brault": 1042, "braun": 1043, "bravi": 1041, "braycurti": [450, 457, 699, 778, 779, 780, 995], "braycurtisdist": 699, "brc": [409, 442], "bre": [634, 1008], "bread": 1017, "breadth": [844, 845, 849, 1017, 1037], "breadth_first": [844, 845, 849], "break": [15, 37, 44, 68, 79, 164, 186, 189, 203, 233, 245, 278, 318, 326, 333, 348, 350, 352, 379, 381, 383, 385, 392, 409, 469, 512, 639, 774, 778, 781, 797, 877, 884, 889, 906, 909, 988, 991, 1000, 1002, 1007, 1013, 1014, 1035, 1036, 1042, 1043, 1045, 1047, 1051], "break_ti": [346, 906, 909, 1007, 1045], "breakdown": [78, 79, 214, 679, 988], "breakdown_": 679, "breast": [146, 372, 500, 1000, 1030, 1040], "breast_canc": 328, "breast_cancer_data": 146, "brecht": 641, "bredin": 1039, "breiman": [169, 413, 416, 516, 517, 518, 555, 556, 564, 565, 634, 912, 913, 1000, 1008], "brekk": 1050, "bremen": [22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232], "brendan": [36, 440, 454, 1051, 1052, 1053], "brenden": 1049, "brenner": 992, "breno": [1042, 1043], "brent": [1039, 1043, 1044], "brentfagan": 1044, "brett": [1038, 1040, 1041, 1042, 1043, 1050], "brettingen": 1041, "breuer": 1046, "breunig": [409, 450, 457, 850, 998], "breve": 1051, "brevin": [1051, 1052], "brew": [121, 377, 396], "brian": [0, 44, 398, 708, 992, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "brice": [1047, 1048], "bridg": [391, 989, 1012], "brief": 990, "briefli": [268, 378, 392, 416, 981, 1045], "brier": [22, 23, 25, 406, 709], "brier1950": 992, "brier_scor": 22, "brier_score_loss": [22, 23, 406, 992, 1043, 1044, 1045, 1053], "brigata": 376, "bright": 338, "brighter": 157, "brigi": [1046, 1047], "brigitta": [1045, 1046, 1047, 1051], "bring": [167, 305, 414, 676, 678, 989, 1012, 1017], "british": 417, "brittl": [37, 409], "broad": [379, 393, 1012], "broadcast": 627, "broader": [307, 988, 1016], "broadli": [393, 409], "brocchini": 1047, "brochart": 1052, "brockherd": 1037, "brodersen": 708, "broke": 1042, "broken": [396, 413, 599, 600, 635, 720, 920, 992, 1008, 1038, 1042, 1043, 1044, 1046, 1049], "brook": [1038, 1039, 1047], "brought": [166, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "brown": [9, 90, 296, 374, 498, 628, 982, 1040, 1042, 1043, 1044, 1047], "brows": 383, "browser": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 379, 387, 1002, 1052], "broyden": 988, "brr": 176, "brr_poli": 176, "brr_score": 176, "bruce": [1045, 1046], "brucher": [0, 398, 1035], "brummitt": [1042, 1043], "brunak": 743, "brunner": 1039, "bruno": [1046, 1047, 1048], "brutal": 338, "brute": [283, 391, 403, 413, 420, 444, 446, 450, 457, 632, 633, 688, 689, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 999, 1030, 1039, 1043, 1047, 1050, 1051, 1052, 1053], "bry": [189, 206], "bryan": [1035, 1038, 1044, 1045, 1048], "br\u00f6mmel": [1049, 1050], "br\u00fblade": 311, "bsa": 764, "bsas_in_radian": 764, "bscikit": 1035, "bsd": [3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 35, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 68, 69, 71, 72, 73, 80, 87, 88, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 202, 204, 205, 213, 214, 219, 220, 221, 223, 226, 229, 231, 232, 234, 236, 243, 245, 260, 263, 265, 272, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 325, 326, 327, 328, 330, 342, 343, 345, 346, 350, 351, 352, 385, 391], "bsh": 1050, "bsmtfinsf1": [119, 130], "bsmtfinsf2": 119, "bsmthalfbath": 119, "bsmtunfsf": 130, "bspline": 883, "bsplines_": [198, 883], "bsr": [924, 925, 1048], "bt": 417, "btol": [672, 674], "buck": 627, "budarz": 1048, "buddha": 1040, "budget": [0, 119, 839, 840, 841, 842, 843, 981], "bueno": 764, "buffer": [48, 1048], "buffer_mb": 1035, "bug": [233, 315, 316, 317, 318, 319, 320, 321, 322, 368, 377, 381, 382, 384, 387, 391, 393, 1010, 1013, 1035, 1036, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bugfix": [383, 1035, 1049], "buguen": 1035, "buhmann": 708, "build": [0, 2, 5, 15, 30, 41, 53, 65, 72, 97, 109, 118, 120, 127, 133, 143, 145, 160, 161, 163, 164, 167, 205, 264, 267, 278, 281, 283, 301, 302, 306, 311, 312, 352, 361, 365, 366, 367, 375, 381, 382, 383, 384, 385, 393, 396, 401, 407, 409, 413, 416, 417, 442, 490, 501, 503, 524, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 585, 586, 588, 589, 591, 627, 628, 630, 691, 713, 714, 801, 805, 809, 818, 824, 826, 865, 882, 884, 912, 913, 914, 915, 917, 937, 981, 982, 989, 992, 996, 998, 1002, 1007, 1008, 1012, 1013, 1014, 1016, 1017, 1020, 1022, 1026, 1027, 1035, 1038, 1040, 1041, 1042, 1044, 1047], "build_analyz": [417, 588, 589, 591, 1045], "build_clib": 377, "build_ext": [377, 385], "build_numb": 366, "build_preprocessor": [417, 588, 589, 591, 1045], "build_projection_oper": 12, "build_token": [17, 417, 588, 589, 591], "build_tool": 383, "builder": [6, 8, 345, 383], "buildtool": 377, "built": [28, 84, 107, 109, 110, 118, 120, 169, 205, 262, 278, 296, 315, 356, 359, 365, 374, 377, 379, 380, 381, 383, 385, 387, 388, 391, 392, 393, 396, 402, 407, 409, 410, 413, 416, 418, 445, 503, 553, 554, 555, 556, 559, 560, 561, 562, 588, 589, 593, 597, 639, 640, 641, 642, 643, 646, 647, 652, 658, 660, 661, 662, 663, 672, 673, 674, 675, 681, 803, 804, 811, 835, 838, 844, 845, 914, 915, 976, 988, 992, 993, 1005, 1006, 1008, 1012, 1017, 1028, 1035, 1038, 1039, 1041, 1047], "builtin": 1007, "buitinck": [0, 13, 350, 351, 352, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "bulk": [268, 420, 444], "bulk_benchmark": 8, "bulk_benchmark_estim": 8, "bulk_runtim": 8, "bull": 1042, "buluttekin": 1045, "bumblebe": 1048, "bunch": [9, 233, 372, 373, 374, 464, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 567, 568, 569, 570, 632, 633, 634, 863, 864, 912, 913, 914, 915, 949, 952, 1017, 1028, 1040, 1042, 1045, 1047, 1051], "bundl": [1043, 1044], "bupu": 168, "burden": [379, 876, 1013], "bureau": 374, "buri": 379, "burjek": 1035, "burk": [0, 362, 1050], "burn": [1042, 1043], "burst": 992, "busch": [1043, 1044, 1046], "bush": [4, 374], "busi": [2, 197, 259, 387, 391, 408, 788, 988, 992, 1017], "business_metr": 253, "business_scor": 253, "bussonni": [1035, 1047], "butler": [474, 1038, 1046, 1047], "butlerdavi": 474, "butter": 1017, "button": [379, 387, 1026], "butyugina": 1051, "buuren": [627, 982], "buzenet": [1050, 1051], "bv_bunch": 9, "bwignal": 1038, "bydat": 1028, "bypass": [408, 410, 599, 646, 652, 822, 912, 913, 914, 915, 1051], "byproduct": 222, "byrd": 658, "byron": 1047, "byte": [46, 51, 417, 487, 503, 508, 509, 582, 588, 589, 591, 957, 1026, 1028, 1035, 1042, 1043, 1050, 1053], "bz2": [15, 508, 509], "bz2file": 15, "bzip2": 1035, "b\u00e9gude": 311, "c": [2, 4, 5, 6, 9, 10, 11, 17, 22, 23, 25, 28, 29, 32, 37, 38, 40, 41, 43, 50, 54, 55, 57, 58, 59, 63, 69, 70, 72, 84, 88, 89, 90, 98, 99, 109, 111, 112, 118, 119, 126, 128, 129, 131, 132, 138, 146, 150, 151, 152, 153, 157, 173, 180, 182, 187, 188, 189, 190, 192, 194, 195, 204, 206, 208, 209, 210, 211, 213, 214, 218, 219, 220, 222, 223, 231, 232, 234, 238, 244, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 262, 264, 268, 270, 283, 286, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 317, 318, 319, 320, 321, 322, 327, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 350, 356, 357, 358, 365, 366, 373, 374, 376, 377, 379, 380, 381, 382, 384, 387, 388, 391, 396, 399, 405, 406, 409, 410, 411, 412, 413, 414, 416, 418, 422, 437, 442, 443, 446, 447, 449, 459, 468, 475, 523, 528, 534, 538, 540, 541, 547, 549, 550, 590, 607, 608, 610, 631, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 673, 679, 685, 686, 688, 689, 692, 693, 708, 714, 715, 718, 731, 735, 741, 742, 758, 759, 800, 814, 823, 829, 831, 839, 840, 841, 842, 843, 844, 845, 851, 853, 860, 875, 877, 878, 879, 883, 885, 899, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 919, 924, 925, 955, 981, 984, 985, 987, 988, 989, 990, 992, 994, 995, 997, 999, 1002, 1004, 1006, 1007, 1008, 1012, 1017, 1019, 1023, 1024, 1026, 1027, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051], "c0": [119, 229, 311], "c1": [63, 119, 157, 229, 311], "c2": [63, 119, 157, 229, 311], "c22": 320, "c26": 320, "c3": [63, 119, 311], "c4": [63, 311, 1015, 1030], "c5": [63, 1015, 1030], "c56poni": 1045, "c6": 63, "c99": 1012, "c_": [9, 23, 24, 25, 56, 78, 94, 118, 121, 127, 128, 138, 151, 195, 210, 213, 226, 289, 308, 310, 330, 338, 346, 347, 409, 659, 714, 715, 718, 992, 1023, 1026, 1027], "c_0": [984, 990], "c_1": 989, "c_2": [409, 989], "c_2d_rang": 338, "c_e": 409, "c_i": [409, 995], "c_j": [409, 997], "c_jh_j": 997, "c_k": 549, "c_option": 70, "c_p": 988, "c_q": 409, "c_rang": 338, "c_scale": 345, "ca": [146, 376, 409, 442, 912, 913, 1004, 1008], "cabernet": 311, "cabin": 320, "cablevis": 10, "cabrera": 1045, "cach": [11, 52, 64, 164, 260, 283, 284, 286, 291, 295, 297, 365, 366, 374, 393, 441, 445, 450, 468, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 508, 509, 800, 846, 848, 864, 865, 902, 906, 907, 908, 909, 910, 977, 995, 1007, 1014, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1053], "cache_path": 995, "cache_s": [468, 902, 906, 907, 908, 909, 910, 1007], "cached_pip": [70, 410], "cachedir": [52, 70, 388, 410], "caching_dir": 977, "caherrera": 1048, "cai": 1048, "caicedo": 1035, "caio": [1041, 1043, 1045], "caj": 10, "caje": 1036, "cal_clf": 24, "cal_clf_prob": 24, "cal_hous": 374, "cal_scor": 24, "calcot": 1048, "calcsiz": 377, "calcul": [5, 22, 24, 31, 44, 57, 78, 107, 108, 109, 113, 131, 134, 162, 164, 170, 193, 201, 202, 214, 231, 233, 258, 259, 265, 269, 274, 281, 336, 342, 343, 361, 365, 386, 393, 399, 405, 406, 409, 413, 414, 416, 420, 438, 443, 444, 446, 448, 450, 451, 453, 455, 456, 471, 472, 478, 481, 536, 547, 553, 564, 569, 597, 611, 620, 632, 633, 634, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 679, 681, 684, 688, 690, 692, 694, 707, 716, 729, 730, 735, 736, 738, 744, 750, 751, 754, 764, 769, 771, 772, 773, 774, 778, 781, 783, 784, 787, 788, 789, 792, 793, 795, 807, 809, 825, 829, 842, 844, 845, 882, 883, 884, 890, 894, 904, 905, 930, 943, 984, 986, 988, 989, 990, 992, 994, 995, 996, 1000, 1002, 1005, 1007, 1014, 1023, 1026, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cald": 899, "caleb": 1047, "calibr": [11, 26, 28, 112, 125, 132, 215, 229, 253, 259, 261, 368, 393, 399, 512, 515, 564, 569, 658, 659, 676, 709, 729, 741, 784, 787, 788, 799, 822, 830, 842, 901, 904, 932, 981, 988, 992, 1005, 1007, 1014, 1015, 1030, 1032, 1039, 1041], "calibrated_classifi": 24, "calibrated_classifiers_": [24, 406, 437], "calibrated_clf": 437, "calibrated_df": [23, 25], "calibrated_forest": 981, "calibratedclassifiercv": [22, 23, 24, 361, 393, 399, 406, 676, 799, 822, 981, 1007, 1013, 1039, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercvifittedcalibratedclassifiercv": 24, "calibration_curv": [22, 406, 437, 438, 1044, 1049, 1053], "calibration_displai": [23, 25], "calibrationdisplai": [23, 25, 406, 932, 1048, 1049, 1053], "california": [120, 157, 161, 162, 305, 311, 317, 372, 376, 490, 1030], "calinski": [710, 1041], "calinski_harabasz_scor": [409, 1043], "calinski_harabaz_scor": [1041, 1043], "cali\u0144ski": 409, "call": [11, 12, 15, 44, 46, 48, 52, 69, 90, 107, 114, 121, 143, 149, 153, 155, 157, 166, 168, 185, 197, 198, 201, 215, 233, 237, 239, 240, 253, 259, 260, 268, 274, 275, 278, 283, 285, 310, 312, 317, 318, 350, 351, 352, 359, 365, 366, 367, 374, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 399, 404, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 421, 432, 440, 443, 446, 447, 449, 450, 451, 452, 453, 454, 457, 460, 462, 464, 465, 468, 469, 474, 482, 483, 484, 488, 491, 492, 495, 497, 503, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 577, 582, 583, 588, 589, 591, 597, 602, 607, 608, 610, 611, 614, 617, 620, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 704, 732, 742, 755, 771, 774, 778, 779, 780, 781, 793, 797, 798, 800, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 853, 855, 860, 861, 862, 863, 864, 867, 868, 869, 871, 873, 874, 876, 881, 884, 885, 888, 893, 894, 895, 896, 897, 901, 904, 905, 906, 907, 909, 910, 913, 915, 931, 935, 940, 941, 949, 950, 952, 958, 959, 960, 963, 966, 976, 981, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1012, 1017, 1019, 1023, 1026, 1027, 1028, 1030, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "callabl": [248, 263, 393, 413, 416, 417, 418, 420, 421, 441, 443, 444, 445, 446, 447, 449, 450, 452, 457, 459, 460, 464, 465, 466, 467, 531, 533, 535, 537, 539, 545, 546, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 610, 611, 620, 628, 630, 634, 639, 643, 659, 666, 671, 673, 675, 688, 691, 692, 696, 711, 719, 732, 742, 771, 774, 778, 779, 780, 781, 792, 793, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 868, 877, 899, 900, 906, 907, 908, 909, 910, 953, 959, 962, 976, 981, 992, 1002, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1051], "callback": [531, 537, 539, 545, 546, 853, 958, 1013, 1051], "callbl": 846, "calle": [233, 950], "caller": [233, 410, 646, 647, 652, 660, 661, 662, 681, 894, 895, 949, 950, 960, 968, 969, 970, 1044], "callgrin": 385, "callgrind": 382, "calm": 10, "caltech": 350, "calvin": [1038, 1039], "calvo": [1043, 1044], "cambridg": [374, 414, 590, 839, 843, 988, 990, 994], "came": 991, "camera_ind": 12, "camil": [1043, 1051, 1052], "camila": 1045, "camilaagw": 1045, "camilo": 1041, "campello": [409, 446], "campustrampu": 1042, "can": [0, 2, 3, 5, 6, 7, 8, 10, 11, 13, 17, 18, 22, 23, 24, 25, 29, 30, 31, 35, 38, 40, 41, 44, 46, 47, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 68, 69, 70, 71, 76, 77, 78, 79, 80, 84, 88, 94, 96, 97, 98, 100, 102, 103, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 141, 142, 143, 144, 145, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 181, 182, 185, 186, 188, 190, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 213, 214, 215, 218, 219, 220, 226, 227, 228, 229, 230, 232, 233, 236, 237, 240, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 270, 271, 273, 274, 275, 278, 281, 283, 285, 287, 288, 289, 290, 292, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 329, 330, 335, 336, 338, 341, 342, 345, 350, 351, 352, 357, 358, 359, 361, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 432, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 472, 482, 483, 484, 487, 496, 499, 503, 508, 509, 512, 521, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 632, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 689, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 704, 707, 709, 711, 712, 718, 720, 721, 722, 723, 724, 726, 727, 729, 730, 732, 733, 737, 738, 739, 740, 742, 743, 746, 752, 755, 756, 757, 758, 759, 763, 779, 780, 782, 783, 784, 785, 787, 788, 789, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 863, 864, 867, 868, 869, 871, 872, 873, 877, 878, 879, 882, 883, 884, 889, 896, 897, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 920, 922, 924, 928, 930, 935, 938, 940, 941, 947, 949, 952, 955, 958, 960, 962, 963, 966, 973, 976, 977, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "canberra": [450, 457, 699, 778, 779, 780, 995], "canberradist": 699, "cancel": [416, 417, 763], "cancer": [146, 372, 408, 500, 593, 594, 851, 1000, 1030, 1040], "candela": 376, "candid": [72, 248, 257, 260, 267, 317, 367, 379, 383, 409, 416, 448, 450, 800, 803, 804, 812, 814, 988, 995, 1008, 1041], "candidate_idx": 258, "cannon": 1050, "cannot": [2, 11, 38, 54, 73, 80, 93, 98, 117, 167, 168, 181, 197, 215, 233, 305, 338, 345, 367, 378, 380, 385, 391, 393, 394, 402, 409, 410, 411, 413, 414, 416, 417, 419, 465, 521, 538, 539, 540, 543, 547, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 651, 655, 682, 692, 711, 717, 778, 803, 804, 851, 852, 854, 855, 856, 864, 865, 869, 874, 875, 886, 922, 924, 925, 981, 982, 986, 988, 989, 992, 993, 998, 1002, 1007, 1008, 1013, 1017, 1023, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "canon": [10, 393, 406, 416, 482, 483, 485, 768, 1013, 1015, 1030], "canonic": 393, "cant": 1052, "cantor": [628, 982], "canuma": 1048, "canva": 10, "cao": 409, "cap": [405, 409, 755, 992, 1044], "capabl": [53, 54, 84, 125, 154, 201, 222, 381, 393, 396, 993, 996, 1007, 1008, 1017, 1035, 1044, 1052], "capac": [125, 149, 169], "capit": [8, 23, 322, 496, 806, 823], "cappion": [692, 989], "cappuzzo": 1052, "capsiz": 328, "caption": 68, "captur": [2, 7, 10, 11, 35, 37, 84, 122, 127, 141, 154, 167, 176, 181, 197, 201, 249, 281, 316, 338, 342, 387, 409, 416, 417, 418, 571, 588, 589, 591, 850, 959, 992, 997, 1005, 1009, 1026, 1047], "car": 197, "carbal": 1052, "card": 1043, "cardif": 1010, "cardin": [35, 116, 117, 123, 169, 170, 311, 312, 321, 409, 416, 463, 553, 554, 557, 558, 559, 560, 564, 565, 566, 679, 877, 878, 885, 912, 913, 914, 915, 992, 993, 1000, 1002, 1049, 1050], "cardiotocogram": 236, "care": [6, 53, 123, 167, 253, 278, 342, 365, 367, 383, 385, 391, 393, 394, 402, 408, 409, 411, 417, 437, 460, 469, 640, 658, 659, 666, 667, 668, 676, 677, 678, 695, 904, 989, 1007, 1017, 1051], "carefulli": [273, 365, 414, 1007], "carei": [1038, 1039, 1040, 1041, 1042], "carett": 1042, "cari": 1047, "carl": [419, 610, 611, 614, 619, 622], "carla": 1051, "carlo": [0, 231, 369, 416, 419, 611, 641, 642, 984, 997, 1035, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "carlson": 1042, "carlsson": 1038, "carmen": 311, "carnegi": 899, "caro": 1040, "carodorum": 311, "carol": [1041, 1042], "carolin": 996, "carrascosa": [1017, 1039], "carre\u00f1o": 1050, "carri": [10, 29, 109, 162, 253, 259, 262, 267, 300, 307, 352, 394, 417, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1017, 1027], "carrillo": 1040, "carsten": 1048, "cart": [1015, 1030], "carter": [1041, 1042, 1050], "cartesian": [69, 405, 633, 995, 1050], "cartman_nabana": 1045, "cartograph": 173, "cartographi": 988, "caruana": [23, 25, 406, 437, 439], "carvaj": 1035, "casado": 1046, "casagrand": [1043, 1044], "casalegno": 1047, "cascad": 376, "case": [2, 5, 6, 11, 23, 25, 32, 35, 47, 50, 53, 55, 59, 64, 69, 70, 79, 84, 98, 100, 112, 114, 115, 122, 123, 130, 143, 145, 146, 149, 156, 167, 168, 170, 181, 183, 186, 188, 197, 198, 199, 201, 202, 205, 211, 213, 214, 215, 226, 230, 231, 232, 233, 236, 237, 248, 252, 253, 256, 258, 259, 260, 262, 265, 266, 268, 278, 283, 286, 290, 301, 305, 307, 310, 312, 315, 318, 342, 350, 351, 352, 359, 361, 365, 366, 367, 373, 374, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 394, 396, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 437, 440, 443, 444, 446, 447, 451, 453, 463, 464, 465, 467, 474, 496, 508, 509, 515, 539, 541, 542, 543, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 591, 593, 594, 597, 602, 606, 609, 610, 611, 625, 627, 628, 630, 632, 647, 648, 653, 656, 657, 658, 659, 661, 663, 666, 668, 669, 672, 674, 675, 676, 680, 682, 683, 684, 685, 686, 687, 699, 703, 708, 709, 712, 718, 720, 721, 723, 726, 728, 729, 730, 734, 735, 738, 742, 743, 745, 746, 748, 750, 753, 754, 756, 763, 778, 781, 783, 784, 785, 787, 788, 789, 790, 794, 796, 798, 800, 803, 804, 806, 814, 818, 823, 824, 825, 826, 827, 828, 829, 831, 833, 841, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 864, 871, 873, 874, 877, 878, 879, 882, 883, 884, 885, 888, 894, 895, 896, 897, 904, 906, 909, 912, 913, 919, 920, 930, 941, 942, 960, 981, 982, 984, 986, 987, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1002, 1006, 1007, 1008, 1012, 1013, 1017, 1019, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "caselli": [1043, 1044], "cash": 988, "cashman": 1045, "casino": [1049, 1050], "cass": 1041, "cassi": 311, "cast": [9, 11, 51, 197, 219, 373, 394, 417, 496, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 957, 1042, 1043, 1044, 1045, 1048, 1050, 1052], "castachick": 1046, "castello": 1039, "castor": 1046, "caswel": [1048, 1051], "cat": [10, 69, 168, 169, 236, 318, 319, 320, 321, 322, 374, 417, 488, 582, 712, 718, 754, 783, 885, 992, 1002, 1044, 1045, 1047], "cat_column": 236, "cat_linear_processor": 130, "cat_proc": [228, 316], "cat_selector": 130, "cat_str": 17, "cat_tree_processor": 130, "catajara": 1045, "catalfo": 1043, "catalin": 642, "catastroph": [312, 763, 1013], "catch": [42, 60, 301, 366, 387, 388], "catch_warn": [42, 60, 233, 300, 301], "categor": [2, 69, 108, 114, 125, 130, 134, 164, 167, 168, 169, 197, 215, 236, 238, 240, 253, 312, 318, 320, 321, 367, 371, 373, 374, 381, 384, 393, 410, 417, 466, 467, 489, 490, 496, 505, 561, 562, 581, 582, 607, 608, 632, 633, 648, 658, 659, 669, 680, 709, 827, 839, 840, 841, 842, 843, 865, 867, 871, 872, 875, 877, 878, 885, 899, 900, 982, 988, 999, 1000, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1028, 1030, 1035, 1036, 1039, 1040, 1043, 1045, 1047, 1050, 1051, 1052, 1053], "categori": [17, 42, 60, 68, 69, 119, 130, 167, 168, 197, 205, 212, 236, 253, 260, 300, 301, 307, 311, 312, 317, 320, 322, 329, 350, 351, 352, 373, 374, 388, 407, 409, 410, 416, 417, 419, 488, 496, 497, 503, 561, 562, 648, 658, 659, 669, 680, 743, 758, 759, 840, 877, 878, 885, 982, 988, 989, 990, 994, 1000, 1019, 1028, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "categorical_column": [2, 119, 167, 169, 236, 467], "categorical_columns_selector": 236, "categorical_columns_subset": 119, "categorical_crossentropi": [1045, 1049], "categorical_encod": 169, "categorical_featur": [2, 69, 119, 125, 168, 253, 311, 317, 318, 319, 320, 322, 384, 416, 561, 562, 632, 633, 999, 1043, 1047, 1050, 1052], "categorical_preprocessor": [238, 311], "categorical_transform": 69, "categoricalnb": [839, 841, 842, 843, 994, 1045, 1046, 1047, 1048, 1050], "categories_": [877, 878, 885, 1002, 1043, 1050], "category_1_fold": 503, "category_2_fold": 503, "category_count_": 840, "category_s": 351, "categr": 1000, "caterpillar": 10, "cathi": [1039, 1045], "catindex": 168, "catplot": 248, "caught": [379, 387, 402], "caus": [2, 23, 25, 122, 150, 167, 195, 197, 201, 202, 215, 281, 312, 342, 352, 361, 377, 384, 406, 409, 414, 415, 417, 419, 443, 447, 449, 459, 509, 532, 582, 589, 610, 611, 778, 839, 840, 841, 843, 868, 877, 879, 882, 883, 924, 925, 981, 982, 988, 992, 1000, 1002, 1005, 1013, 1019, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "causal": [164, 165, 171, 192, 657, 785, 830, 1014], "causat": 167, "caution": [167, 253, 383, 440, 454, 1043], "cautiou": 1042, "caveat": [413, 419], "cawlei": [264, 992], "cax": [28, 152, 270], "ca\u00f1ardo": 1038, "cb": [152, 230, 247], "cbar_ax": 270, "cbar_kw": [176, 181], "cc": [38, 377], "cc18": 373, "cc_home": [912, 913], "cca": [234, 412, 483, 485, 993, 1039, 1043, 1044, 1045, 1047, 1049, 1053], "ccat": 374, "ccf2002": 984, "cclauss": 1043, "cco": 350, "ccp_alpha": [315, 355, 557, 558, 559, 560, 564, 565, 912, 913, 914, 915, 1008, 1045], "ccp_path": [912, 913, 914, 915], "cd": [93, 146, 376, 377, 379, 383, 385, 414, 471, 472, 478, 531, 537, 539, 540, 543, 545, 546, 547, 988, 1028, 1040, 1050], "cdef": 380, "cdf": 259, "cdist": 1048, "cdivis": 380, "cdot": [259, 342, 405, 409, 414, 415, 419, 614, 615, 619, 622, 623, 870, 984, 986, 992, 996, 1002], "cdrig": 1049, "cdt": 17, "cea": [839, 994], "ceballo": 1049, "ceder": [788, 992], "ceethinwa": [1047, 1048], "ceh": 1050, "ceil": [125, 236, 557, 558, 559, 560, 563, 564, 565, 566, 594, 671, 803, 804, 912, 913, 914, 915, 1006], "celelibi": 1044, "celeo": 1039, "celeux": 528, "cell": [9, 10, 18, 24, 30, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 146, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 296, 302, 311, 316, 317, 319, 320, 322, 327, 359, 376, 384, 692, 992, 993, 1041, 1049], "cellular": 12, "celsiu": [168, 999], "cen": 743, "censor": 1012, "censu": 374, "center": [0, 2, 5, 6, 7, 12, 22, 24, 31, 32, 35, 36, 38, 40, 41, 43, 46, 47, 48, 51, 53, 54, 57, 58, 59, 61, 62, 79, 89, 98, 99, 102, 120, 121, 122, 123, 144, 146, 162, 168, 178, 189, 191, 197, 198, 208, 209, 221, 222, 226, 227, 236, 243, 246, 247, 254, 260, 270, 288, 291, 293, 300, 305, 307, 308, 319, 327, 336, 338, 339, 340, 344, 351, 352, 374, 375, 376, 384, 407, 409, 411, 412, 414, 415, 416, 422, 440, 442, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 501, 512, 524, 534, 535, 541, 544, 550, 606, 609, 610, 611, 632, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 678, 690, 694, 696, 797, 869, 870, 873, 882, 884, 894, 895, 904, 905, 986, 988, 989, 991, 999, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1052], "center1": 64, "center2": 64, "center3": 64, "center4": 64, "center_": 882, "center_box": [58, 512], "centers_0": 308, "centers_1": 308, "centers_init": 57, "cento": 377, "centr": 129, "central": [0, 12, 199, 374, 380, 409, 998, 1012], "centrality_scor": 15, "centroid": [40, 43, 55, 56, 76, 124, 164, 284, 291, 297, 308, 319, 334, 351, 375, 399, 409, 442, 443, 446, 447, 448, 449, 452, 459, 460, 462, 504, 549, 631, 851, 1014, 1015, 1030, 1035, 1039, 1042, 1047, 1051], "centroids_": [442, 446, 851], "ceo": 1017, "cerda": 1049, "certain": [11, 53, 120, 125, 167, 202, 214, 233, 259, 283, 309, 342, 361, 374, 375, 383, 393, 395, 402, 409, 414, 418, 638, 649, 653, 658, 663, 684, 864, 869, 904, 981, 984, 988, 989, 992, 993, 996, 1002, 1007, 1012, 1019, 1023, 1040, 1044, 1047, 1050], "certainli": [51, 68, 167, 351, 408], "certainti": [259, 381, 742, 992], "ceshin": 1041, "cetina": 1047, "cf": [312, 408, 409, 412, 442, 700, 988, 1002, 1013], "cflag": 377, "cft": 409, "cftree": 442, "cg": [302, 658, 659, 672, 674, 687, 988, 1039, 1040, 1042, 1046, 1048, 1049, 1052, 1053], "cga": 157, "cgi": 897, "cgohlk": [1038, 1039], "cgroup": [1048, 1049], "cgsavard": [1045, 1046], "ch": [199, 328, 330], "ch6": 530, "chacon": 705, "chac\u00f3n": 705, "chad": 1052, "chadi": 1043, "chai": [1047, 1050, 1051], "chain": [67, 73, 74, 109, 137, 164, 229, 258, 267, 270, 278, 280, 282, 283, 286, 302, 361, 368, 371, 391, 393, 407, 419, 496, 502, 541, 611, 627, 658, 738, 800, 830, 833, 835, 836, 837, 838, 864, 865, 884, 981, 982, 993, 997, 1009, 1012, 1014, 1017, 1028, 1030], "chain_jaccard_scor": 281, "chain_method": [835, 1053], "chain_method_": 835, "chaitanya": 1046, "chaitanyamog": 1047, "chakhchoukh": 79, "chakravarti": [635, 637], "chalearn": 992, "challeng": [10, 130, 149, 168, 176, 215, 226, 367, 374, 375, 402, 409, 411, 462, 472, 992, 998, 1017, 1019], "chalmer": 1049, "chalmerlow": 1038, "chalulu": 1050, "chan": [0, 842, 884], "chanc": [15, 34, 36, 47, 66, 109, 141, 164, 170, 197, 205, 212, 215, 259, 265, 268, 269, 311, 345, 351, 361, 378, 408, 409, 413, 700, 702, 704, 705, 708, 716, 755, 757, 786, 795, 829, 992, 1000, 1008, 1014, 1051], "chance_level_": [700, 702, 1051], "chance_level_kw": [236, 700, 702, 1051], "chandra": [1045, 1046, 1049], "chang": [5, 23, 24, 25, 93, 97, 98, 112, 115, 123, 150, 161, 166, 167, 170, 198, 199, 201, 202, 237, 238, 253, 254, 259, 266, 269, 273, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 338, 342, 352, 359, 361, 365, 366, 367, 374, 381, 382, 383, 384, 387, 391, 393, 399, 409, 413, 416, 417, 419, 421, 434, 437, 440, 443, 444, 447, 449, 452, 454, 459, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 493, 494, 496, 504, 508, 509, 512, 513, 514, 522, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 588, 589, 590, 591, 593, 594, 597, 602, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 694, 700, 704, 707, 712, 716, 717, 729, 730, 736, 737, 755, 757, 778, 784, 785, 787, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 814, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 854, 855, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 876, 877, 883, 884, 885, 892, 893, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 922, 924, 925, 936, 941, 951, 958, 959, 960, 962, 981, 982, 983, 991, 992, 993, 995, 1002, 1005, 1006, 1007, 1008, 1010, 1013, 1019, 1026, 1028, 1033, 1034, 1054], "changed_onli": 1046, "changedbehaviorwarn": 1047, "changedbehaviourwarn": 1044, "changelog": [320, 383, 393, 1033], "changing_param": 5, "changing_param_valu": 5, "changyao": [1050, 1051], "channel": [366, 374, 377, 396, 417, 493, 494, 583, 584, 586, 587, 1016], "channel_prior": 377, "chapman": 988, "chapter": [93, 361, 381, 409, 414, 416, 419, 530, 532, 534, 614, 619, 622, 643, 982, 985, 988, 1007, 1008], "char": [417, 588, 589, 591, 1035], "char_wb": [417, 588, 589, 591], "charact": [352, 379, 384, 393, 417, 503, 508, 509, 588, 589, 591, 916, 997, 1028, 1035, 1048, 1050], "character": [38, 215, 355, 409, 413, 989], "characteris": 995, "characterist": [42, 60, 146, 154, 164, 226, 227, 239, 251, 253, 254, 256, 261, 266, 276, 305, 328, 361, 374, 376, 384, 406, 408, 413, 416, 419, 503, 504, 623, 638, 658, 702, 706, 708, 727, 782, 788, 789, 819, 830, 833, 871, 909, 988, 1014], "chardet": 417, "chardetect": 417, "charg": [0, 253, 379], "charikar": 984, "charl": [25, 253, 764, 1035, 1038, 1041, 1045, 1047, 1050], "charli": [1042, 1043, 1051], "charlton": 1042, "charra": [1050, 1052, 1053], "charron": [1017, 1038, 1039, 1046, 1047, 1048], "charset": [1035, 1037], "charset_error": 1037, "chart": [35, 120, 264, 993, 1021, 1038], "chartbeat": 1017, "chase": [10, 1035], "chasnovski": 1046, "chat": 1017, "chatterje": 1046, "chaudhuri": 446, "chauhan": [1043, 1044, 1050, 1051], "chaumond": [1017, 1043], "chauvin": 743, "chavez": [4, 374], "chawla": 1045, "chayant": 1042, "chazalon": 1049, "cheaper": [168, 409, 419, 673, 984, 988], "cheat": [11, 338, 996, 1006, 1037], "chebee7i": 1039, "chebyshev": [450, 457, 699, 778, 779, 780, 995], "chebyshevdist": 699, "check": [2, 3, 6, 15, 44, 51, 54, 97, 107, 115, 130, 149, 164, 166, 168, 169, 183, 185, 186, 197, 219, 233, 244, 251, 253, 268, 276, 278, 318, 327, 359, 365, 366, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 391, 393, 396, 399, 402, 407, 410, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 491, 502, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 692, 693, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 925, 926, 935, 936, 947, 948, 949, 953, 954, 976, 977, 978, 980, 987, 988, 989, 992, 1007, 1008, 1013, 1014, 1017, 1030, 1035, 1036, 1038, 1042, 1046, 1047, 1048, 1049, 1050, 1052], "check_arrai": [381, 388, 468, 534, 902, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "check_classifier_multioutput": 1045, "check_cv": [393, 1040], "check_decision_proba_consist": 1042, "check_estim": [315, 381, 393, 936, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "check_estimator_sparse_arrai": 1053, "check_estimator_sparse_data": 1053, "check_estimator_sparse_matrix": 1053, "check_estimators_fit_returns_self": 936, "check_estimators_pickl": 1052, "check_fit_idempot": 1044, "check_input": [534, 548, 646, 647, 652, 660, 661, 662, 681, 687, 912, 913, 914, 915, 1043], "check_invers": [410, 465, 868, 1002, 1043, 1049, 1050], "check_is_fit": [54, 107, 233, 382, 388, 393, 1045, 1048, 1049], "check_memori": [388, 393, 1042], "check_metadata": 233, "check_methods_sample_order_invari": [1047, 1049], "check_methods_subset_invari": [1043, 1049], "check_nam": 381, "check_pairwise_arrai": 1044, "check_random_st": [59, 213, 220, 229, 235, 381, 388, 393], "check_regressor_multioutput": 1045, "check_requires_y_non": 1049, "check_sample_weights_pandas_seri": 1043, "check_scalar": 1049, "check_scor": [393, 1053], "check_set_param": 1043, "check_transformer_data_not_an_arrai": 1045, "check_transformers_unfitted_stateless": 1051, "check_x_i": [381, 388, 1039, 1043, 1044, 1049], "checked_cv": 824, "checker": [383, 824], "checkerboard": [18, 405, 451, 453, 511, 513], "checking_statu": 253, "checkingclassifi": 1045, "checklist": 382, "checkout": [377, 379, 383, 387], "checkpoint": 1012, "checks_gener": 935, "checksum": 1047, "cheeseman": 376, "chege": 1049, "chemic": 376, "chemometr": 376, "chen": [76, 77, 411, 416, 422, 475, 726, 756, 984, 992, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051], "chenal": [1044, 1045, 1047], "cherkasski": 988, "chernyi": 1049, "cherri": 383, "cherti": 1039, "cherubin": 1041, "chestervil": 320, "cheuk": [1043, 1044], "cheung": [44, 1036], "chevali": 1047, "chevalli": 1052, "chevron": 10, "chi": [69, 78, 109, 309, 371, 418, 519, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 638, 639, 640, 641, 642, 758, 759, 1030, 1035, 1040, 1041], "chi2": [69, 417, 418, 452, 581, 592, 595, 596, 598, 599, 600, 605, 606, 609, 620, 638, 639, 640, 641, 642, 643, 759, 765, 774, 1035, 1042, 1049], "chi2_featur": 642, "chi2_kernel": [638, 642, 758, 765, 990, 1036], "chi2_stat": 604, "chi2sampl": 638, "chiang": 1043, "chiara": [0, 370, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "chibuik": 1048, "chief": 1017, "chieh": [1042, 1043], "chigurupati": 1047, "chih": [658, 1040], "chilamkurthi": 1041, "child": [125, 233, 350, 359, 366, 391, 393, 399, 409, 416, 442, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 912, 913, 914, 915, 949, 950, 952, 960, 1008, 1042], "child_idx": 39, "children": [359, 409, 416, 441, 445, 463, 566, 1039, 1052], "children_": [39, 441, 445, 463], "children_left": 359, "children_right": 359, "chime": 378, "chin": [376, 1039], "china": [46, 409, 506, 507, 584, 587], "chines": 1012, "chinmaya": 1042, "chinthala": 1042, "chiotelli": 1044, "chip": [404, 1017], "chirag": 54, "chisquar": 309, "chitteti": 1049, "chkoar": 1042, "chloe": 1049, "cho": 1046, "choe": 1044, "choi": 988, "choic": [2, 5, 25, 38, 44, 53, 63, 68, 76, 100, 125, 149, 150, 156, 161, 186, 198, 236, 252, 257, 259, 262, 273, 288, 312, 317, 350, 351, 361, 365, 377, 381, 384, 393, 396, 409, 411, 413, 415, 416, 418, 419, 452, 462, 471, 472, 473, 474, 475, 476, 478, 538, 540, 541, 547, 559, 638, 647, 648, 656, 658, 659, 661, 669, 680, 692, 705, 742, 833, 846, 847, 852, 854, 855, 881, 884, 893, 895, 904, 905, 928, 981, 986, 988, 989, 990, 991, 992, 993, 995, 998, 1000, 1005, 1006, 1007, 1008, 1042, 1045, 1046, 1050, 1051], "choleski": [77, 197, 215, 388, 471, 472, 478, 527, 611, 648, 650, 651, 654, 655, 656, 658, 659, 669, 672, 674, 680, 682, 683, 687, 797, 798, 988, 1038, 1042, 1044, 1047, 1050, 1051], "cholesky_delet": 388, "cholesterol": [146, 376], "chong": 536, "choo": [1050, 1051], "choos": [2, 9, 10, 42, 44, 48, 51, 58, 60, 64, 76, 99, 118, 130, 136, 146, 167, 170, 190, 234, 253, 254, 264, 271, 355, 361, 365, 366, 367, 368, 381, 384, 387, 393, 402, 408, 409, 411, 413, 416, 417, 420, 443, 444, 447, 449, 459, 523, 532, 538, 559, 560, 582, 602, 658, 659, 672, 674, 679, 687, 688, 689, 693, 726, 756, 800, 803, 804, 814, 871, 904, 905, 912, 913, 914, 915, 982, 983, 987, 988, 989, 990, 991, 995, 1002, 1005, 1006, 1007, 1020, 1022, 1026, 1027, 1037, 1038, 1042, 1044, 1046], "choose_check_classifiers_label": 1045, "choose_random_sampl": 381, "choraria": 1047, "chose": [40, 167, 1023], "chosen": [6, 18, 44, 71, 130, 150, 167, 168, 186, 198, 214, 234, 252, 253, 254, 256, 262, 273, 351, 361, 365, 391, 408, 409, 411, 412, 416, 419, 440, 446, 449, 451, 453, 454, 460, 496, 523, 535, 557, 558, 559, 560, 561, 562, 564, 565, 647, 653, 656, 658, 659, 661, 663, 671, 676, 677, 678, 679, 680, 690, 694, 794, 797, 798, 800, 803, 804, 814, 834, 853, 904, 905, 912, 913, 914, 915, 941, 981, 984, 986, 988, 989, 991, 993, 998, 999, 1006, 1023, 1024, 1026, 1027, 1043, 1051, 1052], "chou": [1042, 1043], "choudhari": [1039, 1040, 1049, 1051], "chowdhuri": [1043, 1049], "choyal": [1042, 1043], "chri": [0, 398, 1035, 1038, 1043, 1044, 1045, 1046, 1049], "chrissobel": 1048, "christ": 17, "christian": [0, 17, 198, 199, 350, 351, 374, 397, 1017, 1028, 1035, 1036, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "christianwaldmann": 1050, "christin": [1050, 1051], "christo": [54, 1044, 1045, 1047, 1049, 1052], "christof": [1039, 1040], "christoph": [168, 414, 419, 532, 610, 611, 614, 619, 622, 797, 988, 993, 1036, 1040, 1043, 1046, 1047, 1048, 1049, 1050], "christopherlim98": 1049, "chrome": 1002, "chronolog": [374, 497], "chu": [851, 1051], "chuan": 996, "chugh": 1047, "chuliang": 1048, "chun": [1046, 1047, 1049, 1050, 1051], "chung": [1042, 1043], "chunk": [6, 48, 365, 366, 409, 414, 420, 444, 449, 468, 538, 778, 781, 832, 833, 839, 840, 841, 842, 843, 902, 994, 1042, 1043, 1044, 1045, 1046], "chunk_siz": 1036, "chunker": 417, "church": [897, 1004], "chyi": [13, 1038, 1039, 1040, 1041, 1042], "chyikwei": 13, "ci": [53, 366, 382, 383, 387, 994, 1041, 1043], "ciccolella": [692, 989], "cice": [999, 1049], "cichocki": [414, 538, 540, 547], "cimport": [380, 388, 1043], "cindi": [1040, 1048, 1052], "cio": 373, "cipri\u00e1n": 1049, "circl": [32, 58, 98, 128, 129, 138, 223, 234, 290, 293, 300, 305, 307, 327, 342, 358, 375, 383, 387, 409, 452, 462, 514, 522, 764, 1007], "circle1": 64, "circle2": 64, "circle3": 64, "circle4": 64, "circleci": [111, 153, 155, 157, 158, 189, 206, 244, 254, 302, 343, 356, 379], "circlecl": 0, "circuit": [17, 989], "circular": 12, "circumst": [100, 215, 995, 1012], "circumstanti": 197, "cirru": [0, 379], "cisco": 10, "citat": [0, 373, 376, 391], "cite": [373, 391, 409, 1010], "citi": [410, 417, 466, 1028], "citizen": 1002, "city_categori": 410, "city_london": 410, "city_pari": 410, "city_sallisaw": 410, "cityblock": [38, 42, 409, 450, 457, 762, 778, 779, 780, 995], "cividi": 38, "ciyou": 658, "cj": [994, 1038, 1039, 1040, 1041, 1042], "cjlin": [173, 373, 487, 508, 509, 658, 1038], "ckdtree": [420, 444, 1037], "cl": [0, 6, 10, 386, 393, 914], "cla": 99, "clabel": [152, 208], "clae": 1043, "clai": [325, 326, 327, 330, 1035], "claim": [164, 175, 216, 379, 464, 496, 552, 648, 669, 680, 706, 745, 750, 752, 830, 865, 868, 869, 877, 884, 988, 1014], "claimamount": 215, "claimnb": [197, 215], "clair": 1035, "clamp": [900, 1005], "clang": [377, 380], "clara": [373, 1047], "clare": 1045, "clarifi": [387, 394, 793], "clariti": [144, 379, 387], "clark": 10, "class": [2, 6, 7, 8, 9, 12, 17, 21, 22, 23, 25, 26, 28, 32, 38, 43, 52, 53, 54, 56, 69, 70, 88, 89, 90, 98, 101, 103, 107, 108, 113, 115, 117, 120, 125, 126, 131, 134, 146, 149, 150, 152, 153, 157, 158, 161, 164, 167, 168, 173, 175, 187, 188, 189, 205, 209, 212, 213, 216, 219, 226, 233, 234, 236, 243, 244, 245, 251, 252, 253, 254, 259, 261, 265, 269, 270, 273, 276, 278, 281, 283, 286, 288, 289, 290, 291, 292, 293, 294, 300, 310, 315, 319, 321, 322, 325, 327, 328, 333, 334, 335, 336, 338, 339, 342, 346, 348, 350, 351, 352, 356, 359, 367, 368, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 396, 399, 402, 403, 404, 406, 409, 410, 412, 414, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 500, 502, 503, 504, 508, 509, 510, 512, 514, 515, 519, 522, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 720, 722, 727, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 754, 755, 757, 782, 783, 784, 786, 787, 788, 789, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 929, 930, 931, 932, 933, 935, 936, 948, 949, 950, 953, 958, 960, 962, 963, 976, 978, 981, 982, 983, 984, 986, 987, 988, 989, 991, 993, 994, 996, 999, 1000, 1002, 1003, 1005, 1008, 1013, 1014, 1015, 1017, 1019, 1023, 1026, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "class1_1": 132, "class2_1": 132, "class_0": [205, 376, 510], "class_1": [205, 376, 510], "class_2": [376, 510], "class_count_": [839, 840, 841, 842, 843], "class_id": [268, 269], "class_index": 53, "class_label": [393, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 799, 822, 912, 914, 930, 1007], "class_likelihood_ratio": [262, 992, 1050], "class_log_prior_": [839, 840, 841, 843], "class_memb": 36, "class_member_mask": 47, "class_nam": [111, 252, 885, 916, 917, 918, 1008, 1051], "class_name0": [425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_name1": [425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_name2": [425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_of_interest": [28, 268, 631, 1052], "class_prior": [374, 839, 840, 841, 843, 1036, 1039], "class_prior_": [551, 842], "class_protein_loc": 278, "class_sep": [145, 293, 515, 799, 822], "class_weight": [4, 340, 393, 407, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 677, 904, 906, 909, 911, 912, 914, 981, 1006, 1007, 1024, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1049, 1050], "class_weight_": [906, 909, 1050], "class_weight_vect": 929, "classes_": [107, 189, 206, 227, 233, 268, 325, 326, 379, 381, 393, 434, 437, 438, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 610, 631, 658, 659, 666, 668, 674, 675, 676, 697, 700, 702, 788, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 854, 861, 864, 871, 872, 875, 885, 899, 900, 901, 904, 906, 909, 912, 914, 917, 992, 1003, 1006, 1036, 1039, 1040, 1042, 1045, 1047], "classic": [15, 192, 222, 243, 249, 342, 376, 383, 411, 413, 414, 443, 447, 449, 459, 492, 500, 504, 510, 541, 632, 633, 914, 915, 986, 988, 991, 994, 1002, 1012, 1022, 1035, 1036, 1040, 1049], "classif": [1, 4, 5, 8, 13, 14, 17, 21, 22, 23, 25, 26, 29, 32, 33, 43, 54, 69, 70, 71, 76, 77, 83, 86, 90, 91, 96, 107, 109, 111, 113, 115, 116, 117, 118, 123, 124, 125, 126, 128, 131, 132, 135, 138, 139, 141, 142, 143, 145, 146, 148, 154, 155, 156, 159, 167, 168, 173, 175, 187, 188, 189, 190, 197, 205, 207, 208, 209, 210, 212, 216, 225, 227, 231, 232, 233, 236, 239, 241, 246, 247, 251, 252, 253, 256, 257, 258, 259, 260, 268, 273, 274, 275, 276, 278, 280, 282, 284, 285, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 307, 308, 309, 310, 325, 330, 331, 333, 334, 338, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 361, 365, 367, 368, 372, 373, 374, 376, 381, 384, 388, 392, 393, 403, 406, 408, 409, 410, 413, 414, 416, 417, 418, 426, 437, 469, 475, 482, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 510, 512, 514, 515, 519, 520, 522, 523, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 609, 610, 611, 613, 614, 622, 631, 632, 633, 643, 658, 659, 666, 668, 674, 675, 676, 697, 703, 705, 708, 712, 713, 715, 716, 718, 726, 727, 729, 730, 734, 735, 738, 741, 742, 743, 754, 756, 758, 759, 761, 782, 783, 784, 786, 787, 788, 789, 794, 796, 799, 800, 801, 803, 804, 805, 806, 814, 818, 819, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 853, 854, 860, 861, 862, 864, 868, 871, 876, 877, 878, 879, 884, 885, 888, 890, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 927, 930, 938, 981, 982, 984, 985, 986, 989, 990, 994, 997, 999, 1000, 1002, 1003, 1005, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1024, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "classifi": [4, 5, 6, 7, 21, 24, 26, 27, 28, 30, 32, 33, 43, 54, 68, 69, 70, 71, 72, 88, 98, 101, 103, 109, 110, 111, 112, 113, 116, 117, 118, 121, 122, 128, 131, 132, 138, 142, 143, 144, 145, 151, 157, 164, 169, 170, 173, 175, 187, 188, 189, 195, 197, 204, 206, 209, 212, 215, 216, 226, 229, 231, 233, 234, 239, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 275, 278, 280, 282, 285, 291, 292, 294, 299, 302, 307, 317, 318, 322, 324, 325, 326, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 342, 346, 347, 348, 352, 374, 376, 379, 381, 384, 391, 393, 399, 408, 409, 410, 413, 417, 418, 419, 426, 434, 435, 436, 437, 438, 439, 488, 489, 496, 504, 512, 514, 515, 522, 531, 536, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 566, 567, 568, 569, 570, 593, 594, 602, 606, 610, 622, 629, 631, 632, 633, 649, 658, 659, 666, 668, 671, 672, 673, 674, 675, 676, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 718, 720, 722, 726, 727, 729, 730, 732, 734, 735, 738, 739, 740, 741, 742, 743, 754, 756, 782, 783, 784, 787, 788, 789, 794, 796, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 852, 854, 855, 860, 861, 862, 864, 865, 871, 884, 885, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 933, 935, 981, 982, 984, 987, 988, 989, 992, 993, 994, 997, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1022, 1023, 1024, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "classification_data": 5, "classification_report": [4, 30, 68, 143, 257, 302, 325, 326, 822, 992, 1024, 1028, 1037, 1039, 1043, 1044, 1045, 1047, 1051, 1053], "classificationcriterion": 1043, "classifier_": [54, 233], "classifier__c": 69, "classifier__criterion": 238, "classifier__max_depth": 238, "classifier__max_featur": 238, "classifier__min_samples_leaf": 169, "classifier__n_estim": 238, "classifier__n_neighbor": 285, "classifier_idx": 28, "classifier_model": 285, "classifier_other_threshold": 799, "classifier_tun": 822, "classifierchain": [281, 393, 399, 836, 838, 1042, 1047, 1050, 1052, 1053], "classifiermixin": [107, 233, 379, 381, 393, 413, 1046], "classify__c": 70, "classmethod": [386, 438, 631, 632, 697, 698, 699, 700, 701, 702, 806, 823], "classnameprefixfeaturesoutmixin": [381, 433, 1050], "claudio": [376, 1049, 1050, 1052], "claus": [3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 23, 25, 28, 29, 30, 35, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 68, 69, 71, 72, 73, 80, 87, 88, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 202, 204, 205, 213, 214, 219, 220, 226, 231, 232, 234, 236, 243, 245, 260, 265, 272, 281, 283, 285, 291, 292, 293, 295, 296, 299, 305, 306, 307, 308, 309, 310, 342, 343, 345, 346, 350, 351, 352, 391], "clauss": 1052, "clb": 168, "clean": [50, 69, 196, 361, 371, 377, 415, 998, 1002, 1045], "cleaner": 64, "cleanli": [60, 1035], "cleanup": [379, 1035], "clear": [2, 53, 58, 70, 167, 168, 310, 374, 378, 379, 381, 391, 392, 393, 406, 410, 415, 918, 919, 981, 986, 1046, 1047, 1048, 1053], "clearer": [223, 1007], "clearli": [2, 58, 96, 168, 231, 342, 378, 379, 391, 393, 414, 416, 993, 999], "clegg": 1038, "clemen": 1039, "clement": [1042, 1043, 1047], "clenaghan": [1040, 1041], "cleveland": 374, "cleverless": 1037, "clf": [4, 8, 9, 10, 22, 23, 24, 25, 29, 30, 36, 46, 49, 52, 56, 61, 69, 99, 113, 121, 124, 126, 131, 136, 138, 142, 143, 145, 151, 153, 170, 187, 189, 190, 194, 195, 201, 204, 206, 209, 210, 211, 212, 213, 221, 227, 228, 231, 234, 240, 247, 256, 260, 264, 265, 267, 270, 271, 286, 289, 290, 291, 294, 299, 307, 310, 315, 316, 317, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 350, 355, 356, 359, 365, 374, 392, 393, 402, 410, 413, 416, 418, 438, 549, 550, 553, 555, 557, 559, 561, 563, 564, 567, 593, 594, 597, 632, 634, 638, 639, 640, 641, 642, 644, 645, 648, 652, 658, 659, 660, 661, 662, 666, 668, 669, 672, 673, 674, 675, 676, 677, 680, 697, 698, 700, 702, 788, 800, 803, 804, 814, 832, 833, 834, 836, 839, 840, 841, 842, 843, 850, 851, 861, 904, 906, 908, 909, 912, 916, 918, 982, 984, 988, 992, 993, 995, 996, 998, 999, 1006, 1007, 1008, 1019, 1023, 1024, 1028], "clf1": [31, 131, 132, 416, 569], "clf2": [31, 131, 132, 381, 416, 569], "clf3": [31, 131, 132, 381, 416, 569], "clf__": 260, "clf__alpha": [260, 1028], "clf__c": 410, "clf_descr": 350, "clf_en_lr": 188, "clf_err": 113, "clf_isoton": 22, "clf_isotonic_scor": 22, "clf_l1_lr": 188, "clf_l2_lr": 188, "clf_list": [23, 25], "clf_name": [8, 350], "clf_no_weight": 347, "clf_pf": 842, "clf_prob": 24, "clf_sample_weight": 233, "clf_score": 22, "clf_sel": 170, "clf_select": 142, "clf_sgd": 211, "clf_sigmoid": 22, "clf_sigmoid_scor": 22, "clf_weight": 347, "cli": 1020, "click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "clickabl": 1049, "client": [381, 960], "clifford": 1048, "cliffordemmanuel": 1048, "clim": 152, "climatologi": 406, "climb": [409, 448, 461], "clinton": 17, "clip": [23, 25, 215, 229, 305, 338, 635, 676, 741, 874, 1002, 1039, 1046, 1047], "clmbst": 1047, "clock": 2, "clone": [54, 122, 157, 168, 233, 302, 322, 361, 377, 379, 382, 383, 385, 387, 393, 406, 410, 419, 437, 465, 569, 570, 597, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 806, 823, 828, 831, 835, 838, 864, 865, 901, 1013, 1035, 1041, 1043, 1047, 1051, 1052], "clone_kernel": [610, 611, 1045], "clone_with_theta": [157, 419, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "cloned_classifi": 434, "close": [6, 10, 15, 22, 23, 25, 36, 37, 44, 52, 58, 64, 76, 77, 80, 98, 112, 119, 122, 126, 130, 149, 150, 153, 154, 155, 156, 157, 167, 169, 181, 201, 203, 219, 226, 232, 236, 243, 249, 259, 260, 273, 289, 290, 305, 315, 338, 342, 343, 351, 361, 374, 379, 381, 387, 391, 393, 394, 406, 407, 409, 412, 413, 416, 419, 450, 455, 472, 508, 509, 532, 563, 628, 643, 647, 661, 672, 674, 687, 705, 746, 797, 818, 819, 839, 840, 841, 843, 850, 925, 981, 985, 986, 988, 989, 991, 992, 993, 995, 998, 999, 1002, 1007, 1012, 1017, 1026, 1038, 1042, 1043, 1044], "close_pric": 10, "closer": [2, 35, 96, 98, 129, 146, 149, 168, 176, 201, 342, 352, 406, 409, 414, 449, 553, 628, 712, 846, 847, 852, 854, 855, 856, 1007, 1042], "closest": [25, 44, 62, 201, 381, 409, 440, 442, 443, 447, 448, 449, 459, 653, 779, 780, 834, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 983, 986, 993, 995, 1026], "closur": 15, "cloud": [41, 83, 92, 94, 104, 164, 387, 414, 533, 541, 692, 992, 1011, 1012, 1014, 1027], "cloudpickl": 1030, "clouldpickl": 402, "cls_info": 8, "cls_name": [6, 8], "cls_runtim": 6, "cls_stat": 6, "cls_valu": 8, "club": 376, "clue": [374, 387, 989], "clump": 222, "clust": [63, 450, 457], "cluster": [6, 7, 12, 13, 15, 16, 18, 20, 22, 25, 40, 41, 44, 46, 48, 49, 51, 52, 55, 57, 59, 60, 66, 68, 78, 87, 88, 89, 99, 107, 111, 118, 126, 141, 157, 170, 194, 219, 221, 222, 223, 230, 233, 236, 243, 244, 245, 246, 260, 283, 285, 289, 290, 292, 308, 316, 320, 325, 326, 327, 328, 329, 340, 349, 350, 352, 353, 359, 367, 368, 372, 374, 376, 379, 381, 384, 391, 393, 403, 410, 415, 417, 423, 424, 427, 488, 502, 503, 504, 511, 512, 513, 514, 515, 522, 530, 541, 544, 553, 564, 566, 589, 590, 591, 631, 691, 692, 695, 704, 705, 710, 717, 719, 725, 731, 736, 737, 755, 757, 778, 779, 786, 792, 793, 795, 797, 798, 856, 857, 865, 869, 876, 884, 933, 935, 953, 960, 976, 982, 989, 991, 995, 998, 1000, 1002, 1005, 1009, 1012, 1013, 1014, 1017, 1019, 1022, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "cluster_1": 126, "cluster_2": 126, "cluster_al": [448, 461], "cluster_cent": [36, 59, 61, 62, 461], "cluster_center_indic": [440, 454], "cluster_centers_": [40, 41, 46, 48, 56, 58, 59, 61, 62, 93, 319, 351, 440, 443, 447, 448, 449, 1027], "cluster_centers_indic": [36, 454], "cluster_centers_indices_": [36, 440], "cluster_data": 57, "cluster_doc": 17, "cluster_hierarchy_": [409, 450], "cluster_id": [170, 351], "cluster_id_to_feature_id": 170, "cluster_label": [54, 58], "cluster_method": 450, "cluster_optics_dbscan": [63, 409], "cluster_qr": [44, 409, 452, 462, 1049], "cluster_s": 351, "cluster_selection_epsilon": 446, "cluster_selection_method": 446, "cluster_std": [24, 36, 42, 47, 53, 54, 55, 57, 58, 60, 61, 62, 209, 226, 246, 308, 340, 512], "cluster_word": 17, "clusterer_": 54, "clustering_algorithm": [41, 42, 60], "clustering_metr": 56, "clustermixin": [381, 1052], "clusters_std": 340, "clyde": 1040, "cl\u00e9ment": [1044, 1048, 1050], "cm": [2, 4, 9, 10, 12, 18, 19, 22, 28, 29, 30, 36, 37, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 58, 59, 65, 78, 80, 87, 93, 96, 99, 111, 117, 118, 138, 144, 152, 153, 168, 180, 189, 206, 209, 210, 213, 219, 220, 221, 227, 230, 231, 235, 240, 252, 253, 254, 283, 286, 287, 289, 293, 296, 299, 301, 302, 305, 307, 317, 320, 325, 326, 330, 334, 335, 336, 338, 339, 340, 346, 347, 356, 376, 410, 697, 917, 992, 1002, 1008, 1024, 1025], "cm2013": 409, "cm_bright": [29, 299, 307], "cm_displai": 227, "cm_piyg": 307, "cmap": [2, 3, 4, 9, 10, 12, 18, 19, 28, 29, 30, 32, 37, 38, 44, 45, 48, 49, 51, 52, 56, 78, 80, 87, 93, 96, 99, 103, 111, 117, 118, 138, 144, 152, 153, 168, 176, 180, 181, 188, 189, 206, 209, 210, 211, 213, 219, 220, 221, 230, 231, 235, 252, 254, 283, 287, 289, 291, 292, 294, 296, 299, 301, 302, 305, 307, 325, 326, 330, 334, 335, 336, 337, 338, 339, 340, 343, 346, 347, 356, 697, 1024, 1025], "cmap_bold": [291, 294], "cmap_cv": 254, "cmap_data": 254, "cmap_light": [291, 294], "cmcsa": 10, "cmd": 377, "cmu": 899, "cname": 40, "cnb": 994, "cnp": 380, "cnx": 1043, "co": [2, 10, 12, 16, 18, 20, 37, 38, 68, 127, 129, 154, 164, 167, 198, 220, 259, 274, 319, 329, 350, 351, 352, 358, 383, 415, 417, 449, 451, 453, 488, 511, 591, 699, 719, 764, 795, 987, 1002, 1014, 1017, 1029, 1030], "co2": [148, 149, 156, 159, 164, 419, 496, 611, 615, 622, 623, 625, 1014, 1042], "co2_data": 154, "co2_kernel": 154, "coars": [2, 118, 385, 448, 461], "coarser": [118, 122], "coast": [9, 296], "coastlin": [9, 146, 296, 376], "coca": 10, "cock": [130, 1044], "cockburn": 1037, "coclust": [17, 405, 451, 513], "cocoa": 1017, "code": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 373, 377, 378, 380, 382, 383, 388, 391, 393, 394, 396, 399, 402, 404, 407, 408, 409, 416, 417, 442, 443, 447, 449, 459, 496, 526, 530, 531, 537, 538, 542, 543, 545, 546, 548, 566, 572, 581, 582, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 682, 683, 685, 686, 832, 833, 834, 871, 878, 960, 989, 993, 1002, 1004, 1006, 1007, 1012, 1013, 1014, 1016, 1017, 1020, 1028, 1035, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "code_book_": 834, "code_init": [531, 545], "code_s": [278, 834, 993], "codebas": [321, 361, 379, 380, 381, 417, 1035, 1041], "codebook": [46, 278, 566, 834], "codebook_random": 46, "codecov": 387, "codeofconduct": 379, "coder": [102, 542, 716], "codevig": 1041, "coef": [8, 52, 102, 166, 167, 176, 181, 184, 188, 189, 191, 196, 200, 201, 202, 206, 212, 213, 240, 272, 301, 321, 346, 524, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 669, 672, 674, 680, 681, 682, 683, 684, 685, 686, 687, 996], "coef0": [173, 342, 344, 452, 535, 639, 640, 643, 775, 777, 906, 907, 908, 909, 910, 990, 1007], "coef_": [5, 8, 12, 52, 83, 142, 143, 146, 166, 167, 176, 179, 181, 182, 183, 187, 188, 189, 190, 191, 192, 193, 196, 200, 201, 202, 206, 212, 213, 234, 240, 272, 273, 312, 319, 336, 343, 346, 350, 361, 374, 381, 393, 412, 418, 465, 482, 483, 484, 549, 593, 594, 597, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 904, 905, 906, 907, 908, 909, 910, 976, 986, 988, 1006, 1007, 1026, 1035, 1037, 1040, 1042, 1047, 1049, 1052, 1053], "coef_agglomeration_": 52, "coef_en_lr": 188, "coef_i": 167, "coef_init": [646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 681, 684], "coef_l": 182, "coef_l1_lr": 188, "coef_l2_lr": 188, "coef_lasso_": 191, "coef_multi_task_lasso_": 191, "coef_p": 182, "coef_path": [653, 663, 684], "coef_path_": [650, 651, 654, 655, 988], "coef_path_continu": [653, 663, 684], "coef_path_lar": [653, 663, 684], "coef_pl": 182, "coef_ridg": 179, "coef_selection_": 52, "coeff": 680, "coeff_diff": 183, "coeffeci": 1044, "coeffici": [5, 8, 36, 47, 56, 58, 76, 77, 80, 93, 96, 136, 143, 149, 164, 165, 166, 171, 175, 179, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 199, 200, 212, 215, 216, 240, 259, 272, 273, 301, 312, 317, 318, 319, 342, 345, 350, 351, 352, 365, 375, 379, 381, 393, 395, 407, 411, 412, 414, 418, 419, 422, 432, 452, 465, 467, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 496, 524, 526, 527, 531, 535, 537, 539, 542, 543, 548, 552, 554, 556, 558, 560, 562, 565, 568, 570, 582, 589, 593, 597, 609, 611, 614, 627, 635, 636, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 701, 703, 716, 719, 729, 734, 738, 743, 750, 753, 775, 777, 785, 786, 788, 792, 793, 796, 815, 827, 830, 837, 838, 847, 855, 862, 865, 877, 884, 904, 905, 906, 907, 908, 909, 910, 913, 915, 983, 986, 988, 1006, 1007, 1014, 1026, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052], "coefs_": [190, 301, 861, 862, 996, 1040], "coefs_cf": 312, "coefs_enet": 182, "coefs_lasso": 182, "coefs_no_cf": 312, "coefs_path": 659, "coefs_paths_": [659, 1045], "coefs_positive_enet": 182, "coefs_positive_lasso": 182, "coelho": [1036, 1038, 1039, 1043], "coelhudo": 1047, "cognit": [146, 376], "cohen": [716, 1043], "cohen_kappa_scor": [992, 1040, 1042], "coher": 409, "cohort": 133, "coin": [10, 12, 15, 19, 34, 37, 38, 39, 40, 42, 46, 51, 52, 60, 64, 65, 66, 96, 164, 409, 417, 441, 462, 1004, 1014, 1027], "coincid": [153, 199, 419], "col": [11, 17, 23, 25, 36, 40, 47, 53, 57, 61, 62, 68, 71, 115, 131, 154, 218, 236, 346, 511, 513], "col_compl": 17, "col_idx": 19, "col_idx_shuffl": 18, "col_ind": [424, 451, 453], "col_indic": 125, "col_nam": 11, "col_split": 11, "cola": 10, "cold": 283, "cole": 1044, "coleman": [1036, 1037], "colgat": [10, 15], "colin": [4, 374, 1041], "colin_powel": 1024, "colinear": 550, "collabor": 379, "collaps": [2, 168, 236, 305, 338, 391], "colleagu": 259, "collect": [5, 8, 10, 11, 17, 23, 71, 113, 125, 126, 133, 146, 154, 162, 170, 185, 190, 221, 229, 262, 266, 351, 352, 365, 374, 376, 383, 396, 407, 413, 414, 416, 417, 446, 464, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 569, 570, 581, 583, 584, 588, 589, 590, 591, 632, 729, 730, 738, 778, 783, 784, 787, 802, 806, 807, 809, 823, 950, 963, 966, 981, 987, 988, 992, 998, 1003, 1013, 1017, 1023, 1028, 1037, 1047], "colleg": [0, 166], "college_degre": 166, "collid": 417, "collier": 1028, "collin": 1038, "collinear": [167, 170, 202, 215, 416, 567, 648, 669, 680, 877, 988, 1035], "collis": [351, 352, 417, 582, 589], "collot": [1049, 1050], "colombia": [9, 296, 374, 498], "colon": 379, "coloni": 374, "color": [2, 4, 5, 6, 7, 8, 9, 10, 11, 18, 22, 23, 24, 25, 29, 31, 32, 34, 36, 38, 40, 42, 44, 45, 47, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 76, 77, 78, 79, 80, 84, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 109, 110, 115, 118, 119, 121, 124, 125, 126, 127, 128, 130, 132, 136, 138, 144, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 167, 169, 170, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 214, 215, 219, 220, 221, 223, 226, 230, 231, 232, 234, 237, 243, 244, 245, 246, 247, 248, 249, 253, 254, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 281, 285, 288, 289, 290, 291, 294, 295, 296, 299, 305, 306, 307, 309, 310, 311, 316, 322, 327, 328, 330, 336, 337, 338, 339, 340, 342, 344, 345, 346, 356, 357, 373, 374, 376, 387, 409, 416, 417, 447, 493, 494, 506, 583, 584, 779, 966, 1006, 1008, 1014, 1040, 1045, 1047, 1052], "color_continuous_scal": 260, "color_intens": 7, "color_it": [244, 248, 249], "color_map": 330, "color_palett": [35, 110, 125, 248], "colorbar": [2, 9, 28, 38, 93, 103, 117, 126, 144, 150, 152, 153, 155, 168, 218, 230, 247, 270, 305, 338, 697, 1047], "colorbarbas": 305, "colorblind": [35, 110, 125], "coloring_matrix": [76, 77], "colormap": [93, 111, 157, 189, 206, 338, 343, 356, 697, 1048], "colors_": 40, "colors_list": 115, "colour": [246, 376, 417, 587, 993], "colt": [726, 756, 992], "colton": 984, "columbia": 0, "column": [2, 11, 18, 19, 58, 67, 70, 73, 74, 88, 116, 118, 119, 122, 125, 127, 130, 146, 154, 161, 164, 166, 167, 168, 169, 170, 186, 197, 198, 201, 205, 215, 228, 235, 236, 237, 240, 248, 253, 259, 260, 270, 271, 273, 281, 301, 310, 311, 312, 317, 318, 319, 320, 322, 350, 351, 352, 365, 373, 374, 376, 379, 381, 385, 388, 391, 392, 393, 405, 409, 410, 412, 414, 416, 417, 418, 421, 424, 451, 453, 464, 466, 467, 471, 472, 478, 487, 488, 489, 490, 491, 492, 494, 496, 500, 501, 502, 504, 505, 508, 509, 510, 511, 513, 515, 526, 531, 534, 537, 541, 542, 548, 555, 557, 558, 561, 562, 564, 565, 566, 567, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 627, 630, 632, 633, 634, 646, 648, 652, 658, 660, 662, 664, 665, 669, 680, 685, 686, 697, 713, 718, 719, 729, 730, 738, 754, 763, 768, 769, 770, 773, 783, 784, 787, 788, 800, 803, 804, 814, 825, 830, 835, 838, 839, 840, 841, 842, 843, 844, 845, 864, 868, 869, 870, 871, 877, 878, 879, 883, 884, 885, 886, 888, 889, 890, 894, 895, 904, 906, 909, 912, 914, 920, 924, 925, 930, 941, 955, 968, 969, 971, 979, 981, 982, 984, 988, 990, 992, 993, 1000, 1002, 1007, 1013, 1014, 1035, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "column_labels_": [18, 19, 405, 451, 453], "column_nam": 215, "column_or_1d": [388, 1046, 1050], "column_result": 260, "column_stack": [39, 299, 307], "column_to_drop": 167, "column_tran": [215, 410], "columnar": [373, 464, 1012], "columns_": [17, 405, 424, 451, 453], "columns_to_drop": 253, "columntransform": [2, 68, 69, 130, 167, 168, 169, 197, 215, 228, 236, 238, 240, 311, 316, 318, 319, 320, 322, 371, 373, 391, 392, 399, 466, 467, 629, 869, 981, 982, 1013, 1030, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "columntransformercolumntransform": [69, 130, 167, 169, 228, 238, 311, 316, 319], "columntransformerinot": [130, 168], "columnwis": 414, "com": [5, 6, 9, 10, 13, 18, 19, 22, 40, 46, 55, 63, 68, 69, 107, 109, 110, 111, 112, 113, 114, 121, 123, 124, 129, 130, 149, 152, 154, 156, 158, 162, 177, 199, 204, 214, 219, 221, 223, 229, 243, 245, 246, 260, 263, 283, 305, 306, 309, 310, 350, 351, 373, 374, 377, 379, 383, 384, 385, 387, 391, 396, 404, 409, 442, 452, 462, 508, 534, 536, 541, 671, 691, 695, 705, 995, 1010, 1040, 1042, 1045], "coma": 1017, "comaniciu": [61, 409, 448], "comapar": 409, "comb": 1049, "combat": [299, 414], "combin": [2, 10, 11, 18, 23, 25, 59, 68, 69, 71, 72, 73, 88, 93, 101, 102, 108, 110, 119, 120, 124, 125, 133, 134, 149, 155, 161, 162, 164, 167, 181, 197, 201, 214, 215, 222, 226, 228, 231, 236, 255, 259, 260, 268, 270, 271, 292, 300, 311, 317, 318, 320, 341, 342, 352, 356, 365, 371, 375, 376, 379, 384, 392, 393, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 419, 421, 422, 445, 464, 466, 467, 473, 475, 476, 479, 480, 481, 489, 496, 508, 509, 515, 521, 524, 526, 531, 537, 538, 540, 542, 547, 549, 560, 562, 565, 567, 568, 610, 614, 616, 621, 624, 630, 634, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 678, 679, 681, 684, 692, 701, 730, 788, 800, 803, 804, 811, 812, 825, 827, 831, 848, 863, 864, 865, 869, 877, 878, 879, 884, 904, 966, 981, 984, 985, 988, 992, 993, 995, 998, 1002, 1005, 1006, 1008, 1009, 1014, 1017, 1024, 1026, 1028, 1035, 1040, 1043, 1046, 1047, 1048, 1050, 1051], "combinator": 810, "combined_featur": 72, "combsccod": 1049, "comcast": 10, "come": [47, 65, 68, 78, 84, 98, 146, 149, 231, 273, 315, 350, 351, 365, 367, 372, 376, 379, 380, 383, 387, 391, 393, 396, 402, 408, 409, 413, 416, 417, 439, 450, 456, 472, 550, 705, 795, 821, 906, 909, 981, 982, 986, 989, 991, 995, 998, 1007, 1019, 1035, 1046, 1049, 1051], "comedi": 875, "comfort": [53, 416], "command": [230, 365, 366, 377, 379, 383, 385, 387, 396, 417, 508, 1012, 1028, 1037], "comment": [44, 350, 377, 378, 379, 380, 382, 383, 387, 487, 579, 992], "commerc": 1017, "commerci": [413, 1017], "commit": [379, 383, 387, 1016, 1035, 1036, 1037, 1038], "committ": [379, 1035], "commod": 992, "common": [11, 13, 15, 17, 96, 143, 146, 164, 165, 166, 171, 193, 201, 202, 254, 259, 266, 278, 317, 342, 350, 352, 359, 365, 368, 373, 379, 381, 387, 389, 391, 392, 395, 399, 405, 406, 407, 409, 410, 413, 415, 418, 419, 447, 465, 467, 496, 590, 632, 653, 672, 673, 701, 746, 753, 769, 801, 802, 805, 815, 817, 818, 819, 820, 821, 827, 830, 865, 867, 875, 876, 877, 882, 884, 889, 890, 892, 893, 894, 895, 943, 981, 982, 988, 995, 998, 1002, 1007, 1008, 1012, 1013, 1014, 1017, 1019, 1030, 1035, 1043, 1045, 1046, 1050], "common_nod": 359, "common_node_id": 359, "common_param": [55, 122, 125, 168, 232, 261, 262, 342], "commonli": [197, 256, 342, 372, 393, 409, 410, 419, 614, 758, 759, 797, 833, 876, 989, 990, 992, 993, 995, 1051], "commun": [233, 372, 378, 384, 387, 393, 394, 409, 416, 538, 540, 547, 692, 710, 876, 982, 989, 995, 1002, 1006, 1010, 1012, 1016, 1017, 1043, 1044], "commut": [2, 11], "comp": [17, 83, 84, 96, 103, 302, 329, 350, 351, 352, 374, 1028], "comp_cov": [469, 470, 471, 472, 473, 474, 475, 476], "compact": [146, 173, 305, 365, 376, 844, 845, 1008, 1037], "compani": [197, 215, 408, 409, 1017], "companion": [379, 1002], "companioni": 1035, "compar": [2, 3, 7, 11, 17, 18, 22, 23, 25, 32, 34, 35, 37, 38, 39, 41, 45, 47, 50, 52, 53, 55, 56, 59, 62, 65, 66, 69, 70, 71, 72, 78, 79, 82, 84, 85, 89, 90, 96, 100, 102, 108, 109, 110, 112, 114, 118, 119, 120, 122, 124, 125, 126, 128, 130, 133, 134, 137, 146, 153, 161, 162, 164, 167, 168, 169, 170, 175, 177, 179, 181, 185, 186, 192, 194, 197, 198, 200, 201, 203, 205, 207, 211, 214, 215, 216, 218, 219, 222, 225, 228, 231, 234, 236, 237, 238, 239, 241, 245, 246, 251, 253, 254, 256, 257, 258, 260, 262, 264, 266, 268, 270, 271, 274, 276, 278, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 297, 298, 301, 303, 304, 306, 309, 310, 312, 313, 317, 342, 350, 351, 352, 358, 359, 361, 367, 374, 376, 379, 381, 402, 405, 406, 408, 409, 411, 412, 413, 414, 416, 418, 419, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 458, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 496, 502, 504, 512, 514, 522, 524, 528, 531, 537, 539, 541, 545, 546, 551, 552, 561, 562, 563, 564, 565, 571, 631, 639, 644, 645, 653, 655, 657, 658, 663, 666, 668, 676, 677, 684, 695, 705, 712, 715, 731, 738, 743, 786, 798, 800, 805, 814, 827, 830, 837, 846, 850, 853, 857, 861, 862, 864, 865, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 908, 909, 981, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1014, 1026, 1027, 1035, 1037, 1042, 1043, 1048], "comparison": [10, 12, 17, 21, 22, 23, 24, 26, 27, 31, 33, 34, 36, 38, 40, 46, 48, 55, 56, 57, 58, 59, 61, 66, 68, 77, 88, 92, 94, 95, 97, 99, 103, 104, 109, 112, 115, 122, 125, 128, 132, 133, 140, 142, 147, 148, 154, 155, 156, 158, 159, 164, 169, 179, 181, 183, 185, 188, 195, 197, 201, 212, 215, 217, 220, 221, 222, 223, 224, 225, 229, 230, 241, 245, 251, 253, 254, 255, 256, 263, 267, 271, 273, 276, 281, 292, 299, 307, 309, 310, 312, 315, 317, 329, 330, 335, 344, 349, 350, 351, 353, 361, 374, 376, 393, 406, 409, 411, 412, 414, 418, 419, 437, 438, 443, 446, 447, 449, 482, 483, 484, 488, 504, 512, 514, 515, 522, 525, 535, 541, 549, 550, 553, 564, 565, 581, 582, 588, 589, 590, 591, 606, 608, 610, 611, 615, 622, 625, 631, 639, 643, 659, 672, 688, 689, 690, 691, 692, 704, 738, 743, 779, 788, 800, 801, 802, 803, 805, 806, 814, 816, 817, 818, 819, 820, 821, 830, 839, 842, 846, 861, 862, 865, 877, 878, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 906, 907, 909, 910, 912, 981, 985, 986, 989, 992, 994, 995, 998, 1007, 1014, 1032], "compat": [233, 262, 283, 316, 373, 382, 388, 389, 391, 393, 396, 399, 402, 417, 463, 469, 508, 566, 577, 589, 603, 614, 615, 618, 619, 620, 622, 623, 632, 633, 634, 658, 659, 673, 675, 774, 778, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 848, 849, 864, 869, 877, 878, 916, 917, 920, 955, 989, 995, 997, 1012, 1013, 1017, 1030, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "compens": [79, 166, 168, 173, 197, 215, 260, 411, 414], "compet": [2, 167], "competit": [2, 122, 350, 416, 644, 995], "compil": [130, 283, 352, 365, 366, 380, 381, 382, 387, 388, 391, 1012, 1035], "compl": 56, "complement": [168, 269, 350, 632, 633, 802, 817, 820, 830, 839, 840, 841, 842, 843, 999, 1015, 1030, 1043], "complementari": [2, 417], "complementnb": [260, 350, 839, 840, 842, 843, 994, 1043, 1047, 1048, 1050], "complementnbcomplementnb": 260, "complet": [0, 2, 35, 36, 37, 42, 47, 48, 50, 56, 60, 84, 125, 128, 141, 143, 146, 164, 169, 170, 203, 225, 226, 233, 236, 241, 253, 257, 310, 312, 315, 351, 361, 374, 379, 383, 384, 387, 391, 410, 413, 414, 416, 417, 441, 445, 449, 452, 462, 463, 464, 467, 495, 536, 537, 538, 539, 544, 546, 558, 569, 570, 581, 587, 588, 589, 591, 627, 628, 629, 630, 645, 649, 657, 671, 673, 704, 705, 715, 716, 717, 729, 731, 736, 737, 757, 786, 795, 832, 835, 838, 847, 863, 864, 865, 866, 927, 977, 981, 986, 988, 992, 993, 995, 1007, 1008, 1014, 1019, 1028, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "completed_fac": 235, "completeness_scor": [36, 47, 56, 316, 351, 409, 736, 737, 795, 992], "complex": [1, 7, 8, 13, 14, 18, 70, 115, 130, 145, 149, 154, 161, 164, 201, 211, 214, 225, 232, 233, 236, 241, 251, 257, 260, 263, 268, 276, 306, 315, 318, 319, 324, 331, 338, 342, 352, 354, 359, 360, 375, 379, 384, 391, 409, 410, 414, 416, 420, 440, 444, 447, 448, 450, 467, 489, 500, 501, 502, 514, 534, 541, 551, 557, 558, 559, 560, 562, 564, 565, 604, 630, 638, 656, 658, 676, 677, 734, 750, 800, 830, 832, 860, 864, 865, 869, 877, 884, 900, 904, 907, 910, 912, 913, 914, 915, 981, 982, 984, 985, 987, 989, 991, 993, 998, 1002, 1005, 1013, 1014, 1015, 1017, 1030, 1036, 1038, 1044, 1045, 1048], "complexity_comput": [5, 8], "complexity_label": [5, 8], "compli": [379, 393, 935, 1013], "complianc": [0, 125], "compliant": [320, 379, 1053, 1054], "complic": [25, 233, 299, 385, 419, 694, 995], "compon": [2, 3, 15, 31, 42, 56, 60, 68, 71, 82, 83, 85, 88, 94, 95, 97, 98, 99, 100, 101, 103, 128, 137, 154, 162, 164, 166, 181, 218, 230, 231, 234, 243, 244, 247, 248, 249, 258, 260, 284, 285, 286, 294, 295, 297, 302, 310, 317, 365, 371, 374, 379, 381, 385, 388, 391, 402, 404, 407, 409, 410, 412, 417, 419, 421, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 502, 504, 515, 521, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 797, 798, 799, 800, 803, 804, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 940, 941, 984, 989, 991, 1002, 1004, 1007, 1012, 1013, 1014, 1015, 1017, 1022, 1028, 1029, 1030, 1035, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "component_1": 248, "component_2": 248, "component_indices_": [639, 1048], "components_": [4, 13, 56, 84, 93, 95, 96, 103, 230, 231, 302, 310, 319, 393, 410, 414, 444, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 639, 853, 860, 896, 897, 984, 1004, 1024, 1039, 1041, 1047, 1050, 1053], "components_col": 71, "compos": [2, 3, 23, 67, 68, 69, 73, 74, 84, 111, 119, 130, 164, 167, 168, 169, 197, 199, 215, 228, 236, 238, 240, 273, 278, 311, 316, 318, 319, 320, 322, 368, 392, 399, 409, 410, 413, 515, 553, 612, 991, 993, 1014, 1035], "composit": [228, 316, 368, 371, 413, 658, 788, 982, 988, 1001, 1030, 1036], "compound": [2, 215, 417, 610, 612, 680, 724, 752, 988, 1028], "compoundkernel": [610, 1049], "comprehens": [342, 417, 758, 759, 990, 1017, 1043], "compress": [1, 9, 14, 15, 46, 64, 164, 278, 305, 374, 402, 409, 414, 417, 418, 652, 672, 692, 834, 877, 963, 966, 978, 988, 1002, 1014, 1027, 1035, 1044], "compressed_raccoon_kmean": 51, "compressed_raccoon_uniform": 51, "compris": [68, 122, 257, 350, 351, 352, 374, 391, 414, 416, 515, 807, 989], "compromis": [7, 25, 168, 365, 379, 647, 679, 995, 1038], "comput": [0, 2, 4, 5, 9, 11, 12, 18, 24, 35, 37, 39, 40, 44, 50, 52, 55, 56, 58, 59, 68, 70, 77, 78, 79, 80, 94, 102, 112, 116, 117, 120, 121, 122, 123, 124, 125, 145, 146, 149, 154, 156, 157, 161, 167, 168, 169, 170, 173, 177, 178, 181, 182, 183, 184, 185, 186, 197, 199, 201, 205, 211, 214, 215, 219, 222, 227, 229, 230, 232, 236, 237, 239, 253, 255, 257, 259, 260, 261, 262, 266, 268, 270, 283, 285, 287, 289, 290, 292, 293, 296, 305, 315, 319, 320, 326, 328, 338, 342, 345, 350, 351, 352, 359, 366, 367, 368, 373, 374, 376, 379, 384, 385, 386, 388, 391, 392, 393, 395, 396, 402, 403, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 457, 459, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 516, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 582, 585, 586, 589, 590, 591, 593, 594, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 734, 736, 738, 739, 740, 742, 743, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 869, 870, 873, 874, 879, 880, 881, 882, 883, 884, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 909, 911, 912, 913, 914, 915, 938, 939, 940, 941, 957, 958, 965, 967, 973, 981, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1023, 1024, 1027, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "computation": [12, 76, 93, 115, 121, 130, 149, 283, 342, 350, 364, 380, 391, 407, 409, 410, 413, 414, 416, 419, 538, 632, 633, 671, 763, 800, 802, 803, 804, 814, 827, 988, 989, 991, 999, 1000, 1004, 1027, 1030, 1039], "compute_class_weight": [393, 1038, 1049], "compute_corrected_ttest": 259, "compute_dist": [441, 445, 1047], "compute_full_tre": [441, 445, 1039], "compute_import": 1037, "compute_inverse_compon": [896, 897, 1004], "compute_inverse_transform": 1049, "compute_label": [442, 449], "compute_node_depth": 359, "compute_optics_graph": [455, 456, 1052], "compute_sample_weight": 1049, "compute_scor": [73, 100, 176, 177, 644, 645, 1044], "compute_sourc": 421, "computed_scor": 645, "con": 589, "concat": [2, 161, 166, 186, 215, 877], "concaten": [24, 32, 37, 48, 59, 67, 70, 74, 79, 111, 126, 142, 157, 164, 173, 176, 179, 189, 211, 212, 219, 226, 243, 247, 248, 255, 264, 265, 266, 267, 268, 269, 288, 302, 309, 312, 326, 337, 341, 350, 410, 464, 467, 504, 509, 531, 537, 541, 542, 599, 781, 800, 863, 864, 866, 869, 877, 909, 993, 1014, 1023, 1027, 1036], "concav": [146, 376], "concentr": [5, 7, 63, 90, 98, 109, 128, 154, 162, 164, 223, 242, 244, 249, 250, 270, 293, 307, 327, 375, 379, 416, 443, 519, 797, 991, 998, 1014], "concentrations_prior": 243, "concept": [79, 115, 120, 233, 268, 368, 379, 391, 407, 409, 415, 417, 984, 992, 995, 1008, 1017], "conceptu": [376, 416, 990], "concern": [16, 34, 75, 82, 86, 92, 105, 108, 140, 148, 160, 164, 172, 175, 217, 242, 248, 253, 277, 280, 284, 298, 304, 324, 333, 349, 354, 365, 381, 402, 407, 989, 1004], "concis": [25, 197, 379, 384, 1046, 1048], "conclud": [109, 167, 177, 215, 259, 352, 361, 394, 864], "conclus": [2, 98, 167, 169, 197, 199, 259, 261, 361, 416, 1022], "concomit": [649, 988], "concret": [201, 380, 394, 408, 418, 668, 674, 675, 676, 677, 896, 897, 988, 1006, 1012], "concurr": [393, 417, 958, 1047, 1049], "conda": [315, 316, 317, 318, 319, 320, 321, 322, 366, 379, 380, 382, 383, 385, 387, 396, 401, 402, 1008], "conda_prefix": 385, "condarc": 377, "condens": [173, 446], "condit": [2, 10, 11, 23, 25, 80, 117, 122, 127, 164, 165, 167, 171, 186, 199, 202, 215, 233, 237, 262, 318, 359, 385, 391, 395, 405, 406, 408, 409, 411, 414, 416, 418, 451, 464, 471, 472, 473, 478, 496, 513, 523, 524, 536, 539, 540, 541, 543, 545, 547, 549, 550, 562, 627, 632, 633, 643, 650, 651, 652, 654, 655, 656, 670, 672, 673, 674, 675, 682, 683, 687, 697, 712, 717, 718, 736, 737, 795, 839, 840, 841, 842, 843, 862, 865, 868, 877, 878, 881, 885, 941, 964, 986, 988, 989, 990, 992, 994, 995, 997, 1002, 1008, 1012, 1014, 1026, 1030, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1053], "condition": [10, 25, 197, 406, 411, 758, 986], "condition2": 130, "conduct": [166, 259, 419, 1016, 1049], "conf": [5, 25, 383, 406, 413, 839, 994, 1049], "confer": [253, 259, 374, 409, 414, 420, 439, 444, 450, 511, 535, 563, 696, 708, 726, 756, 860, 861, 862, 992, 998, 1004, 1008], "confid": [11, 22, 23, 24, 25, 125, 154, 156, 244, 259, 262, 328, 394, 406, 419, 636, 658, 659, 666, 668, 671, 674, 675, 676, 698, 702, 707, 720, 726, 727, 739, 740, 756, 789, 832, 871, 904, 906, 909, 988, 991, 992, 993, 998, 1005, 1006, 1007, 1017, 1028, 1045], "config": [11, 366, 377, 379, 380, 387, 626, 1043], "config_context": [240, 365, 366, 404, 626, 902, 1042, 1048, 1051], "configur": [5, 8, 25, 69, 70, 168, 233, 238, 240, 273, 312, 350, 364, 377, 379, 381, 385, 387, 391, 393, 396, 399, 404, 407, 410, 417, 418, 433, 442, 443, 445, 447, 449, 452, 462, 464, 468, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 626, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 694, 695, 788, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 958, 959, 960, 989, 992, 1002, 1007, 1012, 1028, 1030, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052], "confirm": [2, 11, 84, 112, 119, 122, 125, 169, 197, 199, 253, 262, 265, 268, 310, 352, 383, 981, 1002, 1043], "conflict": [377, 379, 383, 387, 396, 1042, 1043], "conform": [11, 581, 628, 832, 833, 992, 1012, 1013, 1042, 1048], "confound": [166, 167], "confus": [30, 164, 227, 251, 253, 268, 276, 325, 326, 350, 393, 468, 504, 631, 652, 697, 713, 715, 718, 729, 730, 738, 754, 784, 787, 830, 902, 909, 1014, 1028, 1035, 1036, 1040, 1044, 1045, 1047, 1048, 1049, 1050], "confusingli": 377, "confusion_matrix": [30, 227, 252, 253, 325, 326, 697, 713, 754, 799, 827, 992, 1028, 1036, 1041, 1042, 1045, 1046, 1048, 1052], "confusion_matrix_scor": 992, "confusionmatrixdisplai": [4, 30, 252, 318, 325, 350, 631, 718, 992, 1024, 1045, 1046, 1048, 1049, 1050], "congruenc": [654, 655, 656, 682, 683], "conjug": [259, 452, 462, 672, 674, 687, 695, 988], "conjunct": [399, 409, 594, 806, 822, 823, 825, 826, 827, 828, 831, 959, 982, 988, 1050], "connect": [10, 37, 42, 45, 49, 52, 60, 64, 65, 377, 379, 388, 393, 411, 441, 445, 452, 462, 463, 585, 586, 695, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 990, 995, 997, 1005, 1016, 1039, 1048, 1052], "connected_compon": 1042, "connectionist": [861, 862], "conner": 1048, "connor": [1043, 1048, 1052], "connossor": [1043, 1044], "conocophillip": 10, "conort": 1017, "conquer": 941, "conrad": [1035, 1036, 1050], "conroi": 1050, "consecut": [109, 120, 198, 391, 406, 413, 417, 443, 447, 449, 450, 452, 456, 459, 462, 537, 538, 539, 546, 602, 645, 666, 667, 668, 676, 677, 678, 797, 798, 805, 839, 840, 841, 842, 843, 861, 862, 981, 1002, 1028, 1043], "consensu": [18, 19, 35, 378, 379, 394, 405, 409, 649, 671, 678, 679, 719, 992], "consensus_scor": [18, 19, 405, 1037], "consequ": [55, 100, 215, 259, 260, 305, 335, 361, 406, 408, 414, 416, 561, 562, 566, 655, 656, 982, 988, 992, 1000, 1008, 1044, 1046, 1051, 1053], "conserv": [9, 393, 582, 589, 896, 897, 991, 1004], "consid": [0, 2, 10, 11, 12, 18, 23, 37, 53, 64, 69, 79, 88, 93, 97, 119, 122, 141, 145, 146, 162, 168, 197, 199, 233, 253, 259, 262, 266, 270, 273, 283, 286, 289, 290, 305, 317, 335, 342, 343, 345, 350, 361, 365, 366, 367, 371, 378, 379, 381, 385, 387, 391, 393, 394, 399, 402, 404, 408, 409, 414, 415, 416, 417, 418, 419, 420, 421, 438, 444, 446, 450, 457, 474, 508, 509, 521, 533, 541, 549, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 585, 586, 588, 589, 591, 593, 607, 608, 620, 631, 632, 633, 646, 652, 658, 659, 660, 662, 671, 679, 688, 689, 690, 692, 693, 694, 696, 700, 702, 705, 707, 709, 715, 726, 730, 734, 756, 786, 788, 794, 846, 847, 848, 850, 852, 854, 855, 856, 859, 861, 862, 867, 877, 878, 885, 899, 900, 909, 910, 912, 913, 914, 915, 976, 981, 987, 988, 989, 990, 992, 993, 995, 998, 999, 1000, 1002, 1006, 1007, 1008, 1013, 1019, 1026, 1038, 1039, 1043, 1047, 1048, 1050, 1051, 1052], "consider": [124, 125, 150, 153, 236, 254, 260, 266, 379, 408, 419, 619, 800, 814, 822, 981, 988, 994, 998, 1006, 1017, 1052], "consist": [2, 5, 24, 30, 35, 54, 55, 68, 78, 88, 90, 93, 115, 119, 125, 126, 133, 146, 152, 154, 157, 162, 170, 197, 215, 232, 236, 265, 268, 301, 310, 315, 318, 345, 351, 361, 365, 372, 374, 376, 379, 381, 385, 386, 387, 388, 392, 393, 394, 406, 409, 411, 415, 416, 417, 427, 428, 431, 432, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 497, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 591, 611, 627, 628, 629, 630, 635, 638, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 677, 678, 679, 687, 688, 689, 690, 691, 700, 735, 797, 798, 807, 832, 833, 834, 836, 837, 838, 839, 847, 848, 850, 852, 855, 856, 862, 867, 868, 869, 871, 875, 876, 879, 880, 882, 883, 885, 896, 897, 900, 904, 905, 907, 908, 910, 913, 915, 924, 926, 947, 963, 966, 981, 984, 985, 986, 988, 989, 991, 992, 993, 995, 996, 1002, 1005, 1007, 1008, 1011, 1013, 1017, 1019, 1026, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "consol": [118, 377, 1020], "consolid": [0, 393, 394, 1035], "consolidate_scor": 11, "consortium": [0, 1017], "constant": [2, 102, 112, 125, 152, 156, 162, 167, 185, 198, 199, 201, 215, 228, 233, 238, 262, 295, 300, 302, 306, 308, 316, 345, 347, 361, 371, 381, 388, 393, 405, 416, 419, 432, 446, 465, 482, 483, 484, 511, 513, 534, 538, 540, 547, 549, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 590, 606, 609, 611, 613, 627, 630, 632, 633, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 687, 689, 693, 695, 721, 723, 724, 728, 732, 775, 777, 785, 799, 822, 837, 838, 847, 855, 861, 862, 869, 880, 883, 892, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 984, 986, 988, 989, 992, 994, 995, 1002, 1006, 1008, 1030, 1038, 1043, 1045, 1047, 1048, 1049, 1051, 1053], "constant_": 552, "constant_valu": [419, 613, 617], "constant_value_bound": [419, 611, 613, 617], "constantini": 1051, "constantkernel": [152, 158, 419, 611, 617, 621, 624], "constantli": [35, 197, 1017], "constitu": 376, "constitut": [48, 393, 413, 416, 450, 456, 588, 589, 591, 996], "constrain": [45, 93, 119, 125, 127, 168, 188, 299, 316, 322, 336, 338, 372, 393, 407, 409, 414, 416, 509, 561, 562, 635, 658, 659, 690, 694, 822, 829, 988, 991, 1039], "constrained_layout": [93, 168, 218, 311, 312, 320], "constraint": [53, 55, 65, 93, 108, 134, 164, 192, 201, 236, 237, 254, 300, 301, 302, 316, 379, 391, 414, 417, 487, 508, 509, 557, 558, 561, 562, 564, 565, 632, 635, 818, 819, 912, 913, 914, 915, 961, 981, 983, 988, 989, 1006, 1014, 1039, 1042, 1043, 1046, 1048, 1050, 1052], "constru": 417, "construct": [2, 9, 68, 70, 109, 111, 113, 117, 130, 146, 215, 227, 233, 238, 240, 296, 306, 308, 316, 319, 373, 376, 381, 388, 393, 409, 410, 413, 414, 416, 417, 420, 434, 441, 442, 444, 445, 450, 452, 457, 463, 465, 467, 519, 535, 541, 544, 555, 556, 581, 587, 639, 688, 690, 691, 814, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 863, 864, 865, 866, 868, 909, 923, 925, 940, 941, 951, 955, 981, 982, 984, 988, 989, 992, 993, 995, 1002, 1005, 1007, 1008, 1013, 1019, 1023, 1040, 1042, 1043, 1046, 1049], "construct_grid": [9, 296], "constructor": [70, 229, 366, 381, 393, 407, 410, 417, 464, 467, 549, 550, 555, 567, 568, 569, 570, 581, 582, 588, 589, 597, 668, 676, 677, 846, 847, 848, 850, 852, 854, 855, 856, 863, 864, 865, 866, 960, 981, 993, 1002, 1007, 1013, 1019, 1035, 1036, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "consult": 992, "consum": [93, 361, 373, 381, 393, 399, 409, 413, 416, 449, 803, 804, 864, 865, 948, 949, 988, 1017, 1040, 1052], "consumpt": [6, 365, 393, 409, 534, 557, 558, 564, 565, 800, 814, 825, 826, 827, 912, 913, 914, 915, 958, 1019, 1035, 1037, 1041, 1043, 1044, 1049], "contact": [309, 391, 1012], "contain": [8, 17, 22, 25, 31, 38, 47, 54, 56, 68, 69, 111, 113, 117, 125, 126, 155, 167, 168, 170, 173, 188, 201, 215, 226, 233, 236, 237, 240, 248, 253, 257, 259, 265, 268, 269, 281, 289, 290, 292, 305, 318, 326, 329, 350, 351, 372, 373, 374, 376, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 402, 404, 406, 407, 409, 410, 412, 413, 414, 416, 417, 418, 419, 421, 423, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 500, 502, 503, 504, 508, 509, 510, 514, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 709, 712, 735, 736, 737, 772, 779, 780, 788, 794, 797, 798, 799, 800, 803, 804, 806, 814, 818, 819, 822, 823, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 944, 945, 947, 948, 955, 959, 961, 981, 982, 984, 990, 993, 996, 998, 1000, 1002, 1003, 1005, 1008, 1012, 1016, 1019, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "container": 402, "container_fold": 503, "container_path": 503, "contamin": [7, 78, 79, 226, 236, 289, 290, 469, 563, 850, 998, 1043, 1051, 1052], "content": [15, 310, 350, 352, 374, 379, 383, 385, 402, 407, 417, 486, 503, 508, 509, 588, 589, 591, 671, 918, 1001, 1017, 1028, 1036, 1045], "context": [56, 240, 253, 283, 365, 366, 373, 378, 380, 392, 393, 409, 410, 415, 416, 417, 419, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 531, 535, 536, 537, 539, 542, 543, 544, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 626, 627, 630, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 960, 982, 988, 992, 998, 1002, 1006, 1013, 1016, 1017, 1026, 1035, 1042, 1043, 1048, 1051], "contigu": [2, 19, 381, 391, 405, 413, 417, 443, 447, 449, 459, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 781, 819, 844, 845, 904, 906, 907, 908, 909, 910, 1007, 1038, 1045, 1049, 1053], "contin": [415, 714, 1002], "conting": [714, 715, 731, 755, 1041], "contingency_matrix": [409, 755, 1043], "continu": [0, 11, 15, 17, 40, 73, 90, 119, 149, 164, 168, 177, 198, 205, 215, 219, 222, 236, 237, 239, 244, 248, 249, 293, 301, 304, 310, 311, 313, 317, 318, 357, 359, 366, 374, 377, 381, 382, 383, 384, 387, 391, 393, 394, 396, 409, 414, 416, 468, 492, 592, 595, 596, 599, 600, 607, 608, 609, 632, 646, 647, 652, 653, 657, 660, 661, 662, 663, 726, 742, 756, 812, 814, 867, 869, 871, 873, 874, 883, 884, 885, 901, 902, 913, 955, 981, 988, 989, 992, 993, 995, 996, 1002, 1008, 1013, 1014, 1017, 1019, 1026, 1032, 1035, 1037, 1038, 1043, 1048, 1049, 1050, 1052], "continuous_featur": 384, "contour": [7, 9, 32, 44, 45, 78, 118, 138, 146, 152, 153, 155, 208, 209, 210, 211, 226, 231, 247, 289, 296, 336, 337, 339, 340, 342, 343, 376, 386, 631, 632, 998, 1006], "contour_kw": 632, "contourf": [9, 118, 211, 231, 289, 296, 299, 307, 308, 330, 337, 343, 347, 631, 632], "contours_": [386, 632], "contract": [197, 215, 342, 366, 393, 1013], "contradict": [170, 1013], "contrari": [2, 12, 167, 219, 223, 236, 243, 262, 305, 350, 373, 409, 496, 544, 606, 817, 885, 988, 994, 998], "contrast": [101, 168, 199, 232, 236, 259, 261, 292, 310, 351, 393, 406, 409, 412, 416, 419, 449, 452, 462, 619, 643, 814, 860, 982, 985, 987, 988, 992, 995, 997, 1000, 1002, 1005, 1006, 1008, 1045], "contrib": [321, 379, 381, 387, 391, 393, 409, 446, 1012, 1013, 1051], "contribut": [0, 12, 18, 123, 154, 181, 201, 268, 310, 368, 376, 377, 381, 382, 383, 387, 393, 394, 396, 414, 415, 416, 447, 449, 553, 554, 559, 560, 726, 729, 756, 986, 992, 995, 1000, 1007, 1010, 1012, 1013, 1016, 1017, 1026, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "contributor": [366, 382, 383, 384, 387, 391, 393, 992, 1010, 1013, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "control": [10, 32, 59, 97, 98, 115, 136, 154, 156, 181, 198, 201, 205, 229, 230, 260, 262, 278, 285, 302, 316, 318, 342, 355, 357, 358, 365, 366, 372, 375, 379, 381, 384, 387, 391, 393, 396, 407, 408, 409, 412, 413, 414, 415, 418, 419, 434, 440, 449, 454, 471, 472, 478, 531, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 593, 594, 596, 614, 619, 625, 627, 632, 634, 639, 641, 642, 646, 647, 649, 650, 651, 652, 654, 655, 656, 672, 674, 676, 677, 682, 683, 687, 692, 701, 709, 797, 798, 800, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 830, 831, 834, 835, 838, 861, 862, 883, 885, 896, 897, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 918, 958, 960, 979, 981, 988, 989, 991, 992, 993, 995, 998, 999, 1002, 1004, 1006, 1007, 1008, 1012, 1013, 1015, 1026, 1030, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "convei": [29, 223, 307, 1026], "conveni": [53, 201, 236, 371, 387, 391, 410, 413, 417, 419, 424, 443, 447, 449, 451, 453, 464, 489, 611, 676, 678, 699, 728, 785, 863, 864, 966, 982, 984, 988, 989, 999, 1017, 1028, 1035], "convent": [107, 125, 253, 259, 368, 379, 381, 382, 383, 385, 393, 404, 427, 428, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 508, 509, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 547, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 627, 628, 629, 630, 677, 688, 689, 690, 691, 718, 797, 798, 832, 833, 848, 850, 852, 856, 868, 876, 879, 880, 882, 885, 896, 897, 908, 935, 936, 992, 1020, 1035, 1042, 1043, 1046, 1048, 1049, 1051, 1052], "convention": [336, 393, 900], "converg": [15, 55, 59, 76, 77, 120, 122, 125, 149, 155, 158, 190, 199, 205, 213, 244, 246, 300, 301, 305, 310, 326, 367, 388, 393, 405, 409, 414, 417, 419, 421, 440, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 471, 472, 478, 482, 483, 484, 533, 535, 536, 537, 538, 539, 546, 553, 571, 610, 644, 645, 646, 647, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 678, 682, 683, 687, 688, 690, 691, 694, 695, 797, 798, 853, 861, 862, 899, 900, 906, 982, 987, 988, 989, 991, 996, 1006, 1035, 1038, 1039, 1040, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "converged_": [797, 798, 1053], "convergence_it": [440, 454], "convergencewarn": [153, 155, 157, 158, 205, 212, 244, 300, 301, 307, 388, 393, 797, 798, 1043, 1044, 1047], "convers": [15, 122, 188, 350, 361, 367, 373, 379, 381, 387, 391, 393, 402, 417, 572, 859, 868, 876, 924, 925, 978, 989, 1013, 1017, 1043, 1044, 1045, 1048, 1051], "convert": [11, 15, 32, 44, 46, 64, 69, 96, 154, 170, 197, 218, 236, 239, 244, 245, 248, 249, 273, 296, 365, 373, 374, 388, 391, 393, 402, 417, 440, 443, 444, 447, 449, 450, 451, 452, 459, 464, 465, 496, 534, 541, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 581, 582, 588, 589, 590, 591, 593, 594, 606, 627, 628, 629, 630, 646, 652, 658, 659, 660, 662, 666, 667, 668, 670, 674, 676, 677, 678, 692, 778, 799, 822, 859, 868, 869, 871, 875, 877, 878, 879, 881, 904, 912, 913, 914, 915, 922, 924, 925, 947, 977, 978, 981, 988, 989, 990, 992, 1002, 1003, 1007, 1008, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1052], "convex": [77, 102, 121, 122, 164, 175, 204, 216, 218, 346, 351, 409, 411, 414, 422, 446, 452, 462, 473, 475, 476, 479, 480, 481, 658, 676, 692, 988, 989, 995, 996, 1006, 1014, 1048], "convinc": 167, "convolut": [4, 157, 1024], "convolv": 302, "coo": [393, 553, 554, 692, 871, 920, 924, 925, 995, 1036, 1052], "coo_matrix": [12, 183, 452, 585, 586, 963, 966], "cook": [376, 494, 1035, 1041], "cookbook": [419, 622, 623], "cool": [417, 1035], "coolwarm": [254, 335], "cooman": 376, "coordin": [9, 10, 12, 52, 98, 129, 153, 182, 218, 260, 296, 365, 374, 414, 419, 443, 447, 448, 449, 461, 471, 472, 478, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 550, 614, 646, 647, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 693, 694, 706, 764, 769, 904, 988, 989, 1007, 1026, 1035, 1038, 1039, 1040, 1044, 1046, 1048, 1049, 1050], "cop": 10, "cope": [226, 367, 374, 988], "copeland": [1043, 1044], "copi": [3, 10, 15, 42, 60, 73, 96, 112, 125, 146, 161, 162, 167, 168, 169, 183, 190, 203, 213, 215, 219, 233, 283, 325, 326, 328, 330, 351, 356, 366, 376, 379, 381, 383, 384, 385, 391, 393, 434, 437, 440, 442, 443, 444, 446, 447, 449, 454, 459, 482, 483, 484, 485, 500, 502, 510, 532, 533, 534, 535, 541, 548, 553, 554, 559, 561, 562, 572, 590, 597, 607, 608, 610, 611, 628, 630, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 671, 672, 674, 679, 681, 684, 685, 686, 732, 769, 792, 800, 814, 844, 845, 859, 867, 870, 873, 874, 875, 876, 880, 881, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 906, 907, 908, 909, 910, 919, 922, 924, 925, 951, 963, 965, 966, 1002, 1007, 1008, 1013, 1020, 1023, 1028, 1035, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "copy_": 1035, "copy_cov": 548, "copy_gram": [682, 683, 686], "copy_x": [443, 447, 459, 535, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 685, 1037, 1043, 1044], "copy_x_train": [610, 611], "copy_xi": 686, "copybutton": [379, 396, 401], "copyright": [15, 80], "corani": 259, "cordier": 1042, "core": [1, 8, 14, 47, 53, 54, 63, 69, 107, 109, 115, 117, 118, 157, 164, 167, 168, 233, 253, 320, 364, 366, 368, 379, 382, 387, 393, 396, 402, 409, 414, 416, 417, 420, 444, 446, 449, 450, 455, 457, 496, 499, 538, 589, 594, 658, 659, 666, 668, 676, 839, 840, 841, 842, 843, 848, 856, 988, 995, 998, 1007, 1010, 1013, 1014, 1015, 1017, 1026, 1028, 1030, 1037, 1039, 1040, 1042, 1045, 1049, 1050, 1051], "core_dist": [63, 455, 456, 457], "core_distances_": [63, 450, 455, 457], "core_sampl": 420, "core_sample_indices_": [47, 444], "core_samples_mask": 47, "corei": [1036, 1043, 1044], "corentin": 1049, "cori": 1040, "corneil": 1048, "corner": [9, 12, 24, 51, 166, 256, 260, 268, 269, 296, 322, 374, 379, 498, 916, 918, 992, 1049], "cornerston": 1017, "cornflowerblu": [129, 191, 200, 207, 244, 246, 249, 266, 268, 288, 294, 357, 358], "corollari": 381, "corona": 1048, "corpora": 414, "corpu": [13, 351, 352, 374, 414, 588, 589, 590, 591, 1028, 1036], "corr": [83, 170, 259], "corrcoef": [83, 103], "correct": [11, 24, 25, 55, 79, 109, 120, 157, 167, 181, 186, 197, 215, 243, 252, 253, 259, 266, 268, 278, 281, 338, 340, 350, 361, 376, 379, 381, 383, 394, 406, 407, 409, 413, 414, 416, 417, 426, 432, 450, 456, 469, 474, 488, 501, 503, 635, 667, 676, 678, 703, 704, 708, 712, 713, 718, 721, 723, 724, 728, 729, 730, 734, 738, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 783, 784, 785, 787, 790, 791, 794, 796, 832, 833, 834, 841, 849, 875, 977, 988, 992, 993, 1007, 1019, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "correct_covari": [469, 474], "corrected_std": 259, "corrected_var": 259, "correctli": [141, 145, 197, 215, 233, 266, 268, 274, 293, 312, 327, 338, 379, 388, 414, 416, 426, 437, 469, 493, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 658, 666, 668, 674, 675, 676, 703, 794, 796, 799, 822, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 884, 899, 900, 904, 906, 907, 908, 909, 910, 912, 914, 942, 989, 992, 995, 996, 1002, 1007, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "correl": [10, 25, 80, 83, 84, 103, 116, 117, 125, 127, 142, 145, 154, 164, 165, 166, 168, 169, 171, 181, 186, 192, 215, 259, 265, 281, 311, 316, 317, 328, 372, 375, 376, 384, 393, 395, 405, 411, 413, 418, 450, 457, 482, 483, 485, 493, 494, 500, 524, 564, 606, 609, 627, 634, 635, 636, 682, 683, 743, 757, 778, 779, 780, 830, 844, 845, 881, 882, 884, 893, 983, 988, 993, 999, 1002, 1006, 1008, 1013, 1014, 1015, 1030, 1035, 1036, 1037, 1048, 1049], "correlation_coeffici": 609, "correlation_model": 1042, "correspond": [9, 11, 12, 18, 24, 25, 30, 39, 51, 63, 76, 80, 95, 109, 112, 115, 116, 118, 126, 142, 145, 146, 150, 155, 158, 167, 186, 189, 197, 198, 201, 206, 215, 227, 232, 233, 240, 248, 253, 258, 260, 262, 263, 268, 269, 273, 296, 310, 317, 318, 319, 351, 355, 356, 361, 366, 373, 374, 375, 378, 379, 381, 383, 386, 387, 392, 393, 394, 405, 406, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 424, 430, 437, 439, 441, 445, 448, 451, 453, 459, 461, 463, 464, 467, 472, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 534, 541, 544, 545, 546, 549, 550, 552, 555, 557, 559, 560, 561, 564, 582, 584, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 630, 632, 633, 635, 643, 646, 647, 648, 652, 658, 659, 660, 661, 662, 668, 669, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 687, 690, 691, 692, 694, 703, 710, 713, 724, 725, 734, 738, 742, 752, 754, 774, 778, 782, 788, 789, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 833, 835, 836, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 861, 862, 871, 874, 875, 877, 878, 881, 885, 893, 904, 905, 906, 909, 912, 913, 914, 915, 929, 935, 949, 952, 967, 981, 982, 984, 985, 986, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1002, 1003, 1006, 1007, 1011, 1019, 1025, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "correspondingli": 1052, "corri": 1046, "corrobor": 391, "corrupt": [3, 100, 181, 203, 214, 391, 860, 988, 1000], "cort": [1046, 1047, 1050, 1051], "cortex": 414, "cos_transform": 2, "cosin": [2, 38, 274, 283, 288, 371, 374, 393, 409, 414, 415, 441, 445, 450, 457, 535, 590, 591, 620, 696, 760, 761, 762, 765, 770, 771, 774, 778, 779, 780, 844, 845, 849, 876, 995, 1008, 1030, 1045], "cosine_dist": [696, 762, 995, 1041], "cosine_similar": [342, 404, 760, 765, 990, 1040, 1054], "cosinesimil": 283, "cosmo": 17, "cost": [2, 37, 96, 115, 125, 149, 164, 173, 218, 227, 231, 251, 261, 263, 266, 268, 273, 276, 315, 338, 351, 352, 354, 359, 360, 379, 385, 387, 391, 408, 409, 416, 478, 496, 500, 537, 538, 539, 546, 551, 557, 558, 559, 560, 561, 564, 565, 602, 610, 619, 627, 646, 647, 652, 653, 658, 660, 661, 662, 663, 668, 672, 674, 676, 678, 687, 688, 692, 700, 702, 718, 732, 742, 784, 787, 799, 800, 822, 830, 865, 884, 902, 904, 905, 906, 909, 912, 913, 914, 915, 941, 984, 988, 989, 992, 995, 1005, 1006, 1007, 1014, 1015, 1030, 1041, 1044, 1045], "cost_complexity_pruning_path": [355, 912, 913, 914, 915], "cost_gain": 253, "costa": [1043, 1048], "costin": 1035, "costli": [70, 76, 116, 161, 253, 260, 346, 366, 380, 385, 409, 443, 627, 808, 810, 896, 897, 941, 992, 995, 1004, 1013], "costlier": 671, "costs_": [471, 472, 1051], "could": [0, 2, 7, 11, 12, 25, 35, 40, 51, 69, 70, 93, 96, 110, 111, 119, 122, 125, 143, 149, 154, 162, 166, 167, 168, 197, 198, 201, 206, 215, 222, 231, 232, 233, 252, 253, 259, 281, 291, 294, 318, 334, 335, 350, 355, 367, 379, 385, 387, 393, 396, 402, 406, 413, 416, 417, 421, 474, 533, 538, 607, 608, 629, 671, 802, 807, 809, 981, 982, 988, 989, 999, 1000, 1002, 1007, 1013, 1027, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "couldn": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "count": [2, 11, 13, 23, 25, 39, 47, 51, 68, 69, 90, 131, 132, 167, 168, 197, 199, 215, 230, 240, 253, 268, 273, 278, 283, 316, 317, 351, 352, 359, 374, 376, 383, 388, 393, 394, 406, 407, 409, 414, 416, 417, 446, 449, 489, 496, 536, 544, 581, 588, 589, 590, 591, 594, 604, 617, 640, 697, 705, 715, 718, 729, 730, 738, 754, 783, 784, 786, 787, 839, 843, 844, 845, 853, 856, 867, 916, 918, 943, 957, 981, 984, 988, 992, 994, 995, 1002, 1008, 1017, 1028, 1035, 1038, 1040, 1043, 1044, 1046, 1047], "count_nonzero": [5, 8, 365], "count_onli": [844, 845], "count_vect": 1028, "counter": [17, 109, 266, 409, 676, 677, 678, 1048], "counterpart": [377, 981, 989, 1007, 1023], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 11, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 11, "countri": [311, 322, 496, 989], "counts_": 1047, "countvector": [13, 329, 352, 374, 384, 410, 414, 417, 464, 489, 536, 582, 589, 590, 591, 1028, 1035, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "coupl": [13, 50, 51, 53, 219, 373, 374, 405, 406, 409, 418, 589, 910, 981, 1007], "cournapeau": [0, 398, 1035, 1038], "cours": [6, 7, 173, 273, 365, 379, 381, 408, 414, 417, 418, 982, 987, 988, 1017], "coursecentr": [409, 442], "courtesi": 379, "couvreur": [1044, 1045], "cov": [32, 80, 84, 111, 248, 379, 393, 396, 401, 412, 422, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 519, 532, 534, 541, 548], "cov_": [9, 80], "cov_class_1": 32, "cov_class_2": 32, "cov_init": 1051, "cov_test": 9, "cov_train": 9, "cov_typ": [245, 491], "covar": [243, 244, 249], "covari": [7, 10, 27, 31, 33, 77, 81, 83, 100, 103, 124, 126, 149, 156, 200, 226, 242, 244, 246, 247, 248, 249, 250, 266, 294, 322, 368, 388, 393, 399, 409, 412, 414, 419, 482, 483, 484, 485, 504, 515, 519, 527, 532, 534, 541, 548, 549, 550, 563, 610, 611, 613, 622, 623, 631, 644, 645, 650, 654, 656, 682, 683, 686, 689, 693, 797, 798, 800, 819, 991, 998, 1002, 1014, 1015, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1044], "covariance_": [10, 32, 78, 80, 469, 470, 471, 472, 473, 474, 475, 476, 549, 550, 986, 1042], "covariance_correct": [469, 474], "covariance_eigh": [541, 1053], "covariance_estim": [31, 549, 986, 1047], "covariance_prior": [249, 797], "covariance_prior_": 797, "covariance_reweight": [469, 474], "covariance_typ": [42, 244, 245, 247, 248, 249, 797, 798, 1051], "covariances_": [243, 244, 245, 248, 249, 797, 798, 1042], "cover": [0, 50, 173, 197, 215, 361, 371, 374, 379, 392, 635, 720, 794, 992, 993, 1011], "coverag": [9, 11, 122, 125, 197, 215, 296, 374, 382, 404, 498, 627, 720], "coverage_error": [992, 1039, 1049], "coverage_fract": 122, "coverages_land": 9, "covertyp": [372, 491, 1030], "covtyp": 173, "cow": 1036, "cowlei": 1045, "cowton": 1049, "cox": [305, 309, 880, 892, 1002, 1043, 1051], "cp": 1028, "cpickl": 1028, "cpo": [146, 376], "cpp": 385, "cppflag": 377, "cpu": [0, 59, 260, 283, 320, 365, 366, 385, 393, 396, 404, 417, 496, 632, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 679, 800, 814, 825, 826, 827, 848, 856, 897, 960, 992, 1019, 1023, 1028, 1040, 1049, 1050, 1052], "cpu_count": [40, 115, 283, 960], "cpuexecutionprovid": 402, "cpython": [379, 380, 385, 1050], "craft": [368, 382], "craig": [1004, 1038, 1043], "crall": [1042, 1048], "crammer": [666, 667, 735, 988, 992, 1007], "crammer06a": [666, 667], "crammer_sing": [904, 993, 1007, 1035], "cranenburgh": 1039, "crash": [10, 379, 402, 468, 894, 895, 902, 1002, 1039, 1043, 1051, 1052], "crawl": [521, 933], "craze": 1042, "crc": 988, "creat": [2, 3, 6, 9, 18, 19, 24, 25, 28, 30, 32, 35, 37, 39, 41, 42, 44, 47, 50, 56, 58, 60, 69, 70, 78, 84, 88, 95, 98, 111, 114, 118, 119, 120, 122, 126, 129, 145, 149, 151, 154, 155, 156, 158, 162, 166, 168, 176, 178, 180, 183, 193, 198, 199, 209, 210, 220, 231, 233, 236, 237, 239, 248, 253, 254, 255, 257, 259, 269, 273, 291, 293, 294, 307, 309, 310, 315, 318, 319, 330, 334, 335, 339, 340, 343, 345, 346, 347, 352, 355, 357, 358, 361, 366, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 392, 393, 396, 402, 406, 409, 410, 413, 415, 416, 417, 419, 438, 451, 453, 465, 466, 499, 515, 516, 517, 518, 546, 553, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 588, 589, 591, 597, 628, 630, 631, 632, 633, 697, 698, 700, 701, 702, 782, 789, 800, 802, 806, 810, 814, 818, 822, 823, 825, 826, 834, 865, 877, 906, 909, 912, 913, 914, 915, 919, 922, 944, 945, 951, 960, 965, 977, 982, 988, 991, 992, 993, 995, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1013, 1017, 1024, 1026, 1027, 1032, 1035, 1036, 1038, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "create_ax": 305, "create_species_bunch": 9, "createindex": 283, "creation": [381, 511, 512, 513, 515, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 656, 844, 845, 1017, 1042, 1043, 1044, 1048], "creativ": 373, "creator": [146, 373, 376], "cred_int_df": 259, "cred_interv": 259, "credibl": 259, "credit": [374, 387, 416, 988, 1017], "credit_amount": 253, "credit_card": 253, "credit_gain_scor": 253, "credit_histori": 253, "creighton": 320, "crfsuit": 1012, "crispinlogan": [1047, 1050, 1051], "cristian": 642, "cristina": 1047, "criteria": [55, 115, 164, 175, 186, 205, 216, 248, 259, 387, 409, 418, 441, 466, 482, 483, 484, 501, 557, 558, 559, 560, 564, 565, 646, 652, 656, 658, 659, 671, 692, 865, 884, 904, 905, 912, 913, 914, 915, 982, 991, 996, 1006, 1014, 1027, 1038, 1043, 1046], "criterion": [25, 76, 77, 170, 185, 205, 248, 271, 316, 381, 388, 393, 409, 414, 441, 445, 449, 452, 459, 462, 532, 537, 539, 546, 553, 554, 557, 558, 559, 560, 564, 565, 566, 606, 627, 644, 645, 648, 656, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 680, 691, 695, 710, 798, 901, 906, 907, 908, 909, 910, 912, 913, 914, 915, 988, 991, 992, 1000, 1005, 1008, 1015, 1027, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "criterion_": [185, 186, 656], "critic": [373, 379, 392, 416, 692, 989, 992, 1000, 1007, 1017, 1046], "crockett": 1050, "crombach": 1037, "crop": [387, 1050], "cross": [11, 12, 25, 32, 52, 55, 56, 69, 70, 72, 73, 76, 80, 84, 85, 89, 90, 100, 115, 118, 119, 121, 122, 125, 135, 139, 140, 143, 144, 146, 147, 167, 168, 175, 179, 181, 183, 184, 185, 191, 197, 199, 205, 215, 216, 227, 234, 239, 245, 246, 248, 251, 256, 259, 260, 261, 263, 265, 266, 267, 268, 271, 272, 273, 274, 276, 278, 287, 302, 304, 306, 311, 313, 315, 317, 322, 328, 338, 345, 368, 374, 379, 381, 388, 391, 392, 393, 402, 403, 406, 410, 411, 414, 416, 417, 418, 419, 437, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 501, 502, 504, 515, 541, 567, 568, 575, 593, 594, 597, 602, 606, 609, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 701, 702, 706, 713, 728, 741, 785, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 864, 865, 869, 884, 885, 902, 904, 906, 909, 947, 991, 992, 995, 996, 1000, 1002, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "cross_decomposit": [82, 83, 84, 85, 164, 234, 368, 993, 1014, 1039, 1040, 1042, 1043, 1044], "cross_val": 1035, "cross_val_predict": [130, 255, 315, 399, 406, 413, 416, 437, 567, 568, 826, 827, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1052], "cross_val_scor": [11, 100, 161, 162, 164, 251, 255, 264, 270, 274, 276, 321, 341, 361, 379, 381, 391, 399, 413, 416, 472, 520, 575, 703, 742, 800, 825, 827, 912, 913, 981, 992, 1014, 1023, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1051, 1052], "cross_valid": [2, 11, 119, 125, 130, 167, 199, 233, 255, 262, 273, 278, 311, 322, 379, 392, 399, 575, 825, 826, 992, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "crossentropi": 561, "crossvalid": [259, 274], "crowd": [387, 394, 989, 1013], "crucial": [10, 125, 166, 201, 254, 365, 378, 379, 393, 394, 409, 419, 1007], "crude": 1046, "crunch": 385, "cruz": 157, "crypt": [17, 374], "cryptograph": 388, "cs_": 659, "cs_note": 418, "cs_point": 118, "csail": [409, 666, 667, 676, 841], "csc": [365, 391, 393, 417, 527, 551, 553, 554, 670, 692, 871, 873, 879, 884, 887, 889, 895, 920, 924, 925, 955, 967, 968, 970, 971, 972, 973, 995, 1002, 1043, 1044, 1046, 1049], "csc_matrix": [452, 557, 558, 563, 564, 565, 566, 881, 912, 913, 914, 915, 982, 1002, 1008, 1040], "csco": 10, "csgraph": [393, 1048], "csie": [173, 373, 487, 508, 509, 658], "csizsek": 1042, "csr": [15, 352, 365, 373, 374, 388, 391, 393, 417, 420, 443, 446, 447, 449, 450, 459, 497, 508, 523, 527, 553, 554, 557, 558, 564, 565, 566, 590, 630, 658, 692, 714, 768, 792, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 867, 871, 873, 875, 876, 877, 879, 882, 883, 884, 887, 888, 889, 891, 894, 897, 912, 913, 914, 915, 920, 924, 925, 947, 955, 967, 968, 969, 970, 971, 972, 973, 974, 975, 995, 1002, 1006, 1035, 1036, 1041, 1043, 1044, 1050, 1051, 1052], "csr_arrai": 974, "csr_matrix": [283, 316, 440, 444, 452, 496, 534, 544, 557, 558, 559, 560, 563, 564, 565, 566, 588, 593, 594, 714, 830, 859, 877, 879, 906, 907, 909, 910, 912, 913, 914, 915, 942, 947, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 993, 1002, 1006, 1007, 1008, 1050], "css": 1047, "cst": 986, "cstr": 842, "cstride": 168, "csv": [10, 373, 376, 384, 1043, 1048], "csytraci": 1038, "ct": [12, 157, 240, 410, 464, 466, 467], "ctc": 157, "cttt": 157, "cube": [421, 533], "cubic": [78, 419], "cuda": [391, 404], "cue": 991, "culprit": 391, "cultiv": 376, "cultur": 374, "cum_claim": [197, 215], "cum_exposur": 197, "cumsum": [121, 197, 215, 1042], "cumtim": 385, "cumul": [121, 197, 215, 409, 726, 735, 756, 881, 893, 1002, 1006, 1042, 1044, 1045], "cumulated_claim": 197, "cumulated_claim_amount": 215, "cumulated_exposur": 197, "cumulated_sampl": 215, "cunha": [1036, 1037], "cup": [374, 992], "cupi": [320, 391, 404, 1052, 1053], "cupy_to_ndarrai": 404, "curat": [368, 379, 382, 383], "cure": 988, "curic": [1043, 1044], "current": [0, 6, 44, 109, 154, 167, 215, 305, 315, 366, 367, 374, 377, 379, 380, 381, 384, 388, 391, 393, 394, 404, 405, 407, 409, 413, 416, 417, 418, 419, 440, 446, 450, 468, 469, 470, 471, 472, 473, 474, 475, 476, 532, 535, 541, 553, 554, 557, 558, 559, 560, 562, 564, 565, 566, 576, 591, 593, 610, 617, 626, 627, 646, 658, 667, 671, 675, 676, 677, 678, 788, 797, 798, 849, 853, 861, 862, 880, 892, 902, 912, 913, 914, 915, 918, 959, 967, 981, 986, 988, 992, 995, 996, 1002, 1013, 1016, 1026, 1043, 1047, 1049, 1050, 1051], "current_count": 39, "current_month": 154, "current_sklearn_vers": 576, "current_sz_mb": 6, "currentcontrolset": 396, "currentmodul": 379, "curs": [350, 351, 409, 415, 994, 995, 1022, 1027], "cursor": [115, 260], "curv": [6, 9, 21, 22, 24, 26, 35, 73, 76, 112, 114, 115, 121, 126, 164, 175, 176, 187, 197, 215, 216, 218, 220, 223, 225, 227, 229, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 259, 269, 276, 300, 306, 309, 315, 338, 342, 357, 386, 403, 407, 408, 413, 415, 437, 438, 439, 502, 510, 515, 521, 525, 564, 632, 645, 658, 698, 700, 702, 706, 707, 708, 709, 727, 729, 741, 742, 782, 784, 787, 788, 789, 797, 798, 806, 817, 823, 828, 830, 831, 842, 865, 884, 904, 909, 988, 989, 991, 992, 998, 1008, 1014, 1015, 1017, 1030, 1032, 1037, 1038, 1041, 1045, 1047, 1048, 1049, 1050, 1051], "curvatur": 299, "cusick": 1045, "custom": [105, 143, 145, 164, 180, 206, 237, 251, 253, 258, 260, 263, 266, 267, 271, 276, 285, 290, 294, 315, 333, 335, 336, 338, 339, 341, 348, 350, 352, 371, 374, 377, 381, 386, 387, 388, 391, 392, 393, 399, 402, 407, 409, 410, 413, 419, 468, 489, 493, 494, 502, 504, 538, 540, 547, 549, 557, 558, 564, 565, 571, 573, 602, 630, 631, 690, 699, 713, 778, 800, 830, 868, 902, 909, 976, 981, 986, 992, 995, 1012, 1013, 1014, 1017, 1028, 1030, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "custom_combin": 877, "custom_cv": 413, "custom_cv_2fold": 413, "custom_fnames_enc": 877, "custom_nam": 350, "custom_scorer_modul": 992, "custom_scoring_funct": 992, "customestim": 107, "customkernel": 618, "customvector": 417, "cut": [17, 41, 44, 63, 64, 145, 146, 164, 220, 251, 262, 276, 278, 328, 359, 383, 391, 405, 408, 409, 446, 452, 453, 462, 496, 588, 591, 658, 691, 695, 816, 822, 827, 865, 884, 1002, 1014], "cut_dist": [53, 446], "cutler": [912, 913], "cutoff": [176, 946, 1002, 1044], "cutoffs_x0": 305, "cutoffs_x1": 305, "cv": [2, 10, 11, 22, 23, 24, 25, 52, 69, 70, 71, 72, 76, 100, 115, 119, 121, 125, 136, 145, 161, 162, 167, 186, 196, 199, 233, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 269, 273, 274, 278, 311, 320, 322, 338, 345, 392, 393, 399, 406, 408, 413, 416, 418, 437, 472, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 802, 803, 804, 805, 806, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 912, 913, 981, 984, 987, 988, 992, 1002, 1013, 1023, 1024, 1028, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053, 1054], "cv_alpha": [651, 655], "cv_alphas_": [186, 651, 655, 1047], "cv_best_it": 121, "cv_clf": 121, "cv_color": 121, "cv_estim": 121, "cv_line": 121, "cv_mape_scor": 11, "cv_model": 167, "cv_result": [2, 11, 69, 115, 125, 145, 257, 258, 260, 262, 399, 814, 827, 992], "cv_results_": [69, 70, 71, 80, 115, 136, 145, 248, 253, 257, 258, 259, 260, 263, 267, 270, 271, 285, 338, 472, 594, 673, 675, 800, 803, 804, 814, 822, 1028, 1041, 1045, 1047, 1048, 1053], "cv_results_ecoc": 278, "cv_results_lr": 199, "cv_results_ovo": 278, "cv_results_ovr": 278, "cv_results_qr": 199, "cv_results_tre": 278, "cv_results_tuned_model": 273, "cv_results_vanilla_model": 273, "cv_score": [121, 273], "cv_test_scor": 828, "cv_train_scor": 828, "cv_valu": 1043, "cv_values_": [673, 675, 1053], "cvc": 10, "cve": 1048, "cvx": 10, "cwitt": 1043, "cxx": 377, "cxxflag": 377, "cyan": [76, 112, 167, 294], "cybernet": 769, "cycl": [0, 2, 40, 42, 48, 60, 93, 182, 244, 249, 266, 268, 318, 319, 379, 383, 399, 407, 414, 579, 580, 627, 803, 804, 920, 981, 982, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "cycler": 36, "cyclic": [2, 646, 647, 652, 653, 660, 661, 662, 663, 1047], "cyclic_cossin_linear_pipelin": 2, "cyclic_cossin_linear_predict": 2, "cyclic_cossin_transform": 2, "cyclic_hour": 2, "cyclic_month": 2, "cyclic_spline_interactions_pipelin": 2, "cyclic_spline_linear_pipelin": 2, "cyclic_spline_linear_predict": 2, "cyclic_spline_poly_pipelin": 2, "cyclic_spline_poly_predict": 2, "cyclic_spline_transform": 2, "cyclic_weekdai": 2, "cyl": [9, 296], "cynthias13w": 1052, "cyt": 278, "cython": [319, 365, 366, 368, 377, 379, 382, 388, 391, 396, 401, 404, 407, 409, 416, 508, 1002, 1003, 1006, 1007, 1012, 1013, 1035, 1038, 1039, 1041, 1047, 1050, 1051, 1052], "cython3": 377, "cythonx": 380, "c\u00e8sar": 992, "d": [0, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 29, 30, 35, 36, 40, 46, 47, 48, 58, 59, 61, 68, 69, 80, 87, 90, 93, 96, 100, 102, 149, 157, 167, 197, 205, 213, 215, 223, 227, 229, 230, 231, 232, 246, 258, 259, 267, 273, 281, 289, 290, 296, 301, 325, 326, 329, 338, 342, 343, 352, 373, 374, 376, 381, 385, 391, 406, 409, 411, 412, 414, 416, 417, 419, 420, 444, 446, 447, 452, 460, 463, 488, 493, 503, 526, 534, 536, 557, 558, 565, 566, 581, 582, 590, 614, 615, 619, 622, 623, 644, 645, 648, 669, 670, 671, 680, 688, 689, 692, 693, 697, 699, 705, 708, 721, 722, 723, 724, 726, 756, 764, 778, 781, 788, 812, 839, 841, 843, 844, 845, 860, 871, 875, 877, 878, 880, 892, 897, 914, 915, 919, 984, 986, 988, 989, 990, 991, 992, 994, 1000, 1002, 1004, 1007, 1008, 1024, 1025, 1026, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "d1997": 416, "d2": [722, 723, 992], "d2_absolute_error_scor": [723, 992, 1049], "d2_log_loss_scor": [992, 1053], "d2_pinball_scor": [992, 1049], "d2_pinball_score_08": 992, "d2_tweedie_scor": [992, 1048], "d2_tweedie_score_15": 992, "d55e00": 243, "d81b60": 309, "d83": 376, "d_": [78, 409, 414, 648, 669, 680, 778, 989, 994], "d_c": 409, "d_chunk": 781, "d_fit": 688, "d_fix": 102, "d_m": 409, "d_multi": 102, "da": [374, 1050, 1051, 1053], "dae": 988, "dagm": 984, "dagstuhl": 992, "dai": [2, 10, 11, 125, 154, 168, 198, 366, 376, 379, 883, 1017, 1041, 1042, 1049, 1050], "daiki": 1039, "daili": [10, 125, 1017], "dakota": 1045, "dale": [199, 1048], "dalla": 1043, "dalmia": [1041, 1042, 1043], "damag": 417, "damicelli": 1050, "damink": 1052, "daml": [409, 452, 462], "damp": [42, 409, 440, 454], "dan": [15, 1035, 1039, 1040, 1041, 1043, 1044], "danfrankj": 1039, "dang": [679, 988, 1053], "danger": [198, 413], "dangi": 1052, "dangl": 15, "dangonite57": [1050, 1051], "daniel": [173, 320, 365, 885, 1002, 1017, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052], "daniela": [1049, 1050], "danielgaerb": 1050, "danielsen": 1042, "danielweitzenfeld": 1038, "daniil": 1042, "danil": 1043, "dani\u00ebl": 1046, "danna": 1045, "danni": [1038, 1039, 1040], "dantzig": 345, "danylo": 1044, "dao": 1043, "daphn": 1046, "dare": 1045, "darioka": [1047, 1049, 1050], "dariu": [1042, 1043], "dark": [112, 167, 338, 374, 1052], "dark2": [23, 25, 219], "darkblu": 294, "darkorang": [77, 97, 101, 102, 198, 208, 221, 244, 245, 246, 249, 266, 268, 288, 294, 295, 327, 357], "darkorchid": 207, "darkr": [211, 289, 337], "darpa": 374, "darren": [1049, 1050], "darshan": 1047, "dart": 1012, "dartmouth": 0, "dasarathi": 376, "dasgupta": [417, 446, 898, 1004], "dash": [31, 78, 109, 121, 132, 149, 152, 154, 167, 184, 189, 192, 198, 199, 206, 209, 210, 236, 253, 259, 269, 340, 1006], "dashdot": [121, 149, 152, 236], "dask": [960, 1013, 1043], "data": [0, 1, 4, 6, 9, 11, 12, 13, 14, 17, 19, 23, 25, 28, 29, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 60, 63, 66, 67, 69, 70, 72, 74, 77, 79, 88, 90, 92, 93, 96, 97, 101, 103, 104, 107, 109, 111, 112, 114, 115, 118, 119, 121, 122, 127, 128, 129, 131, 133, 136, 137, 138, 143, 148, 149, 150, 151, 153, 154, 156, 158, 159, 161, 164, 167, 168, 175, 176, 179, 180, 181, 182, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 229, 230, 231, 233, 235, 236, 237, 240, 243, 244, 245, 246, 247, 249, 252, 253, 257, 259, 261, 262, 263, 264, 267, 273, 274, 278, 281, 283, 287, 289, 291, 292, 293, 294, 296, 300, 301, 304, 306, 307, 308, 312, 313, 315, 317, 319, 320, 321, 326, 327, 329, 330, 334, 335, 337, 342, 343, 350, 356, 357, 358, 359, 364, 366, 368, 371, 372, 373, 375, 376, 379, 381, 382, 385, 386, 387, 388, 392, 396, 399, 402, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 617, 618, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 710, 711, 713, 717, 718, 720, 725, 727, 728, 729, 730, 731, 734, 736, 737, 738, 740, 741, 754, 755, 757, 761, 763, 764, 769, 778, 783, 784, 785, 787, 788, 789, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 928, 929, 930, 938, 940, 941, 955, 958, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1021, 1023, 1024, 1026, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "data1010": 1040, "data_filenam": [501, 505], "data_hom": [486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1042, 1051], "data_home_path": 499, "data_id": [3, 119, 154, 167, 197, 215, 227, 253, 273, 278, 311, 373, 496], "data_ind": 12, "data_max": 1040, "data_max_": [874, 1040], "data_min": 1040, "data_min_": [874, 1040], "data_nam": 396, "data_path": 6, "data_rang": 1040, "data_range_": [874, 1040], "data_sampl": 13, "data_set": 300, "data_size_mb": 352, "data_stream": 6, "data_test": [231, 253, 260, 350, 509], "data_test_size_mb": 350, "data_train": [231, 253, 260, 350, 509], "data_train_size_mb": 350, "data_transform": 639, "data_transpos": [1049, 1051], "data_unravel_indic": 12, "data_vers": 396, "databas": [6, 146, 310, 365, 367, 374, 376, 409, 414, 416, 417, 420, 442, 444, 510, 555, 556, 897, 1004], "datafram": [2, 11, 23, 68, 69, 70, 109, 115, 119, 122, 127, 145, 154, 161, 166, 167, 168, 169, 176, 181, 186, 201, 205, 215, 237, 240, 248, 253, 257, 259, 260, 262, 270, 271, 273, 278, 310, 311, 312, 318, 319, 320, 345, 350, 351, 373, 374, 379, 381, 384, 393, 410, 416, 433, 442, 443, 445, 447, 449, 464, 466, 467, 468, 482, 483, 484, 485, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 688, 689, 692, 800, 803, 804, 814, 830, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 920, 947, 963, 966, 981, 982, 1013, 1028, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "dataia": 0, "dataiku": 1010, "datalim": 245, "datapoint": [2, 40, 50, 54, 153, 156, 180, 231, 232, 236, 254, 259, 281, 419, 446, 502, 557, 558, 559, 560, 564, 565, 566, 611, 912, 913, 914, 915, 985], "datarobot": 1010, "dataset": [4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 24, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 65, 66, 69, 70, 71, 72, 73, 78, 79, 80, 84, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 146, 148, 150, 152, 155, 157, 159, 161, 162, 169, 170, 173, 175, 177, 178, 180, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 220, 222, 223, 225, 227, 230, 232, 234, 235, 239, 240, 241, 243, 245, 246, 247, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 275, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 333, 334, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 361, 366, 367, 368, 381, 382, 383, 385, 392, 393, 395, 396, 402, 404, 405, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 421, 424, 429, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 469, 470, 473, 474, 475, 476, 478, 481, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 583, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 631, 632, 633, 634, 635, 638, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 708, 710, 711, 729, 755, 757, 787, 788, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 868, 869, 877, 878, 882, 884, 886, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 929, 930, 981, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1017, 1020, 1022, 1023, 1024, 1027, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "dataset_nam": [236, 283], "datasets_nam": 236, "datastructur": [404, 1043, 1047], "datastuctur": 1052, "datatyp": [464, 466, 1042, 1045], "date": [2, 68, 125, 146, 154, 168, 374, 376, 379, 383, 394, 410, 1013], "dateco2datef641958": 154, "daten": [450, 1043, 1044], "datenbergwerk": 1045, "datetim": [2, 15, 154, 168], "dauphin": [302, 1037], "dave": [1035, 1042, 1043, 1049, 1051], "davi": [474, 725, 992, 1039], "david": [0, 35, 55, 79, 115, 125, 176, 181, 199, 236, 260, 262, 310, 350, 351, 352, 374, 398, 409, 416, 419, 462, 532, 536, 567, 568, 622, 623, 628, 725, 797, 901, 982, 988, 996, 1005, 1017, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davidblnc": [1050, 1051], "davies_bouldin_scor": [409, 1043], "davis2006": 992, "daw": [0, 109, 110, 111, 398, 1035, 1036, 1037, 1038, 1039], "dawson": 1039, "dayn": [1050, 1051], "db": [47, 53, 409], "dbauer9": 1046, "dberenbaum": 1051, "dbg": 385, "dbpedia": 15, "dbpedia_resource_prefix_len": 15, "dbscan": [34, 35, 36, 42, 53, 56, 58, 61, 63, 66, 164, 321, 327, 391, 393, 446, 450, 452, 455, 512, 704, 705, 717, 737, 793, 795, 856, 884, 995, 1014, 1029, 1030, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1051, 1052], "dbscan_clust": 446, "dcc": 374, "dcg": [726, 756, 992, 1042], "dcg_score": [756, 992, 1042, 1045], "dd": [9, 10, 128, 296, 498], "ddof": [259, 884, 895], "de": [0, 10, 22, 23, 24, 25, 72, 113, 130, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 311, 327, 345, 376, 635, 688, 764, 988, 989, 1013, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "dea": [1049, 1050, 1051], "deactiv": [238, 373, 380, 385, 396, 410, 803, 804, 1049], "dead": 1053, "deadlock": 394, "deal": [23, 55, 69, 125, 161, 167, 181, 222, 273, 278, 342, 352, 379, 384, 410, 417, 418, 419, 474, 496, 703, 708, 763, 787, 870, 941, 988, 1017, 1025, 1038, 1050, 1051], "dealloc": 1052, "dean": [130, 1043, 1049, 1051, 1053], "deap": 1012, "death": 374, "debian": [0, 365, 377, 385], "debias": 102, "deborah": [1041, 1042, 1052], "debug": [361, 366, 380, 382, 385, 393, 395, 627, 903, 958, 1012, 1028, 1043, 1047], "debugg": [382, 387], "dec": [198, 278, 677, 883, 908, 1007], "decad": [167, 1013], "decai": [154, 544, 861, 862, 941, 992, 1006, 1039], "decal": 1047, "decemb": [79, 125, 154, 374, 664, 685, 686, 1035, 1043, 1045, 1047, 1048, 1050], "decent": [226, 253, 258, 374, 994], "deci": 268, "decid": [2, 9, 55, 58, 69, 120, 125, 249, 256, 259, 266, 374, 379, 394, 402, 408, 417, 419, 450, 457, 559, 560, 611, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 671, 681, 684, 797, 846, 847, 848, 850, 852, 854, 855, 856, 867, 991, 998, 1017, 1048, 1051], "decil": [632, 1046], "deciles_hlines_": 632, "deciles_vlines_": 632, "decim": [23, 155, 471, 472, 917, 1042, 1043], "decis": [0, 2, 6, 23, 25, 29, 32, 39, 54, 56, 58, 88, 97, 107, 108, 111, 112, 113, 114, 120, 128, 129, 130, 132, 133, 134, 138, 141, 145, 146, 151, 153, 157, 167, 179, 180, 189, 206, 207, 210, 226, 227, 229, 234, 237, 251, 262, 263, 265, 266, 276, 278, 291, 294, 299, 305, 306, 307, 310, 324, 328, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 350, 360, 365, 368, 375, 376, 379, 393, 402, 403, 406, 409, 416, 437, 469, 496, 500, 504, 519, 536, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 593, 594, 631, 632, 633, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 698, 700, 702, 703, 707, 718, 720, 726, 727, 732, 735, 739, 740, 742, 756, 782, 784, 787, 788, 789, 794, 799, 800, 803, 804, 814, 816, 822, 827, 830, 832, 833, 835, 846, 865, 884, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 986, 992, 993, 994, 995, 996, 998, 999, 1000, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1015, 1017, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "decision_funct": [7, 9, 23, 25, 54, 111, 126, 138, 209, 210, 211, 227, 236, 266, 273, 289, 290, 299, 307, 322, 336, 337, 338, 342, 343, 347, 381, 393, 406, 408, 416, 437, 469, 549, 550, 553, 555, 559, 561, 563, 567, 593, 594, 631, 632, 633, 658, 659, 666, 668, 674, 675, 676, 677, 698, 700, 702, 707, 720, 726, 727, 735, 739, 740, 742, 756, 782, 788, 789, 794, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 850, 864, 871, 901, 904, 906, 908, 909, 988, 992, 998, 999, 1006, 1007, 1026, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1052], "decision_function_shap": [315, 346, 906, 909, 1007, 1040, 1041, 1044, 1045], "decision_path": [359, 557, 558, 564, 565, 566, 912, 913, 914, 915, 1041, 1046], "decision_threshold": [253, 273], "decision_tre": [916, 917, 918, 1008], "decision_tree_learn": [912, 913, 1008], "decisionboundarydisplai": [7, 28, 29, 32, 54, 111, 126, 131, 180, 189, 206, 211, 262, 286, 291, 294, 310, 334, 335, 336, 337, 339, 340, 342, 356, 1049, 1050, 1052, 1053], "decisiontre": [118, 553, 1040], "decisiontreeclassifi": [29, 109, 111, 118, 131, 263, 278, 321, 355, 356, 359, 393, 408, 416, 553, 555, 557, 559, 561, 564, 631, 711, 806, 828, 913, 914, 916, 917, 918, 982, 993, 1008, 1036, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "decisiontreeclassifierifitteddecisiontreeclassifi": 359, "decisiontreeregressor": [110, 112, 237, 306, 315, 321, 357, 358, 384, 554, 556, 558, 559, 560, 562, 564, 565, 632, 633, 912, 915, 917, 936, 982, 993, 1008, 1036, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "decisiontreeregressorifitteddecisiontreeregressor": 317, "declan": 1047, "declar": [54, 219, 233, 361, 379, 380, 381, 385, 393, 443, 446, 447, 459, 471, 472, 478, 690, 694, 1042, 1046], "decod": [6, 296, 374, 393, 503, 569, 588, 589, 591, 1035, 1036], "decode_error": [6, 417, 503, 588, 589, 591, 1037], "decompos": [93, 97, 112, 307, 407, 534, 538, 709, 825, 941, 987, 988, 992, 1009, 1029, 1030], "decomposit": [3, 4, 8, 13, 15, 48, 56, 68, 70, 71, 72, 84, 85, 88, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 128, 134, 173, 218, 219, 221, 230, 231, 234, 235, 238, 258, 287, 292, 310, 319, 322, 351, 367, 368, 372, 385, 388, 393, 404, 405, 406, 410, 416, 449, 451, 452, 453, 462, 482, 483, 484, 495, 549, 556, 611, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 672, 673, 674, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 797, 798, 853, 860, 863, 866, 882, 913, 940, 941, 988, 989, 992, 1009, 1012, 1014, 1015, 1022, 1024, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "decompress": [402, 1035], "decor": [168, 315, 379, 380, 381, 388, 806, 823, 931, 935, 936, 953, 959, 1045, 1048, 1051, 1053], "decoupl": [416, 994], "decreas": [24, 37, 44, 53, 56, 64, 73, 125, 127, 145, 146, 157, 167, 168, 170, 205, 229, 230, 261, 266, 272, 299, 307, 310, 315, 355, 365, 367, 379, 406, 409, 416, 441, 445, 463, 521, 534, 535, 541, 557, 558, 559, 560, 561, 562, 564, 565, 566, 602, 635, 636, 637, 676, 677, 678, 706, 712, 727, 782, 789, 861, 862, 912, 913, 914, 915, 981, 983, 984, 988, 989, 992, 995, 996, 999, 1000, 1006, 1007, 1017, 1026, 1037, 1042, 1045, 1048], "dede00": [42, 60, 61], "dedic": [2, 257, 347, 377, 383, 385, 391, 394, 404, 409, 584, 672, 674, 687, 981, 988, 1012, 1019, 1043, 1052], "deduc": 5, "deduct": 996, "dedupl": 1039, "deeksha": 1047, "deem": [267, 268, 534, 1000, 1048], "deep": [197, 381, 393, 402, 416, 423, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 769, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 996, 997, 1012, 1013, 1017, 1040, 1046, 1047, 1049], "deepcopi": 381, "deeper": [350, 1008], "deepest": [561, 562, 1046], "deeplook": 1045, "deeppink": 268, "def": [2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 17, 23, 25, 31, 32, 35, 38, 39, 46, 50, 53, 54, 56, 59, 68, 73, 90, 93, 95, 96, 100, 102, 107, 109, 112, 114, 119, 121, 122, 125, 130, 152, 155, 157, 158, 162, 170, 177, 185, 186, 189, 194, 197, 198, 205, 206, 207, 215, 218, 219, 233, 234, 236, 243, 244, 245, 246, 248, 249, 253, 254, 257, 258, 259, 260, 262, 267, 270, 274, 283, 288, 290, 293, 296, 300, 302, 305, 307, 310, 311, 315, 329, 334, 338, 342, 347, 350, 351, 352, 365, 374, 379, 381, 385, 386, 391, 410, 413, 417, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 508, 509, 533, 597, 601, 610, 611, 618, 781, 877, 931, 936, 953, 992, 999, 1007, 1024], "default": [2, 11, 13, 23, 28, 40, 43, 44, 46, 53, 57, 93, 115, 142, 149, 161, 168, 176, 177, 186, 197, 198, 215, 228, 230, 236, 238, 240, 246, 253, 254, 262, 268, 273, 281, 283, 305, 309, 312, 315, 316, 320, 322, 342, 345, 346, 350, 351, 352, 355, 361, 365, 366, 373, 374, 377, 381, 382, 383, 384, 385, 386, 388, 391, 392, 393, 396, 399, 402, 406, 408, 409, 410, 413, 414, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 928, 930, 931, 933, 935, 940, 941, 942, 943, 944, 945, 946, 955, 957, 958, 960, 961, 962, 963, 965, 966, 967, 973, 976, 978, 979, 981, 982, 984, 986, 988, 991, 992, 993, 995, 996, 998, 999, 1002, 1004, 1006, 1007, 1008, 1019, 1023, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "default_bas": [42, 60], "default_rng": 262, "default_scor": 384, "default_target_attribut": 373, "default_tim": [212, 246], "defaultdict": [8, 11, 17, 23, 170, 262, 351, 352], "defazio": [658, 988], "defens": 278, "defer": 379, "defici": [989, 1006], "defin": [5, 10, 25, 32, 51, 53, 55, 64, 68, 69, 71, 84, 93, 98, 107, 109, 110, 130, 146, 149, 156, 157, 158, 168, 169, 170, 176, 198, 205, 214, 215, 226, 230, 233, 237, 239, 243, 248, 253, 259, 260, 262, 266, 268, 269, 270, 271, 273, 278, 283, 302, 305, 316, 322, 338, 342, 345, 350, 351, 365, 375, 378, 379, 380, 381, 385, 386, 388, 391, 392, 393, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 424, 425, 426, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 519, 520, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 696, 697, 699, 708, 710, 711, 716, 721, 722, 723, 724, 725, 728, 731, 738, 741, 745, 746, 748, 750, 751, 753, 754, 757, 760, 766, 781, 785, 790, 791, 792, 793, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 933, 939, 950, 952, 976, 981, 982, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1013, 1024, 1027, 1030, 1032, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "definit": [56, 79, 185, 197, 266, 283, 351, 379, 380, 381, 393, 395, 409, 411, 412, 414, 527, 529, 535, 611, 628, 692, 708, 718, 728, 758, 797, 798, 981, 984, 986, 988, 990, 992, 995, 1006, 1011, 1030, 1039, 1043, 1050], "definitelyuncertain": 1041, "deflat": [167, 412, 421, 533], "defoi": 1048, "deform": [126, 248, 347], "degener": [90, 244, 421, 440, 454, 533, 720, 988, 992, 1044, 1048, 1049], "degrad": [125, 168, 226, 305, 345, 351, 415, 778, 1000], "degre": [2, 32, 95, 111, 154, 161, 166, 167, 168, 173, 176, 181, 185, 186, 198, 201, 232, 238, 243, 244, 245, 248, 249, 259, 274, 302, 317, 318, 335, 342, 344, 414, 418, 446, 452, 498, 535, 541, 639, 640, 643, 656, 775, 797, 800, 850, 879, 883, 906, 907, 908, 909, 910, 984, 985, 987, 988, 989, 990, 992, 993, 995, 998, 999, 1002, 1005, 1007, 1026, 1038, 1044, 1048, 1049, 1052], "degrees_of_freedom_": 797, "degrees_of_freedom_prior": 797, "degrees_of_freedom_prior_": 797, "dei": 1047, "deil": [1036, 1046, 1047], "dein": 417, "dekel": [666, 667, 988], "del": [15, 385, 1047, 1048], "delai": [379, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 800, 814, 825, 826, 960, 1049, 1050, 1053], "delalleau": 1005, "delanou": 1046, "delattr": 1047, "delbert": [36, 440, 454], "deleg": [54, 385, 433, 434, 917, 1039, 1041, 1047], "delet": [70, 326, 328, 383, 384, 469, 474, 486], "delete_index": 326, "delete_indic": 326, "deleteri": 1042, "deli": 402, "deliber": 988, "delimit": [379, 998, 1050], "deliv": [43, 365, 1017], "deliveri": 383, "dell": 10, "delong": [1047, 1048], "delta": [412, 452], "delta_": 989, "delta_k": 412, "delteil": 1039, "delv": [861, 862], "demand": [121, 125, 393, 417, 800, 814, 825, 826], "demarc": 58, "demiraj": [1050, 1051], "demo": [11, 12, 16, 17, 20, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 55, 57, 58, 59, 60, 62, 65, 66, 126, 164, 170, 181, 203, 230, 246, 248, 260, 268, 310, 327, 328, 350, 351, 381, 405, 409, 417, 440, 441, 444, 446, 447, 448, 450, 451, 453, 455, 458, 502, 511, 512, 513, 541, 704, 705, 717, 719, 737, 793, 795, 865, 884, 885, 1014], "demo_param": 381, "demonstr": [5, 11, 17, 18, 19, 23, 30, 34, 38, 41, 53, 59, 66, 68, 70, 87, 109, 113, 120, 123, 143, 144, 157, 158, 164, 170, 198, 199, 233, 239, 240, 245, 249, 251, 255, 262, 265, 268, 270, 274, 276, 285, 288, 295, 304, 306, 307, 309, 312, 313, 317, 324, 326, 327, 330, 331, 336, 342, 350, 351, 352, 361, 367, 374, 375, 379, 384, 391, 399, 404, 409, 413, 416, 447, 502, 512, 520, 697, 703, 713, 742, 798, 800, 869, 900, 912, 981, 982, 986, 992, 993, 994, 995, 1002, 1005, 1008, 1011, 1014], "dem\u0161ar": 259, "den": [0, 397, 1036, 1037, 1042, 1043, 1044, 1047, 1048], "dendrit": [409, 710], "dendro": 170, "dendro_idx": 170, "dendrogram": [34, 65, 66, 164, 170, 359, 409, 441, 445, 504, 1014, 1047], "denero": 735, "deng": [1039, 1040, 1041], "dengemann": 1036, "dengyong": 900, "deni": [100, 1037, 1038, 1042, 1043, 1044, 1050, 1051], "denni": 1049, "denois": [1, 14, 30, 46, 48, 49, 51, 92, 98, 102, 104, 164, 414, 496, 535, 537, 541, 584, 587, 830, 874, 1014], "denomin": [266, 416, 417, 422, 475, 590, 704, 757, 986], "denot": [144, 388, 393, 396, 406, 409, 413, 416, 588, 589, 591, 800, 806, 814, 823, 877, 878, 977, 981, 984, 988, 990, 992, 993, 1002, 1005, 1019, 1052], "dens": [10, 12, 53, 164, 175, 181, 191, 216, 319, 320, 329, 365, 388, 393, 409, 414, 416, 418, 443, 446, 447, 449, 464, 467, 496, 523, 524, 527, 534, 535, 544, 566, 607, 608, 629, 630, 652, 657, 658, 659, 666, 667, 668, 672, 673, 676, 677, 678, 687, 688, 689, 692, 693, 760, 761, 767, 779, 792, 861, 862, 869, 876, 877, 879, 881, 882, 883, 884, 893, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 942, 963, 966, 982, 985, 988, 989, 992, 993, 995, 998, 1002, 1004, 1005, 1006, 1007, 1008, 1014, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "dense_lasso": 183, "dense_output": [761, 767, 897, 942, 1043], "denser": 444, "densif": 1044, "densifi": [393, 658, 659, 666, 667, 668, 676, 677, 678, 904, 982, 1037], "densiti": [9, 47, 53, 58, 63, 73, 102, 144, 146, 152, 164, 183, 197, 198, 212, 215, 222, 226, 230, 242, 243, 244, 249, 250, 259, 265, 278, 284, 289, 290, 297, 305, 310, 338, 350, 374, 376, 388, 393, 409, 416, 420, 428, 444, 446, 448, 450, 452, 464, 467, 498, 502, 536, 541, 549, 550, 797, 798, 800, 844, 845, 849, 850, 897, 986, 988, 991, 995, 997, 998, 1004, 1012, 1014, 1015, 1019, 1029, 1030, 1037, 1039, 1043, 1044, 1050, 1051], "density_": 897, "densityestim": 428, "denton": 1037, "deodhar": 1047, "deoli": 1048, "depart": [157, 409], "depedend": 1052, "depend": [2, 3, 5, 11, 25, 35, 51, 73, 97, 115, 119, 122, 123, 125, 127, 130, 141, 145, 155, 161, 164, 165, 167, 170, 171, 173, 177, 181, 215, 219, 225, 226, 232, 236, 241, 248, 253, 259, 260, 264, 265, 266, 273, 283, 300, 305, 310, 317, 320, 335, 342, 345, 351, 352, 361, 365, 366, 367, 372, 379, 381, 382, 387, 388, 391, 392, 393, 394, 395, 396, 401, 402, 404, 407, 409, 411, 413, 414, 416, 417, 418, 419, 420, 438, 439, 440, 444, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 464, 469, 484, 489, 490, 491, 493, 496, 500, 501, 502, 504, 505, 510, 534, 535, 541, 544, 551, 559, 560, 562, 588, 589, 590, 591, 602, 604, 607, 608, 611, 627, 632, 633, 638, 640, 648, 658, 659, 669, 671, 673, 676, 677, 678, 680, 687, 690, 691, 694, 695, 711, 729, 730, 738, 778, 781, 783, 784, 787, 792, 793, 797, 798, 819, 829, 846, 847, 848, 850, 852, 853, 854, 855, 856, 862, 863, 865, 877, 878, 881, 884, 898, 905, 906, 909, 913, 922, 981, 982, 984, 985, 986, 988, 989, 991, 992, 994, 995, 996, 997, 1000, 1004, 1006, 1007, 1008, 1014, 1019, 1026, 1028, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052], "dependen": 345, "depict": [109, 261, 416, 991], "deploi": [253, 365, 395, 402, 408, 1013, 1017], "deploy": [387, 402, 1012, 1013, 1017], "depot": 10, "deprec": [318, 366, 368, 381, 382, 383, 388, 393, 399, 441, 445, 446, 447, 450, 457, 459, 482, 483, 484, 485, 527, 536, 537, 538, 539, 540, 546, 553, 569, 570, 579, 580, 582, 627, 658, 659, 673, 675, 676, 677, 692, 709, 742, 750, 751, 778, 779, 780, 782, 800, 803, 804, 814, 825, 826, 827, 828, 851, 863, 864, 869, 906, 909, 920, 935, 936, 981, 982, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "deprecationwarn": 1045, "dept": 376, "depth": [2, 114, 119, 123, 126, 131, 278, 355, 357, 358, 359, 365, 377, 379, 383, 392, 416, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 844, 845, 849, 912, 913, 914, 915, 916, 918, 946, 997, 998, 1008, 1037, 1038, 1046], "der": [692, 696, 989, 1038, 1039, 1043], "derek": 1043, "deriv": [2, 17, 102, 103, 121, 154, 157, 169, 185, 186, 190, 198, 366, 374, 381, 411, 413, 415, 416, 417, 419, 421, 441, 445, 446, 465, 533, 606, 617, 622, 648, 669, 676, 680, 861, 862, 877, 883, 904, 905, 986, 988, 989, 992, 996, 998, 1007, 1035, 1036, 1037, 1042, 1043, 1044, 1050], "deros": 1046, "derouich": 1035, "desai": [1042, 1044, 1047, 1048, 1050, 1051], "desalvo": 981, "descamp": 1043, "descend": [118, 627, 1045], "descent": [5, 12, 120, 164, 175, 182, 185, 204, 216, 226, 231, 289, 318, 336, 337, 414, 416, 471, 472, 478, 488, 496, 503, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 571, 631, 639, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 677, 678, 681, 682, 683, 684, 687, 694, 830, 861, 862, 865, 904, 908, 966, 989, 996, 998, 1007, 1014, 1015, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1044, 1046, 1048, 1049, 1050], "descr": [146, 372, 373, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 1025, 1043], "describ": [2, 11, 54, 130, 146, 167, 215, 231, 259, 268, 361, 365, 366, 372, 374, 376, 378, 379, 381, 384, 387, 393, 394, 405, 409, 411, 412, 413, 414, 416, 417, 462, 469, 473, 474, 491, 493, 495, 496, 497, 500, 501, 502, 503, 504, 505, 510, 516, 517, 518, 528, 607, 608, 645, 659, 668, 714, 797, 798, 839, 841, 879, 941, 981, 984, 987, 988, 991, 992, 994, 998, 1006, 1007, 1008, 1016, 1019, 1025, 1026, 1043, 1045], "descript": [11, 146, 167, 311, 372, 373, 378, 379, 383, 384, 387, 393, 409, 417, 452, 462, 464, 467, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 544, 630, 676, 762, 765, 778, 992, 1006, 1007, 1013, 1016, 1028, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "descriptor": [393, 508, 509], "deseri": 402, "deserv": [379, 385], "deshmukh": 1048, "deshpand": [1040, 1041], "design": [0, 12, 18, 78, 109, 130, 152, 166, 167, 178, 233, 248, 253, 305, 311, 359, 367, 373, 379, 384, 391, 392, 393, 394, 395, 402, 409, 416, 418, 515, 528, 632, 633, 648, 665, 669, 676, 680, 685, 800, 818, 819, 839, 841, 982, 988, 989, 992, 993, 1002, 1012, 1013, 1017, 1021, 1037, 1044, 1053], "desir": [9, 22, 111, 146, 162, 197, 199, 305, 309, 372, 379, 381, 383, 387, 402, 405, 409, 412, 413, 414, 418, 503, 538, 540, 544, 547, 567, 593, 602, 603, 664, 670, 685, 686, 699, 708, 736, 844, 845, 849, 864, 869, 871, 874, 875, 877, 878, 880, 881, 885, 888, 890, 892, 893, 928, 961, 984, 986, 989, 995, 1002, 1006, 1007, 1008, 1019, 1035, 1043, 1044, 1045, 1048], "desislava": 1049, "desktop": 377, "despit": [25, 84, 195, 197, 215, 232, 292, 393, 399, 411, 627, 628, 630, 988, 995, 1017, 1043, 1044], "dessyvv": 1049, "dest": 320, "destin": 1017, "destroi": [265, 417, 795, 873, 1002], "det": [164, 239, 251, 268, 269, 276, 379, 411, 515, 564, 698, 702, 727, 789, 830, 865, 884, 904, 939, 1014, 1047], "det_curv": [256, 698, 782, 789, 992, 1047, 1048, 1053], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "detcurvedisplai": [256, 318, 727, 1047, 1048, 1052, 1053], "detect": [1, 6, 8, 14, 18, 32, 61, 63, 78, 79, 80, 116, 119, 126, 164, 178, 201, 211, 225, 239, 241, 251, 253, 259, 262, 268, 269, 276, 284, 297, 305, 311, 337, 374, 377, 379, 383, 391, 393, 406, 407, 408, 409, 411, 413, 417, 431, 446, 449, 464, 466, 469, 470, 473, 474, 475, 476, 488, 489, 491, 492, 496, 510, 512, 515, 522, 537, 538, 539, 546, 563, 564, 588, 591, 596, 631, 639, 677, 698, 702, 727, 789, 830, 850, 854, 865, 874, 877, 878, 882, 883, 884, 904, 908, 984, 988, 1012, 1013, 1014, 1015, 1017, 1023, 1028, 1029, 1030, 1035, 1038, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1051], "detection_error_tradeoff": 992, "detector": [374, 393, 850], "determin": [7, 9, 12, 17, 44, 53, 78, 109, 111, 115, 125, 144, 154, 167, 176, 177, 193, 200, 259, 305, 310, 342, 352, 359, 361, 378, 379, 381, 388, 392, 393, 405, 406, 409, 413, 414, 416, 417, 418, 419, 432, 437, 441, 442, 443, 445, 447, 449, 450, 456, 459, 460, 461, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 492, 495, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 537, 539, 542, 543, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 582, 583, 584, 588, 591, 594, 602, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 687, 689, 690, 692, 693, 694, 707, 711, 723, 729, 730, 738, 783, 784, 785, 787, 788, 793, 800, 802, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 837, 838, 840, 847, 849, 850, 855, 860, 861, 862, 868, 869, 877, 878, 879, 881, 885, 893, 904, 905, 907, 910, 913, 915, 918, 939, 955, 961, 963, 966, 981, 984, 986, 991, 995, 997, 998, 1000, 1002, 1005, 1006, 1008, 1019, 1035, 1040, 1043, 1044, 1046, 1047, 1048], "determinist": [56, 122, 366, 375, 381, 393, 409, 443, 447, 449, 451, 452, 453, 458, 459, 462, 551, 559, 560, 564, 565, 583, 584, 691, 695, 811, 812, 860, 912, 913, 984, 988, 1036, 1039, 1041, 1043, 1044, 1047, 1050, 1051], "detlefsen": 1049, "detomaso": 1042, "detriment": [5, 145, 273, 366, 418, 988], "dev": [158, 167, 215, 264, 269, 377, 379, 383, 385, 387, 992, 1017, 1031, 1042, 1047, 1050, 1051], "dev0": [377, 383, 1016, 1031], "dev514": 1049, "devansh": [1042, 1043], "devanshkyada27": 1052, "devashish": 1041, "devel": 377, "develop": [6, 25, 54, 106, 157, 215, 253, 257, 259, 278, 283, 315, 321, 350, 365, 368, 374, 378, 379, 385, 391, 393, 394, 395, 399, 402, 405, 407, 411, 412, 416, 417, 423, 426, 433, 493, 800, 976, 988, 992, 995, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1026, 1035, 1043, 1044, 1045, 1050, 1053, 1054], "developing_estim": [106, 1014], "devi": 1047, "devianc": [121, 124, 197, 215, 321, 416, 553, 558, 559, 561, 562, 565, 648, 669, 680, 721, 723, 724, 747, 749, 752, 913, 915, 988, 1008, 1036, 1045, 1046, 1048, 1049, 1051], "deviant": [203, 998], "deviat": [11, 18, 32, 59, 78, 112, 115, 116, 117, 118, 120, 146, 149, 154, 156, 158, 167, 176, 203, 236, 256, 257, 258, 259, 260, 262, 289, 290, 305, 310, 371, 375, 376, 384, 388, 393, 413, 416, 419, 450, 472, 501, 511, 512, 513, 514, 516, 517, 518, 522, 524, 525, 530, 552, 594, 611, 634, 644, 645, 671, 724, 752, 806, 823, 850, 873, 874, 884, 893, 894, 895, 988, 992, 998, 1002, 1026, 1041, 1042, 1043, 1046, 1047, 1048], "devic": [413, 582, 1012], "devnani": 1047, "deweight": 943, "dexter": 1045, "dezub": 1042, "df": [2, 11, 23, 25, 125, 130, 166, 168, 176, 181, 197, 215, 248, 259, 309, 311, 322, 351, 384, 417, 590, 591, 981, 982, 1052], "df_": 215, "df_freq": 215, "df_max_": [23, 25], "df_min_": [23, 25], "df_out": 322, "df_sev": 215, "df_std": 351, "df_test": [197, 215], "df_train": [197, 215], "dfrac": [996, 1002], "dgemm": 365, "dgesdd": 385, "dhanshre": 1050, "dhillon": [17, 405, 451, 453, 511], "dhingra": [1043, 1044, 1047, 1052], "di": [393, 409, 414, 531, 537, 664, 685, 686, 897, 1039, 1048], "dia": 1052, "diabet": [5, 123, 133, 135, 139, 145, 146, 162, 164, 184, 185, 186, 193, 194, 254, 255, 264, 272, 372, 416, 501, 652, 653, 800, 805, 825, 826, 827, 1000, 1014, 1019, 1023, 1030], "diabetes_i": [193, 1026], "diabetes_x": [193, 1026], "diabetes_x_test": [193, 1026], "diabetes_x_train": [193, 1026], "diabetes_y_pr": 193, "diabetes_y_test": [193, 1026], "diabetes_y_train": [193, 1026], "diadochokinet": 1050, "diag": [10, 80, 157, 245, 248, 414, 419, 532, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 797, 798, 988, 1050], "diag_kind": [166, 167], "diagnos": [146, 262, 376, 387, 395, 410], "diagnosi": [146, 262, 376, 851], "diagnost": [146, 170, 262, 372, 393, 408, 500, 712, 826, 827, 992, 1000, 1012, 1013, 1030], "diagon": [2, 23, 25, 38, 80, 83, 215, 236, 245, 248, 249, 252, 338, 405, 409, 411, 419, 453, 471, 472, 478, 481, 511, 513, 527, 532, 550, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 650, 651, 654, 655, 656, 682, 683, 701, 715, 792, 797, 798, 848, 856, 984, 986, 988, 991, 992, 995, 1002, 1041, 1043, 1044, 1045], "diagram": [23, 25, 69, 238, 316, 322, 381, 406, 409, 438, 439, 468, 902, 1002, 1046, 1047, 1052, 1053], "diamet": 409, "diamond": 246, "diaz": 1043, "dice": [450, 457, 699, 778, 779, 780, 995], "dicedist": 699, "dichotomis": 1008, "dickerson": 1036, "dickson": 1042, "dico": 96, "dict": [7, 8, 9, 10, 15, 24, 37, 43, 68, 71, 72, 99, 115, 120, 122, 124, 195, 203, 226, 235, 245, 257, 258, 260, 263, 266, 268, 283, 287, 307, 311, 319, 329, 338, 342, 351, 352, 367, 371, 373, 381, 391, 393, 410, 413, 420, 421, 423, 427, 431, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 711, 713, 762, 765, 771, 779, 780, 797, 798, 799, 800, 803, 804, 806, 811, 812, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 929, 930, 946, 949, 952, 981, 992, 1002, 1023, 1024, 1028, 1030, 1035, 1041, 1042, 1051, 1052, 1053], "dict_count_vector": 352, "dict_init": [531, 537, 545, 546], "dict_kei": 626, "dict_learn": [388, 531, 537, 546, 1036, 1043, 1045, 1048, 1049, 1051], "dict_learning_onlin": [545, 1036, 1045, 1048, 1049, 1052], "dict_pos_code_estim": 93, "dict_pos_dict_estim": 93, "dict_pos_estim": 93, "dict_typ": 581, "dictat": 409, "dictionari": [3, 4, 5, 6, 34, 46, 49, 51, 66, 92, 94, 104, 117, 125, 127, 164, 196, 233, 235, 253, 351, 352, 372, 373, 374, 381, 391, 393, 417, 449, 464, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 526, 531, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 567, 568, 569, 570, 581, 582, 584, 587, 588, 589, 594, 632, 633, 634, 664, 685, 686, 701, 711, 713, 800, 803, 804, 811, 812, 814, 822, 827, 863, 868, 877, 912, 913, 914, 915, 919, 929, 949, 952, 981, 988, 992, 1007, 1014, 1019, 1028, 1029, 1030, 1035, 1043, 1046, 1047, 1048, 1049, 1050], "dictionarylearn": [414, 537, 539, 540, 542, 543, 544, 545, 546, 1036, 1040, 1042, 1045, 1048, 1049, 1050, 1051], "dictlearn": 1040, "dictvector": [17, 68, 164, 329, 349, 350, 351, 353, 374, 417, 488, 582, 588, 589, 590, 591, 877, 1014, 1035, 1036, 1039, 1045, 1047, 1048, 1051, 1052], "did": [122, 149, 167, 170, 197, 205, 215, 244, 253, 312, 374, 402, 627, 712, 819, 906, 1027, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "didact": [379, 1013], "didi": [1041, 1042, 1043, 1044], "didn": [233, 361, 393, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "die": 989, "diebold": 259, "diederik": [861, 862, 996, 1050], "diederikwp": 1050, "diego": [1036, 1037], "diegodlh": [1042, 1043], "diemert": [5, 6, 8, 1017, 1037, 1038], "diesel": [197, 215], "dietterich": [259, 834, 993], "diff": [382, 992], "diff_embed": 293, "differ": [2, 3, 5, 8, 10, 12, 13, 18, 19, 22, 25, 28, 29, 32, 34, 35, 37, 39, 40, 41, 43, 44, 45, 47, 50, 51, 53, 55, 56, 58, 62, 63, 64, 65, 66, 68, 69, 70, 72, 78, 83, 84, 88, 89, 90, 93, 95, 96, 98, 100, 101, 102, 109, 112, 114, 115, 118, 119, 120, 122, 124, 125, 126, 130, 131, 132, 133, 136, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 167, 169, 173, 176, 177, 180, 183, 184, 185, 186, 188, 194, 197, 198, 199, 201, 202, 203, 204, 205, 214, 215, 218, 219, 220, 221, 223, 226, 228, 231, 232, 233, 236, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 273, 274, 275, 278, 281, 283, 286, 289, 290, 292, 299, 300, 304, 306, 307, 309, 310, 313, 315, 330, 333, 334, 336, 337, 338, 340, 341, 345, 346, 348, 350, 351, 352, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 382, 384, 386, 388, 392, 393, 396, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 434, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 462, 464, 475, 478, 490, 493, 494, 496, 503, 504, 508, 509, 512, 514, 522, 537, 538, 539, 540, 546, 547, 549, 550, 555, 556, 563, 581, 582, 588, 589, 590, 591, 594, 611, 613, 614, 615, 619, 622, 623, 627, 631, 632, 633, 634, 638, 643, 644, 645, 647, 649, 651, 653, 655, 658, 661, 666, 667, 668, 672, 674, 676, 677, 678, 680, 690, 692, 694, 698, 700, 701, 704, 705, 706, 707, 709, 715, 717, 718, 727, 728, 729, 730, 731, 734, 735, 737, 743, 757, 758, 759, 761, 778, 782, 783, 784, 786, 787, 789, 792, 793, 795, 798, 800, 802, 803, 804, 805, 806, 809, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 827, 828, 831, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 854, 857, 860, 864, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 909, 912, 913, 914, 915, 949, 956, 981, 982, 984, 985, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1019, 1021, 1022, 1023, 1027, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "difference_plot": 264, "differenti": [88, 266, 416, 419, 559, 560, 619, 622], "difficult": [53, 109, 167, 205, 236, 379, 387, 406, 414, 416, 553, 554, 559, 561, 562, 987, 989, 991, 995, 997, 999, 1008, 1017, 1035, 1049], "difficulti": [7, 25, 215, 305, 367, 379, 406, 861, 862, 991, 995], "diffus": 154, "digest": [379, 1050], "digg": [1017, 1042], "digicosm": 0, "digit": [3, 10, 11, 27, 33, 34, 36, 37, 39, 41, 43, 44, 46, 47, 49, 51, 55, 57, 58, 59, 60, 66, 70, 71, 83, 86, 91, 96, 114, 135, 139, 144, 146, 164, 187, 188, 204, 212, 213, 217, 218, 220, 222, 224, 230, 231, 235, 246, 252, 257, 258, 261, 287, 292, 293, 298, 300, 301, 303, 321, 324, 327, 331, 351, 372, 379, 385, 409, 415, 416, 418, 441, 445, 447, 502, 541, 544, 549, 566, 658, 688, 689, 690, 691, 692, 697, 704, 705, 713, 717, 718, 737, 793, 795, 830, 846, 853, 860, 864, 865, 874, 884, 890, 897, 900, 909, 916, 917, 918, 981, 987, 989, 992, 995, 997, 1005, 1014, 1019, 1023, 1026, 1027, 1030, 1039], "digraph": 916, "dijkstra": [388, 688, 989], "dilemma": 987, "dillon": [1043, 1044, 1045], "dilut": [170, 376], "dilutedsauc": 1043, "dim": [206, 230, 291, 292, 294, 334, 335, 527, 699, 1052], "dim_reduction_method": 292, "dimens": [7, 10, 11, 13, 35, 38, 51, 80, 83, 88, 93, 146, 151, 153, 155, 157, 168, 180, 181, 195, 220, 222, 226, 230, 231, 237, 244, 245, 287, 288, 292, 308, 342, 350, 351, 352, 374, 376, 380, 393, 407, 409, 414, 415, 419, 421, 442, 443, 445, 447, 448, 449, 452, 464, 465, 482, 483, 484, 493, 494, 515, 524, 525, 529, 530, 533, 541, 549, 582, 583, 584, 585, 587, 589, 597, 611, 619, 622, 641, 644, 659, 690, 691, 692, 694, 695, 699, 764, 825, 844, 845, 849, 863, 896, 897, 898, 906, 907, 908, 909, 910, 924, 925, 926, 955, 963, 966, 982, 984, 986, 988, 989, 990, 993, 995, 996, 998, 1004, 1007, 1019, 1026, 1027, 1042, 1044, 1045, 1047], "dimension": [4, 7, 8, 17, 29, 31, 38, 42, 52, 53, 55, 56, 60, 67, 69, 71, 72, 74, 83, 84, 90, 93, 97, 100, 101, 109, 114, 128, 137, 138, 146, 149, 151, 152, 156, 164, 181, 193, 198, 214, 217, 219, 220, 222, 224, 226, 230, 231, 234, 244, 245, 284, 287, 291, 293, 297, 307, 335, 342, 350, 361, 365, 371, 374, 375, 376, 379, 388, 393, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 445, 447, 449, 465, 469, 473, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 504, 505, 510, 515, 519, 532, 534, 535, 538, 539, 540, 541, 544, 547, 549, 563, 566, 573, 599, 607, 631, 640, 641, 642, 652, 688, 689, 690, 691, 692, 693, 694, 696, 699, 710, 725, 797, 798, 800, 830, 844, 845, 846, 849, 852, 853, 860, 864, 865, 868, 874, 879, 884, 896, 897, 898, 904, 908, 941, 978, 983, 984, 987, 988, 993, 994, 998, 1004, 1005, 1006, 1007, 1008, 1014, 1015, 1017, 1019, 1020, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1047, 1050, 1051], "dimensionalityreduct": 376, "diminish": 417, "dimitri": [1048, 1049, 1050, 1051, 1052], "dimmick": 376, "dingwal": 1042, "dionisi": 1049, "diop": 1045, "direct": [10, 83, 84, 93, 95, 101, 146, 203, 243, 249, 256, 292, 302, 310, 338, 343, 377, 379, 380, 383, 387, 394, 396, 409, 412, 414, 417, 418, 452, 462, 471, 472, 478, 534, 541, 549, 588, 589, 591, 602, 641, 688, 853, 986, 987, 988, 993, 995, 997, 1013, 1027, 1035, 1038], "direction": 1053, "direction_vector": 302, "directli": [0, 4, 17, 25, 43, 44, 54, 69, 114, 119, 146, 157, 181, 185, 197, 203, 215, 227, 264, 302, 305, 319, 322, 352, 361, 365, 377, 379, 380, 381, 383, 385, 392, 393, 394, 404, 405, 406, 409, 410, 411, 412, 413, 417, 419, 442, 452, 462, 464, 469, 474, 527, 567, 568, 569, 570, 597, 611, 620, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 664, 677, 681, 684, 690, 774, 778, 781, 792, 793, 800, 803, 804, 814, 828, 847, 849, 863, 864, 865, 871, 881, 883, 886, 893, 960, 981, 988, 990, 995, 997, 999, 1002, 1007, 1008, 1013, 1020, 1023, 1024, 1035, 1043, 1044, 1046, 1047, 1048, 1051, 1052], "director": 1017, "directori": [0, 6, 285, 373, 377, 379, 381, 385, 387, 393, 396, 410, 441, 445, 450, 486, 499, 864, 865, 1049], "direr": [1038, 1039, 1042, 1043], "dirichlet": [1, 4, 14, 164, 223, 243, 244, 249, 254, 319, 417, 488, 536, 538, 540, 588, 591, 797, 1012, 1014, 1029, 1030, 1035, 1040, 1041], "dirichlet_distribut": [243, 797, 991, 1041], "dirichlet_process": [243, 249, 797, 991, 1041], "disabl": [113, 233, 253, 312, 322, 350, 377, 379, 399, 417, 449, 460, 468, 537, 538, 539, 546, 559, 560, 561, 562, 863, 881, 893, 902, 924, 925, 1002, 1041, 1044, 1048, 1050, 1053], "disadvantag": [414, 419, 988, 989, 996, 1006, 1007, 1008], "disagre": [735, 999], "disambigu": [379, 832, 901, 1005, 1050], "disappear": [988, 1035], "disappoint": 2, "discard": [6, 53, 178, 262, 365, 405, 411, 418, 508, 509, 549, 597, 627, 630, 644, 877, 881, 893, 982, 988, 1043, 1047, 1053], "disclaim": 1012, "disclos": 392, "disconnect": 1048, "discontinu": [2, 391], "discord": [705, 1016], "discount": [374, 409, 726, 756, 1042, 1045], "discounted_cumulative_gain": 726, "discourag": [201, 391, 396, 689], "discov": [351, 407, 409, 414, 417, 420, 444, 448, 1019, 1050, 1053], "discoveri": [259, 374, 385, 388, 409, 416, 418, 420, 444, 511, 555, 556, 563, 592, 595, 596, 598, 599, 600, 606, 720, 740, 783, 992, 1004, 1017, 1049, 1050], "discrep": [417, 1028, 1039], "discret": [2, 6, 29, 44, 54, 73, 90, 102, 107, 109, 128, 148, 159, 164, 168, 177, 197, 215, 233, 237, 278, 293, 299, 304, 308, 313, 330, 357, 367, 371, 374, 375, 383, 392, 393, 409, 414, 417, 419, 438, 439, 448, 452, 460, 461, 462, 492, 514, 515, 522, 553, 559, 571, 588, 589, 592, 595, 596, 599, 600, 607, 608, 610, 611, 612, 616, 617, 618, 657, 658, 742, 800, 811, 822, 830, 839, 840, 843, 865, 869, 877, 878, 881, 884, 893, 904, 909, 913, 955, 981, 988, 989, 990, 992, 993, 995, 1008, 1012, 1014, 1019, 1030, 1037, 1040, 1048, 1049, 1050], "discrete_featur": [607, 608], "discrim": 197, "discrimin": [7, 8, 13, 27, 33, 76, 77, 78, 79, 80, 101, 141, 143, 146, 164, 173, 212, 219, 234, 248, 292, 368, 376, 406, 416, 475, 512, 549, 550, 566, 631, 783, 853, 981, 989, 992, 995, 1006, 1008, 1014, 1015, 1026, 1030, 1038], "discriminant_analysi": [29, 31, 32, 101, 219, 292, 361, 368, 404, 536, 853, 986, 993, 1035, 1038, 1039, 1040, 1041, 1042], "discriminatori": 406, "discuss": [2, 51, 56, 146, 167, 186, 218, 223, 253, 262, 278, 350, 361, 367, 374, 376, 379, 384, 385, 387, 391, 393, 394, 408, 409, 411, 415, 416, 419, 498, 682, 683, 846, 847, 852, 854, 855, 982, 986, 988, 989, 992, 995, 1002, 1009, 1013, 1016, 1038], "diseas": [5, 133, 146, 162, 262, 376, 712, 992, 1026], "disentangl": 989, "disjoint": [406, 409, 410, 437, 704, 731, 755, 757, 989], "disk": [4, 12, 374, 379, 384, 393, 402, 1024], "disp": [2, 28, 30, 111, 125, 126, 127, 252, 262, 275, 286, 310, 316, 322, 335, 340, 438, 631, 697, 700, 701, 853], "disp1": 632, "disp2": 632, "dispar": [690, 694, 989], "dispatch": [69, 253, 368, 393, 404, 468, 800, 814, 825, 826, 827, 902, 958, 959, 1023, 1030, 1050], "dispatch_next": 958, "dispatch_one_batch": 958, "dispers": [32, 273, 409, 710, 725, 988], "displai": [10, 23, 25, 32, 35, 44, 46, 58, 69, 79, 80, 83, 84, 87, 93, 115, 126, 127, 130, 161, 164, 167, 168, 182, 184, 215, 225, 226, 236, 239, 240, 241, 247, 253, 256, 260, 261, 266, 268, 269, 274, 293, 311, 316, 317, 337, 356, 365, 379, 381, 382, 386, 388, 396, 407, 410, 414, 417, 418, 423, 438, 464, 467, 468, 496, 541, 564, 630, 631, 632, 658, 687, 697, 698, 700, 701, 702, 713, 718, 782, 789, 800, 806, 814, 823, 830, 864, 865, 877, 879, 884, 902, 909, 916, 917, 918, 932, 958, 979, 992, 996, 1012, 1014, 1030, 1044, 1046, 1047, 1049, 1050], "display_label": [4, 252, 697, 1024, 1047], "dispos": [981, 1028], "disproportion": 415, "disput": 115, "disregard": [350, 393, 417, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 722, 723, 724, 785, 837, 838, 847, 855, 862, 873, 874, 880, 881, 884, 889, 892, 893, 895, 905, 907, 910, 913, 915, 992, 1043], "disrupt": [366, 377], "dissemin": 1012, "dissimilar": [221, 342, 393, 405, 452, 690, 694, 989, 1041, 1051], "dissimilarity_matrix_": 690, "dist": [78, 219, 230, 383, 469, 470, 471, 472, 473, 474, 475, 476, 699, 763, 769, 844, 845], "dist_": [469, 474], "dist_embed": 293, "dist_linkag": 170, "dist_matrix": 452, "dist_matrix_": 688, "distanc": [7, 37, 38, 53, 55, 58, 59, 63, 65, 75, 79, 81, 98, 100, 146, 161, 164, 170, 183, 198, 200, 218, 220, 223, 230, 236, 283, 285, 286, 291, 293, 295, 296, 305, 310, 315, 319, 320, 342, 350, 351, 365, 376, 388, 391, 393, 405, 409, 411, 414, 415, 419, 420, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 458, 459, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 538, 540, 547, 607, 608, 615, 619, 620, 622, 623, 628, 658, 659, 666, 668, 674, 675, 676, 677, 678, 688, 689, 690, 692, 693, 694, 695, 696, 699, 703, 725, 734, 758, 760, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 778, 779, 780, 781, 792, 793, 796, 833, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 883, 898, 902, 904, 906, 908, 909, 910, 912, 913, 914, 915, 982, 986, 989, 990, 992, 995, 998, 1002, 1004, 1006, 1007, 1013, 1014, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "distance_matrix": 170, "distance_metr": [778, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858], "distance_threshold": [39, 441, 445, 1044, 1047], "distancemetr": [393, 415, 847, 995, 1043, 1047, 1048, 1049, 1052], "distancemetric64": [844, 845], "distances_": [39, 441, 445, 1047], "distant": [409, 692, 709, 995], "distil": 223, "distinct": [58, 259, 327, 350, 352, 374, 381, 384, 393, 394, 413, 416, 417, 589, 801, 810, 818, 878, 879, 899, 900, 981, 988, 995, 998, 1028, 1043], "distinguish": [2, 18, 38, 78, 90, 98, 199, 256, 278, 374, 381, 393, 394, 419, 981, 992, 995, 998], "distort": [196, 230, 376, 406, 407, 881, 893, 898, 989, 1002, 1004], "distribut": [1, 2, 6, 7, 8, 11, 14, 18, 25, 32, 35, 37, 42, 50, 51, 53, 55, 60, 73, 77, 78, 79, 84, 90, 109, 111, 122, 126, 141, 146, 149, 158, 164, 166, 167, 170, 173, 176, 197, 199, 201, 220, 222, 226, 230, 236, 243, 248, 249, 253, 255, 259, 265, 267, 273, 278, 284, 288, 297, 304, 305, 307, 310, 313, 321, 325, 326, 343, 345, 350, 365, 366, 372, 375, 376, 377, 379, 380, 383, 384, 385, 393, 406, 407, 409, 411, 413, 414, 415, 421, 447, 449, 469, 470, 471, 472, 473, 474, 475, 476, 488, 498, 503, 515, 516, 517, 518, 519, 523, 532, 533, 536, 550, 551, 552, 563, 611, 625, 640, 642, 644, 645, 648, 658, 659, 669, 679, 680, 688, 689, 690, 692, 706, 708, 724, 752, 789, 797, 798, 804, 805, 812, 814, 818, 819, 830, 840, 843, 849, 853, 860, 867, 880, 881, 882, 883, 884, 892, 893, 894, 899, 900, 908, 919, 943, 960, 981, 986, 988, 990, 991, 992, 994, 995, 997, 998, 1004, 1005, 1010, 1012, 1013, 1014, 1019, 1023, 1027, 1029, 1030, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "district": [162, 374], "distutils_use_sdk": 377, "ditenberg": 1042, "div": [236, 937], "dive": [84, 379, 385], "diverg": [13, 121, 218, 223, 288, 538, 540, 547, 692, 860, 989, 991, 992, 997, 999, 1042, 1043, 1048], "divers": [393, 416], "divid": [35, 41, 46, 89, 93, 143, 154, 197, 236, 243, 351, 361, 375, 376, 405, 408, 409, 413, 414, 416, 469, 470, 471, 472, 473, 474, 475, 476, 512, 519, 534, 541, 676, 677, 678, 719, 726, 734, 738, 756, 794, 796, 861, 862, 906, 909, 941, 944, 945, 981, 989, 991, 992, 995, 1002, 1006, 1028, 1035, 1042, 1043, 1046], "dividend": 992, "divis": [319, 409, 417, 590, 591, 594, 712, 713, 729, 730, 738, 746, 783, 784, 787, 992, 1027, 1039, 1043, 1044, 1047, 1051, 1052], "divisor": 992, "divo": 1045, "divyanshu": 1048, "divyaprabha": 1046, "diwakar": 1049, "dixon": [769, 1045, 1046], "dizietasahi": 1045, "di\u1ec5n": 1050, "djipei": [1040, 1041], "dl": 676, "dlabal": 1039, "dll": 1049, "dlovel": 1043, "dmallia17": 1048, "dmitri": [1040, 1042, 1043, 1044, 1048, 1051, 1052], "dmitrij": 1039, "dmytro": 1048, "dn": [0, 995], "dna": [391, 628, 982], "dnf": 396, "do": [0, 2, 8, 11, 23, 25, 40, 53, 59, 65, 72, 88, 97, 99, 102, 113, 116, 118, 122, 123, 125, 130, 143, 154, 161, 167, 168, 169, 194, 197, 201, 215, 218, 220, 233, 234, 236, 249, 253, 254, 257, 260, 262, 281, 283, 285, 289, 318, 322, 330, 335, 338, 342, 343, 345, 350, 351, 352, 359, 361, 365, 366, 367, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 393, 394, 402, 406, 407, 409, 410, 411, 412, 413, 416, 417, 418, 428, 450, 461, 464, 467, 503, 536, 538, 542, 544, 552, 555, 581, 582, 588, 589, 591, 632, 633, 645, 646, 652, 655, 656, 658, 659, 666, 668, 676, 737, 763, 778, 782, 817, 820, 836, 837, 841, 868, 869, 871, 878, 882, 884, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 923, 966, 981, 984, 986, 988, 989, 992, 993, 995, 996, 1000, 1002, 1007, 1008, 1012, 1013, 1016, 1017, 1019, 1026, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "do_early_stopping_": [561, 562], "doc": [0, 2, 6, 11, 17, 350, 352, 366, 379, 383, 384, 387, 393, 396, 401, 417, 588, 589, 591, 778, 781, 792, 793, 827, 1028, 1035, 1039, 1049], "doc_it": 6, "doc_topic_distr": [536, 1042], "doc_topic_prior": [414, 536], "doc_topic_prior_": 536, "docker": [387, 402, 1048, 1049], "dock\u00e8": [1044, 1045, 1046, 1052, 1053], "docs_new": 1028, "docs_test": 1028, "docstr": [379, 381, 385, 393, 448, 461, 472, 699, 701, 931, 981, 992, 995, 996, 1006, 1035, 1042, 1043, 1048, 1049, 1052], "doctest": [379, 393, 1020, 1035], "doctest_mod": 1020, "document": [1, 4, 5, 8, 10, 13, 14, 15, 16, 19, 20, 24, 29, 35, 43, 49, 54, 55, 56, 58, 59, 62, 68, 69, 70, 71, 87, 88, 90, 93, 107, 114, 116, 117, 126, 127, 130, 133, 143, 154, 157, 167, 168, 169, 178, 180, 194, 195, 212, 227, 228, 229, 230, 233, 234, 236, 237, 238, 239, 240, 248, 252, 253, 257, 259, 260, 266, 271, 273, 301, 302, 311, 316, 319, 320, 322, 327, 329, 343, 345, 352, 353, 359, 365, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 391, 393, 394, 396, 399, 402, 405, 407, 409, 414, 417, 420, 444, 447, 448, 449, 450, 453, 457, 464, 488, 489, 499, 501, 511, 521, 523, 536, 544, 564, 588, 589, 590, 591, 594, 604, 631, 639, 643, 658, 659, 666, 668, 674, 676, 696, 697, 699, 703, 705, 717, 737, 758, 759, 769, 778, 779, 780, 793, 795, 800, 803, 804, 806, 814, 822, 823, 834, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 865, 876, 904, 909, 920, 923, 925, 938, 958, 981, 988, 990, 992, 993, 994, 995, 996, 1000, 1006, 1009, 1010, 1011, 1014, 1017, 1021, 1026, 1028, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "document_clust": 1041, "document_nam": 17, "doddington": 992, "doe": [2, 5, 6, 7, 10, 11, 22, 23, 29, 32, 38, 44, 51, 53, 55, 68, 70, 71, 84, 103, 109, 114, 115, 118, 119, 120, 124, 125, 130, 146, 155, 167, 168, 181, 194, 197, 203, 215, 218, 219, 220, 223, 226, 229, 230, 231, 233, 234, 236, 245, 246, 253, 254, 259, 261, 262, 266, 268, 269, 281, 283, 296, 305, 307, 309, 311, 312, 318, 319, 328, 329, 336, 338, 345, 347, 350, 351, 352, 365, 366, 373, 377, 379, 380, 381, 383, 387, 392, 393, 399, 402, 406, 407, 409, 410, 413, 414, 416, 417, 418, 419, 434, 440, 442, 446, 447, 449, 450, 454, 456, 465, 467, 473, 479, 487, 499, 503, 508, 527, 535, 537, 538, 539, 544, 546, 549, 550, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 581, 582, 583, 588, 589, 591, 593, 594, 597, 602, 606, 610, 632, 638, 649, 650, 651, 654, 655, 656, 659, 671, 682, 683, 698, 700, 702, 707, 728, 729, 730, 734, 736, 738, 743, 746, 778, 783, 784, 787, 788, 794, 800, 803, 804, 814, 861, 865, 866, 867, 869, 871, 873, 876, 877, 878, 881, 884, 885, 893, 896, 897, 901, 904, 905, 912, 913, 914, 915, 919, 924, 928, 941, 944, 945, 958, 960, 976, 981, 982, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1000, 1002, 1006, 1007, 1008, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "doepk": 1042, "doesn": [6, 167, 197, 233, 244, 281, 301, 338, 387, 393, 396, 402, 409, 417, 418, 422, 434, 475, 632, 633, 666, 668, 676, 716, 828, 831, 836, 846, 847, 861, 873, 874, 991, 992, 1008, 1039, 1052], "dog": [318, 319, 321, 322, 582, 783, 885, 1002], "dohmatob": [1040, 1041, 1042], "dohri": 1052, "doi": [173, 197, 215, 379, 409, 676], "dok": [553, 554, 871, 1048], "dokato": 1042, "dolan": 374, "dollar": [167, 374], "dolmatov": 1045, "dolphin": 350, "domain": [125, 197, 273, 311, 393, 395, 413, 635, 721, 723, 724, 801, 802, 807, 808, 809, 988, 1013], "domin": [115, 162, 170, 197, 202, 236, 268, 310, 374, 385, 406, 884, 994, 1002, 1008, 1051], "domingo": [25, 788, 992], "dominik": [1042, 1051], "don": [10, 25, 52, 68, 125, 167, 219, 233, 234, 253, 259, 283, 328, 335, 339, 350, 351, 365, 373, 379, 381, 383, 385, 387, 392, 399, 410, 417, 646, 652, 832, 912, 913, 914, 915, 956, 981, 988, 991, 993, 996, 998, 1006, 1028, 1039, 1044, 1051, 1052, 1053], "don86": 1042, "donald": [4, 374, 409, 725, 982], "donald_rumsfeld": 1024, "donat": 227, "done": [4, 6, 7, 9, 11, 13, 15, 17, 46, 48, 50, 51, 96, 125, 143, 146, 154, 167, 168, 173, 176, 181, 183, 201, 214, 232, 233, 248, 257, 260, 263, 268, 283, 308, 317, 350, 351, 352, 361, 366, 373, 377, 379, 381, 383, 386, 387, 388, 391, 393, 399, 409, 411, 413, 414, 416, 441, 442, 445, 450, 452, 472, 482, 483, 484, 485, 489, 535, 561, 562, 582, 606, 607, 608, 628, 630, 632, 634, 643, 644, 645, 659, 722, 741, 797, 798, 800, 814, 819, 820, 822, 868, 882, 977, 981, 982, 985, 988, 989, 992, 994, 995, 996, 1002, 1005, 1006, 1007, 1008, 1013, 1019, 1023, 1024, 1026, 1028, 1035, 1037, 1042, 1045, 1047, 1051], "dong": 1045, "donn": 1040, "donoho": [689, 693, 989], "donor": [146, 376], "donovan": 1041, "dor": 1043, "dorin": [61, 448], "dormagen": 1045, "dot": [15, 30, 31, 42, 47, 52, 55, 60, 76, 77, 78, 80, 83, 84, 94, 95, 96, 100, 102, 109, 112, 149, 150, 156, 157, 167, 178, 181, 189, 191, 192, 204, 231, 244, 245, 247, 248, 253, 263, 334, 336, 342, 365, 381, 385, 388, 393, 405, 414, 417, 533, 538, 540, 547, 590, 591, 614, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 681, 684, 687, 761, 763, 876, 916, 942, 990, 994, 1002, 1006, 1007, 1027, 1044], "dot_data": [916, 1008], "dot_product": 942, "dotproduct": [152, 153, 158, 419, 611, 625], "dotson": 1040, "doubl": [32, 115, 271, 379, 393, 414, 538, 540, 541, 547, 844, 845, 855, 976, 982, 1007, 1008, 1035, 1045, 1046], "doubt": [379, 380, 383, 988, 998, 1012], "doucet": 1049, "douetteau": 1017, "doug": [1036, 1037, 1047], "dougal": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "dougla": 1043, "douillard": 1042, "doumouro": 1044, "douriez": [1045, 1046], "dowl": 1041, "down": [44, 45, 79, 109, 212, 213, 220, 230, 231, 233, 262, 278, 302, 305, 342, 361, 373, 382, 387, 393, 411, 414, 443, 450, 456, 590, 593, 594, 639, 649, 774, 778, 781, 873, 874, 879, 882, 883, 894, 906, 909, 916, 988, 1019, 1027, 1043], "downarrow": 994, "download": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 372, 374, 376, 377, 383, 384, 387, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 510, 1008, 1024, 1026, 1028, 1030, 1039, 1040, 1043, 1047, 1048, 1049], "download_20newsgroup": 1039, "download_if_miss": [488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 1042], "download_url": 6, "downsampl": 96, "downscal": 1028, "downsid": 352, "downstream": [2, 78, 312, 352, 417, 531, 534, 537, 541, 542, 606, 877, 1002, 1045], "downweight": [411, 536], "dowon": [1043, 1044], "dozen": [392, 419], "do\u0161ilovi\u0107": [1052, 1053], "dp": [244, 249], "dpgmm": [244, 249, 1035, 1039, 1041], "dpi": [208, 918, 1048], "dpy_debug": 385, "dqd": 385, "dr": [0, 146, 376, 409, 1049], "draft": [383, 394], "dragon": 1002, "drama": 417, "dramat": 367, "dramsch": 1045, "drastic": [149, 230, 267, 409, 413, 995, 1005], "draw": [2, 5, 58, 158, 167, 193, 237, 261, 266, 338, 386, 412, 414, 415, 416, 555, 556, 557, 558, 563, 564, 565, 566, 611, 634, 701, 806, 823, 916, 918, 991, 1012, 1022, 1048, 1049], "drawback": [117, 214, 984, 987], "drawcoastlin": [9, 296], "drawcountri": [9, 296], "drawn": [5, 50, 78, 112, 145, 149, 158, 166, 237, 266, 287, 350, 375, 409, 415, 416, 419, 421, 469, 470, 471, 472, 473, 474, 475, 476, 515, 523, 533, 555, 556, 557, 558, 563, 564, 565, 566, 611, 627, 632, 641, 840, 896, 897, 914, 915, 988, 1002, 1004, 1038], "drawstyl": [355, 700], "draxu": 1035, "drew": 1044, "drewhogg": 1050, "drewmjohnston": 1044, "drgfreeman": 1045, "driessen": [411, 469, 474, 998], "drift": 1013, "drivag": [197, 215], "drive": [367, 414, 415, 549, 1006, 1017, 1028], "driven": [0, 170, 1017], "driver": [197, 215, 1050], "drop": [2, 3, 11, 69, 73, 84, 125, 154, 166, 167, 168, 170, 197, 201, 215, 236, 240, 253, 269, 311, 317, 320, 322, 351, 383, 387, 410, 414, 416, 464, 467, 567, 568, 569, 570, 695, 700, 702, 782, 789, 863, 877, 883, 982, 988, 992, 1002, 1012, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "drop_binary_enc": 877, "drop_dupl": 271, "drop_enc": [877, 1002], "drop_first": 695, "drop_idx": 877, "drop_idx_": [877, 1046, 1050], "drop_intermedi": [700, 702, 782, 789, 1051], "drop_nul": [11, 154], "dropdown": 379, "dropped_result": 119, "dropper": 119, "dror": 1044, "dross": 534, "dro\u017cd\u017c": 1038, "drskd": 1049, "druck": 1049, "drucker": [110, 416, 554], "drug": 988, "dry": 168, "dryden": 68, "ds_ana": 1048, "ds_cnt": [29, 307, 308], "dschult": 15, "dscullei": 449, "dseg": 68, "dsouza": [1046, 1047, 1048, 1049], "dsquareindia": 1041, "dss": 1017, "dt": [48, 96, 131, 154, 416, 417, 1008], "dtreeviz": 1012, "dtype": [2, 6, 8, 9, 15, 46, 47, 51, 63, 68, 69, 119, 121, 123, 124, 126, 150, 151, 152, 162, 167, 168, 199, 215, 240, 243, 253, 257, 263, 267, 273, 278, 290, 296, 311, 318, 319, 321, 326, 359, 373, 374, 379, 381, 391, 393, 404, 410, 413, 416, 424, 425, 427, 430, 442, 443, 447, 448, 449, 450, 451, 453, 459, 464, 466, 467, 469, 472, 474, 488, 489, 490, 491, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 514, 522, 542, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 585, 586, 588, 589, 591, 593, 594, 601, 602, 606, 627, 628, 629, 630, 632, 633, 640, 641, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 697, 699, 705, 714, 715, 731, 738, 741, 755, 786, 806, 825, 827, 828, 840, 844, 845, 847, 855, 869, 875, 877, 878, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 898, 906, 907, 908, 909, 910, 912, 913, 914, 915, 921, 922, 924, 925, 957, 967, 968, 969, 970, 973, 979, 982, 1002, 1005, 1007, 1019, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dtype_exclud": [69, 466], "dtype_includ": [69, 119, 130, 236, 410, 466], "du": [0, 397, 398, 1035, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dua": 1044, "dual": [68, 70, 315, 345, 350, 417, 418, 471, 472, 478, 611, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 681, 684, 844, 845, 904, 905, 906, 909, 1007, 1037, 1046, 1049, 1051], "dual_coef_": [535, 643, 906, 907, 908, 909, 910, 1007, 1039], "dual_gap": [471, 472, 478, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "dual_gap_": [646, 647, 652, 653, 660, 661, 662, 663, 1048], "dualiti": [472, 988], "dualtre": [844, 845], "duan": [1044, 1046], "duart": [1040, 1048, 1050], "dubai": 417, "duboi": [1041, 1043], "dubou": 1045, "dubourg": [0, 152, 156, 398, 1017, 1035, 1039], "duchesnai": [0, 398, 1035], "duck": [381, 393, 1045], "ducktyp": [1039, 1052], "duckworth": 1035, "ducout": 1049, "duda": [376, 986], "due": [7, 11, 24, 25, 51, 53, 58, 73, 109, 112, 149, 167, 168, 176, 181, 188, 195, 197, 199, 214, 215, 230, 236, 244, 267, 268, 273, 281, 283, 310, 311, 342, 345, 350, 351, 352, 379, 385, 393, 396, 406, 408, 409, 413, 414, 416, 419, 443, 446, 447, 459, 535, 539, 543, 544, 574, 671, 800, 803, 804, 808, 810, 814, 825, 826, 829, 832, 836, 837, 869, 873, 874, 884, 982, 988, 989, 991, 992, 993, 995, 999, 1006, 1007, 1013, 1027, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "dueck": [36, 440, 454], "dugnat": 1049, "duhaim": 1043, "dummi": [109, 110, 197, 215, 233, 253, 262, 368, 381, 384, 403, 732, 877, 886, 993, 1002, 1008, 1030, 1036, 1038, 1039, 1040, 1042], "dummy_classifiers_misclassification_error": 109, "dummy_clf": [109, 551], "dummy_leaf_": 442, "dummy_regr": 552, "dummy_sev": 215, "dummybiclust": 424, "dummyclassifi": [109, 253, 262, 552, 732, 992, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1053], "dummyestim": [559, 560], "dummyregressor": [197, 215, 551, 992, 993, 1036, 1038, 1039, 1042, 1043, 1045, 1048, 1049, 1053], "dumont": 1008, "dump": [15, 402, 487, 844, 845], "dump_svmlight_fil": [1035, 1036, 1040, 1050, 1052], "duong": 1052, "duplic": [366, 378, 379, 380, 393, 409, 420, 444, 448, 449, 515, 635, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 828, 875, 978, 995, 1035, 1038, 1047, 1049, 1051, 1052], "dupont": 10, "dupr": [189, 205, 283, 285, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "dupr\u00e9": [0, 307, 308, 397, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "duqu": 1048, "durat": [2, 6, 197, 215, 236, 253, 285, 352, 366, 958, 959, 988], "duration_sec": 8, "duration_test": 350, "duration_train": 350, "dure": [0, 2, 3, 10, 11, 48, 53, 56, 70, 73, 84, 98, 113, 119, 120, 125, 127, 143, 149, 154, 167, 168, 170, 186, 198, 205, 253, 257, 261, 273, 283, 317, 318, 342, 365, 367, 377, 379, 381, 384, 393, 394, 409, 410, 414, 416, 417, 419, 420, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 789, 797, 798, 799, 800, 803, 804, 814, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 982, 984, 988, 989, 995, 1002, 1004, 1008, 1023, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "duron": 1049, "duti": 394, "dutt": 1051, "dutta": 1052, "duv2014": 419, "duvenaud": [419, 622, 623], "dwight": 1050, "dx": [10, 12, 699], "dx_c": 999, "dy": [10, 699], "dye": 1048, "dylan": [1042, 1045], "dynam": [10, 11, 168, 555, 556, 557, 558, 563, 564, 565, 566, 579, 580, 676, 677, 678, 1008, 1017, 1041, 1047, 1052], "dziki": 1038, "d\u00b2": 215, "d\u00f6pfert": 1043, "e": [0, 2, 6, 8, 9, 11, 23, 24, 25, 30, 32, 51, 53, 55, 59, 68, 76, 78, 79, 80, 83, 84, 88, 96, 98, 109, 112, 119, 121, 122, 125, 126, 136, 142, 145, 146, 157, 166, 167, 168, 173, 177, 181, 186, 187, 197, 198, 199, 201, 215, 218, 219, 232, 233, 253, 255, 259, 260, 262, 264, 265, 274, 275, 278, 281, 289, 296, 307, 310, 315, 317, 345, 352, 357, 358, 359, 361, 365, 366, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 391, 392, 393, 396, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 437, 439, 441, 443, 444, 445, 447, 449, 450, 454, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 498, 500, 501, 502, 503, 524, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 588, 589, 590, 591, 593, 594, 597, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 622, 623, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 690, 692, 694, 697, 699, 701, 704, 705, 708, 709, 728, 729, 730, 731, 738, 741, 742, 755, 763, 767, 778, 785, 788, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 813, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 860, 861, 862, 864, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 935, 940, 941, 943, 946, 947, 949, 952, 960, 967, 978, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1013, 1016, 1017, 1026, 1027, 1028, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "e0129126": 373, "e11": 374, "e2": [898, 988], "e41a1c": [42, 60], "e501": [146, 350], "e_": 414, "each": [2, 5, 6, 8, 9, 10, 11, 13, 15, 18, 23, 24, 25, 30, 32, 35, 39, 41, 42, 45, 47, 51, 53, 56, 58, 59, 68, 69, 71, 72, 73, 83, 84, 87, 88, 89, 90, 93, 94, 98, 100, 101, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 126, 128, 129, 130, 131, 132, 133, 142, 146, 151, 153, 158, 161, 162, 166, 167, 168, 170, 173, 176, 183, 184, 186, 191, 195, 197, 198, 199, 201, 202, 205, 212, 215, 219, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 243, 246, 248, 252, 253, 254, 255, 257, 259, 260, 262, 264, 265, 268, 269, 273, 278, 281, 283, 286, 288, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 310, 311, 312, 315, 317, 318, 319, 321, 322, 325, 326, 327, 330, 338, 342, 345, 351, 352, 355, 356, 359, 361, 365, 366, 367, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 399, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 707, 708, 710, 713, 719, 725, 728, 729, 730, 738, 739, 745, 746, 748, 750, 751, 753, 754, 758, 759, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 783, 784, 785, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 930, 935, 936, 941, 943, 944, 948, 949, 960, 968, 969, 970, 973, 982, 984, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1017, 1019, 1023, 1025, 1026, 1027, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "eager": 253, "eargl": 1049, "earl": 1038, "earli": [2, 5, 13, 42, 60, 108, 109, 115, 118, 123, 134, 164, 175, 185, 186, 204, 216, 309, 316, 344, 393, 416, 441, 445, 449, 463, 490, 496, 536, 537, 538, 539, 546, 553, 554, 559, 560, 561, 562, 571, 627, 645, 656, 666, 667, 668, 676, 678, 692, 750, 830, 861, 862, 966, 989, 995, 1002, 1011, 1013, 1014, 1017, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "earlier": [115, 168, 201, 373, 379, 412, 835, 838, 1002, 1033, 1036, 1048, 1050], "earliest": [373, 989], "early_exager": 1042, "early_exagger": 692, "early_stop": [115, 125, 168, 205, 299, 318, 350, 393, 416, 561, 562, 666, 667, 668, 676, 677, 678, 861, 862, 1006, 1043, 1046, 1049, 1050], "earn": [166, 167, 394], "earth": [220, 351, 764, 1012], "eas": [70, 170, 248, 310, 379, 382, 385, 988, 1006, 1012, 1013, 1017, 1046, 1047, 1049], "easi": [89, 168, 205, 215, 246, 253, 257, 259, 338, 350, 361, 374, 385, 387, 391, 392, 402, 409, 416, 500, 504, 510, 871, 981, 987, 991, 999, 1002, 1012, 1013, 1017, 1028, 1045, 1050, 1051], "easier": [42, 60, 64, 80, 119, 176, 182, 228, 236, 256, 257, 305, 338, 350, 361, 374, 379, 381, 384, 387, 391, 396, 411, 413, 468, 515, 902, 935, 987, 992, 999, 1008, 1013, 1017, 1028, 1044, 1049], "easiest": [381, 387, 410, 989], "easili": [2, 7, 29, 88, 143, 170, 200, 213, 231, 233, 237, 240, 259, 261, 268, 288, 307, 379, 381, 393, 394, 402, 410, 416, 417, 419, 449, 986, 988, 989, 1002, 1006, 1007, 1008, 1016, 1020, 1023, 1028, 1041], "easlii": 227, "easy_going_classifi": 253, "ec": [305, 530], "ecat": 374, "echo": [377, 383], "eckert": 1040, "eckhart": 494, "eclf": [131, 132, 416], "eclf1": 569, "eclf2": 569, "eclf3": 569, "ecml": 0, "ecoc": 278, "ecolog": [9, 296, 374, 498], "econom": [166, 167, 259], "econometr": 988, "econometrica": 988, "ecosystem": [379, 387, 982, 1011, 1017], "ecuador": [9, 296, 374, 498], "ed": [113, 124, 409, 416, 520, 559, 560, 1004, 1035, 1042], "eddi": [1038, 1052], "eden": 1050, "edern": [1050, 1051], "edg": [10, 24, 44, 64, 96, 119, 144, 221, 266, 387, 393, 405, 409, 411, 453, 561, 562, 585, 586, 588, 589, 591, 797, 841, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 869, 917, 1002, 1005, 1017, 1041, 1043, 1046, 1049], "edge_model": 10, "edgecolor": [10, 22, 28, 29, 32, 40, 43, 54, 58, 65, 89, 90, 99, 111, 118, 126, 128, 129, 131, 132, 138, 141, 150, 151, 153, 157, 168, 180, 189, 199, 206, 209, 210, 211, 230, 231, 232, 234, 236, 243, 246, 259, 262, 274, 286, 289, 290, 291, 294, 299, 307, 308, 310, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 356, 357, 358, 631], "edit": [40, 376, 377, 378, 379, 383, 387, 391, 396, 530, 534, 834, 986, 988, 993, 999, 1028], "editor": [379, 387, 391], "edm": 988, "edoardo": [1050, 1052, 1054], "edouard": [0, 398, 1035], "edson": [992, 1040], "edu": [4, 6, 9, 15, 44, 146, 156, 173, 179, 218, 246, 258, 278, 288, 296, 309, 350, 373, 374, 376, 409, 449, 487, 500, 502, 508, 509, 510, 534, 641, 644, 649, 658, 666, 667, 676, 679, 682, 683, 839, 841, 842, 843, 853, 860, 897, 899, 912, 913, 988, 990, 1024], "eduardo": [1038, 1040, 1048, 1049], "educ": [166, 167, 322, 379, 496, 716, 993], "edvardlindelof": 1045, "edward": [614, 619, 622, 1038, 1043, 1044, 1045, 1046, 1050], "edwinensa": 1041, "edwinwenink": 1048, "eec": [449, 641], "ef": 1050, "eff": 1008, "effect": [2, 4, 25, 35, 37, 38, 43, 44, 51, 55, 60, 63, 67, 71, 74, 84, 90, 96, 98, 109, 120, 122, 124, 126, 127, 130, 145, 149, 150, 154, 156, 164, 165, 167, 168, 170, 171, 181, 192, 197, 198, 199, 201, 202, 203, 214, 217, 218, 220, 222, 224, 229, 236, 240, 244, 248, 253, 255, 259, 260, 261, 264, 267, 268, 271, 273, 283, 302, 304, 306, 309, 313, 316, 324, 331, 338, 342, 343, 345, 346, 347, 350, 351, 352, 361, 366, 379, 381, 384, 391, 393, 406, 409, 410, 414, 415, 416, 417, 419, 420, 437, 443, 444, 446, 447, 449, 450, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 496, 500, 514, 524, 525, 533, 534, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 594, 606, 609, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 691, 692, 701, 703, 753, 785, 797, 799, 801, 802, 805, 807, 809, 811, 818, 819, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 873, 874, 876, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 925, 941, 958, 966, 981, 986, 988, 989, 991, 992, 993, 995, 999, 1000, 1002, 1005, 1007, 1008, 1014, 1024, 1026, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "effective_learning_r": [861, 862], "effective_metric_": [846, 847, 848, 850, 852, 854, 855, 856, 995], "effective_metric_params_": [846, 847, 848, 850, 852, 854, 855, 856], "effective_n_job": 960, "effective_rank": [521, 524], "efficaci": 186, "effici": [2, 3, 10, 12, 40, 44, 51, 53, 93, 110, 115, 120, 128, 173, 186, 190, 199, 205, 288, 350, 365, 371, 373, 379, 381, 382, 384, 385, 391, 393, 402, 405, 407, 409, 414, 415, 416, 419, 421, 442, 443, 446, 447, 449, 450, 452, 454, 457, 459, 461, 462, 496, 533, 534, 535, 538, 540, 541, 544, 563, 566, 574, 581, 582, 588, 589, 591, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 634, 638, 640, 655, 658, 659, 664, 666, 667, 668, 673, 675, 676, 677, 678, 679, 685, 686, 688, 726, 756, 763, 779, 780, 797, 798, 800, 814, 833, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 869, 881, 893, 897, 904, 913, 915, 941, 960, 981, 984, 986, 988, 989, 991, 992, 993, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1012, 1017, 1019, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "efficiencywarn": [859, 1050], "effort": [317, 379, 385, 1012, 1017, 1046, 1048], "efron": [146, 376, 682, 683, 988], "eg": 976, "egashira": 1050, "egg": 1043, "egger": 1053, "egin": 409, "egli": [1042, 1052], "egor": 1047, "ehrenheim": [1042, 1043], "eib": [835, 993], "eickenberg": [1035, 1037, 1038, 1039, 1040], "eig": 1042, "eig_tol": 1036, "eig_val": 243, "eig_vec": 243, "eigen": [452, 549, 673, 691, 695, 986, 1041, 1044], "eigen_solv": [10, 42, 44, 64, 218, 219, 414, 452, 462, 535, 688, 689, 691, 693, 695, 989, 1036, 1045, 1048, 1049, 1050], "eigen_tol": [44, 452, 462, 691, 695, 1036, 1049, 1050], "eigendecompos": 414, "eigendecomposit": [462, 673, 691, 695, 870, 984], "eigenfac": [1, 13, 14, 46, 164, 232, 235, 350, 374, 414, 494, 541, 697, 713, 814, 830, 884, 909, 1009, 1014, 1022, 1035], "eigenface_titl": [4, 1024], "eigenmap": [218, 689, 691, 693, 695, 1029, 1030, 1036], "eigensolv": [414, 452, 462, 535, 544, 695, 989], "eigenvalu": [88, 248, 322, 405, 409, 411, 452, 462, 469, 470, 471, 472, 473, 474, 475, 476, 535, 541, 549, 673, 688, 689, 691, 693, 695, 870, 984, 989, 1002, 1037, 1041, 1044, 1045, 1046, 1047], "eigenvalues_": [535, 1048], "eigenvector": [1, 14, 44, 84, 88, 164, 243, 409, 452, 462, 534, 535, 541, 550, 688, 689, 691, 695, 989, 1014, 1035, 1039, 1049], "eigenvector_centr": 15, "eigenvectors_": [535, 1048], "eigh": [32, 243, 244, 245, 248, 249, 414, 421, 533, 535, 1050], "eight": 1028, "eighteenth": 409, "eighth": [563, 998], "eigsh": [414, 535, 1041, 1042], "eiler": 1002, "einsum": 293, "eitan": 1052, "either": [2, 8, 25, 69, 115, 118, 119, 167, 185, 187, 227, 236, 253, 254, 263, 268, 273, 288, 345, 350, 359, 365, 366, 371, 374, 377, 379, 380, 381, 385, 393, 399, 402, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 442, 447, 452, 487, 496, 512, 524, 533, 534, 536, 544, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 582, 583, 584, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 622, 627, 630, 632, 633, 650, 654, 656, 664, 676, 678, 682, 683, 690, 697, 698, 702, 706, 707, 711, 712, 720, 724, 726, 727, 728, 729, 730, 735, 738, 739, 740, 742, 752, 756, 769, 774, 778, 782, 783, 784, 785, 787, 788, 789, 794, 800, 803, 804, 806, 814, 823, 824, 825, 826, 827, 828, 829, 831, 834, 864, 894, 895, 901, 904, 905, 912, 913, 914, 915, 919, 949, 953, 981, 988, 992, 993, 994, 995, 996, 997, 1000, 1002, 1006, 1007, 1019, 1027, 1028, 1035, 1038, 1044, 1045, 1046, 1049, 1053], "ekaterina": [1041, 1042, 1043, 1044, 1046, 1051], "ekman": [1037, 1041], "el": [528, 1048, 1050, 1051], "elabonga": [1051, 1052], "elabor": 993, "elad": [664, 685, 686], "elaps": [9, 45, 65, 115, 116, 117, 365, 464, 467, 569, 570, 863, 864, 865, 866], "elapsed_tim": [5, 37, 65, 116, 117, 130, 214], "elast": [164, 175, 181, 183, 184, 188, 190, 191, 208, 216, 230, 233, 272, 295, 407, 471, 472, 478, 501, 524, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 684, 981, 992, 1006, 1014, 1015, 1030, 1035, 1040, 1044, 1045], "elastic_net": 208, "elastic_net_color": 208, "elastic_net_contour": 208, "elasticnet": [5, 8, 178, 188, 267, 272, 365, 385, 391, 414, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 988, 993, 1006, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "elasticnetcv": [181, 393, 399, 646, 652, 660, 661, 662, 663, 681, 988, 1035, 1038, 1046, 1048, 1049, 1052, 1053], "elasticnetifittedelasticnet": 178, "elbo": 414, "eldar": [411, 422, 475], "eleanor": 1050, "elec2": 125, "electr": [10, 125, 376, 409], "electron": [17, 146, 374, 376, 538, 540, 547, 627], "element": [52, 93, 112, 113, 124, 228, 252, 258, 266, 268, 316, 351, 355, 359, 368, 376, 378, 379, 381, 388, 394, 405, 407, 409, 413, 414, 416, 417, 420, 444, 446, 452, 464, 487, 508, 512, 514, 520, 522, 526, 527, 531, 537, 538, 540, 550, 557, 558, 559, 560, 564, 565, 566, 567, 568, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 617, 632, 658, 659, 666, 667, 668, 676, 677, 678, 707, 717, 727, 734, 736, 746, 763, 769, 778, 782, 788, 789, 834, 844, 845, 846, 847, 848, 850, 852, 854, 855, 859, 861, 862, 867, 883, 884, 887, 891, 904, 909, 912, 913, 914, 915, 943, 944, 945, 963, 965, 966, 978, 986, 988, 992, 993, 996, 999, 1002, 1003, 1004, 1008, 1017, 1019, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1051], "elementari": [898, 1004], "elementwis": [414, 538, 540, 547], "elena": 1042, "eleni": 1048, "eleph": 582, "elev": [43, 65, 88, 99, 168, 194, 218, 222, 491], "eleven": 1013, "elfner": 1049, "eli5": 1012, "elia": 1041, "eliaschiavon": 1050, "eliasi": [1050, 1051, 1052], "elicit": 992, "elif": [5, 6, 177, 199, 234, 245, 288, 880], "elimin": [49, 89, 136, 140, 143, 146, 147, 164, 254, 257, 258, 264, 273, 287, 407, 409, 413, 448, 502, 515, 593, 594, 597, 602, 658, 803, 804, 819, 864, 874, 978, 992, 1014, 1015, 1017, 1030, 1035], "elisabeth": [320, 1052], "elizabeth": [1042, 1044, 1047], "elkan": [25, 253, 316, 406, 437, 443, 447, 459, 676, 1041, 1045, 1046, 1048, 1049], "ell": [32, 243, 244, 245, 249, 405], "ell_": 988, "ell_0": [988, 992], "ell_1": [414, 988], "ell_2": 988, "ella": 1004, "ellen": 1042, "elli": [1041, 1044], "elliot": [1052, 1053], "elliott": 1042, "ellips": [32, 226, 243, 244, 245, 248, 249, 998], "ellipsoid": [7, 27, 31, 33, 78, 79, 80, 164, 242, 243, 245, 246, 247, 248, 249, 250, 549, 550, 631, 797, 798, 986, 991, 1014], "ellipt": [55, 988], "ellipticenvelop": [7, 226, 470, 473, 474, 475, 476, 563, 998, 1035, 1038, 1042, 1043, 1048], "eln": 1046, "elong": 409, "els": [2, 6, 9, 10, 11, 17, 32, 39, 42, 47, 53, 54, 60, 80, 97, 112, 118, 119, 122, 157, 167, 168, 186, 189, 199, 212, 215, 219, 226, 230, 232, 233, 234, 235, 236, 259, 260, 263, 270, 283, 288, 296, 299, 300, 307, 342, 350, 351, 359, 379, 383, 385, 416, 417, 419, 421, 429, 437, 449, 508, 520, 533, 569, 618, 625, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 673, 674, 676, 679, 681, 682, 683, 684, 703, 709, 788, 794, 796, 803, 804, 830, 868, 880, 883, 891, 904, 905, 919, 954, 956, 958, 979, 1008], "elsewher": [393, 462, 463, 471, 472, 478], "eltermann": 1038, "elucid": 984, "elvezio": [649, 988], "elvi": [1040, 1041, 1042], "em": [244, 245, 249, 443, 447, 459, 536, 797, 798, 991, 1049], "email": [0, 350, 379, 391, 417, 839, 994, 1017], "emami": 1049, "emanuel": 1036, "emb": [149, 219, 230, 292, 372, 373, 462, 695, 989], "embark": [69, 169, 240, 315, 319, 320], "embed": [34, 37, 39, 42, 44, 53, 60, 66, 87, 114, 149, 164, 217, 220, 221, 222, 224, 225, 241, 283, 292, 325, 326, 385, 393, 407, 409, 441, 452, 462, 489, 502, 544, 549, 566, 582, 639, 688, 689, 690, 691, 692, 693, 694, 695, 696, 853, 865, 874, 896, 897, 898, 984, 995, 998, 1004, 1009, 1012, 1014, 1029, 1030, 1035, 1036, 1046, 1047, 1049], "embedding_": [221, 393, 688, 689, 690, 691, 692], "emerg": [409, 1017], "emeritu": [394, 1010], "emiko": 1049, "emil": 1049, "emili": [1046, 1047], "emipr": 797, "emir": [1050, 1051], "emit": [1046, 1053], "emlearn": 1012, "emma": 1052, "emmanouil": 1049, "emmanuel": [12, 64, 1035, 1042, 1043, 1044, 1052], "emp_cov": [76, 78, 80, 478, 481], "emp_cov_contour": 78, "emp_mah": 78, "emphas": [167, 347, 385, 414, 992], "emphasi": [347, 408, 412, 906, 907, 908, 909, 910, 999, 1012], "empir": [7, 11, 22, 23, 32, 34, 40, 41, 57, 61, 62, 66, 75, 77, 78, 80, 81, 125, 164, 177, 215, 265, 305, 406, 413, 416, 419, 447, 449, 460, 469, 470, 471, 474, 477, 478, 532, 534, 539, 541, 543, 549, 551, 565, 590, 603, 639, 649, 667, 671, 678, 679, 716, 721, 723, 724, 829, 839, 840, 841, 843, 862, 885, 927, 966, 984, 986, 992, 994, 996, 1002, 1004, 1006, 1014, 1029, 1030], "empirical_covari": [76, 411, 478, 479, 481, 1051], "empiricalcovari": [76, 78, 79, 411, 469, 473, 474, 475, 476, 998], "emploi": [10, 149, 232, 393, 411, 417, 450, 478, 582, 589, 1017, 1027, 1041], "employ": [167, 253], "empti": [59, 68, 102, 209, 328, 365, 374, 381, 383, 409, 421, 483, 533, 561, 562, 631, 811, 869, 909, 911, 919, 924, 925, 931, 951, 952, 982, 1007, 1026, 1037, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051], "emptyset": 992, "emul": [167, 387], "en": [15, 22, 387, 531, 537, 595, 636, 664, 668, 671, 685, 686, 695, 705, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 988, 992, 1007, 1008], "enabl": [11, 28, 48, 70, 125, 168, 205, 220, 233, 307, 316, 318, 319, 321, 322, 346, 377, 379, 384, 387, 391, 393, 396, 399, 404, 407, 409, 410, 414, 416, 417, 449, 464, 468, 534, 535, 541, 559, 560, 561, 562, 563, 579, 580, 590, 591, 602, 610, 797, 798, 800, 803, 825, 826, 827, 828, 864, 865, 877, 878, 901, 902, 904, 905, 906, 907, 908, 909, 910, 919, 952, 959, 982, 984, 989, 991, 992, 995, 1002, 1003, 1006, 1007, 1013, 1017, 1035, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "enable_cython_pairwise_dist": [468, 902], "enable_halving_search_cv": [122, 270, 271, 317, 383, 803, 804, 981], "enable_hist_gradient_boost": [383, 1044], "enable_iterative_imput": [161, 162, 383, 627, 982, 1044], "enable_metadata_rout": [233, 253, 322, 399, 437, 443, 444, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 863, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1051], "enable_my_experimental_featur": 383, "enc": [306, 308, 319, 321, 877, 878, 1002], "enc_auto": 885, "enc_high_smooth": 885, "enc_low_smooth": 885, "encapsul": [386, 410, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "enclos": 981, "encod": [2, 6, 9, 46, 53, 69, 93, 114, 125, 130, 164, 167, 168, 169, 179, 196, 197, 236, 238, 253, 268, 273, 304, 306, 307, 308, 313, 317, 319, 320, 338, 350, 352, 371, 373, 375, 381, 384, 391, 393, 410, 413, 414, 416, 417, 419, 464, 487, 496, 503, 526, 531, 537, 539, 540, 542, 544, 545, 546, 548, 551, 561, 562, 566, 567, 569, 581, 588, 589, 591, 630, 648, 658, 659, 669, 672, 680, 735, 802, 807, 809, 827, 830, 864, 865, 867, 869, 871, 872, 875, 877, 878, 885, 888, 902, 981, 982, 988, 989, 992, 994, 995, 997, 1006, 1012, 1013, 1014, 1030, 1036, 1037, 1043, 1047, 1049, 1050, 1051, 1052, 1053], "encoded_missing_valu": [130, 169, 878, 1002, 1049, 1050], "encodings_": [321, 885, 1002], "encompass": [393, 450, 456, 555, 556, 989], "encount": [366, 377, 402, 409, 416, 417, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 561, 562, 581, 839, 840, 841, 843, 877, 967, 1002, 1006, 1012, 1016, 1017, 1028, 1043, 1046], "encourag": [167, 201, 299, 338, 378, 379, 391, 1007, 1012, 1053], "encrypt": 1012, "encyclopedia": 992, "end": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 377, 379, 381, 383, 391, 393, 394, 396, 399, 405, 409, 410, 412, 416, 450, 456, 468, 488, 489, 508, 509, 537, 546, 557, 558, 559, 560, 564, 565, 566, 645, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 682, 683, 684, 800, 803, 804, 814, 821, 825, 862, 864, 902, 912, 913, 914, 915, 945, 946, 976, 981, 984, 988, 989, 991, 992, 1002, 1004, 1006, 1012, 1017, 1025, 1028, 1040, 1042, 1045, 1048, 1049], "end_": 6, "end_bodi": 6, "end_d": 6, "end_idx": [10, 221], "end_reut": 6, "end_titl": 6, "end_top": 6, "endian": 1047, "endo": 1048, "endpoint": [12, 306, 341, 635], "enemi": 379, "energi": [10, 125, 387, 860, 997, 1026], "enet": [181, 272], "enet_path": [182, 393, 646, 647, 652, 660, 661, 662, 1037, 1039, 1048], "enet_tol": [471, 472, 478, 1040], "enforc": [2, 10, 32, 51, 93, 125, 154, 191, 292, 365, 379, 411, 414, 416, 426, 432, 508, 527, 531, 537, 539, 542, 543, 545, 546, 548, 557, 558, 561, 562, 564, 565, 868, 883, 912, 913, 914, 915, 924, 925, 982, 989, 1037, 1043, 1045, 1047, 1051], "enforce_estimator_tags_i": 1045, "eng": 1043, "engag": [385, 394], "engemann": [100, 1037, 1038, 1042], "engin": [1, 14, 38, 114, 119, 125, 154, 164, 167, 168, 198, 311, 365, 373, 376, 409, 415, 417, 464, 496, 562, 639, 673, 701, 821, 827, 862, 863, 865, 868, 869, 874, 877, 879, 883, 982, 984, 992, 1002, 1010, 1014, 1041], "english": [13, 17, 68, 350, 351, 352, 384, 417, 588, 589, 591, 1012, 1013, 1028, 1048], "enh": 383, "enhanc": [93, 201, 378, 379, 383, 391, 393, 409, 992, 1010, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "enjoi": [40, 253], "enough": [2, 11, 25, 35, 42, 60, 115, 118, 125, 149, 161, 168, 169, 186, 197, 231, 234, 236, 253, 309, 350, 352, 361, 377, 379, 383, 394, 406, 407, 409, 411, 413, 416, 567, 568, 589, 800, 803, 804, 806, 814, 828, 941, 981, 986, 989, 991, 998, 1002, 1007, 1012, 1017, 1041, 1051, 1052], "enrich": 342, "ensembl": [2, 5, 8, 10, 11, 24, 25, 29, 54, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 161, 162, 168, 169, 170, 197, 219, 226, 235, 236, 238, 239, 253, 256, 271, 278, 281, 307, 311, 315, 316, 317, 318, 320, 321, 322, 350, 356, 357, 358, 361, 365, 368, 383, 384, 392, 393, 399, 402, 406, 409, 413, 418, 437, 504, 515, 632, 633, 635, 658, 702, 803, 804, 822, 830, 834, 835, 865, 868, 877, 908, 912, 914, 915, 933, 981, 992, 993, 998, 999, 1008, 1012, 1013, 1014, 1015, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1054], "ensemble_clf": 113, "ensemble_jaccard_scor": 281, "ensta": [13, 15, 35, 46, 59, 219, 260, 262, 350, 351, 352], "ensur": [0, 18, 39, 55, 80, 90, 109, 115, 116, 125, 170, 197, 219, 254, 262, 301, 359, 361, 365, 366, 379, 381, 383, 384, 385, 394, 396, 399, 406, 409, 410, 413, 421, 469, 533, 534, 541, 611, 627, 696, 705, 782, 788, 789, 825, 897, 924, 925, 941, 947, 958, 988, 989, 992, 1002, 1008, 1023, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ensure_2d": [924, 925], "ensure_min_featur": [924, 925], "ensure_min_sampl": [924, 925], "entail": [392, 882, 884, 1006], "enter": [380, 383, 409, 442, 999], "entertain": 988, "entic": 167, "entir": [30, 161, 197, 205, 253, 302, 305, 316, 342, 359, 361, 373, 380, 381, 393, 402, 409, 413, 415, 417, 472, 492, 534, 588, 589, 590, 591, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 682, 683, 734, 796, 822, 832, 833, 836, 861, 863, 864, 877, 889, 890, 892, 893, 894, 895, 961, 981, 982, 992, 1002, 1006, 1008, 1026, 1044, 1045], "entireti": 393, "entiti": [394, 726, 756], "entitl": [273, 286, 408, 447, 611, 846, 984], "entri": [0, 69, 73, 125, 130, 162, 167, 168, 253, 255, 315, 351, 361, 383, 385, 387, 392, 393, 405, 406, 409, 414, 416, 419, 463, 464, 467, 472, 496, 531, 532, 537, 545, 546, 561, 562, 588, 591, 594, 611, 620, 632, 638, 640, 647, 651, 653, 655, 656, 659, 661, 663, 664, 665, 673, 675, 682, 683, 685, 686, 699, 704, 707, 709, 712, 715, 716, 718, 726, 729, 730, 731, 734, 735, 738, 743, 756, 758, 759, 783, 785, 788, 789, 792, 793, 813, 828, 844, 845, 852, 853, 854, 855, 856, 875, 881, 893, 978, 981, 982, 988, 992, 995, 1002, 1007, 1013, 1019, 1042, 1045, 1046, 1048, 1052], "entropi": [9, 25, 238, 271, 296, 317, 325, 326, 361, 374, 409, 416, 421, 498, 533, 557, 564, 607, 608, 658, 717, 736, 737, 741, 795, 912, 914, 988, 989, 992, 996, 1008, 1037, 1039, 1043, 1044, 1049, 1051, 1052], "entrypoint_to_bug_reproduc": 380, "enumer": [2, 6, 8, 9, 10, 12, 13, 15, 17, 23, 25, 28, 29, 35, 37, 38, 39, 40, 41, 42, 43, 48, 53, 57, 58, 59, 60, 63, 68, 77, 79, 80, 84, 94, 96, 102, 112, 115, 120, 121, 123, 124, 125, 136, 151, 153, 158, 170, 177, 179, 188, 197, 219, 220, 223, 226, 231, 235, 236, 243, 244, 245, 246, 248, 249, 253, 254, 261, 262, 268, 269, 288, 292, 293, 295, 302, 307, 308, 325, 326, 328, 330, 336, 338, 344, 345, 350, 356, 374, 559, 560, 564, 565, 781, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "env": [377, 387, 396], "environ": [0, 10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 365, 374, 376, 377, 379, 381, 385, 387, 391, 396, 404, 407, 410, 499, 1013, 1017, 1030, 1042, 1043, 1052], "environment": [9, 181, 215], "environmenterror": 1051, "eom": 446, "ep": [29, 42, 44, 47, 53, 63, 180, 182, 221, 230, 391, 409, 420, 444, 450, 455, 471, 472, 478, 631, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 690, 694, 714, 741, 856, 896, 897, 898, 1004, 1050, 1051], "epanechnikov": [288, 415, 844, 845, 849], "ephemer": 387, "ephrem": 1050, "epimorph": 1052, "epistem": 11, "epoch": [212, 393, 536, 666, 667, 668, 676, 677, 678, 861, 862, 1006, 1042, 1043, 1048], "epp": [409, 704], "eps_": [660, 662], "eps_rang": 230, "epsilon": [53, 63, 179, 221, 232, 321, 344, 414, 446, 455, 643, 649, 667, 676, 678, 746, 861, 862, 905, 907, 910, 985, 988, 992, 996, 1006, 1007, 1026, 1035], "epsilon_": 842, "epsilon_i": 992, "epsilon_insensit": [667, 676, 678, 905, 988, 1006], "epsilon_valu": 179, "eq": [253, 422, 475, 721, 723, 724], "equal": [2, 9, 10, 24, 32, 35, 37, 51, 58, 78, 84, 109, 122, 152, 167, 198, 199, 208, 214, 237, 245, 248, 252, 257, 259, 268, 293, 307, 311, 338, 340, 346, 351, 374, 375, 379, 381, 393, 405, 406, 409, 413, 414, 416, 417, 422, 437, 440, 441, 442, 443, 445, 447, 449, 454, 459, 460, 463, 469, 474, 479, 480, 503, 512, 515, 519, 532, 533, 534, 539, 541, 543, 544, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 588, 593, 594, 597, 599, 600, 607, 608, 625, 628, 629, 632, 633, 634, 635, 637, 641, 642, 649, 658, 659, 671, 699, 718, 720, 729, 783, 787, 788, 794, 796, 800, 801, 803, 804, 813, 814, 818, 825, 832, 836, 837, 844, 845, 846, 847, 852, 853, 854, 855, 856, 861, 862, 867, 868, 869, 876, 879, 882, 883, 884, 885, 887, 894, 901, 904, 905, 911, 912, 913, 914, 915, 930, 941, 967, 973, 986, 988, 992, 993, 995, 996, 998, 1002, 1006, 1007, 1008, 1027, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "equat": [25, 345, 379, 409, 414, 416, 557, 558, 559, 560, 564, 565, 566, 590, 627, 658, 659, 682, 683, 687, 763, 884, 912, 913, 914, 915, 982, 989, 992, 997, 1043], "equi": 991, "equiangular": 988, "equidist": [119, 692], "equip": 1017, "equiv": [984, 1007], "equival": [2, 13, 32, 53, 55, 119, 126, 145, 149, 154, 167, 181, 215, 248, 268, 283, 310, 342, 352, 361, 365, 385, 388, 392, 393, 402, 409, 410, 411, 412, 413, 414, 416, 418, 419, 441, 443, 444, 445, 446, 447, 449, 450, 457, 464, 469, 474, 509, 534, 541, 558, 561, 562, 563, 564, 565, 588, 591, 613, 616, 619, 621, 624, 646, 647, 648, 652, 654, 658, 659, 666, 667, 668, 669, 672, 676, 677, 680, 683, 687, 688, 693, 708, 709, 723, 734, 742, 747, 748, 749, 761, 770, 779, 780, 797, 798, 803, 804, 808, 810, 835, 838, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 867, 873, 874, 876, 879, 880, 881, 882, 884, 892, 894, 895, 928, 939, 978, 981, 986, 988, 989, 990, 992, 998, 1002, 1006, 1007, 1008, 1043, 1044, 1045, 1046, 1048, 1049, 1052], "er": 570, "era": 1013, "eras": [559, 560, 646, 652, 658, 660, 662, 666, 667, 668, 676, 677, 678, 861, 862], "ereg": [133, 416], "eren": [0, 18, 19, 1037, 1038], "eric": [309, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "ericchang2017": 309, "ericellwang": [1048, 1049], "erich": [450, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049], "erick": 1040, "erik": [374, 1017, 1038], "eriksson": 1042, "erin": [278, 1047], "erl": 278, "erlbaum": 253, "erling": 1040, "ermolaevpa": [1049, 1050], "ernst": [416, 557, 558, 565, 566, 914, 915], "err": [15, 83, 97, 109], "err_cov_emp_ful": 79, "err_cov_emp_pur": 79, "err_cov_mcd": 79, "err_loc_emp_ful": 79, "err_loc_emp_pur": 79, "err_loc_mcd": 79, "errno": 396, "erron": [78, 79, 414, 988, 1036, 1043, 1047], "error": [2, 3, 5, 11, 12, 15, 25, 52, 73, 76, 77, 79, 97, 102, 108, 112, 115, 116, 119, 121, 123, 125, 134, 146, 149, 161, 164, 167, 181, 186, 193, 196, 197, 199, 200, 203, 204, 211, 215, 229, 232, 233, 239, 249, 251, 253, 255, 259, 260, 264, 268, 269, 274, 276, 278, 289, 290, 319, 322, 337, 345, 350, 351, 366, 376, 377, 379, 381, 382, 383, 384, 388, 391, 393, 399, 402, 406, 407, 409, 410, 411, 413, 414, 416, 417, 418, 437, 443, 444, 447, 449, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 515, 524, 531, 533, 534, 537, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 581, 582, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 606, 610, 611, 629, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 688, 689, 690, 692, 693, 696, 698, 701, 702, 709, 711, 712, 720, 721, 723, 727, 740, 743, 744, 745, 746, 747, 748, 750, 751, 753, 764, 778, 782, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 854, 855, 856, 859, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 922, 923, 924, 925, 928, 955, 976, 979, 981, 982, 983, 985, 986, 987, 989, 993, 996, 1000, 1002, 1006, 1007, 1008, 1014, 1015, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "error_": [531, 543], "error_i": [115, 260], "error_norm": [77, 79, 469, 470, 471, 472, 473, 474, 475, 476], "error_on_new": 629, "error_r": 113, "error_scor": [800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 981, 1039, 1043, 1047, 1050], "error_x": [115, 260], "errorbar": [35, 59, 71, 77, 79, 145, 155, 156, 285, 328, 341, 806, 823], "errorbar_": [806, 823], "errorbar_kw": [806, 823], "errorbarcontain": [806, 823], "errors_coef": 201, "errors_lines_": 701, "erwan": 1052, "erwin": 1038, "escal": 394, "escalant": 992, "escalera": 992, "escap": [1048, 1050], "eschibli": 1047, "eschlbeck": 1049, "esdi": 17, "esp": [409, 1035], "especi": [2, 6, 11, 53, 54, 119, 122, 125, 167, 197, 233, 311, 320, 351, 361, 366, 373, 379, 387, 391, 393, 406, 409, 417, 443, 449, 501, 538, 557, 558, 559, 560, 564, 565, 566, 646, 647, 648, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 669, 680, 695, 705, 746, 839, 840, 841, 842, 843, 912, 913, 914, 915, 988, 994, 995, 1002, 1017, 1038, 1043, 1047, 1048, 1049], "espinoza": [1036, 1037], "essenc": [607, 608, 743, 989, 992], "essenti": [259, 320, 377, 381, 409, 413, 414, 509, 992, 995, 1013, 1017, 1043], "est": [43, 130, 167, 189, 212, 233, 235, 253, 273, 307, 317, 361, 402, 416, 562, 735, 869, 981, 992, 1002, 1006, 1046, 1047], "est1": [393, 632], "est2": [393, 632], "est_freq": 215, "est_idx": 307, "est_sev": 215, "establish": [387, 391, 394, 982], "estefania": 1049, "ester": [409, 420, 444], "estev": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "estim": [2, 4, 5, 6, 7, 8, 9, 10, 11, 22, 24, 25, 28, 31, 32, 35, 36, 42, 43, 47, 48, 52, 53, 54, 55, 56, 59, 61, 69, 70, 71, 72, 81, 83, 84, 93, 94, 95, 100, 102, 108, 109, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 127, 130, 131, 132, 133, 134, 136, 144, 145, 146, 148, 149, 150, 152, 154, 156, 158, 159, 160, 161, 163, 166, 167, 175, 178, 181, 185, 186, 187, 192, 197, 198, 199, 201, 202, 204, 205, 214, 215, 216, 225, 226, 227, 232, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 281, 283, 284, 290, 294, 297, 305, 307, 310, 318, 319, 321, 341, 342, 345, 351, 352, 355, 356, 358, 365, 366, 367, 368, 371, 377, 379, 382, 383, 386, 387, 388, 389, 396, 399, 402, 403, 406, 408, 409, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 492, 495, 496, 498, 501, 502, 524, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 576, 577, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 707, 708, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 816, 818, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 923, 924, 925, 927, 929, 930, 933, 935, 936, 937, 948, 949, 950, 952, 960, 976, 980, 987, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1019, 1020, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "estimate_bandwidth": [42, 61, 409, 448, 461], "estimated_coef": [646, 647, 652, 660, 661, 662, 681, 682, 683], "estimated_param_": 1025, "estimator_": [200, 233, 273, 429, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 593, 594, 597, 671, 799, 822, 976, 1050], "estimator__alpha": 122, "estimator__max_depth": [393, 981], "estimator_alpha": 118, "estimator_check": [315, 381, 393, 407, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "estimator_conf": 8, "estimator_config": 8, "estimator_dict": 205, "estimator_errors_": [109, 553, 554], "estimator_html_repr": [381, 410, 1046, 1047, 1048, 1049, 1052], "estimator_modul": 381, "estimator_nam": [8, 205, 381, 386, 438, 576, 698, 700, 702, 923], "estimator_samples_": 1046, "estimator_weights_": [109, 553, 554], "estimatorcv": [393, 1013], "estimators_": [116, 118, 189, 212, 234, 315, 393, 416, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 832, 833, 834, 835, 836, 837, 838, 1036, 1042, 1049], "estimators_early_stop": 120, "estimators_features_": [555, 556, 563], "estimators_samples_": [555, 556, 557, 558, 563, 564, 565, 566, 1041, 1043, 1046, 1052], "est\u00e8v": [0, 397, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "esuli": [1042, 1047], "esvhd": 1044, "et": [0, 9, 76, 77, 109, 124, 185, 296, 374, 376, 405, 409, 411, 414, 416, 417, 418, 451, 498, 519, 520, 528, 535, 541, 544, 563, 682, 683, 719, 720, 839, 841, 861, 862, 897, 940, 941, 988, 989, 992, 998, 1002, 1004, 1007, 1008, 1043, 1051], "eta": [414, 536, 676, 677, 678, 996, 1006, 1040], "eta0": [668, 676, 677, 678, 1006], "eta_0": 1006, "etc": [119, 197, 215, 254, 263, 264, 361, 365, 367, 379, 381, 383, 384, 391, 392, 393, 399, 402, 405, 410, 413, 417, 489, 503, 527, 557, 558, 564, 565, 668, 676, 692, 718, 771, 800, 814, 835, 838, 868, 879, 912, 913, 914, 915, 916, 918, 924, 925, 935, 981, 982, 986, 992, 995, 1012, 1013, 1017, 1035, 1042, 1044, 1045], "eth": 1045, "ethan": [1038, 1041], "ethic": 125, "ethz": [328, 330], "etiquett": 379, "etl": [1013, 1017], "euclidean": [38, 55, 56, 183, 230, 236, 283, 286, 291, 315, 320, 342, 351, 405, 407, 409, 414, 415, 416, 417, 419, 440, 441, 444, 445, 446, 450, 452, 457, 460, 463, 531, 537, 545, 546, 589, 615, 619, 622, 623, 676, 678, 690, 692, 695, 696, 699, 762, 763, 769, 770, 771, 772, 778, 779, 780, 781, 792, 793, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 898, 982, 986, 990, 993, 995, 1004, 1013, 1039, 1042, 1043, 1044, 1045, 1051, 1052], "euclidean_dist": [221, 230, 381, 450, 454, 457, 688, 694, 762, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1035, 1040, 1043, 1044, 1052], "euclideandist": 699, "eugen": [376, 1036, 1041], "eunji": 1043, "eunseop": 1045, "europ": [417, 1002], "european": [726, 756, 992], "eustach": [5, 6, 8, 1017, 1037, 1038], "eval_and_print_metr": 329, "eval_gradi": [157, 419, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "evalml": 1012, "evalu": [2, 3, 4, 8, 9, 15, 22, 30, 34, 36, 40, 41, 47, 53, 57, 61, 62, 66, 69, 70, 96, 109, 115, 116, 117, 119, 120, 122, 125, 141, 142, 152, 164, 170, 173, 177, 186, 199, 204, 215, 225, 226, 241, 251, 252, 256, 257, 258, 259, 262, 264, 265, 266, 268, 270, 271, 273, 274, 276, 281, 290, 292, 296, 305, 310, 312, 317, 321, 322, 329, 338, 342, 350, 361, 368, 372, 374, 381, 385, 393, 395, 407, 410, 417, 418, 419, 447, 449, 464, 466, 488, 491, 492, 493, 496, 509, 520, 536, 551, 561, 562, 563, 567, 568, 591, 594, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 633, 634, 647, 653, 659, 673, 675, 697, 699, 701, 702, 703, 704, 705, 711, 713, 714, 715, 717, 718, 726, 727, 736, 737, 742, 754, 755, 756, 757, 786, 795, 797, 798, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 835, 841, 844, 845, 850, 862, 864, 865, 871, 874, 877, 878, 882, 883, 884, 889, 890, 892, 893, 894, 895, 906, 909, 912, 927, 935, 966, 984, 988, 990, 994, 995, 998, 999, 1000, 1003, 1006, 1008, 1012, 1014, 1017, 1019, 1020, 1023, 1024, 1026, 1029, 1030, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "evaluate_everi": 536, "evaluate_model_and_stor": 311, "evaluation_std": 351, "evaluations_std": 351, "even": [2, 11, 12, 25, 38, 40, 50, 73, 84, 96, 115, 122, 155, 167, 168, 169, 186, 197, 198, 205, 215, 222, 223, 232, 233, 244, 265, 278, 305, 307, 309, 310, 330, 345, 350, 351, 352, 361, 367, 374, 378, 379, 380, 381, 383, 384, 387, 391, 393, 402, 406, 407, 409, 410, 411, 413, 414, 416, 417, 419, 441, 443, 445, 446, 447, 448, 449, 459, 461, 532, 535, 557, 558, 559, 560, 564, 565, 582, 589, 594, 627, 628, 630, 639, 658, 659, 695, 700, 705, 712, 743, 761, 767, 774, 778, 781, 786, 788, 827, 864, 865, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 912, 913, 914, 915, 941, 961, 981, 982, 984, 986, 988, 991, 992, 995, 997, 998, 1000, 1002, 1004, 1006, 1007, 1008, 1017, 1028, 1042, 1043, 1044, 1047, 1049, 1052], "evenli": [6, 37, 50, 122, 170, 201, 254, 417, 945, 1028], "event": [0, 2, 197, 215, 262, 406, 409, 588, 589, 636, 839, 929, 988, 993, 994, 1012, 1017, 1041], "eventu": [246, 253, 407, 409, 418, 593, 1017], "ever": [115, 129, 388, 416, 1017], "everi": [2, 93, 125, 154, 161, 195, 198, 219, 232, 244, 249, 268, 318, 322, 361, 374, 379, 381, 383, 387, 393, 409, 411, 413, 414, 417, 440, 454, 508, 531, 536, 539, 545, 557, 559, 560, 561, 562, 564, 590, 591, 603, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 685, 686, 687, 692, 696, 754, 771, 779, 780, 813, 853, 912, 914, 916, 918, 930, 985, 987, 992, 993, 994, 1002, 1008, 1017, 1023, 1035, 1039, 1041, 1044, 1048, 1052], "everingham": 992, "everingham2010": 992, "evernot": 1010, "everybodi": [373, 379], "everyon": [379, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "everyth": [325, 361, 383, 385, 391, 402, 464, 947, 1012, 1013, 1035], "everywher": 393, "evgeni": 1046, "evid": [265, 350, 387, 409, 413, 414, 416, 644, 797, 991], "evol": 992, "evolut": [6, 8, 271, 365, 367], "evolutionari": 1012, "evolv": [388, 1050], "ex": [68, 377, 380, 396, 1039, 1040], "exabyt": 1026, "exact": [3, 5, 80, 98, 115, 154, 201, 231, 253, 283, 322, 361, 365, 366, 373, 379, 381, 388, 391, 392, 393, 409, 416, 418, 434, 482, 483, 484, 488, 496, 534, 535, 541, 561, 562, 638, 642, 646, 692, 800, 814, 825, 826, 827, 906, 909, 981, 984, 988, 989, 998, 1002, 1006, 1007, 1042, 1043, 1045], "exactli": [69, 109, 166, 176, 181, 190, 197, 201, 249, 253, 267, 306, 345, 350, 379, 381, 405, 409, 413, 414, 417, 422, 446, 453, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 515, 526, 590, 591, 615, 676, 678, 703, 705, 763, 801, 818, 825, 984, 988, 989, 990, 992, 993, 1008, 1027, 1028, 1035, 1041, 1042, 1048], "exagger": [37, 167, 692, 989], "examin": [142, 385, 387, 409, 853], "exampl": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 368, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 392, 393, 396, 401, 402, 407, 420, 421, 422, 424, 425, 427, 428, 430, 431, 434, 435, 436, 439, 456, 457, 459, 461, 463, 471, 478, 480, 481, 485, 486, 487, 493, 497, 503, 505, 507, 508, 509, 516, 517, 518, 528, 529, 531, 545, 546, 547, 548, 555, 572, 573, 577, 583, 585, 586, 592, 595, 596, 598, 601, 603, 609, 612, 616, 620, 621, 624, 626, 629, 636, 637, 638, 642, 650, 651, 654, 660, 661, 663, 667, 675, 683, 685, 686, 687, 694, 695, 696, 699, 708, 710, 711, 714, 715, 716, 720, 721, 723, 724, 725, 726, 728, 730, 731, 733, 736, 739, 740, 743, 744, 747, 751, 754, 756, 758, 759, 760, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 783, 791, 794, 796, 807, 808, 809, 810, 811, 812, 813, 824, 836, 838, 840, 844, 845, 854, 855, 856, 858, 859, 866, 867, 870, 872, 875, 886, 887, 889, 891, 892, 894, 895, 896, 899, 903, 905, 906, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 937, 939, 940, 941, 942, 943, 944, 946, 947, 954, 955, 956, 957, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 982, 990, 1013, 1014, 1015, 1017, 1020, 1023, 1024, 1028, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "example_funct": 379, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1035, "example_gaussian_process_plot_gp_regress": 1035, "exampleclassifi": 233, "exampleclassifierexampleclassifi": 233, "exampleestim": 379, "exampleregressor": 233, "examples_pattern": 379, "exampletransform": 233, "exc": [278, 976], "exce": [83, 281, 316, 419, 442, 515, 602, 649, 658, 1044, 1047, 1049], "exceed": [803, 804, 1041], "excel": [128, 373, 379, 416, 690, 694, 988, 1017], "except": [9, 42, 51, 96, 107, 115, 125, 205, 212, 226, 233, 267, 283, 296, 300, 301, 305, 307, 320, 368, 372, 379, 381, 382, 383, 384, 391, 393, 399, 402, 405, 410, 413, 414, 416, 417, 419, 432, 460, 465, 468, 482, 483, 484, 509, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 627, 630, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 687, 711, 778, 807, 837, 838, 844, 845, 847, 850, 855, 861, 862, 868, 882, 884, 902, 905, 907, 910, 913, 915, 923, 945, 976, 978, 988, 992, 1007, 1019, 1027, 1028, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053], "exception": 215, "excerpt": [4, 1004, 1024], "excess": [201, 446, 1002, 1042], "exchang": [402, 1016], "excit": 1042, "exclud": [6, 17, 166, 305, 379, 383, 393, 446, 464, 466, 729, 730, 738, 783, 784, 787, 813, 821, 879, 967, 992, 995, 1044, 1051], "exclus": [366, 391, 393, 414, 416, 627, 628, 630, 981, 988, 992, 993, 1017, 1042, 1046], "exec": 391, "execut": [14, 20, 25, 26, 33, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 161, 163, 171, 174, 181, 186, 216, 224, 232, 241, 250, 264, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 353, 360, 366, 377, 379, 385, 402, 404, 409, 414, 420, 443, 461, 800, 806, 814, 823, 825, 826, 827, 828, 831, 849, 958, 959, 1002, 1005, 1014, 1020, 1028, 1037, 1040, 1043], "exemplar": [409, 440, 454, 1027], "exemplari": [131, 132], "exemplifi": 393, "exercis": [9, 71, 118, 128, 139, 145, 151, 153, 207, 210, 231, 247, 254, 264, 272, 299, 300, 330, 343, 346, 347, 367, 368, 376, 379, 501, 502, 504, 505, 652, 653, 658, 800, 805, 846, 909, 1014, 1020, 1038], "exercise_01_language_train_model": 1028, "exercise_02_senti": 1028, "exercise_xx_script": 1028, "exhaust": [146, 260, 315, 316, 317, 318, 319, 320, 321, 322, 365, 376, 384, 392, 403, 409, 416, 800, 803, 804, 814, 894, 895, 897, 988, 1028, 1030], "exhibit": [150, 202, 342, 350, 395, 413, 414, 416, 419, 1000], "exist": [6, 7, 11, 15, 17, 51, 215, 259, 301, 305, 342, 373, 378, 381, 382, 385, 391, 393, 394, 396, 402, 409, 413, 414, 416, 417, 424, 434, 437, 443, 444, 447, 449, 451, 453, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 499, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 585, 588, 589, 590, 591, 594, 597, 603, 610, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 698, 700, 702, 762, 765, 769, 799, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 976, 984, 989, 991, 992, 996, 998, 999, 1002, 1017, 1027, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "exist_ok": 6, "existing_credit": 253, "exit": [70, 283, 383, 387, 468], "exp": [44, 52, 64, 102, 112, 122, 150, 181, 207, 288, 293, 296, 316, 317, 321, 342, 406, 409, 410, 415, 421, 452, 465, 521, 533, 536, 615, 616, 622, 641, 759, 766, 776, 861, 862, 880, 986, 988, 990, 994, 995, 996, 1005, 1006, 1007, 1026], "exp10": 167, "exp_dirichlet_component_": 536, "exp_dist_embed": 293, "expand": [2, 47, 63, 228, 311, 316, 361, 371, 416, 444, 450, 499, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 992, 1036, 1043, 1044, 1051], "expand_frame_repr": 215, "expans": [2, 161, 317, 450, 879, 1044], "expect": [2, 3, 8, 11, 22, 35, 42, 51, 84, 90, 98, 109, 112, 114, 116, 119, 122, 125, 127, 143, 144, 149, 155, 164, 165, 169, 171, 183, 188, 197, 198, 199, 201, 205, 215, 230, 233, 236, 237, 244, 245, 248, 249, 253, 266, 283, 310, 345, 350, 351, 361, 365, 366, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 399, 404, 406, 409, 410, 411, 413, 416, 417, 418, 432, 464, 465, 467, 468, 469, 482, 483, 484, 496, 523, 532, 536, 538, 541, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 570, 572, 588, 589, 591, 595, 597, 606, 611, 627, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 675, 678, 679, 695, 704, 705, 716, 735, 788, 794, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 854, 855, 856, 857, 862, 865, 870, 877, 878, 881, 884, 885, 894, 895, 902, 904, 905, 906, 907, 908, 909, 910, 913, 915, 955, 981, 988, 991, 992, 994, 998, 1002, 1006, 1007, 1008, 1014, 1016, 1024, 1027, 1028, 1030, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "expected_anomaly_fract": 236, "expected_i": 122, "expected_n_anomali": 236, "expected_ri": 705, "expectedli": 350, "expens": [0, 54, 115, 130, 149, 166, 168, 227, 256, 268, 338, 342, 350, 351, 352, 367, 385, 393, 409, 410, 413, 416, 417, 449, 468, 508, 800, 803, 804, 814, 827, 902, 904, 989, 991, 1002, 1007, 1012, 1017, 1028, 1039], "experi": [109, 152, 156, 166, 167, 168, 169, 173, 199, 253, 278, 310, 345, 351, 352, 366, 373, 379, 382, 394, 407, 413, 515, 728, 785, 988, 993, 1004, 1010, 1011, 1012, 1017, 1026, 1028], "experienc": 379, "experiment": [122, 161, 162, 197, 270, 271, 317, 318, 368, 379, 381, 382, 389, 391, 393, 399, 413, 496, 549, 627, 696, 803, 804, 962, 981, 982, 988, 991, 992, 1012, 1013, 1022, 1030, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "expert_r": 410, "expertis": [378, 379, 391], "expit": [121, 187, 416, 561, 988, 1042], "explain": [2, 3, 10, 25, 54, 71, 83, 84, 101, 122, 149, 154, 155, 168, 169, 197, 215, 226, 233, 249, 269, 272, 311, 350, 351, 366, 377, 379, 383, 391, 402, 404, 412, 414, 419, 493, 521, 524, 534, 541, 544, 549, 625, 648, 656, 669, 680, 721, 722, 723, 724, 728, 785, 988, 995, 1008, 1011, 1012, 1024, 1026, 1027, 1046, 1048, 1049], "explained_vari": [351, 992], "explained_variance_": [84, 534, 541, 544, 1027, 1042], "explained_variance_ratio": 1041, "explained_variance_ratio_": [71, 101, 351, 414, 534, 541, 544, 549, 1024, 1038, 1041], "explained_variance_scor": [992, 1038, 1042, 1049], "explan": [25, 84, 233, 365, 378, 379, 406, 417, 981, 991, 993, 1008, 1017, 1038], "explic": 1004, "explicit": [2, 125, 164, 168, 173, 225, 233, 241, 273, 275, 342, 365, 366, 367, 378, 380, 391, 393, 394, 399, 410, 417, 423, 472, 499, 501, 502, 541, 551, 552, 631, 638, 639, 641, 676, 800, 801, 808, 848, 856, 864, 904, 909, 956, 960, 984, 986, 988, 992, 1002, 1008, 1012, 1014, 1035, 1039, 1044, 1045, 1048, 1052], "explicitli": [2, 44, 116, 149, 156, 161, 162, 198, 229, 233, 322, 342, 352, 361, 366, 373, 375, 379, 380, 381, 383, 391, 393, 399, 402, 404, 413, 417, 419, 535, 549, 550, 579, 580, 597, 627, 648, 658, 659, 669, 680, 709, 727, 782, 788, 789, 803, 804, 835, 838, 844, 845, 870, 894, 895, 960, 981, 982, 984, 986, 988, 989, 992, 994, 995, 1002, 1017, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1053], "explod": 311, "exploit": [23, 281, 402, 993, 1013, 1038], "exploit_incremental_learn": [806, 828], "explor": [11, 35, 112, 113, 125, 170, 222, 223, 236, 253, 260, 261, 267, 268, 278, 312, 317, 338, 351, 361, 373, 376, 378, 385, 409, 416, 472, 800, 803, 811, 885, 981, 988, 989, 991, 997, 999, 1002, 1017, 1022, 1028, 1041], "exploratori": [167, 1017], "explos": [800, 814, 825, 826, 827], "expm1": 73, "expon": [419, 616, 676, 677, 678, 812, 861, 862, 879, 981], "exponenti": [44, 73, 149, 154, 288, 293, 415, 416, 419, 449, 536, 554, 559, 614, 619, 622, 639, 643, 758, 759, 844, 845, 849, 861, 862, 879, 984, 988, 992, 1007, 1026, 1042, 1048], "export": [377, 380, 381, 396, 916, 917, 1008, 1012, 1044], "export_graphviz": [1008, 1040, 1042, 1048, 1050, 1051], "export_text": [1008, 1044, 1051], "expos": [146, 233, 278, 318, 320, 366, 372, 376, 393, 399, 406, 410, 416, 418, 419, 437, 464, 553, 554, 561, 562, 567, 568, 569, 570, 593, 594, 602, 611, 799, 800, 803, 804, 814, 822, 833, 834, 835, 836, 837, 838, 919, 960, 988, 992, 994, 1023, 1025, 1027, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "exposur": [197, 215, 988], "express": [2, 5, 10, 11, 109, 115, 149, 154, 167, 259, 260, 311, 317, 335, 342, 352, 373, 374, 379, 380, 385, 391, 402, 409, 414, 415, 416, 417, 450, 456, 457, 588, 589, 591, 716, 788, 800, 806, 814, 823, 825, 826, 827, 828, 831, 851, 984, 988, 992, 996, 1002, 1003, 1008, 1043], "expsinesquar": [149, 154, 158, 419], "exstrac": 992, "ext": 646, "extend": [11, 53, 54, 65, 107, 198, 247, 253, 266, 338, 376, 377, 391, 393, 406, 407, 409, 414, 416, 631, 720, 821, 833, 836, 837, 869, 871, 888, 904, 905, 919, 984, 992, 993, 1007, 1013, 1015, 1030, 1040, 1041, 1042, 1043, 1045, 1050], "extens": [266, 268, 288, 365, 366, 373, 374, 377, 380, 382, 383, 387, 388, 391, 402, 409, 414, 496, 503, 534, 741, 935, 943, 989, 991, 992, 1011, 1012, 1017, 1035, 1041, 1048, 1049, 1051, 1052], "extent": [7, 56, 151, 152, 153, 230, 346, 440, 535, 696, 797, 992], "extercond": 119, "extern": [136, 149, 253, 367, 368, 372, 376, 379, 381, 384, 391, 393, 405, 409, 417, 418, 419, 593, 610, 611, 717, 737, 795, 988, 991, 992, 995, 1008, 1013, 1020, 1026, 1030, 1043, 1047], "exterqu": [119, 130], "extmath": [246, 350, 388, 407, 453, 1035, 1036, 1041, 1042, 1045, 1049, 1050, 1052], "extr": 6, "extra": [44, 118, 125, 235, 283, 322, 352, 377, 378, 380, 383, 393, 402, 416, 417, 438, 443, 447, 459, 464, 532, 557, 558, 566, 590, 591, 700, 701, 702, 825, 848, 914, 915, 931, 991, 992, 995, 1035, 1038, 1040, 1041, 1043, 1048, 1050], "extra_cflag": 385, "extra_tre": [914, 915], "extract": [1, 2, 4, 6, 9, 10, 14, 15, 48, 53, 67, 68, 69, 70, 74, 83, 93, 115, 142, 146, 164, 173, 212, 223, 251, 258, 259, 263, 264, 265, 267, 276, 302, 319, 329, 341, 350, 352, 361, 368, 371, 374, 376, 381, 385, 388, 391, 409, 410, 413, 414, 450, 452, 455, 456, 462, 464, 488, 489, 493, 494, 503, 504, 531, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 583, 584, 588, 589, 591, 593, 594, 597, 599, 631, 718, 788, 800, 814, 841, 863, 864, 909, 941, 949, 956, 981, 989, 993, 997, 1002, 1006, 1012, 1014, 1017, 1020, 1024, 1025, 1030, 1035, 1036, 1044, 1047], "extract_dbscan": 409, "extract_patches_2d": [48, 96, 417, 587, 1043], "extract_scor": 262, "extractal": 6, "extractor": [197, 302, 367, 374, 393, 417, 503, 581, 582, 588, 589, 591, 981, 1035], "extran": 379, "extrapol": [2, 149, 176, 198, 229, 262, 883, 992, 1002, 1008, 1048, 1050], "extratre": [118, 128, 365, 1038], "extratreeclassifi": [557, 566, 915, 993, 1039, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extratreeregressor": [558, 563, 566, 914, 993, 998, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extratreesclassifi": [118, 128, 416, 418, 558, 564, 566, 914, 915, 993, 1038, 1039, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extratreesregressor": [235, 416, 557, 565, 566, 914, 915, 993, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extrem": [122, 197, 199, 235, 236, 305, 312, 328, 351, 379, 382, 408, 409, 414, 557, 558, 564, 565, 566, 632, 633, 679, 724, 752, 914, 915, 916, 918, 992, 994], "extrema": 986, "exxon": 10, "ey": [78, 79, 245, 249, 338, 374, 534, 541, 550], "eyast": 1049, "ezebunandu": 1047, "ezeiza": 764, "ezri": 1048, "f": [0, 2, 3, 5, 9, 10, 11, 13, 15, 18, 24, 28, 30, 35, 41, 45, 46, 47, 50, 51, 53, 56, 62, 65, 69, 73, 84, 96, 109, 112, 115, 116, 117, 119, 120, 122, 125, 130, 131, 137, 140, 142, 145, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 169, 170, 173, 181, 183, 186, 188, 197, 198, 199, 201, 207, 211, 215, 219, 230, 232, 233, 236, 240, 248, 253, 257, 259, 260, 261, 262, 265, 266, 268, 269, 271, 273, 283, 286, 299, 300, 301, 307, 310, 311, 315, 317, 319, 321, 322, 325, 326, 337, 342, 345, 350, 351, 352, 361, 374, 379, 380, 381, 383, 385, 391, 402, 406, 410, 414, 416, 417, 418, 419, 487, 508, 509, 531, 532, 537, 538, 566, 581, 582, 583, 587, 592, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 617, 627, 632, 635, 658, 696, 713, 723, 726, 729, 730, 756, 783, 784, 787, 788, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 828, 829, 831, 861, 862, 866, 875, 878, 879, 883, 884, 885, 911, 919, 924, 925, 976, 984, 987, 996, 999, 1000, 1002, 1006, 1014, 1037, 1043, 1044, 1045, 1047, 1049], "f0_c0": 885, "f0_c1": 885, "f0_c2": 885, "f0e442": 243, "f1": [4, 23, 30, 68, 143, 257, 302, 325, 326, 329, 413, 713, 729, 730, 738, 783, 822, 992, 993, 1024, 1028, 1039, 1051], "f1_c0": 885, "f1_c1": 885, "f1_c2": 885, "f1_macro": [413, 992, 1039], "f1_micro": [992, 1039], "f1_sampl": 992, "f1_score": [23, 266, 329, 374, 408, 738, 992, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1051, 1052], "f1_weight": [992, 1039], "f2": [383, 993], "f2001": 992, "f2006": 992, "f3": 993, "f4": 498, "f401": [43, 65, 88, 99, 168, 194, 218, 220], "f781bf": [38, 42, 60, 61], "f7bd01": 38, "f_": [416, 635, 730, 992], "f_0": 127, "f_1": [127, 266, 992], "f_beta": 992, "f_classif": [142, 143, 341, 418, 592, 595, 596, 598, 599, 600, 604, 606, 609], "f_i": 406, "f_idx": 127, "f_j": [406, 1000], "f_m": 416, "f_n": 266, "f_p": 266, "f_regress": [52, 141, 418, 592, 595, 596, 598, 599, 600, 604, 605, 609, 1038, 1042, 1049, 1052], "f_score": 266, "f_statist": [605, 606], "f_test": 141, "fa": [76, 92, 102, 103, 104, 164, 385, 414, 473, 476, 532, 541, 800, 826, 1014], "fa_estim": 93, "fa_scor": 100, "fab": [1017, 1045, 1046], "fabia": [405, 719], "fabian": [0, 184, 202, 219, 295, 398, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1052], "fabiana": 1046, "fabio": 1041, "fabisch": [0, 398, 1037, 1038, 1039, 1041], "fabrizio": 1050, "face": [1, 3, 13, 14, 34, 46, 49, 51, 66, 92, 96, 98, 100, 102, 103, 104, 117, 164, 173, 225, 230, 232, 241, 350, 372, 379, 383, 414, 416, 418, 449, 472, 493, 494, 495, 521, 532, 533, 537, 539, 540, 541, 543, 558, 584, 657, 673, 697, 713, 814, 830, 847, 884, 909, 927, 995, 1008, 1009, 1010, 1014, 1022, 1027, 1030, 1035, 1043], "face_compress": 1027, "face_id": 235, "facecolor": [10, 24, 32, 43, 58, 93, 99, 111, 138, 157, 218, 234, 259, 290, 307, 336, 339, 342, 343, 344], "faces_cent": 93, "facial": 374, "facil": 991, "facilit": [365, 393, 402, 1012, 1013, 1041, 1044], "fact": [2, 9, 17, 23, 79, 84, 109, 120, 122, 169, 230, 240, 278, 281, 350, 373, 386, 391, 393, 412, 414, 415, 416, 417, 649, 668, 670, 704, 986, 988, 995, 1002, 1006, 1007, 1013, 1017, 1049], "facto": 1045, "factor": [1, 4, 7, 14, 24, 29, 42, 44, 51, 53, 60, 76, 83, 92, 98, 102, 104, 128, 164, 167, 211, 223, 226, 236, 253, 270, 271, 283, 284, 297, 299, 300, 305, 307, 317, 319, 337, 365, 366, 379, 385, 388, 393, 405, 407, 409, 416, 417, 419, 440, 442, 454, 469, 471, 472, 473, 474, 476, 478, 488, 504, 514, 515, 527, 532, 535, 536, 538, 540, 541, 544, 545, 546, 547, 549, 550, 561, 562, 563, 588, 591, 597, 613, 649, 650, 651, 654, 655, 656, 682, 683, 692, 719, 783, 800, 803, 804, 826, 850, 884, 898, 900, 908, 940, 941, 981, 988, 989, 995, 1002, 1005, 1009, 1012, 1014, 1029, 1030, 1035, 1036, 1038, 1039, 1041, 1049, 1051], "factoranalysi": [93, 100, 103, 414, 544, 1036, 1038, 1047, 1049], "factori": [59, 253, 259, 417, 962, 992], "facundo": [1046, 1049], "fagan": 1044, "fail": [2, 52, 64, 94, 100, 157, 158, 176, 181, 201, 233, 259, 315, 366, 377, 379, 381, 382, 387, 394, 396, 412, 413, 440, 472, 474, 676, 677, 678, 861, 862, 923, 935, 981, 989, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "failur": [164, 165, 167, 171, 192, 379, 387, 657, 785, 830, 924, 925, 1014, 1016, 1017, 1048, 1049, 1053], "fair": [10, 25, 416, 690, 694, 833, 993, 1017], "fairer": 361, "fairli": [80, 121, 220, 275, 300, 387, 409, 559, 560, 699, 993, 1026], "faith": [17, 155, 343], "fake": 417, "falak": 1044, "fall": [2, 11, 122, 125, 156, 258, 259, 379, 381, 407, 409, 417, 434, 446, 447, 508, 509, 727, 728, 794, 881, 893, 991, 992, 1002, 1019, 1027, 1044], "fallback": [394, 396, 832, 833, 992], "fals": [2, 3, 5, 6, 8, 9, 12, 13, 18, 19, 22, 24, 25, 30, 31, 32, 37, 40, 42, 44, 45, 52, 53, 62, 65, 68, 69, 70, 77, 79, 90, 97, 101, 102, 109, 115, 116, 119, 122, 123, 125, 133, 136, 149, 154, 155, 156, 157, 167, 168, 169, 170, 176, 177, 181, 183, 197, 198, 202, 203, 205, 213, 215, 218, 221, 233, 234, 236, 240, 243, 253, 256, 257, 259, 262, 263, 266, 267, 268, 269, 270, 271, 272, 274, 283, 287, 293, 296, 300, 301, 305, 306, 311, 312, 315, 317, 318, 319, 320, 322, 327, 338, 340, 342, 345, 346, 350, 351, 373, 379, 380, 381, 384, 393, 399, 406, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 422, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 513, 515, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 636, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 708, 709, 711, 712, 713, 714, 715, 718, 719, 726, 727, 728, 729, 730, 731, 738, 742, 743, 750, 751, 754, 756, 761, 763, 767, 769, 774, 778, 782, 783, 784, 785, 787, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 922, 923, 924, 925, 935, 942, 953, 954, 957, 958, 962, 963, 964, 966, 973, 978, 979, 981, 982, 988, 992, 995, 1002, 1006, 1007, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "false_discovery_r": 595, "famili": [4, 253, 365, 367, 393, 409, 412, 414, 417, 418, 592, 595, 596, 598, 599, 600, 606, 861, 862, 880, 892, 988, 1002, 1006, 1024, 1026, 1039, 1049], "familiar": [379, 415, 1043], "famou": [374, 376, 416, 1007], "famous": 994, "fan": [0, 366, 394, 397, 1007, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fanci": 417, "fancybox": 344, "fanelli": [1050, 1051], "fang": [658, 1042, 1043], "fanni": 1045, "fantasi": 997, "fantast": 1017, "faouzi": [1045, 1046], "faq": [0, 387, 413, 692, 989, 1002], "far": [23, 58, 80, 119, 150, 156, 167, 197, 215, 338, 342, 350, 352, 379, 388, 419, 720, 884, 967, 997, 998, 1007, 1017, 1026], "farach": 984, "farahsae": 1043, "farawai": 995, "fare": [69, 169, 240, 319, 320, 1039, 1040], "fargo": 10, "farhan": 1051, "farlei": [0, 398, 1035], "farouk": [1043, 1044], "farther": 725, "farthest": 409, "fashion": [5, 114, 120, 205, 268, 366, 393, 405, 406, 409, 414, 416, 553, 557, 558, 559, 560, 564, 565, 566, 602, 627, 830, 853, 868, 871, 877, 888, 912, 913, 914, 915, 963, 982, 988, 992, 1002, 1044], "fast": [11, 25, 60, 173, 181, 186, 212, 213, 231, 232, 306, 352, 365, 374, 379, 388, 409, 411, 413, 414, 416, 417, 421, 446, 447, 469, 474, 508, 532, 533, 535, 538, 540, 544, 547, 564, 565, 566, 588, 589, 591, 632, 633, 640, 658, 659, 672, 674, 687, 699, 800, 814, 825, 826, 836, 837, 844, 845, 849, 860, 941, 961, 984, 988, 991, 994, 995, 997, 998, 1008, 1012, 1017, 1028, 1035, 1036, 1041, 1042, 1045, 1046], "fast_dict": 1045, "fast_dot": 1042, "fast_logdet": 388, "fast_svd": 1035, "faster": [5, 17, 37, 62, 71, 93, 114, 115, 119, 120, 122, 125, 146, 168, 173, 183, 197, 199, 212, 213, 215, 232, 236, 253, 283, 285, 301, 316, 318, 319, 350, 351, 352, 365, 373, 379, 387, 388, 393, 402, 407, 409, 414, 418, 419, 421, 443, 447, 449, 451, 452, 453, 462, 508, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 553, 559, 560, 561, 562, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 672, 674, 684, 687, 691, 695, 726, 756, 778, 779, 780, 844, 845, 849, 861, 862, 879, 881, 883, 893, 897, 941, 961, 981, 985, 988, 993, 995, 996, 999, 1004, 1006, 1007, 1008, 1012, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fastest": [55, 257, 352, 447, 670, 672, 674, 687, 940, 941, 991], "fastest_top_recall_high_precision_index": 257, "fastfm": 1012, "fastica": [92, 104, 164, 196, 414, 532, 535, 541, 1014, 1027, 1035, 1037, 1043, 1049, 1050], "fastkmean": 449, "fastmcd": [411, 469, 474], "fastnc": 860, "fat": [521, 524], "fatima": [1049, 1052], "fato": 1048, "fauchereau": 1048, "fault": [387, 1043, 1045, 1047], "faulti": [200, 1035], "favor": [3, 80, 115, 243, 249, 391, 411, 416, 673, 675, 730, 808, 810, 863, 981, 1000, 1037, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "favorit": [379, 391, 1017], "favour": [792, 989, 991, 1044], "fawcett": [788, 789, 992], "fazlul": 1037, "fbeta_scor": [729, 742, 783, 992, 1037, 1038, 1039, 1040, 1045, 1051], "fc": [7, 288, 374], "fc2009": 992, "fcd116": 90, "fcharra": [1050, 1053], "fcluster": 170, "fcostin": 1035, "fd": 6, "fdr": 592, "fear": 1028, "feasibl": [379, 873, 874, 884], "feast": 410, "feat": [6, 8, 383, 417], "feat0": [228, 316], "feat1": [228, 316, 417], "feat2": [228, 316, 417], "feat3": [228, 316, 417], "feat_idx": 627, "featur": [1, 3, 4, 5, 6, 8, 9, 10, 13, 14, 17, 18, 23, 24, 25, 28, 29, 30, 31, 34, 40, 43, 45, 48, 56, 58, 61, 66, 67, 68, 69, 70, 71, 73, 74, 78, 79, 83, 84, 87, 88, 89, 90, 93, 95, 97, 99, 100, 101, 103, 108, 110, 113, 115, 118, 122, 124, 129, 130, 131, 132, 133, 134, 136, 137, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 168, 171, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 193, 196, 197, 198, 199, 201, 202, 205, 206, 212, 213, 214, 216, 219, 225, 228, 230, 234, 235, 236, 239, 240, 241, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 281, 286, 287, 288, 291, 292, 293, 294, 298, 299, 301, 303, 304, 305, 308, 312, 313, 314, 316, 319, 320, 321, 322, 325, 326, 328, 329, 330, 333, 334, 335, 338, 342, 345, 348, 349, 352, 353, 356, 357, 358, 359, 361, 368, 371, 372, 373, 374, 375, 376, 377, 381, 382, 384, 386, 387, 388, 391, 392, 393, 394, 395, 396, 402, 406, 409, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 425, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 579, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 618, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 697, 701, 702, 703, 713, 721, 722, 723, 724, 741, 742, 745, 746, 748, 758, 759, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 781, 785, 788, 790, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 938, 957, 967, 968, 969, 973, 981, 984, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1024, 1025, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "feature_0": 917, "feature_1": [631, 917], "feature_2": 631, "feature_all_": 841, "feature_count_": [839, 841, 843], "feature_extract": [6, 13, 17, 44, 45, 48, 49, 52, 64, 68, 96, 164, 260, 329, 349, 350, 351, 352, 367, 368, 374, 409, 410, 417, 464, 544, 877, 990, 1027, 1028, 1035, 1036, 1037, 1038, 1041, 1042], "feature_import": 123, "feature_importances_": [116, 117, 123, 146, 169, 170, 393, 416, 418, 553, 554, 557, 558, 559, 560, 564, 565, 566, 593, 594, 597, 912, 913, 914, 915, 1037, 1040, 1044], "feature_index": 417, "feature_indices_": 1043, "feature_log_prob_": [839, 840, 841, 843], "feature_map": [231, 305], "feature_map__n_compon": 231, "feature_map_fouri": 231, "feature_map_nystroem": [231, 639], "feature_nam": [13, 17, 88, 103, 116, 123, 127, 146, 167, 169, 206, 237, 273, 286, 305, 315, 316, 317, 322, 335, 350, 356, 372, 374, 384, 410, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 582, 631, 632, 633, 885, 916, 917, 918, 1000, 1008, 1051], "feature_name_combin": [877, 1051], "feature_names_": 581, "feature_names_in": 1049, "feature_names_in_": [240, 312, 318, 393, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1048, 1049, 1050, 1051, 1053], "feature_names_out": [425, 430, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1049, 1052], "feature_rang": [302, 874, 890, 1002, 1037, 1047], "feature_select": [52, 69, 70, 72, 140, 141, 142, 143, 144, 145, 146, 147, 164, 240, 317, 319, 341, 361, 368, 393, 399, 410, 418, 581, 981, 1014, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "feature_selector": 146, "feature_to_plot": 191, "feature_union": 1051, "featureagglomer": [49, 52, 440, 441, 1009, 1027, 1038, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "featureforg": 1017, "featurehash": [17, 68, 164, 329, 349, 350, 351, 353, 367, 374, 417, 488, 581, 588, 589, 590, 591, 877, 1014, 1036, 1041, 1042, 1043, 1049, 1050], "featureheash": 352, "features_": [629, 982], "features__pca__n_compon": 72, "features__univ_select__k": 72, "features_idx": 305, "features_info": 168, "features_nam": [166, 1042], "features_samples_ratio": 31, "featureselector": 601, "featuretool": 1012, "featureunion": [2, 72, 371, 393, 399, 407, 464, 629, 866, 982, 1013, 1017, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "featurewis": 880, "feb": [36, 440, 454], "februari": [0, 411, 473, 992, 1036, 1040, 1052], "fed": [6, 130, 361, 374, 417, 981, 997, 1002, 1046], "feda": [1043, 1044], "feder": 1012, "federico": [1037, 1038, 1043, 1044, 1049], "federicopisanu": 1045, "federicov": 6, "feed": [6, 84, 198, 233, 352, 374, 377, 384, 391, 409, 417, 742, 877, 993], "feedback": [256, 378, 379, 380, 394, 1012, 1016, 1043], "feedforward": [861, 862], "feedstock": 383, "feel": [25, 162, 305, 378, 379, 387, 409, 446, 1008], "feel_temp": [2, 168], "feghali": 1052, "fei": [563, 998], "feld": [1039, 1051], "feldbauer": [1043, 1044, 1045, 1046, 1049], "feldman": [1037, 1042, 1043, 1044, 1045], "felip": [1048, 1049, 1050, 1051], "felix": [1037, 1042, 1043, 1045, 1047, 1048, 1049], "femal": [69, 167, 320, 384, 877, 878, 1002], "fenc": 384, "feng": [1045, 1047, 1048, 1049], "fenil": 1048, "fenx": 1043, "ferdman": 1052, "ferenc": 1017, "fernand": [1043, 1049, 1050], "fernandez": 1044, "fernando": [1040, 1047], "fern\u00e1ndez": 1049, "ferrando": 1045, "ferrari": 1043, "ferreira": [1043, 1048, 1049], "ferri": [418, 992], "ferria": 1042, "ferrin": 1049, "ferriss": 1042, "ferr\u00e9": 1049, "ferr\u00edn": 1046, "fetal": 236, "fetch": [10, 15, 130, 167, 215, 253, 273, 372, 373, 374, 379, 383, 384, 387, 407, 414, 496, 555, 556, 557, 558, 563, 564, 565, 566, 588, 589, 591, 1043, 1051], "fetch_": 1042, "fetch_20newsgroup": [13, 17, 68, 260, 329, 350, 351, 352, 374, 489, 1028, 1040, 1045, 1053], "fetch_20newsgroups_vector": [5, 212, 230, 374, 1035, 1045, 1047, 1052, 1053], "fetch_california_h": [115, 120, 161, 162, 305, 317, 374, 392, 410, 1044, 1046, 1053], "fetch_covtyp": [173, 236, 317, 374, 1044, 1047, 1049, 1053], "fetch_data": 1028, "fetch_kddcup99": [236, 374, 1042, 1043, 1044, 1047, 1048, 1053], "fetch_lfw_pair": [374, 1040, 1050, 1053], "fetch_lfw_peopl": [4, 374, 1024, 1050, 1053], "fetch_mldata": 1043, "fetch_olivetti_fac": [48, 93, 117, 235, 374, 1043, 1044, 1045, 1053], "fetch_openml": [2, 3, 11, 69, 73, 119, 125, 130, 154, 167, 168, 169, 197, 205, 213, 215, 227, 236, 240, 253, 273, 278, 281, 283, 301, 311, 315, 319, 322, 373, 383, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fetch_rcv1": [374, 1040, 1044, 1053], "fetch_species_distribut": [9, 296, 1044, 1053], "fetcher": [372, 1040, 1042, 1051], "feth": 1035, "feurer": [1038, 1043], "fevott": [414, 538, 540, 547], "few": [0, 5, 13, 17, 37, 44, 50, 97, 119, 125, 152, 155, 156, 186, 195, 197, 199, 215, 232, 233, 243, 261, 262, 266, 301, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 325, 345, 352, 365, 374, 375, 376, 379, 381, 392, 394, 399, 402, 405, 406, 409, 413, 414, 416, 418, 419, 437, 449, 561, 562, 655, 692, 695, 897, 941, 960, 988, 989, 991, 992, 995, 996, 1005, 1007, 1008, 1017, 1019, 1026, 1027, 1028, 1041, 1051], "fewer": [2, 12, 24, 53, 109, 118, 120, 197, 365, 380, 409, 418, 419, 448, 461, 541, 553, 594, 696, 834, 945, 988, 993, 995, 1040, 1041, 1042], "fewest": [258, 627], "ff": 387, "ff0000": [29, 291, 299], "ff3333": 90, "ff7216": 90, "ff7f00": [42, 60, 226], "ff9c34": [57, 62], "ffaaaa": 291, "ffc107": 309, "fft": 640, "fhaselbeck": 1047, "fhoang7": 1044, "fhr": 236, "fi": 875, "fibins": [1043, 1044], "fidel": 12, "fidor": 1051, "fiedler": 1041, "fiegel": [1047, 1048, 1050], "field": [146, 215, 376, 405, 409, 410, 417, 498, 501, 617, 988, 990, 999, 1007, 1012, 1016, 1028, 1036], "fifth": [232, 985, 1019], "fig": [2, 3, 5, 6, 7, 8, 11, 13, 23, 25, 28, 32, 40, 41, 43, 51, 53, 55, 58, 62, 64, 71, 76, 78, 84, 88, 93, 98, 99, 103, 109, 115, 116, 119, 120, 122, 123, 125, 127, 128, 130, 132, 152, 158, 161, 168, 170, 173, 177, 185, 188, 191, 192, 194, 195, 197, 198, 201, 205, 210, 212, 215, 218, 219, 220, 221, 222, 223, 227, 229, 236, 237, 248, 253, 254, 255, 256, 259, 260, 261, 262, 265, 268, 269, 270, 273, 281, 283, 285, 287, 288, 296, 300, 301, 305, 306, 307, 309, 310, 311, 315, 319, 320, 335, 342, 344, 345, 346, 347, 350, 351, 352, 355, 386, 1024, 1027], "fig1": 65, "fig2": 65, "fig_num": 194, "figaspect": 309, "fight": [37, 201, 1017], "fighter": 68, "fignum": 343, "figsiz": [2, 3, 4, 8, 10, 11, 12, 13, 23, 24, 25, 28, 29, 30, 32, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 71, 73, 78, 80, 83, 84, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 109, 111, 112, 119, 120, 121, 122, 123, 125, 128, 130, 131, 141, 151, 153, 157, 158, 161, 162, 167, 168, 170, 173, 176, 177, 180, 181, 187, 191, 194, 195, 196, 197, 198, 199, 201, 203, 205, 208, 211, 213, 215, 218, 219, 220, 222, 223, 226, 227, 229, 231, 234, 235, 236, 237, 243, 245, 246, 249, 253, 254, 255, 256, 261, 262, 263, 266, 268, 269, 273, 274, 281, 283, 285, 286, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 319, 320, 325, 327, 336, 338, 342, 343, 344, 345, 346, 347, 350, 351, 352, 918, 1024], "figur": [4, 5, 6, 8, 10, 12, 22, 23, 24, 25, 29, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 76, 80, 83, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110, 111, 112, 121, 122, 123, 124, 125, 128, 129, 133, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 167, 168, 169, 170, 176, 181, 182, 187, 190, 191, 194, 196, 198, 199, 203, 208, 212, 213, 214, 220, 221, 222, 226, 230, 231, 232, 234, 235, 237, 243, 245, 246, 249, 252, 258, 263, 264, 274, 288, 292, 293, 296, 299, 302, 305, 307, 308, 312, 315, 317, 325, 326, 327, 336, 338, 343, 356, 357, 358, 379, 409, 415, 416, 417, 419, 438, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 981, 985, 988, 991, 992, 995, 996, 999, 1000, 1006, 1007, 1008, 1023, 1024, 1026, 1027, 1048], "figure_": [30, 168, 237, 315, 317, 386, 438, 631, 632, 697, 698, 700, 701, 702, 806, 823], "figure_titl": 119, "filali": 1043, "file": [6, 10, 14, 20, 26, 30, 33, 46, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 241, 250, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 350, 351, 353, 360, 365, 366, 367, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 402, 410, 414, 487, 493, 494, 496, 503, 508, 509, 534, 579, 580, 588, 589, 591, 916, 995, 1008, 1014, 1016, 1020, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "file_1": 503, "file_2": 503, "file_42": 503, "file_43": 503, "file_44": 503, "file_id": 373, "filenam": [6, 15, 329, 374, 385, 402, 488, 500, 503, 504, 507, 588, 589, 591, 1028, 1035, 1040, 1043, 1044], "filesystem": [387, 396, 1048], "filho": 406, "filip": [1052, 1053], "filipj8": [1042, 1043], "fill": [32, 118, 136, 169, 254, 288, 356, 393, 410, 414, 515, 527, 538, 540, 547, 587, 630, 916, 918, 982, 995, 1008], "fill_between": [11, 122, 125, 136, 149, 154, 156, 158, 176, 177, 215, 259, 261, 262, 263, 269, 806, 823], "fill_between_": [806, 823], "fill_between_kw": [806, 823], "fill_betweenx": 58, "fill_diagon": [170, 221], "fill_legend": 215, "fill_valu": [162, 228, 238, 316, 423, 426, 432, 433, 627, 630, 1002, 1043, 1051, 1052], "fillna": [215, 236], "filo": [1035, 1038], "filter": [6, 13, 44, 45, 71, 203, 215, 257, 259, 285, 350, 366, 374, 385, 388, 407, 409, 417, 448, 488, 489, 503, 588, 591, 595, 596, 597, 598, 599, 600, 774, 839, 933, 957, 994, 995, 1025, 1028, 1045], "filter_param": 774, "filtered_cv_result": 257, "filterwarn": [42, 60, 212, 300, 301, 379, 1002], "final": [2, 11, 24, 25, 32, 38, 40, 53, 68, 69, 78, 80, 84, 89, 98, 109, 110, 112, 114, 119, 120, 123, 130, 133, 143, 154, 162, 166, 168, 170, 173, 176, 181, 185, 186, 194, 197, 199, 214, 215, 219, 226, 240, 247, 253, 257, 265, 278, 283, 311, 312, 315, 316, 338, 342, 365, 367, 374, 377, 379, 380, 381, 383, 392, 393, 405, 406, 409, 410, 413, 416, 417, 418, 437, 442, 447, 448, 452, 459, 462, 464, 536, 555, 556, 567, 568, 570, 594, 627, 647, 653, 659, 679, 690, 694, 719, 800, 832, 833, 864, 865, 901, 904, 981, 982, 984, 988, 989, 992, 995, 998, 999, 1002, 1005, 1017, 1026, 1040, 1043, 1044, 1045, 1046, 1048], "final_estim": [130, 315, 416, 567, 568], "final_estimator_": [567, 568], "final_lay": 416, "final_layer_gbr": 416, "final_layer_rfr": 416, "final_step": 40, "financ": [253, 993], "financi": [0, 10, 409, 416, 988], "find": [2, 3, 4, 10, 15, 25, 38, 44, 45, 46, 47, 50, 51, 53, 55, 63, 71, 78, 79, 93, 95, 97, 98, 103, 120, 130, 149, 153, 155, 157, 168, 181, 185, 186, 199, 205, 218, 220, 222, 223, 229, 236, 248, 253, 258, 259, 260, 270, 286, 291, 292, 293, 310, 315, 321, 340, 341, 342, 345, 350, 351, 355, 366, 376, 377, 379, 380, 381, 384, 385, 388, 391, 392, 393, 394, 405, 408, 409, 411, 412, 414, 416, 417, 418, 420, 441, 444, 445, 446, 450, 451, 452, 453, 462, 531, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 558, 565, 582, 589, 610, 611, 647, 650, 653, 654, 655, 656, 658, 659, 671, 688, 707, 729, 730, 738, 782, 783, 784, 787, 788, 794, 799, 800, 814, 822, 846, 847, 848, 850, 852, 854, 855, 856, 877, 878, 883, 896, 897, 898, 912, 913, 915, 921, 940, 941, 943, 981, 982, 984, 987, 988, 989, 991, 992, 993, 996, 998, 1002, 1006, 1007, 1008, 1011, 1013, 1016, 1017, 1019, 1021, 1023, 1024, 1026, 1027, 1028, 1035, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1053], "findal": 352, "fine": [2, 35, 118, 146, 201, 213, 249, 257, 342, 357, 358, 376, 383, 393, 417, 446, 941, 960, 995, 998, 1007, 1013, 1045], "finer": [2, 11, 35, 285, 338, 366, 409, 413, 981, 995, 1045], "finfo": [221, 471, 472, 478, 606, 650, 651, 654, 655, 656, 682, 683, 1050], "finish": [146, 246, 989], "finit": [25, 243, 249, 365, 374, 393, 468, 538, 551, 582, 606, 609, 610, 611, 658, 728, 778, 785, 797, 825, 902, 922, 923, 924, 925, 988, 991, 992, 1017, 1019, 1026, 1042, 1043, 1047, 1049, 1050], "finn": [1043, 1044], "fire": 1028, "firefox": 1002, "fireplac": 119, "fireplacequ": 119, "firm": [10, 409], "first": [0, 2, 3, 5, 6, 9, 11, 15, 18, 23, 24, 28, 29, 30, 32, 37, 53, 54, 56, 59, 62, 63, 64, 65, 68, 69, 70, 73, 78, 83, 84, 87, 88, 89, 98, 101, 109, 110, 114, 116, 117, 118, 119, 120, 121, 123, 125, 127, 130, 131, 132, 133, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 167, 168, 170, 173, 176, 178, 180, 186, 193, 194, 195, 198, 199, 205, 206, 211, 219, 222, 230, 231, 233, 234, 235, 237, 239, 240, 245, 249, 253, 254, 259, 261, 262, 266, 268, 270, 271, 278, 281, 283, 285, 288, 292, 293, 294, 299, 301, 305, 307, 310, 311, 312, 316, 317, 326, 329, 334, 335, 338, 340, 350, 351, 352, 355, 356, 359, 361, 366, 367, 373, 374, 376, 377, 378, 381, 383, 384, 385, 387, 391, 393, 402, 405, 406, 408, 409, 412, 413, 414, 416, 417, 418, 419, 421, 443, 446, 447, 450, 459, 460, 464, 472, 483, 487, 488, 490, 491, 492, 494, 497, 500, 502, 504, 508, 509, 510, 528, 533, 534, 538, 541, 553, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 582, 584, 588, 589, 590, 591, 593, 594, 601, 610, 611, 617, 621, 624, 631, 632, 633, 634, 646, 652, 659, 666, 668, 674, 676, 688, 695, 698, 699, 700, 702, 712, 716, 736, 742, 763, 764, 782, 794, 797, 798, 803, 804, 805, 806, 807, 812, 814, 821, 823, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 869, 877, 881, 882, 883, 885, 886, 893, 894, 906, 909, 912, 913, 914, 915, 917, 919, 920, 924, 925, 926, 943, 945, 959, 963, 966, 978, 981, 982, 986, 987, 988, 989, 991, 992, 993, 994, 995, 999, 1002, 1003, 1006, 1007, 1008, 1017, 1019, 1025, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "first_img_data": 507, "first_pca_compon": 310, "first_quart": 102, "first_week": 125, "firstli": [96, 365, 391, 657, 1028], "fisach": 1041, "fiscal": 0, "fischer": [1040, 1041], "fischler": 988, "fischoff": 1047, "fish": 318, "fisher": [376, 416, 504, 636, 1012], "fisher1958": 416, "fisher_transform": 636, "fit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 22, 23, 25, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 175, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 221, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 350, 351, 355, 356, 357, 358, 359, 365, 367, 368, 371, 374, 376, 379, 382, 384, 385, 388, 391, 393, 402, 405, 406, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 509, 510, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 577, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 697, 698, 700, 701, 702, 710, 711, 723, 732, 735, 750, 788, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 933, 949, 952, 960, 976, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "fit_": 1048, "fit_algorithm": [93, 531, 537, 1050, 1051], "fit_and_evalu": 351, "fit_and_plot_model": 310, "fit_and_scor": 205, "fit_data": 19, "fit_dur": 283, "fit_ecoc": 1039, "fit_grid_point": 1046, "fit_intercept": [5, 176, 177, 183, 202, 211, 226, 267, 312, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 904, 905, 911, 988, 1006, 1039, 1043, 1044, 1045, 1047, 1048, 1049], "fit_inverse_transform": [3, 98, 535, 1044], "fit_ovo": 1039, "fit_ovr": 1039, "fit_param": [233, 393, 433, 437, 442, 445, 465, 532, 534, 536, 537, 539, 542, 543, 549, 555, 556, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 630, 635, 638, 639, 640, 641, 642, 665, 671, 806, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 848, 853, 856, 860, 863, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897, 952, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054], "fit_path": [650, 654, 655, 656, 682, 683], "fit_predict": [17, 54, 55, 58, 226, 236, 290, 381, 393, 409, 427, 431, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 469, 563, 677, 792, 793, 797, 798, 850, 856, 864, 908, 998, 1040, 1043, 1044, 1048, 1050, 1052], "fit_prior": [374, 839, 840, 841, 843], "fit_status_": [906, 907, 908, 909, 910], "fit_tim": [11, 56, 119, 186, 205, 261, 413, 827, 828], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 11, "fit_times_nb": 261, "fit_times_svm": 261, "fit_transform": [2, 3, 4, 8, 10, 13, 17, 42, 47, 50, 51, 56, 60, 88, 94, 97, 103, 128, 173, 188, 213, 215, 218, 219, 220, 221, 222, 223, 229, 230, 233, 234, 240, 283, 287, 300, 305, 306, 310, 311, 312, 315, 318, 320, 321, 322, 338, 350, 351, 352, 361, 371, 374, 381, 384, 385, 393, 404, 410, 414, 417, 418, 425, 433, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 696, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 982, 984, 988, 993, 995, 1002, 1003, 1004, 1019, 1024, 1027, 1028, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "fitfailedwarn": [800, 803, 804, 806, 814, 823, 826, 827, 828, 831], "fitted_transform": [381, 464], "fittedcolumntransform": [130, 168], "fittedgridsearchcv": 238, "fittedpipelin": [130, 228, 238, 260, 273, 311, 316], "fittedrandomforestclassifi": 322, "fittedrandomizedsearchcv": 69, "fittedstackingregressor": 130, "fitter": 1008, "fitting_weight": 399, "fitzgerald": 1043, "fitzk": 1017, "five": [117, 125, 244, 253, 326, 329, 374, 531, 539, 545, 989, 995, 1007, 1017, 1035], "five_imag": 417, "fix": [2, 6, 18, 23, 32, 44, 69, 102, 114, 115, 118, 125, 149, 150, 154, 157, 167, 181, 199, 215, 236, 249, 262, 299, 315, 316, 317, 318, 319, 320, 321, 322, 351, 365, 366, 373, 375, 377, 378, 379, 381, 382, 387, 391, 393, 394, 399, 409, 410, 413, 414, 416, 417, 419, 452, 462, 472, 504, 512, 531, 537, 540, 542, 548, 549, 559, 560, 564, 565, 588, 591, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 653, 663, 668, 670, 684, 687, 691, 695, 707, 785, 797, 814, 821, 846, 847, 849, 852, 854, 855, 871, 874, 888, 912, 913, 941, 959, 981, 988, 991, 992, 995, 1002, 1013, 1028, 1033, 1034, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "fixed_classes_uniform_labelings_scor": 35, "fixed_vocabulary_": [588, 591], "fixedthresholdclassifi": [253, 408, 822, 1053], "fixm": [383, 393], "fixtur": [366, 379], "fkaren27": 1049, "flach": [406, 992], "flach2008": 992, "flach2015": 992, "flag": [154, 233, 236, 322, 377, 379, 380, 382, 399, 404, 464, 610, 611, 627, 673, 675, 728, 785, 1007, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "flair": 994, "flak": 1050, "flake8": 579, "flanagan": [1044, 1045], "flat": [41, 93, 168, 218, 219, 220, 257, 409, 416, 417, 440, 446, 448, 461, 509, 999, 1027, 1035, 1036, 1051], "flat_grid": 231, "flatnonzero": [102, 185, 258, 267, 268, 781], "flatten": [13, 30, 221, 231, 257, 309, 335, 346, 385, 502, 569, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 853], "flatten_transform": [569, 1042], "flatter": [2, 23], "flavanoid": [7, 376], "flaviomorelli": 1045, "flavor": [379, 995], "flavour": 416, "flaw": [393, 416], "flaxman": [1037, 1039], "fledg": [367, 417], "fleet": 2, "fleme": 1050, "flennerhag": 1043, "fletcher": [988, 1035, 1039], "flexibl": [2, 23, 119, 161, 197, 306, 335, 352, 381, 386, 391, 402, 413, 419, 674, 904, 905, 981, 986, 988, 992, 996, 1002, 1012, 1013, 1017, 1044, 1048], "flier": 8, "flink": 68, "flip": [97, 582, 742, 941, 994, 1039, 1048], "flip_i": 515, "flip_sign": 941, "float": [5, 8, 10, 17, 39, 43, 44, 45, 46, 51, 58, 59, 63, 64, 65, 69, 96, 99, 138, 157, 167, 183, 187, 221, 253, 258, 259, 263, 267, 345, 352, 365, 373, 374, 379, 388, 393, 404, 408, 409, 410, 417, 418, 420, 421, 422, 426, 428, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 583, 584, 588, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 610, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 759, 766, 769, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 814, 817, 820, 822, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 867, 870, 871, 877, 878, 880, 882, 884, 885, 886, 887, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 921, 922, 924, 925, 928, 938, 939, 955, 967, 973, 978, 982, 992, 993, 995, 996, 1002, 1007, 1008, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "float16": 1044, "float32": [15, 121, 221, 302, 320, 366, 374, 379, 380, 381, 393, 402, 404, 557, 558, 559, 560, 563, 564, 565, 566, 593, 594, 640, 641, 658, 699, 763, 869, 912, 913, 914, 915, 922, 968, 969, 970, 1008, 1019, 1028, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "float64": [9, 11, 12, 46, 51, 69, 121, 123, 124, 167, 168, 253, 270, 319, 320, 366, 373, 379, 380, 381, 393, 417, 471, 472, 478, 496, 497, 508, 509, 542, 548, 581, 582, 589, 591, 641, 658, 673, 675, 699, 738, 869, 877, 878, 906, 907, 909, 910, 913, 915, 922, 924, 963, 966, 968, 969, 970, 1007, 1019, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "float_info": 17, "floch": 1052, "floor": 12, "floor_x": 12, "flore": 1048, "florian": [214, 1017, 1035, 1039, 1041, 1045, 1052], "florin": 1053, "flow": 381, "flowchart": [413, 1021], "flower": [88, 101, 268, 506, 507, 992, 1012], "floyd": [374, 688, 989], "floydsoft": 1039, "fluctuat": [10, 58, 125, 197, 266, 1043], "flush": 205, "fly": [121, 384, 387, 508, 509, 582, 1035, 1037, 1044], "flyingdutchman23": 1048, "flyingimmidev": 1035, "flynn": [1048, 1050], "fmax": 215, "fmi": [409, 731], "fmin_l_bfgs_b": [610, 611], "fmt": [59, 208], "fn": [409, 712, 718, 729, 730, 731, 782, 783, 784, 787, 992, 993], "fn_c": 268, "fna": [146, 376], "fnlwgt": [322, 496], "fnr": [256, 698, 727], "fo": 417, "focu": [2, 7, 93, 109, 149, 249, 293, 365, 384, 406, 416, 553, 554, 559, 561, 562, 678, 989, 995, 1002, 1012, 1013, 1016], "focus": [23, 76, 186, 278, 374, 391, 989, 1002, 1012], "fokow": 1052, "fold": [2, 65, 72, 76, 115, 118, 121, 136, 145, 167, 186, 245, 253, 254, 255, 257, 259, 260, 262, 269, 273, 312, 328, 345, 361, 374, 379, 382, 383, 392, 393, 399, 408, 409, 418, 437, 472, 493, 536, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 906, 909, 981, 988, 992, 1002, 1007, 1023, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1052], "folder": [70, 374, 377, 379, 383, 387, 396, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 995, 1028], "folkman": 1042, "folloni": 1046, "follow": [0, 2, 5, 17, 24, 25, 30, 35, 43, 52, 53, 55, 61, 65, 69, 70, 90, 93, 102, 109, 112, 122, 127, 141, 154, 161, 166, 167, 168, 169, 170, 176, 178, 181, 185, 186, 195, 197, 198, 212, 215, 227, 233, 234, 236, 249, 253, 259, 266, 268, 269, 273, 278, 305, 311, 312, 315, 316, 318, 319, 320, 335, 345, 350, 351, 352, 355, 359, 361, 365, 366, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 424, 426, 428, 429, 430, 431, 432, 433, 441, 443, 445, 446, 447, 448, 449, 453, 461, 463, 464, 465, 468, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 515, 534, 538, 540, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 631, 633, 634, 646, 652, 658, 659, 670, 671, 680, 692, 694, 699, 705, 709, 713, 718, 788, 819, 841, 846, 847, 848, 850, 852, 854, 855, 856, 863, 867, 868, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 902, 904, 905, 909, 912, 913, 914, 915, 919, 920, 940, 960, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1019, 1028, 1032, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "folwarczn\u00fd": 1052, "fonari": [1047, 1048], "fond": [0, 1017], "fondat": 1017, "font": [122, 186, 211, 231, 916, 918], "font_manag": [79, 289, 337], "font_prop": 79, "font_siz": 309, "fontdict": [13, 37], "fontnam": [916, 1048], "fontproperti": [79, 289, 337], "fontsiz": [3, 6, 8, 13, 32, 48, 58, 89, 96, 118, 141, 152, 153, 155, 158, 168, 177, 187, 196, 208, 219, 220, 246, 254, 263, 264, 265, 270, 271, 302, 309, 344, 918], "fontweight": [58, 192], "foo": [381, 581, 996], "food": 376, "foot": 1011, "footer": [13, 68, 260, 350, 351, 374, 488, 489], "footnot": [999, 1012], "footprint": [317, 320, 365, 367, 409, 414, 541, 555, 556, 557, 558, 563, 564, 565, 566, 1037, 1040, 1041, 1046, 1047, 1050], "fopenmp": [377, 380], "foral": [409, 419, 613], "forbid": [409, 416], "forbidden": [168, 416], "forc": [109, 149, 182, 201, 283, 309, 350, 373, 377, 383, 403, 413, 416, 450, 457, 464, 467, 496, 606, 609, 646, 647, 652, 653, 657, 660, 661, 662, 663, 672, 673, 674, 681, 684, 687, 754, 778, 781, 822, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 906, 907, 908, 909, 910, 922, 924, 925, 1002, 1030, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1051], "force_all_finit": [778, 922, 924, 925, 1046, 1049], "force_alpha": [839, 840, 841, 843, 1050], "force_finit": [606, 609, 728, 785, 992, 1049], "force_int_remainder_col": [464, 467], "ford": 10, "forecast": [1, 2, 14, 122, 125, 148, 149, 156, 159, 164, 197, 199, 215, 259, 406, 408, 419, 496, 562, 611, 615, 622, 623, 625, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 992, 1012, 1014], "foreground": [38, 64], "foreign_work": 253, "foreman": 1042, "forese": 391, "forest": [9, 25, 29, 108, 109, 114, 118, 120, 121, 123, 124, 125, 126, 128, 130, 133, 134, 161, 164, 165, 171, 173, 226, 256, 258, 260, 296, 317, 350, 358, 361, 372, 392, 393, 406, 407, 418, 463, 464, 490, 491, 495, 496, 498, 515, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 630, 634, 800, 805, 830, 837, 864, 878, 908, 912, 913, 914, 981, 982, 993, 1000, 1013, 1014, 1015, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1052], "forest_import": 116, "forestclassifi": 1040, "forestcov": 236, "forg": [315, 316, 317, 318, 319, 320, 321, 322, 366, 380, 382, 383, 387, 396], "forget": [168, 361, 366, 373, 383, 391, 414, 989], "forget_factor": [414, 538], "forgiv": 734, "forina": 376, "fork": [377, 379, 383, 387, 391], "forkserv": 391, "form": [2, 7, 17, 30, 40, 58, 65, 93, 133, 156, 157, 167, 232, 233, 249, 259, 325, 361, 373, 376, 379, 381, 383, 393, 394, 405, 407, 409, 412, 413, 414, 415, 416, 417, 419, 421, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 687, 688, 689, 690, 691, 692, 693, 699, 797, 798, 799, 800, 803, 804, 805, 808, 810, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 949, 952, 981, 983, 985, 986, 988, 989, 992, 993, 996, 997, 998, 1002, 1007, 1012, 1019, 1026, 1041, 1045, 1047], "formal": [393, 394, 409, 416, 844, 845, 989, 992, 993, 996], "format": [6, 9, 10, 11, 17, 19, 46, 52, 56, 59, 68, 78, 93, 102, 112, 118, 121, 123, 136, 141, 142, 173, 177, 183, 197, 215, 254, 264, 266, 267, 270, 274, 287, 288, 291, 292, 309, 315, 344, 355, 359, 365, 372, 378, 379, 381, 382, 387, 388, 392, 393, 402, 410, 413, 416, 417, 433, 442, 443, 445, 447, 449, 450, 452, 459, 464, 468, 482, 483, 484, 485, 487, 489, 496, 497, 498, 508, 509, 510, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 551, 557, 558, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 688, 689, 692, 697, 713, 720, 739, 740, 751, 768, 791, 792, 833, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 896, 897, 902, 904, 916, 924, 925, 946, 954, 958, 963, 966, 968, 969, 970, 971, 972, 973, 978, 982, 992, 995, 1000, 1002, 1003, 1006, 1008, 1012, 1019, 1020, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "format_func": 288, "formatter_result": 56, "former": [10, 352, 408, 416, 417, 565, 802, 809, 818, 994, 1035, 1041, 1044], "formerli": [201, 1036, 1039, 1041, 1042], "formul": [109, 149, 158, 201, 268, 379, 409, 411, 414, 417, 419, 422, 475, 549, 550, 557, 564, 650, 651, 654, 655, 656, 658, 659, 665, 670, 763, 769, 798, 906, 909, 912, 914, 988, 992, 993, 996, 1002, 1015, 1030, 1052], "formula": [76, 77, 266, 405, 409, 411, 422, 473, 475, 516, 517, 518, 590, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 676, 678, 704, 729, 730, 755, 764, 981, 986, 988, 992, 997, 998, 1002, 1006, 1040, 1042, 1044], "forrest": [1046, 1047], "forsal": [17, 352, 374], "forsyth": 1043, "forth": 387, "fortin": [1035, 1037, 1038, 1039], "fortran": [421, 541, 646, 647, 652, 653, 660, 661, 662, 663, 665, 681, 684, 685, 686, 924, 925, 1035, 1038, 1039, 1043], "fortun": [385, 416, 1028, 1048, 1049], "forward": [5, 109, 146, 233, 317, 365, 379, 399, 402, 418, 508, 509, 539, 543, 553, 559, 560, 602, 668, 685, 686, 864, 868, 988, 1013, 1047], "foster": [0, 1043], "fouchet": 1041, "found": [0, 4, 17, 18, 19, 103, 116, 145, 149, 153, 155, 157, 201, 234, 253, 257, 260, 261, 262, 310, 315, 318, 320, 321, 338, 352, 365, 367, 373, 376, 378, 379, 381, 391, 393, 394, 402, 405, 408, 409, 412, 413, 414, 416, 417, 419, 434, 441, 444, 445, 459, 472, 557, 558, 559, 560, 564, 565, 588, 590, 610, 611, 628, 636, 647, 651, 653, 655, 661, 663, 665, 671, 672, 674, 676, 678, 687, 688, 712, 719, 800, 803, 804, 814, 822, 841, 846, 847, 853, 875, 877, 878, 912, 913, 914, 915, 919, 921, 976, 980, 981, 984, 988, 989, 991, 993, 994, 995, 996, 1002, 1006, 1007, 1008, 1013, 1019, 1024, 1028, 1035, 1038, 1039, 1042, 1043, 1045, 1049, 1052], "foundat": [0, 130, 253, 379, 406, 995], "founder": 1017, "fouqu": 1035, "fouquet": [1051, 1052], "four": [25, 142, 157, 173, 179, 198, 245, 246, 253, 326, 335, 375, 379, 393, 557, 564, 719, 912, 914, 930, 988, 990, 991, 992, 1002, 1011], "fourier": [231, 407, 638, 639, 640, 641, 642, 758, 759, 984], "fourier_approx_svm": 231, "fourier_scor": 231, "fourier_tim": 231, "fournier": 1044, "fourth": [118, 1019], "fowkl": [409, 731], "fowlk": [731, 1041], "fowlkes_mallows_scor": [409, 992, 1041, 1043], "fox": [417, 1051], "fp": [6, 253, 409, 712, 718, 729, 730, 731, 782, 783, 784, 787, 992], "fp_c": 268, "fpgawesom": 1049, "fpr": [9, 227, 236, 253, 256, 268, 269, 386, 592, 596, 698, 702, 706, 727, 789, 992, 1032, 1035, 1051], "fpr_a": 268, "fpr_b": 268, "fpr_grid": 268, "fpr_score": 253, "fr": [3, 5, 6, 7, 8, 22, 23, 28, 35, 40, 52, 55, 73, 80, 115, 125, 155, 176, 181, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 236, 260, 262, 265, 272, 295, 310, 345, 350, 351, 352, 531, 537, 658, 664, 685, 686, 758, 759, 990, 992], "fraa\u00df": 1052, "frac": [24, 78, 79, 109, 259, 266, 268, 318, 405, 406, 409, 411, 414, 415, 416, 417, 419, 432, 463, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 615, 619, 622, 623, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 696, 729, 730, 755, 769, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 984, 986, 987, 988, 989, 990, 992, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1026], "frac12": [416, 984], "fractal": [146, 376], "fraction": [2, 23, 25, 122, 125, 197, 205, 215, 253, 345, 351, 406, 413, 416, 438, 439, 449, 450, 456, 457, 515, 527, 557, 558, 559, 560, 564, 565, 566, 590, 593, 602, 666, 667, 668, 671, 676, 677, 678, 703, 721, 722, 723, 724, 734, 794, 796, 802, 806, 828, 829, 843, 871, 906, 907, 908, 912, 913, 914, 915, 958, 988, 992, 995, 999, 1000, 1002, 1007, 1008, 1013, 1036, 1037, 1038, 1049], "fragil": 655, "fragment": [53, 96], "frame": [2, 11, 69, 125, 154, 167, 168, 197, 253, 311, 322, 374, 379, 391, 394, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 1012, 1024, 1047], "frameon": [5, 203], "framework": [259, 365, 381, 391, 393, 402, 409, 637, 688, 797, 988, 989, 996, 1010, 1013, 1017, 1035, 1041], "fran": [1047, 1048, 1049], "franc": [311, 764], "francesco": [1047, 1050], "franci": [536, 658, 988, 1041], "francia": 1049, "francidona": 1045, "francisco": [417, 1004], "franck": [1050, 1052, 1053], "franco": 1045, "francoi": [1035, 1048], "francoisgoupil": 1049, "frank": [259, 835, 993, 1040, 1044, 1045], "frankhui": 1043, "franki": 1048, "franz": 1043, "franziska": 1046, "fran\u00e7oi": [0, 362, 1038], "fraud": [253, 988, 1017], "fraudul": [253, 988, 1017], "fraudulent_accept": 253, "fraudulent_refus": 253, "fred": [68, 1035, 1048], "freder": 1045, "frederick": 1048, "fredrik": 1043, "free": [0, 3, 25, 53, 154, 155, 162, 196, 248, 305, 373, 378, 379, 380, 387, 391, 396, 417, 452, 609, 671, 860, 910, 981, 984, 988, 992, 1013, 1043], "freebsd": 382, "freedom": [2, 95, 154, 185, 186, 188, 259, 541, 656, 797, 988, 1038], "freeland": 1050, "freestand": 381, "freez": [383, 396, 402, 1013, 1017, 1043], "frei": [36, 440, 454, 1045], "freija": 1043, "freita": [1040, 1042, 1043], "frellwan": 1048, "fremtpl2": 215, "fremtpl2freq": 215, "fremtpl2sev": 215, "french": [0, 215, 311], "freq": [167, 181, 352], "frequenc": [17, 25, 149, 168, 181, 191, 197, 230, 316, 317, 350, 351, 352, 374, 391, 406, 413, 414, 416, 417, 418, 551, 557, 559, 560, 561, 564, 588, 589, 590, 591, 604, 658, 659, 664, 666, 668, 674, 675, 676, 685, 686, 833, 868, 877, 878, 904, 906, 909, 912, 914, 930, 988, 989, 994, 1002, 1006, 1008, 1037, 1039, 1040, 1046, 1053], "frequent": [35, 109, 162, 262, 268, 269, 273, 351, 368, 376, 379, 417, 551, 590, 630, 854, 877, 878, 881, 893, 982, 984, 992, 1006, 1010, 1013, 1053], "frequentist": 528, "fresh": [538, 1013, 1045], "fresh_restart": 538, "fresh_restarts_max_it": 538, "freund": [416, 553, 554], "fri": [2, 125, 168, 374], "frid": [1017, 1038], "friedman": [112, 113, 124, 258, 411, 413, 416, 478, 516, 517, 518, 520, 558, 559, 560, 565, 593, 594, 834, 912, 913, 915, 986, 988, 993, 999, 1008], "friedman2001": 416, "friedman2002": 416, "friedman_ms": [558, 559, 560, 565, 913, 915, 1008, 1051, 1052], "friend": [423, 1039], "friendli": [93, 366, 379, 387, 414, 897, 1004, 1005, 1012, 1013], "fring": [50, 409], "fritsch": [0, 7, 398, 1035, 1036, 1038], "fritzk": 1050, "fro": [414, 538, 540, 547, 693, 988], "fro_2": [661, 663], "frobeniu": [13, 96, 443, 447, 459, 469, 470, 471, 472, 473, 474, 475, 476, 531, 537, 538, 540, 545, 546, 547, 988, 1042], "frobenius_norm": 688, "from": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 365, 367, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1017, 1020, 1022, 1023, 1024, 1025, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "from_dtyp": [2, 119, 253, 322, 416, 561, 562, 1052], "from_estim": [4, 7, 23, 25, 28, 29, 32, 54, 111, 114, 125, 126, 127, 131, 168, 180, 189, 206, 211, 232, 237, 239, 252, 253, 256, 261, 262, 266, 269, 275, 286, 291, 294, 310, 315, 316, 317, 318, 320, 321, 322, 334, 335, 336, 337, 339, 340, 342, 356, 386, 406, 633, 718, 727, 782, 784, 787, 788, 789, 987, 992, 999, 1024, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "from_predict": [2, 11, 30, 73, 130, 167, 236, 255, 266, 268, 318, 325, 350, 386, 438, 631, 698, 718, 727, 782, 784, 787, 788, 789, 992, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "frombuffer_empti": 1042, "fromkei": [260, 919], "fromnumer": 385, "front": [383, 1042], "frontal": 374, "frontend": 385, "frontier": [7, 211, 289, 337, 998, 1026], "frozen": 381, "frozentransform": 381, "frsi": 1043, "fruit": [379, 993], "fr\u00e9minvil": [1052, 1053], "fs1995": 416, "ftfy": 417, "ftorres16": [1049, 1050], "ftp": [146, 376, 682, 683], "ftwo_scor": [742, 992], "fu": [658, 1039], "fuck": [1047, 1048], "fuent": [1036, 1037], "fugled": 1052, "fujikawa": 1042, "fukatani": 1042, "fulfil": [379, 409, 416, 800, 803, 804, 814, 864, 868, 988], "full": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 365, 366, 367, 372, 374, 377, 379, 381, 384, 387, 391, 393, 394, 396, 404, 407, 409, 411, 413, 414, 417, 423, 426, 432, 433, 441, 445, 447, 449, 459, 488, 489, 492, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 535, 537, 541, 559, 560, 567, 568, 632, 648, 650, 654, 669, 680, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 797, 798, 811, 841, 930, 981, 988, 991, 994, 995, 999, 1002, 1005, 1013, 1026, 1035, 1039, 1041, 1043, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "full_data": 176, "full_lik": 63, "full_model": 285, "full_scor": 162, "fulli": [11, 42, 53, 116, 122, 365, 373, 374, 393, 409, 415, 416, 418, 443, 447, 557, 558, 564, 565, 912, 913, 914, 915, 916, 918, 981, 982, 988, 997, 1005, 1012, 1048, 1049], "fullpap": 1005, "fultz": 1048, "fun": [421, 533, 1017], "fun_arg": [421, 533], "func": [9, 73, 114, 167, 177, 215, 296, 379, 410, 465, 699, 868, 1002, 1039, 1041, 1043, 1044, 1052, 1053], "func_min": [610, 611], "funcformatt": 288, "function": [2, 3, 4, 5, 6, 11, 13, 18, 19, 25, 35, 44, 51, 52, 53, 55, 57, 64, 68, 69, 70, 73, 77, 93, 96, 98, 102, 107, 114, 115, 119, 120, 121, 122, 123, 124, 125, 136, 142, 145, 146, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 168, 170, 175, 176, 179, 181, 184, 189, 190, 192, 193, 194, 195, 197, 198, 203, 204, 205, 210, 213, 214, 215, 216, 218, 227, 229, 232, 233, 236, 237, 239, 240, 248, 251, 253, 257, 259, 260, 261, 262, 267, 268, 274, 276, 278, 283, 299, 302, 305, 312, 315, 316, 318, 319, 321, 328, 330, 335, 336, 337, 338, 339, 340, 342, 345, 347, 350, 351, 356, 359, 361, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 396, 399, 402, 404, 406, 408, 409, 410, 411, 412, 414, 415, 417, 418, 420, 421, 424, 426, 428, 429, 431, 432, 433, 437, 440, 443, 444, 445, 447, 448, 450, 452, 454, 457, 458, 459, 460, 461, 464, 465, 468, 469, 471, 472, 474, 478, 488, 489, 491, 492, 495, 496, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 572, 575, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 607, 608, 609, 610, 611, 615, 617, 619, 620, 622, 623, 627, 628, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 706, 711, 712, 716, 719, 721, 722, 723, 724, 728, 732, 734, 735, 738, 740, 741, 742, 750, 755, 757, 761, 762, 763, 765, 768, 771, 774, 778, 779, 780, 781, 782, 783, 785, 789, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 880, 881, 882, 883, 884, 885, 888, 890, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 922, 931, 933, 934, 935, 940, 941, 951, 952, 958, 959, 960, 962, 963, 966, 967, 976, 981, 982, 983, 985, 987, 989, 990, 993, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1008, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "functiontransform": [2, 68, 114, 197, 215, 329, 402, 464, 465, 1002, 1040, 1041, 1043, 1048, 1049, 1050, 1052], "functiontransformerfunctiontransform": 114, "functool": 215, "fund": 1010, "fundament": [35, 47, 79, 351, 391, 392, 412, 496, 538, 540, 547, 708, 988, 992], "funder": 0, "fung": 413, "funki": 1012, "funnel": [4, 493, 494, 1024], "funni": 68, "furlanello": 743, "furrer": 1052, "further": [2, 23, 40, 69, 76, 84, 93, 112, 118, 120, 145, 149, 154, 167, 169, 176, 181, 218, 223, 233, 253, 256, 259, 260, 266, 320, 338, 351, 359, 365, 379, 391, 393, 402, 407, 408, 409, 411, 414, 416, 417, 419, 444, 452, 462, 515, 532, 535, 582, 614, 622, 628, 658, 659, 666, 667, 668, 676, 677, 678, 691, 695, 737, 774, 778, 781, 792, 793, 840, 846, 847, 854, 855, 882, 884, 904, 906, 909, 941, 991, 992, 994, 995, 996, 998, 1000, 1002, 1006, 1007, 1026, 1028, 1044, 1048], "furthermor": [2, 11, 35, 115, 155, 168, 169, 236, 237, 239, 283, 350, 351, 365, 367, 386, 409, 414, 416, 417, 562, 590, 606, 619, 704, 736, 746, 755, 757, 795, 904, 988, 1000, 1038, 1042], "fuse": [380, 1041, 1051], "fusion": 391, "futur": [11, 154, 198, 239, 318, 321, 379, 381, 383, 393, 394, 402, 413, 417, 496, 534, 635, 962, 993, 1007, 1008, 1017, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "futurewarn": [379, 387, 1042, 1043, 1044, 1046, 1048, 1051, 1052], "fuxin": 642, "fw": 688, "fwe": 592, "f\u00e9lix": [1035, 1037, 1038, 1039, 1043], "g": [0, 2, 5, 6, 8, 10, 22, 23, 24, 25, 30, 51, 53, 63, 68, 80, 84, 100, 109, 112, 113, 121, 122, 130, 149, 150, 151, 152, 154, 156, 157, 158, 162, 166, 167, 179, 182, 197, 198, 199, 201, 215, 219, 223, 232, 233, 243, 253, 259, 263, 264, 270, 281, 289, 305, 310, 328, 344, 345, 352, 361, 365, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 391, 393, 399, 402, 404, 406, 407, 409, 411, 413, 414, 416, 417, 418, 419, 421, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 503, 528, 531, 533, 534, 537, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 597, 604, 610, 611, 617, 622, 623, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 690, 692, 697, 720, 728, 738, 740, 763, 778, 785, 788, 799, 801, 802, 803, 804, 806, 807, 809, 818, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 864, 867, 869, 870, 871, 874, 876, 877, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 940, 941, 952, 960, 981, 982, 986, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1006, 1007, 1008, 1013, 1016, 1017, 1023, 1028, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "g0g0gadget": 1045, "g2015": 999, "g_": 409, "g_i": [416, 649], "g_j": [648, 669, 680], "ga": 0, "gaaca": 157, "gaatattaggccga": 391, "gabor": 1049, "gabriel": [302, 1043, 1044, 1045, 1048, 1049], "gael": [0, 10, 30, 37, 38, 44, 50, 51, 64, 65, 80, 95, 186, 187, 219, 231, 245, 397, 1011, 1013, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "gaido": 1044, "gaidon": 1035, "gain": [51, 125, 220, 266, 283, 285, 322, 326, 350, 351, 359, 378, 385, 387, 416, 496, 532, 557, 561, 562, 564, 726, 756, 797, 798, 833, 912, 914, 993, 997, 1005, 1008, 1038, 1042, 1045], "gain_matrix": 253, "galleri": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 374, 379, 381, 393, 396, 401, 1014, 1024, 1035, 1039, 1042], "galli": 1047, "gallopoulo": 414, "galvez": 1040, "gambl": 10, "gameiro": 1049, "gamma": [2, 3, 4, 5, 7, 9, 29, 30, 98, 131, 138, 173, 211, 226, 231, 232, 257, 259, 261, 264, 270, 275, 317, 325, 326, 328, 330, 335, 337, 338, 341, 342, 344, 347, 412, 414, 416, 419, 452, 535, 562, 619, 620, 639, 640, 641, 643, 644, 645, 648, 680, 685, 691, 724, 747, 752, 759, 766, 775, 776, 777, 797, 811, 814, 899, 900, 901, 906, 907, 908, 909, 910, 981, 984, 987, 988, 990, 1005, 1007, 1019, 1023, 1024, 1026, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1049, 1050, 1051], "gamma_": [535, 1051], "gamma_0": [243, 249], "gamma_2d_rang": 338, "gamma_bound": 620, "gamma_k": 412, "gamma_rang": 338, "gammaregressor": [215, 316, 319, 680, 988, 1046, 1049, 1050], "gandenberg": 1044, "ganesh": [1040, 1052], "ganevgv": 1045, "gangesh": 1047, "gangwar": 1042, "ganiev": [1040, 1041, 1042], "ganssl": 1042, "gap": [2, 11, 125, 350, 374, 413, 471, 472, 478, 588, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 821, 912, 913, 914, 915, 988, 989, 1043, 1047, 1049], "garagecar": [119, 130], "garagefinish": 119, "garagetyp": 130, "garageyrblt": 73, "garbag": 1047, "garcia": 1048, "garc\u00eda": [1044, 1045, 1050], "gardin": 373, "gardner": [1043, 1044], "garg": [1045, 1046], "gargsya": 1045, "gari": [374, 1042], "garret": 1039, "garreta": [1037, 1038], "garrett": 1039, "garri": 376, "garriga": [265, 413, 829], "gasmi": 1049, "gasquez": 1042, "gate": [376, 1048], "gather": [319, 321, 387, 394, 407, 409, 1002, 1017], "gatsbi": 1005, "gaug": 167, "gaull": 764, "gaurav": [1043, 1044, 1045, 1046, 1047, 1049], "gauravahlawat": [1043, 1044], "gaussian": [2, 3, 5, 6, 7, 24, 25, 28, 29, 32, 42, 44, 45, 53, 54, 55, 59, 63, 76, 77, 78, 79, 80, 89, 90, 94, 95, 96, 102, 107, 110, 111, 118, 122, 126, 128, 138, 159, 162, 176, 179, 181, 185, 187, 207, 208, 209, 210, 226, 230, 232, 233, 245, 246, 250, 270, 288, 293, 296, 299, 307, 308, 309, 312, 330, 335, 342, 343, 347, 368, 371, 375, 381, 384, 393, 409, 411, 414, 415, 421, 452, 469, 470, 471, 472, 473, 474, 475, 476, 496, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 530, 532, 544, 549, 550, 553, 563, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 643, 644, 672, 677, 680, 703, 724, 741, 752, 776, 797, 798, 800, 814, 839, 840, 841, 842, 843, 844, 845, 849, 880, 884, 892, 896, 897, 898, 986, 988, 989, 990, 998, 1014, 1015, 1017, 1027, 1029, 1030, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1049], "gaussian_filt": [12, 44, 45, 52, 1027], "gaussian_process": [28, 29, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 368, 393, 419, 643, 993, 1014, 1038, 1041, 1042], "gaussianhmm": 1035, "gaussianmixtur": [42, 55, 244, 245, 246, 247, 248, 249, 415, 797, 991, 1041, 1043, 1044, 1048, 1049, 1051, 1053], "gaussianmixturegaussianmixtur": 248, "gaussiannb": [22, 23, 25, 29, 132, 261, 361, 406, 416, 437, 569, 839, 840, 841, 843, 865, 986, 993, 994, 1039, 1040, 1041, 1043, 1048, 1051], "gaussiannois": 381, "gaussianprocessclassifi": [28, 29, 150, 151, 152, 153, 157, 393, 419, 611, 619, 620, 622, 623, 993, 1041, 1043, 1045, 1049], "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 419, 610, 613, 614, 615, 616, 617, 621, 624, 625, 643, 993, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaussianprocessregressorifittedgaussianprocessregressor": 154, "gaussianrandomproject": [897, 1004, 1036, 1049, 1051, 1052], "gauthier": 1049, "gauz": 1043, "gave": [25, 406, 800, 803, 804, 814, 871], "gavin": [628, 982], "gaynor": 402, "ga\u00ebl": [29, 43, 49, 71, 87, 88, 99, 180, 194, 195, 307, 342, 343, 394, 1017], "gb": [133, 416, 553, 633], "gbc": 361, "gbdt": [114, 168, 253, 315, 316, 321, 384, 416], "gbdt_appli": 114, "gbdt_cst": 316, "gbdt_leaves_yield": 114, "gbdt_model": 114, "gbdt_no_cst": [127, 316], "gbdt_pipelin": 130, "gbdt_with_monotonic_cst": 127, "gbdt_with_monotonic_cst_df": 127, "gbm": [121, 416, 1038], "gbm_early_stop": 120, "gbm_full": 120, "gbp": 1017, "gbr": 122, "gbr_l": 122, "gbrt": [2, 11, 197, 416], "gbrt_mean_poisson": 11, "gbrt_median": 11, "gbrt_percentile_5": 11, "gbrt_percentile_95": 11, "gbrt_predict": 2, "gbt": 365, "gc": 8, "gca": [6, 42, 60, 84, 152, 202, 206, 208, 226, 239, 263, 291, 293, 306, 334, 336, 339, 340, 999, 1032], "gcc": [377, 380, 385, 391], "gcf": [6, 999], "gcv": [673, 675], "gcv_mode": [673, 1037], "gd": [10, 133], "gdb": [380, 382, 1016], "gdex1": 1045, "ge": [10, 983, 994, 1047], "ge0": 1008, "gear": 1011, "geb": 17, "gebremichael": [1050, 1051], "gedeck": 1042, "geevarghes": 1050, "gefel": 992, "gegr": 417, "gei": 1037, "geiger": 1052, "geist": 376, "gelavizh": 1046, "gelder": 1046, "gemm": 1053, "gen": 781, "gen_batch": [388, 945], "gen_cov": 78, "gen_even_slic": [197, 388, 944], "gender": [238, 877, 1002], "gender_femal": 877, "gender_mal": 877, "gene": [157, 373, 405, 451, 513, 593, 594, 851, 884], "gener": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 19, 23, 24, 25, 27, 28, 29, 30, 31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 63, 68, 69, 70, 71, 72, 73, 77, 79, 83, 84, 86, 87, 88, 91, 93, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 143, 144, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 170, 173, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 365, 366, 368, 371, 372, 374, 376, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 402, 405, 406, 409, 413, 415, 417, 418, 419, 421, 425, 430, 432, 437, 440, 443, 446, 447, 449, 452, 454, 458, 459, 460, 462, 464, 465, 467, 469, 472, 474, 482, 483, 484, 488, 491, 492, 495, 496, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 538, 540, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 614, 615, 618, 619, 620, 622, 623, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 685, 686, 689, 690, 691, 692, 693, 694, 695, 701, 704, 706, 717, 721, 723, 724, 737, 743, 757, 778, 781, 785, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 837, 838, 844, 845, 847, 849, 850, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 913, 915, 916, 917, 918, 935, 936, 940, 941, 944, 945, 957, 961, 963, 966, 981, 982, 984, 986, 987, 989, 991, 992, 993, 995, 997, 998, 999, 1000, 1004, 1005, 1007, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1019, 1022, 1026, 1027, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "generalis": [788, 992, 1013], "generaliz": [342, 416], "generate_data": [5, 31], "generate_dataset": 8, "generate_missing_valu": 125, "generate_onli": [935, 1045], "generate_synthetic_data": 12, "generickernelmixin": [157, 1045], "genericunivariateselect": [418, 595, 596, 598, 599, 600, 602, 1049, 1051, 1052], "generos": 379, "genesi": [1049, 1051], "genet": 1012, "genoa": 376, "genom": [18, 513], "genotyp": 373, "gensim": 1012, "gentil": [376, 1047], "gentli": 414, "genvalen": [1047, 1048, 1049, 1050, 1051], "geodes": [218, 688, 989], "geoff": [835, 993], "geoffrei": [861, 862, 996, 1046, 1047, 1048, 1049, 1051], "geograph": [2, 9, 296, 374, 498], "geometr": [95, 409, 688, 704, 731, 757, 989, 1043], "geometri": [37, 409, 989, 995], "geomspac": 321, "georg": [4, 374, 409, 1041, 1047, 1048, 1049, 1050], "george_w_bush": 1024, "georgi": [1043, 1046], "georgiamaydai": 1050, "geospati": [296, 415], "geovan": [1048, 1049], "geq": [230, 406, 414, 416, 988, 992, 1002, 1006, 1007], "ger": 417, "gerhard": [4, 374], "gerhard_schroed": 1024, "german_credit": 253, "germer": [1050, 1051], "geroldcsend": 1048, "geron": [1043, 1048, 1049], "gerstein": 513, "gertrud": 1042, "gertz": 450, "gervai": [1037, 1038], "gesa": 1047, "gesdd": 941, "gesvd": 941, "get": [2, 3, 7, 10, 11, 15, 17, 35, 46, 50, 54, 94, 98, 122, 125, 132, 143, 146, 149, 154, 155, 161, 167, 168, 169, 170, 190, 199, 212, 215, 218, 233, 234, 257, 260, 261, 263, 267, 270, 278, 283, 288, 296, 306, 315, 322, 326, 329, 335, 338, 340, 343, 347, 350, 352, 355, 366, 368, 372, 373, 374, 377, 379, 380, 381, 384, 385, 386, 387, 393, 396, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 423, 424, 425, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 699, 721, 722, 723, 724, 726, 732, 733, 742, 756, 763, 764, 769, 785, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 932, 933, 934, 940, 941, 951, 981, 987, 988, 989, 991, 992, 1002, 1005, 1006, 1007, 1008, 1013, 1023, 1026, 1027, 1028, 1032, 1035, 1038, 1041, 1043, 1046, 1048, 1049, 1052], "get_adjacency_matrix": 15, "get_arrai": [844, 845], "get_bin_se": 448, "get_cmap": [23, 25, 343], "get_color": 5, "get_config": [468, 781, 902, 959, 1050], "get_config_var": 377, "get_covari": [532, 534, 541], "get_data": [508, 509], "get_data_hom": 6, "get_depth": [912, 913, 914, 915, 1044], "get_feature_nam": [318, 1043, 1044, 1046, 1047, 1048], "get_feature_names_out": [13, 17, 167, 169, 318, 350, 351, 352, 374, 381, 393, 410, 417, 425, 430, 433, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1002, 1048, 1049, 1050, 1051, 1052, 1053], "get_figur": 109, "get_full_scor": 162, "get_height": [6, 120], "get_impute_it": 162, "get_impute_knn_scor": 162, "get_impute_mean": 162, "get_impute_zero_scor": 162, "get_indic": [17, 424, 451, 453], "get_initial_mean": 246, "get_legend_handles_label": [125, 232, 261, 266], "get_lin": 300, "get_metadata_rout": [233, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 949, 950, 951, 952, 992, 1052], "get_metr": 699, "get_minibatch": 6, "get_n_cal": [844, 845], "get_n_leav": [912, 913, 914, 915, 1044], "get_n_split": [393, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "get_nam": 307, "get_output_feature_nam": 1049, "get_param": [260, 382, 393, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 1045, 1046, 1047, 1049, 1050], "get_precis": [469, 470, 471, 472, 473, 474, 475, 476, 532, 534, 541], "get_redirect": 15, "get_routing_for_object": [233, 949], "get_scor": [253, 322, 393, 733, 1042, 1051], "get_scorer_nam": [408, 732, 992, 1049, 1052], "get_scores_for_imput": 162, "get_shap": [17, 424, 451, 453], "get_stop_word": [588, 589, 591], "get_submatrix": [424, 451, 453], "get_subplotspec": 386, "get_support": [142, 146, 317, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1037], "get_tree_stat": [844, 845], "get_untrusted_typ": 402, "get_width": [6, 120], "get_x": [6, 120], "get_xaxi": [243, 293, 305], "get_xlim": [78, 192, 202, 305], "get_xticklabel": 270, "get_yaxi": [293, 305], "get_ybound": 51, "get_ylim": [192, 305, 306], "getattr": [2, 6, 253, 305, 381, 393, 1051], "getgaurav2": 1045, "gettempdir": 995, "getter": [469, 470, 471, 472, 473, 474, 475, 476, 593, 594, 597], "geurt": [416, 555, 556, 557, 558, 565, 566, 914, 915], "gewili": [1050, 1051], "gh": 379, "ghahramani": 899, "gharibi": 1045, "ghg": 1041, "ghislain": 1047, "gholdman1": 1046, "ghorai": 1043, "ghosh": [0, 398, 409, 1035, 1036, 1052], "gia": 1046, "giancarlo": 1049, "gianr": 1050, "gibb": [860, 997, 1012], "gideon": 1045, "giessel": 1041, "gif": 46, "gigant": [1043, 1045, 1050, 1051], "gijsber": 1049, "gil": [365, 366, 380, 960, 1038, 1043, 1044, 1047, 1048, 1052], "gilad": 1017, "gilberto": 1043, "gilbertson": [1049, 1050], "gilch": 1042, "gile": [1038, 1039], "gill": [0, 112, 113, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "gilliam": 1042, "gilmor": 1039, "gim": 1047, "gini": [25, 170, 197, 215, 238, 271, 317, 553, 554, 557, 558, 559, 560, 564, 565, 566, 788, 912, 913, 914, 915, 981, 1000, 1008, 1043, 1044, 1051, 1052], "gionanidi": 1049, "giorgio": [1040, 1041, 1042], "giorgiop": 1040, "giotto": 1012, "giovanni": [1041, 1043], "gist": [379, 387, 1016], "git": [377, 381, 383, 385, 387, 1016, 1031, 1035, 1051], "github": [0, 5, 6, 10, 24, 69, 70, 114, 116, 117, 123, 126, 127, 130, 133, 143, 154, 162, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 283, 302, 311, 316, 317, 319, 320, 322, 327, 359, 373, 377, 378, 382, 383, 384, 385, 387, 391, 393, 394, 396, 402, 404, 452, 462, 508, 536, 691, 692, 695, 995, 1011, 1012, 1016, 1017, 1028, 1040, 1045], "githubusercont": 10, "gitter": [1010, 1042, 1043], "giudic": 1047, "giusepp": [1043, 1044], "give": [2, 10, 11, 12, 22, 23, 37, 42, 47, 58, 60, 62, 68, 69, 73, 95, 121, 149, 154, 158, 161, 167, 168, 186, 188, 194, 197, 198, 199, 226, 249, 253, 256, 261, 268, 285, 289, 292, 302, 318, 319, 329, 365, 367, 374, 376, 378, 379, 381, 385, 387, 391, 392, 393, 394, 402, 405, 406, 407, 409, 410, 411, 414, 416, 417, 419, 421, 434, 446, 447, 449, 451, 459, 472, 496, 499, 503, 533, 538, 549, 550, 551, 552, 557, 558, 564, 565, 566, 593, 594, 597, 607, 608, 638, 647, 661, 665, 676, 720, 730, 736, 739, 794, 800, 803, 804, 814, 825, 826, 827, 829, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 881, 882, 884, 885, 893, 988, 992, 995, 996, 997, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1017, 1019, 1021, 1026, 1027, 1028, 1035, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051], "given": [5, 8, 9, 11, 25, 28, 35, 47, 56, 58, 76, 83, 94, 98, 115, 125, 126, 128, 130, 149, 156, 167, 168, 181, 197, 198, 201, 215, 219, 226, 230, 231, 233, 235, 236, 237, 253, 255, 259, 260, 261, 262, 268, 273, 286, 289, 290, 291, 307, 311, 318, 350, 351, 352, 358, 365, 367, 374, 378, 379, 381, 383, 385, 387, 388, 391, 393, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 426, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 487, 496, 501, 503, 505, 523, 533, 534, 536, 538, 539, 540, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 601, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 687, 688, 690, 691, 697, 698, 699, 700, 701, 702, 704, 705, 706, 712, 714, 717, 718, 720, 724, 726, 727, 734, 736, 737, 740, 752, 755, 756, 758, 759, 764, 774, 778, 781, 782, 784, 787, 788, 789, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 890, 891, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 928, 929, 930, 948, 949, 951, 976, 980, 981, 984, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1017, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "gkevinyen5418": 1043, "gkf": 413, "gkiasta": 1048, "gl": [146, 376], "glad": 379, "glanc": [278, 378], "glaser": [1043, 1044], "glass": 374, "glasso": [411, 478], "glaxosmithklin": 10, "gleb": [1048, 1050, 1051, 1052], "glemaitr": [1044, 1045, 1047], "glemaitre58": 199, "glen": 1048, "glenn": 1041, "glennfrutiz": 1049, "glibc": 387, "glm": [197, 215, 316, 648, 669, 680, 988, 1035, 1046], "glm_freq": 215, "glm_pure_premium": 215, "glm_sev": 215, "glmnet": [646, 647, 1035], "glob": 6, "global": [6, 8, 40, 55, 93, 197, 218, 219, 240, 268, 301, 316, 361, 365, 366, 385, 391, 393, 407, 409, 419, 442, 452, 462, 468, 590, 626, 632, 688, 691, 692, 695, 707, 729, 730, 738, 783, 784, 787, 788, 818, 885, 900, 902, 960, 962, 981, 989, 992, 998, 1002, 1008, 1017, 1043, 1050], "global_dtyp": 366, "global_random_se": 366, "globular": [60, 409], "glorot": [861, 862], "glossari": [361, 368, 379, 381, 385, 407, 420, 421, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 467, 469, 472, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 584, 594, 602, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 774, 778, 781, 793, 797, 798, 800, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 846, 847, 849, 850, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 866, 869, 881, 885, 893, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 914, 915, 940, 941, 963, 966, 981, 982, 988, 1019, 1043], "glu": [146, 376], "glushchenkov": 1049, "gl\u00f2ria": [1048, 1050], "gm": 798, "gmail": [5, 9, 13, 22, 40, 46, 55, 63, 68, 69, 107, 109, 110, 111, 112, 113, 114, 121, 123, 124, 129, 130, 149, 152, 154, 156, 158, 177, 199, 214, 219, 221, 229, 243, 245, 246, 260, 263, 305, 310, 350, 351], "gmil": 374, "gmm": [42, 57, 164, 242, 244, 247, 248, 249, 250, 504, 512, 798, 819, 991, 1014, 1035, 1036, 1039, 1040, 1041], "gmm_": 1036, "gmm_bic_scor": 248, "gmmhmm": [1035, 1036], "gnb": [22, 23, 25, 132, 416, 569, 994], "gnb_isoton": 23, "gnb_sigmoid": 23, "gnu": 377, "go": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 374, 379, 381, 383, 384, 388, 394, 396, 410, 414, 416, 418, 443, 561, 562, 720, 883, 944, 945, 1002, 1008, 1012, 1013, 1019, 1028, 1046], "goadrich": 992, "goal": [8, 15, 18, 25, 50, 55, 84, 125, 161, 168, 173, 197, 212, 215, 235, 236, 253, 256, 257, 350, 366, 367, 374, 381, 384, 385, 393, 394, 395, 399, 414, 418, 542, 548, 590, 593, 739, 992, 995, 997, 998, 1006, 1007, 1008, 1010, 1017, 1019, 1022, 1026, 1028, 1043], "god": [17, 350, 351, 1028], "godbol": 783, "goe": [2, 35, 114, 167, 359, 379, 416, 471, 472, 478, 557, 558, 564, 565, 566, 912, 913, 914, 915, 1002, 1006], "goetz": [1042, 1043], "goh": 1052, "gohlk": 1040, "goix": [0, 1039, 1041, 1042, 1043, 1044], "gold": [31, 191, 198, 200, 203, 207, 211, 214, 244, 249, 266, 289, 337, 385], "goldberg": [853, 995], "goldfarb": 988, "goldman": 10, "goldstein": [168, 999], "goldszmidt": 1004, "gollonet": [0, 398], "goltermann": 1047, "golub": [534, 842, 884], "golubin": 1042, "gome": [1048, 1049], "gomez": [1043, 1050, 1052], "gommer": [1038, 1041, 1042, 1050, 1051], "goncalo": [1042, 1043], "gone": [1035, 1036], "gonthier": 1046, "goo": [146, 376], "good": [2, 7, 18, 23, 25, 38, 42, 44, 47, 50, 51, 53, 56, 72, 79, 84, 102, 115, 118, 121, 122, 125, 150, 154, 161, 167, 181, 186, 197, 198, 203, 212, 223, 226, 230, 233, 236, 244, 246, 252, 253, 259, 265, 275, 302, 310, 311, 317, 325, 330, 338, 350, 351, 361, 365, 366, 367, 378, 380, 381, 382, 383, 385, 387, 391, 393, 405, 406, 409, 411, 413, 414, 416, 417, 418, 419, 437, 439, 444, 534, 559, 561, 562, 590, 630, 640, 647, 648, 656, 658, 659, 661, 669, 680, 690, 694, 723, 731, 742, 764, 829, 898, 941, 981, 987, 988, 989, 992, 993, 995, 996, 997, 999, 1000, 1002, 1006, 1007, 1008, 1013, 1017, 1019, 1023, 1026, 1028, 1041], "goodby": 379, "goodman": [1035, 1040], "googl": [0, 15, 391, 409, 442, 1011, 1024, 1035], "gool": 992, "gorb": 1047, "gordon": [17, 246, 1041, 1045, 1047, 1049], "gorelli": [1043, 1044, 1048, 1050, 1053], "gorgolewski": [0, 398, 1035, 1038], "gorilla": 350, "gorinevski": 988, "gorodkin": 743, "gorro\u00f1o": [1046, 1048, 1049], "got": [233, 266, 361, 384, 551, 649, 665, 1048, 1050, 1052], "gotten": [988, 1002], "gou": 409, "gouillart": [12, 64, 1035], "goupil": [0, 362], "gov": [15, 376], "govern": [167, 361, 365, 368, 379, 393, 1010, 1017], "govin": 1041, "go\u0144da": 1050, "gp": [152, 157, 419, 610, 611, 622, 1041], "gp_fix": 150, "gp_opt": 150, "gpapadok": [1045, 1049], "gpassino": 1039, "gpc": [24, 28, 29, 89, 118, 128, 138, 148, 154, 155, 156, 159, 164, 207, 208, 209, 210, 232, 247, 299, 307, 308, 330, 343, 347, 504, 610, 611, 613, 614, 619, 620, 622, 623, 703, 741, 1014, 1015, 1030, 1045], "gpc_rbf_anisotrop": 151, "gpc_rbf_isotrop": 151, "gperftool": 382, "gplearn": 1012, "gpr": [94, 148, 149, 150, 156, 158, 159, 164, 496, 610, 611, 613, 614, 615, 616, 621, 622, 623, 624, 625, 1014, 1015, 1030, 1045], "gpr_model": 158, "gprof": 382, "gpu": [320, 404, 996, 1013, 1028, 1052], "gr": 897, "grab": 379, "gracefulli": [1038, 1039], "grad": [385, 1017], "gradd": 385, "grade": 992, "gradi": 1045, "gradient": [5, 11, 44, 64, 69, 108, 109, 110, 113, 114, 116, 117, 127, 130, 133, 134, 154, 155, 156, 164, 169, 170, 175, 177, 185, 186, 199, 204, 216, 221, 226, 231, 258, 260, 289, 300, 305, 309, 311, 319, 322, 336, 337, 344, 393, 407, 408, 409, 419, 452, 462, 466, 467, 488, 490, 496, 501, 503, 520, 553, 554, 559, 560, 561, 562, 564, 565, 571, 586, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 631, 632, 634, 635, 639, 648, 649, 658, 659, 668, 669, 672, 674, 676, 677, 678, 680, 687, 692, 694, 695, 741, 742, 748, 750, 790, 800, 803, 804, 805, 821, 827, 830, 860, 861, 862, 865, 877, 878, 908, 966, 989, 992, 995, 996, 997, 998, 1012, 1014, 1015, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1050, 1052], "gradient_boost": [114, 1037, 1038, 1044], "gradientboost": 1040, "gradientboostingclassifi": [114, 121, 124, 307, 361, 391, 553, 561, 632, 633, 993, 999, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "gradientboostingclassifier__learning_r": 307, "gradientboostingregressor": [5, 120, 122, 123, 130, 133, 365, 384, 391, 554, 562, 632, 633, 988, 992, 993, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "gradientboostingregressorgradientboostingregressor": 133, "gradual": [201, 861, 862, 1006], "graduat": 376, "graham": [1040, 1041], "grai": [4, 12, 44, 45, 48, 49, 51, 93, 96, 124, 146, 195, 197, 215, 230, 234, 235, 266, 301, 376, 414, 493, 494, 502, 521, 1024, 1027, 1046], "grain": [2, 29, 35, 231, 249, 307, 385, 417, 446, 960, 1013], "gram": [164, 175, 216, 233, 295, 381, 414, 417, 489, 524, 548, 588, 589, 590, 591, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 767, 981, 988, 1002, 1007, 1014, 1028, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049], "gram_test": 1007, "gram_train": 1007, "gramfort": [0, 22, 23, 28, 40, 45, 52, 65, 93, 95, 100, 182, 184, 185, 186, 188, 190, 191, 226, 229, 265, 272, 295, 394, 397, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "grammar": 379, "granada": 0, "grant": [0, 236, 253, 379], "grape": 410, "graph": [15, 23, 37, 42, 44, 64, 65, 157, 218, 256, 283, 285, 328, 365, 379, 382, 393, 405, 411, 420, 441, 444, 445, 452, 453, 457, 462, 463, 471, 472, 478, 511, 585, 586, 688, 691, 692, 695, 782, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 900, 989, 992, 995, 997, 1005, 1008, 1012, 1017, 1024, 1027, 1035, 1042, 1043, 1045, 1048, 1050], "graph_laplacian": 1042, "graph_lasso": [478, 1043], "graph_model": 285, "graph_shortest_path": [388, 1048], "graphic": [17, 79, 168, 329, 350, 351, 352, 374, 385, 407, 409, 411, 414, 792, 793, 797, 834, 916, 992, 993, 999, 1012, 1028], "graphical_lasso": [388, 471, 472, 1043, 1051], "graphicallasso": [80, 411, 469, 470, 472, 473, 474, 475, 476, 478, 1043, 1051], "graphicallassocv": [10, 80, 399, 411, 471, 473, 474, 475, 476, 478, 1043, 1047, 1049, 1051, 1053], "graphicallassocvifittedgraphicallassocv": 10, "graphlasso": [471, 1040, 1043], "graphlassocv": [472, 1037, 1043], "graphviz": [916, 1008], "grasp": [273, 1007, 1013], "grassberg": [607, 608], "grate": 1017, "graviton": 387, "gray_r": [30, 87, 96, 152, 219, 302, 325, 326, 1025], "grayscal": 30, "greasemonkei": 387, "great": [53, 166, 167, 195, 361, 379, 391, 414, 764, 1013, 1017, 1035, 1042], "greater": [23, 90, 109, 111, 167, 214, 231, 236, 246, 253, 265, 281, 289, 290, 355, 365, 375, 384, 393, 406, 408, 409, 412, 416, 441, 445, 446, 449, 452, 463, 472, 536, 541, 557, 558, 559, 560, 561, 562, 564, 565, 566, 593, 594, 597, 610, 611, 628, 640, 642, 664, 666, 667, 671, 676, 677, 678, 692, 709, 712, 720, 735, 736, 739, 742, 788, 795, 797, 798, 834, 846, 847, 854, 855, 861, 862, 867, 882, 894, 898, 901, 904, 905, 912, 913, 914, 915, 941, 961, 981, 987, 988, 989, 992, 993, 998, 1002, 1007, 1008, 1038, 1043, 1046, 1048, 1049, 1050, 1052], "greater_is_bett": [122, 742, 992], "greatest": [53, 396, 409, 871, 1043], "greatli": [195, 231, 320, 379, 387, 452, 995, 1008, 1041, 1049], "greedi": [146, 416, 418, 447, 449, 460, 559, 560, 602, 988, 1008], "greedili": [84, 146, 409, 413, 418, 460], "greek": [10, 15, 19, 34, 46, 51, 64, 66, 96, 164, 409, 462, 1014], "green": [24, 79, 90, 112, 127, 132, 149, 173, 223, 300, 306, 310, 316, 322, 393, 993, 1043, 1044, 1046, 1047], "greenhal": 1043, "greg": [1017, 1041, 1042, 1044, 1045], "gregori": [1041, 1045, 1046, 1047, 1048], "gregorystrubel": 1048, "gregov": 1043, "grei": [3, 269, 305, 345, 374], "grep": 379, "greyscal": 302, "grid": [4, 6, 8, 9, 18, 23, 24, 25, 40, 52, 59, 69, 70, 71, 72, 76, 80, 118, 128, 141, 143, 145, 153, 164, 166, 167, 168, 186, 215, 223, 231, 232, 233, 237, 243, 248, 251, 253, 256, 258, 260, 263, 264, 266, 271, 276, 281, 285, 287, 288, 296, 302, 307, 308, 310, 335, 337, 338, 344, 350, 374, 381, 386, 391, 393, 403, 410, 413, 415, 416, 417, 448, 461, 464, 472, 498, 502, 515, 522, 631, 632, 633, 647, 650, 653, 654, 656, 659, 661, 663, 676, 713, 728, 742, 785, 788, 800, 803, 804, 811, 814, 816, 830, 831, 864, 909, 985, 987, 992, 995, 999, 1013, 1014, 1019, 1020, 1022, 1024, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1049, 1051, 1052], "grid_encod": 308, "grid_model": 285, "grid_posit": [23, 25], "grid_resolut": [168, 317, 336, 631, 632, 633], "grid_scores_": [1041, 1047, 1048], "grid_search": [72, 115, 238, 248, 257, 267, 322, 410, 960, 1037, 1038, 1039, 1040, 1041, 1042], "grid_siz": [9, 59, 296, 374, 498], "grid_to_graph": [45, 49, 52, 409, 417, 1027, 1048], "grid_tograph": 1038, "grid_valu": [168, 633, 999, 1051], "gridsearch": [52, 76, 270, 1012], "gridsearchcv": [2, 52, 67, 69, 71, 72, 74, 76, 97, 100, 115, 164, 232, 238, 248, 251, 253, 257, 258, 259, 260, 264, 267, 270, 276, 278, 285, 287, 302, 307, 317, 321, 322, 338, 342, 361, 366, 381, 391, 393, 399, 410, 413, 416, 419, 423, 502, 520, 540, 541, 575, 599, 607, 653, 703, 742, 811, 814, 864, 874, 904, 912, 960, 981, 988, 992, 996, 1006, 1007, 1012, 1013, 1014, 1023, 1024, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053], "gridsearchcvifittedgridsearchcv": [70, 248, 257, 259], "gridsearchcvinot": 238, "gridsiz": 230, "gridspec": [23, 25, 63, 243, 386], "gridspecfromsubplotspec": 386, "griffith": [1043, 1044], "grigorev": 1040, "grigorio": 734, "grigsbi": 63, "grime": [689, 693, 989], "grinsztajn": 1052, "grisel": [0, 13, 15, 35, 46, 59, 186, 219, 260, 262, 350, 351, 352, 394, 397, 1011, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "griva": [1049, 1050], "grlivarea": 119, "grobler": [0, 29, 43, 49, 51, 71, 87, 88, 180, 193, 194, 195, 220, 343, 345, 398, 1035, 1036, 1037, 1038], "groceryheist": 1048, "groenen": [690, 694, 989], "grok": 487, "groothui": [627, 982], "grother": 376, "ground": [18, 30, 38, 43, 47, 55, 56, 59, 76, 80, 84, 96, 126, 157, 181, 191, 197, 198, 236, 249, 262, 351, 393, 407, 409, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 723, 724, 726, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 783, 784, 785, 786, 787, 790, 791, 795, 796, 992, 1005, 1019, 1027, 1043], "ground_truth": [53, 290], "group": [0, 10, 35, 38, 53, 56, 58, 132, 168, 170, 197, 219, 233, 249, 254, 311, 322, 327, 351, 359, 374, 384, 393, 394, 399, 409, 415, 416, 417, 434, 446, 495, 588, 589, 591, 594, 718, 788, 800, 801, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 831, 877, 878, 914, 915, 988, 989, 991, 992, 993, 1002, 1008, 1009, 1010, 1012, 1019, 1022, 1023, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053], "group_1": 877, "group_2": 877, "group_3": 877, "group_by_dynam": 154, "group_df": 205, "group_kfold": 801, "group_prior": 254, "groupbi": [2, 125, 168, 205, 215], "groupkfold": [254, 264, 322, 399, 413, 594, 805, 806, 807, 808, 809, 818, 823, 825, 826, 827, 828, 831, 1023, 1041, 1048], "groupshufflesplit": [254, 413, 1023, 1041], "grow": [2, 11, 37, 173, 181, 285, 345, 352, 365, 391, 404, 411, 416, 417, 557, 558, 559, 560, 564, 565, 566, 810, 844, 845, 912, 913, 914, 915, 981, 992, 995, 1008, 1017, 1022, 1026, 1038, 1039], "grower": [125, 416, 561, 562], "grown": [376, 416, 553, 554, 555, 556, 557, 558, 564, 565, 912, 913, 914, 915, 1008], "growth": [992, 1040, 1041], "grumman": 10, "grusak": 1045, "gryllo": [1040, 1043], "gryze": [1037, 1040], "grzegorz": [1042, 1045], "gs_clf": 1028, "gs_time": 270, "gsh": 270, "gsh_time": 270, "gsiisg": 1050, "gsk": 10, "gss": [413, 802], "gt": [30, 69, 70, 114, 130, 167, 248, 257, 271, 377, 379, 383], "gu": [1046, 1047, 1049], "guan": 1045, "guangguo": 1041, "guarante": [5, 6, 25, 78, 79, 125, 167, 205, 230, 281, 283, 305, 351, 361, 367, 373, 387, 388, 402, 409, 413, 414, 417, 446, 536, 645, 658, 659, 668, 672, 674, 676, 678, 687, 694, 817, 820, 844, 845, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 898, 911, 984, 988, 989, 991, 995, 1000, 1004, 1008, 1027, 1045], "gubri": [1043, 1044], "gudmalwar": 1047, "guerin": [1041, 1042], "guess": [15, 109, 118, 413, 416, 417, 532, 538, 540, 541, 547, 788, 992, 1006], "guestrin": 416, "guha": 1050, "gui": [1026, 1036, 1046], "guid": [11, 23, 25, 53, 67, 93, 115, 158, 164, 167, 168, 185, 218, 266, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 368, 377, 378, 379, 384, 385, 386, 387, 392, 393, 394, 399, 407, 410, 416, 420, 421, 422, 423, 426, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 937, 992, 993, 1021, 1028, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1052, 1053, 1054], "guidanc": [391, 419], "guidelin": [378, 382, 384, 385, 387, 407, 409, 416], "guiel": 494, "guilherm": 1038, "guillaum": [0, 3, 5, 70, 73, 98, 130, 149, 154, 155, 156, 158, 185, 186, 199, 219, 305, 397, 1017, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "guillem": [1044, 1045, 1050], "guillemot": [0, 243, 245, 1041, 1042], "guillermo": 1049, "guiniol": 1042, "guitar": 1050, "guitton": 1047, "guiweb": 1048, "gulati": [1040, 1041, 1042], "gun": [17, 374], "gunesbayir": [1050, 1051], "gunnar": [535, 941], "guo": 1048, "guoci": 1042, "gupta": [898, 1004, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052], "gustafson": [1050, 1051], "gustav": 1041, "gustavo": [1043, 1044, 1049], "gutierrez": 1045, "guttman": 694, "guyon": [515, 593, 594, 992], "guyon2015": 992, "gwulf": [1039, 1040], "gz": [6, 383, 396, 508, 509], "gzip": 1035, "g\u00e9ron": 1043, "g\u00f3rski": [1046, 1047], "g\u00f6khan": [3, 414, 535], "g\u00fcnther": [1048, 1052], "h": [3, 4, 11, 46, 56, 93, 94, 109, 110, 128, 146, 151, 167, 245, 288, 291, 299, 307, 319, 330, 334, 352, 376, 385, 406, 409, 411, 414, 415, 416, 417, 420, 444, 519, 532, 535, 538, 540, 547, 553, 567, 568, 582, 590, 607, 608, 689, 693, 704, 708, 757, 839, 843, 844, 845, 850, 860, 875, 884, 984, 986, 988, 989, 990, 992, 994, 996, 997, 1006, 1008, 1024, 1041, 1046, 1050, 1051, 1052], "h1998": 416, "h2009": 999, "h4dr1en": 1045, "h5py": 373, "h_": 988, "h_i": [414, 997], "h_init": 385, "h_j": 997, "h_l": 986, "h_m": 416, "h_pad": [93, 118, 356], "h_samples_": 860, "ha": [0, 2, 3, 6, 9, 10, 11, 23, 28, 32, 35, 42, 48, 53, 54, 55, 58, 72, 78, 79, 84, 93, 107, 114, 118, 120, 122, 125, 127, 132, 144, 145, 149, 154, 155, 156, 162, 167, 168, 169, 170, 173, 190, 194, 197, 198, 199, 203, 214, 215, 218, 226, 230, 232, 233, 236, 237, 240, 243, 244, 246, 248, 249, 253, 254, 257, 258, 259, 262, 263, 265, 270, 271, 281, 286, 289, 290, 291, 293, 301, 305, 306, 308, 310, 315, 316, 317, 318, 319, 321, 325, 328, 338, 342, 343, 344, 350, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 394, 396, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 494, 497, 498, 508, 509, 516, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 619, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 695, 711, 713, 720, 722, 741, 763, 774, 778, 779, 780, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 821, 822, 823, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 923, 924, 925, 943, 961, 977, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1016, 1017, 1019, 1023, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "haan": 1044, "haar": [12, 1052], "haas": 1045, "habchi": 1045, "haberland": [1050, 1051], "haberth\u00fcr": 1042, "hack": [6, 8], "had": [2, 7, 45, 122, 125, 154, 233, 305, 311, 318, 361, 379, 380, 399, 417, 420, 444, 982, 992, 1017, 1019, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1050], "hadamard": 381, "haddad": 1042, "hadrien": [1042, 1045], "hadshirt": 1045, "haenel": 1038, "haesun": [1047, 1050, 1051], "hafner": 1048, "hagai": 797, "hagberg": 15, "hahn": [1042, 1043], "haiat": 1047, "haidar": [1048, 1049], "hail": 311, "hailei": [1045, 1046], "hain": 374, "haitz": [1046, 1048, 1049], "hakaa1": [1042, 1043], "hal": [547, 658, 758, 759, 990], "halchenko": [0, 397, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051], "hale": [1037, 1049], "half": [2, 22, 96, 125, 231, 235, 257, 259, 271, 374, 375, 414, 416, 463, 522, 562, 593, 597, 602, 770, 863, 871, 992, 995, 1008], "half_cal": 597, "half_selector": 597, "halfbath": 119, "halford": [1043, 1050, 1051], "halkidi": 409, "halko": [414, 535, 541, 544, 940, 941], "hall": [988, 1042, 1046], "hallock": 1041, "halpert": [692, 989], "halv": [141, 164, 251, 263, 267, 276, 344, 403, 515, 564, 579, 800, 803, 804, 909, 1014, 1030, 1047], "halvic": 1047, "halvinggridsearchcv": [270, 271, 317, 399, 579, 804, 981, 1047, 1049, 1050, 1052, 1053], "halvingrandomsearchcv": [122, 271, 317, 399, 579, 803, 981, 1047, 1049, 1050, 1051, 1052, 1053], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 271, "halwai": 1041, "ham": [5, 450, 457, 581, 699, 703, 709, 734, 741, 778, 779, 780, 796, 995], "hamada": 1047, "hamdi": 1052, "hammerbach": 1039, "hamming_loss": [5, 703, 796, 992, 1037, 1041, 1044], "hammingdist": 699, "hammoudeh": 1044, "hamoumi": 1048, "hampton": 1028, "hampu": 1039, "hamzeh": [0, 1038, 1039], "han": [409, 442, 450, 457, 1035, 1043, 1044, 1048], "hancock": 1045, "hand": [3, 27, 33, 49, 51, 84, 87, 95, 96, 98, 115, 122, 141, 144, 154, 164, 167, 168, 190, 201, 204, 222, 229, 230, 232, 233, 236, 252, 253, 256, 261, 268, 273, 287, 302, 325, 326, 338, 365, 373, 374, 376, 379, 381, 385, 387, 392, 414, 415, 416, 418, 426, 432, 502, 643, 697, 713, 788, 830, 885, 909, 981, 985, 988, 992, 994, 996, 1000, 1005, 1007, 1014, 1017, 1019, 1022, 1025, 1026], "handbook": [720, 740, 992], "handi": [47, 69, 351, 352, 380, 1051], "handk": 1051, "handl": [0, 2, 7, 69, 115, 119, 125, 126, 130, 173, 181, 232, 233, 253, 261, 266, 268, 278, 281, 283, 290, 311, 315, 322, 350, 352, 359, 365, 371, 373, 377, 379, 380, 381, 388, 391, 393, 416, 417, 419, 496, 544, 577, 581, 582, 588, 589, 591, 610, 635, 646, 647, 652, 658, 659, 660, 661, 662, 668, 675, 676, 678, 681, 720, 788, 868, 877, 878, 904, 905, 909, 916, 942, 949, 952, 989, 992, 993, 994, 995, 998, 1000, 1007, 1008, 1012, 1013, 1017, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "handle_data": 6, "handle_endtag": 6, "handle_starttag": 6, "handle_unknown": [2, 69, 114, 119, 130, 168, 169, 228, 236, 238, 240, 311, 316, 319, 877, 878, 1002, 1039, 1043, 1047, 1048], "handler": 1046, "handler_map": 290, "handlerpathcollect": 290, "handletextpad": 356, "handpick": 226, "handprint": 376, "handwritten": [10, 34, 36, 41, 43, 44, 46, 47, 50, 55, 57, 58, 59, 66, 114, 144, 164, 217, 218, 220, 222, 224, 230, 246, 257, 292, 293, 301, 302, 325, 326, 351, 372, 409, 416, 447, 502, 541, 544, 549, 566, 688, 689, 690, 691, 692, 704, 705, 717, 737, 793, 795, 853, 865, 874, 884, 897, 989, 995, 1014, 1019, 1030], "hang": [379, 1045, 1046], "hank": 1038, "hanmin": [0, 306, 397, 1042, 1043, 1044, 1045, 1046], "hann": 1035, "hanna": [1039, 1040, 1046], "hannah": [1045, 1047, 1049], "hannel": [1043, 1044], "hansen": 1043, "hansin": [1049, 1050], "hanu\u0161": 1052, "hanxiang": [679, 988], "hao": [1046, 1047, 1049, 1050], "haoi": 1052, "haoran": 1043, "haoyin": [1046, 1048, 1049], "happen": [3, 25, 114, 185, 253, 305, 311, 351, 361, 365, 366, 377, 378, 379, 383, 384, 385, 391, 393, 394, 396, 402, 409, 411, 413, 416, 437, 515, 572, 658, 785, 882, 884, 904, 988, 992, 993, 1007, 1013, 1028, 1043, 1047, 1048, 1050, 1051, 1052, 1053], "happi": [167, 253, 350, 391, 394, 818, 819], "haqu": [1037, 1038, 1039], "harabasz": 710, "harabaz": 1041, "hard": [7, 197, 226, 230, 259, 261, 367, 378, 391, 393, 408, 409, 414, 417, 534, 541, 569, 676, 906, 907, 908, 909, 910, 988, 1005, 1007, 1008, 1013, 1026, 1027, 1028, 1044, 1045], "hardcod": [440, 454, 1043], "harder": [268, 269, 309, 374, 378, 381, 387, 391, 409, 515, 561, 562], "hardest": 1021, "hardin": 79, "hardli": [53, 607, 608], "hardwar": [17, 329, 352, 365, 366, 374, 377, 391, 396, 402, 404, 1012, 1049, 1050], "hare": 988, "harfouch": 1051, "harikrishnan": 1037, "harizo": [1041, 1042], "harm": [253, 350, 381, 417, 795], "harmanan": 1052, "harmon": [2, 35, 266, 351, 409, 535, 541, 729, 730, 736, 783, 795, 992], "haroldfox": [1043, 1044], "harper": 1042, "harri": [1039, 1041, 1047, 1048], "harsanyi": 1051, "harsh": [426, 437, 469, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 658, 666, 668, 674, 675, 676, 799, 822, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 899, 900, 904, 906, 909, 912, 914, 1045, 1047, 1050], "harshit5674": 1050, "hart": [376, 986, 1043], "hartong": 1046, "harutaka": 1048, "harvest": 311, "harwar": 391, "has_fit_paramet": 388, "hasan": 1050, "hasattr": [42, 54, 60, 80, 107, 118, 215, 230, 299, 307, 350, 393, 424, 428, 434, 953, 1045], "haseeb": [1048, 1049], "hash": [6, 108, 134, 164, 234, 308, 351, 352, 365, 367, 371, 379, 382, 391, 416, 514, 544, 557, 566, 581, 582, 589, 640, 839, 957, 984, 1014, 1028, 1030, 1036, 1039, 1042], "hashabl": [393, 872, 875, 1003], "hashcode55": 1041, "hasher": [128, 352, 417], "hashingvector": [6, 352, 367, 417, 489, 588, 590, 591, 1036, 1042, 1043, 1044, 1045, 1048], "hashlib": 6, "hasil": 1039, "haskel": 1012, "hasn": 399, "hassaan": [1043, 1044], "hassan": 1048, "hassen": 1035, "hassoun": 1050, "hasti": [109, 112, 113, 124, 146, 185, 258, 376, 413, 416, 519, 520, 553, 559, 560, 628, 656, 721, 723, 724, 834, 851, 897, 912, 913, 982, 986, 988, 993, 999, 1004, 1006, 1008], "hat": [79, 102, 255, 259, 288, 318, 377, 406, 411, 415, 416, 983, 988, 989, 992, 994, 996], "hathidara": 1047, "hatwar": [1043, 1044], "hauck": 1041, "hausamann": [1043, 1044], "haussler": 157, "have": [0, 2, 3, 5, 6, 7, 9, 10, 11, 12, 22, 23, 24, 25, 35, 37, 40, 41, 44, 45, 48, 51, 53, 55, 58, 60, 62, 63, 68, 69, 76, 78, 84, 87, 89, 90, 98, 99, 109, 116, 118, 119, 120, 122, 125, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 170, 173, 176, 181, 197, 198, 199, 201, 215, 222, 226, 228, 233, 234, 236, 237, 244, 245, 246, 248, 252, 253, 259, 260, 262, 265, 266, 273, 274, 278, 283, 285, 286, 289, 290, 305, 310, 311, 312, 315, 317, 318, 322, 326, 327, 328, 335, 341, 342, 343, 345, 350, 351, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 492, 494, 495, 496, 508, 509, 514, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 699, 704, 705, 712, 715, 720, 726, 731, 736, 742, 756, 757, 758, 759, 782, 785, 786, 792, 795, 797, 798, 799, 800, 803, 804, 805, 806, 811, 814, 818, 822, 823, 825, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 926, 928, 930, 941, 967, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1017, 1019, 1020, 1023, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "haversin": [296, 415, 699, 762, 764, 995, 1044, 1047], "haversine_dist": [762, 1044], "haversinedist": 699, "hawaii": 154, "haxbi": 0, "haya": 1049, "hayashi": 1043, "hbgt": 125, "hd": 10, "hdb": [53, 446], "hdbscan": [34, 42, 47, 63, 66, 164, 230, 444, 512, 884, 982, 1012, 1014, 1029, 1030, 1051, 1052, 1053], "hdbscan_min_cluster_s": 42, "hdbscan_min_sampl": 42, "hdf5": 373, "hdl": [146, 376], "hdmetor": 1041, "he": [379, 726, 756, 861, 862, 894, 895, 992, 1028, 1042, 1049, 1050], "head": [0, 11, 24, 69, 114, 129, 154, 167, 185, 186, 215, 240, 248, 311, 315, 320, 379, 387, 397, 414, 1017, 1040, 1041, 1050, 1051, 1052, 1053], "head_width": 24, "header": [13, 68, 260, 350, 351, 374, 377, 417, 488, 489, 800, 803, 804, 814], "heali": 409, "heap": 450, "heapq": 463, "heard": 379, "heart": 236, "heat": [130, 338, 409, 452, 462, 695], "heatingqc": 130, "heatmap": [168, 170, 176, 181, 270, 320, 338, 632, 999], "heatmap_kw": 632, "heatmaps_": 632, "heavei": 1043, "heavi": [199, 391, 405, 1013], "heavier": [102, 411, 988], "heavili": [186, 365, 366, 379, 387, 649, 655, 778, 1009], "heavy_rain": [2, 168], "hebei": 409, "hedlund": 1051, "hedyati": 1039, "hee": [1042, 1045], "heer": 1046, "hegd": 1052, "heidelberg": [409, 414, 535, 696, 726, 756, 992], "height": [6, 13, 51, 96, 119, 120, 146, 305, 311, 322, 350, 415, 446, 493, 494, 506, 586], "heightpet_catpet_dogf64f64f64": 322, "heikki": 1004, "heilman": [1039, 1040], "heitz": 311, "held": [2, 6, 69, 100, 123, 169, 205, 245, 262, 267, 281, 413, 416, 559, 560, 561, 562, 701, 800, 803, 804, 814, 861, 862, 874, 981, 982, 991, 1000, 1028], "helder": [1039, 1048, 1049], "heldout": 204, "heldout_scor": 121, "helen": 320, "heli": 1042, "hello": [379, 387, 953, 957], "helloifeven": 953, "helmu": 1039, "help": [0, 2, 7, 9, 53, 68, 72, 98, 103, 168, 181, 215, 218, 253, 260, 262, 278, 302, 335, 338, 351, 352, 361, 365, 366, 377, 380, 381, 382, 383, 384, 385, 387, 388, 393, 394, 395, 402, 409, 410, 413, 417, 419, 433, 536, 577, 627, 650, 654, 665, 685, 686, 692, 714, 840, 912, 913, 914, 915, 982, 986, 987, 989, 991, 992, 994, 996, 1002, 1003, 1008, 1011, 1012, 1013, 1016, 1017, 1028, 1041, 1042, 1043, 1046, 1049, 1053], "helper": [3, 4, 96, 215, 270, 372, 381, 382, 392, 393, 413, 468, 575, 902, 1023, 1024, 1035, 1042, 1043, 1044, 1048], "helvetica": [916, 918], "heme": 1052, "hempstalk": 1042, "henc": [35, 58, 70, 167, 201, 230, 253, 268, 338, 350, 351, 365, 374, 381, 383, 385, 393, 396, 409, 413, 416, 417, 487, 508, 539, 541, 542, 543, 563, 590, 643, 646, 652, 660, 662, 672, 687, 704, 705, 709, 715, 731, 757, 786, 795, 819, 820, 839, 840, 841, 842, 843, 879, 949, 989, 991, 992, 993, 998, 999, 1002, 1013, 1042, 1043, 1046, 1047, 1049], "hendrik": [0, 22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232, 397, 1035, 1038, 1039, 1040, 1041], "henri": [1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "henrymooresc": [1049, 1050], "hepe": [679, 988], "here": [2, 6, 7, 10, 11, 12, 15, 22, 25, 55, 56, 64, 76, 80, 87, 88, 90, 95, 96, 98, 99, 100, 101, 103, 109, 112, 115, 119, 123, 125, 130, 143, 146, 149, 157, 158, 167, 168, 169, 173, 176, 181, 186, 190, 197, 201, 203, 212, 213, 215, 218, 220, 226, 231, 233, 236, 237, 244, 245, 246, 252, 253, 256, 257, 259, 261, 262, 264, 268, 269, 271, 273, 278, 283, 285, 292, 300, 301, 302, 307, 310, 317, 319, 322, 325, 327, 338, 342, 345, 347, 352, 355, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 392, 399, 402, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 420, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 464, 472, 475, 536, 538, 539, 543, 544, 567, 568, 569, 570, 581, 582, 584, 588, 591, 594, 602, 628, 630, 647, 651, 653, 655, 661, 663, 665, 673, 675, 689, 691, 695, 699, 712, 726, 746, 756, 794, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 840, 844, 845, 868, 876, 879, 882, 885, 896, 897, 907, 958, 981, 984, 988, 989, 990, 991, 992, 995, 998, 1002, 1004, 1005, 1006, 1007, 1012, 1013, 1016, 1017, 1019, 1020, 1026, 1035, 1043, 1048], "hereaft": 394, "hereund": 998, "herilalaina": [1042, 1043, 1045], "hermano": [1050, 1051], "hermida": [1044, 1048], "hernandez": 992, "hern\u00e1ndez": 992, "hero": [411, 422, 475], "herrou": 1049, "hershei": 992, "hertel": 1052, "herv": 1039, "hervieu": 1035, "herv\u00e9": 1039, "heryanto": 1042, "hesit": 379, "hessian": [218, 219, 220, 416, 561, 562, 648, 658, 659, 669, 680, 689, 693, 988, 996, 1029, 1030, 1050], "hessian_tol": [689, 693], "heterogen": [2, 7, 22, 53, 67, 69, 74, 164, 168, 197, 240, 310, 315, 352, 371, 373, 391, 464, 488, 541, 581, 591, 713, 864, 868, 904, 989, 999, 1002, 1012, 1014, 1030, 1039, 1043, 1045, 1046], "heteroscedast": [93, 100, 122, 199, 414, 880, 892], "heteroschedast": 992, "heuer": 1038, "heurist": [10, 13, 121, 236, 350, 366, 409, 418, 449, 452, 461, 462, 508, 509, 537, 539, 546, 676, 677, 678, 691, 695, 803, 804, 906, 907, 908, 909, 910, 929, 989, 990, 995, 1006, 1008, 1017, 1026, 1035, 1036, 1040, 1044, 1047, 1048], "hexbin": 230, "hexdigest": 6, "hgbdt": 115, "hgbdt_model": 168, "hgbdt_model_without_interact": 168, "hgbdt_preprocessor": 168, "hgbt": [115, 125, 416], "hgbt_cst": 125, "hgbt_no_cst": 125, "hgbt_quantil": 125, "hhu": [649, 1044], "hi": [0, 410, 992, 1028], "hibon": 1042, "hida": [1050, 1051], "hidden": [2, 168, 301, 302, 379, 387, 405, 414, 860, 861, 862, 996, 997, 1012, 1035, 1046], "hidden_layer_s": [168, 237, 299, 301, 861, 862, 996], "hide": [41, 379, 387, 839, 840, 841, 842, 843, 1038, 1043, 1051], "hideaki": 1049, "hierarch": [12, 19, 34, 37, 38, 40, 42, 44, 50, 51, 52, 55, 66, 164, 170, 222, 319, 359, 393, 417, 441, 443, 445, 446, 504, 512, 514, 522, 530, 547, 731, 857, 884, 1009, 1013, 1014, 1029, 1030, 1035, 1038, 1039, 1051], "hierarchi": [39, 170, 379, 450, 456, 463, 997, 1027], "higgin": 1052, "high": [0, 2, 7, 9, 10, 23, 25, 29, 35, 38, 42, 47, 53, 55, 60, 63, 68, 72, 78, 79, 95, 96, 112, 114, 115, 116, 117, 122, 123, 125, 126, 128, 137, 138, 146, 149, 155, 162, 166, 168, 169, 170, 181, 192, 198, 199, 201, 211, 218, 219, 220, 226, 230, 243, 249, 257, 261, 265, 266, 275, 289, 290, 299, 301, 307, 309, 310, 311, 312, 321, 328, 335, 337, 338, 350, 351, 357, 358, 365, 374, 376, 379, 384, 387, 388, 391, 392, 405, 406, 407, 408, 409, 413, 415, 416, 417, 418, 419, 444, 447, 449, 450, 452, 469, 482, 483, 484, 553, 554, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 644, 670, 671, 679, 689, 692, 693, 726, 731, 742, 746, 756, 789, 792, 808, 810, 844, 845, 849, 878, 879, 883, 885, 906, 908, 909, 912, 913, 914, 915, 961, 981, 986, 987, 988, 989, 991, 992, 995, 996, 998, 1000, 1002, 1004, 1007, 1008, 1009, 1012, 1013, 1019, 1020, 1022, 1028, 1035, 1036, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050], "high_cardin": 311, "high_cardinality_featur": 311, "high_cardinalityindex": 311, "high_i": 192, "high_precision_cv_result": 257, "high_recall_cv_result": 257, "high_x": 192, "higher": [2, 11, 55, 78, 96, 100, 109, 112, 114, 115, 122, 126, 144, 149, 151, 156, 157, 167, 168, 169, 173, 197, 198, 201, 215, 222, 223, 249, 252, 253, 257, 259, 262, 274, 288, 310, 338, 342, 350, 351, 352, 361, 365, 374, 377, 381, 405, 408, 409, 411, 416, 418, 419, 420, 444, 448, 449, 471, 478, 509, 532, 539, 543, 548, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 573, 588, 591, 607, 608, 619, 627, 631, 635, 637, 646, 647, 652, 653, 660, 661, 662, 663, 676, 678, 679, 704, 724, 728, 752, 785, 797, 800, 803, 804, 806, 814, 821, 823, 828, 831, 850, 853, 879, 896, 897, 898, 904, 905, 906, 907, 908, 909, 910, 917, 984, 988, 989, 991, 992, 995, 999, 1002, 1006, 1007, 1026, 1028, 1036, 1041, 1043, 1050, 1052], "highest": [15, 17, 24, 80, 142, 146, 201, 257, 259, 270, 317, 350, 379, 391, 406, 409, 413, 416, 418, 437, 555, 557, 564, 592, 595, 596, 598, 599, 600, 603, 604, 606, 635, 637, 726, 756, 794, 797, 800, 803, 804, 814, 901, 912, 943, 981, 988, 992, 993, 996, 1006, 1008, 1047], "highest_protocol": 402, "highli": [2, 7, 25, 70, 78, 79, 95, 103, 126, 181, 192, 202, 253, 259, 262, 268, 300, 342, 351, 365, 366, 379, 381, 385, 391, 406, 409, 413, 416, 417, 452, 462, 496, 563, 671, 692, 812, 814, 860, 988, 992, 995, 996, 998, 1006, 1007, 1011, 1012], "highlight": [2, 11, 13, 53, 69, 78, 90, 113, 114, 116, 119, 125, 127, 143, 146, 149, 150, 155, 161, 162, 168, 169, 173, 178, 197, 198, 199, 215, 228, 237, 238, 239, 240, 254, 255, 256, 268, 271, 278, 285, 309, 311, 323, 350, 352, 368, 379, 383, 384, 387, 391, 419, 443, 446, 447, 464, 467, 490, 491, 496, 501, 502, 504, 512, 515, 521, 524, 538, 541, 561, 562, 564, 565, 567, 599, 602, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 680, 688, 701, 702, 717, 732, 748, 788, 795, 800, 801, 803, 804, 806, 814, 823, 826, 827, 830, 846, 848, 865, 869, 874, 877, 878, 879, 883, 884, 885, 901, 902, 904, 909, 912, 913, 936, 989, 992, 1000, 1002, 1007, 1014, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "highlight_min": [122, 186], "higuera": 373, "hila": 409, "hilbert": [202, 870, 984, 1002], "hilferti": 78, "hill": [409, 448, 461, 1045], "him": 417, "himanshu": [1046, 1049], "hind": 1049, "hinder": 1045, "hing": [23, 204, 207, 209, 267, 335, 336, 340, 342, 393, 666, 676, 735, 904, 911, 988, 1006, 1007, 1028], "hinge_loss": [342, 992, 1039, 1047, 1048], "hinrich": 414, "hint": [167, 365, 380, 384, 399, 448, 992, 1026], "hinton": [692, 853, 860, 861, 862, 989, 995, 996, 997], "hintz": 1041, "hiramatsu": 1052, "hirofumi": [1046, 1047], "hirsch": 1043, "hirschberg": [409, 717, 737, 795], "hirzel": 1048, "hispan": 167, "hist": [2, 23, 25, 51, 73, 111, 115, 197, 199, 230, 236, 253, 265, 288, 305, 309, 311, 319, 322, 416], "hist_drop": 119, "hist_n": 119, "hist_nbin": 305, "hist_no_interact": 320, "hist_one_hot": 119, "hist_ordin": 119, "hist_quantil": 319, "hist_x0": 305, "hist_x1": 305, "histgradientboost": 1047, "histgradientboostingclassifi": [114, 115, 253, 315, 316, 317, 318, 320, 322, 366, 402, 559, 564, 632, 633, 982, 1012, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingclassifierhistgradientboostingclassifi": 253, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 253, "histgradientboostingregressor": [2, 5, 11, 110, 115, 119, 122, 123, 125, 127, 130, 161, 168, 197, 311, 315, 316, 317, 318, 320, 321, 322, 383, 416, 560, 565, 632, 633, 635, 982, 999, 1012, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingregressor__interaction_cst": 168, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "histgradientboostingregressorhistgradientboostingregressor": [130, 311], "histgradientboostingregressorifittedhistgradientboostingregressor": [127, 320], "histogram": [11, 23, 25, 51, 108, 110, 114, 119, 120, 122, 123, 127, 134, 164, 197, 205, 230, 258, 260, 265, 288, 305, 317, 319, 321, 322, 406, 490, 496, 559, 560, 561, 562, 564, 565, 632, 642, 742, 748, 758, 759, 790, 800, 805, 821, 827, 830, 984, 990, 1002, 1014, 1029, 1030, 1047, 1050, 1052], "histor": [10, 197, 253, 1013], "histori": [10, 368, 559, 560, 1010, 1035], "hit": [199, 385], "hitesh": 1047, "hjortkj\u00e6r": 1049, "hkey_local_machin": 396, "hline": 95, "hlle": 989, "hmasdev": 1049, "hmc": 10, "hmm": [1035, 1036, 1037, 1038, 1040], "hmmlearn": 1012, "hn": 385, "hnyk": [1041, 1042], "ho": [113, 416, 555, 556, 992, 1040, 1043, 1044, 1049], "hoang": [1044, 1045], "hobson": 1041, "hoc": [145, 146, 164, 251, 253, 262, 276, 278, 328, 359, 393, 408, 496, 658, 816, 822, 827, 865, 884, 1014], "hochberg": [595, 1041, 1042], "hochreit": [405, 719], "hockei": [17, 374], "hoctor": 1047, "hoda1394": 1047, "hoenig": 1035, "hoesli": 416, "hoffman": [414, 536, 1040, 1047], "hogan": 1043, "hoh": 1043, "hold": [6, 11, 24, 25, 197, 201, 233, 253, 260, 359, 372, 379, 380, 381, 393, 406, 409, 413, 416, 417, 419, 503, 557, 561, 564, 589, 632, 633, 634, 736, 800, 803, 804, 814, 840, 871, 872, 877, 878, 885, 888, 912, 914, 982, 986, 992, 996, 1006, 1007, 1008, 1019, 1028, 1043, 1047, 1053], "holder": 1028, "holdgraf": 1043, "holdselig": 417, "hole": [164, 217, 218, 219, 220, 223, 224, 530, 692, 693, 1014, 1049], "holger": 1042, "holidai": [2, 168], "holm": [835, 993, 1052], "holman": 1050, "holmstr\u00f6m": 1037, "holohan": [1050, 1052], "holt": [0, 398, 1035], "holub": 534, "home": [0, 10, 111, 130, 153, 155, 157, 158, 189, 206, 244, 254, 302, 320, 343, 356, 374, 377, 387, 396, 407, 486, 499, 679, 1017], "homebrew": [382, 396], "homepag": [374, 530, 1008], "homm": 1050, "homo": 56, "homogen": [35, 36, 37, 42, 44, 47, 53, 56, 351, 374, 391, 393, 411, 416, 419, 446, 614, 704, 717, 731, 736, 737, 757, 795, 989, 990, 992, 1044], "homogeneity_completeness_v_measur": [409, 1044], "homogeneity_scor": [36, 47, 56, 351, 409, 717, 736, 795, 992], "homomorph": 1012, "homoscedast": [100, 229, 309, 992, 1043], "homoschedast": 992, "honda": 10, "honei": 986, "hong": [1041, 1043, 1047, 1048, 1049, 1051], "hongh": 1043, "hongkahjun": 1042, "honglu": 1045, "hongshaoyang": 1050, "honl": [1047, 1048], "honolulu": 992, "honor": 311, "hood": [402, 988, 1007], "hoover": [1040, 1041, 1042, 1044], "hope": [3, 215, 393, 407, 1044], "hopefulli": [262, 387, 1035], "hopfensperg": 1052, "hopper": 1040, "horizont": [28, 93, 218, 231, 305, 308, 384, 393, 464, 515, 697, 701], "horizontal_distance_to_hydrologi": 491, "horizontalalign": [10, 24, 29, 38, 42, 43, 60, 99, 226, 243, 299, 307], "hornik": 635, "hornstein": 1050, "horrel": 1042, "hoshia": 1049, "hossein": [1043, 1044, 1045], "host": [0, 115, 321, 350, 374, 379, 383, 387, 388, 897, 960, 1028, 1051], "hot": [2, 69, 114, 117, 130, 167, 197, 268, 306, 307, 311, 317, 338, 393, 416, 417, 551, 566, 581, 648, 658, 659, 669, 680, 867, 869, 871, 872, 875, 877, 878, 885, 988, 1002, 1043, 1049, 1050], "hot_r": [10, 305], "hotel": 1017, "hotspot": 385, "hotter": 117, "hour": [2, 125, 167, 168, 322, 379, 385, 496, 989, 1011], "hour_co": 2, "hour_df": 2, "hour_sin": 2, "hour_workday_interact": 2, "hourli": [2, 125, 167], "hourly_wag": 166, "hous": [73, 120, 130, 161, 162, 253, 305, 317, 372, 490, 1030], "house_pric": [73, 130], "houseag": [305, 317, 374, 490], "household": 374, "housestyl": [119, 130], "hover": 322, "hover_data": [115, 260], "how": [0, 2, 3, 5, 6, 7, 8, 11, 18, 19, 23, 24, 25, 30, 31, 35, 48, 49, 50, 51, 55, 58, 67, 68, 69, 72, 76, 78, 84, 102, 109, 110, 113, 117, 118, 119, 120, 122, 123, 125, 128, 130, 143, 144, 156, 164, 167, 168, 169, 170, 173, 178, 186, 187, 193, 198, 199, 200, 201, 204, 205, 211, 215, 222, 223, 228, 231, 233, 235, 236, 237, 239, 249, 253, 254, 255, 257, 259, 260, 261, 266, 268, 269, 271, 272, 273, 274, 281, 283, 285, 286, 287, 289, 290, 301, 310, 312, 316, 317, 318, 321, 322, 335, 336, 338, 341, 342, 345, 350, 351, 355, 359, 365, 366, 367, 368, 374, 377, 378, 380, 381, 382, 384, 387, 392, 393, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 504, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 622, 623, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 704, 720, 757, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 976, 981, 982, 986, 987, 988, 989, 991, 992, 998, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1011, 1013, 1017, 1019, 1021, 1023, 1028, 1030, 1035, 1037, 1040, 1046, 1049, 1050, 1051], "howaboutw": 1010, "howel": 1042, "howev": [0, 2, 3, 5, 11, 12, 22, 23, 25, 35, 45, 47, 51, 53, 58, 70, 73, 76, 80, 83, 98, 100, 112, 114, 115, 119, 122, 123, 130, 143, 146, 149, 154, 155, 168, 169, 178, 186, 197, 201, 219, 222, 223, 226, 232, 233, 236, 253, 259, 266, 273, 274, 278, 281, 283, 288, 300, 305, 317, 342, 345, 350, 351, 361, 365, 366, 367, 373, 374, 376, 378, 379, 381, 385, 387, 391, 393, 399, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 440, 443, 447, 449, 451, 454, 459, 496, 508, 532, 541, 551, 567, 581, 582, 583, 589, 606, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 632, 633, 638, 643, 655, 656, 672, 687, 692, 695, 700, 763, 765, 800, 803, 804, 814, 827, 831, 832, 843, 861, 862, 867, 876, 877, 882, 906, 907, 909, 920, 961, 981, 982, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1002, 1006, 1007, 1008, 1019, 1023, 1026, 1044, 1045, 1047, 1048, 1051], "hoyer": [414, 1038], "hp": [10, 1028], "hpq": 10, "hrishikesh": [1036, 1037], "hristo": [1043, 1050], "hsiang": [658, 1039], "hsieh": 1041, "hspace": [4, 12, 13, 42, 43, 60, 93, 215, 226, 243, 245, 246, 249, 288, 317, 326, 335, 1024], "hstack": [12, 31, 40, 132, 142, 223, 235, 254, 341, 413, 863], "hsuan": 1040, "ht2001": 992, "htf": 416, "htm": [912, 913], "html": [2, 6, 10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 146, 154, 158, 167, 168, 169, 173, 178, 227, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 374, 376, 379, 380, 382, 383, 387, 410, 413, 417, 423, 487, 508, 509, 658, 839, 843, 937, 990, 1012, 1013, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "htmledit": [839, 843, 990], "htmlparser": 6, "htsedebenham": 1050, "http": [2, 4, 5, 6, 10, 11, 15, 22, 69, 123, 130, 146, 158, 162, 173, 197, 205, 213, 215, 223, 227, 273, 278, 281, 283, 301, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 393, 396, 404, 409, 413, 418, 442, 449, 452, 462, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 508, 509, 510, 530, 531, 534, 536, 537, 541, 595, 636, 641, 644, 649, 658, 664, 666, 667, 668, 671, 676, 679, 682, 683, 685, 686, 691, 692, 695, 705, 721, 723, 724, 758, 759, 769, 839, 841, 842, 843, 846, 847, 852, 853, 854, 855, 860, 882, 897, 898, 899, 912, 913, 988, 990, 992, 995, 1005, 1008, 1017, 1024, 1040, 1045], "hu": [1040, 1043, 1045], "hua": [563, 998], "huang": [374, 658, 1041, 1046], "huangk10": 1046, "huard": 1035, "huber": [179, 207, 407, 416, 560, 649, 676, 678, 1006, 1035, 1037, 1038, 1047], "huberlossfunct": 1048, "huberregressor": [52, 149, 164, 175, 177, 195, 201, 202, 203, 216, 312, 524, 670, 671, 672, 678, 679, 988, 1014, 1041, 1042, 1043, 1044], "hubert": [409, 705, 715, 786], "hubert1985": 705, "hudson": 320, "hue": [125, 248, 259, 310, 376], "huerta": 1045, "hug": [0, 146, 309, 397, 1010, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "huge": [199, 202, 365, 385, 627, 1038], "hugh": [879, 1037, 1048], "hugo": [4, 374, 1041, 1046, 1047, 1048, 1049], "hugorichard": 1047, "hugu": 1039, "hui": [113, 185, 538, 540, 547, 656, 988], "huiginn": 1035, "huilgolkar": [1036, 1037], "hujiahong726": 1051, "hull": 1052, "humahn": 1050, "human": [93, 168, 350, 409, 414, 861, 862, 992, 999, 1044], "humid": [2, 168, 999], "hunan": 1043, "hundr": [40, 121, 219, 309, 374, 413, 416, 561, 562, 989, 1046], "hungarian": [405, 719], "hunt": 1050, "hunter": 1044, "hurt": [365, 534, 1043], "husak": 1049, "huszar": 1017, "hut": [692, 989, 1040, 1042, 1045], "huynh": [1045, 1047], "hv": 417, "hvassard": 1049, "hwan": 1046, "hwang": 1041, "hybrid": [446, 649, 1012], "hye": 1046, "hyper": [2, 25, 69, 115, 252, 259, 264, 302, 338, 361, 381, 391, 392, 393, 403, 413, 416, 418, 468, 644, 645, 804, 812, 814, 860, 902, 987, 988, 992, 995, 1006, 1007, 1019, 1030, 1035, 1049], "hyperband": 981, "hyperbol": [342, 642, 861, 862, 990, 996], "hypercub": [226, 515], "hyperlink": 1037, "hyperparamet": [69, 71, 72, 125, 149, 150, 156, 157, 161, 164, 168, 176, 181, 186, 211, 215, 226, 236, 251, 257, 262, 264, 270, 271, 276, 285, 302, 350, 381, 393, 409, 413, 414, 416, 419, 502, 535, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 653, 659, 665, 673, 676, 728, 785, 800, 814, 909, 981, 986, 987, 988, 991, 992, 994, 996, 998, 1006, 1013, 1014, 1028, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "hyperparameter_alpha": 623, "hyperparameter_baseline_similar": 157, "hyperparameter_constant_valu": 613, "hyperparameter_gamma": 620, "hyperparameter_grid": 322, "hyperparameter_length_scal": [615, 619, 622, 623], "hyperparameter_noise_level": 625, "hyperparameter_period": 615, "hyperparameter_sigma_0": 614, "hyperplan": [89, 111, 121, 152, 164, 175, 189, 206, 216, 234, 262, 333, 334, 335, 336, 337, 338, 342, 343, 348, 512, 631, 658, 659, 666, 668, 674, 675, 676, 677, 904, 906, 908, 909, 1006, 1007, 1014], "hyperspher": [375, 1012], "hypothes": 988, "hypothesi": [122, 259, 265, 413, 690, 694, 829, 989], "hypothet": 25, "hyunjin": 1035, "hyvarinen": [421, 533], "h\u00e9lion": 1046, "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 90, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 336, 337, 338, 342, 343, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 361, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 939, 940, 941, 943, 946, 947, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 973, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "i_alpha_optim": 272, "i_ax": 283, "i_dataset": [42, 60, 226], "i_j": 1000, "iain": [146, 376, 988], "iampat": 1043, "ian": [1037, 1039, 1044, 1045, 1047, 1050, 1051], "iasoon": 1049, "ibay": 1035, "ibieta": 1048, "ibm": [10, 17, 329, 352, 374], "ibn": 1035, "ibnukhsein": 1052, "ibraheem": 1044, "ibrahima": 1045, "ibraim": [1040, 1041, 1042], "ib\u00e1\u00f1ez": [1043, 1044, 1047], "ic": [6, 278, 317, 373, 376, 395, 500, 502, 510, 632, 633, 1030, 1047, 1048], "ica": [95, 407, 421, 1008, 1029, 1030], "ica_estim": 93, "icann": 696, "icassp": 992, "icdm": [563, 998], "icdmw": 409, "ice_lines_kw": 632, "icml": [23, 25, 406, 409, 417, 437, 439, 839, 841, 860, 992, 994, 1006, 1011], "icml03": 841, "icml09": [531, 537], "icon": [322, 381], "icyblad": 1042, "id": [4, 17, 215, 296, 359, 373, 374, 379, 387, 411, 413, 417, 423, 494, 495, 496, 916, 918, 936, 1024, 1028, 1043, 1044, 1047], "id3": [1015, 1030], "idea": [3, 51, 78, 79, 115, 146, 154, 167, 198, 218, 253, 288, 338, 355, 365, 366, 379, 384, 385, 411, 412, 413, 414, 415, 416, 418, 607, 608, 988, 989, 992, 995, 998, 1011, 1017, 1028], "ideal": [197, 199, 215, 253, 256, 259, 266, 268, 269, 361, 378, 379, 380, 383, 384, 387, 391, 393, 406, 408, 726, 756, 981, 991, 1006, 1007, 1013, 1016], "idelberg": 1052, "ident": [11, 17, 62, 121, 192, 197, 215, 226, 230, 330, 350, 374, 381, 393, 405, 409, 410, 411, 413, 419, 422, 438, 439, 452, 464, 465, 473, 475, 476, 479, 480, 481, 488, 503, 551, 559, 560, 564, 565, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 679, 680, 699, 704, 705, 736, 785, 795, 802, 805, 815, 816, 819, 820, 846, 847, 853, 861, 862, 868, 869, 881, 893, 912, 913, 985, 986, 989, 992, 995, 996, 1007, 1039, 1043, 1044, 1045, 1049, 1053], "identif": [374, 379, 409, 497, 981, 1020], "identifi": [18, 88, 95, 101, 122, 123, 166, 167, 197, 200, 201, 246, 248, 257, 262, 268, 292, 312, 317, 342, 350, 351, 373, 374, 378, 379, 383, 384, 393, 408, 409, 410, 413, 416, 417, 446, 450, 457, 487, 496, 508, 509, 555, 556, 557, 558, 563, 564, 565, 566, 606, 643, 649, 699, 712, 774, 829, 850, 869, 899, 900, 981, 988, 992, 998, 1005, 1017, 1026, 1042, 1044, 1049, 1050], "idf": [13, 17, 230, 350, 351, 352, 374, 414, 521, 544, 588, 589, 590, 591, 843, 851, 876, 981, 990, 994, 1002, 1028, 1035], "idf_": [417, 590, 591, 1043], "idier": [414, 538, 540, 547], "idiom": 385, "idiosyncrat": 381, "idl": 1046, "ido": [1050, 1051], "idpol": [197, 215], "idx": [9, 17, 43, 53, 102, 111, 115, 118, 125, 131, 158, 168, 170, 181, 189, 196, 197, 206, 219, 253, 356, 410, 413], "idx_a": 268, "idx_b": 268, "idx_r": 196, "idx_sort": 197, "idxmax": 345, "idxmin": 257, "ie": [38, 64, 94, 440, 704, 988, 1002], "ieee": [61, 77, 79, 376, 409, 411, 418, 422, 448, 475, 534, 563, 664, 685, 686, 725, 769, 988, 992, 998], "ieeexplor": 769, "ieic": [538, 540, 547], "iem": 658, "if_binari": [167, 240, 877, 1002, 1046], "if_delegate_has_method": [1048, 1049], "iff": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 875], "iforest": 236, "iforest_kw": 236, "iglesi": 1050, "ignacio": 1038, "ignor": [2, 4, 6, 15, 42, 47, 53, 60, 69, 109, 111, 114, 119, 127, 130, 168, 185, 189, 197, 206, 212, 228, 233, 238, 240, 249, 253, 254, 300, 301, 310, 311, 316, 319, 342, 343, 351, 356, 366, 379, 381, 383, 385, 393, 396, 399, 409, 410, 416, 417, 427, 428, 431, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 460, 461, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 503, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 581, 582, 583, 588, 589, 590, 591, 594, 597, 602, 603, 610, 611, 627, 628, 629, 630, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 707, 713, 714, 726, 729, 730, 738, 755, 756, 763, 769, 774, 778, 783, 784, 787, 788, 797, 798, 799, 801, 802, 803, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 967, 988, 989, 992, 994, 998, 1002, 1007, 1024, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "ignore_attribut": 373, "ignore_error": 52, "ignore_implicit_zero": [881, 893], "ignore_ti": [726, 756], "ignore_warn": [205, 307, 1041], "ignored_new_col": 410, "ignorerevsfil": 379, "igor": [1041, 1042, 1048], "ih": 288, "ii": [9, 94, 168, 204, 254, 376, 417, 582, 583, 589, 638, 666, 667, 867, 876, 988, 1002, 1011, 1052], "iid": 1043, "iii": [1028, 1049, 1052], "iijima": 1044, "iinfo": 1050, "ij": [259, 293, 405, 409, 414, 538, 540, 547, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 988, 989, 992, 994, 997, 1002, 1007], "ijcnn": 992, "ijcv": 992, "ijet": 409, "ik": [988, 992], "ikeda": 1047, "ikko": 1048, "il": [8, 664, 685, 686, 988, 992], "ilambharathi": [1038, 1039], "ili": [1051, 1052], "ilic": 1048, "ilion": 1049, "iliya": 1050, "iljin": [1050, 1051], "ill": [38, 80, 202, 302, 471, 472, 478, 650, 651, 654, 655, 656, 682, 683, 988, 991, 1027, 1045], "illustr": [7, 21, 22, 24, 29, 31, 50, 54, 55, 68, 69, 72, 73, 76, 78, 84, 90, 95, 109, 112, 117, 124, 125, 127, 129, 130, 141, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 162, 164, 166, 168, 169, 173, 186, 193, 194, 197, 199, 201, 205, 207, 208, 210, 211, 214, 215, 218, 219, 221, 223, 226, 228, 229, 231, 232, 233, 235, 243, 247, 253, 259, 266, 271, 272, 273, 284, 292, 297, 308, 310, 314, 315, 317, 328, 338, 339, 343, 345, 346, 347, 351, 352, 358, 361, 365, 376, 379, 384, 387, 392, 408, 412, 414, 416, 417, 515, 610, 611, 613, 614, 615, 619, 622, 623, 853, 981, 988, 992, 995, 998, 1004, 1005, 1006, 1007, 1014, 1017, 1019], "iloc": [2, 125, 130, 167, 168, 215, 259, 286], "ilya": 1042, "im": [93, 103, 270, 287], "im_": 697, "im_kw": [697, 1049], "imacul": 1041, "imag": [1, 4, 12, 14, 18, 19, 30, 34, 37, 38, 39, 40, 42, 44, 46, 49, 52, 56, 60, 65, 66, 68, 87, 92, 93, 98, 102, 104, 117, 144, 146, 153, 164, 188, 219, 228, 231, 235, 257, 292, 301, 302, 316, 325, 326, 350, 351, 371, 372, 374, 376, 379, 384, 387, 393, 396, 401, 408, 409, 414, 441, 445, 452, 462, 493, 494, 495, 496, 502, 503, 506, 507, 534, 535, 537, 541, 607, 608, 691, 697, 738, 830, 874, 988, 992, 993, 995, 997, 1004, 1008, 1012, 1014, 1017, 1019, 1024, 1025, 1027, 1028, 1030, 1035, 1038, 1043, 1044, 1048, 1050, 1051], "image_arrai": 46, "image_array_sampl": 46, "image_height": [583, 584, 587], "image_index": [325, 326], "image_nam": 506, "image_patch": 587, "image_reconstruct": 587, "image_s": 587, "image_shap": [93, 235], "image_width": [583, 584, 587], "imagebox": 219, "imageio": 373, "imagenet": [861, 862], "images_approx": 1027, "images_restor": 49, "imagin": [94, 149, 233, 342, 413, 414, 417, 988], "imamura": 1049, "imbal": [252, 262, 273, 413, 707, 729, 730, 738, 783, 784, 787, 788, 992], "imbalanc": [197, 253, 262, 266, 268, 273, 351, 391, 406, 413, 703, 708, 787, 801, 805, 841, 992, 994, 1000, 1012], "imbert": [1042, 1044, 1047, 1049, 1052], "img": [3, 48, 64, 506, 586], "img_height": 583, "img_shap": 117, "img_to_graph": [44, 64, 417, 1038, 1048], "img_width": 583, "imit": 350, "immanuel": [0, 1035, 1036, 1040], "immedi": [53, 379, 391, 800, 814, 825, 826, 1043], "immens": 1017, "immensu": 1043, "immers": [690, 694], "immobil": 2, "immut": 402, "imp": 982, "imp_mean": [627, 630], "imp_reshap": 117, "impact": [10, 11, 23, 34, 35, 40, 41, 57, 61, 62, 66, 73, 109, 142, 164, 166, 167, 168, 177, 199, 201, 215, 236, 252, 253, 278, 286, 310, 320, 345, 351, 361, 365, 366, 372, 391, 394, 406, 409, 414, 447, 449, 536, 540, 547, 590, 666, 667, 668, 672, 674, 676, 677, 678, 692, 794, 800, 803, 804, 814, 827, 844, 845, 846, 881, 893, 904, 905, 927, 941, 963, 966, 981, 991, 999, 1007, 1014, 1042, 1045, 1048], "imped": 387, "imperfect": [728, 785, 992, 1037], "imperfectli": [703, 734, 992], "implant": 19, "implement": [4, 5, 11, 12, 15, 44, 54, 79, 93, 115, 125, 162, 170, 173, 181, 182, 186, 211, 215, 218, 226, 232, 233, 253, 257, 259, 268, 278, 281, 283, 285, 288, 308, 315, 316, 317, 318, 319, 321, 350, 352, 365, 366, 367, 373, 374, 376, 377, 379, 380, 381, 384, 385, 387, 388, 393, 396, 399, 404, 405, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 437, 442, 443, 444, 446, 447, 448, 449, 450, 475, 493, 496, 508, 532, 533, 534, 535, 536, 538, 541, 542, 543, 553, 554, 555, 557, 558, 561, 562, 563, 567, 572, 582, 588, 589, 591, 593, 597, 601, 610, 611, 632, 633, 640, 641, 645, 646, 653, 657, 658, 659, 663, 664, 668, 671, 672, 674, 675, 676, 677, 678, 684, 685, 686, 687, 688, 691, 692, 695, 707, 711, 720, 735, 738, 742, 778, 782, 788, 789, 797, 799, 800, 803, 804, 806, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 849, 852, 854, 855, 860, 861, 862, 864, 886, 894, 895, 901, 904, 905, 906, 907, 908, 909, 910, 940, 941, 949, 952, 957, 960, 961, 963, 981, 982, 984, 986, 988, 989, 990, 991, 993, 994, 996, 997, 998, 1002, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1019, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "impli": [2, 149, 167, 350, 351, 352, 414, 416, 419, 474, 573, 582, 610, 611, 622, 735, 928, 988, 989, 1028, 1046], "implic": [361, 379], "implicit": [197, 393, 416, 417, 572, 682, 683, 986, 991, 1012, 1044], "implicitli": [352, 388, 416, 597, 632, 633, 883, 982, 984, 999, 1002, 1007], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 399, 402, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 953, 954, 955, 956, 957, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1013, 1014, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "importance_gett": [418, 593, 594, 597, 1047], "importances_mean": [116, 123, 169, 170, 315, 634, 1000], "importances_std": [116, 634, 1000], "important_word": 17, "importantli": [2, 12, 94, 168, 173, 305, 409, 1053], "importerror": [9, 51, 96, 283, 296, 387], "importlib": 1048, "impos": [37, 55, 127, 191, 201, 311, 391, 409, 414, 416, 417, 527, 657, 988], "imposs": [122, 352, 1013], "impract": 909, "impress": 1017, "improp": [393, 1042], "improv": [0, 2, 22, 23, 31, 76, 77, 80, 98, 103, 109, 110, 115, 118, 120, 121, 122, 124, 125, 130, 142, 162, 167, 173, 183, 197, 205, 215, 253, 260, 262, 278, 283, 286, 302, 310, 321, 341, 342, 351, 361, 366, 377, 382, 384, 385, 387, 388, 391, 393, 394, 402, 407, 414, 416, 418, 449, 450, 531, 532, 534, 537, 538, 539, 541, 542, 543, 546, 554, 557, 558, 559, 560, 561, 562, 564, 565, 610, 611, 643, 652, 664, 666, 667, 668, 672, 673, 674, 675, 676, 678, 685, 687, 692, 729, 730, 784, 787, 788, 853, 861, 862, 878, 880, 892, 912, 913, 915, 941, 986, 988, 989, 992, 995, 996, 1006, 1007, 1008, 1011, 1012, 1013, 1017, 1026, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "improvis": [9, 296], "impur": [123, 170, 359, 395, 416, 418, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 916, 918, 1008, 1030, 1040, 1041, 1042, 1043], "imput": [69, 125, 130, 163, 169, 228, 238, 240, 316, 319, 368, 371, 383, 392, 393, 399, 410, 416, 490, 501, 565, 580, 639, 645, 672, 826, 847, 865, 923, 925, 1012, 1013, 1014, 1030, 1037, 1038], "imputation_const": 238, "imputation_mean": 238, "imputation_ord": [627, 1045], "imputation_sequence_": 627, "impute_estim": 161, "impute_scor": 162, "imran": [1037, 1038, 1039], "imread": 30, "imshow": [3, 4, 12, 30, 38, 44, 45, 46, 48, 49, 51, 52, 56, 80, 87, 93, 96, 103, 151, 152, 153, 157, 170, 188, 213, 219, 235, 270, 287, 302, 325, 326, 338, 346, 373, 632, 697, 1024, 1025, 1049], "in1d": 1042, "in_bodi": 6, "in_titl": 6, "in_top": 6, "in_topic_d": 6, "inaccess": 53, "inact": [352, 373, 379], "inadvert": [166, 393], "inadvis": 402, "inappropri": [374, 413, 419, 709, 821], "inbuilt": 413, "inc": [0, 68, 258, 982, 1004, 1017], "incap": 53, "incentiv": 383, "incept": 1013, "includ": [2, 30, 32, 53, 78, 115, 119, 120, 121, 166, 167, 169, 181, 197, 201, 215, 233, 260, 278, 283, 300, 305, 318, 319, 321, 338, 343, 350, 352, 361, 365, 366, 373, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 393, 394, 396, 402, 405, 407, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 444, 446, 450, 456, 466, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 496, 500, 501, 502, 504, 505, 510, 534, 541, 557, 564, 574, 632, 638, 646, 647, 652, 660, 661, 662, 665, 681, 688, 689, 697, 713, 729, 730, 735, 737, 738, 771, 783, 784, 787, 795, 800, 802, 803, 804, 813, 814, 817, 820, 827, 830, 852, 854, 855, 856, 877, 878, 879, 883, 901, 904, 905, 912, 914, 916, 918, 924, 925, 928, 930, 933, 949, 981, 988, 991, 992, 993, 995, 996, 1002, 1006, 1007, 1008, 1012, 1013, 1016, 1017, 1026, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "include_bia": [2, 176, 274, 879, 883, 1049], "include_boundari": [928, 1049], "include_self": [37, 42, 65, 695, 857, 858, 1039], "include_valu": 697, "inclus": [379, 381, 387, 450, 456, 754, 786, 992, 993, 1035, 1049], "incom": [305, 374, 440], "incoming_count": 15, "incompat": [199, 383, 496, 982, 1043, 1044], "incomplet": [379, 396, 404, 409, 705, 795, 982, 989, 1028, 1039, 1041], "inconsist": [393, 402, 417, 508, 509, 576, 906, 909, 928, 998, 1007, 1030, 1035, 1040, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "inconsistentversionwarn": [402, 1051], "incorpor": [321, 379, 410, 416, 991, 1012, 1017], "incorrect": [109, 166, 266, 328, 361, 379, 409, 607, 608, 632, 633, 734, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "incorrectli": [178, 416, 417, 553, 559, 561, 734, 740, 992, 1036, 1041, 1043, 1044, 1046, 1051], "incr_mean_variance_axi": [1041, 1047], "increas": [2, 5, 13, 24, 35, 41, 53, 55, 56, 59, 73, 96, 109, 110, 112, 115, 118, 120, 125, 127, 142, 146, 149, 153, 154, 155, 158, 167, 168, 173, 177, 179, 188, 197, 198, 199, 201, 215, 223, 230, 244, 245, 253, 259, 260, 261, 266, 272, 273, 299, 306, 307, 310, 317, 326, 338, 345, 351, 352, 355, 365, 366, 367, 378, 387, 388, 393, 406, 409, 411, 414, 416, 417, 420, 440, 444, 446, 452, 463, 471, 472, 478, 532, 536, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 627, 635, 636, 637, 645, 650, 651, 654, 655, 656, 658, 659, 666, 667, 668, 676, 677, 678, 682, 683, 685, 686, 692, 706, 707, 712, 778, 782, 789, 803, 804, 833, 852, 854, 855, 856, 859, 861, 862, 878, 904, 912, 913, 914, 915, 941, 981, 983, 987, 988, 989, 991, 992, 995, 1002, 1006, 1007, 1008, 1017, 1035, 1037, 1040, 1044, 1046, 1047, 1050], "increasing_": 635, "increasing_bool": 636, "increment": [70, 72, 92, 98, 99, 100, 101, 104, 164, 262, 383, 385, 442, 447, 463, 504, 533, 534, 535, 536, 539, 541, 544, 602, 646, 658, 666, 806, 828, 836, 837, 839, 840, 841, 842, 843, 873, 874, 884, 904, 905, 967, 988, 994, 1014, 1038, 1039], "incrementalpca": [97, 367, 414, 533, 535, 539, 541, 544, 1039, 1042, 1043, 1045, 1046, 1049], "incur": [24, 619, 904, 1007, 1043], "ind": [12, 40, 121, 132, 351, 844, 845], "inde": [3, 5, 23, 25, 32, 37, 38, 51, 53, 56, 80, 84, 98, 109, 112, 145, 146, 149, 167, 169, 176, 181, 185, 186, 197, 199, 261, 262, 266, 268, 278, 283, 305, 310, 345, 351, 361, 365, 378, 384, 392, 393, 394, 409, 411, 416, 567, 568, 988, 1002, 1006, 1049], "indecisiveus": [1046, 1047], "indefinit": 383, "indent": [381, 958], "independ": [11, 23, 25, 35, 44, 94, 95, 97, 114, 118, 156, 168, 235, 236, 259, 262, 264, 268, 281, 305, 312, 315, 351, 361, 365, 366, 375, 381, 383, 392, 393, 396, 405, 406, 407, 409, 410, 411, 412, 413, 417, 421, 449, 464, 488, 503, 515, 516, 517, 518, 520, 532, 533, 535, 537, 539, 540, 546, 547, 551, 552, 604, 607, 608, 625, 640, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 704, 705, 717, 736, 737, 755, 757, 795, 802, 829, 833, 835, 837, 838, 876, 880, 881, 882, 884, 888, 889, 890, 891, 893, 894, 895, 898, 906, 907, 908, 909, 910, 935, 981, 984, 986, 988, 989, 992, 993, 994, 997, 999, 1002, 1007, 1008, 1029, 1030, 1035, 1036, 1041, 1043, 1045, 1050], "inder128": 1045, "inderjeet": 1046, "inderjit": [405, 453], "indeterminaci": 544, "index": [10, 13, 15, 35, 36, 37, 38, 39, 47, 48, 56, 69, 70, 109, 114, 116, 125, 143, 146, 161, 166, 167, 168, 169, 170, 197, 201, 215, 237, 240, 244, 245, 249, 254, 257, 258, 259, 260, 262, 270, 271, 273, 283, 305, 310, 311, 312, 319, 325, 326, 351, 352, 374, 376, 377, 379, 381, 383, 388, 391, 393, 405, 410, 413, 414, 416, 417, 424, 443, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 464, 467, 503, 509, 557, 558, 559, 560, 564, 565, 566, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 617, 632, 633, 640, 697, 704, 705, 712, 716, 718, 731, 738, 757, 779, 780, 786, 788, 794, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 830, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 877, 912, 913, 914, 915, 945, 963, 966, 971, 972, 992, 994, 995, 996, 1006, 1008, 1012, 1026, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "index_alpha_path_a": 185, "index_alpha_path_b": 185, "index_map": 15, "indexerror": [1043, 1044], "indexhash": 640, "indexhash_": 640, "indian": 374, "indic": [10, 17, 18, 23, 24, 46, 57, 58, 64, 73, 84, 88, 93, 109, 114, 120, 154, 157, 162, 166, 168, 194, 220, 230, 233, 252, 253, 261, 262, 265, 266, 283, 296, 325, 326, 329, 350, 351, 352, 359, 366, 374, 379, 380, 381, 383, 387, 388, 391, 393, 404, 405, 406, 409, 411, 413, 414, 416, 417, 420, 424, 437, 440, 444, 450, 451, 452, 453, 455, 456, 457, 460, 464, 467, 472, 487, 508, 509, 511, 512, 513, 523, 532, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 581, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 620, 627, 628, 629, 630, 632, 633, 639, 646, 647, 650, 651, 652, 653, 654, 655, 661, 663, 665, 673, 675, 682, 683, 690, 692, 694, 696, 703, 707, 712, 713, 718, 719, 720, 722, 725, 728, 729, 730, 731, 734, 738, 739, 740, 741, 754, 771, 778, 779, 780, 781, 783, 784, 785, 787, 788, 792, 793, 794, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 837, 838, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 868, 871, 875, 877, 885, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 924, 925, 930, 945, 955, 956, 967, 968, 969, 970, 971, 972, 973, 982, 987, 988, 989, 992, 993, 994, 995, 996, 999, 1002, 1003, 1006, 1007, 1013, 1019, 1023, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "indicator_": [627, 628, 630], "indicator_matrix_": 1040, "indigo": 214, "indirect": [262, 380, 393], "indirectli": [215, 342], "indispens": 1017, "indistinguish": 305, "individu": [2, 44, 58, 78, 108, 110, 112, 127, 129, 130, 134, 141, 144, 158, 164, 165, 167, 170, 171, 193, 197, 215, 227, 236, 237, 253, 262, 264, 281, 315, 322, 342, 345, 366, 380, 383, 386, 388, 393, 395, 399, 405, 410, 413, 416, 417, 437, 452, 462, 464, 496, 501, 503, 509, 555, 556, 559, 560, 562, 563, 565, 567, 568, 569, 570, 603, 609, 610, 632, 633, 643, 645, 657, 658, 659, 668, 671, 672, 673, 674, 675, 676, 677, 678, 687, 712, 719, 728, 734, 750, 751, 785, 790, 791, 800, 814, 832, 836, 837, 839, 840, 841, 842, 843, 862, 865, 873, 874, 876, 877, 878, 881, 883, 884, 889, 890, 891, 904, 905, 992, 993, 1002, 1007, 1014, 1023, 1028, 1030, 1036, 1039, 1041, 1047, 1049, 1051], "indptr": [15, 283, 359, 967, 968, 969, 970, 971, 972, 973, 1043, 1051], "induc": [24, 54, 167, 181, 188, 190, 195, 198, 212, 232, 236, 345, 352, 405, 407, 414, 416, 446, 449, 539, 543, 553, 557, 558, 559, 560, 564, 565, 566, 643, 726, 756, 877, 912, 913, 914, 915, 985, 992, 1006, 1026], "induct": [2, 6, 25, 34, 66, 107, 122, 157, 164, 233, 283, 393, 409, 416, 423, 441, 512, 564, 627, 631, 899, 900, 953, 976, 988, 1005, 1014, 1037], "inductive_learn": 54, "inductivecluster": 54, "industri": [409, 1012], "ineffect": [309, 1002, 1043, 1044], "ineffici": [416, 443, 574, 832, 833, 995, 997], "inequ": [359, 393, 409, 443, 447, 459, 699, 989, 990, 995], "inertia": [55, 56, 59, 351, 409, 443, 447, 449, 452, 459, 460, 462, 463, 1046], "inertia_": [56, 59, 62, 443, 447, 449, 1046], "inf": [73, 152, 293, 388, 409, 419, 446, 450, 455, 456, 457, 461, 471, 472, 478, 553, 554, 559, 560, 593, 594, 597, 606, 607, 608, 619, 627, 635, 637, 648, 649, 650, 652, 669, 671, 672, 676, 677, 678, 680, 687, 728, 730, 746, 778, 785, 789, 860, 869, 876, 922, 923, 924, 925, 939, 992, 1002, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "infant": 1002, "infeas": [988, 995, 997], "infer": [164, 165, 167, 171, 192, 244, 248, 249, 259, 356, 373, 381, 391, 402, 407, 413, 414, 496, 508, 509, 515, 534, 536, 538, 540, 547, 549, 550, 553, 559, 560, 632, 635, 657, 709, 722, 723, 741, 785, 797, 798, 806, 823, 830, 840, 878, 885, 899, 900, 912, 913, 914, 915, 955, 982, 988, 991, 992, 997, 1002, 1005, 1008, 1012, 1013, 1014, 1022, 1036, 1040, 1041, 1046, 1049, 1052], "inferencesess": 402, "inferenti": 54, "inferior": [441, 445, 1046], "infin": [259, 345, 541, 682, 683, 712, 825, 911, 923, 995], "infinit": [25, 198, 243, 262, 342, 365, 419, 446, 622, 623, 778, 797, 922, 924, 925, 984, 991, 1002, 1007, 1043, 1045, 1048, 1049, 1050, 1052, 1053], "inflammatori": 374, "inflat": [55, 166, 167, 169, 409, 413, 992, 1002], "inflect": 261, "influenc": [1, 7, 11, 14, 78, 79, 109, 164, 167, 179, 232, 243, 267, 305, 312, 338, 342, 345, 361, 367, 411, 414, 416, 432, 440, 454, 465, 482, 483, 484, 489, 501, 554, 556, 558, 560, 562, 565, 568, 570, 611, 628, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 734, 750, 830, 837, 838, 846, 847, 854, 855, 862, 881, 882, 893, 905, 907, 910, 913, 915, 924, 981, 986, 987, 988, 995, 998, 1002, 1006, 1007, 1014, 1017, 1038, 1043, 1044], "influenti": [201, 351, 1017], "info": [4, 40, 69, 93, 167, 168, 233, 253, 257, 376, 378, 383, 393, 417, 496, 948, 958, 1024], "infonea": 1010, "inform": [2, 3, 6, 9, 10, 11, 12, 23, 25, 31, 32, 35, 36, 47, 51, 56, 64, 65, 68, 69, 84, 87, 88, 89, 99, 115, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 167, 168, 170, 173, 175, 176, 177, 181, 198, 201, 205, 212, 214, 215, 216, 233, 237, 245, 246, 248, 253, 254, 256, 259, 260, 261, 264, 266, 268, 286, 289, 290, 293, 312, 318, 322, 341, 345, 350, 351, 352, 356, 359, 361, 365, 368, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 387, 391, 392, 393, 394, 399, 402, 405, 408, 413, 414, 416, 417, 418, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 492, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 510, 515, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 695, 697, 701, 704, 705, 715, 726, 730, 743, 755, 756, 757, 786, 788, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 949, 982, 984, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1006, 1008, 1013, 1014, 1016, 1017, 1025, 1026, 1027, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "informatik": [22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232, 992], "informed": 992, "infrastructur": [301, 321, 1010, 1012, 1013], "infrequ": [877, 878, 885, 992, 1035, 1049, 1050, 1051], "infrequent_categories_": [319, 321, 877, 878, 885, 1002], "infrequent_if_exist": [877, 1002], "infrequent_sklearn": [877, 1002], "infti": [215, 419, 619, 988, 1002, 1042], "ing": 417, "ingela": 1049, "ingest": 417, "ingredi": 419, "ingrid": 1045, "inher": [103, 192, 361, 409, 414, 982, 984, 986, 987, 989, 993], "inherit": [233, 379, 381, 392, 393, 423, 577, 676, 933, 935, 988, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052], "inhibit": [420, 444], "inhomogen": [419, 614], "ini": 246, "init": [13, 40, 43, 56, 57, 59, 62, 168, 177, 218, 219, 221, 222, 223, 244, 246, 283, 351, 382, 387, 409, 414, 416, 443, 447, 449, 451, 453, 459, 460, 538, 540, 547, 548, 559, 560, 632, 633, 690, 692, 694, 853, 989, 1035, 1044, 1047, 1049, 1050, 1051], "init_": [559, 560], "init_param": [243, 246, 249, 797, 798], "init_s": [59, 351, 449], "init_size_": 1047, "init_tim": 246, "initi": [0, 5, 10, 15, 34, 40, 41, 43, 55, 56, 58, 61, 62, 66, 79, 123, 131, 132, 133, 150, 155, 164, 167, 177, 190, 212, 218, 219, 223, 242, 244, 245, 250, 259, 283, 317, 327, 338, 351, 361, 366, 374, 379, 381, 387, 388, 391, 393, 409, 414, 416, 418, 419, 421, 442, 443, 447, 448, 449, 450, 451, 452, 453, 459, 460, 461, 462, 512, 515, 531, 532, 533, 537, 538, 540, 543, 545, 546, 547, 548, 553, 554, 559, 560, 593, 607, 608, 610, 611, 619, 620, 627, 640, 645, 646, 647, 648, 652, 653, 658, 660, 661, 662, 663, 666, 667, 668, 669, 671, 676, 677, 678, 680, 681, 684, 690, 691, 692, 694, 695, 797, 798, 834, 853, 860, 861, 862, 900, 927, 940, 941, 961, 966, 967, 984, 988, 989, 991, 996, 997, 998, 1006, 1008, 1012, 1014, 1025, 1027, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "initial_imputer_": 627, "initial_strategi": 627, "initial_theta": [610, 611], "initialis": [93, 538, 540, 547, 1035, 1043, 1044], "initializedcheck": 380, "inject": [236, 374, 416], "inki": 1041, "inli": [226, 988, 998], "inlier": [78, 126, 200, 226, 236, 305, 393, 411, 431, 469, 563, 671, 677, 850, 881, 893, 907, 908, 910, 988, 998, 1042, 1043, 1048], "inlier_mask": 200, "inlier_mask_": [200, 671], "inlier_plot": 78, "inliers_mask": 79, "inlin": [208, 379, 380, 1008], "inner": [25, 98, 122, 125, 260, 264, 281, 327, 365, 417, 443, 514, 582, 589, 618, 648, 669, 680, 775, 777, 984, 992, 1002, 1007, 1036, 1039, 1049, 1052], "inner_clf": 992, "inner_cv": [264, 322], "inner_it": 385, "inner_max_num_thread": 960, "inner_numb": 327, "inner_stat": 1049, "inner_stats_": 1049, "inpaint": 414, "inplac": [215, 236, 271, 454, 482, 483, 484, 485, 859, 867, 870, 873, 874, 876, 880, 881, 882, 884, 965, 968, 969, 970, 974, 975, 1044], "inplace_csr_column_scal": 388, "inplace_csr_row_normalize_l1": 388, "inplace_csr_row_normalize_l2": 388, "inproceed": 0, "input": [2, 4, 8, 25, 29, 31, 71, 93, 97, 118, 122, 123, 155, 156, 157, 167, 173, 176, 197, 200, 201, 205, 212, 215, 229, 230, 232, 233, 240, 254, 278, 287, 288, 301, 306, 307, 308, 309, 315, 318, 320, 338, 342, 346, 352, 373, 376, 379, 382, 384, 388, 389, 391, 392, 393, 402, 405, 406, 410, 413, 414, 415, 416, 417, 418, 419, 421, 427, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 445, 448, 449, 450, 454, 457, 458, 461, 464, 465, 467, 468, 469, 471, 472, 482, 483, 484, 489, 503, 509, 516, 517, 518, 520, 524, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 620, 622, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 696, 697, 698, 699, 700, 701, 702, 721, 722, 723, 724, 728, 745, 746, 748, 750, 751, 753, 754, 761, 767, 771, 772, 774, 778, 779, 780, 781, 785, 790, 791, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 892, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 930, 935, 938, 940, 949, 951, 952, 956, 965, 967, 973, 974, 975, 978, 979, 982, 984, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1019, 1023, 1024, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "input_featur": [176, 381, 393, 425, 430, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1051], "input_nam": [923, 925, 955, 1049], "input_typ": [352, 417, 582], "inria": [0, 3, 7, 28, 35, 50, 52, 55, 73, 80, 115, 125, 155, 176, 181, 182, 184, 188, 190, 191, 202, 219, 220, 226, 229, 236, 260, 262, 265, 272, 295, 310, 345, 350, 351, 352, 658, 1010, 1035], "insensit": [232, 643, 676, 678, 788, 905, 985, 1006, 1007, 1035], "insepar": [146, 376], "insert": [58, 167, 197, 391, 409, 487, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 919], "insid": [15, 17, 24, 168, 199, 233, 259, 327, 338, 367, 373, 374, 381, 385, 399, 409, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 949, 952, 960, 999, 1017, 1052], "insight": [2, 5, 167, 168, 198, 199, 215, 253, 301, 305, 350, 359, 406, 408, 800, 803, 804, 814, 827, 999, 1008, 1017], "insist": 68, "inspect": [2, 7, 28, 29, 32, 54, 59, 111, 116, 123, 125, 126, 127, 131, 143, 149, 154, 155, 167, 168, 169, 170, 171, 180, 189, 206, 211, 237, 253, 259, 262, 271, 286, 291, 294, 310, 315, 316, 317, 318, 320, 322, 334, 335, 336, 337, 339, 340, 342, 350, 356, 366, 368, 381, 393, 409, 410, 416, 417, 464, 553, 554, 557, 558, 559, 560, 564, 565, 566, 833, 864, 865, 912, 913, 914, 915, 980, 992, 993, 996, 999, 1000, 1007, 1012, 1014, 1028, 1030, 1038], "inspir": [77, 127, 168, 215, 379, 391, 416, 561, 562, 929, 982, 1012, 1044], "instabl": [37, 167, 293, 419, 452, 535, 539, 543, 695, 1042, 1045, 1048], "instal": [51, 240, 283, 315, 316, 317, 318, 319, 320, 321, 322, 365, 366, 368, 379, 380, 382, 383, 385, 387, 391, 392, 401, 402, 404, 409, 417, 452, 462, 496, 691, 695, 1008, 1010, 1028, 1042, 1043, 1044, 1048, 1049], "installment_commit": 253, "instanc": [2, 6, 8, 11, 22, 24, 25, 51, 54, 56, 112, 125, 143, 146, 162, 168, 169, 180, 181, 228, 233, 236, 253, 255, 257, 268, 270, 271, 294, 315, 322, 330, 334, 335, 341, 342, 350, 351, 352, 364, 365, 366, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 396, 399, 402, 404, 405, 406, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 423, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 491, 492, 495, 496, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 620, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 707, 720, 729, 730, 738, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 789, 792, 793, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 924, 925, 927, 935, 936, 940, 941, 948, 949, 950, 951, 960, 961, 962, 963, 966, 976, 977, 981, 982, 988, 989, 992, 994, 995, 998, 1000, 1002, 1006, 1007, 1008, 1013, 1019, 1026, 1027, 1028, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instanci": 1044, "instant": 191, "instantan": 508, "instanti": [70, 152, 318, 382, 399, 416, 450, 567, 568, 602, 630, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 931, 998, 1025, 1035, 1043, 1047, 1051], "instead": [0, 2, 3, 4, 11, 18, 46, 51, 53, 54, 55, 69, 98, 112, 117, 127, 143, 146, 149, 197, 199, 212, 215, 222, 236, 249, 255, 256, 260, 261, 281, 288, 305, 315, 316, 317, 318, 319, 338, 340, 342, 350, 352, 359, 361, 365, 366, 373, 374, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 399, 402, 404, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 456, 459, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 509, 510, 533, 534, 535, 537, 538, 539, 540, 541, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 594, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 630, 632, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 694, 707, 709, 742, 746, 750, 751, 774, 778, 779, 780, 782, 783, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 812, 814, 818, 819, 820, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 865, 866, 867, 869, 870, 871, 876, 877, 882, 883, 884, 894, 895, 898, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 918, 930, 936, 941, 949, 960, 967, 981, 982, 984, 988, 989, 991, 992, 993, 996, 997, 1002, 1006, 1007, 1008, 1012, 1024, 1026, 1028, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instinct": 350, "institut": [0, 253, 376, 995], "instruct": [365, 379, 380, 381, 382, 383, 384, 387, 391, 392, 393, 503, 588, 589, 591, 1016, 1019, 1028, 1035], "instrument": [10, 68, 94, 166], "insuffici": [395, 991, 1027], "insur": [164, 175, 197, 216, 408, 464, 496, 552, 648, 669, 680, 706, 745, 750, 752, 830, 865, 868, 869, 877, 884, 988, 1014], "int": [6, 8, 11, 12, 15, 17, 35, 42, 60, 79, 112, 121, 125, 126, 137, 138, 150, 151, 152, 158, 162, 166, 178, 188, 190, 197, 215, 223, 226, 232, 236, 243, 253, 254, 257, 258, 259, 283, 288, 290, 296, 312, 326, 352, 374, 379, 381, 391, 393, 406, 410, 413, 417, 420, 421, 424, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 707, 709, 713, 726, 727, 729, 730, 731, 734, 738, 756, 757, 769, 774, 778, 779, 780, 781, 782, 783, 784, 787, 789, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 924, 925, 927, 928, 940, 941, 943, 944, 945, 946, 957, 961, 963, 966, 971, 972, 988, 999, 1035, 1041, 1045, 1046], "int32": [236, 283, 312, 379, 393, 443, 447, 449, 451, 453, 459, 906, 907, 908, 909, 910, 957, 1007, 1044, 1050, 1051, 1052], "int64": [2, 12, 52, 69, 167, 168, 253, 273, 278, 311, 322, 359, 393, 417, 427, 442, 448, 450, 496, 588, 640, 646, 647, 652, 653, 714, 715, 840, 869, 922, 978, 1043, 1046, 1048, 1050, 1051, 1052], "int64dtyp": 1052, "intact": [877, 1028], "integ": [2, 15, 46, 51, 69, 167, 197, 215, 316, 317, 361, 365, 373, 374, 376, 381, 384, 388, 392, 393, 409, 410, 413, 414, 416, 417, 434, 437, 462, 464, 467, 472, 487, 496, 498, 501, 502, 503, 505, 508, 509, 512, 514, 515, 519, 522, 550, 559, 560, 561, 562, 563, 567, 568, 572, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 644, 651, 655, 659, 665, 673, 675, 676, 678, 699, 714, 735, 800, 802, 803, 804, 805, 807, 809, 814, 815, 816, 819, 820, 822, 824, 827, 835, 838, 840, 843, 844, 845, 869, 877, 878, 883, 884, 885, 888, 898, 900, 912, 913, 914, 915, 920, 955, 956, 957, 961, 982, 988, 993, 995, 1002, 1005, 1007, 1008, 1019, 1026, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "integr": [0, 40, 69, 143, 157, 186, 301, 317, 366, 377, 381, 382, 383, 385, 387, 393, 396, 414, 419, 446, 715, 755, 786, 967, 991, 999, 1017, 1022, 1036, 1038, 1039, 1047, 1048, 1052], "intel": [992, 1012], "intelex": [396, 1012], "intellectu": 166, "intellig": [61, 146, 253, 350, 376, 409, 416, 448, 555, 556, 638, 696, 725, 834, 861, 862, 993, 1004, 1013, 1017], "intend": [55, 56, 97, 198, 342, 350, 379, 380, 381, 386, 391, 393, 413, 468, 582, 673, 699, 873, 874, 884, 902, 987, 988, 992, 996, 1003], "intens": [64, 96, 283, 376, 380, 391, 393, 414, 443, 447, 459, 607, 608, 632, 633, 802, 981, 999, 1017, 1043], "intention": 25, "inter": [38, 116, 361, 416, 716], "interact": [1, 123, 125, 164, 197, 223, 228, 260, 316, 378, 380, 381, 383, 385, 391, 393, 394, 402, 410, 559, 560, 561, 562, 632, 633, 879, 883, 981, 984, 988, 989, 990, 997, 999, 1002, 1011, 1013, 1037, 1042, 1049, 1050], "interaction_cst": [168, 320, 416, 561, 562, 1050], "interaction_onli": [2, 879, 988, 1002], "interactiveshellapp": 385, "intercept": [96, 189, 206, 214, 346, 393, 482, 483, 484, 549, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 879, 883, 886, 904, 905, 911, 988, 990, 992, 997, 1006, 1007, 1038, 1040, 1044, 1045], "intercept_": [179, 187, 189, 206, 234, 336, 343, 346, 381, 393, 482, 483, 484, 549, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 904, 905, 906, 907, 908, 909, 910, 986, 988, 1006, 1007, 1035, 1042, 1047, 1049, 1052], "intercept_hidden_": 860, "intercept_init": [666, 667, 668, 676, 678], "intercept_sc": [190, 658, 659, 904, 905, 911, 988, 1007], "intercept_visible_": 860, "intercepts_": [861, 862, 996], "interchang": [1012, 1052], "interclass": 38, "interdepend": 515, "interest": [0, 2, 4, 11, 40, 42, 48, 53, 60, 64, 70, 109, 117, 122, 130, 143, 146, 154, 161, 167, 168, 169, 186, 197, 198, 199, 215, 219, 231, 252, 253, 256, 259, 260, 262, 268, 273, 278, 338, 345, 351, 359, 365, 374, 376, 379, 384, 385, 387, 391, 394, 408, 409, 411, 414, 417, 419, 493, 494, 500, 504, 510, 646, 647, 904, 982, 988, 989, 992, 997, 998, 999, 1013, 1017, 1024, 1026, 1027, 1035, 1052], "interestingli": [76, 146, 1002], "interfac": [1, 109, 164, 372, 373, 380, 381, 388, 391, 393, 413, 419, 420, 441, 445, 450, 496, 553, 699, 800, 803, 804, 814, 864, 865, 890, 977, 981, 995, 1007, 1012, 1013, 1017, 1035, 1037, 1040, 1041, 1043, 1044, 1049, 1051], "interfer": [322, 1045], "interim": 1042, "interior": [199, 670, 988, 1050], "interleav": [375, 391, 522], "intermedi": [2, 5, 50, 53, 114, 122, 236, 338, 391, 417, 559, 560, 619, 864, 992, 1047, 1053], "intern": [0, 2, 24, 69, 80, 98, 115, 120, 123, 125, 136, 146, 150, 161, 164, 179, 197, 233, 253, 273, 283, 285, 304, 311, 313, 327, 352, 361, 366, 374, 376, 381, 385, 388, 391, 393, 399, 404, 405, 409, 413, 414, 416, 417, 418, 419, 420, 437, 439, 444, 465, 468, 511, 534, 535, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 593, 594, 610, 611, 640, 643, 646, 652, 668, 672, 676, 678, 696, 708, 731, 734, 758, 759, 783, 830, 844, 845, 860, 861, 862, 864, 865, 869, 883, 885, 899, 900, 902, 904, 905, 906, 909, 912, 913, 914, 915, 960, 988, 989, 990, 992, 995, 998, 1002, 1004, 1007, 1008, 1014, 1017, 1035, 1038, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "internet": [374, 384, 1002, 1026], "interoper": [402, 419, 1010, 1013], "interp": [268, 269, 338], "interp1d": [653, 663, 684], "interp_tpr": 269, "interpol": [2, 12, 30, 38, 48, 49, 52, 56, 80, 87, 93, 96, 153, 156, 164, 175, 176, 188, 213, 216, 229, 235, 268, 274, 287, 288, 295, 302, 326, 338, 419, 635, 645, 653, 663, 672, 684, 700, 707, 847, 855, 865, 879, 883, 983, 988, 992, 1002, 1014, 1042, 1047], "interpret": [2, 25, 125, 146, 156, 164, 165, 166, 168, 171, 193, 197, 198, 202, 213, 215, 252, 259, 261, 262, 273, 302, 306, 309, 317, 350, 352, 365, 377, 379, 380, 385, 387, 388, 393, 395, 406, 409, 410, 415, 417, 452, 464, 465, 467, 496, 541, 572, 611, 639, 643, 653, 672, 673, 691, 692, 695, 701, 729, 753, 758, 759, 783, 792, 793, 806, 815, 827, 828, 830, 833, 865, 877, 884, 960, 986, 988, 992, 993, 999, 1000, 1002, 1008, 1012, 1014, 1019, 1027, 1035, 1036, 1040, 1043, 1048, 1049, 1050], "interquartil": [236, 882, 894], "interquartile_rang": 882, "interrog": 417, "interrupt": 988, "intersect": [260, 335, 405, 409, 738], "interv": [11, 25, 108, 125, 133, 134, 156, 164, 181, 197, 198, 199, 215, 259, 374, 393, 406, 413, 416, 419, 438, 439, 516, 517, 518, 557, 558, 560, 562, 564, 565, 635, 636, 638, 677, 742, 748, 750, 804, 821, 830, 867, 869, 883, 906, 907, 908, 928, 984, 988, 992, 1002, 1008, 1014, 1042, 1046], "intervent": [53, 167], "intl": [25, 413], "intoler": 253, "intolerant_classifi": 253, "intp": [424, 451, 453], "intra": [2, 588, 591, 792, 793], "intract": [54, 414, 989, 997], "intric": [201, 512], "intricaci": 379, "intrins": [176, 393, 414, 416, 995, 1000, 1006, 1047], "introduc": [2, 69, 76, 78, 79, 98, 125, 145, 164, 169, 176, 181, 201, 225, 230, 233, 236, 238, 241, 266, 320, 321, 352, 372, 375, 377, 379, 381, 383, 384, 387, 391, 393, 399, 406, 409, 411, 413, 414, 416, 417, 433, 441, 442, 443, 445, 447, 449, 459, 464, 468, 482, 483, 484, 485, 496, 504, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 555, 556, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 664, 685, 686, 688, 689, 692, 830, 848, 853, 856, 860, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 898, 902, 986, 988, 991, 994, 995, 998, 1002, 1004, 1006, 1007, 1014, 1019, 1026, 1035, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "introduct": [145, 215, 257, 368, 379, 408, 413, 414, 417, 590, 788, 789, 839, 843, 988, 990, 992, 994, 1011, 1020, 1026, 1029, 1030], "introductori": [122, 148, 149, 154, 155, 158, 159, 164, 225, 419, 611, 622, 1014, 1017], "introspect": [2, 4, 69, 385, 559, 560, 589, 1002, 1024], "intrus": 374, "intuit": [2, 11, 29, 42, 50, 60, 98, 109, 112, 119, 141, 149, 167, 168, 198, 199, 220, 226, 260, 278, 288, 307, 310, 335, 338, 342, 351, 379, 393, 406, 409, 411, 413, 415, 645, 782, 783, 784, 787, 875, 904, 906, 907, 909, 910, 984, 988, 989, 992, 993, 999, 1002, 1003, 1007, 1017, 1026, 1028, 1035], "inv": [76, 80, 300], "inv_kw_arg": 868, "invalid": [6, 197, 393, 446, 578, 671, 712, 774, 988, 992, 1041, 1043, 1045, 1046, 1048, 1049, 1051], "invalidparametererror": 992, "invalu": 1017, "invari": [38, 376, 393, 409, 419, 614, 689, 747, 818, 819, 988, 989, 992, 1007, 1013, 1043, 1046, 1047, 1048], "invent": 995, "inventor": 994, "inventori": 1017, "invers": [10, 32, 52, 75, 76, 77, 79, 81, 109, 164, 248, 266, 268, 275, 286, 338, 351, 352, 371, 393, 407, 410, 412, 413, 414, 416, 417, 421, 445, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 527, 533, 534, 535, 539, 541, 543, 557, 561, 564, 589, 590, 591, 628, 644, 645, 658, 659, 666, 668, 674, 675, 676, 677, 678, 680, 724, 743, 752, 797, 798, 846, 847, 854, 855, 861, 862, 864, 868, 871, 877, 878, 880, 896, 897, 904, 905, 906, 909, 910, 912, 914, 930, 986, 988, 992, 995, 996, 1002, 1006, 1007, 1014, 1026, 1028, 1029, 1030, 1035, 1038, 1043, 1046, 1047, 1049, 1053], "inverse_components_": [896, 897, 1004, 1049], "inverse_func": [73, 167, 410, 465, 868, 1002, 1043, 1053], "inverse_transform": [3, 49, 52, 98, 143, 287, 351, 399, 414, 417, 445, 465, 482, 483, 484, 533, 534, 535, 538, 539, 540, 541, 543, 544, 581, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 630, 800, 803, 804, 814, 864, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 884, 896, 897, 1002, 1003, 1004, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "invert": [80, 98, 143, 219, 351, 352, 391, 411, 417, 630, 689, 693, 1002, 1044], "invert_yaxi": [162, 352], "invest": [385, 1017], "investig": [98, 103, 109, 162, 345, 379, 402, 988], "invit": 383, "invok": [381, 531, 537, 539, 545, 546, 567, 569, 570, 799, 822, 825, 901, 1047, 1052], "involv": [310, 312, 315, 338, 342, 365, 367, 374, 379, 383, 393, 394, 402, 412, 419, 699, 832, 833, 989, 993, 995, 999, 1000, 1007, 1012, 1017, 1026, 1043], "invscal": [300, 676, 677, 678, 861, 862, 1006], "io": [373, 376, 379, 383, 385, 387, 393, 692, 1012, 1030, 1033], "ioangatop": 1052, "ioanni": 734, "ioerror": 1051, "iofal": 1049, "ion": 1050, "ionescu": [642, 984, 1045], "iowa": [119, 130, 236], "ipca": [97, 533, 534], "ipdb": [387, 1028], "ipm": 670, "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359], "ipython": [381, 384, 385, 387, 1020, 1028], "ipython_config": 385, "iq": 166, "iqbal": 1047, "iqr": [236, 882, 894], "ir": [229, 414, 590, 726, 756, 839, 843, 990, 992], "iren": [1050, 1051], "iri": [6, 9, 15, 28, 29, 31, 39, 43, 54, 72, 86, 91, 92, 95, 97, 98, 103, 104, 107, 108, 109, 110, 111, 113, 128, 131, 134, 138, 142, 148, 150, 153, 154, 157, 159, 164, 173, 175, 180, 189, 190, 194, 216, 231, 234, 240, 245, 252, 264, 265, 268, 269, 275, 286, 292, 294, 299, 300, 307, 317, 324, 329, 331, 333, 334, 336, 338, 340, 341, 342, 343, 346, 348, 354, 355, 357, 358, 359, 360, 372, 373, 392, 402, 409, 410, 413, 414, 416, 447, 496, 504, 541, 549, 553, 557, 564, 610, 622, 631, 676, 800, 814, 899, 900, 901, 904, 909, 912, 916, 917, 918, 981, 982, 986, 991, 992, 995, 999, 1002, 1005, 1006, 1007, 1008, 1014, 1019, 1026, 1027, 1030, 1048], "iris": [88, 265, 266, 1025], "iris_61": 373, "iris_969": 373, "iris_i": 1026, "iris_version_3": 373, "iris_x": 1026, "iris_x_test": 1026, "iris_x_train": 1026, "iris_y_test": 1026, "iris_y_train": 1026, "irreduc": [112, 992], "irregular": [154, 342, 409, 995], "irregularities_kernel": 154, "irrelev": [141, 181, 361, 385, 411, 416, 418, 604, 740, 992], "irrespect": [197, 230, 268, 283, 606], "irvin": 376, "is_categor": 632, "is_categorical_": [561, 562], "is_classifi": [381, 393], "is_data_valid": [671, 988], "is_fit": 976, "is_fitted_": [423, 426, 428, 431, 432], "is_inli": [469, 563, 850], "is_leav": 359, "is_max_test_scor": 71, "is_model_valid": [671, 988], "is_multilabel": [388, 1052], "is_paramet": 980, "is_pypi": 1053, "is_regressor": 393, "is_scalar_nan": 1048, "is_sh": 270, "is_split_nod": 359, "is_stationari": [157, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "isa": 17, "isaac": [1041, 1042, 1044, 1045, 1052], "isaack": 1048, "isaactrost": 1052, "isakov": 1047, "isbn": [376, 409, 988], "isclos": 15, "isdigit": [17, 417], "ish": 31, "ishaan": 1048, "ishan": [1048, 1049], "ishank": [1040, 1041, 1042], "ishikawa": [1047, 1048], "isin": [275, 326], "isinst": [32, 118, 215, 393], "islic": [6, 42, 60], "ism": 1039, "isn": [146, 315, 350, 352, 361, 366, 379, 387, 515, 561, 562, 594, 794, 803, 804, 877, 995, 1007, 1045], "iso": [89, 148, 159, 164, 209, 220, 610, 613, 614, 1014], "iso_reg": 635, "isoformat": 15, "isol": [119, 126, 226, 236, 351, 377, 385, 396, 563, 850, 908, 1044, 1045], "isolationforest": [108, 111, 134, 164, 200, 214, 226, 236, 275, 305, 631, 830, 908, 998, 1014, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "isolationforestifittedisolationforest": 126, "isomap": [10, 50, 114, 164, 217, 220, 222, 224, 230, 292, 293, 315, 319, 416, 502, 544, 549, 566, 689, 690, 691, 692, 853, 865, 874, 897, 995, 1014, 1029, 1030, 1043, 1045, 1048, 1049, 1050, 1051, 1052], "isomap__n_neighbor": 315, "isometr": [218, 688, 690, 691, 692, 989], "isoton": [22, 23, 71, 73, 164, 225, 241, 368, 437, 657, 927, 1014, 1015, 1030, 1036, 1037, 1038, 1039, 1041, 1048, 1051], "isotonic_regress": [635, 1048], "isotonicregress": [229, 983, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "isotonicregression0": 635, "isotrop": [32, 53, 55, 59, 98, 151, 153, 218, 220, 409, 411, 419, 512, 519, 532, 615, 619, 620, 622, 623], "isotropi": 414, "isr": 418, "issam": [0, 299, 1041], "issu": [0, 2, 23, 77, 84, 197, 215, 264, 312, 366, 368, 373, 382, 383, 384, 387, 388, 391, 393, 394, 395, 396, 399, 402, 404, 409, 411, 412, 417, 449, 452, 462, 473, 482, 483, 484, 534, 539, 543, 573, 588, 589, 591, 611, 627, 691, 695, 769, 875, 880, 892, 931, 981, 982, 989, 995, 1000, 1002, 1007, 1012, 1013, 1016, 1027, 1028, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1053], "issuenumb": 387, "ist": 418, "isupp": 417, "isuru": 1047, "itakura": [414, 538, 540, 547, 1042], "itali": 376, "item": [6, 7, 8, 9, 10, 11, 15, 17, 28, 41, 53, 73, 113, 115, 119, 122, 130, 167, 195, 199, 205, 219, 232, 233, 235, 245, 256, 262, 319, 326, 351, 372, 379, 380, 381, 388, 410, 464, 526, 561, 562, 588, 589, 591, 632, 812, 877, 899, 900, 919, 920, 946, 984, 1005, 1013, 1019], "item_idx": 305, "itemgett": 17, "iter": [6, 13, 15, 29, 44, 70, 80, 93, 96, 109, 112, 115, 118, 120, 121, 123, 124, 125, 146, 158, 161, 164, 176, 177, 205, 212, 245, 246, 251, 254, 267, 270, 276, 299, 301, 302, 307, 317, 326, 328, 329, 338, 379, 381, 385, 387, 388, 392, 393, 403, 409, 412, 414, 416, 418, 421, 437, 440, 441, 443, 445, 447, 448, 449, 452, 454, 459, 461, 462, 463, 471, 472, 478, 482, 483, 484, 515, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 559, 560, 561, 562, 564, 567, 568, 581, 582, 588, 589, 591, 593, 594, 602, 610, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 838, 853, 860, 861, 862, 863, 864, 868, 875, 877, 879, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 919, 940, 941, 947, 948, 949, 950, 958, 982, 988, 989, 991, 992, 995, 996, 997, 1005, 1006, 1007, 1008, 1013, 1014, 1017, 1023, 1027, 1028, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "iter_minibatch": 6, "iter_offset": 1049, "iter_offset_": 1049, "iterated_pow": [70, 532, 535, 541, 1041], "iterative_impute_scor": 162, "iterativeimput": [160, 162, 163, 164, 228, 399, 490, 565, 580, 628, 629, 630, 639, 645, 672, 826, 847, 865, 1014, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "itergrid": 1037, "itertool": [6, 40, 42, 60, 131, 168, 182, 244, 249, 259, 266, 268, 416], "ith": [496, 774, 778, 840, 861, 862, 877, 878], "ith_cluster_silhouette_valu": 58, "itk": [1045, 1046, 1047], "its": [0, 2, 7, 10, 11, 12, 17, 24, 25, 32, 35, 53, 63, 64, 76, 78, 80, 84, 88, 89, 90, 98, 107, 109, 115, 118, 120, 122, 125, 136, 146, 149, 154, 156, 167, 168, 170, 173, 176, 186, 210, 214, 215, 220, 226, 233, 235, 236, 238, 240, 243, 248, 249, 258, 262, 264, 266, 268, 273, 283, 285, 289, 290, 307, 318, 328, 335, 342, 347, 350, 351, 355, 359, 361, 366, 367, 372, 373, 374, 375, 379, 380, 381, 383, 384, 387, 391, 392, 393, 394, 396, 399, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 425, 440, 442, 444, 446, 450, 454, 456, 460, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 497, 503, 523, 531, 533, 534, 535, 537, 538, 540, 541, 542, 544, 550, 553, 555, 556, 557, 558, 559, 560, 564, 565, 566, 583, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 644, 645, 671, 672, 674, 685, 686, 687, 688, 692, 696, 699, 708, 725, 729, 730, 736, 737, 741, 778, 781, 783, 797, 798, 800, 825, 832, 833, 835, 846, 847, 848, 850, 851, 852, 854, 855, 856, 863, 864, 868, 873, 876, 877, 879, 896, 897, 900, 904, 905, 912, 914, 924, 925, 930, 936, 960, 962, 981, 984, 987, 988, 989, 991, 992, 993, 994, 995, 998, 999, 1000, 1005, 1006, 1007, 1008, 1012, 1017, 1019, 1021, 1023, 1026, 1027, 1028, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "itself": [22, 25, 47, 53, 109, 122, 126, 168, 181, 195, 233, 239, 253, 268, 283, 312, 338, 351, 365, 367, 378, 379, 381, 383, 393, 399, 402, 406, 407, 409, 420, 440, 441, 444, 445, 446, 469, 470, 471, 472, 473, 474, 475, 476, 527, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 551, 566, 569, 583, 592, 595, 596, 598, 599, 600, 602, 603, 639, 640, 641, 642, 643, 645, 655, 689, 691, 792, 793, 839, 840, 841, 842, 843, 844, 845, 849, 857, 858, 869, 870, 871, 899, 900, 949, 984, 988, 989, 991, 995, 996, 1000, 1012, 1039, 1050], "iv": [166, 992], "ivan": [1043, 1044, 1047, 1050], "ivanllt": 1050, "iver": 1041, "iverson": 988, "ivicajov": 1038, "ivl": 170, "ivt": 534, "iv\u00e1n": [1042, 1048], "iwhalv": 1048, "iwona": 1052, "ix": [9, 268, 344], "iy_j": 1002, "iyer": 1046, "j": [0, 9, 15, 35, 36, 38, 41, 59, 68, 77, 78, 79, 109, 112, 113, 124, 144, 150, 162, 168, 209, 221, 235, 243, 258, 259, 264, 270, 287, 293, 296, 309, 320, 359, 366, 373, 374, 376, 383, 385, 391, 397, 405, 406, 409, 411, 413, 414, 416, 417, 419, 420, 437, 440, 444, 446, 453, 454, 469, 474, 498, 513, 516, 517, 518, 520, 528, 531, 534, 536, 537, 538, 540, 541, 547, 553, 559, 560, 593, 594, 632, 633, 637, 644, 645, 648, 649, 666, 667, 669, 680, 688, 689, 690, 692, 693, 694, 696, 705, 708, 710, 714, 716, 718, 721, 723, 724, 726, 755, 756, 758, 759, 774, 778, 788, 789, 792, 793, 833, 834, 841, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 875, 884, 885, 912, 913, 981, 982, 986, 988, 989, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1010, 1028, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "j0rd1smit": 1047, "ja": [412, 1042], "jaccard": [281, 405, 450, 457, 699, 703, 719, 729, 734, 738, 778, 779, 780, 796, 995, 1043, 1044], "jaccard_scor": [281, 703, 729, 734, 796, 992, 1044, 1047], "jaccard_similarity_scor": [1037, 1039, 1044], "jaccarddist": 699, "jack": [1037, 1040, 1048, 1049, 1050, 1051], "jacklangerman": [1043, 1044], "jackman": 1036, "jackmartin": 1041, "jackson": [1041, 1042, 1044], "jacob": [0, 398, 1040, 1041, 1042], "jacobi": 1050, "jacobsen": 1038, "jacopo": [1043, 1044], "jacqu": [1036, 1038], "jaehong": 1045, "jaehyun": 1047, "jaewon": 1043, "jai": [1045, 1049], "jaidev": 1040, "jaim": 1045, "jain": [1041, 1042, 1043, 1047, 1049, 1050], "jair": 1042, "jake": [0, 9, 156, 198, 218, 246, 288, 296, 398, 1011, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049], "jakemick": 1037, "jakevdp": [288, 296], "jakhar": 1047, "jakirkham": [1042, 1043, 1044, 1050, 1051], "jakub": 1052, "jakubek": [1048, 1049], "jalali": [0, 63, 346, 394, 397, 402, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jalexand3r": 1049, "jamaoui": [1043, 1044, 1047], "jame": [0, 376, 413, 834, 993, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052], "jamestwebb": [1037, 1038], "jami": 1043, "jamieson": 981, "jan": [0, 22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 198, 232, 278, 397, 883, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1051], "jana": 1045, "janet": 376, "jane\u017e": [1036, 1037], "janfidor": [1050, 1051], "janhang": 1045, "janin": 1042, "janna": 1041, "jannik": 1048, "janso": 1035, "jansson": [1038, 1050], "januari": [377, 379, 1035, 1036, 1045, 1047, 1050, 1052], "janvanrijn": [1043, 1044], "jaqu": [0, 29, 43, 49, 51, 71, 87, 88, 180, 193, 194, 195, 220, 343, 345, 398, 1035, 1036, 1037, 1038], "jardim": 1048, "jare": 1050, "jarfa": 1041, "jarir": 1048, "jarkko": 696, "jarosch": 1037, "jaroslaw": 1042, "jarrod": [0, 398, 1044, 1051, 1052], "jarvelin": [726, 756, 992], "jaskowiak": 446, "jason": [3, 414, 535, 900, 1041, 1043, 1047, 1050], "jatin": [1039, 1041], "jauhar": 1049, "jauvin": 1036, "java": [409, 442, 1012], "javascript": 1012, "javier": 1039, "jawahar": 984, "jax": 1052, "jay": 1042, "jaya": 1049, "jayaratn": [1046, 1047, 1050, 1051], "jayratn": 1047, "jayzed82": 1042, "jb": [1051, 1052], "jbdelafoss": 1042, "jbirch": [409, 442], "jblackburn": 1041, "jc": [1042, 1043], "jdcaballero": 1039, "jdethuren": [1043, 1044], "je": 1049, "jean": [1035, 1038, 1039, 1040, 1041, 1042, 1048], "jeann": 1049, "jeanselm": 1045, "jeb": 1043, "jeevan": 1047, "jeff": [1039, 1041, 1048, 1049], "jeffrei": [1038, 1041], "jeffrey04": [1040, 1041], "jelfner": 1049, "jell": 1038, "jen": [658, 1043], "jen09": 414, "jenatton": 414, "jenni": 1049, "jennif": 1048, "jensen": [1041, 1047], "jeong": 1045, "jeremi": [1017, 1040, 1041, 1042, 1043, 1046, 1047], "jeremiedbb": [1043, 1044, 1045], "jeremynixon": 1041, "jeroen": 1041, "jeroenpeterbo": 1047, "jeroko": 1042, "jeromedock": 1045, "jerphanion": [0, 397, 1047, 1048, 1049, 1050, 1051, 1052], "jerryzhu": 899, "jesper": 1045, "jess": [835, 993, 1048], "jess010": 1038, "jessica": 1041, "jessicakk0711": 1051, "jesu": [17, 350, 351], "jet": 65, "jevnik": 1040, "jewalikar": 1041, "jf": 1044, "jfraj": 1040, "jha": [1039, 1045, 1049], "jhay": 1047, "jhm": [22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232], "jhun": 474, "jia": 1041, "jiacheng": 1042, "jiali": 1040, "jian": 409, "jianbo": [409, 452, 462, 691], "jiang": [406, 1039, 1046], "jianzhu": 1048, "jiawei": [1051, 1052, 1053], "jiaxiang": 1047, "jie": [1043, 1044, 1047], "jiefangxuanyan": 1048, "jigna": 1047, "jihan": 1049, "jill": 1041, "jim": 1037, "jim0421": 1047, "jimenez": [1048, 1049], "jimmi": [861, 862, 996, 1041, 1043], "jim\u00e9nez": [0, 369, 1043, 1046, 1047, 1048, 1049, 1050], "jin": [639, 1046, 1047], "jindal": 1047, "jinkun": 1043, "jiongyan": 1043, "jiquan": 996, "jirka": 1049, "jiten": 1050, "jitendra": [409, 452, 462, 691], "jitter": [109, 650, 654, 1046], "jiyuan": 1041, "jjabl": 1043, "jjmistri": 1046, "jk": 989, "jkarolczak": 1050, "jkleint": [1042, 1043], "jl": [230, 897], "jmlr": [0, 409, 666, 667, 676, 704, 988, 1007], "jmlr_2014": 692, "jmontoyam": 1042, "jnboehm": 1048, "jnt": 413, "joaak": [1043, 1044], "joan": [1042, 1043, 1044, 1045], "joanna": 1045, "joaquin": 1047, "job": [117, 125, 167, 246, 253, 379, 383, 387, 416, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 602, 607, 608, 610, 634, 639, 657, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 902, 958, 1017, 1021], "joblib": [40, 52, 70, 115, 283, 316, 374, 377, 379, 382, 388, 391, 393, 396, 401, 407, 410, 420, 437, 441, 444, 445, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 508, 509, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 864, 865, 866, 899, 900, 958, 959, 960, 962, 977, 992, 1013, 1030, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1050, 1052, 1053], "joblib_start_method": 391, "jochen": 1037, "jock": 68, "joe": 1040, "joei": 1051, "joel": [0, 70, 394, 397, 417, 535, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "johann": [1037, 1038, 1043, 1045, 1046, 1049], "johanna": 79, "johannah": 1041, "johanwork": 1048, "john": [376, 417, 536, 708, 735, 769, 879, 906, 907, 909, 910, 982, 988, 992, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1052], "johnathanpi": [1050, 1051], "johnson": [53, 164, 221, 225, 241, 305, 309, 371, 407, 489, 502, 880, 892, 896, 897, 898, 1002, 1009, 1014, 1030, 1043, 1049, 1051], "johnson_lindenstrauss_min_dim": [230, 1004, 1036], "johnston": [146, 376, 988, 1044], "johnstott": 1043, "johnthagen": 1050, "johnwon": 309, "join": [9, 10, 17, 53, 161, 215, 259, 307, 374, 394, 463, 1016, 1028, 1035, 1043], "joint": [122, 164, 168, 175, 181, 183, 184, 185, 186, 196, 216, 218, 253, 410, 611, 652, 662, 692, 839, 840, 841, 842, 843, 904, 988, 989, 993, 997, 999, 1003, 1014, 1035], "jointli": [191, 266, 407, 409, 414, 988], "joli": [0, 398, 1036, 1037, 1038, 1039, 1040, 1041], "jon": [350, 1042, 1045, 1046, 1048, 1049, 1052], "jona": [103, 1047, 1052], "jonatan": 1043, "jonathan": [374, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051], "joncral": 1041, "jone": [0, 374, 398, 1035], "jong": 1042, "joona": 1035, "jordal": 1041, "jordan": [409, 414, 691, 797, 1045, 1046, 1049, 1050], "jordi": 1041, "jorg": [658, 1038, 1047, 1049], "jori": [0, 397, 1042, 1043, 1044, 1047, 1048], "jose": [146, 376, 658, 992, 1043, 1045], "joseph": [1038, 1039, 1040, 1041, 1047, 1049, 1050], "josephsalmon": [1042, 1043, 1044], "josh": [417, 1042], "joshi": [1041, 1043, 1049, 1052, 1053], "joshua": [320, 374, 1037, 1038, 1040, 1041, 1047, 1050, 1051], "joshuakennethjon": 1044, "jos\u00e9": [723, 1038, 1048], "jotasi": 1043, "joudet": [1042, 1043], "journal": [0, 79, 168, 259, 265, 278, 373, 374, 376, 406, 409, 411, 416, 452, 462, 473, 534, 541, 627, 635, 645, 689, 692, 693, 705, 715, 731, 734, 735, 758, 759, 786, 829, 834, 880, 892, 981, 982, 986, 988, 989, 990, 993, 999, 1004, 1006, 1007], "jovan": [1049, 1050], "joydeep": 409, "jo\u00e3o": 1050, "jo\u00ebl": 1043, "jpeg": [373, 374, 493, 494], "jpfrancoia": [1041, 1042], "jpg": [46, 506, 584, 587], "jpm": 10, "jpmml": 1012, "jpmorgan": [10, 1017], "jr": 988, "jrenni": 841, "jrfiedler": 1041, "jschendel": [1042, 1043], "jschuerz": 1049, "json": [373, 379, 396], "jth": [774, 778], "juan": [0, 369, 1035, 1046, 1047, 1048, 1049, 1050], "juanfe88": 1050, "judg": [56, 203, 409, 1023], "judgment": [249, 992], "judithabk6": 1046, "juergen": [1045, 1050], "jul": 268, "juli": [146, 376, 418, 734, 885, 1002, 1038, 1042, 1043, 1044], "julia": [409, 717, 737, 795], "julian": [1042, 1043, 1053], "juliankahnert": 1041, "juliaschoepp": [1050, 1051], "juliathebrav": 1041, "julien": [0, 397, 658, 988, 1017, 1035, 1038, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052], "juliet": 1043, "julietcl": 1043, "julio": 1048, "julyrashchenko": 1048, "jumon": 1046, "jump": [2, 198, 305, 376, 379, 417, 883], "jumpi": 417, "june": [409, 989, 1041, 1051], "jung": [1042, 1046, 1050], "jungkook": 1040, "jungl": 989, "jupyt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 380, 381, 410, 468, 902, 1008, 1012, 1013, 1046, 1049], "jupyterlit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359], "jurgen": 1017, "juri": 566, "jurman": 743, "just": [2, 11, 29, 68, 84, 93, 115, 119, 125, 146, 187, 194, 219, 231, 253, 259, 266, 270, 283, 299, 338, 350, 351, 359, 361, 374, 378, 379, 380, 381, 383, 384, 387, 391, 392, 393, 405, 408, 409, 410, 413, 416, 418, 421, 468, 533, 535, 542, 546, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 579, 584, 610, 611, 646, 652, 657, 658, 660, 662, 666, 667, 668, 676, 677, 678, 806, 823, 853, 861, 862, 981, 988, 991, 992, 993, 996, 1000, 1002, 1006, 1013, 1026, 1035, 1039, 1041, 1043, 1047, 1051], "justglow": 1044, "justif": 676, "justifi": [379, 385, 406, 565], "justin": [1037, 1043, 1047], "jvm": 1048, "jygerardi": [1050, 1051], "j\u00e9r\u00e9mie": [0, 397, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j\u00e9r\u00f4me": [1044, 1045, 1046, 1052, 1053], "j\u00eann": 1041, "j\u00f6rg": [409, 450, 457, 1043], "j\u00f6rn": 1042, "j\u00f8rgensen": [988, 1052], "k": [4, 9, 10, 13, 15, 17, 22, 24, 28, 29, 34, 35, 36, 38, 40, 44, 47, 48, 51, 53, 54, 58, 61, 63, 66, 72, 73, 78, 88, 89, 90, 93, 96, 99, 100, 109, 111, 118, 122, 126, 128, 129, 131, 132, 136, 138, 142, 143, 146, 150, 152, 153, 157, 158, 162, 164, 167, 168, 169, 170, 177, 179, 180, 182, 191, 194, 199, 201, 209, 211, 230, 232, 234, 235, 236, 243, 246, 255, 259, 262, 263, 268, 269, 272, 273, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 306, 307, 308, 309, 312, 315, 319, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 349, 350, 352, 353, 359, 361, 366, 373, 374, 376, 379, 387, 388, 391, 393, 399, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 459, 460, 462, 469, 472, 488, 502, 504, 506, 512, 523, 531, 537, 541, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 581, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 639, 640, 648, 650, 651, 653, 654, 655, 656, 658, 659, 663, 664, 665, 666, 667, 669, 679, 680, 682, 683, 684, 685, 686, 688, 691, 695, 696, 704, 705, 708, 717, 726, 737, 743, 756, 758, 759, 761, 766, 769, 774, 775, 776, 777, 779, 793, 794, 795, 797, 798, 801, 805, 807, 808, 809, 812, 815, 816, 818, 819, 821, 822, 828, 839, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 865, 869, 870, 871, 875, 876, 877, 879, 880, 884, 892, 897, 911, 919, 927, 936, 941, 966, 981, 982, 984, 985, 986, 988, 989, 990, 991, 994, 996, 997, 998, 1000, 1005, 1006, 1007, 1008, 1012, 1014, 1023, 1029, 1030, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "k0": 986, "k1": [419, 621, 624], "k1__": 419, "k1__constant_valu": 153, "k1__k1": 419, "k1__k1__constant_valu": 419, "k1__k1__constant_value_bound": 419, "k1__k2": 419, "k1__k2__length_scal": [155, 419], "k1__k2__length_scale_bound": 419, "k2": [419, 621, 624], "k2__": 419, "k2__length_scal": 419, "k2__length_scale_bound": 419, "k_": [405, 419, 616, 619, 621, 624, 774, 984, 1002], "k_1": [419, 621, 624], "k_2": [419, 621, 624], "k_best": [592, 901, 1005, 1052], "k_diag": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "k_fit_all_": 870, "k_fit_rows_": 870, "k_fold": [136, 1023], "k_gradient": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625], "k_init": [443, 459], "k_mean": [62, 388, 393, 1027, 1043, 1051], "k_means_cluster_cent": 62, "k_means_elkan": 1043, "k_means_iris_3": 43, "k_means_iris_8": 43, "k_means_iris_bad_init": 43, "k_means_label": 62, "k_new": 870, "k_ret": [844, 845], "k_true": [844, 845], "ka00ri": [1050, 1051], "kachaiev": 1052, "kaczmarzyk": 1052, "kadatatlu": 1048, "kadota": 1049, "kaggl": [130, 392], "kahni": 1047, "kai": [376, 563, 998, 1042], "kaicheng": 1039, "kaichogami": 1041, "kailasa": [1049, 1050], "kaim": [861, 862], "kaiser": [414, 532], "kakati": 1050, "kalli": [1043, 1044], "kalyan": 1041, "kamalakerdadi": [1040, 1041], "kamar": 1043, "kamchyev": 1052, "kamel": 1035, "kamishima": [1041, 1042], "kamm": 992, "kanai": [1041, 1042, 1043], "kanazu": [1050, 1051], "kang": [1043, 1045], "kania": [1050, 1051], "kanika": 1045, "kanishk": 1050, "kanissh": 1050, "kanji": 1048, "kanniah": [1038, 1039], "kansal": 1041, "kapadni": 1050, "kapeln": [168, 999], "kapoor": [1043, 1044], "kappa": [536, 716], "kapur": 1042, "kar": 1041, "karan": [1042, 1043, 1044], "karayev": 1037, "karbownik": 1048, "karen": 1048, "karger": [841, 994], "karhunen": 534, "karin": [627, 982], "karl": 1043, "karlo": [1052, 1053], "karnofski": 1042, "karnowski": 1047, "karol": 1038, "kartik": 1047, "karypi": 409, "kaseorg": 1045, "kashif": 1040, "kasim": 1039, "kaski": 696, "kasper": 1043, "kassa": [1050, 1051], "kastner": [0, 97, 398, 1037, 1038, 1039, 1046, 1047], "kat": 1042, "kataev": [1043, 1044], "kataki": [720, 734, 740, 992], "katarina": [1045, 1047], "katheleen": 373, "kathi": [1042, 1045], "kathleen": 1042, "kathryn": 1046, "kati": 1042, "katotten": 1049, "katrin": [1043, 1044], "katrina": [123, 1046], "katriopla": 1043, "katyal": 1045, "katz": [1040, 1047, 1048], "kaufmann": [1004, 1008, 1047], "kaushik": [1042, 1049, 1050, 1051, 1053], "kaushik94": 1038, "kawamura": 1048, "kawwa": 1048, "kayawari": 1048, "kaylani2": 1047, "kaynak": 376, "kazmar": 1039, "kb": [69, 167, 168, 253], "kbest": [70, 592], "kbin": [312, 320], "kbinsdiscret": [2, 51, 73, 90, 164, 177, 197, 215, 237, 293, 304, 307, 312, 313, 320, 357, 512, 657, 867, 883, 913, 1002, 1014, 1043, 1047, 1048, 1049, 1051, 1053], "kbinsdiscretizer__n_bin": 307, "kcachegrind": 382, "kd": [288, 409, 415, 995, 1043, 1044, 1045], "kd_tree": [420, 444, 446, 450, 457, 688, 689, 846, 847, 848, 849, 850, 852, 854, 855, 856, 995, 1048, 1052], "kdd": [173, 374, 406, 437, 1004], "kdd06_rp": 897, "kddcup": [236, 372, 492, 1030], "kddcup99": [374, 492], "kde": [166, 167, 273, 278, 287, 288, 296, 415, 849], "kdt": 995, "kdtree": [446, 450, 457, 688, 689, 844, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1037, 1039, 1043, 1047, 1048, 1051, 1052], "ke": [416, 1046, 1047], "kearn": 1038, "keat": [1050, 1051], "keep": [0, 4, 11, 25, 40, 73, 96, 98, 115, 125, 145, 161, 166, 167, 168, 169, 170, 181, 197, 198, 199, 205, 215, 248, 254, 257, 309, 310, 318, 326, 338, 350, 351, 355, 361, 365, 366, 371, 379, 383, 392, 393, 406, 409, 410, 411, 412, 413, 414, 432, 450, 465, 482, 483, 484, 485, 493, 494, 534, 540, 541, 544, 547, 554, 556, 558, 560, 562, 565, 568, 570, 595, 598, 600, 603, 611, 634, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 708, 818, 837, 838, 847, 855, 861, 862, 900, 905, 907, 910, 913, 915, 988, 993, 997, 1000, 1002, 1013, 1016, 1017, 1019, 1024, 1026, 1028, 1030, 1035, 1040, 1043, 1044, 1048, 1049, 1051, 1053], "keep_empty_featur": [627, 628, 630, 982, 1050], "keerti": 1050, "kegl": [22, 1039], "kei": [6, 8, 11, 15, 17, 40, 115, 119, 130, 161, 166, 215, 233, 236, 239, 260, 262, 263, 316, 317, 318, 319, 320, 321, 322, 367, 372, 381, 384, 385, 386, 391, 393, 394, 396, 399, 409, 410, 413, 419, 464, 472, 561, 562, 567, 568, 569, 570, 588, 591, 594, 617, 626, 632, 634, 659, 711, 800, 803, 804, 812, 814, 822, 827, 863, 864, 919, 929, 957, 1000, 1013, 1028, 1030, 1032, 1041, 1047, 1048, 1050, 1051, 1053], "keith": [350, 1035, 1040], "kekalainen": [726, 756, 992], "kelkar": [1042, 1043, 1045], "kelleh": [708, 992], "kelleher2015": 992, "kellei": [374, 1037, 1038], "keller": 1047, "kellogg": 10, "kellycarmodi": 1045, "kemal": [0, 18, 19, 1037, 1038], "kemaleren": [18, 19], "kemenad": 1046, "kemk": 1046, "ken": [376, 1028, 1037, 1044], "ken4git": 1049, "kendal": 1050, "kendrick": 1047, "kennedi": [1042, 1045, 1052], "kennel": 1046, "kenneth": [1004, 1035, 1036, 1041, 1042, 1049, 1050], "kenni": 1047, "kensuk": 1045, "kent": 17, "kenta": 1038, "kento": [1050, 1051], "kept": [25, 248, 283, 345, 373, 383, 402, 419, 496, 535, 538, 540, 541, 547, 597, 610, 611, 619, 620, 644, 695, 797, 798, 925, 1002, 1043, 1044], "kera": [391, 1012], "kerimov": [1042, 1043], "kernal": 98, "kernc": [1035, 1049, 1050], "kernel": [1, 4, 7, 8, 9, 14, 28, 29, 30, 49, 55, 72, 84, 92, 94, 102, 104, 131, 138, 144, 148, 150, 151, 152, 153, 156, 159, 161, 174, 179, 180, 198, 206, 211, 225, 226, 234, 238, 241, 252, 257, 259, 261, 264, 265, 269, 274, 275, 284, 289, 290, 294, 297, 310, 312, 318, 327, 330, 333, 335, 336, 338, 339, 340, 341, 343, 346, 348, 361, 365, 368, 371, 381, 391, 393, 406, 409, 410, 413, 416, 417, 432, 440, 448, 452, 461, 462, 465, 482, 483, 484, 491, 496, 498, 502, 504, 514, 533, 534, 535, 541, 544, 554, 556, 558, 560, 562, 565, 568, 570, 593, 594, 610, 611, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 688, 690, 691, 692, 695, 735, 758, 759, 761, 766, 767, 774, 775, 776, 777, 800, 806, 811, 814, 830, 832, 837, 838, 844, 845, 847, 849, 855, 862, 864, 865, 870, 874, 876, 877, 879, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 913, 915, 981, 987, 988, 989, 992, 993, 995, 998, 1005, 1006, 1014, 1015, 1019, 1023, 1024, 1029, 1030, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 610, 611], "kernel__length_scal": 149, "kernel__period": 149, "kernel_approxim": [2, 161, 164, 172, 173, 174, 211, 226, 231, 317, 368, 677, 758, 759, 870, 984, 1014, 1019, 1036, 1042, 1052], "kernel_dens": [844, 845], "kernel_label": 344, "kernel_metr": [639, 640, 641, 642], "kernel_param": [452, 535, 639, 643], "kernel_pca": [3, 98, 410], "kernel_pca_": 688, "kernel_pca_back_proj_ax": 98, "kernel_pca_proj_ax": 98, "kernel_ridg": [149, 232, 368, 993, 1039], "kernel_ridge_tun": 149, "kernel_svm": 231, "kernel_svm_scor": 231, "kernel_svm_tim": 231, "kernelcenter": [404, 1002, 1045, 1049, 1051, 1052], "kerneldens": [287, 288, 296, 415, 1037, 1043, 1044, 1048, 1049, 1050], "kernelpca": [3, 410, 414, 533, 534, 541, 544, 688, 690, 692, 870, 1002, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "kernelridg": [98, 149, 232, 672, 985, 993, 1039, 1052], "kertesz": 1049, "keshat": [666, 667, 988], "keshavan": 1045, "kesshi": [1045, 1046], "kevad": 1045, "kevin": [643, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1052], "kevlani": 1043, "keyerror": [919, 1045], "keyword": [350, 373, 379, 381, 384, 386, 393, 409, 420, 423, 438, 444, 445, 450, 452, 457, 464, 467, 496, 503, 535, 538, 540, 559, 560, 567, 568, 569, 570, 620, 628, 631, 632, 639, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 688, 692, 697, 698, 699, 700, 701, 702, 774, 778, 779, 780, 781, 792, 793, 806, 823, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 864, 868, 936, 959, 981, 989, 992, 995, 1005, 1035, 1039, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "kf": [413, 805], "kfold": [52, 115, 121, 136, 254, 264, 361, 413, 437, 472, 567, 568, 594, 602, 647, 651, 653, 655, 661, 663, 665, 673, 800, 803, 804, 806, 808, 810, 814, 819, 821, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 1023, 1036, 1037, 1038, 1040, 1041, 1043, 1045], "khaja": 1050, "khan": [1050, 1051], "khandelw": 1047, "khanduja": 1038, "khant": 1050, "kharsa": 1049, "khedkar": 1049, "khine": 1049, "kho": 1050, "khoo": 1047, "khosasi": 1048, "khosrow": 992, "khoual": 1048, "khwaja": 1050, "ki": 992, "kian": [113, 1040, 1050, 1051, 1052], "kid": 1002, "kieker": [1043, 1044], "kielczewski": [201, 1041], "kie\u00dfl": 1046, "kilian": [417, 1050, 1051], "kill": [350, 391], "killer": [379, 1017], "kilobyt": 51, "kilomet": 764, "kim": [988, 1043, 1044, 1045, 1049], "kimayoung": 1049, "kimberli": 10, "kimbinyi": 1047, "kind": [2, 7, 10, 11, 22, 23, 73, 101, 115, 130, 141, 167, 168, 248, 252, 253, 255, 268, 312, 317, 320, 335, 338, 350, 366, 367, 372, 374, 379, 381, 385, 391, 392, 406, 409, 412, 413, 414, 416, 417, 418, 488, 489, 503, 508, 509, 521, 524, 588, 632, 633, 701, 933, 988, 994, 999, 1008, 1038, 1047, 1049, 1050, 1051], "kindli": 0, "king": 929, "kingjr": 1041, "kingma": [861, 862, 996], "kink": 186, "kiragu": 1047, "kiran": 1047, "kirandevraj": 1050, "kiril": [1042, 1043, 1045, 1047], "kirkbi": [1042, 1043], "kirkham": [1040, 1041, 1043], "kirthi": 1045, "kishan": 1052, "kishimoto": 1047, "kishor": 1048, "kislovskii": 1052, "kit": 391, "kitchen": [641, 984], "kj": [373, 994], "kjell": 1041, "kk": 992, "kl": [414, 989, 1043], "kl_divergence_": [692, 1042], "klarup": 1042, "klass": 63, "klau": [414, 535, 870], "kleczewski": [281, 1042, 1043], "kleiber": 1049, "klevebr": 1043, "klima": 1050, "klopfer": 1044, "kluge": [1050, 1051], "kluger": [405, 451, 513], "klusacek": 992, "km": [59, 319, 351], "kmatt10": 1048, "kmb": 10, "kmean": [17, 18, 34, 35, 41, 43, 44, 46, 48, 51, 55, 56, 59, 63, 66, 164, 246, 249, 308, 319, 351, 388, 399, 409, 440, 443, 448, 449, 452, 462, 512, 710, 792, 793, 797, 798, 869, 995, 1002, 1013, 1014, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "kmeans_estim": 93, "kmeans_model": 409, "kmeans_plusplu": [57, 409, 1047, 1052], "kmitl": 236, "kmode": 1012, "kms15": [1043, 1044], "knee": 409, "kneighbor": [310, 319, 846, 847, 848, 850, 852, 995, 1039, 1044, 1048, 1049, 1050, 1051], "kneighbors_graph": [37, 42, 60, 65, 283, 393, 409, 441, 445, 695, 846, 847, 848, 850, 852, 854, 855, 856, 858, 995, 1035, 1039, 1044], "kneighborsclassifi": [29, 131, 137, 285, 286, 291, 292, 310, 317, 319, 350, 416, 602, 847, 851, 852, 853, 854, 855, 993, 995, 1026, 1035, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborsregressor": [161, 235, 295, 319, 416, 570, 846, 852, 854, 855, 993, 995, 1035, 1037, 1039, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborstransform": [283, 285, 315, 692, 856, 995, 1045, 1049, 1050], "knew": 1027, "knight": 311, "knit": 1022, "knn": [112, 131, 137, 161, 286, 291, 292, 295, 310, 317, 327, 350, 416, 602, 853, 899, 900, 995, 1005, 1026, 1041], "knn__weight": 286, "knn_graph": 37, "knn_impute_scor": 162, "knnimput": [162, 315, 627, 630, 982, 1045, 1046, 1049, 1050, 1051, 1052], "knnquerybatch": 283, "knot": [2, 198, 318, 883, 1002, 1048], "know": [51, 64, 143, 146, 149, 158, 167, 215, 233, 234, 253, 259, 278, 281, 319, 325, 345, 351, 365, 379, 391, 399, 402, 409, 412, 413, 414, 417, 500, 504, 510, 646, 652, 658, 659, 726, 756, 800, 814, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 981, 991, 992, 993, 995, 1004, 1041, 1042, 1045, 1047], "knowledg": [55, 117, 125, 167, 214, 236, 253, 259, 273, 368, 374, 379, 382, 385, 392, 393, 409, 413, 416, 420, 444, 511, 555, 556, 563, 720, 736, 740, 783, 833, 992, 993, 1004, 1028, 1053], "known": [9, 15, 23, 25, 37, 47, 55, 56, 79, 101, 102, 130, 154, 156, 162, 181, 197, 198, 215, 226, 253, 259, 261, 268, 292, 296, 306, 318, 325, 335, 342, 351, 367, 374, 376, 377, 379, 382, 387, 391, 393, 404, 405, 406, 409, 410, 411, 412, 413, 414, 416, 417, 419, 438, 463, 482, 484, 498, 508, 509, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 588, 589, 591, 594, 609, 622, 633, 658, 659, 672, 682, 683, 694, 704, 710, 713, 718, 729, 743, 755, 757, 795, 833, 839, 840, 841, 842, 843, 846, 851, 854, 860, 888, 912, 913, 914, 915, 982, 984, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1007, 1008, 1019, 1024, 1026, 1027], "known_val": 627, "knox": 1047, "knp": 627, "knr": 416, "knyazev": [44, 409, 452, 462, 695, 1045, 1048, 1049], "ko": [10, 24, 150], "kobak": [692, 1048], "kobaski": 1048, "kobayashi": [1047, 1048], "kober": 1043, "kobi": 735, "koch": [1037, 1043, 1044, 1046, 1047], "kocot": 1046, "koehler": 1039, "koen": [1043, 1044], "koenker": [723, 988], "koh": [988, 1017], "kohavi": 413, "kohli": 1052, "koi8": 417, "koivunen": 79, "kokhlikyan": [223, 1042, 1043], "koki": 1047, "koko": [1043, 1049, 1050], "kolawol": 1048, "kolganov": 1040, "kolh": 1037, "kolstad": 17, "komey": [1049, 1050], "kommireddi": 1049, "kondratyev": 1049, "kong": 1048, "konstantin": [1040, 1041, 1042], "konstantino": [1043, 1052], "konwar": 1046, "koonc": 1043, "korba": 374, "korean": 1012, "kornel": [201, 1041], "kornev": 1050, "korobko": 1052, "korobov": [1036, 1037, 1038, 1041, 1042], "korolev": 1045, "kosic": 1047, "kosobrodov": 1043, "kossaifi": [1035, 1039, 1040], "kossen": [1050, 1051], "kossori": [1043, 1044], "kostelac": [1050, 1051], "kot271828": 1048, "kothari": 1046, "kotwalia": [1043, 1044], "koumenti": 1050, "koushik": 1049, "koustav": 1052, "kovalevskyi": 1041, "kowalski87": 1038, "koyama": 1049, "kozachenko": [607, 608], "kozynet": [1047, 1049], "kpca": [533, 534, 535, 1029, 1030, 1035], "kr": [232, 259, 1049], "kr_fit": 232, "kr_predict": 232, "kraig": 1050, "kranthi": 1049, "kranz": 1017, "kraskov": [607, 608], "krasouli": [1042, 1043, 1044, 1045, 1047, 1048], "kratzwald": 1041, "krawczyk": 1049, "krawutschk": [1050, 1051], "krell": [1039, 1041], "kriegel": [409, 420, 444, 450, 457, 850, 998], "krinitsyn": 1043, "krishna": [1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "krishnachaitanya9": 1046, "krishnakalyan3": 1041, "krishnan": 1045, "krivich": [1041, 1042, 1044], "kronovet": 1040, "krr": [232, 643, 985], "krsto": 1053, "krum": [1047, 1049], "krumetoft": 1049, "krump": 1040, "kruskal": [635, 690, 694, 989], "krzeminski": 1042, "krzysztof": 373, "ksemb": 1043, "kshitij": [1050, 1051, 1053], "ksvd": [664, 685, 686, 988], "ksvm": 173, "ksvm_score": 173, "ksvm_time": 173, "kth": [17, 821], "ku": [1039, 1040], "kuai": [1043, 1044], "kubin": 1046, "kuhlmann": [1042, 1043], "kulbear": 1044, "kulkarni": 1043, "kull": [406, 992], "kullback": [13, 218, 414, 538, 540, 547, 692, 989, 1042], "kulsinski": [450, 457, 699, 778, 779, 780], "kulsinskidist": [699, 1051], "kumar": [0, 40, 146, 179, 374, 398, 409, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kumaresshan": [1043, 1044, 1047], "kumawat": 1049, "kund": [1051, 1052], "kunj": 1048, "kuno": 1053, "kuo": 1039, "kurumeyuta": 1048, "kurz": [1049, 1050], "kusanagi": [1046, 1048], "kusanagi2": 1047, "kushal": [1043, 1044], "kushan": [107, 1052], "kushansharma1": 107, "kushwah": [1051, 1052], "kushwaha": 1047, "kusterl": 1045, "kuth": 1041, "kvam": [1036, 1038], "kvle": 1041, "kw_arg": [114, 868, 1002, 1041], "kwarg": [39, 96, 233, 381, 386, 423, 427, 431, 438, 442, 448, 450, 464, 469, 535, 538, 540, 563, 617, 631, 646, 647, 652, 653, 660, 661, 662, 663, 677, 681, 684, 698, 699, 700, 702, 742, 844, 845, 863, 864, 868, 908, 919, 952, 960, 1042, 1046, 1048, 1052], "kwd": [628, 771, 774, 778, 781, 792, 793], "kwei": [13, 1038, 1039, 1040, 1041, 1042], "kxytim": 1048, "kybernetika": 376, "kye": 1043, "kyeongpil": 1043, "kyle": [0, 97, 398, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "kyledrogo": 1043, "kyler": 1040, "k\u00e4rkk\u00e4inen": 988, "l": [0, 5, 12, 15, 38, 44, 45, 64, 65, 79, 112, 146, 169, 189, 192, 201, 206, 207, 264, 265, 266, 278, 300, 309, 345, 376, 377, 385, 387, 405, 406, 409, 413, 414, 416, 419, 474, 516, 517, 518, 538, 540, 547, 555, 556, 557, 558, 565, 566, 590, 607, 608, 610, 611, 615, 619, 622, 623, 634, 648, 649, 658, 669, 672, 674, 680, 687, 689, 692, 693, 705, 715, 725, 726, 731, 756, 786, 841, 875, 912, 913, 914, 915, 981, 986, 988, 989, 992, 994, 995, 996, 1000, 1004, 1006, 1008, 1027, 1038, 1043, 1047, 1048, 1049, 1050, 1052], "l1": [1, 5, 14, 15, 28, 38, 64, 80, 83, 164, 166, 175, 176, 182, 183, 184, 185, 186, 191, 192, 201, 202, 208, 212, 216, 228, 260, 283, 301, 318, 388, 391, 407, 409, 411, 414, 441, 445, 450, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 496, 502, 504, 531, 537, 538, 539, 540, 542, 543, 547, 548, 558, 565, 589, 590, 591, 597, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 679, 681, 688, 735, 762, 768, 773, 778, 779, 780, 785, 814, 821, 830, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 876, 884, 891, 904, 905, 911, 913, 915, 927, 974, 988, 990, 992, 995, 1002, 1006, 1007, 1008, 1014, 1026, 1040, 1042, 1048, 1051], "l1_color": 208, "l1_contour": 208, "l1_distanc": 1035, "l1_min_c": [190, 988, 1007, 1035], "l1_plot": 213, "l1_ratio": [5, 8, 13, 181, 182, 188, 267, 272, 365, 391, 414, 538, 540, 547, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 988, 1006, 1036, 1038, 1040, 1047, 1049], "l1_ratio_": [647, 659, 661], "l1_ratios_": 659, "l2": [12, 28, 38, 80, 83, 164, 166, 167, 175, 176, 181, 182, 188, 190, 192, 193, 197, 202, 208, 212, 213, 215, 216, 260, 272, 283, 305, 312, 329, 350, 351, 381, 388, 391, 409, 411, 414, 416, 417, 441, 445, 450, 457, 524, 538, 540, 547, 558, 561, 562, 565, 589, 590, 591, 643, 646, 647, 648, 649, 652, 657, 658, 659, 660, 661, 662, 663, 668, 669, 672, 676, 678, 680, 681, 686, 687, 688, 735, 750, 761, 762, 778, 779, 780, 814, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 876, 884, 891, 904, 905, 909, 910, 911, 913, 915, 975, 981, 985, 988, 990, 995, 996, 1002, 1006, 1008, 1014, 1026, 1028, 1037, 1039, 1040, 1042, 1044], "l2014": 416, "l2_color": 208, "l2_contour": 208, "l2_regular": [318, 416, 561, 562], "l_": [405, 611, 652, 741, 992], "l_i": 1002, "l_inf": 15, "l_m": 416, "l_p": [450, 457, 688, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858], "l_x": 12, "la": [0, 189, 205, 283, 285, 307, 308, 311, 376, 397, 1017, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "lab": [0, 374, 468, 536, 902, 1017, 1046], "label": [2, 4, 5, 7, 9, 10, 11, 12, 18, 22, 23, 24, 25, 28, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 53, 54, 56, 58, 61, 62, 63, 64, 65, 71, 73, 76, 77, 78, 79, 83, 84, 87, 89, 90, 95, 97, 99, 100, 101, 102, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 142, 144, 149, 150, 154, 155, 156, 157, 158, 161, 164, 167, 170, 173, 176, 177, 179, 180, 181, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 211, 212, 214, 215, 219, 220, 221, 226, 231, 232, 234, 235, 236, 237, 245, 252, 253, 254, 257, 258, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 274, 281, 288, 290, 292, 295, 300, 302, 305, 306, 310, 315, 316, 319, 322, 324, 328, 329, 330, 331, 340, 342, 344, 345, 350, 351, 355, 356, 357, 358, 367, 371, 372, 373, 378, 379, 381, 384, 388, 393, 394, 405, 406, 408, 419, 420, 426, 427, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 465, 469, 487, 488, 489, 493, 494, 495, 496, 502, 503, 508, 509, 512, 514, 515, 519, 522, 523, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 592, 593, 594, 595, 596, 598, 599, 600, 604, 605, 606, 609, 610, 631, 658, 659, 666, 667, 668, 673, 674, 675, 676, 677, 678, 697, 698, 700, 702, 703, 704, 705, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 722, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 754, 755, 756, 757, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 853, 854, 861, 862, 864, 868, 871, 872, 875, 877, 878, 885, 888, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 924, 929, 930, 955, 956, 963, 981, 988, 989, 993, 994, 995, 996, 998, 999, 1002, 1006, 1007, 1008, 1012, 1014, 1015, 1019, 1023, 1024, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "label1": 393, "label2": 393, "label_a": 268, "label_b": 268, "label_binar": [266, 268, 871, 1039], "label_binarizer_": 833, "label_distributions_": [325, 326, 899, 900, 1046], "label_im": 64, "label_out": 41, "label_pr": [717, 736, 737, 755, 757, 795], "label_prop_model": [899, 900], "label_propag": 1036, "label_ranking_average_precision_scor": [992, 1039, 1043, 1044, 1050], "label_ranking_loss": [992, 1040], "label_spread": 327, "label_tru": [704, 717, 737, 755, 757, 795], "labelbinar": [268, 393, 722, 741, 833, 868, 877, 885, 888, 993, 1019, 1038, 1039, 1040, 1044, 1049], "labelbottom": [133, 259], "labeled_iter_": [328, 901], "labelencod": [393, 569, 878, 1003, 1035, 1043, 1050, 1051, 1054], "labelkfold": [1040, 1041], "labelleft": 243, "labelpad": 259, "labelpropag": [319, 327, 900, 901, 993, 1005, 1036, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1051], "labels": [13, 309], "labels_": [36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 50, 53, 56, 59, 60, 61, 63, 65, 319, 321, 351, 379, 393, 409, 427, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 710, 1027, 1040], "labels_050": 63, "labels_200": 63, "labels_a": 35, "labels_b": 35, "labels_pr": [409, 704, 705, 714, 715, 717, 731, 736, 737, 755, 757, 786, 795], "labels_random": 46, "labels_tru": [36, 47, 53, 62, 409, 704, 705, 714, 715, 717, 731, 736, 737, 755, 757, 786, 795], "labels_uniqu": 61, "labelshufflesplit": [1040, 1041], "labelspread": [319, 325, 326, 327, 329, 330, 899, 901, 993, 1005, 1036, 1041, 1042, 1045, 1046, 1049, 1050, 1051], "labelspreadingifittedlabelspread": 327, "labex": 0, "labl": 125, "laboratori": [374, 1012], "lacchia": 1042, "lack": [2, 25, 342, 379, 381, 391, 413, 829, 919, 1007, 1049], "lacost": [658, 988], "lacouth": 1048, "lacrosse91": 1048, "lad": 1048, "lag": [1, 2, 14, 122, 125, 164, 197, 199, 215, 496, 562, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 1014], "lagacheri": 1039, "lagard": 1038, "lagat": 1045, "lagged_count_": 11, "lagged_count_1d": 11, "lagged_count_1d_1h": 11, "lagged_count_7d": 11, "lagged_count_7d_1h": 11, "lagged_df": 11, "lagged_max_24h": 11, "lagged_max_7d": 11, "lagged_mean_24h": 11, "lagged_mean_7d": 11, "lagged_min_24h": 11, "lagged_min_7d": 11, "lai": [10, 310, 342, 998], "laid": [0, 166, 379], "lakhotia": [1045, 1046], "lakshmi": 1045, "lakshmikanth": 1042, "lakshya": [1043, 1044, 1045], "lal": 900, "lalliacqua": [1045, 1048], "lam": [316, 317, 1046, 1053], "lama": 494, "lamb": [1040, 1048], "lambda": [2, 5, 6, 8, 17, 54, 121, 177, 215, 259, 260, 309, 329, 402, 404, 409, 414, 416, 417, 644, 645, 646, 647, 868, 880, 984, 988, 1002, 1023, 1043, 1049], "lambda_": [177, 644, 645, 880, 988, 1042], "lambda_1": [644, 645, 988], "lambda_2": [644, 645, 988], "lambda_i": [988, 1002], "lambda_init": [176, 177, 645, 988, 1045], "lambdas_": [309, 880, 1048, 1051], "lami": 1043, "lamond": 1039, "lamp": 1017, "lamu": 1041, "lan": [658, 1050, 1051], "land": [9, 296, 394, 416], "land_mask": 296, "land_refer": [9, 296], "landeau": 1052, "landmark": [881, 893, 1002], "landscap": 150, "lane": 1041, "lang": 1028, "langford": [417, 688, 989], "langl": [984, 992, 1006, 1007], "languag": [0, 352, 384, 414, 417, 1006, 1012, 1013, 1017, 1020], "language_level": 380, "lanigan": [310, 1042], "lanl": 15, "lannuzel": 1047, "lanterni": 1049, "lanzani": 1041, "lapack": [365, 366, 377, 532, 535, 541, 688, 1050], "lapack_lit": 385, "lapack_svd_driv": 1050, "laplac": [150, 419, 610, 611, 839, 840, 841, 843, 994], "laplacian": [218, 371, 405, 440, 452, 462, 620, 639, 643, 691, 695, 765, 766, 774, 900, 988, 989, 1005, 1030, 1036, 1041], "laplacian_kernel": [765, 990, 1040], "laptop": [11, 387, 468, 902, 1049, 1050, 1051], "lar": [0, 13, 96, 146, 164, 167, 175, 182, 183, 186, 190, 191, 202, 216, 272, 350, 351, 352, 376, 398, 471, 472, 478, 501, 531, 537, 539, 542, 543, 545, 546, 548, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 682, 683, 684, 685, 686, 993, 1014, 1015, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048], "laradji": [0, 299, 1041], "larg": [0, 2, 10, 11, 12, 19, 24, 25, 35, 37, 41, 45, 47, 48, 50, 51, 53, 71, 73, 93, 97, 112, 114, 115, 122, 125, 126, 128, 142, 154, 155, 169, 170, 176, 177, 186, 188, 197, 199, 201, 202, 203, 215, 231, 236, 253, 256, 262, 265, 268, 285, 292, 301, 305, 307, 318, 319, 322, 338, 343, 345, 351, 352, 365, 374, 379, 385, 388, 391, 392, 393, 396, 402, 407, 409, 411, 413, 414, 415, 416, 418, 420, 422, 442, 444, 446, 447, 450, 451, 452, 453, 458, 462, 473, 475, 499, 514, 534, 536, 538, 540, 541, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 582, 589, 634, 641, 643, 646, 647, 650, 652, 653, 654, 657, 658, 659, 664, 671, 672, 674, 677, 679, 685, 687, 689, 691, 692, 693, 695, 746, 779, 780, 800, 808, 810, 814, 818, 829, 839, 840, 841, 842, 843, 844, 845, 850, 861, 862, 869, 873, 874, 882, 884, 896, 897, 904, 905, 909, 910, 912, 913, 914, 915, 940, 941, 981, 984, 986, 988, 989, 991, 994, 995, 996, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1024, 1026, 1027, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "larger": [2, 5, 25, 35, 37, 40, 45, 53, 78, 80, 90, 102, 112, 123, 125, 150, 155, 156, 162, 167, 168, 173, 177, 181, 212, 213, 214, 223, 230, 232, 243, 249, 253, 260, 262, 268, 269, 278, 283, 285, 299, 300, 302, 305, 338, 342, 351, 352, 372, 374, 379, 385, 393, 405, 406, 409, 410, 411, 413, 414, 416, 417, 419, 440, 443, 449, 450, 452, 454, 456, 515, 527, 541, 544, 561, 562, 563, 567, 568, 582, 589, 643, 652, 672, 673, 674, 675, 679, 687, 692, 704, 719, 736, 797, 849, 850, 881, 883, 884, 885, 893, 898, 940, 941, 963, 966, 984, 985, 988, 989, 991, 992, 995, 996, 1000, 1002, 1006, 1007, 1026, 1028, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1052, 1053], "largest": [80, 95, 115, 146, 199, 376, 409, 411, 414, 443, 527, 541, 557, 558, 559, 560, 564, 565, 588, 709, 797, 798, 819, 842, 874, 912, 913, 914, 915, 941, 989, 992, 1002, 1007, 1008], "largest_clust": [409, 443], "largest_coef": [80, 527], "larrald": 1052, "lars_path": [184, 388, 531, 537, 539, 542, 543, 545, 546, 548, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 683, 684, 685, 686, 988, 1035, 1037, 1040, 1044, 1046], "lars_path_gram": [682, 988, 1044], "larscv": [399, 650, 665, 682, 683, 1042, 1048, 1052], "larson": [1040, 1044, 1045, 1047, 1049], "larsson": [1047, 1048, 1049], "lasagna": 1041, "laserjet": 1028, "laska": 1041, "lasso": [1, 14, 15, 64, 102, 130, 136, 164, 167, 175, 178, 188, 190, 196, 202, 205, 208, 216, 230, 248, 272, 318, 322, 345, 365, 391, 411, 412, 414, 416, 417, 418, 471, 472, 478, 501, 524, 531, 537, 539, 542, 543, 545, 546, 548, 597, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 670, 672, 678, 681, 682, 683, 684, 685, 686, 721, 723, 724, 825, 826, 827, 865, 884, 981, 992, 993, 1006, 1014, 1015, 1023, 1026, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1053], "lasso_cd": [531, 537, 542, 548], "lasso_cv": 136, "lasso_lar": [102, 531, 537, 542, 548, 1045], "lasso_lars_": [185, 186], "lasso_path": [182, 651, 652, 653, 654, 655, 656, 663, 682, 683, 988, 1035, 1037, 1039, 1048], "lasso_pipelin": 130, "lassocv": [12, 130, 136, 167, 181, 186, 399, 416, 418, 651, 652, 654, 655, 656, 663, 684, 988, 1023, 1035, 1038, 1042, 1045, 1046, 1048, 1049, 1052, 1053], "lassocvlassocv": 130, "lassolar": [651, 652, 653, 655, 656, 663, 664, 665, 682, 683, 684, 988, 993, 1026, 1035, 1036, 1038, 1042, 1045, 1046, 1048], "lassolars": [185, 186, 418, 651, 654, 655, 988, 1035, 1042, 1044, 1048, 1049], "lassolarscv": [186, 399, 418, 652, 653, 654, 656, 663, 665, 682, 683, 684, 988, 1035, 1042, 1048, 1052], "lassolarsic__criterion": [185, 186], "last": [2, 18, 42, 56, 87, 122, 167, 176, 197, 198, 205, 210, 226, 249, 262, 270, 271, 310, 317, 319, 328, 355, 365, 374, 377, 381, 383, 384, 387, 393, 396, 402, 409, 410, 417, 421, 438, 442, 447, 459, 464, 467, 468, 515, 533, 559, 560, 561, 562, 583, 584, 587, 593, 594, 597, 610, 682, 683, 685, 686, 697, 698, 700, 701, 702, 707, 782, 797, 798, 803, 804, 819, 844, 845, 849, 864, 865, 869, 877, 883, 919, 944, 967, 981, 987, 988, 989, 991, 993, 996, 1006, 1013, 1019, 1026, 1035, 1041, 1042, 1043, 1044, 1049, 1051, 1052], "last_hour": [2, 11], "last_mean": 967, "last_n": 967, "last_var": 967, "lat": [9, 296, 498, 764], "late": [311, 367], "latenc": [1, 5, 14, 164, 364, 524, 565, 672, 678, 830, 884, 910, 957, 966, 1012, 1014, 1030, 1038], "latent": [1, 4, 14, 15, 103, 164, 223, 302, 319, 351, 412, 417, 419, 488, 532, 536, 538, 539, 540, 543, 544, 588, 591, 860, 991, 1012, 1014, 1028, 1029, 1030, 1037, 1040], "latentdirichletalloc": [13, 367, 384, 414, 1012, 1040, 1042, 1049, 1050], "later": [0, 9, 51, 109, 114, 123, 149, 168, 173, 176, 236, 253, 278, 296, 352, 361, 385, 391, 392, 402, 850, 873, 874, 882, 884, 984, 1002, 1023, 1028, 1038, 1041, 1043, 1047], "latest": [315, 316, 317, 318, 319, 320, 321, 322, 377, 379, 383, 385, 387, 1008, 1010, 1049], "latestst": 383, "latex": 1035, "latexpdf": 379, "latin": [6, 417], "latitud": [296, 305, 374, 498, 699, 764], "lattarini": 1037, "latter": [2, 13, 248, 259, 268, 269, 291, 310, 345, 367, 376, 393, 408, 413, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 742, 797, 798, 799, 800, 803, 804, 809, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 959, 995, 1000, 1044], "laughlin": 1042, "launch": [350, 351, 396, 1017], "laur": 1035, "lauren": [0, 362, 692, 696, 989, 1047, 1050], "laurent": [1038, 1039, 1042, 1043, 1050, 1051], "laurenz": 1047, "lauritzen": 1043, "laveen": 1048, "law": 1017, "lawrenc": 253, "lawson": [1042, 1043, 1044], "lawton": 1043, "layer": [2, 29, 118, 128, 138, 151, 153, 164, 204, 207, 210, 213, 237, 298, 301, 302, 303, 307, 308, 330, 343, 347, 365, 387, 416, 514, 515, 522, 567, 830, 860, 861, 862, 865, 884, 997, 1014, 1015, 1030, 1041], "layout": [109, 305, 391, 904, 905, 906, 909, 925, 1007, 1038, 1040, 1052], "layton": [0, 46, 398, 1035, 1036, 1037, 1038, 1040], "lazebnik": [758, 759, 990], "lazi": [11, 394, 417, 1006, 1039], "lazyfram": 71, "lazz": 1050, "lb": [871, 1003], "lbfg": [158, 299, 381, 648, 649, 658, 659, 669, 672, 674, 680, 687, 835, 838, 861, 862, 988, 996, 1039, 1040, 1042, 1043, 1048, 1049, 1050, 1052], "lbfgsb": 658, "lbfin": 1045, "lc": [10, 221, 229], "lceil": [405, 998], "lda": [13, 31, 88, 92, 95, 97, 99, 103, 104, 164, 292, 361, 376, 404, 504, 536, 541, 549, 550, 853, 1012, 1014, 1015, 1029, 1030, 1040], "lda_featur": 384, "lda_model": 384, "lda_np": 404, "ldavid": 1041, "ldflag": 377, "ldirer": 1042, "ldl": [146, 376], "ldot": [988, 992, 994, 996, 1006], "ldwy4": 1052, "le": [658, 872, 983, 988, 995, 1003, 1005, 1043, 1047, 1048, 1052], "le_": 569, "lead": [0, 5, 23, 25, 29, 35, 50, 53, 59, 70, 115, 119, 120, 122, 145, 146, 167, 168, 169, 176, 181, 186, 188, 197, 201, 231, 233, 236, 253, 259, 260, 262, 266, 288, 289, 301, 305, 307, 310, 311, 317, 338, 345, 351, 355, 361, 365, 366, 373, 378, 387, 388, 392, 393, 405, 406, 408, 409, 411, 413, 414, 415, 416, 418, 452, 462, 465, 468, 496, 515, 527, 535, 538, 539, 540, 543, 547, 551, 557, 558, 559, 560, 563, 564, 565, 566, 606, 630, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 679, 691, 695, 746, 797, 803, 804, 832, 844, 845, 849, 868, 875, 885, 896, 897, 902, 904, 912, 913, 914, 915, 981, 986, 988, 989, 991, 992, 993, 995, 996, 998, 1000, 1002, 1005, 1006, 1008, 1017, 1019, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053], "leader": [379, 1017], "leadership": 0, "leaf": [39, 114, 126, 128, 355, 359, 409, 416, 420, 441, 442, 443, 444, 445, 446, 450, 457, 463, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 912, 913, 914, 915, 916, 917, 995, 1008, 1038, 1040, 1042, 1046, 1049], "leaf_id": 359, "leaf_rot": 170, "leaf_siz": [420, 444, 446, 450, 455, 456, 457, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 995], "leagu": 374, "leak": [114, 264, 350, 361, 410, 413, 864, 889, 890, 892, 893, 894, 895, 1002, 1035, 1042, 1045, 1051, 1052, 1053], "leakag": [392, 393, 410, 1030], "lean": 402, "leandro": [1044, 1048], "lear": 1017, "learn": [2, 4, 5, 6, 7, 8, 11, 13, 15, 18, 23, 24, 25, 29, 30, 32, 34, 35, 46, 47, 49, 50, 51, 53, 54, 65, 66, 68, 69, 73, 79, 80, 87, 92, 98, 102, 104, 107, 109, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 129, 130, 136, 137, 138, 143, 146, 149, 152, 154, 158, 161, 162, 165, 169, 170, 171, 172, 174, 178, 183, 185, 186, 192, 197, 198, 199, 201, 211, 215, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 251, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 276, 278, 283, 285, 287, 288, 289, 290, 291, 292, 296, 298, 301, 302, 303, 305, 306, 310, 311, 312, 314, 323, 324, 328, 330, 331, 337, 342, 345, 350, 351, 352, 355, 356, 357, 358, 361, 366, 368, 371, 372, 373, 374, 376, 378, 382, 385, 386, 387, 388, 392, 393, 395, 399, 402, 403, 404, 405, 406, 408, 409, 410, 411, 413, 415, 417, 418, 419, 423, 424, 426, 427, 428, 429, 431, 432, 433, 437, 438, 439, 442, 443, 446, 447, 449, 450, 457, 464, 465, 467, 468, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 508, 509, 510, 512, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 571, 576, 581, 582, 583, 584, 587, 588, 589, 590, 591, 593, 594, 599, 602, 603, 610, 611, 614, 619, 622, 626, 628, 630, 632, 634, 638, 640, 641, 643, 644, 645, 646, 648, 652, 657, 658, 668, 669, 676, 677, 678, 680, 688, 689, 690, 691, 692, 696, 700, 701, 702, 708, 713, 717, 718, 721, 723, 724, 726, 732, 735, 741, 742, 743, 748, 756, 778, 779, 780, 784, 785, 787, 788, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 846, 848, 853, 860, 861, 862, 863, 864, 865, 867, 869, 871, 874, 876, 877, 878, 879, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 909, 912, 913, 914, 915, 927, 935, 936, 958, 959, 960, 981, 982, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1014, 1016, 1021, 1023, 1024, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "learn_rat": 1036, "learner": [6, 110, 120, 130, 367, 559, 560, 561, 562, 582, 589, 630, 846, 847, 852, 854, 855, 994, 997, 1008, 1012, 1013, 1028, 1051], "learning_curv": [261, 320, 399, 806, 987, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1052, 1054], "learning_decai": 536, "learning_method": [13, 384, 536], "learning_offset": [13, 536], "learning_r": [5, 109, 120, 121, 122, 123, 124, 125, 223, 283, 300, 302, 316, 318, 416, 553, 554, 559, 560, 561, 562, 668, 676, 677, 678, 692, 860, 861, 862, 989, 999, 1006, 1036, 1044, 1048], "learning_rate_": [692, 862], "learning_rate_init": [168, 300, 301, 861, 862], "learningcurvedisplai": [232, 261, 320, 987, 1050, 1051], "learnt": [125, 167, 312, 361, 393, 413, 885, 981, 1002], "least": [3, 11, 13, 78, 79, 82, 83, 85, 95, 96, 112, 123, 144, 146, 157, 164, 166, 175, 176, 179, 181, 187, 190, 193, 194, 197, 199, 201, 202, 205, 214, 215, 216, 230, 236, 259, 278, 281, 310, 317, 318, 338, 351, 352, 365, 372, 374, 376, 378, 379, 383, 385, 387, 391, 393, 394, 399, 407, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 444, 448, 450, 456, 457, 458, 461, 474, 481, 482, 483, 484, 485, 494, 516, 531, 537, 539, 541, 542, 543, 545, 546, 547, 548, 549, 557, 558, 559, 560, 562, 564, 565, 566, 593, 594, 602, 635, 643, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 692, 697, 712, 716, 718, 785, 801, 805, 806, 812, 814, 815, 816, 818, 819, 821, 825, 828, 829, 830, 861, 862, 865, 876, 884, 909, 912, 913, 914, 915, 933, 955, 982, 985, 989, 992, 995, 1004, 1006, 1007, 1008, 1013, 1014, 1015, 1017, 1026, 1030, 1035, 1037, 1038, 1041, 1042, 1046], "least_absolute_devi": [1045, 1047, 1048], "least_angl": 388, "least_squar": 1048, "leastangle_2002": [146, 376], "leastsquareserror": 1044, "leav": [51, 109, 114, 123, 168, 170, 215, 266, 310, 359, 361, 365, 376, 378, 384, 393, 409, 416, 441, 442, 445, 446, 463, 503, 557, 558, 559, 560, 561, 562, 564, 565, 566, 673, 675, 802, 807, 808, 809, 810, 818, 819, 844, 845, 912, 913, 914, 915, 981, 989, 995, 999, 1008, 1023, 1026, 1035, 1042, 1044, 1046, 1047, 1051], "leaveonegroupout": [264, 413, 801, 808, 809, 1023, 1041], "leaveonelabelout": 1041, "leaveoneout": [264, 413, 1023], "leavepgroupsout": [413, 802, 1023, 1041], "leaveplabelout": 1041, "leaveplabelsout": 1041, "leavepout": [413, 808, 1023], "leaves_parallel": 916, "lebedev": [1041, 1042], "lebel": 1050, "lebourgeoi": 1017, "lectur": [409, 644, 984, 1011], "lecture2": 644, "lecun": [996, 1006], "led": 1035, "ledoit": [8, 13, 27, 32, 33, 75, 76, 79, 80, 81, 164, 292, 473, 475, 479, 480, 512, 549, 986, 1014], "ledoit_wolf": [80, 411, 1048], "ledoit_wolf_shrinkag": 1048, "ledoitwolf": [31, 75, 77, 80, 81, 100, 124, 164, 294, 411, 469, 470, 474, 475, 476, 477, 800, 1014, 1039], "lee": [414, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1050], "leepei": 1039, "leereev": 1042, "leeuw": 635, "lefebvr": [1048, 1049], "lefevr": [414, 538], "left": [4, 5, 10, 12, 13, 22, 31, 32, 37, 40, 42, 43, 49, 53, 60, 62, 70, 73, 79, 80, 89, 90, 95, 96, 109, 112, 114, 115, 116, 119, 122, 125, 130, 132, 152, 158, 162, 167, 170, 182, 190, 197, 198, 199, 201, 208, 210, 211, 214, 215, 226, 230, 234, 236, 237, 243, 245, 246, 249, 255, 256, 257, 258, 260, 268, 269, 271, 286, 288, 289, 296, 299, 302, 305, 319, 321, 322, 326, 337, 338, 342, 359, 374, 379, 381, 383, 405, 409, 412, 413, 415, 416, 417, 419, 426, 432, 446, 472, 482, 483, 484, 485, 493, 498, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 587, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 635, 639, 643, 651, 655, 797, 798, 800, 803, 804, 807, 814, 877, 884, 912, 913, 914, 915, 916, 928, 941, 963, 966, 981, 984, 986, 988, 990, 992, 994, 999, 1004, 1006, 1008, 1023, 1024, 1026, 1027, 1042, 1044, 1049], "left_h": 305, "left_impur": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "leftarrow": [409, 996, 1006], "leftmost": 996, "legaci": [373, 383, 393, 960, 1035, 1042, 1047], "legarreta": [1046, 1048, 1049], "legend": [2, 5, 6, 7, 9, 11, 22, 24, 31, 35, 38, 59, 70, 71, 73, 76, 77, 78, 79, 83, 84, 88, 95, 97, 100, 101, 102, 109, 110, 111, 112, 113, 115, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 142, 149, 150, 154, 155, 156, 157, 158, 167, 168, 173, 176, 177, 179, 182, 185, 186, 187, 191, 197, 198, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 214, 215, 221, 229, 230, 231, 232, 234, 237, 245, 253, 254, 256, 258, 259, 261, 262, 263, 264, 266, 269, 271, 272, 273, 274, 278, 286, 288, 289, 290, 295, 300, 306, 310, 316, 319, 322, 327, 337, 340, 342, 344, 350, 355, 356, 357, 358, 700, 1024, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "legend_el": [88, 126, 210, 262, 286, 342], "legend_handl": 290, "legend_lin": 7, "legend_titl": 203, "legitim": [253, 989], "legitimate_accept": 253, "legitimate_refus": 253, "lego": 1012, "lehoucq": 414, "leibler": [13, 218, 414, 538, 540, 547, 692, 989, 1042], "leibniz": 992, "leig": 1041, "leightonzhang": 1041, "leinweb": [1043, 1044], "leisur": 2, "lejeun": 1042, "lekhwani": 1044, "leland": [1041, 1042, 1043, 1045, 1046, 1051], "lemaitr": [0, 3, 5, 70, 73, 98, 130, 149, 154, 155, 156, 158, 185, 186, 199, 219, 305, 397, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lemaitre58": [5, 130, 149, 154, 156, 158, 219, 305], "lemir": 1046, "lemma": [230, 371, 407, 534, 541, 549, 896, 897, 898, 986, 1030, 1038], "lemmat": 417, "lemmatoken": 417, "lemo": [1051, 1052], "len": [5, 6, 8, 9, 15, 17, 28, 29, 30, 35, 36, 39, 41, 42, 47, 48, 49, 53, 58, 59, 60, 61, 62, 63, 68, 70, 96, 102, 103, 107, 112, 115, 118, 119, 125, 137, 138, 144, 149, 157, 162, 168, 170, 196, 197, 215, 221, 226, 229, 230, 231, 233, 235, 236, 243, 245, 246, 254, 257, 259, 260, 267, 268, 270, 274, 281, 283, 290, 292, 293, 299, 306, 307, 308, 311, 321, 325, 326, 329, 338, 344, 347, 350, 351, 352, 359, 391, 393, 416, 419, 427, 431, 433, 437, 445, 450, 456, 464, 507, 515, 550, 569, 570, 582, 597, 632, 633, 782, 800, 814, 826, 830, 832, 834, 835, 885, 899, 900, 1026, 1027, 1028, 1044, 1047], "lenail": [1043, 1047], "lend": 1017, "lene": 1051, "length": [43, 68, 87, 88, 90, 101, 103, 118, 146, 149, 150, 151, 154, 155, 157, 173, 180, 233, 234, 237, 240, 286, 317, 320, 335, 352, 372, 376, 379, 387, 388, 393, 410, 414, 416, 417, 419, 445, 490, 508, 509, 512, 515, 523, 551, 563, 581, 582, 589, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 632, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 681, 684, 781, 800, 803, 804, 814, 830, 832, 835, 836, 838, 846, 847, 848, 850, 852, 891, 917, 924, 926, 930, 946, 947, 963, 966, 991, 998, 1002, 1019, 1025, 1026, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1051], "length_scal": [149, 150, 153, 154, 155, 156, 158, 419, 612, 615, 618, 619, 621, 622, 623, 624], "length_scale_bound": [149, 155, 156, 158, 419, 611, 615, 619, 622, 623], "length_scale_grid": 155, "lengthi": [379, 391], "lenient": [878, 1013, 1052], "lenz": [1046, 1050], "leo": 1052, "leon": [676, 677, 678, 1035, 1053], "leonardo": 1048, "leonenko": [607, 608], "leonieborn": 1041, "leopoldo": 1048, "leq": [152, 414, 416, 988, 992, 995, 1006, 1007, 1008], "lera": 1042, "leriqu": [1041, 1043], "lernen": 450, "lesne": 1049, "less": [2, 3, 6, 25, 50, 51, 58, 90, 93, 96, 103, 109, 116, 122, 123, 125, 149, 156, 167, 179, 181, 197, 199, 201, 232, 236, 244, 246, 253, 259, 260, 268, 270, 273, 274, 306, 309, 310, 311, 317, 319, 342, 350, 351, 361, 365, 367, 374, 379, 381, 391, 393, 402, 409, 413, 414, 416, 417, 421, 439, 441, 443, 445, 448, 450, 452, 457, 460, 462, 463, 482, 483, 484, 496, 515, 531, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 590, 596, 619, 627, 634, 647, 661, 676, 678, 692, 701, 721, 722, 723, 724, 725, 736, 752, 764, 779, 780, 785, 795, 797, 798, 802, 803, 804, 810, 828, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 867, 879, 881, 882, 884, 887, 893, 894, 904, 905, 912, 913, 914, 915, 930, 944, 981, 982, 984, 985, 986, 989, 991, 992, 995, 997, 1002, 1006, 1007, 1008, 1012, 1026, 1028, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1050, 1052], "lessen": [203, 658, 659], "lesser": [299, 393, 442, 541, 988], "let": [2, 3, 11, 51, 53, 62, 69, 73, 88, 93, 98, 116, 119, 122, 123, 125, 127, 149, 155, 156, 162, 167, 168, 169, 178, 186, 197, 199, 215, 218, 222, 233, 240, 253, 254, 259, 262, 266, 273, 350, 352, 359, 361, 374, 379, 381, 385, 391, 402, 405, 408, 409, 413, 416, 417, 441, 445, 491, 500, 504, 510, 534, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 684, 870, 877, 878, 988, 989, 990, 991, 992, 999, 1000, 1002, 1007, 1008, 1017, 1026, 1027, 1028, 1045], "letelli": 1041, "letter": [146, 157, 374, 376, 383, 417, 788, 789, 806, 823, 992], "leu": 1049, "leung": 1046, "lev_metr": 391, "levarag": 322, "level": [2, 7, 9, 10, 25, 32, 39, 51, 93, 94, 114, 118, 138, 146, 148, 149, 150, 153, 156, 158, 159, 164, 167, 168, 208, 209, 210, 211, 212, 215, 226, 230, 231, 247, 253, 259, 262, 268, 269, 289, 296, 336, 337, 339, 340, 342, 345, 351, 359, 365, 374, 376, 379, 381, 385, 391, 393, 395, 396, 399, 406, 414, 417, 419, 423, 454, 468, 493, 494, 496, 503, 521, 531, 536, 537, 545, 546, 547, 561, 562, 567, 568, 611, 615, 622, 623, 625, 666, 667, 668, 676, 677, 678, 687, 690, 692, 694, 700, 702, 716, 723, 728, 785, 825, 826, 827, 829, 832, 833, 860, 861, 862, 902, 917, 981, 988, 992, 993, 995, 1000, 1006, 1008, 1012, 1013, 1014, 1028, 1038, 1046, 1049, 1050, 1051], "levelnam": 93, "leven": 391, "levenshtein": 391, "levequ": [842, 884], "leverag": [2, 6, 35, 47, 84, 215, 350, 351, 365, 366, 377, 393, 413, 416, 879, 981, 988, 1019, 1038, 1050, 1053], "levesqu": 1041, "levi": [534, 1042], "levinson": [1043, 1044], "levitski": [1050, 1051, 1052], "levitskii": 1048, "lewi": [374, 1042, 1046], "lex": [409, 452, 462], "lexicograph": [393, 567, 788, 794, 846, 854], "lexicon": 1002, "lexsort": 22, "lf": 387, "lfw": [4, 374, 493, 494, 1024, 1035], "lfw_": 1024, "lfw_home": 374, "lfw_pairs_train": [374, 493], "lfw_peopl": [4, 374, 494, 1024], "lg2012": 416, "lgtm": 1042, "li": [0, 328, 374, 398, 639, 642, 696, 726, 756, 897, 981, 984, 992, 995, 1002, 1004, 1007, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "liabil": 215, "liac": [320, 373, 379, 496, 1050, 1051], "liam": [1043, 1044], "liang": [1041, 1046, 1047, 1052], "liau": 1038, "lib": [366, 377, 396, 1012], "liberti": 249, "libisel": 1053, "liblinear": [190, 336, 385, 658, 659, 788, 904, 905, 906, 909, 910, 988, 992, 1007, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "libomp": [377, 1047], "librari": [4, 253, 259, 318, 320, 357, 361, 371, 373, 374, 377, 378, 379, 380, 385, 391, 392, 393, 396, 402, 404, 658, 904, 905, 906, 907, 909, 910, 960, 988, 992, 1007, 1008, 1012, 1013, 1017, 1024, 1028, 1033, 1038, 1042, 1043, 1044, 1045, 1046, 1048, 1052], "libsvm": [173, 336, 372, 385, 487, 508, 563, 904, 905, 906, 907, 908, 909, 910, 1007, 1030, 1035, 1037, 1043, 1046, 1049], "libsvmtool": [173, 373, 487, 508, 509], "licenc": [3, 373], "licens": [5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 35, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 68, 69, 71, 72, 73, 80, 87, 88, 93, 95, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 129, 130, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 173, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 202, 204, 205, 213, 214, 219, 220, 221, 223, 226, 229, 231, 232, 234, 236, 243, 245, 260, 263, 265, 272, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 325, 326, 327, 328, 330, 342, 343, 345, 346, 350, 351, 352, 373, 391, 393, 1008, 1017], "lichman": 376, "liddel": 1043, "lidston": [839, 840, 841, 843, 994], "lie": [11, 58, 83, 145, 167, 231, 305, 327, 336, 338, 414, 416, 606, 852, 854, 855, 856, 904, 905, 986, 989, 992, 1002, 1007], "lieg": 416, "lieret": 1050, "lieu": [1041, 1042], "life": [11, 125, 252, 387, 989], "lifecycl": [1012, 1013], "lifo": 919, "lift": 396, "light": [112, 374], "lighter": [365, 700, 702, 782, 789, 1051], "lightfm": 1012, "lightgbm": [125, 416, 561, 562, 1012, 1044, 1051], "lightgreen": [132, 203, 214], "lightgrei": 8, "lightn": 1012, "lightweight": [380, 800, 814, 825, 826, 1012], "ligo": 1042, "lik_max": 76, "lik_min": 76, "like": [0, 2, 10, 11, 17, 50, 53, 56, 58, 68, 87, 90, 96, 100, 102, 107, 109, 111, 116, 122, 125, 126, 149, 155, 167, 177, 197, 233, 249, 253, 259, 262, 263, 266, 267, 274, 292, 302, 305, 310, 311, 315, 328, 338, 342, 350, 351, 361, 365, 367, 371, 373, 374, 378, 379, 381, 383, 386, 387, 388, 391, 392, 393, 399, 402, 404, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 515, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 581, 582, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 929, 930, 943, 946, 955, 956, 960, 963, 964, 965, 977, 979, 981, 984, 986, 987, 988, 989, 992, 994, 995, 996, 998, 999, 1002, 1007, 1008, 1012, 1013, 1017, 1019, 1026, 1028, 1032, 1035, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "likelihood": [31, 55, 75, 77, 78, 79, 80, 81, 100, 124, 149, 150, 151, 153, 154, 155, 156, 158, 164, 185, 215, 247, 251, 259, 265, 273, 276, 294, 302, 305, 381, 393, 406, 411, 414, 416, 419, 437, 469, 470, 471, 472, 473, 474, 475, 476, 477, 515, 532, 536, 541, 549, 550, 551, 610, 611, 631, 645, 658, 712, 741, 797, 798, 800, 827, 830, 849, 860, 880, 892, 906, 907, 909, 910, 988, 991, 994, 1002, 1007, 1014, 1038, 1039, 1044, 1050], "likewis": [234, 409, 523], "lil": [393, 553, 554, 871, 920, 946, 995], "lil_matrix": 15, "lili": [1043, 1044], "lilian": [1040, 1041, 1052], "lim": [152, 534], "lima": [1048, 1049], "limit": [2, 6, 15, 25, 35, 40, 55, 64, 80, 109, 116, 117, 123, 130, 161, 167, 168, 169, 176, 197, 198, 214, 230, 266, 307, 311, 318, 345, 352, 361, 366, 380, 381, 384, 391, 393, 394, 406, 408, 409, 412, 414, 418, 446, 463, 468, 559, 560, 561, 562, 632, 650, 679, 682, 683, 688, 778, 821, 852, 854, 855, 856, 877, 878, 902, 906, 907, 908, 909, 910, 960, 981, 988, 989, 991, 992, 999, 1000, 1002, 1013, 1019, 1030, 1043, 1045, 1048, 1049, 1052], "limits_": 995, "lin": [0, 534, 658, 1007, 1040, 1041, 1042, 1043], "lin_clf": 1007, "linalg": [32, 52, 76, 77, 80, 100, 102, 183, 243, 244, 245, 248, 249, 322, 379, 385, 414, 451, 452, 453, 462, 521, 532, 535, 541, 544, 657, 672, 674, 687, 691, 695, 939], "linalgerror": 1045, "lincoln": 374, "lindenbaum": 534, "lindenstrauss": [53, 164, 221, 225, 241, 371, 407, 489, 502, 896, 897, 898, 1009, 1014, 1030], "lindgren": 1053, "lindquist": 1050, "line": [7, 9, 11, 15, 38, 41, 58, 68, 78, 89, 93, 98, 109, 115, 121, 148, 159, 161, 162, 164, 167, 168, 185, 186, 187, 189, 192, 193, 195, 198, 199, 200, 205, 206, 208, 209, 211, 226, 230, 231, 234, 236, 256, 263, 265, 266, 289, 293, 296, 306, 317, 337, 340, 342, 343, 346, 347, 350, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 414, 415, 416, 438, 487, 488, 489, 508, 509, 542, 553, 554, 555, 556, 610, 613, 614, 632, 670, 686, 700, 701, 702, 806, 823, 960, 986, 992, 996, 999, 1006, 1012, 1014, 1016, 1026, 1028, 1037, 1046, 1048, 1051, 1052], "line0": [10, 221], "line1": [5, 10, 221], "line2": [5, 10, 221, 346], "line2d": [7, 78, 211, 289, 337, 340, 806, 823], "line_": [386, 438, 698, 700, 701, 702, 806, 823], "line_bin": 306, "line_fig": 115, "line_i": 200, "line_kw": [125, 127, 237, 261, 316, 322, 632, 806, 823], "line_kwarg": [130, 701], "line_profil": 385, "line_trac": 115, "line_x": [200, 214], "line_y_ransac": 200, "linear": [3, 7, 8, 10, 11, 12, 13, 25, 27, 28, 29, 33, 35, 50, 55, 72, 73, 76, 77, 78, 79, 80, 84, 88, 93, 98, 101, 112, 114, 128, 130, 133, 136, 138, 141, 146, 153, 155, 161, 162, 165, 166, 168, 171, 173, 177, 179, 181, 183, 185, 186, 187, 192, 194, 195, 198, 199, 201, 202, 205, 209, 211, 213, 214, 215, 216, 217, 220, 222, 224, 229, 230, 232, 234, 235, 238, 248, 252, 255, 256, 257, 259, 262, 264, 265, 266, 267, 268, 269, 274, 288, 289, 290, 291, 292, 293, 302, 305, 306, 307, 310, 312, 317, 318, 333, 335, 338, 339, 340, 343, 345, 346, 348, 350, 357, 358, 366, 368, 371, 375, 376, 377, 381, 382, 384, 393, 395, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 442, 444, 455, 465, 467, 475, 482, 483, 484, 496, 501, 502, 512, 515, 521, 524, 532, 533, 534, 535, 536, 539, 541, 543, 544, 548, 549, 550, 554, 566, 582, 589, 593, 594, 606, 609, 614, 620, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 701, 707, 716, 750, 753, 765, 767, 774, 785, 800, 811, 815, 827, 830, 844, 845, 849, 853, 860, 861, 862, 865, 869, 870, 871, 874, 877, 879, 881, 882, 883, 884, 893, 897, 904, 905, 906, 907, 908, 909, 910, 981, 983, 984, 985, 987, 992, 995, 996, 997, 998, 999, 1000, 1006, 1007, 1012, 1014, 1015, 1017, 1019, 1022, 1023, 1028, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "linear_baselin": 317, "linear_kernel": [761, 765, 990, 1043], "linear_model": [2, 5, 6, 8, 12, 23, 25, 28, 52, 69, 71, 73, 84, 114, 130, 132, 133, 136, 137, 144, 145, 146, 149, 161, 164, 166, 167, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 226, 227, 228, 229, 233, 235, 238, 240, 253, 255, 262, 267, 268, 272, 273, 274, 281, 302, 306, 307, 310, 312, 315, 316, 317, 318, 319, 321, 322, 329, 350, 361, 365, 367, 368, 378, 379, 381, 385, 387, 388, 392, 393, 399, 404, 408, 410, 416, 429, 434, 438, 465, 537, 539, 542, 543, 545, 546, 548, 567, 568, 569, 570, 597, 631, 632, 634, 635, 638, 640, 641, 642, 643, 700, 701, 788, 799, 814, 823, 825, 826, 827, 829, 831, 835, 836, 837, 838, 862, 879, 883, 904, 905, 908, 911, 933, 935, 936, 937, 976, 984, 988, 992, 993, 998, 1000, 1002, 1006, 1014, 1023, 1024, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "linear_model_preprocessor": 197, "linear_pca": 410, "linear_preprocessor": 130, "linear_regress": [199, 274], "linear_svc": 1007, "linear_svm": 231, "linear_svm_scor": 231, "linear_svm_tim": 231, "lineardiscriminantanalysi": [31, 32, 101, 219, 292, 361, 404, 536, 550, 853, 986, 993, 995, 1035, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1049, 1050, 1051], "linearli": [29, 98, 111, 146, 167, 176, 211, 219, 226, 268, 269, 307, 310, 342, 350, 365, 376, 391, 414, 416, 515, 553, 642, 707, 873, 874, 992, 995, 998, 1007, 1026, 1042, 1051], "linearly_separ": [29, 299], "linearmodel": 1048, "linearoper": [322, 687], "linearregress": [84, 133, 166, 176, 187, 192, 193, 194, 195, 200, 203, 214, 229, 233, 235, 255, 274, 306, 361, 379, 391, 392, 410, 416, 465, 570, 632, 635, 646, 649, 652, 654, 671, 672, 687, 988, 992, 993, 1002, 1026, 1039, 1040, 1044, 1047, 1048, 1049, 1051], "linearregressionifittedlinearregress": 229, "linearregressionlinearregress": 133, "linearsvc": [23, 25, 68, 70, 142, 143, 164, 173, 211, 231, 256, 258, 266, 307, 315, 333, 335, 339, 340, 345, 348, 350, 365, 381, 385, 406, 417, 418, 437, 512, 567, 577, 631, 639, 643, 652, 672, 673, 674, 675, 676, 687, 735, 742, 827, 832, 905, 906, 909, 911, 988, 992, 993, 1007, 1014, 1035, 1036, 1037, 1041, 1043, 1046, 1051], "linearsvc__c": 307, "linearsvclinearsvc": [70, 143, 266], "linearsvr": [568, 910, 1007, 1039, 1041, 1046, 1051], "linecollect": [10, 221, 229, 632], "linen": [10, 221], "lineno": 385, "lineplot": [125, 259], "liner": [381, 830], "lines_": [386, 632, 806, 823], "linestyl": [8, 9, 31, 58, 71, 78, 100, 102, 109, 121, 132, 136, 138, 149, 152, 154, 156, 158, 169, 170, 182, 184, 185, 186, 197, 198, 199, 203, 207, 209, 210, 215, 234, 236, 253, 256, 258, 262, 263, 268, 273, 288, 296, 300, 306, 336, 339, 340, 342, 343, 345, 1024], "linewidth": [22, 31, 32, 35, 38, 56, 71, 76, 84, 90, 110, 122, 125, 127, 149, 153, 157, 186, 187, 191, 192, 193, 195, 198, 200, 203, 211, 214, 226, 234, 236, 268, 272, 289, 293, 306, 316, 322, 336, 337, 339, 357, 1024], "linger": 199, "linguist": [716, 901, 1005], "lingyi1110": 1050, "link": [10, 15, 109, 167, 168, 176, 197, 201, 215, 243, 253, 262, 293, 355, 366, 378, 379, 380, 381, 383, 387, 393, 406, 409, 411, 414, 416, 419, 561, 562, 610, 648, 669, 680, 688, 705, 923, 925, 988, 995, 1008, 1009, 1012, 1016, 1022, 1026, 1028, 1033, 1035, 1038, 1039, 1042, 1043, 1046, 1052], "link_thickness_i": 293, "linkag": [34, 37, 38, 39, 42, 45, 50, 53, 54, 55, 65, 66, 164, 170, 440, 441, 445, 446, 463, 512, 514, 522, 884, 1012, 1014, 1027, 1038, 1043, 1046], "linkage_matrix": 39, "linkage_tre": 1039, "linkedin": 383, "linker": [377, 380], "linnerrud": [372, 1030], "linnerud": [376, 505], "linprog": [670, 988], "linspac": [2, 6, 8, 9, 12, 22, 24, 35, 36, 38, 40, 47, 53, 78, 79, 94, 102, 110, 122, 149, 150, 152, 153, 154, 155, 156, 158, 168, 176, 177, 179, 181, 187, 191, 197, 198, 199, 203, 207, 208, 209, 210, 211, 215, 223, 226, 229, 230, 232, 234, 247, 259, 261, 262, 266, 267, 268, 269, 274, 288, 289, 295, 296, 306, 308, 319, 320, 337, 338, 341, 342, 343, 345, 346, 347, 631, 632, 806, 828, 844, 845, 1027], "lint": [379, 387], "linter": 579, "linthresh": [176, 181], "linu": [1051, 1052], "linux": [379, 381, 382, 387, 1012, 1035], "lipoprotein": [146, 376], "lippert": 988, "lippmann": 374, "lipschitz": [407, 1004], "lisa": [1043, 1044, 1046, 1047, 1049, 1050], "lise": 1049, "list": [0, 2, 6, 8, 10, 11, 12, 15, 17, 18, 23, 30, 38, 42, 47, 60, 68, 102, 103, 113, 115, 121, 130, 170, 201, 236, 237, 254, 257, 259, 260, 262, 263, 268, 272, 292, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 329, 341, 351, 352, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 399, 406, 409, 410, 413, 415, 416, 417, 432, 434, 437, 450, 456, 457, 464, 465, 466, 467, 471, 472, 478, 482, 483, 484, 488, 489, 490, 491, 492, 493, 496, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 523, 532, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 591, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 686, 687, 692, 696, 697, 699, 710, 711, 712, 713, 716, 718, 725, 733, 742, 746, 754, 778, 781, 783, 788, 794, 797, 798, 800, 803, 804, 806, 811, 812, 814, 823, 825, 826, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 872, 875, 877, 878, 883, 885, 901, 905, 907, 910, 912, 913, 914, 915, 918, 920, 924, 925, 926, 930, 932, 933, 934, 936, 944, 945, 947, 958, 963, 966, 976, 981, 982, 988, 992, 994, 995, 996, 999, 1000, 1003, 1008, 1010, 1012, 1013, 1017, 1019, 1023, 1025, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "list_param": 379, "listedcolormap": [29, 32, 118, 291, 294, 299, 307], "listen": 350, "listinfo": 387, "lite": 1035, "liter": [379, 383, 1017], "literatur": [46, 154, 259, 278, 351, 376, 379, 385, 387, 391, 392, 409, 412, 414, 416, 443, 447, 449, 501, 536, 538, 540, 547, 555, 556, 588, 591, 708, 797, 981, 984, 988, 992, 1045], "litsidi": [1050, 1051], "littl": [167, 168, 169, 170, 226, 374, 417, 462, 644, 800, 814, 941, 982, 989, 991, 1007, 1008, 1026, 1036, 1047, 1052], "lituiev": 1048, "liu": [0, 265, 369, 390, 563, 726, 756, 992, 998, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liutong": 1043, "live": [9, 68, 167, 253, 296, 374, 379, 409, 498, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1016], "livesei": 350, "livni": [409, 442], "lizao": 1043, "lizsz": 1041, "lj2017": 409, "lk": 1038, "lkjcalc": 1043, "lkubin": 1046, "ll": [9, 53, 117, 254, 296, 379, 391, 532, 541, 984, 995, 1008, 1019], "llcrnrlat": [9, 296], "llcrnrlon": [9, 296], "lle": [218, 219, 220, 222, 530, 689, 693, 989, 1047], "lle_hessian": 218, "lle_ltsa": 218, "lle_method": 218, "lle_mod": 218, "lle_standard": 218, "lloyd": [409, 443, 447, 449, 459, 1049, 1050], "llvm": 377, "lm": 178, "lmbda": 309, "lmbda_bc": 309, "lmbda_yj": 309, "lml": [150, 151, 155, 419], "ln": [383, 988, 996, 1002], "loa": [148, 149, 156, 159, 164, 419, 496, 611, 615, 622, 623, 625, 1014], "load": [2, 4, 9, 10, 11, 13, 24, 30, 44, 46, 51, 69, 70, 87, 93, 103, 114, 116, 118, 120, 126, 127, 130, 131, 133, 143, 144, 154, 167, 168, 173, 178, 193, 194, 197, 205, 213, 228, 229, 233, 235, 236, 237, 238, 240, 248, 253, 255, 257, 259, 264, 266, 271, 273, 278, 283, 287, 292, 300, 301, 302, 316, 317, 319, 320, 322, 327, 328, 329, 356, 359, 365, 368, 371, 374, 376, 382, 385, 392, 402, 407, 412, 413, 414, 416, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 532, 534, 543, 844, 845, 941, 1002, 1013, 1020, 1022, 1024, 1030, 1035, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "load_ames_h": 130, "load_boston": [1041, 1043, 1048], "load_breast_canc": [146, 170, 328, 355, 384, 592, 595, 596, 598, 674, 675, 788, 992, 1040, 1041, 1046], "load_cont": 503, "load_dataset": 350, "load_diabet": [5, 123, 133, 136, 146, 162, 182, 184, 185, 186, 193, 194, 237, 255, 320, 416, 558, 562, 568, 673, 701, 825, 826, 827, 913, 915, 1000, 1023, 1026, 1041, 1046, 1049], "load_digit": [30, 49, 50, 56, 70, 71, 87, 137, 144, 188, 204, 219, 230, 231, 257, 258, 261, 267, 275, 285, 287, 292, 300, 302, 321, 325, 326, 385, 410, 421, 445, 446, 532, 533, 534, 535, 599, 600, 638, 639, 668, 688, 689, 690, 691, 693, 695, 1019, 1023, 1024, 1025, 1026, 1027, 1041, 1046], "load_fil": [373, 374, 1028, 1037, 1049], "load_iri": [28, 39, 43, 72, 88, 97, 99, 101, 103, 118, 131, 138, 142, 151, 180, 190, 206, 240, 245, 252, 264, 265, 266, 268, 269, 286, 291, 294, 300, 315, 317, 320, 330, 334, 335, 338, 341, 356, 359, 392, 402, 409, 410, 413, 416, 418, 429, 561, 567, 601, 602, 610, 619, 620, 622, 623, 631, 658, 659, 711, 788, 800, 803, 804, 806, 814, 832, 853, 899, 900, 901, 912, 914, 916, 917, 918, 982, 987, 992, 993, 994, 995, 999, 1002, 1008, 1019, 1025, 1026, 1027, 1041, 1043, 1046], "load_lfw_pair": 1040, "load_linnerud": [837, 1041, 1046], "load_mnist": [205, 283], "load_mtpl2": 215, "load_sample_imag": [46, 583, 584, 587, 1044], "load_svmlight_fil": [373, 1035, 1036, 1041, 1042, 1043, 1050], "load_win": [7, 239, 310, 848, 856, 1032, 1046], "loader": [260, 329, 350, 372, 373, 374, 498, 499, 508, 1013, 1028, 1035, 1040, 1042, 1043, 1046], "loan": [416, 534, 988, 1017], "loayza": 1049, "lobpcg": [44, 452, 462, 688, 691, 695, 1045, 1048, 1049, 1050], "loc": [2, 5, 6, 7, 22, 24, 31, 38, 70, 73, 77, 78, 79, 83, 88, 95, 97, 100, 101, 102, 109, 111, 112, 113, 121, 122, 123, 124, 125, 127, 130, 132, 133, 142, 149, 150, 156, 158, 167, 168, 179, 182, 187, 191, 197, 198, 199, 200, 203, 204, 207, 210, 211, 214, 215, 221, 229, 230, 231, 232, 234, 236, 245, 246, 254, 257, 258, 259, 262, 263, 266, 269, 272, 273, 274, 286, 288, 289, 300, 306, 309, 310, 316, 319, 322, 327, 337, 340, 342, 344, 345, 350, 356, 358, 814, 881, 893, 1023], "loc_a": 309, "loc_b": 309, "local": [2, 7, 10, 18, 37, 50, 55, 59, 93, 96, 114, 115, 127, 146, 154, 155, 164, 168, 198, 211, 217, 220, 222, 224, 226, 230, 236, 284, 292, 293, 297, 337, 357, 358, 366, 376, 377, 379, 383, 385, 387, 396, 409, 414, 416, 417, 419, 447, 452, 462, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 502, 538, 540, 544, 547, 549, 559, 560, 563, 566, 610, 611, 688, 689, 690, 691, 692, 693, 695, 696, 758, 759, 847, 850, 853, 855, 865, 874, 897, 900, 908, 958, 960, 990, 991, 995, 996, 1008, 1014, 1016, 1027, 1029, 1030, 1039, 1043, 1047, 1050, 1053], "localcach": 396, "localclust": 960, "locally_linear_embed": [222, 989], "locallylinearembed": [10, 218, 219, 220, 319, 688, 690, 692, 989, 995, 1040, 1041, 1049, 1050, 1051], "localoutlierfactor": [226, 236, 289, 290, 319, 393, 563, 908, 998, 1042, 1043, 1045, 1049, 1050, 1051, 1052], "localoutlierfactor__n_neighbor": 236, "locat": [7, 23, 51, 52, 70, 78, 79, 191, 296, 317, 338, 372, 374, 377, 379, 383, 384, 387, 388, 396, 409, 411, 415, 448, 460, 461, 469, 470, 471, 472, 473, 474, 475, 476, 488, 500, 501, 504, 505, 512, 515, 977, 982, 988, 993, 998, 1002, 1008, 1043], "location_": [78, 79, 469, 470, 471, 472, 473, 474, 475, 476], "location_reweight": [469, 474], "lock": [396, 401, 402, 958, 960, 1053], "loev": 534, "lof": [7, 164, 211, 226, 236, 284, 297, 337, 563, 850, 908, 998, 1014], "lof_kw": 236, "lofti": [1045, 1046], "log": [2, 18, 23, 24, 25, 76, 93, 109, 120, 122, 130, 142, 146, 150, 151, 153, 154, 155, 158, 182, 185, 186, 190, 197, 202, 207, 215, 230, 232, 247, 293, 310, 350, 374, 376, 377, 379, 383, 387, 388, 393, 405, 406, 409, 410, 411, 414, 416, 417, 419, 448, 451, 460, 465, 470, 471, 472, 473, 474, 475, 476, 532, 536, 541, 549, 550, 551, 553, 555, 557, 559, 562, 564, 590, 591, 593, 594, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 642, 645, 648, 658, 659, 669, 671, 676, 680, 722, 741, 751, 755, 797, 798, 800, 803, 804, 814, 839, 840, 841, 842, 843, 844, 845, 849, 860, 861, 868, 869, 898, 901, 906, 909, 911, 912, 914, 939, 981, 984, 986, 988, 989, 994, 995, 997, 1000, 1002, 1006, 1008, 1012, 1013, 1026, 1037, 1038, 1039, 1044, 1045, 1046, 1049, 1052, 1053], "log10": [142, 155, 167, 182, 190, 260, 338], "log1p": [73, 229, 868, 992, 1002], "log2": [113, 207, 238, 557, 558, 559, 560, 564, 565, 912, 913, 914, 915, 993], "log_": 992, "log_2": [405, 563, 998], "log_bas": 726, "log_den": 288, "log_dens": 849, "log_likelihood": [76, 610, 611, 797, 798], "log_likelihood_gradi": [610, 611], "log_logist": 1052, "log_loss": [23, 24, 121, 124, 150, 310, 329, 350, 393, 406, 416, 557, 559, 561, 564, 646, 658, 676, 912, 914, 981, 988, 992, 1006, 1008, 1037, 1039, 1041, 1049, 1050, 1051, 1052], "log_marginal_likelihood": [150, 151, 153, 155, 158, 419, 610, 611, 1045], "log_marginal_likelihood_value_": [610, 611], "log_prob": [797, 798, 799, 822], "log_reg": [240, 319], "log_reg_input_featur": 319, "log_scal": 1051, "log_scale_transform": [197, 215], "log_scaled_numer": [197, 215], "log_y_prob": 861, "logaddexp": 1052, "logan": [1049, 1050, 1051], "logarithm": [73, 130, 167, 201, 230, 260, 338, 393, 418, 460, 590, 658, 659, 676, 704, 726, 741, 751, 755, 756, 757, 791, 799, 822, 835, 844, 845, 939, 1008, 1023, 1042], "logcosh": [421, 533], "logdet": 939, "logged_in": 374, "logger": 1046, "logic": [107, 366, 380, 381, 386, 404, 416, 1008, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "logical_and": [12, 122], "logical_not": [17, 62, 102, 200], "logical_or": [199, 205, 268, 385], "logical_xor": [12, 153, 342], "loginov": 1041, "logist": [23, 25, 28, 43, 67, 69, 73, 74, 88, 101, 103, 114, 137, 144, 164, 175, 182, 184, 192, 194, 195, 201, 202, 203, 206, 208, 214, 216, 227, 229, 240, 253, 258, 267, 270, 273, 281, 294, 301, 302, 310, 319, 334, 335, 345, 346, 350, 393, 394, 406, 410, 416, 418, 419, 437, 489, 496, 502, 504, 512, 541, 559, 561, 571, 610, 631, 646, 657, 658, 659, 666, 668, 676, 741, 800, 814, 830, 833, 860, 861, 862, 864, 884, 911, 927, 929, 992, 996, 997, 1006, 1007, 1014, 1015, 1017, 1024, 1030, 1039, 1042, 1043, 1045, 1046], "logistic__c": [71, 1024], "logistic_regress": [253, 823, 831], "logistic_regression_path": [1043, 1044], "logisticregress": [23, 28, 69, 71, 114, 132, 137, 144, 145, 146, 180, 187, 188, 189, 190, 204, 212, 213, 227, 228, 238, 240, 253, 262, 268, 273, 302, 307, 315, 316, 317, 318, 319, 321, 350, 365, 379, 381, 385, 387, 392, 399, 406, 408, 410, 416, 418, 429, 434, 438, 567, 569, 597, 631, 634, 643, 652, 659, 672, 673, 674, 675, 676, 687, 700, 788, 799, 814, 823, 829, 831, 835, 836, 838, 889, 890, 892, 893, 894, 895, 911, 935, 936, 937, 976, 988, 992, 993, 1002, 1006, 1007, 1024, 1026, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "logisticregression__c": [253, 307], "logisticregressioncv": [25, 310, 393, 399, 658, 988, 993, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1052, 1053], "logisticregressionifittedlogisticregress": 302, "logisticregressionlogisticregress": [69, 114, 227, 228, 238, 240, 253, 273, 316, 319], "logit": [406, 419, 658, 659, 988], "loglik_lw": 76, "loglik_oa": 76, "loglik_r": 76, "loglike_": 532, "loglog": [76, 230], "logloss": 1046, "lognorm": [122, 155, 178, 247, 309, 1002], "logo": [0, 413, 807], "logprob": 849, "logreg": [180, 838], "logspac": [2, 10, 25, 71, 76, 100, 136, 146, 150, 155, 167, 190, 201, 202, 230, 232, 247, 253, 260, 272, 275, 287, 299, 307, 310, 338, 345, 823, 831, 987, 988, 1023, 1024, 1026], "logsumexp": [293, 1042], "loguniform": [4, 149, 267, 981, 1024, 1045], "logx": [201, 345], "lohit": 1052, "loic": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "loki": [366, 960, 992, 1043, 1046], "lomp": 377, "lon": 764, "london": [410, 417, 466], "londschien": [198, 1048, 1052], "lone": [1050, 1051], "long": [2, 9, 10, 42, 60, 122, 154, 162, 167, 169, 197, 233, 234, 236, 262, 296, 305, 316, 350, 351, 361, 366, 377, 379, 387, 391, 393, 394, 402, 407, 409, 453, 498, 538, 676, 677, 678, 803, 804, 839, 840, 841, 842, 843, 861, 862, 872, 992, 998, 1002, 1003, 1005, 1006, 1011, 1037, 1041, 1047, 1049], "long_term_trend_kernel": 154, "long_titl": 342, "longer": [0, 2, 32, 51, 112, 167, 168, 182, 301, 318, 379, 381, 409, 413, 416, 417, 449, 536, 563, 987, 991, 992, 994, 997, 1007, 1016, 1017, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "longest": 283, "longitud": [296, 305, 374, 498, 699, 764], "longpathsen": 396, "longstand": [1036, 1042], "loo": [393, 808, 1046], "look": [2, 3, 25, 51, 53, 93, 96, 98, 122, 123, 149, 154, 155, 162, 167, 168, 199, 218, 222, 226, 233, 249, 253, 254, 259, 261, 273, 301, 322, 350, 351, 361, 366, 367, 373, 374, 379, 380, 381, 383, 385, 387, 391, 392, 409, 412, 414, 415, 416, 417, 448, 488, 489, 557, 558, 559, 560, 564, 565, 602, 603, 631, 659, 692, 884, 912, 913, 914, 915, 988, 989, 1002, 1006, 1007, 1009, 1027, 1028, 1035, 1043, 1045], "lookup": [388, 957, 1044], "loop": [5, 6, 112, 122, 167, 254, 264, 350, 359, 365, 379, 380, 385, 409, 413, 418, 646, 647, 652, 653, 659, 660, 661, 662, 663, 981, 1005, 1006, 1023, 1038, 1039, 1042, 1047, 1048, 1051, 1052], "loopym": 1045, "loos": [249, 256, 1007, 1043], "looser": 190, "lope": 173, "lopez": 173, "lopusz": 1046, "lorain": 320, "lorek": 1042, "lorentzen": [0, 198, 199, 397, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lorenz": [197, 215, 1040, 1052], "lorenz_curv": [197, 215], "lose": [201, 214, 352, 374, 393, 412, 417, 419, 940, 941, 982, 988, 1028], "losi": [0, 398, 1035], "loss": [5, 11, 22, 23, 24, 25, 77, 102, 115, 121, 122, 123, 124, 149, 150, 164, 175, 179, 187, 190, 199, 201, 202, 204, 205, 209, 215, 216, 232, 253, 267, 300, 301, 310, 318, 322, 329, 335, 336, 340, 342, 345, 350, 391, 393, 406, 407, 414, 419, 464, 465, 496, 508, 509, 532, 538, 539, 540, 543, 547, 552, 553, 554, 558, 559, 560, 561, 562, 565, 643, 646, 649, 658, 659, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 679, 703, 706, 709, 722, 723, 734, 735, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 790, 791, 796, 800, 803, 804, 814, 826, 827, 830, 861, 862, 864, 865, 868, 869, 877, 878, 879, 884, 904, 905, 910, 911, 913, 915, 941, 945, 985, 988, 996, 1000, 1005, 1006, 1007, 1008, 1014, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "loss_": [300, 861, 862, 996, 1049], "loss_curve_": [300, 861, 862], "loss_func": 11, "loss_funct": 11, "loss_function_": [666, 668, 676, 677, 1052], "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 11, "lossfunct": [668, 676, 677, 1044], "lossi": 409, "lossili": 393, "lost": [18, 55, 80, 374, 380, 391, 989, 992], "lostanlen": 1045, "lostcoast": 1045, "lot": [2, 80, 125, 167, 201, 374, 379, 380, 381, 387, 414, 416, 803, 804, 896, 897, 981, 1004, 1006, 1007, 1012, 1013, 1017, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1047], "lot_area": 236, "lotan": 1017, "lotconfig": 119, "lotfrontag": 73, "loui": [320, 1040, 1041, 1045, 1047, 1049, 1051, 1052], "louib": [1043, 1044], "loupp": [0, 112, 113, 398, 416, 555, 556, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "lourida": 1041, "love": [1010, 1028], "low": [2, 9, 10, 35, 48, 79, 84, 95, 97, 100, 109, 112, 126, 146, 169, 190, 192, 197, 199, 201, 211, 218, 220, 226, 230, 236, 243, 244, 246, 249, 252, 253, 259, 261, 265, 266, 275, 289, 290, 301, 309, 311, 312, 321, 328, 337, 338, 350, 359, 375, 376, 379, 384, 387, 391, 393, 396, 405, 406, 407, 408, 413, 414, 417, 442, 444, 449, 468, 521, 524, 535, 582, 589, 603, 679, 692, 696, 705, 726, 742, 789, 849, 878, 885, 902, 941, 957, 960, 981, 987, 988, 989, 991, 992, 995, 997, 998, 999, 1000, 1002, 1004, 1007, 1008, 1015, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1049, 1050], "low_cardin": 311, "low_cardinality_featur": 311, "low_cardinalityindex": 311, "low_i": 192, "low_x": 192, "lower": [3, 11, 24, 25, 29, 31, 56, 77, 84, 88, 93, 95, 100, 109, 112, 115, 118, 122, 125, 126, 144, 149, 151, 153, 155, 157, 167, 168, 169, 181, 182, 183, 187, 197, 198, 199, 200, 210, 218, 222, 229, 230, 235, 245, 249, 253, 258, 259, 261, 262, 266, 267, 269, 272, 273, 286, 287, 289, 290, 307, 310, 319, 328, 338, 350, 351, 352, 356, 374, 379, 393, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 420, 444, 448, 464, 467, 498, 509, 532, 534, 541, 544, 553, 559, 560, 561, 562, 563, 588, 589, 591, 603, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 677, 679, 712, 716, 725, 728, 734, 739, 797, 798, 850, 852, 854, 855, 856, 858, 885, 904, 905, 906, 907, 908, 911, 928, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1004, 1006, 1007, 1008, 1026, 1037, 1038, 1043, 1050, 1052], "lower_bound": 258, "lower_bound_": [797, 798, 1043], "lowercas": [417, 425, 442, 443, 445, 447, 449, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 588, 589, 591, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 865, 870, 896, 897, 1048], "lowest": [73, 84, 168, 181, 248, 373, 409, 413, 635, 637, 803, 804, 807, 911, 912, 989, 992, 1008, 1050], "loyal": 1040, "loyola": [0, 369, 1048, 1049], "lo\u00efc": [0, 397, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "lp_model": [325, 326], "lpgo": [413, 809], "lpo": 810, "lprun": 385, "lr": [23, 25, 114, 132, 133, 200, 228, 229, 255, 262, 392, 399, 416, 568, 569, 570, 712, 976], "lr_": 992, "lr__c": 416, "lr_base": 262, "lrap": [739, 992], "lrjball": [1045, 1046], "ls100": 330, "ls2010": 984, "ls30": 330, "ls50": 330, "ls_pipelin": 329, "lsa": [414, 544, 1037], "lsa_vector": 351, "lshforest": [1039, 1042], "lsi": 414, "lsqr": [31, 312, 549, 672, 674, 687, 986, 1036, 1042, 1049], "lstrip": [29, 42, 60, 226, 299, 307], "lstsq": [102, 379, 657, 670], "lsturtew": 1048, "lsvc": 418, "lsvm": 173, "lsvm_score": 173, "lsvm_time": 173, "lt": [69, 70, 114, 130, 167, 248, 257, 271, 377, 379], "ltd": [253, 374, 1017], "ltg": [146, 376, 501], "ltorgo": 374, "ltsa": [218, 219, 220, 689, 693, 989], "lu": [541, 544, 940, 941, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "luangkot": 1042, "luca": [1035, 1045, 1046, 1047, 1048], "lucca": 1048, "luce": 1038, "lucen": 417, "lucgiffon": 1046, "luci": [0, 265, 369, 390, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "luciano": [1043, 1050], "lucieclair": 1049, "lucija": 1043, "lucio": 1044, "lucki": 361, "lucyleeow": 1046, "ludwig": 1035, "luessi": 1037, "lui": [658, 1036, 1038, 1039, 1043, 1052], "luiz": 1049, "luk": 1044, "luka": [1039, 1046, 1052], "luke": 1043, "lukowski": 1050, "luk\u00e1\u0161": 1052, "luna": 1049, "lunt": 1038, "luo": 1039, "lupo": 1047, "luqi": 1044, "luqu": 1045, "lurk": 1035, "lustig": 988, "lutz": [1041, 1045, 1048, 1052], "luxburg": [409, 452, 462, 691], "luzgin": 1045, "lv_ep": 231, "lvdmaaten": [692, 1042], "lw": [58, 76, 77, 79, 97, 101, 102, 191, 198, 200, 203, 207, 214, 221, 246, 254, 269, 288, 305, 327, 344], "lw_cov_": 80, "lw_mse": 77, "lw_prec_": 80, "lw_score": 100, "lw_shrinkag": 77, "lwda": 450, "lx": 995, "ly": [231, 852, 854, 855, 856, 1039], "ly648499246": 1048, "lynch": [1036, 1042], "lyon": [1041, 1042], "lyra": [1036, 1039, 1040], "lyrl2004": [374, 497], "l\u00e9o": 1043, "l\u00e9on": [1006, 1049, 1050, 1051], "l\u00e9onard": [1045, 1050], "l\u00e9one": 1041, "l\u00e9oni": 1041, "l\u00f3pez": [1039, 1043, 1044, 1047], "l\u00f6fstedt": 1042, "l\u00f6ning": 1047, "m": [0, 2, 6, 9, 17, 24, 25, 42, 56, 57, 61, 62, 63, 78, 79, 93, 109, 133, 179, 197, 215, 259, 263, 296, 322, 329, 334, 344, 350, 365, 366, 373, 374, 376, 377, 383, 385, 393, 396, 405, 406, 409, 411, 414, 416, 418, 420, 444, 445, 446, 450, 457, 473, 474, 500, 513, 528, 532, 534, 536, 541, 639, 645, 649, 664, 671, 685, 686, 689, 693, 708, 716, 726, 741, 756, 758, 759, 797, 798, 850, 875, 941, 971, 972, 982, 984, 986, 988, 989, 990, 992, 993, 994, 995, 996, 1000, 1002, 1006, 1008, 1017, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "m1": [377, 404], "m11": 374, "m2": 404, "m2012": 985, "m2019": 999, "m2cgen": 1012, "m4x": [189, 213], "m_max": 151, "ma": [80, 311, 338, 988, 1041, 1046], "maascha": 1050, "maaten": [692, 696, 989], "mabel": [1043, 1047], "mabu": 1048, "mac": [17, 311, 329, 374, 379, 708, 992], "macaulei": 311, "macbook": 1043, "macdonald": [1045, 1046], "mach": [264, 406, 413, 593, 594], "machado": [406, 723], "machin": [0, 2, 4, 6, 7, 11, 25, 61, 71, 83, 115, 137, 142, 143, 146, 149, 154, 165, 169, 171, 187, 192, 209, 212, 239, 253, 259, 262, 265, 278, 298, 303, 305, 310, 312, 317, 320, 334, 339, 342, 345, 350, 352, 365, 366, 368, 372, 373, 374, 376, 379, 382, 385, 386, 391, 392, 393, 395, 402, 406, 409, 413, 414, 416, 417, 419, 437, 439, 448, 471, 472, 478, 502, 504, 510, 516, 517, 518, 530, 532, 534, 541, 544, 555, 556, 557, 558, 559, 560, 564, 565, 566, 593, 594, 610, 611, 614, 619, 622, 634, 638, 639, 641, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 676, 682, 683, 692, 708, 713, 725, 735, 741, 743, 785, 788, 797, 829, 830, 844, 845, 850, 853, 860, 861, 862, 864, 882, 884, 890, 904, 905, 906, 907, 909, 910, 914, 915, 960, 981, 982, 984, 985, 988, 989, 990, 992, 993, 995, 998, 999, 1000, 1002, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1028, 1029, 1030, 1032, 1035, 1037, 1047, 1048, 1049, 1050, 1052], "machinali": 1010, "maciej": 1046, "maci\u00e0": [992, 1048, 1050], "mackai": [644, 645, 988], "mackenbach": 1046, "maco": [380, 382, 396, 404, 1043, 1047, 1049], "macosx": 1035, "macro": [4, 30, 68, 143, 257, 302, 315, 325, 326, 374, 413, 707, 713, 729, 730, 738, 783, 784, 787, 788, 822, 992, 1028, 1035, 1043, 1051], "macro_roc_auc_ovo": 268, "macro_roc_auc_ovr": 268, "macroscop": 409, "macsween": [1044, 1045], "mad": [671, 1041], "madan": 1047, "made": [0, 11, 25, 68, 79, 87, 98, 109, 115, 133, 156, 167, 168, 197, 215, 236, 249, 263, 311, 316, 338, 356, 365, 374, 376, 379, 383, 393, 394, 399, 409, 416, 417, 421, 443, 446, 447, 449, 459, 496, 503, 588, 589, 591, 630, 631, 656, 665, 685, 686, 735, 783, 800, 803, 804, 814, 818, 819, 820, 841, 844, 845, 993, 998, 1008, 1012, 1017, 1025, 1027, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1048, 1049], "madelon": 515, "madhura": [1044, 1046, 1047, 1050, 1051], "madinak": 1050, "madsen": [1041, 1043], "mae": [2, 11, 130, 197, 199, 558, 565, 745, 913, 915, 992, 1008, 1042, 1043, 1047, 1048], "mae_test": 167, "mae_train": 167, "maennel": 1050, "magali": 1049, "magazin": [79, 418], "magda": 1046, "magenta": [76, 124], "maggi": 1049, "maggiecheg": [1045, 1049], "maggio": [1046, 1047, 1048], "magic": [233, 380, 385, 419, 616, 621, 624], "magnesium": 376, "magnitud": [2, 102, 111, 150, 162, 167, 214, 236, 264, 305, 310, 318, 365, 374, 385, 409, 416, 419, 613, 652, 704, 884, 988, 992, 996, 1002, 1006, 1008, 1037, 1044, 1053], "mahajan": [1043, 1045, 1052], "mahal": 78, "mahal_emp_cov": 78, "mahal_robust_cov": 78, "mahalanobi": [7, 75, 79, 81, 100, 164, 200, 409, 411, 450, 457, 469, 470, 471, 472, 473, 474, 475, 476, 699, 778, 779, 780, 986, 995, 998, 1014, 1043, 1046, 1047], "mahalanobisdist": 699, "mahapatra": 1042, "mahdavi": 639, "maheshakya": [0, 1038, 1039, 1040], "mahieux": 1017, "mahout": 841, "mai": [0, 6, 17, 23, 37, 42, 44, 54, 69, 84, 93, 119, 120, 125, 146, 153, 155, 157, 167, 170, 173, 177, 181, 186, 201, 203, 223, 233, 236, 262, 264, 266, 267, 273, 299, 310, 326, 338, 342, 345, 350, 351, 352, 361, 365, 366, 367, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 387, 391, 393, 394, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 432, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 459, 462, 465, 469, 472, 482, 483, 484, 487, 488, 489, 496, 508, 509, 515, 534, 535, 538, 540, 541, 544, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 574, 581, 594, 597, 602, 610, 611, 617, 620, 634, 635, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 681, 684, 686, 688, 689, 691, 692, 693, 695, 697, 705, 711, 712, 715, 716, 718, 719, 721, 722, 723, 724, 726, 738, 756, 763, 785, 786, 800, 802, 803, 804, 805, 814, 815, 816, 819, 820, 825, 829, 832, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 852, 854, 855, 856, 862, 863, 864, 867, 869, 879, 881, 882, 883, 884, 885, 887, 893, 896, 897, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 922, 944, 945, 960, 981, 982, 984, 986, 988, 989, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1019, 1025, 1026, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "maikia": [5, 123, 130, 162, 1043, 1044, 1046, 1047], "mail": [199, 310, 374, 379, 383, 387, 391, 394, 1010, 1043, 1044], "mailhot": 1035, "mailman": 387, "main": [7, 30, 60, 84, 97, 119, 164, 226, 268, 281, 314, 345, 350, 365, 366, 367, 372, 377, 379, 381, 383, 385, 387, 391, 392, 393, 395, 396, 406, 407, 409, 414, 416, 417, 419, 503, 525, 530, 549, 550, 625, 713, 834, 904, 905, 981, 989, 991, 992, 999, 1004, 1013, 1016, 1025, 1028, 1035, 1038, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mainak": 1042, "maingret": 1046, "mainli": [25, 51, 109, 112, 149, 268, 278, 365, 381, 406, 611, 994, 999], "maint": 383, "maint_tool": 383, "maintain": [53, 202, 215, 218, 233, 259, 366, 368, 378, 382, 385, 386, 387, 391, 393, 394, 396, 409, 416, 440, 442, 873, 874, 880, 881, 884, 889, 892, 893, 895, 988, 989, 1002, 1012, 1013, 1019, 1030, 1050], "mainten": [0, 379, 387, 391, 396, 401, 988, 1013, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "mainy": 1047, "mair": 635, "mairal": [414, 531, 537], "maisonneuv": 1047, "maithreyi": 1045, "maj": 569, "major": [8, 13, 32, 115, 266, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 342, 352, 365, 374, 378, 379, 382, 385, 391, 394, 402, 409, 413, 415, 417, 551, 569, 570, 694, 916, 918, 992, 995, 1006, 1013, 1017, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "make": [0, 2, 5, 6, 9, 11, 13, 15, 18, 19, 23, 24, 25, 37, 38, 41, 42, 54, 59, 60, 65, 71, 98, 109, 115, 119, 122, 125, 128, 143, 146, 149, 154, 157, 166, 167, 168, 169, 176, 181, 183, 186, 189, 190, 191, 193, 197, 198, 199, 201, 203, 215, 219, 228, 230, 232, 233, 234, 236, 243, 245, 248, 249, 253, 254, 259, 261, 262, 268, 269, 270, 273, 281, 292, 301, 305, 306, 311, 319, 321, 338, 347, 350, 351, 352, 361, 365, 366, 367, 368, 373, 374, 377, 378, 380, 381, 382, 384, 385, 387, 391, 393, 396, 399, 402, 405, 406, 409, 410, 411, 413, 414, 416, 417, 418, 421, 440, 441, 442, 443, 445, 447, 449, 451, 452, 453, 458, 459, 460, 462, 488, 503, 514, 515, 522, 523, 527, 532, 534, 541, 551, 552, 555, 556, 561, 562, 583, 584, 607, 608, 631, 649, 655, 656, 671, 691, 695, 730, 737, 742, 768, 769, 781, 797, 798, 800, 802, 805, 811, 815, 816, 819, 820, 826, 827, 834, 835, 838, 871, 880, 883, 884, 888, 892, 894, 895, 896, 897, 910, 918, 924, 925, 935, 941, 947, 953, 978, 981, 982, 984, 986, 988, 989, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1017, 1019, 1024, 1026, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "make_": 1044, "make_biclust": [19, 513, 1037], "make_blob": [22, 24, 31, 36, 40, 41, 42, 47, 53, 54, 55, 57, 58, 60, 61, 62, 89, 189, 209, 226, 246, 308, 316, 319, 336, 339, 340, 346, 375, 381, 382, 416, 515, 696, 710, 792, 793, 1043, 1046, 1049], "make_cbar": 270, "make_checkerboard": [18, 511, 1037], "make_circl": [29, 42, 60, 98, 128, 223, 299, 300, 307, 327, 375, 1036, 1043, 1046], "make_classif": [23, 25, 29, 89, 113, 114, 116, 143, 145, 256, 262, 270, 271, 293, 299, 307, 315, 317, 321, 345, 361, 375, 382, 404, 408, 416, 437, 438, 487, 512, 553, 555, 557, 564, 605, 607, 666, 697, 698, 700, 702, 799, 822, 823, 828, 829, 831, 834, 861, 864, 904, 911, 981, 992, 993, 1002, 1007, 1041, 1042, 1043, 1045], "make_column_selector": [69, 119, 130, 236, 410, 464, 467, 1045], "make_column_transform": [119, 130, 167, 228, 316, 410, 464, 466, 1043], "make_data": [32, 59], "make_dataset": 1044, "make_default": 962, "make_ellips": 245, "make_estim": 236, "make_friedman1": [375, 416, 539, 543, 593, 594, 632], "make_friedman2": [375, 611, 613, 614, 615, 616, 617, 621, 624, 625], "make_friedman3": 375, "make_gaussian_quantil": [89, 109, 111, 375, 470, 474, 475, 476, 481, 520], "make_hastie_10_2": [124, 263, 375, 416, 559, 999], "make_heatmap": 270, "make_low_rank_matrix": [321, 524], "make_ml_clf": 90, "make_moon": [29, 42, 60, 226, 259, 299, 300, 307, 375, 981, 1042, 1046], "make_multilabel_classif": [90, 234, 375, 515, 536, 788, 835, 836, 992, 1037, 1038, 1040, 1046], "make_pipelin": [2, 29, 56, 84, 114, 119, 130, 142, 143, 146, 161, 162, 167, 168, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 226, 227, 228, 236, 237, 238, 240, 253, 256, 266, 273, 283, 292, 299, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 351, 361, 392, 399, 410, 413, 567, 676, 678, 856, 864, 889, 890, 892, 893, 894, 895, 904, 905, 906, 907, 909, 910, 982, 995, 1002, 1006, 1007, 1038, 1045, 1048], "make_plot": 305, "make_regress": [8, 73, 176, 178, 179, 183, 200, 201, 272, 316, 322, 361, 375, 381, 382, 392, 554, 556, 560, 565, 606, 608, 609, 635, 646, 647, 649, 651, 652, 653, 655, 660, 661, 662, 663, 664, 665, 667, 671, 679, 681, 682, 683, 685, 686, 687, 862, 905, 992, 993, 995], "make_s_curv": [218, 223], "make_scor": [11, 122, 125, 253, 263, 399, 408, 413, 800, 822, 826, 827, 992, 1044, 1052], "make_sparse_coded_sign": [196, 531, 537, 545, 546, 1049, 1051], "make_sparse_spd_matrix": [80, 478, 529, 1052], "make_sparse_uncorrel": 375, "make_spd_matrix": 527, "make_subplot": 115, "make_swiss_rol": [65, 222, 1049], "make_union": [410, 863, 1038, 1042], "makedir": 1042, "maker": [166, 167], "makhija": 1050, "makoeppel": 1048, "maksym": 1050, "maladier": 1050, "maladi\u00e8r": [1050, 1051], "malcolm": 1043, "maldonado": [1045, 1048], "male": [69, 167, 320, 384, 877, 878, 1002], "malem": 1052, "malet": 1035, "malform": [15, 1039], "malic": [310, 376], "malic_acid": 7, "malici": 402, "malign": [146, 376, 500], "malik": [409, 452, 462, 691], "mallat": [664, 685, 686, 988], "mallatpursuit93": [664, 685, 686], "mallow": [731, 1041], "maloo": [1043, 1044], "malt": [198, 1048, 1049, 1050, 1052], "maltimor": 1045, "malu": 215, "malzer": 446, "mal\u00e9zieux": 1048, "mamba": 402, "mame": 1052, "mammal": 9, "mammalian": 414, "man": [414, 590, 769, 839, 843, 990, 992, 994], "manag": [0, 84, 240, 364, 373, 377, 380, 381, 383, 387, 391, 393, 394, 402, 416, 450, 468, 626, 902, 960, 986, 1008, 1012, 1013, 1017, 1028, 1030, 1048, 1051], "manaileng": 1048, "mandal": 1045, "mandatori": [379, 417, 429, 631], "mandatorili": 1042, "mandera": 1038, "mandi": [1046, 1049], "mandjev": 1049, "mandyam": 1045, "mangasarian": [146, 376], "mangipudi": 1041, "manh": 1043, "manhattan": [409, 441, 445, 450, 457, 699, 762, 771, 778, 779, 780, 851, 990, 995, 1039, 1044, 1051], "manhattan_dist": [450, 457, 688, 762, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1035, 1045, 1050, 1051], "manhattandist": 699, "mani": [2, 5, 8, 17, 53, 54, 72, 76, 80, 109, 115, 116, 117, 118, 123, 142, 146, 169, 197, 218, 230, 244, 252, 253, 259, 266, 267, 271, 283, 305, 310, 311, 315, 316, 317, 318, 319, 321, 322, 350, 361, 365, 367, 374, 376, 378, 379, 392, 393, 394, 396, 402, 405, 406, 409, 410, 411, 414, 416, 417, 418, 419, 421, 503, 541, 553, 554, 557, 558, 559, 560, 564, 565, 566, 606, 609, 627, 639, 650, 654, 658, 659, 666, 667, 668, 676, 677, 678, 692, 695, 774, 778, 800, 804, 814, 861, 862, 877, 882, 884, 904, 912, 913, 914, 915, 981, 982, 984, 988, 989, 991, 992, 993, 994, 995, 998, 999, 1002, 1005, 1007, 1009, 1011, 1012, 1013, 1017, 1026, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "manideep": 1053, "manifest": [387, 989, 995], "manifold": [10, 37, 50, 65, 114, 221, 222, 223, 224, 230, 283, 292, 293, 315, 319, 320, 327, 368, 372, 393, 409, 414, 416, 502, 525, 530, 544, 549, 566, 853, 865, 874, 897, 927, 995, 1014, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "manimaran": [1044, 1046, 1047, 1048, 1049], "manipul": [373, 404, 507, 960, 1012, 1041], "manish": 1046, "maniteja": [1041, 1042, 1043], "mankoo": 1050, "mann": 1045, "mannbi": 1043, "manner": [2, 73, 93, 143, 168, 173, 245, 319, 320, 366, 379, 385, 409, 414, 416, 417, 709, 844, 845, 981, 992, 1008, 1038, 1045], "mannila": 1004, "manning2008": 992, "manoharan": [1042, 1043], "manoj": [0, 40, 146, 179, 398, 1038, 1039, 1040, 1041, 1042], "manojkumarsivaraj334": 40, "manraj": 1042, "mansi": 1050, "mansingh": 1049, "mansouri": 1051, "mantovani": 1050, "manu": 374, "manual": [2, 44, 53, 167, 168, 170, 198, 208, 261, 283, 328, 336, 350, 352, 365, 366, 374, 379, 383, 384, 391, 392, 396, 402, 409, 413, 414, 415, 437, 449, 567, 799, 822, 854, 877, 883, 981, 986, 987, 988, 991, 992, 995, 1002, 1013, 1019, 1020, 1028, 1043, 1045, 1051, 1053], "manuel": [1035, 1039, 1043, 1044, 1047, 1048], "manufactur": [167, 416], "manvendra": [1041, 1042], "maocx": 1045, "map": [2, 3, 8, 9, 15, 17, 24, 51, 84, 98, 113, 121, 124, 128, 149, 164, 173, 197, 215, 218, 220, 225, 233, 236, 241, 260, 263, 268, 275, 291, 294, 296, 304, 305, 313, 329, 338, 342, 351, 352, 373, 374, 380, 391, 393, 399, 402, 406, 407, 409, 410, 413, 414, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 498, 502, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 762, 765, 797, 798, 799, 800, 803, 804, 811, 812, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 946, 949, 950, 981, 984, 989, 992, 994, 1004, 1007, 1008, 1014, 1023, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "mapd": 992, "mape": [11, 746, 992], "mape_cv_mean": 119, "mape_cv_std": 119, "mapi": 11, "mar": [10, 1010], "marc": [1042, 1044, 1045, 1051], "march": [154, 726, 756, 992, 1035, 1039, 1043, 1045, 1050], "marchand": 1049, "marchman": [1036, 1037], "marco": [1041, 1043, 1044, 1048, 1049, 1050, 1053], "marcofalk": 1042, "marcogorelli": [1043, 1044], "marcolini": 1048, "marcom": 1049, "marcu": [1043, 1052], "mare": 1052, "marek": [1035, 1052], "maren": [0, 369, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "margeta": 1043, "margin": [2, 10, 23, 25, 89, 111, 121, 138, 150, 151, 152, 153, 154, 155, 164, 167, 168, 175, 207, 208, 210, 216, 234, 236, 259, 278, 305, 308, 311, 333, 334, 336, 337, 338, 340, 342, 346, 347, 348, 376, 406, 407, 414, 416, 419, 512, 610, 611, 631, 645, 676, 735, 833, 881, 893, 906, 909, 988, 992, 994, 998, 999, 1002, 1006, 1007, 1014, 1026, 1042, 1044], "marguli": 1045, "mari": [68, 1043, 1044, 1045, 1046, 1049], "maria": [5, 123, 130, 146, 162, 409, 1046, 1047, 1048, 1049, 1050], "mariam": 1047, "mariana": 1046, "mariangela": 1048, "mariano": 259, "mariel": 1046, "marielaraj": 1048, "marija": [1046, 1047], "marijn": 1047, "marin": 528, "marina": 409, "marinelm": 1044, "mario": [406, 1039, 1041, 1049, 1050, 1051], "marit": [322, 496], "mari\u00e9": [0, 369, 1044, 1045, 1046, 1047, 1048, 1049], "mark": [32, 56, 90, 141, 162, 263, 270, 371, 379, 381, 383, 387, 388, 393, 409, 535, 607, 608, 611, 632, 658, 857, 858, 899, 900, 917, 931, 936, 941, 988, 1017, 1030, 1035, 1036, 1041, 1043, 1044, 1051, 1052, 1053], "markdown": 382, "marker": [8, 9, 15, 25, 28, 32, 35, 36, 40, 50, 53, 56, 57, 58, 61, 62, 83, 89, 90, 95, 115, 129, 156, 157, 173, 185, 190, 192, 194, 195, 197, 199, 200, 212, 214, 219, 243, 245, 246, 253, 254, 259, 261, 262, 263, 290, 305, 310, 327, 355, 379, 383, 417, 1043, 1045, 1046, 1051], "markeredgecolor": [47, 53, 59, 61, 62], "markeredgewidth": [78, 263], "markerfacecolor": [47, 53, 59, 61, 62], "markers": [47, 53, 56, 59, 61, 62, 122, 152, 156, 229, 253, 319], "markerstyl": 253, "market": [1, 14, 44, 50, 64, 125, 164, 218, 219, 222, 409, 411, 454, 472, 689, 1014, 1017, 1022], "marketplac": 1017, "markham": [1039, 1046, 1047], "markiwanchyshyn": 1043, "marko": [1035, 1044, 1045, 1051], "markou": 1048, "markov": [419, 611, 997, 1012, 1035], "markovtsev": 1043, "marktab": 1040, "marku": [409, 450, 457, 1043, 1045, 1046, 1047], "marmo": [0, 370, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "maron": [409, 442], "marr": 167, "marr_unmarri": 167, "marreddi": 1049, "marri": 167, "marriott": 10, "marsgui": 1043, "marsh": 1046, "marshal": 376, "marsi": 1038, "marsland": 530, "marslast": 530, "marszalek": [758, 759, 990], "mart": [10, 1045], "martel": 1049, "martha": 311, "martian": 1045, "martin": [0, 369, 721, 723, 724, 988, 992, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "martin1997": 992, "martina": [1045, 1047], "martinbpr": [1040, 1041], "martinez": 1042, "martino": 1040, "martinosorb": 1040, "martinsson": [15, 535, 541, 941], "martynov": 1048, "mart\u00edn": [1048, 1049], "marufo": 1050, "marufur": 1042, "marvin": [1050, 1051], "marwaha": 1043, "marx": 1002, "maryanmorel": [1040, 1041], "marzinotto": [1043, 1044], "mar\u00eda": [1049, 1050, 1051], "mas_vnr_typ": 236, "masafumi": 1040, "masanori": [1050, 1051], "masashi": [1045, 1047], "masecchia": 1035, "mash": 417, "mask": [12, 40, 64, 117, 197, 205, 236, 257, 258, 329, 388, 393, 410, 416, 464, 469, 474, 561, 562, 581, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 629, 630, 632, 633, 649, 671, 800, 803, 804, 814, 964, 982, 999, 1035, 1038, 1040, 1041, 1043, 1045, 1053], "mask_al": 982, "mask_false_neg": 253, "mask_false_posit": 253, "mask_missing_values_onli": 982, "mask_out": 12, "mask_test": 215, "mask_train": [168, 215], "mask_true_neg": 253, "mask_true_posit": 253, "mask_y_pr": 28, "maskani": [1043, 1045, 1046, 1047], "masked_arrai": [338, 800, 814], "masked_equ": 80, "maskedarrai": [263, 1041], "mason": 1039, "mass": [146, 237, 376, 446, 797, 988, 999], "massachusett": 374, "massia": [0, 1046, 1048, 1049], "massich": [1042, 1043, 1044, 1045], "massil": 1041, "masstran": 1044, "master": [10, 283, 320, 379, 383, 1017, 1040], "masurel": 1036, "masvnrarea": [73, 130], "masvnrtyp": [119, 130], "mat": [373, 417], "match": [2, 18, 35, 52, 93, 94, 96, 99, 102, 115, 164, 173, 175, 197, 216, 220, 229, 236, 272, 342, 352, 374, 377, 381, 383, 409, 414, 416, 417, 430, 449, 464, 466, 508, 509, 515, 526, 531, 537, 542, 548, 551, 567, 568, 572, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 658, 664, 665, 685, 686, 699, 703, 704, 705, 713, 715, 719, 734, 778, 779, 780, 786, 844, 845, 849, 853, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 904, 911, 917, 928, 960, 989, 991, 992, 994, 995, 1014, 1015, 1019, 1028, 1030, 1035, 1041, 1042, 1043, 1045, 1047, 1048, 1051], "matchingdist": 699, "matchmak": 1017, "matcovici": 1045, "mate": 350, "matem\u00e1tica": 988, "mateo": 1048, "materi": [12, 167, 322, 394, 541, 581, 894, 895, 1011], "matern": [158, 419, 1046, 1050], "mateusz": [1039, 1046, 1047, 1052], "math": [47, 68, 125, 146, 236, 259, 260, 376, 396, 764], "mathbb": [93, 112, 152, 412, 992, 999, 1007], "mathbf": [152, 342, 414, 988, 992, 996, 997, 1006], "mathcal": [201, 345, 414, 416, 627, 696, 984, 986, 988, 992, 1006, 1048], "mathemat": [109, 167, 185, 214, 262, 371, 376, 379, 393, 395, 409, 411, 414, 415, 419, 549, 550, 557, 564, 635, 646, 656, 792, 793, 798, 862, 906, 909, 912, 914, 988, 992, 996, 1002, 1004, 1015, 1017, 1026, 1030, 1049], "matheu": 1041, "mathew": 1050, "mathi": 1048, "mathia": 1049, "mathieu": [0, 22, 46, 98, 188, 198, 219, 234, 260, 350, 398, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "mathrm": [409, 411, 414, 418, 988, 1008], "mathschi": 1047, "mathur": [1042, 1044, 1045, 1050, 1051, 1053], "mathurin": [0, 1046, 1048, 1049], "mathurinm": [1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "matjansen": 1049, "mato": 1047, "matplotlib": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 373, 379, 386, 396, 401, 438, 502, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 987, 1012, 1022, 1023, 1024, 1025, 1026, 1027, 1032, 1044, 1047, 1048, 1049, 1050, 1053], "matric": [32, 37, 38, 78, 80, 93, 202, 244, 245, 247, 248, 249, 283, 296, 316, 322, 329, 350, 351, 371, 373, 381, 382, 391, 392, 393, 409, 410, 411, 412, 414, 417, 418, 424, 450, 451, 453, 464, 473, 481, 482, 483, 484, 526, 534, 535, 538, 540, 541, 544, 547, 549, 550, 555, 556, 563, 566, 581, 582, 589, 643, 646, 647, 652, 653, 658, 664, 672, 674, 687, 754, 760, 768, 774, 778, 779, 780, 781, 792, 797, 798, 830, 848, 851, 856, 867, 871, 873, 876, 879, 881, 882, 884, 887, 889, 891, 893, 894, 895, 896, 897, 906, 907, 909, 910, 920, 941, 947, 956, 963, 965, 966, 982, 984, 986, 989, 990, 991, 993, 995, 996, 1004, 1006, 1007, 1012, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "matrix": [1, 4, 5, 7, 11, 12, 14, 17, 18, 19, 30, 32, 37, 39, 42, 52, 60, 68, 77, 78, 79, 80, 83, 93, 94, 95, 103, 156, 164, 170, 175, 183, 198, 202, 216, 223, 227, 230, 231, 233, 248, 251, 253, 266, 276, 295, 301, 319, 322, 325, 326, 342, 350, 351, 352, 359, 365, 368, 374, 375, 376, 379, 381, 385, 388, 391, 392, 393, 405, 410, 411, 412, 417, 418, 419, 420, 421, 431, 432, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 492, 496, 497, 500, 501, 502, 503, 504, 505, 508, 509, 510, 519, 521, 523, 524, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 608, 609, 611, 620, 629, 630, 631, 633, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 712, 713, 714, 715, 716, 718, 722, 729, 730, 731, 734, 738, 739, 740, 741, 754, 755, 758, 759, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 796, 797, 798, 799, 800, 803, 804, 814, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 873, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 920, 922, 923, 924, 925, 930, 938, 939, 940, 941, 942, 945, 946, 947, 955, 956, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 982, 984, 986, 988, 989, 993, 994, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matrixorz": 1038, "matshow": [18, 19, 64, 117, 144, 301, 502], "matsubara": 992, "matt": [68, 1038, 1039, 1040, 1045, 1046, 1050, 1051], "matteo": [1039, 1041, 1049], "matter": [102, 249, 342, 361, 409, 410, 416, 567, 668, 676, 678, 988, 1039], "matthew": [378, 384, 536, 743, 1035, 1038, 1042, 1044, 1048, 1049], "matthews_corrcoef": [992, 1035, 1041, 1042, 1049], "matthia": [1035, 1037, 1038, 1041, 1042, 1043, 1047, 1050], "matthieu": [0, 398, 1035, 1039, 1050], "matti": [1036, 1039, 1040], "matur": [379, 1012, 1013], "mat\u00e9rn": 619, "mat\u00eda": 1049, "maud": 1038, "mauna": 154, "maura": 1046, "mauroantonioserrano": 1050, "mavani": 1043, "mavroforaki": [1039, 1041], "max": [2, 6, 8, 9, 10, 11, 15, 17, 23, 25, 29, 31, 38, 42, 50, 56, 60, 65, 70, 71, 75, 77, 80, 81, 93, 96, 100, 103, 109, 111, 118, 124, 128, 136, 137, 138, 141, 142, 146, 151, 153, 154, 162, 164, 167, 179, 184, 185, 186, 190, 192, 199, 200, 203, 211, 213, 215, 221, 230, 234, 257, 258, 259, 270, 272, 281, 283, 285, 289, 290, 294, 296, 299, 301, 305, 307, 308, 310, 318, 328, 330, 346, 365, 409, 411, 414, 469, 470, 471, 472, 473, 474, 475, 476, 477, 512, 536, 555, 556, 557, 558, 559, 560, 563, 564, 565, 606, 627, 631, 632, 648, 649, 669, 672, 674, 680, 691, 692, 696, 699, 704, 705, 757, 792, 793, 800, 861, 862, 873, 874, 876, 883, 890, 891, 912, 913, 914, 915, 960, 988, 990, 995, 1002, 1006, 1007, 1014, 1026, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "max_": [409, 992], "max_abs_": 873, "max_abs_scal": 1002, "max_bin": [318, 319, 416, 561, 562, 1052], "max_categori": [311, 319, 321, 877, 878, 1002, 1049, 1051], "max_cluster_s": 446, "max_column": 215, "max_degre": [879, 1048], "max_depth": [5, 29, 110, 111, 114, 118, 119, 120, 121, 122, 123, 124, 128, 129, 131, 161, 219, 256, 271, 278, 317, 318, 355, 357, 358, 359, 392, 393, 408, 416, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 711, 803, 804, 828, 912, 913, 914, 915, 916, 917, 918, 981, 999, 1008, 1044, 1046], "max_df": [13, 260, 329, 350, 351, 588, 591, 1046, 1053], "max_dist": 230, "max_doc_update_it": 536, "max_ep": [409, 450, 455, 456, 457], "max_error": [992, 1044], "max_estim": 113, "max_featur": [13, 29, 113, 124, 235, 256, 271, 317, 416, 418, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 588, 591, 597, 912, 913, 914, 915, 981, 988, 1035, 1037, 1038, 1042, 1043, 1046, 1049, 1052], "max_features_": [559, 560, 597, 912, 913, 914, 915, 1049], "max_fpr": [788, 992, 1043], "max_fun": [861, 862, 1045], "max_i": [234, 994], "max_idf": 1048, "max_it": [2, 6, 11, 13, 15, 23, 25, 28, 29, 70, 71, 93, 96, 114, 115, 119, 125, 132, 136, 137, 158, 161, 162, 167, 168, 176, 183, 189, 190, 204, 205, 206, 209, 210, 212, 218, 219, 220, 221, 223, 237, 238, 243, 244, 245, 246, 249, 272, 293, 299, 300, 301, 311, 317, 318, 319, 325, 326, 335, 350, 351, 385, 393, 416, 421, 440, 443, 447, 448, 449, 454, 459, 461, 471, 472, 478, 482, 483, 484, 531, 532, 533, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 561, 562, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 693, 694, 797, 798, 814, 853, 861, 862, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 982, 984, 988, 995, 996, 1005, 1006, 1024, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "max_iter": 326, "max_iter_list": 125, "max_iter_predict": 610, "max_j": [646, 652], "max_leaf_nod": [109, 115, 124, 197, 318, 359, 416, 557, 558, 559, 560, 561, 562, 564, 565, 566, 912, 913, 914, 915, 1038, 1044, 1046], "max_n": [588, 589, 591, 1035], "max_n_alpha": [651, 655], "max_nbyt": 958, "max_no_improv": [40, 59, 62, 449, 537, 538, 539, 546, 1049, 1050], "max_patch": [48, 417, 583, 584, 1043], "max_resourc": [122, 803, 804, 981], "max_resources_": [803, 804], "max_sampl": [126, 161, 416, 555, 556, 557, 558, 563, 564, 565, 634, 1045, 1048, 1051], "max_samples_": 563, "max_skip": 671, "max_subpopul": [214, 679, 1049], "max_thread": [366, 380], "max_train_s": [2, 11, 413, 821, 1042], "max_trial": [671, 988], "max_val": 928, "max_valu": [627, 1046, 1047], "max_x": 234, "maxabs_scal": [393, 873, 1043], "maxabsscal": [367, 404, 868, 889, 982, 1002, 1040, 1043, 1044, 1045, 1046, 1051, 1052], "maxent": [658, 659, 988], "maxent_du": 658, "maxi": 1050, "maxim": [83, 84, 88, 93, 103, 122, 176, 248, 249, 253, 260, 264, 268, 269, 273, 293, 310, 317, 338, 342, 355, 359, 376, 393, 405, 408, 409, 412, 414, 416, 418, 419, 549, 594, 610, 611, 644, 645, 648, 669, 679, 680, 720, 800, 803, 804, 814, 873, 879, 889, 986, 988, 991, 992, 995, 997, 1007, 1023, 1026, 1038, 1040, 1045, 1048, 1050, 1053], "maxima": 409, "maximesaur": [1050, 1051], "maximis": [136, 244, 291, 986, 995], "maximum": [2, 6, 9, 25, 31, 35, 55, 76, 77, 78, 79, 80, 89, 95, 109, 111, 114, 115, 118, 121, 125, 150, 152, 156, 164, 175, 185, 216, 236, 253, 269, 285, 289, 290, 296, 305, 333, 334, 336, 337, 340, 342, 348, 351, 355, 357, 358, 365, 374, 384, 385, 392, 393, 405, 406, 409, 411, 412, 414, 416, 417, 419, 420, 421, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 454, 457, 459, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 483, 484, 498, 509, 511, 512, 513, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 597, 610, 627, 631, 632, 635, 637, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 716, 744, 781, 797, 800, 803, 804, 806, 814, 821, 828, 853, 860, 861, 862, 868, 869, 873, 874, 876, 879, 880, 881, 883, 892, 893, 898, 899, 900, 901, 904, 905, 909, 912, 913, 914, 915, 916, 918, 921, 928, 981, 987, 988, 989, 991, 992, 994, 995, 996, 998, 1002, 1006, 1007, 1008, 1014, 1027, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "maxin": [1045, 1046], "maxsiz": 617, "maxval": [511, 513], "maxwel": [0, 369, 1045, 1048, 1049, 1050, 1051], "maxwelllzh": 1050, "may_share_memori": 1052, "mayb": [72, 301, 393, 417, 1007, 1013], "mayer": [416, 1047, 1049, 1052], "mayer2022": 416, "mayilvahanan": 409, "mayorov": [1038, 1039, 1040, 1041], "mayur": 1043, "mazari": 1043, "mb": [6, 14, 20, 26, 33, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 230, 241, 250, 253, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 350, 352, 353, 360, 374, 385, 496, 906, 907, 908, 909, 910, 1007, 1014, 1031], "mbilling": 1040, "mbillingr": 1045, "mbk": [40, 62], "mbk_means_cluster_cent": 62, "mbk_means_label": 62, "mbk_means_labels_uniqu": 40, "mblondel": [22, 46, 188, 219, 260, 350, 373, 508], "mbnmf": 13, "mc4229": 1046, "mc_clf": 999, "mcar": 125, "mcc": [743, 992, 1049], "mccall": 68, "mccallum": [839, 994], "mccarthi": [1035, 1043], "mcclish": [268, 788], "mcconaghi": 1017, "mccullagh": 988, "mcculloh": [1040, 1041], "mcd": [10, 78, 79, 411, 469, 474], "mcdermott": [1037, 1052], "mcdonald": 10, "mcdowel": 1043, "mcfadden": 992, "mcfee": [1040, 1041], "mcgibbon": [70, 1037, 1038, 1041], "mcgushion": 1044, "mcinn": [409, 1041, 1042, 1043, 1045, 1046, 1051], "mcivor": [1050, 1051], "mcm": [754, 992], "mcm_": 754, "mcmahon": 1052, "mcsherri": [726, 756, 992], "mctiernan": [1049, 1050], "mcve": [384, 391], "md": [218, 219, 220, 221, 383, 688, 692, 694, 1029, 1030, 1035, 1047, 1050], "md5": 1047, "md5_checksum": 373, "md_scale": 218, "mdarii": 1051, "mdbecker": 1017, "mdi": [115, 116, 123, 164, 165, 170, 171, 416, 464, 496, 564, 630, 634, 830, 864, 878, 1000, 1014], "mdi_import": [169, 170], "mds_result": 694, "me": 350, "me1": 278, "me2": 278, "me3": 278, "mea": 56, "mean": [2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 22, 23, 25, 32, 34, 35, 36, 38, 40, 42, 44, 47, 48, 51, 52, 53, 58, 66, 69, 77, 78, 79, 80, 84, 88, 90, 93, 96, 97, 98, 99, 100, 109, 111, 112, 115, 118, 119, 122, 123, 125, 130, 131, 132, 145, 146, 149, 154, 156, 158, 161, 164, 167, 168, 177, 179, 186, 188, 190, 193, 194, 197, 199, 203, 204, 206, 212, 213, 214, 215, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 243, 244, 245, 246, 248, 249, 253, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 281, 283, 294, 305, 308, 310, 311, 312, 315, 318, 321, 328, 338, 341, 342, 345, 347, 349, 350, 352, 353, 361, 365, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 399, 405, 406, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 432, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 501, 502, 504, 506, 512, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 588, 589, 590, 591, 594, 597, 602, 606, 607, 608, 609, 610, 611, 613, 622, 627, 628, 630, 632, 633, 634, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 707, 709, 712, 713, 716, 717, 724, 726, 729, 730, 731, 736, 737, 738, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 774, 778, 779, 781, 783, 784, 785, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 800, 803, 804, 806, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 869, 873, 874, 876, 880, 882, 884, 885, 890, 892, 893, 895, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 920, 924, 925, 927, 966, 967, 973, 977, 981, 982, 983, 986, 988, 989, 991, 994, 995, 996, 997, 999, 1000, 1005, 1006, 1007, 1008, 1012, 1014, 1017, 1023, 1026, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mean_": [94, 263, 532, 533, 534, 539, 541, 543, 884, 1002, 1027, 1043], "mean_absolute_error": [11, 197, 199, 215, 404, 992, 1036, 1038, 1054], "mean_absolute_percentage_error": [11, 119, 992, 1047, 1049], "mean_auc": 269, "mean_change_tol": 536, "mean_fit_tim": [115, 285, 800, 814], "mean_fpr": 269, "mean_gamma_devi": [992, 1045], "mean_impute_scor": 162, "mean_l1_ratio": 1038, "mean_pinball_loss": [11, 122, 125, 318, 988, 992, 1048], "mean_pinball_loss_95p": 992, "mean_poisson_devi": [197, 992, 1045], "mean_precis": 257, "mean_precision_": 797, "mean_precision_prior": [243, 249, 797], "mean_precision_prior_": 797, "mean_predict": [11, 156], "mean_predictions_gpr": 149, "mean_prior": 797, "mean_prior_": 797, "mean_recal": 257, "mean_scor": [70, 268, 271, 351, 1048], "mean_score_tim": [115, 257, 260, 800, 814], "mean_shift": [1040, 1043], "mean_square_error": 1036, "mean_squared_error": [5, 120, 122, 123, 193, 197, 199, 201, 203, 215, 361, 416, 752, 992, 1036, 1038, 1045, 1046, 1052], "mean_squared_log_error": [992, 1042, 1048, 1052], "mean_test_": 263, "mean_test_precis": [257, 263], "mean_test_recal": 257, "mean_test_scor": [69, 70, 71, 80, 115, 136, 145, 248, 258, 259, 260, 267, 270, 271, 285, 338, 472, 594, 800, 814, 981, 1041, 1048], "mean_tim": 1041, "mean_tpr": [268, 269], "mean_train_precis": [800, 814], "mean_train_scor": [800, 814, 1041], "mean_tweedie_devi": [215, 404, 992, 1045, 1054], "mean_variance_axi": [388, 1041, 1048], "mean_y_pr": 154, "meaning": [35, 170, 223, 292, 352, 405, 408, 413, 417, 418, 548, 729, 730, 738, 783, 784, 787, 853, 996, 1006, 1007, 1035, 1051], "meaningfulli": [197, 992], "meaningless": [168, 417, 906, 909, 1038], "means_": [32, 243, 244, 245, 246, 248, 249, 549, 550, 797, 798], "means_init": [245, 246, 798], "meanshift": [42, 319, 409, 440, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "meant": [55, 125, 146, 236, 374, 381, 388, 474, 493, 677, 850, 958, 959, 982, 996, 998, 1002, 1036], "meanwhil": [391, 1007], "measur": [2, 5, 6, 8, 9, 11, 17, 23, 35, 36, 47, 56, 58, 59, 94, 112, 113, 122, 126, 133, 146, 149, 154, 164, 166, 167, 168, 173, 186, 191, 196, 197, 201, 203, 215, 251, 257, 259, 265, 266, 272, 273, 276, 310, 342, 350, 351, 365, 374, 376, 381, 385, 393, 405, 407, 411, 413, 414, 415, 416, 417, 449, 452, 462, 498, 515, 538, 540, 547, 551, 557, 558, 559, 560, 563, 564, 565, 604, 607, 608, 611, 627, 631, 658, 690, 692, 698, 702, 704, 705, 707, 709, 712, 713, 716, 717, 720, 725, 726, 727, 729, 731, 736, 737, 739, 740, 743, 747, 755, 756, 757, 782, 783, 784, 786, 787, 788, 789, 792, 795, 825, 827, 830, 850, 881, 893, 912, 913, 914, 915, 982, 988, 990, 995, 997, 998, 1000, 1006, 1008, 1014, 1023, 1026, 1035, 1038, 1040, 1041, 1043, 1045], "mechan": [37, 233, 346, 350, 366, 379, 381, 402, 406, 409, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 1008, 1017], "mecopur": 1052, "med": [17, 68, 268, 374, 1002, 1028], "meda": [73, 167, 992], "media": [409, 1010, 1017], "median": [2, 11, 35, 69, 73, 78, 79, 122, 161, 162, 167, 199, 203, 214, 228, 236, 305, 316, 318, 319, 374, 411, 416, 418, 440, 454, 458, 461, 474, 552, 554, 558, 565, 597, 627, 630, 635, 670, 671, 679, 721, 753, 851, 882, 894, 913, 915, 982, 1002, 1008, 1038, 1039], "median_absolute_error": [73, 167, 992, 1039, 1045, 1047], "median_predict": 11, "medic": [262, 413, 712, 988, 1017], "medicin": [262, 712, 992], "medina": [1035, 1037], "medinc": [305, 317, 374, 490], "medium": [1, 164, 232, 275, 312, 338, 409, 643, 878, 985, 988], "medoid": 446, "medoids_": 446, "medri": 1038, "meekail": [0, 397, 1049, 1050, 1051, 1052], "meer": [61, 409, 448], "meet": [379, 391, 394, 418, 572, 603, 861, 862, 901, 992, 1005, 1017, 1043, 1044, 1045], "megabyt": 1049, "megasari": 1047, "meghann": [1043, 1045], "mehak": 1042, "mehdi": [1039, 1048], "mehgarg": 1050, "mehmet": [1042, 1048], "mehmetcanakbai": 1050, "mehrdad": 1049, "mehta": [1039, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051], "mehul": 1042, "mei": [1040, 1045], "meier": 1042, "meila": 409, "mein": 417, "meinshausen": 181, "meirel": 1046, "meketon": 1042, "melani": [1017, 1042, 1043], "melderi": 1043, "melemo2": 1049, "meli": [1048, 1049, 1050], "melissa": 1043, "mellon": 899, "melnik": 1050, "melsyt": [1043, 1044], "mem": [14, 20, 26, 33, 52, 66, 74, 81, 85, 91, 104, 106, 134, 139, 147, 159, 163, 171, 174, 216, 224, 241, 250, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 353, 360, 385, 508, 509, 1014], "member": [0, 350, 351, 374, 379, 382, 394, 409, 424, 442, 446, 448, 451, 453, 492, 555, 556, 557, 558, 563, 564, 565, 566, 581, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 717, 731, 736, 737, 757, 786, 795, 800, 904, 988, 995, 1019, 1035, 1047, 1050], "membership": [54, 394, 405, 407, 409, 511, 512, 513, 514, 515, 519, 522, 1007], "memit": 385, "memmap": [366, 374, 393, 414, 508, 534, 1043, 1052], "memoiz": [70, 374, 393], "memor": 169, "memori": [6, 52, 69, 70, 97, 167, 168, 253, 285, 311, 315, 317, 319, 320, 350, 351, 352, 366, 367, 373, 379, 382, 388, 391, 393, 402, 409, 410, 413, 414, 417, 420, 421, 441, 442, 443, 444, 445, 446, 447, 449, 450, 454, 457, 459, 468, 473, 479, 496, 503, 508, 509, 533, 534, 535, 538, 541, 555, 556, 557, 558, 563, 564, 565, 566, 581, 582, 588, 589, 591, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 684, 778, 779, 780, 781, 800, 806, 814, 823, 825, 826, 827, 828, 831, 832, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 864, 865, 882, 884, 894, 895, 897, 902, 904, 905, 912, 913, 914, 915, 925, 961, 977, 988, 994, 995, 1002, 1004, 1005, 1007, 1008, 1013, 1017, 1019, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "memory_profil": [385, 396, 401], "memoryerror": [1043, 1047], "memoryview": 380, "memorywis": 402, "men": 376, "menes": 1050, "meng": [1035, 1036, 1039, 1041, 1042], "menoci": 1053, "menon": 406, "mensch": [212, 213, 1040, 1041, 1042, 1043], "mention": [53, 84, 109, 215, 273, 316, 361, 365, 379, 383, 384, 391, 409, 696, 896, 897, 981, 986, 988, 1013, 1016, 1017, 1028, 1042, 1043, 1044], "menu": 396, "menuet": 1044, "mercer": 984, "mere": [2, 259, 393, 831, 1006], "merg": [37, 39, 44, 49, 318, 377, 379, 382, 387, 391, 394, 409, 440, 441, 442, 445, 446, 463, 820, 1027, 1035, 1042], "merit": [379, 383, 394], "meritocrat": 394, "merritt": 1041, "mersenn": 1046, "merz": 406, "mesfer": 1048, "mesh": [56, 118, 128, 151, 231, 291, 299, 307, 330, 334], "meshgrid": [9, 24, 40, 56, 78, 118, 128, 150, 151, 152, 153, 155, 168, 208, 209, 210, 211, 223, 226, 247, 289, 296, 299, 307, 308, 330, 337, 338, 342, 343, 346, 347, 631], "meshulam": 1038, "meson": [377, 382, 396, 401], "mess": 1049, "messag": [36, 42, 60, 68, 93, 233, 350, 351, 374, 377, 378, 379, 383, 384, 387, 388, 409, 440, 454, 468, 539, 543, 548, 574, 627, 712, 800, 803, 804, 806, 814, 823, 828, 831, 833, 853, 861, 862, 902, 923, 924, 925, 928, 931, 955, 976, 992, 1002, 1035, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "met": [117, 233, 381, 418, 534, 541, 627, 671, 988, 992, 1043], "meta": [54, 68, 108, 133, 134, 164, 197, 264, 268, 273, 277, 279, 281, 321, 322, 355, 358, 361, 373, 377, 381, 383, 391, 393, 399, 404, 406, 418, 419, 429, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 581, 582, 588, 590, 591, 594, 597, 603, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 807, 809, 816, 818, 822, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 952, 981, 993, 1013, 1014, 1015, 1030, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052], "meta_clf_sample_weight": 233, "meta_est": 233, "meta_meta_est": 233, "metaclassifi": [233, 234], "metaclassifierifittedmetaclassifi": 233, "metadata": [6, 54, 107, 157, 164, 178, 225, 241, 253, 351, 368, 373, 374, 402, 423, 426, 429, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 949, 950, 951, 952, 976, 992, 1012, 1013, 1014, 1019, 1030, 1051], "metadata_rout": [233, 407, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "metadatarequest": [233, 423, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 598, 599, 600, 603, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 652, 654, 656, 657, 658, 660, 662, 664, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 949, 951, 1052], "metadatarout": [233, 437, 464, 472, 555, 556, 563, 567, 568, 569, 570, 597, 627, 647, 651, 653, 655, 659, 661, 663, 665, 671, 673, 675, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 863, 864, 951, 1052], "metaestim": [54, 381, 393, 407, 901, 1039, 1048, 1049, 1052], "metaestimatormixin": 233, "metaireau": [1035, 1038], "metal": 404, "metaregressor": 233, "metatransfom": 1040, "meteorologi": 406, "meth_nam": 309, "method": [2, 6, 10, 11, 15, 17, 18, 22, 23, 24, 25, 34, 35, 37, 38, 39, 42, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 63, 65, 66, 67, 70, 74, 77, 78, 82, 84, 85, 90, 93, 96, 98, 101, 102, 103, 107, 109, 114, 116, 117, 123, 130, 141, 142, 146, 161, 173, 184, 186, 198, 205, 214, 217, 219, 221, 222, 223, 224, 226, 230, 232, 233, 234, 236, 240, 242, 245, 250, 253, 261, 264, 265, 266, 267, 268, 273, 278, 283, 289, 290, 292, 305, 309, 312, 315, 317, 318, 341, 350, 351, 352, 359, 361, 365, 366, 367, 368, 371, 376, 377, 379, 380, 381, 385, 386, 388, 391, 392, 395, 399, 402, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 504, 512, 514, 522, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 710, 711, 722, 731, 732, 735, 736, 741, 742, 763, 768, 769, 774, 778, 783, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 927, 941, 948, 949, 950, 951, 952, 953, 958, 961, 976, 977, 980, 981, 982, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1017, 1019, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "method_map": [233, 949], "method_max_it": [545, 546, 1045], "method_nam": [233, 949, 952], "methodmap": [233, 949], "methodmetadatarequest": 948, "methodol": 1002, "methodolog": [413, 1016], "methodologi": [541, 877, 982, 992, 1017], "methodpair": 950, "metric": [2, 4, 5, 9, 11, 17, 18, 19, 22, 23, 24, 28, 30, 34, 36, 40, 42, 45, 46, 47, 50, 56, 58, 60, 62, 66, 68, 73, 80, 109, 114, 120, 121, 123, 124, 125, 130, 143, 146, 150, 161, 164, 166, 167, 169, 181, 186, 192, 193, 197, 199, 201, 203, 215, 221, 227, 230, 231, 236, 239, 251, 252, 255, 256, 257, 259, 260, 262, 266, 268, 269, 270, 273, 276, 281, 283, 285, 293, 296, 302, 305, 310, 315, 316, 318, 319, 320, 321, 322, 325, 326, 328, 329, 350, 351, 361, 365, 368, 371, 374, 379, 381, 391, 392, 393, 395, 399, 403, 406, 408, 414, 415, 416, 419, 420, 426, 437, 441, 444, 445, 446, 450, 454, 455, 456, 457, 462, 469, 520, 535, 549, 550, 551, 553, 555, 557, 558, 559, 561, 562, 564, 565, 567, 569, 578, 602, 610, 620, 628, 631, 634, 638, 639, 640, 641, 642, 643, 658, 659, 663, 666, 668, 674, 675, 676, 688, 690, 692, 694, 696, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 829, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 870, 876, 899, 900, 904, 906, 909, 912, 914, 982, 984, 987, 989, 993, 995, 998, 1000, 1012, 1013, 1014, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1054], "metric_kwarg": [779, 780], "metric_obj": 699, "metric_param": [420, 444, 446, 450, 455, 456, 457, 688, 692, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 1039, 1042, 1049], "metsi": [839, 994], "metzen": [0, 22, 23, 24, 25, 149, 150, 152, 153, 154, 155, 156, 158, 232, 397, 1035, 1038, 1039, 1040, 1041], "mexican": 102, "meyer89": 1046, "mferrari3": [1043, 1044], "mgrid": [12, 138], "mhg": 1040, "mi": [25, 35, 141, 409, 607, 608, 704, 755, 757, 982, 992, 1006], "mia": 1050, "miao": 1048, "mib": [365, 468, 902], "mic": [885, 1002], "micah": 1045, "micci": [885, 1002], "mice": [373, 627, 982], "miceprotein": 373, "michael": [376, 406, 409, 450, 628, 637, 691, 797, 982, 988, 1017, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052], "michal": [1039, 1042, 1048, 1049], "michali": 409, "michalkrawczyk": [1048, 1049], "micha\u0142": 1046, "micha\u0142owski": 1044, "michel": [0, 45, 65, 398, 1035, 1037, 1038, 1040, 1042, 1049, 1050], "michelbach": 1039, "michiaki": 1041, "micka\u00ebl": [1043, 1044], "micky774": [1049, 1050], "micro": [8, 296, 329, 365, 707, 713, 729, 730, 738, 783, 784, 787, 788, 992, 1035, 1043, 1044, 1050, 1053], "micro_roc_auc_ovr": 268, "microarrai": [405, 451, 513, 628, 982], "microcontrol": 1012, "microml": 1012, "micromlgen": 1012, "microphon": 94, "microryzomi": [9, 296, 374, 498], "microryzomys_minutu": 498, "microryzomys_minutus_0": 9, "microsoft": [0, 10, 377, 380, 396], "mid": [24, 338, 992, 994], "middl": [2, 22, 32, 58, 98, 181, 346, 376, 999, 1002], "mideast": [17, 374], "midina": 1042, "midnight": 2, "midpoint": 338, "midpointnorm": 338, "midvidi": 1048, "midwest": [146, 376], "might": [0, 2, 3, 11, 29, 40, 42, 58, 60, 68, 118, 125, 128, 143, 155, 162, 167, 168, 169, 173, 197, 215, 226, 253, 259, 261, 273, 286, 300, 317, 342, 347, 361, 365, 366, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 396, 402, 406, 408, 410, 413, 414, 415, 416, 417, 419, 434, 443, 488, 496, 501, 503, 508, 515, 523, 536, 555, 556, 557, 561, 562, 564, 579, 580, 582, 610, 611, 627, 650, 654, 655, 656, 658, 659, 676, 678, 692, 757, 794, 803, 804, 828, 853, 869, 884, 897, 916, 918, 920, 924, 925, 941, 961, 981, 982, 984, 986, 988, 989, 991, 992, 994, 995, 999, 1000, 1002, 1007, 1008, 1028, 1036, 1038, 1043, 1044, 1046, 1049, 1050, 1051, 1052], "mignon": [1035, 1038, 1039, 1042], "migrat": [379, 1035], "miguel": [1045, 1053], "miguelbarao": 1045, "mihael": [409, 450, 457], "mihevc": 1045, "mike": 1042, "mikebenfield": 1042, "miketip": [534, 541], "mikhail": [1036, 1037, 1038, 1041, 1042, 1050, 1051], "miki": 1052, "mikulski": 1046, "milajev": 1039, "milan": 1047, "milana2": 1049, "mileag": 365, "milen": 1042, "mileston": 383, "militari": 68, "mill": 1045, "millawel": 1049, "miller": [374, 1043, 1044, 1048], "million": [40, 54, 154, 173, 417, 692, 989, 1007, 1017, 1049, 1050], "millman": [0, 398, 1044, 1051, 1052], "milman": 1043, "miln": 374, "miltenberg": 1050, "milton": 1052, "milutinov": 1044, "mimic": [161, 197, 350, 818], "mimicri": 350, "min": [2, 8, 9, 10, 11, 12, 23, 25, 29, 50, 56, 73, 93, 96, 109, 111, 118, 121, 122, 128, 138, 146, 151, 153, 154, 155, 162, 167, 179, 185, 186, 192, 199, 200, 203, 219, 230, 231, 234, 281, 289, 290, 296, 299, 301, 305, 307, 308, 310, 330, 346, 388, 409, 412, 414, 482, 483, 485, 512, 534, 535, 538, 540, 541, 549, 550, 563, 627, 631, 632, 654, 655, 656, 657, 682, 683, 704, 757, 780, 803, 804, 853, 861, 862, 874, 883, 890, 941, 957, 983, 988, 992, 995, 1002, 1041, 1044, 1046, 1047, 1050], "min_": [318, 409, 416, 874, 988, 1002, 1006, 1007, 1008], "min_arg": 11, "min_batch_s": 944, "min_bin_freq": [448, 461], "min_c": 994, "min_categori": [840, 1047], "min_cluster_s": [42, 63, 321, 409, 446, 450, 456, 1044], "min_degre": [879, 1048], "min_df": [13, 17, 68, 260, 329, 350, 351, 417, 588, 591, 1035, 1037, 1046, 1053], "min_dist": 230, "min_estim": 113, "min_faces_per_person": [4, 374, 494, 1024], "min_features_to_select": [145, 594, 1043], "min_frequ": [319, 321, 877, 878, 1002, 1049, 1051], "min_grad_norm": [692, 1041], "min_i": 234, "min_idf": 1048, "min_impurity_decreas": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1008, 1042], "min_impurity_split": 1042, "min_max_axi": 1044, "min_max_scal": 1002, "min_n": [588, 589, 591, 1035], "min_n_compon": 230, "min_po": 388, "min_resourc": [122, 803, 804], "min_resources_": [803, 804], "min_sampl": [42, 47, 63, 391, 393, 409, 420, 444, 446, 450, 455, 456, 457, 671, 988, 1044, 1048], "min_sample_split": 1050, "min_samples_leaf": [115, 121, 122, 169, 315, 318, 355, 416, 557, 558, 559, 560, 561, 562, 564, 565, 566, 912, 913, 914, 915, 1008, 1041], "min_samples_split": [122, 123, 124, 263, 271, 306, 317, 416, 557, 558, 559, 560, 564, 565, 566, 803, 804, 912, 913, 914, 915, 981, 1008, 1041], "min_val": [921, 928], "min_valu": [627, 1046, 1047], "min_w": 988, "min_weight_fraction_leaf": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1008, 1038, 1041, 1042], "min_x": 234, "mina": [1045, 1046], "mincovdet": [78, 79, 411, 469, 470, 473, 475, 476, 998, 1035, 1042], "mind": [98, 125, 166, 167, 168, 215, 309, 310, 350, 351, 361, 379, 402, 411, 413, 416, 646, 647, 704, 988, 1007, 1012, 1019, 1026], "minden": [409, 452, 462], "mine": [0, 259, 351, 374, 409, 420, 444, 511, 563, 720, 734, 740, 783, 988, 992, 998, 1004], "ming": [563, 998, 1039, 1043, 1044, 1045, 1049], "minghui": [1042, 1043], "mingw": 1038, "minh": 1043, "mini": [6, 62, 93, 319, 367, 393, 417, 440, 442, 447, 449, 451, 453, 531, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 996, 997, 1035, 1046, 1048], "mini_batch": [451, 453], "minibatch": [6, 42, 409, 414, 449, 534, 676, 860, 861, 862, 1012, 1035], "minibatch_iter": 6, "minibatch_kmean": 351, "minibatch_s": [6, 367], "minibatchdictionarylearn": [93, 96, 367, 414, 531, 538, 542, 545, 546, 1036, 1038, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "minibatchkmean": [17, 34, 36, 38, 41, 42, 48, 56, 57, 59, 61, 66, 89, 164, 351, 367, 409, 414, 440, 442, 447, 512, 779, 1014, 1036, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "minibatchnmf": [13, 367, 414, 1049, 1051, 1052, 1053], "minibatchsparsepca": [531, 533, 537, 540, 542, 543, 545, 546, 1035, 1036, 1046, 1048, 1049, 1050, 1051, 1052], "miniconda": 396, "miniforg": [377, 387, 396], "miniforge3": [377, 387], "minim": [2, 10, 11, 25, 55, 64, 76, 77, 122, 149, 157, 176, 193, 195, 197, 199, 201, 205, 215, 218, 229, 230, 243, 248, 253, 260, 268, 269, 305, 315, 318, 335, 342, 345, 355, 368, 378, 379, 382, 387, 391, 393, 402, 406, 409, 411, 414, 416, 440, 441, 445, 446, 450, 463, 538, 540, 547, 557, 558, 559, 560, 564, 565, 609, 610, 611, 641, 646, 649, 657, 658, 667, 671, 672, 674, 678, 679, 687, 692, 694, 695, 748, 780, 851, 853, 862, 880, 892, 898, 912, 913, 914, 915, 988, 989, 992, 995, 996, 1002, 1004, 1005, 1006, 1007, 1012, 1015, 1026, 1027, 1030, 1039, 1044, 1045], "minima": [155, 185, 414, 447, 692, 989, 1027, 1043], "minimal_reproduc": 387, "minimalist": [384, 417, 1016], "minimis": [11, 258, 409, 413, 658, 659, 1008], "minimum": [7, 53, 55, 78, 122, 123, 125, 145, 186, 207, 230, 236, 269, 289, 290, 381, 388, 396, 401, 405, 409, 416, 417, 441, 445, 446, 450, 454, 456, 469, 470, 473, 474, 475, 476, 511, 513, 541, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 594, 627, 631, 632, 635, 637, 668, 671, 676, 678, 679, 682, 683, 692, 705, 725, 779, 780, 803, 804, 825, 840, 861, 862, 873, 874, 877, 878, 879, 883, 897, 898, 911, 912, 913, 914, 915, 921, 924, 925, 928, 944, 989, 992, 996, 998, 1002, 1004, 1008, 1035, 1038, 1042, 1043, 1047, 1048, 1052], "minimum_cluster_s": 409, "minka": [100, 541, 988], "minknowski": 1048, "minkowski": [420, 444, 450, 455, 456, 457, 688, 699, 778, 779, 780, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 995, 1035, 1038, 1049, 1050, 1051], "minkowski_dist": [450, 457, 688, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858], "minkowskidist": [699, 1048], "minmax_scal": [302, 305, 874, 1040, 1043], "minmaxscal": [2, 3, 70, 142, 144, 173, 219, 236, 300, 317, 367, 404, 410, 464, 890, 982, 1002, 1037, 1040, 1043, 1045, 1046, 1047, 1051, 1052], "minmaxscalerminmaxscal": 70, "minnesota": 409, "minor": [236, 253, 262, 266, 374, 382, 394, 496, 992, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "minu": [259, 760, 992], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 374, 379, 989, 1011], "minutu": [9, 296, 374, 498], "minval": [511, 513], "minwoo": 1035, "minyushkin": 1041, "miola": 1050, "miott": [1035, 1038], "miotto": 1046, "mir": 417, "miroslav": [1036, 1037, 1040], "mirror": [841, 981], "mirza": 1048, "misa": 1050, "misc": [17, 51, 96, 260, 329, 350, 351, 352, 374, 1027], "misc_featur": 236, "miscalibr": 25, "miscellan": [241, 368, 372, 373, 1014, 1041, 1042, 1049, 1050, 1052, 1053, 1054], "miscfeatur": 130, "misclassif": [5, 109, 253, 342, 796, 1006, 1007, 1008, 1036], "misclassifi": [32, 109, 252, 253, 342, 350, 1007], "misclassification_error": 109, "misdetect": 1052, "mise": 1012, "mish": 417, "mishra": [1047, 1048], "mislabel": [252, 416, 994], "mislead": [35, 116, 117, 123, 167, 380, 395, 416, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1030, 1048], "mismatch": [42, 991, 1044], "misread": 223, "miss": [69, 130, 146, 163, 169, 228, 238, 253, 259, 283, 316, 320, 361, 365, 368, 371, 374, 376, 378, 379, 381, 383, 384, 393, 404, 407, 408, 409, 410, 411, 446, 472, 490, 496, 498, 501, 557, 558, 561, 562, 564, 565, 566, 627, 628, 629, 630, 639, 645, 672, 690, 694, 727, 769, 826, 847, 865, 873, 874, 878, 880, 881, 884, 885, 889, 892, 893, 895, 912, 913, 914, 915, 988, 989, 992, 1012, 1013, 1014, 1015, 1017, 1030, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "missclassif": 109, "missforest": [161, 982], "missing": [125, 416, 627, 628, 630, 1044], "missing_featur": [161, 162], "missing_fract": 125, "missing_fraction_list": 125, "missing_r": 162, "missing_sampl": [161, 162], "missing_valu": [161, 162, 238, 393, 627, 628, 629, 630, 769, 982, 1043, 1044], "missingind": [627, 628, 630, 982, 1043, 1044, 1045, 1049, 1051], "mission": [0, 351, 1017], "misspecifi": 25, "misspel": 417, "mistak": [109, 143, 273, 326, 361, 409, 413, 735, 875, 889, 890, 892, 893, 894, 895, 988, 993], "misti": [2, 168], "mit": [278, 374, 385, 409, 419, 610, 611, 614, 619, 622, 643, 666, 667, 676, 841, 985], "mitar": 1044, "mitig": [25, 53, 125, 169, 312, 366, 367, 989, 1008, 1026, 1027, 1047], "mitra": [1045, 1046, 1050], "mitrov": 1044, "mitzi": [1048, 1049], "miwojc": 1049, "mix": [2, 60, 67, 68, 74, 94, 95, 119, 164, 167, 197, 228, 238, 240, 260, 305, 311, 373, 381, 391, 393, 410, 414, 421, 464, 466, 467, 496, 533, 538, 540, 547, 600, 604, 630, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 800, 814, 830, 864, 877, 878, 884, 885, 956, 963, 966, 988, 997, 1014, 1027, 1047, 1049, 1050], "mixed_encoded_preprocessor": 311, "mixed_pip": 311, "mixed_target": 311, "mixin": [379, 393, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 601, 935, 1037, 1046, 1050], "mixing_": [94, 95, 533, 1027], "mixtur": [5, 7, 32, 42, 53, 55, 63, 90, 152, 162, 185, 245, 246, 250, 270, 288, 293, 296, 322, 368, 374, 375, 393, 409, 414, 415, 419, 623, 800, 1012, 1013, 1014, 1029, 1030, 1035, 1039, 1040, 1041, 1042], "mizil": [23, 25, 406, 437, 439], "mizuki": 1049, "mk": 1008, "mkdir": [6, 385, 387], "mkdtemp": [52, 410], "mkl": [365, 366, 377, 391, 960, 1035], "mkl_num_thread": 366, "mks542": 179, "mksol": 68, "ml": [6, 146, 278, 373, 376, 384, 500, 502, 510, 988, 990, 1012, 1013, 1017], "mlant": 1049, "mlb": [374, 875], "mlc": 376, "mlcomp": 1035, "mld": 6, "mldata": [1035, 1043], "mle": [78, 100, 541, 1043, 1046], "mlewis1729": 1042, "mlflow": 1012, "mlg": 1039, "mlinari\u0107": 1050, "mline": [7, 78, 211, 289, 337, 340], "mlle": [689, 693, 989], "mlliou112": 1042, "mlo": 154, "mlondschien": 1048, "mlop": 1012, "mlp": [164, 168, 237, 298, 300, 303, 496, 571, 830, 861, 862, 996, 1014], "mlp_disp": 237, "mlp_model": 168, "mlp_preprocessor": 168, "mlpclassifi": [29, 124, 137, 164, 298, 299, 301, 303, 367, 502, 504, 514, 522, 571, 860, 862, 874, 993, 996, 1014, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mlpregressor": [2, 168, 237, 367, 860, 861, 996, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mlpregressormlpregressor": 237, "mlxtend": 1012, "mm": 173, "mm_bunch": 9, "mmap_mod": [402, 958], "mmm": 10, "mmse": [77, 411, 422, 475], "mn193": 1052, "mnb": 994, "mnist": [28, 164, 175, 188, 205, 212, 216, 283, 298, 300, 303, 345, 496, 571, 658, 830, 861, 884, 927, 988, 996, 1014], "mnist_10000": 283, "mnist_20000": 283, "mnist_784": [205, 213, 283, 301], "mo": [320, 1046], "mobil": 387, "mock": 1045, "mockdatafram": 1045, "mod": 407, "modal": [226, 474, 943], "mode": [7, 8, 44, 45, 78, 197, 226, 283, 285, 302, 315, 377, 379, 387, 388, 391, 405, 412, 416, 420, 443, 444, 447, 449, 452, 459, 462, 471, 472, 478, 482, 487, 508, 509, 557, 561, 564, 592, 595, 596, 598, 599, 600, 610, 627, 644, 645, 658, 659, 666, 668, 673, 674, 675, 676, 679, 682, 683, 689, 693, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 860, 904, 906, 909, 912, 914, 930, 940, 941, 943, 995, 998, 1012, 1019, 1020, 1027, 1036, 1044, 1049, 1052], "model": [1, 3, 4, 7, 8, 10, 12, 13, 14, 18, 19, 22, 23, 25, 32, 37, 38, 39, 46, 47, 52, 53, 54, 56, 59, 67, 69, 70, 71, 74, 76, 78, 80, 84, 92, 93, 102, 103, 104, 108, 109, 110, 112, 114, 118, 121, 122, 124, 125, 127, 129, 130, 133, 134, 136, 138, 140, 142, 143, 147, 152, 153, 155, 156, 157, 158, 162, 165, 166, 170, 171, 177, 179, 182, 183, 184, 187, 188, 190, 192, 193, 194, 198, 199, 201, 202, 203, 205, 209, 210, 212, 213, 214, 216, 226, 229, 234, 243, 245, 246, 247, 250, 252, 254, 255, 257, 260, 262, 263, 264, 265, 267, 268, 272, 273, 274, 276, 278, 283, 285, 286, 287, 289, 292, 296, 306, 309, 311, 312, 315, 317, 319, 320, 321, 325, 326, 335, 337, 338, 339, 340, 341, 343, 345, 347, 351, 352, 356, 357, 358, 361, 368, 371, 373, 374, 382, 385, 393, 395, 399, 404, 405, 406, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 428, 432, 434, 437, 442, 449, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 496, 498, 500, 501, 502, 503, 509, 522, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 588, 589, 593, 594, 597, 602, 606, 609, 610, 611, 615, 627, 632, 633, 634, 635, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 701, 706, 711, 721, 722, 723, 724, 734, 735, 741, 750, 753, 785, 788, 789, 792, 797, 798, 800, 803, 804, 805, 806, 814, 815, 816, 817, 821, 822, 823, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 849, 850, 851, 853, 855, 860, 861, 862, 864, 865, 867, 869, 871, 876, 877, 879, 880, 881, 883, 884, 885, 889, 890, 892, 893, 894, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 976, 982, 984, 985, 986, 989, 990, 993, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1020, 1022, 1024, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1054], "model_1": 259, "model_1_scor": 259, "model_2": 259, "model_2_scor": 259, "model__estimator__max_depth": 981, "model_coef": 166, "model_color": 344, "model_detail": 118, "model_displai": 114, "model_fixed_threshold": 253, "model_from_prevision_vers": 402, "model_i": 259, "model_i_scor": 259, "model_idx": 236, "model_k": 259, "model_k_scor": 259, "model_l1": 345, "model_l2": 345, "model_nam": [115, 236, 281], "model_no_cf": 312, "model_param": 212, "model_prop": 2, "model_scor": [259, 281], "model_select": [2, 3, 4, 5, 8, 11, 22, 23, 25, 29, 30, 52, 69, 70, 71, 72, 73, 76, 84, 98, 100, 109, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 136, 142, 143, 145, 149, 161, 162, 164, 166, 167, 169, 170, 173, 181, 192, 197, 199, 204, 205, 212, 213, 215, 227, 232, 233, 236, 238, 239, 240, 245, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 285, 286, 287, 291, 292, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 320, 322, 328, 329, 338, 341, 345, 355, 359, 361, 368, 379, 381, 384, 392, 393, 399, 404, 408, 410, 413, 416, 437, 438, 558, 560, 567, 568, 579, 659, 697, 698, 700, 702, 742, 832, 835, 853, 861, 862, 864, 912, 913, 914, 915, 960, 981, 982, 987, 992, 994, 995, 1000, 1002, 1007, 1013, 1014, 1023, 1024, 1028, 1032, 1039, 1041, 1042, 1054], "model_step": 2, "model_titl": 118, "model_with_cf": 312, "moder": [259, 379, 419, 454, 998], "modern": [2, 125, 417, 468, 503, 590, 690, 694, 730, 902, 989, 1012, 1013, 1051], "modif": [379, 412, 416, 417, 446, 1005, 1052, 1053], "modifi": [29, 43, 49, 71, 73, 87, 88, 180, 181, 194, 195, 207, 218, 219, 220, 233, 236, 245, 321, 343, 347, 379, 381, 383, 393, 409, 416, 419, 443, 447, 454, 459, 468, 482, 483, 484, 485, 495, 510, 581, 610, 611, 613, 619, 676, 678, 689, 693, 729, 730, 768, 783, 784, 787, 922, 974, 975, 988, 1005, 1006, 1013, 1025, 1029, 1030, 1035, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "modified_fil": 379, "modified_hub": [5, 676, 1006], "modified_huber_loss": 207, "modified_tol": [689, 693], "modrak": [1050, 1051], "modroiu": 992, "modul": [34, 35, 47, 51, 75, 82, 86, 92, 93, 108, 140, 148, 158, 160, 164, 165, 172, 175, 212, 217, 218, 242, 251, 277, 278, 280, 284, 298, 300, 301, 304, 324, 333, 349, 354, 357, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 393, 395, 396, 402, 406, 407, 409, 412, 416, 417, 418, 420, 444, 503, 535, 579, 580, 659, 933, 981, 986, 988, 990, 992, 993, 996, 998, 999, 1002, 1004, 1006, 1008, 1009, 1017, 1022, 1023, 1028, 1036, 1037, 1038, 1040, 1041, 1045, 1049], "modulo": [417, 1046], "moeller": 1041, "mogavero": 1045, "moham": [1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "mohamedbsh": 1050, "mohammad": [1043, 1044], "mohit": [1049, 1052], "mohn": [1043, 1047], "mohr": 1041, "moin": 1047, "mois\u00e9": 1004, "moitra": [1035, 1036, 1037], "mojca": 1046, "mojdeh": 1052, "mola": [1046, 1052], "molden": 1037, "molecul": 989, "molin": 1050, "molla": [1036, 1037], "molnar": [168, 999], "moment": [365, 414, 419, 440, 615, 623, 861, 862, 956, 996, 997], "momentum": [300, 861, 862, 996], "mon": [2, 125, 168], "mona": [148, 149, 156, 159, 164, 419, 496, 611, 615, 622, 623, 625, 1014], "monaf": 1050, "monei": [0, 215, 1017], "monitor": [120, 181, 205, 382, 393, 553, 554, 559, 560, 561, 562, 996, 1016, 1038, 1043, 1045, 1047], "mono": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "monografia": 988, "monomi": 198, "monotoinc": 316, "monoton": [2, 23, 108, 134, 164, 168, 215, 229, 237, 316, 406, 557, 558, 561, 562, 564, 565, 632, 635, 636, 694, 706, 880, 892, 906, 909, 912, 913, 914, 915, 989, 993, 1002, 1007, 1014, 1042, 1046, 1050, 1052], "monotonic_cst": [125, 127, 316, 318, 322, 416, 557, 558, 561, 562, 564, 565, 912, 913, 914, 915, 1050, 1053], "mont": [231, 419, 611, 641, 642, 984, 997], "montecchio": 1039, "montesel": 1053, "month": [0, 2, 154, 168, 311, 374, 379, 383, 394, 1035], "month_co": 2, "month_sin": 2, "monthli": [154, 394, 992], "montoya": 1042, "montreal": 320, "moodi": 1040, "moon": [259, 300, 307, 350, 351, 522], "moonkyung94": 1049, "moor": [0, 735, 992, 1017, 1052], "moosmann": 566, "moradizadeh": 1049, "moral": [17, 69, 350, 658, 1043, 1047, 1048], "morawiec": [1042, 1043], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "moreau": [1041, 1042, 1043, 1044, 1045], "moreov": [136, 155, 307, 319, 361, 383, 409, 413, 419, 897, 962, 992, 1000, 1017, 1043, 1049, 1050], "moreyra": 1048, "morgan": [1004, 1008, 1010], "mori": 1050, "morikko": 1042, "morina": 1048, "moritz": [1048, 1050], "morn": 2, "moroz": 1041, "morril": 1035, "mors": 1046, "mortem": 1028, "moslei": 992, "mosley2013": 992, "mosold": 130, "most": [2, 4, 6, 10, 12, 17, 22, 25, 50, 51, 53, 60, 76, 83, 84, 101, 109, 115, 116, 123, 125, 130, 141, 142, 143, 145, 146, 154, 162, 166, 167, 168, 169, 170, 173, 181, 197, 198, 215, 233, 237, 243, 249, 253, 256, 257, 262, 266, 267, 269, 273, 278, 281, 292, 305, 311, 312, 315, 318, 321, 326, 338, 342, 350, 351, 352, 361, 365, 366, 367, 374, 375, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 396, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 443, 444, 446, 450, 456, 457, 460, 468, 496, 503, 521, 524, 532, 534, 539, 543, 549, 551, 561, 562, 566, 567, 588, 589, 591, 593, 604, 611, 627, 630, 649, 658, 672, 674, 676, 678, 687, 688, 692, 695, 725, 728, 746, 758, 759, 763, 785, 794, 797, 798, 803, 804, 819, 832, 833, 846, 847, 848, 850, 852, 853, 854, 855, 856, 879, 881, 889, 890, 892, 893, 894, 895, 902, 940, 941, 943, 955, 960, 981, 982, 986, 987, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1000, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1017, 1024, 1026, 1027, 1028, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052], "most_common": 17, "most_frequ": [262, 551, 627, 630, 854, 982, 992, 1043, 1045, 1047], "mostli": [0, 44, 68, 197, 215, 310, 387, 391, 393, 414, 416, 417, 521, 779, 780, 1007, 1012, 1017, 1043, 1044, 1045, 1051], "mother": 989, "motiv": [102, 379, 381, 393, 984, 992, 1002, 1017, 1048], "motmoti": 1045, "motoda": 409, "motor": 215, "motorcycl": [17, 374], "mottl": [1043, 1044], "moudgalya": [1051, 1052], "moufad": 1050, "moulavi": [409, 446], "mount": 387, "mountain": 1043, "mountford": [1051, 1052], "mous": 373, "mouseid": 373, "moussa": 1041, "move": [25, 118, 260, 302, 338, 378, 379, 383, 385, 406, 409, 549, 550, 571, 572, 573, 575, 577, 578, 959, 1027, 1035, 1036, 1040, 1043, 1045, 1048, 1049], "moveabl": 410, "movelikeriv": 1044, "movement": 374, "movi": [417, 1020], "movie_entri": 417, "movie_review": 1028, "moya": 1047, "mp": 988, "mpce": 17, "mpl": [32, 243, 244, 245, 249, 305], "mpl_toolkit": [9, 43, 65, 88, 99, 168, 194, 218, 220, 296], "mplot3d": [43, 65, 88, 99, 168, 194, 218, 220], "mpoemsl": 1049, "mppca": [534, 541], "mprun": 385, "mpy": 417, "mr": [55, 320, 1036, 1039, 1049], "mrandrewandrad": 1041, "mrastgoo": [1050, 1052], "mrg": [379, 387], "mridul": 1041, "mrinal": 1049, "mrinaltyagi": 1049, "mrl09": 414, "mrmjauh": 1042, "mro": [381, 426, 432, 1045, 1046], "mrs2008": 590, "msabati": 1049, "msc": 376, "mschaffenroth": 1045, "mse": [3, 5, 76, 77, 120, 122, 123, 161, 162, 197, 199, 201, 203, 274, 322, 647, 653, 750, 992, 1008, 1046, 1048], "mse_path_": [186, 647, 651, 653, 655, 661, 663], "mse_valu": 5, "mses_california": 162, "mses_diabet": 162, "msft": 10, "msg": [283, 976], "msle": [751, 992], "msm": [146, 376], "mssubclass": 130, "mst": 409, "msvc": 1038, "msvcp140": 1049, "mt19937": [266, 271, 927, 1046], "mthorrel": [1042, 1045], "mtrand": 361, "mtse": 679, "mu": [13, 78, 79, 259, 414, 422, 473, 475, 476, 479, 480, 481, 540, 547, 986, 988, 1042, 1045], "mu_i": 994, "mu_j": 409, "mu_k": 986, "muayyad": 1043, "much": [2, 4, 5, 7, 11, 17, 23, 38, 53, 78, 80, 90, 96, 102, 114, 122, 123, 130, 131, 132, 149, 161, 162, 167, 168, 169, 170, 173, 194, 195, 199, 230, 233, 236, 253, 259, 261, 262, 265, 270, 301, 306, 310, 311, 312, 317, 318, 320, 338, 343, 350, 351, 361, 365, 366, 367, 374, 379, 380, 381, 384, 387, 391, 392, 396, 402, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 447, 448, 496, 534, 535, 536, 538, 559, 560, 561, 562, 658, 659, 666, 667, 668, 676, 677, 678, 692, 779, 780, 803, 804, 818, 879, 897, 904, 981, 984, 987, 988, 989, 991, 992, 993, 995, 996, 998, 1000, 1004, 1005, 1007, 1008, 1013, 1017, 1023, 1024, 1026, 1027, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "mudd": 1048, "mueller": [0, 72, 98, 113, 188, 231, 327, 345, 346, 397, 1017, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "muhammad": [1043, 1044, 1048], "mukherje": 1046, "mula": 1047, "multi": [9, 29, 48, 89, 108, 110, 112, 113, 118, 120, 128, 131, 133, 134, 138, 141, 151, 153, 164, 175, 181, 183, 184, 185, 186, 189, 196, 204, 207, 210, 213, 216, 217, 220, 224, 225, 226, 234, 237, 241, 251, 256, 268, 270, 276, 281, 298, 300, 303, 306, 307, 308, 315, 320, 330, 334, 343, 347, 350, 354, 355, 356, 357, 359, 360, 366, 374, 376, 381, 382, 388, 393, 396, 409, 416, 417, 419, 426, 437, 452, 462, 469, 474, 495, 496, 504, 505, 510, 514, 515, 519, 520, 522, 541, 549, 550, 551, 553, 555, 557, 558, 559, 561, 564, 565, 567, 569, 610, 631, 633, 643, 646, 647, 652, 653, 657, 658, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 681, 684, 690, 703, 713, 720, 734, 740, 742, 783, 799, 800, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 852, 854, 860, 861, 862, 865, 871, 884, 888, 899, 900, 904, 906, 909, 912, 913, 914, 916, 917, 918, 924, 927, 930, 981, 993, 995, 999, 1002, 1006, 1012, 1013, 1014, 1015, 1019, 1025, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "multi_class": [189, 268, 315, 610, 658, 659, 788, 904, 988, 993, 1007, 1035, 1039, 1043, 1048, 1050, 1053], "multi_confus": 754, "multi_layer_regressor": 416, "multi_output": [388, 924], "multi_target_forest": 993, "multialign": 271, "multiarch": 387, "multiclass": [24, 28, 115, 175, 189, 213, 216, 227, 234, 236, 239, 251, 256, 264, 266, 269, 276, 279, 281, 302, 335, 346, 355, 368, 374, 375, 381, 382, 384, 393, 399, 409, 416, 437, 452, 462, 489, 496, 504, 557, 559, 561, 564, 567, 568, 571, 594, 602, 610, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 702, 706, 708, 729, 730, 734, 735, 738, 743, 754, 783, 784, 787, 788, 789, 794, 800, 801, 803, 804, 805, 806, 814, 816, 818, 823, 824, 825, 826, 827, 828, 829, 830, 831, 871, 885, 904, 906, 909, 912, 914, 986, 988, 1002, 1003, 1007, 1008, 1014, 1015, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1052], "multicollinear": [116, 117, 164, 165, 169, 171, 265, 328, 412, 500, 564, 634, 655, 830, 988, 1000, 1014], "multicor": [1047, 1048], "multidimension": [412, 688, 690, 692, 694, 989, 995], "multigrid": 462, "multiindex": 1049, "multilabel": [83, 86, 91, 164, 225, 241, 266, 278, 280, 282, 374, 381, 382, 393, 403, 482, 487, 496, 497, 508, 509, 515, 523, 541, 557, 564, 567, 658, 674, 675, 703, 707, 713, 726, 729, 730, 734, 735, 738, 739, 754, 756, 783, 784, 787, 788, 794, 796, 830, 833, 835, 837, 861, 868, 871, 875, 877, 888, 909, 912, 914, 930, 954, 955, 956, 1003, 1014, 1015, 1028, 1030, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "multilabel_": [833, 1040], "multilabel_confusion_matrix": [713, 729, 730, 738, 784, 787, 992, 1044], "multilabelbinar": [393, 833, 868, 877, 993, 1019, 1038, 1040, 1041, 1043, 1044], "multilay": [391, 990], "multilearn": 1012, "multimetr": [981, 1045, 1050], "multimetric_": [800, 803, 804, 814], "multimod": 226, "multinomi": [6, 28, 164, 175, 188, 206, 212, 216, 234, 254, 268, 281, 301, 345, 346, 374, 375, 379, 414, 416, 496, 512, 523, 551, 553, 559, 561, 631, 658, 659, 741, 830, 833, 839, 840, 841, 842, 843, 884, 927, 992, 1008, 1014, 1015, 1028, 1030, 1035, 1039, 1041, 1042, 1043, 1048, 1049, 1053], "multinomialdevi": 1046, "multinomialhmm": 1035, "multinomialnb": [6, 367, 374, 417, 839, 840, 841, 842, 994, 1028, 1037, 1039, 1042, 1043, 1047, 1048, 1050], "multiouput": 1045, "multioutput": [129, 268, 281, 282, 368, 381, 393, 399, 432, 465, 482, 483, 484, 551, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 788, 790, 791, 825, 833, 847, 855, 862, 871, 905, 907, 910, 912, 913, 914, 915, 930, 955, 956, 992, 1014, 1015, 1030, 1035, 1036, 1037, 1041, 1042, 1048, 1049], "multioutput_arrai": 379, "multioutput_onli": 381, "multioutputclassifi": [399, 788, 833, 835, 837, 992, 1042, 1044, 1045, 1046, 1047, 1051, 1052], "multioutputregressor": [129, 399, 432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 836, 838, 847, 855, 862, 905, 907, 910, 913, 915, 1041, 1042, 1044, 1046, 1047, 1051, 1052], "multipl": [11, 44, 67, 70, 74, 90, 102, 109, 115, 117, 118, 120, 142, 164, 167, 173, 191, 231, 253, 259, 264, 265, 267, 271, 278, 281, 285, 315, 321, 341, 365, 366, 367, 373, 375, 376, 379, 381, 382, 383, 384, 391, 393, 402, 407, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 444, 460, 464, 466, 467, 469, 474, 488, 491, 492, 495, 496, 497, 503, 504, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 581, 599, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 666, 667, 668, 671, 673, 676, 678, 679, 689, 690, 692, 693, 694, 711, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 788, 790, 791, 793, 797, 798, 800, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 834, 835, 836, 837, 838, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 866, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 920, 935, 940, 941, 963, 966, 984, 987, 988, 989, 993, 994, 995, 999, 1000, 1005, 1006, 1008, 1012, 1013, 1014, 1019, 1028, 1035, 1036, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "multipleloc": [218, 288], "multiplex": 1008, "multipli": [167, 201, 215, 259, 365, 388, 393, 414, 416, 417, 422, 464, 475, 515, 538, 540, 541, 547, 557, 561, 564, 646, 648, 652, 654, 658, 659, 660, 662, 668, 669, 670, 672, 676, 677, 678, 680, 686, 687, 689, 693, 764, 906, 909, 912, 914, 930, 968, 969, 970, 981, 984, 988, 992, 1006, 1046], "multiprocess": [391, 393, 958, 960, 995, 1035, 1043, 1049], "multirespons": 988, "multiscal": 462, "multisurfac": [146, 376], "multitarget": 388, "multitask": [281, 417, 993], "multitaskelasticnet": [646, 647, 652, 661, 662, 663, 681, 988, 993, 1035, 1042, 1043, 1046, 1048], "multitaskelasticnetcv": [399, 646, 647, 652, 660, 662, 663, 681, 988, 993, 1038, 1045, 1046, 1048, 1052], "multitasklasso": [191, 652, 660, 663, 988, 993, 1035, 1043, 1046, 1048], "multitasklassocv": [399, 661, 662, 993, 1038, 1045, 1046, 1048, 1052], "multithread": [365, 409, 778, 904, 905, 906, 907, 908, 909, 910], "multivari": [93, 167, 371, 411, 414, 417, 473, 516, 517, 518, 627, 628, 629, 630, 649, 671, 678, 679, 839, 840, 841, 842, 843, 986, 988, 991, 994, 1012, 1019, 1027, 1030], "multivariate_norm": [80, 84, 243, 422, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "multiwai": 1008, "muma": 79, "mungui": 1048, "munoz": [1041, 1047], "muoki": 1047, "murad": 1038, "murashkin": 1039, "murata": [1048, 1049], "murder": 350, "murezzda": 1051, "murmurhash": 388, "murmurhash3": [417, 582, 589, 957], "murmurhash3_32": 388, "murmurhash3_x86_32": [388, 957], "murphi": [406, 643, 985], "murrai": [1041, 1042], "music": 1017, "must": [53, 167, 168, 170, 178, 181, 214, 215, 226, 237, 254, 289, 306, 311, 350, 361, 374, 378, 379, 380, 381, 383, 385, 387, 393, 394, 399, 404, 406, 409, 410, 413, 414, 416, 417, 418, 419, 420, 430, 438, 441, 444, 445, 446, 447, 449, 450, 451, 455, 457, 459, 461, 462, 464, 466, 467, 469, 474, 487, 508, 509, 512, 523, 531, 537, 538, 539, 540, 541, 543, 544, 547, 553, 554, 559, 560, 561, 562, 567, 568, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 638, 642, 643, 648, 649, 652, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 699, 703, 706, 709, 735, 746, 764, 771, 774, 778, 781, 788, 792, 793, 794, 796, 797, 798, 800, 801, 803, 804, 805, 807, 809, 810, 812, 814, 815, 816, 818, 819, 821, 825, 828, 830, 831, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 861, 862, 864, 867, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 888, 904, 905, 906, 907, 908, 909, 910, 911, 917, 960, 967, 976, 978, 981, 982, 988, 989, 990, 992, 995, 996, 998, 999, 1006, 1007, 1008, 1019, 1028, 1035, 1038, 1042, 1046, 1048, 1049, 1052], "mutat": [361, 1043], "mutual": [35, 36, 47, 53, 56, 140, 142, 147, 164, 393, 416, 418, 446, 592, 595, 596, 599, 600, 606, 607, 608, 609, 704, 705, 715, 755, 757, 786, 795, 981, 988, 992, 993, 1014, 1035, 1041, 1051], "mutual_info_classif": [70, 418, 592, 595, 596, 599, 600, 1041, 1047, 1050, 1053], "mutual_info_regress": [141, 319, 418, 592, 595, 596, 599, 600, 609, 1041, 1042, 1047, 1049, 1050, 1051, 1053], "mutual_info_scor": [35, 409, 704, 992, 1043, 1046, 1047], "mu\u00f1oz": [1048, 1050], "mwestt": 1044, "my": [373, 379, 384, 387, 496], "my_custom_loss_func": 992, "my_data": 384, "my_dataset": 487, "my_estim": [381, 410], "my_extra_param": 381, "my_featur": 379, "my_fil": 385, "my_func": [380, 385], "my_g": [421, 533], "my_group": [233, 399], "my_kernel": [334, 1007], "my_memb": [59, 61, 62], "my_other_weight": [233, 399], "my_pipelin": 1044, "my_script": 366, "my_test_script": 387, "my_token": 417, "my_weight": [233, 399], "myatt": [1044, 1045], "mycach": [508, 509], "mycluster": 427, "myer": [1038, 1042], "myestim": [381, 423, 425, 426, 428, 429, 430, 431, 432], "myestimator0": 425, "myestimator1": 425, "mymultioutputestim": 381, "mypi": [379, 383, 396, 401, 1046], "myself": 379, "mysvmlightfil": 508, "mytransform": [381, 433], "m\u00e9hault": [1043, 1044], "m\u00f6rtberg": 1041, "m\u00fcller": [0, 29, 306, 307, 394, 414, 535, 870, 996, 1002, 1006, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "n": [2, 3, 5, 6, 8, 9, 13, 15, 17, 30, 31, 35, 37, 38, 56, 68, 73, 78, 83, 90, 93, 96, 98, 100, 102, 103, 109, 111, 112, 116, 132, 141, 144, 146, 149, 153, 158, 168, 170, 177, 181, 193, 197, 198, 201, 212, 214, 215, 218, 229, 230, 231, 234, 243, 245, 246, 257, 259, 262, 264, 265, 266, 268, 269, 283, 286, 288, 302, 307, 309, 310, 317, 320, 322, 326, 332, 342, 345, 359, 365, 373, 376, 377, 379, 383, 385, 388, 393, 396, 399, 405, 406, 409, 412, 413, 414, 415, 416, 417, 419, 420, 444, 445, 447, 448, 450, 469, 471, 474, 478, 489, 515, 516, 517, 518, 523, 528, 538, 540, 541, 547, 557, 558, 559, 560, 563, 564, 565, 566, 588, 589, 590, 591, 607, 608, 614, 627, 649, 671, 679, 692, 696, 699, 706, 707, 755, 805, 808, 810, 815, 816, 819, 840, 844, 845, 849, 869, 896, 898, 912, 913, 914, 915, 921, 939, 944, 945, 967, 971, 972, 981, 984, 986, 988, 989, 992, 993, 994, 995, 996, 998, 999, 1002, 1004, 1006, 1007, 1008, 1019, 1026, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "n1": 96, "n2": 96, "n4": 96, "n_": [78, 79, 170, 259, 318, 409, 414, 416, 646, 652, 685, 696, 984, 988, 992, 994, 995, 999, 1002, 1004, 1007, 1008], "n_alpha": [202, 472, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 673, 675, 681, 682, 683, 684, 1038], "n_atom": 1036, "n_averag": 31, "n_bar": 162, "n_batch_iter_": 536, "n_best": 451, "n_bin": [22, 23, 25, 51, 197, 215, 306, 308, 312, 438, 439, 869, 1002], "n_bins_": 869, "n_bootstrap": [262, 1036], "n_bulk_repeat": 8, "n_byte": 230, "n_c": [409, 659], "n_call": [844, 845], "n_candid": [803, 804, 981], "n_candidates_": [271, 803, 804, 981], "n_candidates_0": 981, "n_candidates_i": 981, "n_categori": [312, 840, 878, 1002], "n_categorical_featur": [119, 561, 562, 632, 633], "n_categories_": 840, "n_center": [40, 512], "n_channel": [583, 584, 587], "n_class": [4, 35, 89, 90, 109, 111, 116, 118, 143, 145, 212, 219, 231, 234, 245, 266, 267, 268, 292, 293, 315, 356, 359, 361, 379, 381, 393, 416, 437, 488, 489, 502, 515, 519, 523, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 604, 610, 634, 639, 658, 659, 666, 667, 668, 674, 675, 676, 677, 697, 707, 716, 718, 722, 735, 738, 741, 754, 788, 794, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 853, 854, 861, 864, 871, 872, 875, 878, 885, 888, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 914, 916, 917, 929, 930, 988, 992, 993, 996, 1003, 1006, 1007, 1024, 1040, 1041, 1042, 1044, 1045, 1046, 1052], "n_classes_": [551, 553, 555, 557, 559, 564, 610, 832, 833, 912, 914, 1036, 1045, 1047], "n_classes_pr": [714, 755], "n_classes_tru": [714, 755], "n_classifi": [28, 569, 570], "n_cluster": [17, 18, 19, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 93, 319, 351, 379, 393, 409, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 463, 511, 513, 710, 792, 793, 1027, 1035, 1039, 1041, 1043, 1044, 1046, 1049], "n_clusters_": [36, 47, 53, 61, 441, 445], "n_clusters_list": 41, "n_clusters_per_class": [29, 89, 113, 143, 145, 256, 293, 299, 307, 384, 515, 605, 607], "n_clusters_rang": 35, "n_clusters_tru": 59, "n_col": [4, 17, 93, 235, 424, 451, 453, 511, 513, 632, 1024], "n_color": 46, "n_column": [405, 451, 453], "n_column_clust": [451, 453, 513], "n_comp": [103, 173], "n_comparison": 259, "n_compon": [2, 3, 4, 10, 13, 42, 50, 55, 56, 57, 68, 70, 71, 72, 83, 84, 88, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 128, 173, 196, 218, 219, 220, 221, 222, 223, 226, 230, 231, 234, 238, 243, 244, 245, 246, 247, 248, 249, 258, 287, 292, 302, 310, 317, 319, 322, 351, 381, 384, 385, 393, 410, 412, 414, 421, 451, 452, 462, 464, 482, 483, 484, 485, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 639, 640, 641, 642, 688, 689, 690, 691, 692, 693, 694, 695, 696, 797, 798, 853, 860, 863, 896, 897, 898, 941, 984, 986, 989, 991, 995, 1024, 1027, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1052, 1053], "n_components_": [71, 100, 393, 441, 445, 534, 538, 539, 540, 541, 542, 543, 896, 897, 1024, 1044, 1046], "n_components_fa": 100, "n_components_pca": 100, "n_components_pca_ml": 100, "n_components_rang": 230, "n_connected_compon": 463, "n_connected_components_": [441, 445, 1044], "n_core": 115, "n_core_sampl": [420, 444], "n_cpu": [366, 393], "n_cv": [413, 437], "n_cv_alpha": [651, 655], "n_cv_fold": [119, 311, 806, 823, 828, 831], "n_digit": 56, "n_dim": [478, 527, 529, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1052], "n_dimens": [797, 798], "n_dimensions_of_x": [906, 907, 908, 909, 910], "n_dir": 12, "n_e": 409, "n_element": [419, 617], "n_encoded_featur": [877, 878], "n_error": 290, "n_error_outli": [211, 289, 337], "n_error_outliers_sgd": 211, "n_error_test": [211, 289, 337], "n_error_test_sgd": 211, "n_error_train": [211, 337], "n_error_train_sgd": 211, "n_estim": [5, 8, 24, 29, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 128, 129, 132, 161, 170, 219, 235, 239, 245, 256, 271, 307, 315, 317, 365, 392, 393, 416, 418, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 632, 803, 804, 981, 998, 999, 1032, 1043, 1051], "n_estimators_": [120, 559, 560], "n_estimators_ful": 120, "n_exampl": 6, "n_face": 235, "n_featur": [4, 6, 13, 23, 24, 25, 28, 29, 30, 31, 32, 38, 50, 56, 58, 59, 76, 77, 78, 79, 80, 89, 90, 93, 100, 109, 111, 113, 115, 116, 143, 145, 146, 161, 162, 173, 176, 179, 181, 183, 191, 192, 196, 200, 201, 212, 214, 219, 226, 230, 231, 233, 243, 248, 256, 262, 266, 268, 269, 271, 272, 293, 299, 307, 315, 316, 317, 319, 321, 322, 345, 350, 351, 352, 361, 365, 372, 373, 379, 381, 384, 391, 392, 393, 399, 409, 411, 412, 414, 416, 417, 420, 421, 422, 424, 426, 427, 428, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 494, 501, 504, 508, 509, 512, 515, 516, 519, 521, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 710, 725, 758, 759, 760, 761, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 941, 967, 968, 969, 970, 971, 972, 973, 974, 975, 984, 988, 993, 995, 996, 1002, 1006, 1007, 1008, 1019, 1024, 1025, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_feature_influ": 8, "n_features_": [145, 593, 594, 1048, 1050], "n_features_a": 853, "n_features_b": 853, "n_features_in_": [381, 393, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1046, 1048, 1050, 1053], "n_features_max": 31, "n_features_missing_ind": 630, "n_features_new": [433, 442, 445, 532, 534, 536, 537, 539, 542, 543, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 853, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897], "n_features_opt": 70, "n_features_out": 630, "n_features_out_": 883, "n_features_rang": 31, "n_features_to_comput": 1043, "n_features_to_select": [144, 146, 317, 418, 593, 602, 1047, 1049], "n_features_to_select_": 602, "n_features_with_miss": 629, "n_features_with_missing_": 627, "n_fold": [136, 647, 651, 653, 655, 659, 661, 663, 1036, 1037, 1041], "n_gram_rang": 1035, "n_group": [413, 809, 1023, 1041], "n_i": [994, 1002], "n_imag": 257, "n_index": [846, 847, 848, 850, 852, 854, 855], "n_inform": [23, 25, 29, 89, 113, 116, 143, 145, 176, 181, 200, 201, 256, 262, 272, 293, 299, 307, 315, 345, 381, 384, 515, 524, 553, 554, 555, 556, 564, 565, 605, 606, 607, 608, 609, 646, 647, 652, 660, 661, 662, 665, 681, 682, 683, 834, 993, 1043], "n_init": [17, 40, 41, 43, 48, 55, 56, 59, 62, 218, 219, 220, 221, 316, 319, 351, 409, 443, 447, 449, 451, 452, 453, 459, 462, 690, 694, 797, 798, 1027, 1035, 1043, 1049, 1050, 1051], "n_init_rang": 59, "n_inlier": 226, "n_input_features_": 1048, "n_instanc": [8, 633], "n_iter": [4, 15, 69, 125, 149, 205, 260, 267, 283, 302, 340, 381, 385, 392, 421, 454, 478, 532, 533, 544, 545, 546, 547, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 692, 694, 803, 804, 812, 814, 860, 862, 940, 941, 981, 1006, 1024, 1036, 1041, 1042, 1043, 1047, 1049, 1050, 1051, 1053], "n_iter_": [2, 96, 125, 205, 246, 393, 440, 447, 448, 449, 471, 472, 482, 483, 484, 531, 532, 533, 536, 537, 538, 539, 540, 543, 561, 562, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 690, 692, 797, 798, 853, 861, 862, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 1039, 1042, 1043, 1045, 1048, 1049, 1051], "n_iter_no_chang": [5, 115, 120, 125, 205, 318, 350, 384, 393, 416, 559, 560, 561, 562, 666, 667, 668, 676, 677, 678, 861, 862, 1006, 1043, 1046], "n_iter_search": 267, "n_iter_without_progress": [219, 692, 1040, 1041], "n_iterations_": [271, 803, 804], "n_iters_": 1041, "n_job": [11, 52, 70, 71, 115, 116, 117, 122, 123, 130, 145, 146, 161, 167, 168, 169, 170, 219, 221, 238, 253, 258, 260, 261, 263, 275, 278, 283, 315, 316, 317, 320, 345, 366, 379, 393, 416, 420, 437, 444, 446, 448, 450, 452, 455, 456, 457, 458, 461, 464, 467, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 958, 960, 981, 992, 993, 995, 1023, 1024, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1053], "n_k": [409, 550], "n_kernel": 612, "n_kernel_param": [610, 611], "n_knot": [2, 198, 318, 883, 1002, 1048], "n_l1_ratio": [647, 659, 661, 1038], "n_l1_ratios_": 659, "n_label": [10, 90, 234, 393, 487, 523, 713, 720, 726, 739, 740, 754, 756, 792, 793, 820, 992, 1041, 1043], "n_labeled_point": [325, 326], "n_layer": [861, 862], "n_layers_": [861, 862], "n_leav": [463, 912, 913, 914, 915], "n_leaves_": [441, 445], "n_left": 563, "n_local_tri": 460, "n_m": 1008, "n_mask": 197, "n_missing_featur": 629, "n_missing_sampl": 162, "n_nearest_featur": [162, 627], "n_neighbor": [10, 42, 60, 65, 131, 161, 218, 219, 220, 222, 226, 236, 283, 285, 286, 289, 290, 291, 292, 295, 310, 315, 317, 350, 416, 452, 602, 607, 608, 628, 688, 689, 691, 693, 695, 696, 846, 847, 848, 850, 852, 853, 857, 899, 900, 982, 989, 995, 998, 1005, 1042, 1049, 1051, 1052], "n_neighbors_": [691, 850], "n_neighbors_list": [236, 285], "n_neighbour": 1049, "n_node": [359, 441, 445, 463, 557, 558, 564, 565, 566, 912, 913, 914, 915, 946], "n_node_sampl": 359, "n_nodes_ptr": [557, 558, 564, 565, 566], "n_noise_": 47, "n_nonzero": 102, "n_nonzero_coef": [196, 526, 531, 537, 542, 545, 546, 548, 650, 664, 685, 686, 1053], "n_nonzero_coefs_": [664, 665, 1053], "n_nonzero_column": 352, "n_numerical_featur": 119, "n_order": 177, "n_original_featur": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "n_out": 566, "n_outlier": [78, 79, 126, 200, 226, 290], "n_output": [359, 393, 416, 426, 432, 433, 437, 442, 445, 465, 469, 482, 483, 484, 532, 534, 536, 537, 539, 542, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 628, 630, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 754, 785, 788, 790, 791, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 860, 861, 862, 863, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 930, 963, 992, 993, 1008, 1042, 1045], "n_output_featur": 628, "n_output_features_": 879, "n_outputs_": [551, 552, 557, 558, 564, 565, 566, 861, 862, 912, 913, 914, 915], "n_oversampl": [451, 453, 541, 544, 941, 1049], "n_pack": [944, 945], "n_patch": [583, 584, 587], "n_permut": [265, 413, 829], "n_pixel": [235, 257], "n_point": [254, 844, 845], "n_points_per_clust": 63, "n_popul": [388, 961], "n_possible_iterations_": [803, 804], "n_predict": 8, "n_pt": 12, "n_q": 409, "n_quantil": [73, 168, 309, 881, 893, 1044], "n_quantiles_": 881, "n_queri": [688, 846, 847, 848, 850, 852, 854, 855, 856], "n_random_featur": 186, "n_redund": [23, 25, 29, 89, 116, 143, 145, 256, 262, 293, 299, 307, 384, 437, 515, 553, 555, 564, 834], "n_refin": 472, "n_region": 44, "n_regions_plu": 44, "n_regressor": 570, "n_relevant_featur": 191, "n_remaining_candidates_": [803, 804], "n_repeat": [112, 116, 123, 145, 167, 169, 170, 259, 273, 278, 315, 413, 515, 634, 815, 816, 1000], "n_required_iterations_": [803, 804], "n_resourc": 981, "n_resources_": [271, 803, 804, 981], "n_resources_0": 981, "n_resources_i": 981, "n_restarts_optim": [156, 419, 610, 611], "n_retri": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1049, 1053], "n_row": [4, 17, 93, 405, 424, 451, 453, 511, 513, 1024], "n_row_clust": [451, 453, 513], "n_run": [35, 59, 173, 351], "n_sampl": [4, 5, 8, 13, 22, 23, 24, 25, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 68, 73, 76, 77, 78, 79, 80, 84, 90, 93, 94, 98, 100, 109, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 126, 127, 137, 138, 145, 146, 158, 161, 162, 166, 176, 178, 179, 181, 183, 185, 187, 189, 191, 192, 196, 197, 198, 200, 201, 205, 209, 212, 214, 215, 218, 219, 220, 221, 222, 223, 226, 230, 231, 233, 236, 244, 246, 247, 248, 249, 256, 257, 259, 262, 263, 266, 268, 269, 270, 271, 272, 274, 283, 293, 307, 308, 309, 312, 316, 317, 319, 321, 322, 327, 336, 339, 340, 345, 350, 351, 361, 372, 376, 379, 381, 384, 388, 391, 392, 393, 399, 408, 409, 411, 412, 413, 414, 416, 420, 421, 422, 424, 426, 427, 428, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 494, 501, 504, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 770, 771, 772, 773, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 929, 930, 941, 943, 945, 954, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 981, 984, 988, 992, 993, 995, 996, 1002, 1003, 1004, 1006, 1007, 1008, 1019, 1024, 1025, 1026, 1027, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_samples1": 870, "n_samples2": 870, "n_samples_": 541, "n_samples_1": [340, 1007], "n_samples_2": [340, 1007], "n_samples_a": [792, 793], "n_samples_fit": [432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 688, 837, 838, 846, 847, 848, 850, 852, 854, 855, 856, 862, 905, 907, 910, 913, 915], "n_samples_fit_": [283, 846, 847, 848, 850, 852, 854, 855, 856], "n_samples_i": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781], "n_samples_per_cent": 59, "n_samples_rang": [77, 230], "n_samples_seen": 884, "n_samples_seen_": [534, 873, 874, 884, 1043], "n_samples_test": [272, 906, 907, 908, 909, 910, 995, 1002], "n_samples_train": [272, 906, 907, 908, 909, 910], "n_samples_transform": [283, 848, 856], "n_samples_x": [611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781], "n_seed": 461, "n_selected_featur": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "n_skips_": 1042, "n_skips_invalid_data_": 671, "n_skips_invalid_model_": 671, "n_skips_no_inliers_": 671, "n_spline": [2, 883], "n_split": [2, 11, 115, 121, 125, 161, 162, 167, 245, 254, 259, 261, 264, 269, 273, 278, 322, 328, 338, 345, 361, 413, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 827, 1023, 1041, 1043], "n_splits_": [800, 803, 804, 814], "n_steps_": [96, 449, 537, 538, 1048], "n_subpopulation_": 679, "n_subsampl": [679, 930], "n_subsets_of_featur": 594, "n_support_": [906, 907, 908, 909, 910, 1007, 1045], "n_support_vector": 5, "n_sv": [906, 907, 908, 909, 910, 1007, 1045], "n_svd_vec": [451, 453], "n_t": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "n_t_l": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "n_t_r": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "n_target": [393, 412, 482, 483, 484, 485, 524, 556, 611, 643, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 673, 674, 675, 681, 684, 685, 686, 687, 993, 1047, 1049, 1051], "n_task": [191, 988], "n_test": [6, 8, 31, 112, 259, 1035, 1038], "n_test_docu": 6, "n_test_po": 6, "n_threshold": [635, 727, 782, 789], "n_tick": [806, 823, 828, 831], "n_top": 267, "n_top_word": 13, "n_topic": [384, 536, 1042], "n_tot": 699, "n_total_sampl": [325, 326], "n_train": [6, 8, 31, 112, 259, 1035, 1038], "n_train_po": 6, "n_transformed_featur": 864, "n_tree": 5, "n_trees_per_iter": 561, "n_trees_per_iteration_": [559, 560, 561, 562], "n_trials_": 671, "n_uncorrelated_featur": 265, "n_unequ": 699, "n_unique_categori": 311, "n_unique_label": [729, 730, 738, 783, 784, 787, 956], "n_unique_tick": [806, 828], "n_valu": [823, 831, 1043], "n_values_": 1043, "n_values_feature_j": 633, "n_x": [52, 585], "n_y": [52, 585, 994, 1002], "n_z": 585, "na": [627, 628, 629, 630, 769, 778, 922, 924, 925, 1045, 1046, 1049, 1050, 1051, 1052], "nabarun": 1043, "nabla": 996, "nabsolut": 203, "nacross": 273, "nada": 17, "nadeau": [259, 1043], "nadia": 1047, "nadim": 1048, "nadirhan": 1049, "nadya": 1041, "nagarajan": [645, 988], "nagarjuna": [1042, 1043], "nagasaka": 1048, "naghshhnejad": [1045, 1046], "nagpal": 54, "naipawat": [1049, 1050], "naiv": [25, 29, 128, 259, 261, 281, 350, 352, 368, 374, 406, 416, 417, 437, 544, 839, 840, 841, 842, 843, 986, 987, 995, 1000, 1015, 1030, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "naive_bay": [6, 22, 23, 25, 29, 128, 132, 260, 261, 350, 361, 367, 368, 374, 416, 437, 569, 865, 986, 993, 994, 1028, 1036, 1037, 1039, 1040, 1041, 1042], "naive_linear_pipelin": 2, "naive_linear_predict": 2, "naivebay": 367, "naivelycalibratedlinearsvc": [23, 25], "najera": 1042, "najork": [726, 756, 992], "naka": 1048, "nakamura": 1049, "nakano": [1042, 1043], "nalepa": 1042, "naman": 1052, "name": [2, 4, 5, 7, 8, 9, 10, 15, 17, 23, 25, 28, 29, 35, 42, 43, 56, 60, 69, 71, 73, 80, 94, 99, 112, 113, 114, 115, 119, 122, 125, 130, 167, 168, 169, 186, 195, 197, 199, 201, 203, 204, 212, 214, 215, 218, 219, 226, 232, 233, 235, 236, 240, 245, 253, 254, 256, 257, 260, 262, 263, 266, 268, 269, 273, 278, 283, 291, 292, 299, 300, 307, 309, 311, 319, 320, 329, 343, 350, 351, 352, 366, 367, 373, 374, 377, 379, 381, 383, 384, 386, 387, 393, 396, 399, 405, 409, 413, 416, 417, 419, 423, 425, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 697, 698, 699, 700, 702, 708, 709, 711, 713, 732, 733, 742, 779, 780, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 822, 823, 827, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 923, 924, 925, 928, 932, 933, 934, 936, 948, 949, 950, 952, 955, 962, 976, 980, 981, 986, 988, 992, 993, 999, 1000, 1002, 1008, 1013, 1023, 1024, 1026, 1028, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "name_to_color": 311, "named_estim": [567, 568, 569, 570], "named_estimators_": [567, 568, 569, 570, 1043, 1045], "named_step": [71, 84, 144, 410, 593, 594, 597, 864, 865, 904, 905, 988, 1024, 1042, 1044], "named_transform": [863, 1050], "named_transformers_": 464, "namedtupl": [617, 950, 1051], "namespac": 404, "namiya": 1042, "nan": [73, 119, 125, 161, 162, 167, 215, 236, 238, 240, 254, 262, 311, 315, 320, 321, 322, 365, 371, 381, 388, 393, 416, 446, 468, 496, 555, 556, 557, 561, 562, 564, 593, 594, 597, 603, 606, 609, 627, 628, 629, 630, 635, 712, 713, 714, 721, 722, 723, 724, 728, 729, 730, 769, 778, 783, 784, 785, 787, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 873, 874, 878, 880, 881, 884, 885, 889, 892, 893, 895, 922, 923, 924, 925, 967, 981, 992, 1002, 1008, 1030, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "nan_euclidean": [628, 762, 778], "nan_euclidean_dist": [315, 762, 982, 1045], "nandana": [1041, 1042, 1043], "nanshan": 1048, "nanta": 1038, "nanxin": 1043, "nanyang": 376, "naois": [1050, 1052], "naoki": [1037, 1047], "naoya": [1041, 1042, 1043, 1044], "naozin555": 1048, "napa": 311, "narasimhan": 851, "nardelli": 1038, "narendra": [1046, 1052], "narendramukherje": 1046, "narendran": 1043, "narin": [223, 1042, 1043], "narinek": [1042, 1043], "narr": [379, 393, 658, 904, 909, 1035, 1036], "narrai": 594, "narrow": [11, 112, 122, 305, 307, 384, 844, 845], "nartayxd": 1049, "nasa": [68, 350, 351, 376], "nasdaq": 10, "naser": 1045, "nasir": 1043, "nass": 1050, "nastegiano": 1049, "nat": [607, 608, 704, 755, 757, 1049], "natasha": 1045, "natchiappan": [1048, 1049], "nate": [1041, 1042, 1048], "nath": 1043, "nathan": [535, 1043, 1047, 1050], "nathaniel": [1042, 1043, 1045], "nathansquan": 1049, "nati": 1050, "nation": [9, 78, 296, 374, 851], "nativ": [2, 11, 125, 129, 154, 161, 253, 366, 374, 393, 402, 416, 496, 561, 562, 836, 837, 960, 988, 992, 993, 1012, 1045, 1047], "native_result": 119, "natl": [689, 693, 989], "natur": [2, 25, 29, 115, 122, 156, 167, 168, 173, 181, 197, 198, 214, 215, 222, 236, 243, 249, 268, 281, 350, 379, 381, 393, 414, 416, 417, 420, 444, 450, 457, 551, 590, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 692, 704, 741, 755, 757, 846, 847, 848, 850, 852, 854, 855, 856, 883, 939, 988, 989, 991, 992, 995, 997, 1002, 1006, 1012, 1035, 1043], "naul": [1040, 1041], "nav": 10, "navarret": [1043, 1044, 1045], "navarro": 1050, "navi": [31, 68, 77, 97, 101, 102, 129, 176, 200, 208, 221, 244, 245, 246, 249, 266, 268, 288, 295, 327, 358], "navig": [387, 1037], "navin": 900, "navistar": 10, "navkal": 1043, "navractil": 992, "navratil2007": 992, "nawazish": [1050, 1051], "na\u00efv": 1028, "nb": [6, 100, 128, 361, 841, 994], "nbclaim": 215, "nber": 8, "nbr": [852, 995], "nbrs_": [688, 689], "nbsp": [10, 24, 69, 70, 114, 116, 117, 122, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 186, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359], "nbviewer": [10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359], "nbyte": [51, 230], "nca": [219, 291, 292, 293, 853, 995], "nca_pip": 995, "ncall": 385, "ncanip": 853, "nclass": 254, "ncluster": 42, "ncol": [2, 3, 11, 28, 30, 32, 51, 55, 64, 93, 98, 103, 120, 168, 197, 198, 199, 205, 215, 218, 219, 229, 236, 253, 255, 261, 262, 270, 273, 283, 286, 300, 306, 307, 309, 310, 320, 344, 345, 351], "ncorrect": 259, "ncsu": [146, 376], "ncv": [451, 453], "nd": [1048, 1052], "ndarrai": [51, 56, 88, 197, 240, 257, 258, 259, 379, 380, 381, 385, 386, 404, 417, 420, 421, 424, 425, 427, 430, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 715, 718, 721, 722, 723, 724, 727, 728, 738, 745, 746, 748, 750, 751, 753, 754, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 921, 922, 923, 924, 929, 930, 938, 940, 941, 942, 943, 947, 954, 956, 957, 961, 964, 965, 967, 968, 969, 970, 973, 978, 979, 992, 1007, 1013, 1038, 1042, 1045, 1046, 1049, 1050, 1051, 1052], "ndata": 265, "ndataset": [212, 307], "ndbscan": 63, "ndcg": [726, 756, 992, 1042], "ndcg_score": [726, 992, 1042, 1045, 1050, 1051], "ndenumer": 209, "ndepend": 168, "ndim": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 924, 925], "ndimag": [12, 44, 45, 52, 302, 1027], "ndingwal": 1042, "ndirangu": [1045, 1049], "ne": [992, 995], "neal": [988, 1048], "near_uniqu": 312, "nearbi": [409, 995], "nearer": [848, 856, 995], "nearest": [10, 12, 29, 30, 37, 38, 48, 49, 52, 56, 59, 64, 70, 76, 80, 87, 93, 96, 124, 126, 131, 137, 153, 162, 188, 209, 213, 220, 223, 229, 235, 236, 252, 262, 287, 289, 292, 293, 297, 301, 302, 310, 334, 338, 343, 347, 368, 371, 376, 388, 391, 393, 409, 415, 416, 420, 423, 433, 444, 446, 448, 450, 452, 457, 461, 462, 496, 502, 504, 607, 608, 627, 628, 630, 631, 635, 688, 689, 691, 692, 696, 792, 793, 800, 830, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 869, 884, 966, 989, 998, 1007, 1013, 1014, 1015, 1022, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047], "nearest_neighbor": [42, 452, 691], "nearest_neighbor_algorithm": [846, 854, 855], "nearest_neighbors_algorithm": [847, 852], "nearestcentroid": [294, 350, 993, 995, 1035, 1039, 1042, 1047, 1050], "nearestneighbor": [283, 319, 396, 409, 420, 444, 446, 448, 461, 688, 689, 693, 846, 847, 848, 850, 854, 855, 856, 995, 1035, 1039, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "nearli": [23, 262, 374, 393, 407, 764, 992, 995, 1004, 1028], "neat": [1012, 1035], "necess": [989, 995], "necessari": [5, 12, 113, 181, 197, 202, 243, 253, 259, 260, 266, 285, 342, 357, 365, 374, 377, 378, 379, 380, 381, 382, 383, 387, 391, 409, 411, 416, 452, 462, 488, 489, 491, 492, 493, 494, 495, 497, 534, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 676, 691, 695, 795, 867, 876, 887, 891, 897, 981, 984, 988, 991, 994, 1002, 1008, 1028, 1035, 1043], "necessarili": [2, 29, 70, 96, 167, 197, 205, 215, 231, 232, 244, 253, 307, 350, 351, 373, 383, 402, 404, 406, 409, 416, 627, 852, 854, 855, 856, 986, 989, 991, 992], "need": [0, 2, 7, 10, 30, 44, 46, 51, 53, 55, 80, 95, 107, 115, 119, 121, 122, 123, 125, 130, 146, 149, 154, 161, 162, 167, 185, 199, 214, 215, 219, 226, 229, 231, 233, 236, 237, 243, 244, 248, 249, 253, 257, 259, 261, 262, 264, 278, 281, 283, 285, 310, 315, 322, 328, 338, 350, 351, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 425, 437, 441, 445, 449, 464, 465, 467, 503, 541, 551, 572, 582, 583, 588, 589, 590, 591, 627, 635, 638, 639, 640, 642, 649, 666, 668, 671, 676, 679, 692, 720, 721, 722, 723, 724, 781, 785, 797, 798, 800, 803, 804, 814, 815, 816, 825, 833, 836, 844, 845, 861, 864, 867, 871, 876, 877, 881, 899, 906, 909, 949, 981, 982, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1013, 1017, 1025, 1026, 1027, 1028, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "needl": [146, 376], "needs_proba": [742, 1044, 1052], "needs_threshold": [742, 1052], "neeraj": 1042, "neg": [1, 2, 4, 14, 22, 58, 73, 76, 84, 115, 121, 122, 127, 164, 166, 167, 175, 187, 193, 194, 195, 197, 215, 216, 223, 247, 248, 253, 256, 259, 262, 266, 268, 269, 273, 283, 305, 309, 319, 350, 385, 393, 394, 409, 413, 416, 417, 418, 420, 421, 432, 440, 444, 452, 465, 469, 482, 483, 484, 488, 531, 533, 535, 536, 537, 538, 540, 542, 544, 547, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 588, 591, 592, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 677, 678, 679, 680, 687, 698, 699, 704, 705, 712, 713, 715, 716, 718, 719, 721, 722, 723, 724, 727, 729, 730, 731, 735, 738, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 782, 783, 784, 785, 787, 790, 791, 793, 797, 798, 806, 823, 825, 830, 837, 838, 847, 850, 855, 862, 871, 880, 882, 883, 888, 892, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 939, 941, 960, 990, 992, 993, 995, 996, 997, 998, 1006, 1007, 1014, 1028, 1029, 1030, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "neg_": [806, 823, 1041], "neg_brier_scor": [992, 1045], "neg_label": [253, 273, 871, 888], "neg_log_alphas_enet": 182, "neg_log_alphas_lasso": 182, "neg_log_alphas_positive_enet": 182, "neg_log_alphas_positive_lasso": 182, "neg_log_loss": [25, 253, 992], "neg_lr": 262, "neg_lr_bas": 262, "neg_lr_base_std": 262, "neg_mean_absolute_error": [2, 130, 199, 992], "neg_mean_absolute_percentage_error": [11, 119, 992, 1000], "neg_mean_gamma_devi": 992, "neg_mean_pinball_loss_05p_scor": 122, "neg_mean_pinball_loss_95p_scor": 122, "neg_mean_poisson_devi": 992, "neg_mean_squared_error": [161, 162, 199, 232, 274, 322, 827, 992, 1000, 1041], "neg_mean_squared_log_error": 992, "neg_median_absolute_error": 992, "neg_root_mean_squared_error": [2, 125, 311, 992], "neg_root_mean_squared_log_error": 992, "neg_root_mean_squared_log_error_scor": 1052, "negat": [393, 806, 823, 992], "negate_scor": [232, 806, 823], "negative_class": 712, "negative_likelihood_ratio": [262, 712], "negative_linestyl": 226, "negative_loglik": 76, "negative_mahal_dist": 469, "negative_outlier_factor": 850, "negative_outlier_factor_": [236, 290, 850, 998], "neglig": [167, 995, 1038, 1052], "neigh": [781, 846, 847, 848, 850, 852, 854, 855, 856], "neigh_dist": [846, 847, 848, 850, 852, 854, 855, 856], "neigh_ind": [846, 847, 848, 850, 852, 854, 855, 856], "neighbor": [10, 29, 37, 42, 45, 58, 64, 70, 125, 126, 128, 131, 137, 161, 162, 219, 220, 222, 223, 226, 229, 235, 236, 252, 262, 287, 288, 289, 290, 292, 293, 294, 296, 297, 301, 317, 319, 320, 350, 368, 371, 376, 388, 391, 393, 396, 409, 415, 416, 417, 420, 423, 433, 441, 444, 445, 448, 450, 452, 457, 458, 461, 463, 496, 502, 504, 563, 570, 602, 607, 608, 627, 628, 631, 688, 689, 690, 691, 692, 693, 695, 696, 781, 800, 830, 864, 865, 884, 900, 908, 966, 993, 998, 1013, 1014, 1015, 1022, 1027, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "neighbor_feat_idx": 627, "neighborhood": [31, 53, 80, 84, 101, 137, 162, 164, 218, 243, 284, 285, 286, 294, 295, 297, 376, 393, 409, 414, 420, 444, 446, 450, 457, 502, 504, 515, 541, 549, 628, 631, 696, 830, 846, 847, 850, 852, 853, 854, 855, 856, 858, 864, 865, 884, 989, 998, 1014, 1015, 1030, 1044], "neighborhoodcomponentanalysi": 292, "neighborhoodcomponentsanalysi": [219, 291, 292, 293, 995, 1044, 1049, 1053], "neighbors_algorithm": [688, 689], "neighborsbas": [1047, 1050], "neighborsclassifi": [852, 854, 855, 856, 1035], "neighborsregressor": 1035, "neighbour": [446, 462, 692, 997], "neighbourhood": [853, 995], "neighbourhood_components_analysi": 853, "neil": 1047, "neill": 1047, "neither": [162, 167, 315, 350, 361, 391, 406, 437, 594, 628, 928, 995, 1008], "nelder": 988, "nell": [0, 37, 221, 229, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047], "nelson": [0, 1041, 1042, 1047], "nemour": 10, "neo": 1043, "nep": 1045, "neptun": 1012, "neq": [409, 992, 994, 1002], "ness": [162, 215], "nest": [98, 109, 136, 164, 186, 233, 251, 253, 254, 276, 278, 322, 366, 385, 393, 396, 409, 413, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 504, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 805, 814, 822, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 992, 995, 1014, 1035, 1036, 1039, 1041, 1042, 1043, 1049], "nested_lin": 264, "nested_scor": 264, "nesterov": [300, 861, 862, 996, 1051, 1052], "nesterovs_momentum": [300, 861, 862], "nestor": 1050, "net": [29, 164, 175, 181, 183, 184, 188, 190, 191, 208, 216, 230, 233, 272, 295, 385, 407, 413, 471, 472, 478, 501, 524, 557, 558, 559, 560, 564, 565, 566, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 684, 860, 912, 913, 914, 915, 981, 992, 997, 1006, 1014, 1015, 1017, 1030, 1035, 1040, 1044, 1045, 1047], "netbsd": 1035, "netnew": 1028, "neto": [590, 730, 1053], "nettei": 1048, "network": [4, 236, 301, 365, 366, 367, 368, 373, 374, 393, 394, 402, 409, 414, 416, 421, 496, 533, 535, 567, 568, 696, 741, 861, 862, 988, 990, 992, 1006, 1008, 1012, 1015, 1024, 1029, 1030, 1035, 1049, 1053], "networkx": [15, 388], "neural": [3, 4, 29, 259, 301, 368, 393, 402, 413, 414, 416, 421, 533, 535, 538, 540, 547, 567, 568, 639, 645, 696, 741, 797, 853, 860, 861, 862, 870, 984, 988, 989, 990, 992, 995, 998, 1002, 1006, 1008, 1012, 1015, 1017, 1024, 1029, 1030, 1035, 1047], "neural_network": [29, 164, 168, 237, 298, 299, 300, 301, 302, 303, 367, 368, 391, 993, 996, 1014, 1037, 1052], "neuraxl": 1012, "neuro": 1012, "neurodebian": 0, "neuroimag": [1011, 1017], "neuron": [861, 862, 990, 996], "neutral": 716, "nevalu": 130, "never": [115, 234, 361, 379, 388, 391, 402, 408, 409, 410, 412, 413, 450, 457, 523, 555, 556, 557, 564, 864, 865, 984, 1002, 1045, 1048], "nevertheless": [2, 170, 416], "new": [2, 5, 6, 8, 48, 54, 56, 58, 68, 69, 88, 100, 109, 111, 113, 114, 115, 120, 122, 125, 129, 130, 143, 146, 149, 155, 162, 169, 170, 197, 203, 211, 226, 233, 253, 258, 261, 266, 281, 287, 289, 311, 316, 319, 322, 326, 329, 337, 342, 361, 366, 367, 373, 374, 376, 377, 378, 381, 382, 383, 385, 387, 388, 392, 393, 394, 396, 402, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 434, 437, 438, 440, 442, 443, 445, 447, 448, 449, 452, 462, 463, 472, 482, 483, 484, 504, 508, 509, 534, 541, 544, 555, 556, 557, 558, 563, 564, 565, 566, 581, 602, 630, 631, 635, 640, 641, 642, 645, 646, 652, 688, 689, 690, 697, 698, 700, 701, 702, 788, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 834, 850, 873, 874, 879, 880, 881, 883, 884, 885, 892, 893, 901, 919, 922, 927, 962, 967, 981, 982, 984, 988, 992, 993, 995, 996, 997, 998, 1002, 1004, 1005, 1006, 1007, 1013, 1017, 1019, 1020, 1023, 1026, 1028, 1033, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "new_data": [287, 381], "new_valu": [567, 568, 569, 570], "newaxi": [10, 12, 17, 22, 40, 80, 102, 110, 150, 178, 187, 193, 198, 199, 200, 202, 203, 214, 229, 231, 274, 288, 295, 357, 358, 405, 536, 988], "newei": 1043, "newer": [149, 378, 396, 414], "newgroups20": 212, "newli": [377, 392, 416, 463, 999, 1041, 1042, 1050], "newsgroup": [5, 13, 17, 230, 260, 329, 351, 352, 372, 405, 417, 488, 489, 1020, 1030], "newsgroups_test": 374, "newsgroups_train": [374, 488], "newsgroups_vector": 489, "newshap": 155, "newsl": [885, 1002], "newslett": 373, "newsweed": 1028, "newswir": 374, "newton": [197, 215, 302, 610, 648, 658, 659, 669, 680, 861, 862, 988, 1039, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "newton_cg": 1045, "next": [5, 23, 58, 78, 118, 119, 123, 133, 156, 166, 170, 190, 194, 197, 227, 233, 235, 239, 240, 245, 254, 265, 281, 310, 311, 312, 317, 326, 350, 355, 359, 361, 368, 377, 379, 381, 383, 402, 405, 409, 410, 413, 416, 508, 509, 610, 634, 692, 698, 700, 702, 781, 797, 798, 830, 958, 981, 985, 991, 992, 1002, 1017, 1032, 1035, 1048, 1049], "nezar": 1045, "nff": 699, "nfit": 326, "nfkd": [588, 589, 591, 1045], "nfor": 234, "nfrom": 154, "nft": 699, "ng": [409, 414, 691, 850, 996, 998, 1046], "ngiam": 996, "ngo": 1047, "ngram_rang": [260, 329, 417, 588, 589, 591], "ngram_vector": 417, "ngroup": 254, "ngshya": 1046, "nguyen": [1045, 1046, 1049, 1050], "nguy\u1ec5n": 1050, "ni": [123, 1041, 1046], "nic": 1048, "nice": [2, 65, 198, 233, 305, 365, 414, 1028], "nicer": 631, "nichol": 1039, "nichola": [1043, 1044, 1046], "nicholson": [1041, 1042, 1043], "nick": [146, 376, 1035, 1041, 1042, 1043, 1044], "nicki": 1049, "nickledav": 1041, "nicknam": 374, "nico": [1041, 1048], "nicol": 1042, "nicola": [0, 146, 309, 397, 658, 988, 1005, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "nicolashug": 1044, "nicolasservel": 1046, "nicolau": 1043, "nicula": [0, 93, 234, 302, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "niculescu": [23, 25, 406, 437, 439], "nidhin": 1045, "niederb\u00fchl": 1043, "niederhut": [1043, 1045], "nielsen": [743, 1043], "nielsenmarkus11": [1042, 1043], "nigam": [839, 994], "nigel": 1048, "night": 11, "nightli": [0, 366, 382, 383], "nightwalkx": 1051, "nihal": 1050, "nihar": 1043, "niket": 1049, "nikhil": 1049, "nikita": [1042, 1043, 1045, 1048, 1049, 1050], "nikla": [1045, 1046], "nikolai": [1038, 1039, 1040, 1041, 1043, 1044, 1049, 1051], "nil": 1047, "nilearn": 1012, "nilesh": 1043, "nilichen": 123, "nilotp": [635, 637], "nima": 1050, "nima10khodaveisi": 1050, "nimbus1after2a1sun7show": 177, "nine": 1019, "ninertia": 62, "ningchi": 1041, "ninh": 173, "ninja": [377, 1017], "nip": [100, 376, 515, 541, 566, 641, 992], "nipal": [412, 483, 484], "nipy_spectr": [10, 37, 44, 45, 49, 50, 58, 59, 99], "nirvan": [1043, 1047], "nishan": 1045, "nishihara": 1047, "nishu": 1051, "nist": [376, 992], "nistir": 376, "nit": 379, "nitinramvelraj": 1050, "nitish": 1042, "nitya": 1045, "niuk": 1051, "niyogi": 989, "nizam": 1043, "nizhibitski": 1036, "nk": 696, "nkish": 1046, "nkmean": 42, "nl": 385, "nl1_ratio": 188, "nlasso": 181, "nlathia": 1041, "nlearn": 300, "nlog": 155, "nlogn": 692, "nlp": [374, 414, 417, 839, 843, 990, 1017], "nls_max_it": 1040, "nltk": [417, 1011, 1012], "nm": 365, "nmcd": 78, "nmd": 221, "nmean": 97, "nmf": [13, 70, 385, 407, 417, 535, 538, 544, 547, 1029, 1030, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "nmf_estim": 93, "nmi": [35, 409, 717, 736, 737, 757], "nmixtur": 42, "nmle": 78, "nmse": [3, 274], "nmslib": 283, "nmslib_": 283, "nmslibtransform": 283, "nn": [235, 417, 695, 1026], "nn_candid": 271, "nn_compon": [230, 231], "nn_sampl": [230, 271], "nndsvd": [414, 538, 540, 547, 1044, 1047], "nndsvda": [13, 414, 538, 540, 547, 1044, 1047], "nndsvdar": [414, 538, 540, 547, 1044], "nneq": 699, "nnl": [192, 657], "nnlnr": [1050, 1051], "nnmf": [417, 1029, 1030, 1035], "nntp": [350, 374, 1028], "nnz": [183, 351, 374, 699], "no_chang": 901, "no_interact": [561, 562, 1050], "no_mathjax": 379, "no_structur": [42, 60], "no_valid": 381, "no_weight": 210, "no_weights_handl": 210, "noa": [1046, 1052], "noah": 988, "noc": 10, "noced": 658, "nodar": 1048, "node": [10, 39, 119, 123, 181, 315, 321, 322, 355, 359, 387, 388, 409, 411, 414, 416, 441, 442, 445, 463, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 650, 654, 656, 682, 683, 692, 844, 845, 912, 913, 914, 915, 916, 918, 946, 960, 995, 997, 998, 999, 1008, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1052], "node_count": [315, 355, 359, 912, 913, 914, 915], "node_depth": 359, "node_id": [359, 916, 918], "node_ind": 359, "node_index": 359, "node_position_model": 10, "noel": [0, 109, 110, 111, 398, 1035, 1036, 1037, 1038, 1039, 1047], "noelano": 1047, "nof": 126, "nogil": [379, 380], "noinfo": 236, "noir": 311, "nois": [3, 8, 12, 18, 19, 25, 29, 31, 38, 42, 47, 50, 52, 53, 59, 60, 65, 73, 84, 93, 94, 96, 98, 100, 110, 112, 122, 127, 128, 148, 149, 150, 154, 158, 159, 164, 176, 178, 179, 181, 186, 187, 192, 195, 196, 199, 200, 201, 202, 214, 221, 223, 226, 228, 229, 232, 259, 267, 272, 274, 295, 299, 300, 307, 312, 316, 322, 344, 357, 358, 361, 375, 381, 384, 406, 409, 414, 416, 418, 419, 420, 444, 446, 452, 511, 513, 514, 515, 516, 517, 518, 522, 524, 525, 530, 532, 534, 541, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 621, 622, 624, 625, 644, 645, 649, 650, 651, 653, 654, 655, 656, 663, 664, 665, 671, 679, 685, 686, 692, 881, 893, 899, 985, 987, 988, 989, 992, 995, 1005, 1014, 1026, 1027, 1036, 1041, 1046, 1048, 1049], "noise_coef": 52, "noise_kernel": 154, "noise_level": [149, 154, 155, 612, 625], "noise_level_bound": [154, 155, 625], "noise_level_grid": 155, "noise_std": 156, "noise_vari": [185, 532, 656, 988, 1049], "noise_variance_": [93, 185, 532, 534, 541, 656, 1042, 1049], "noise_variance_init": 532, "noiseless": [96, 990], "noisi": [3, 31, 47, 53, 60, 94, 109, 142, 149, 155, 181, 196, 199, 221, 229, 249, 260, 266, 268, 269, 310, 357, 358, 361, 409, 417, 419, 420, 444, 446, 450, 521, 524, 941, 987, 989, 995, 1007, 1012], "noisier": 989, "noisili": 168, "noisy_circl": [42, 60], "noisy_moon": [42, 60], "noiz": 83, "nolan": 1052, "noll": [197, 215], "nomenclatur": [988, 1041], "nomin": [168, 373, 393, 394, 416, 417, 581, 582, 716, 1002, 1013], "non": [0, 1, 3, 4, 7, 8, 11, 12, 14, 22, 23, 25, 31, 32, 35, 47, 55, 60, 69, 73, 78, 80, 94, 95, 96, 98, 111, 119, 127, 128, 130, 136, 142, 143, 145, 153, 155, 162, 164, 166, 167, 168, 169, 170, 175, 176, 181, 183, 187, 190, 191, 193, 194, 195, 196, 198, 199, 203, 211, 212, 213, 215, 216, 221, 222, 223, 227, 228, 229, 230, 232, 236, 243, 245, 249, 251, 252, 253, 254, 259, 268, 276, 278, 283, 287, 289, 290, 302, 305, 307, 309, 310, 316, 317, 318, 319, 321, 322, 329, 333, 335, 340, 341, 342, 345, 346, 348, 350, 351, 352, 359, 361, 365, 366, 371, 374, 375, 379, 380, 381, 384, 385, 387, 388, 391, 393, 394, 406, 407, 409, 410, 413, 415, 416, 417, 418, 419, 421, 437, 441, 445, 446, 450, 452, 456, 462, 463, 464, 465, 467, 468, 488, 496, 497, 503, 504, 508, 526, 532, 535, 536, 538, 540, 544, 547, 549, 551, 552, 553, 557, 558, 559, 560, 561, 562, 564, 565, 566, 572, 588, 589, 591, 592, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 631, 635, 638, 643, 650, 652, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 672, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 694, 698, 699, 702, 706, 707, 712, 715, 717, 719, 720, 726, 727, 728, 735, 737, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 778, 782, 785, 788, 789, 790, 791, 794, 797, 798, 800, 801, 805, 807, 808, 809, 810, 812, 818, 826, 830, 833, 852, 854, 855, 856, 859, 864, 865, 867, 868, 869, 872, 876, 877, 878, 879, 880, 881, 883, 884, 891, 892, 893, 894, 895, 897, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 924, 925, 939, 941, 945, 947, 955, 981, 982, 983, 984, 985, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1013, 1014, 1026, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "non_determinist": [381, 1049], "non_neg": [582, 1042], "non_negative_factor": [1044, 1046, 1047, 1048, 1052], "non_nest": 264, "non_nested_scor": 264, "non_nested_scores_lin": 264, "non_noisy_label": 321, "non_outliers_mask": 305, "non_zero": [5, 10], "nonblasdotwarn": 1047, "none": [2, 6, 7, 8, 11, 15, 24, 28, 31, 37, 39, 40, 42, 50, 52, 53, 54, 60, 95, 98, 102, 113, 118, 119, 121, 124, 125, 138, 146, 150, 156, 157, 170, 176, 197, 198, 205, 208, 215, 218, 232, 233, 234, 236, 252, 259, 260, 271, 288, 290, 294, 309, 312, 317, 318, 326, 329, 336, 338, 339, 342, 343, 344, 350, 351, 374, 376, 379, 381, 386, 388, 393, 399, 402, 409, 413, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 714, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 734, 735, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 927, 928, 929, 930, 933, 935, 940, 941, 944, 945, 946, 947, 951, 952, 955, 958, 961, 963, 966, 967, 973, 976, 977, 979, 981, 988, 992, 1002, 1005, 1008, 1019, 1023, 1028, 1030, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "nonecheck": 380, "nonetheless": [393, 992], "nonexist": 632, "nonflavanoid": 376, "nonlinear": [274, 318, 644, 688, 689, 693, 696, 870, 988, 989, 997, 1002], "nonmetr": [690, 694, 989], "nonneg": [409, 414, 453, 538, 540, 547, 881], "nonner": 1046, "nonoverlap": 376, "nonparametr": [418, 419, 607, 608], "nonzero": [15, 17, 102, 196, 230, 263, 352, 405, 420, 444, 523, 524, 531, 537, 542, 548, 588, 591, 685, 686, 699, 846, 847, 850, 852, 854, 855, 992], "nonzero_coef": 988, "noptic": 63, "noptimum": 155, "noqa": [43, 65, 88, 99, 122, 146, 161, 162, 168, 194, 218, 220, 270, 271, 317, 350, 383, 579, 580, 627, 803, 804, 981, 1044], "nor": [122, 262, 350, 361, 365, 384, 391, 406, 417, 437, 446, 594, 928, 996, 1008, 1046], "norbert": [0, 369, 1037, 1047, 1048, 1049], "nordbi": 1052, "nore\u00f1a": 1048, "norm": [10, 12, 13, 15, 28, 32, 38, 52, 96, 152, 155, 176, 181, 183, 188, 221, 243, 244, 245, 247, 249, 256, 260, 288, 305, 338, 351, 385, 388, 393, 409, 417, 418, 442, 443, 447, 459, 460, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 489, 531, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 589, 590, 591, 597, 643, 646, 647, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 672, 674, 676, 678, 681, 684, 685, 686, 690, 692, 693, 694, 770, 841, 876, 891, 904, 906, 909, 974, 975, 985, 988, 990, 992, 1002, 1006, 1038, 1040, 1042, 1046], "norm1": 464, "norm2": 464, "norm_diag": 527, "norm_laplacian": 695, "norm_ord": [597, 1042], "norm_y_weight": 1047, "normal": [3, 8, 10, 13, 15, 17, 18, 24, 27, 32, 33, 35, 38, 42, 44, 55, 59, 60, 64, 71, 73, 76, 77, 78, 83, 84, 94, 109, 110, 112, 115, 121, 122, 125, 126, 127, 141, 152, 155, 156, 162, 164, 166, 167, 175, 176, 177, 178, 179, 181, 187, 190, 192, 195, 199, 200, 201, 203, 211, 215, 216, 221, 236, 243, 248, 249, 252, 253, 256, 259, 265, 288, 289, 292, 304, 306, 310, 313, 316, 319, 322, 328, 338, 351, 352, 361, 368, 371, 374, 375, 376, 379, 384, 388, 392, 393, 404, 405, 406, 409, 410, 412, 415, 416, 417, 421, 440, 449, 451, 452, 453, 462, 464, 465, 475, 482, 483, 484, 489, 496, 512, 515, 519, 526, 527, 533, 536, 541, 542, 544, 548, 549, 552, 553, 554, 557, 558, 559, 560, 562, 563, 564, 565, 566, 579, 580, 582, 588, 589, 590, 591, 611, 625, 627, 639, 658, 659, 669, 672, 676, 680, 687, 691, 695, 697, 703, 704, 706, 718, 724, 726, 734, 736, 741, 745, 749, 750, 752, 755, 756, 757, 761, 770, 794, 795, 796, 803, 804, 830, 832, 841, 843, 849, 850, 853, 864, 865, 868, 869, 872, 874, 877, 878, 879, 880, 881, 882, 884, 889, 890, 892, 893, 894, 895, 899, 900, 912, 913, 914, 915, 940, 941, 945, 968, 969, 974, 975, 981, 984, 986, 988, 989, 990, 991, 994, 998, 1003, 1005, 1007, 1008, 1014, 1024, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "normalesup": [10, 30, 44, 64, 231], "normalis": [167, 611, 788, 1028], "normalization_": [639, 984], "normalize_compon": [1043, 1045], "normalize_i": [154, 419, 611, 1049], "normalized_discounted_cumulative_gain": 756, "normalized_mutual_info_scor": [35, 409, 736, 755, 795, 992, 1043, 1049], "normalized_stress": [218, 690, 694, 989, 1050], "normalized_weight": 178, "norms_squar": 686, "north": [376, 409], "northern": 311, "northrop": 10, "northwestern": [309, 658], "norvan": 1045, "nose": [376, 1038, 1042], "nosetest": 1037, "not_memb": 167, "notabl": [233, 305, 373, 393, 408, 496, 728, 877, 989, 991, 995, 1039, 1042, 1049], "notarstefano": [1043, 1044], "notat": [126, 393, 410, 414, 417, 590, 712, 988, 992, 1019, 1044, 1051], "notch": 1017, "note": [0, 2, 3, 5, 6, 9, 10, 12, 17, 18, 24, 25, 30, 35, 51, 64, 69, 70, 78, 80, 83, 84, 90, 96, 112, 113, 115, 118, 122, 123, 127, 146, 149, 156, 161, 166, 167, 168, 169, 170, 173, 185, 186, 190, 197, 198, 199, 201, 205, 211, 213, 215, 218, 219, 220, 222, 226, 227, 229, 231, 232, 233, 234, 236, 244, 253, 254, 255, 259, 262, 265, 266, 267, 273, 281, 283, 285, 289, 290, 300, 305, 306, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 328, 330, 338, 342, 350, 359, 365, 366, 373, 376, 377, 379, 380, 381, 383, 385, 386, 391, 392, 393, 396, 399, 402, 403, 406, 407, 409, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 490, 496, 498, 504, 509, 515, 519, 527, 530, 533, 534, 538, 539, 540, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 597, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 632, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 699, 700, 707, 708, 713, 715, 720, 721, 722, 723, 724, 728, 729, 730, 732, 734, 738, 741, 746, 754, 755, 758, 763, 764, 768, 770, 774, 778, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 920, 930, 931, 940, 941, 952, 955, 960, 967, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1019, 1026, 1027, 1028, 1030, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "notebook": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 380, 381, 385, 410, 468, 902, 1008, 1011, 1012, 1013, 1046, 1049], "notes_neighbor": 1035, "notfittederror": [107, 393, 853, 976, 1039, 1041, 1044, 1045, 1051, 1052], "noth": [17, 68, 350, 351, 384, 542, 714, 867, 876, 925, 1002], "nothman": [0, 70, 394, 397, 417, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "notic": [5, 11, 23, 24, 32, 51, 55, 78, 112, 114, 115, 122, 125, 145, 176, 181, 226, 239, 256, 257, 259, 260, 262, 268, 269, 283, 310, 342, 350, 351, 352, 361, 381, 384, 394, 408, 413, 416, 496, 541, 563, 981, 991, 992, 998, 1028, 1032, 1048], "notifi": [572, 573, 574, 1033, 1045], "notimplementederror": [465, 553, 554, 593, 594, 602, 891, 901, 1042, 1052], "notin": 409, "notion": [268, 342, 351, 367, 391, 409, 414, 416, 988, 992], "notmatthancock": [1043, 1045], "noto": 1048, "noun": 393, "nouri": [365, 1036, 1038], "novak": 1038, "novarti": 10, "novaya": [1045, 1048], "novel": [211, 289, 337, 361, 406, 981], "novelti": [164, 211, 226, 236, 284, 290, 297, 337, 850, 1014, 1015, 1029, 1030, 1035, 1043], "novemb": [146, 197, 215, 376, 1040, 1041, 1043], "novic": 1037, "now": [2, 3, 5, 11, 15, 18, 51, 55, 69, 84, 98, 109, 110, 114, 116, 118, 119, 122, 123, 130, 133, 146, 149, 154, 155, 156, 162, 166, 167, 168, 169, 173, 176, 178, 183, 185, 186, 198, 199, 201, 222, 231, 233, 253, 255, 259, 262, 270, 271, 273, 278, 286, 310, 316, 317, 319, 320, 321, 322, 327, 338, 350, 351, 352, 361, 365, 367, 374, 379, 380, 381, 385, 391, 392, 393, 405, 409, 413, 414, 416, 417, 421, 493, 508, 509, 512, 536, 549, 579, 580, 582, 627, 630, 649, 653, 658, 663, 684, 726, 756, 797, 798, 803, 804, 836, 851, 863, 864, 967, 981, 982, 988, 992, 998, 1001, 1002, 1007, 1008, 1011, 1013, 1019, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "nowadai": 379, "nozawa": [1050, 1051], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 90, 94, 95, 96, 97, 99, 100, 102, 103, 110, 111, 112, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 356, 357, 358, 359, 361, 365, 373, 374, 379, 381, 384, 385, 388, 391, 393, 399, 405, 409, 410, 413, 414, 415, 416, 417, 419, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 496, 497, 508, 509, 520, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 563, 564, 565, 566, 569, 570, 581, 582, 585, 586, 588, 589, 593, 594, 597, 601, 604, 606, 609, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 668, 670, 671, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 687, 691, 692, 694, 695, 699, 702, 703, 706, 707, 709, 712, 713, 714, 715, 726, 727, 729, 730, 732, 734, 735, 738, 739, 754, 756, 763, 769, 773, 778, 781, 782, 783, 784, 787, 788, 789, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 854, 855, 856, 860, 861, 868, 869, 871, 877, 878, 879, 880, 881, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 904, 906, 907, 909, 910, 912, 913, 914, 915, 920, 921, 922, 923, 924, 925, 927, 929, 930, 939, 940, 941, 946, 947, 954, 955, 957, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 978, 981, 982, 987, 988, 990, 992, 993, 995, 996, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1019, 1023, 1024, 1026, 1027, 1028, 1036, 1038, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "npach": [1050, 1051], "npo": 221, "npolynomi": 2, "nprior": 243, "npropag": 42, "nqy18": 417, "nreceiv": 268, "nrow": [2, 3, 28, 30, 32, 55, 64, 71, 93, 125, 158, 168, 197, 199, 205, 215, 218, 219, 222, 236, 253, 261, 262, 283, 307, 309, 310, 320, 326, 344, 345, 1024], "nsampl": [381, 797, 798], "nsup": 12, "nswdemand": 125, "nswprice": 125, "nt": 15, "nt_uri": 15, "ntest": 292, "ntf": 699, "nth": [266, 707, 992], "nthe": [168, 257, 359], "ntime": [9, 270], "nto": [203, 268], "ntol": 146, "ntrain": 48, "ntree": 2, "ntrue": [4, 325, 326, 1024], "ntt": 699, "ntu": [173, 373, 487, 508, 509, 658], "nu": [5, 7, 9, 158, 211, 226, 337, 365, 416, 419, 619, 677, 906, 907, 908, 998, 1006, 1007, 1046, 1050], "nuanc": 393, "nuc": 278, "nuclear": [146, 376], "nuclei": [146, 376], "nudge_dataset": 302, "nuff": 1042, "nugmanov": [1043, 1044], "nuisanc": 419, "nukariya": [1047, 1048], "null": [42, 69, 167, 168, 169, 253, 259, 265, 409, 413, 496, 648, 669, 680, 704, 731, 757, 795, 829, 988, 989, 992, 1007, 1045], "null_count": 11, "nullabl": [627, 628, 629, 630, 1046, 1050], "nullformatt": [218, 220, 223, 283], "nullloc": 288, "num": [2, 10, 69, 146, 149, 154, 155, 156, 168, 169, 199, 266, 267, 319, 321, 322, 416, 496, 632], "num_col": 240, "num_cor": 385, "num_depend": 253, "num_featur": [990, 1050], "num_linear_processor": 130, "num_missing_cel": 125, "num_pip": 240, "num_preprocess": 464, "num_proc": [228, 316], "num_sampl": [800, 814, 1050], "num_selector": 130, "num_sent": 68, "num_thread": 283, "num_tree_processor": 130, "num_trial": 264, "numba": [283, 1013], "number": [2, 3, 5, 6, 8, 10, 11, 12, 17, 18, 23, 24, 25, 30, 31, 34, 36, 37, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 55, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 73, 80, 83, 84, 89, 90, 93, 95, 97, 98, 100, 109, 110, 112, 115, 117, 118, 120, 121, 122, 123, 126, 130, 132, 142, 143, 144, 146, 157, 158, 162, 164, 167, 168, 173, 181, 186, 196, 197, 198, 199, 204, 205, 211, 212, 213, 214, 215, 218, 226, 230, 234, 236, 237, 243, 244, 246, 248, 249, 252, 253, 254, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 278, 283, 285, 289, 290, 305, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 329, 338, 343, 345, 351, 352, 355, 359, 361, 366, 367, 371, 373, 374, 375, 376, 377, 379, 382, 383, 385, 386, 387, 388, 391, 392, 393, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 582, 583, 584, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 707, 712, 713, 714, 716, 718, 720, 724, 728, 729, 730, 731, 734, 735, 738, 740, 752, 755, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 928, 940, 941, 944, 945, 960, 961, 963, 966, 967, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1019, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "number_norm": 17, "numbernormalizingvector": 17, "numer": [2, 11, 17, 64, 69, 73, 117, 119, 130, 146, 154, 157, 168, 169, 186, 197, 215, 236, 238, 240, 293, 311, 318, 322, 352, 373, 374, 376, 382, 384, 385, 391, 392, 393, 409, 411, 416, 417, 418, 419, 421, 422, 440, 443, 447, 459, 471, 472, 475, 478, 489, 490, 491, 496, 500, 501, 502, 504, 505, 510, 531, 533, 535, 540, 541, 547, 561, 562, 567, 581, 590, 611, 617, 620, 627, 630, 632, 633, 646, 652, 654, 672, 687, 690, 694, 714, 778, 788, 794, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 839, 840, 841, 842, 843, 861, 862, 867, 872, 877, 878, 885, 916, 917, 918, 924, 925, 940, 941, 981, 982, 988, 989, 993, 1000, 1002, 1003, 1008, 1016, 1017, 1019, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numeric_featur": [69, 319], "numeric_onli": 168, "numeric_preprocessor": 238, "numeric_transform": [69, 319], "numerical_column": [167, 169, 467], "numerical_columns_subset": 119, "numerical_featur": [168, 311], "numerical_pip": 169, "numerical_transform": 69, "numfocu": 0, "numpi": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 88, 90, 93, 94, 95, 96, 97, 99, 100, 102, 103, 110, 111, 112, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 356, 357, 358, 359, 361, 365, 372, 373, 374, 377, 379, 380, 381, 382, 383, 385, 387, 388, 391, 392, 393, 396, 399, 401, 402, 404, 405, 409, 410, 413, 414, 415, 416, 417, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 490, 493, 494, 496, 503, 506, 508, 509, 521, 527, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 569, 570, 581, 582, 585, 586, 588, 589, 591, 601, 604, 618, 627, 628, 629, 630, 631, 632, 633, 643, 646, 647, 649, 652, 653, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 684, 687, 688, 691, 692, 693, 694, 695, 699, 702, 703, 706, 707, 709, 712, 714, 726, 727, 729, 730, 732, 734, 735, 738, 739, 754, 756, 773, 779, 781, 782, 783, 784, 787, 788, 789, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 827, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 906, 907, 909, 910, 912, 920, 921, 922, 923, 927, 929, 938, 939, 940, 941, 945, 946, 947, 954, 955, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 978, 979, 981, 982, 987, 988, 990, 992, 993, 995, 998, 1002, 1004, 1007, 1008, 1011, 1013, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numpydoc": [379, 393, 396, 401], "nune": 1036, "nuniformli": 126, "nuniqu": 311, "nurseit": 1052, "nusvc": [365, 437, 907, 993, 1007, 1035, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1049], "nusvr": [5, 365, 910, 1007, 1037, 1043, 1045, 1046, 1047, 1049, 1050], "nutshel": 990, "nv": 10, "nvidia": [0, 391], "nvirginica": 268, "nwanna": 1050, "nweight": 132, "nwith": [35, 55, 59, 145, 351], "nx": [9, 296, 374, 498], "nxorabl": 1045, "ny": [9, 11, 258, 296, 374, 376, 498, 982, 1004], "nyc": [1011, 1017], "nymark": 1050, "nystroem": [2, 161, 211, 226, 231, 371, 640, 641, 642, 677, 870, 909, 910, 1030, 1036, 1042, 1045, 1047, 1048, 1049], "nystroem_approx_svm": 231, "nystroem_scor": 231, "nystroem_tim": 231, "nystrom": [879, 1044, 1045], "nystr\u00f6m": [2, 984], "nyu": [0, 179, 853], "nz": 530, "nzw": 1043, "n\u00e1jera": [1039, 1040, 1041, 1042], "n\u00e1pole": 1048, "o": [0, 15, 17, 25, 28, 36, 47, 53, 58, 59, 61, 62, 80, 83, 89, 95, 127, 146, 157, 185, 190, 195, 197, 212, 232, 243, 253, 259, 261, 268, 305, 306, 310, 316, 319, 322, 329, 342, 355, 365, 374, 376, 379, 396, 409, 411, 414, 416, 420, 422, 444, 447, 448, 450, 473, 475, 499, 534, 604, 627, 666, 667, 692, 832, 860, 875, 916, 960, 961, 984, 986, 988, 989, 992, 993, 995, 996, 1006, 1007, 1008, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "oa": [8, 13, 27, 32, 33, 75, 79, 80, 81, 100, 124, 164, 292, 294, 411, 469, 470, 473, 474, 476, 477, 512, 549, 800, 986, 1014], "oa_ms": 77, "oa_shrinkag": 77, "oak": 311, "oarc": 988, "ob2019": 992, "obaja": 1039, "obatin": 310, "obei": [393, 990], "obj": [233, 402, 567, 568, 949, 951, 952, 953, 958], "obj_func": [610, 611], "object": [2, 9, 12, 13, 17, 24, 25, 42, 48, 60, 64, 68, 69, 96, 107, 125, 130, 136, 145, 154, 164, 168, 181, 193, 197, 213, 215, 225, 233, 237, 239, 240, 241, 253, 257, 266, 268, 269, 271, 296, 311, 318, 319, 321, 322, 325, 351, 352, 361, 372, 373, 374, 379, 380, 382, 384, 385, 386, 388, 392, 393, 394, 399, 402, 409, 410, 411, 414, 417, 418, 419, 423, 425, 430, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 711, 718, 732, 733, 742, 758, 759, 781, 782, 789, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 919, 924, 925, 926, 927, 928, 931, 935, 937, 947, 948, 949, 950, 951, 952, 953, 955, 957, 958, 960, 977, 978, 980, 988, 989, 990, 991, 995, 998, 999, 1002, 1005, 1006, 1007, 1012, 1013, 1014, 1019, 1020, 1022, 1023, 1026, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "object_nam": [233, 949, 952], "obozinski": 414, "obscur": [999, 1051], "observ": [2, 3, 5, 7, 9, 11, 12, 18, 22, 25, 32, 35, 38, 41, 51, 60, 69, 76, 78, 79, 80, 94, 95, 98, 100, 109, 112, 113, 115, 116, 122, 125, 126, 129, 137, 138, 146, 149, 152, 154, 155, 156, 158, 167, 168, 169, 176, 177, 192, 193, 195, 197, 198, 199, 201, 211, 215, 222, 223, 229, 230, 236, 253, 255, 259, 261, 262, 266, 273, 283, 286, 289, 296, 310, 321, 328, 337, 338, 342, 343, 350, 351, 352, 357, 358, 374, 376, 393, 396, 406, 409, 411, 412, 413, 414, 415, 418, 419, 441, 443, 445, 446, 447, 449, 459, 460, 469, 470, 471, 472, 473, 474, 475, 476, 524, 532, 551, 552, 563, 610, 611, 646, 652, 657, 701, 716, 718, 758, 821, 842, 850, 883, 885, 988, 991, 992, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1016, 1020, 1022, 1023, 1025, 1036, 1048, 1049, 1050, 1051], "observatori": 154, "obsolet": [1035, 1051], "obstruct": 1042, "obtain": [2, 5, 7, 10, 11, 18, 25, 46, 53, 55, 56, 69, 72, 73, 98, 100, 109, 119, 122, 123, 128, 136, 146, 151, 153, 167, 168, 181, 197, 199, 201, 211, 222, 236, 243, 244, 245, 253, 255, 259, 260, 261, 265, 268, 286, 310, 318, 336, 342, 351, 352, 359, 361, 374, 376, 381, 393, 402, 406, 408, 409, 411, 412, 414, 416, 417, 418, 419, 437, 442, 469, 496, 532, 533, 555, 556, 557, 558, 559, 560, 563, 564, 565, 593, 606, 614, 645, 659, 661, 666, 668, 672, 674, 676, 677, 687, 708, 712, 726, 739, 756, 793, 806, 823, 829, 832, 833, 836, 850, 861, 881, 893, 906, 909, 912, 913, 941, 982, 984, 986, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1002, 1006, 1007, 1041, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "obviat": 984, "obviou": [167, 342, 361, 365, 405, 414], "obvious": [162, 365, 1028], "oc": 1050, "occam": 1026, "occas": 379, "occasion": [394, 727, 1044], "occup": [167, 305, 322, 496], "occupation_cler": 167, "occupation_manag": 167, "occupation_oth": 167, "occupation_profession": 167, "occupation_sal": 167, "occupation_servic": 167, "occupi": [409, 992], "occur": [13, 68, 120, 197, 201, 215, 345, 361, 379, 381, 387, 394, 405, 409, 411, 413, 417, 444, 508, 509, 572, 581, 590, 627, 671, 798, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 874, 929, 992, 994, 1002, 1028, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "occurr": [197, 311, 351, 352, 374, 379, 409, 417, 569, 570, 581, 589, 590, 617, 627, 628, 629, 630, 783, 839, 867, 994, 1036, 1041], "ocean": 296, "ocsvm": [7, 211], "oct": [692, 769, 989, 995], "octob": [77, 374, 1035, 1042, 1048, 1049, 1051], "od280": 376, "od315": 376, "odd": [262, 416, 514, 712, 992, 1042, 1043], "off": [3, 10, 12, 35, 37, 38, 45, 46, 50, 51, 76, 80, 83, 93, 115, 125, 145, 146, 164, 201, 219, 231, 235, 251, 252, 258, 260, 261, 262, 276, 278, 305, 326, 328, 330, 338, 347, 350, 359, 374, 379, 381, 393, 408, 409, 411, 418, 442, 496, 553, 554, 559, 560, 588, 591, 634, 656, 658, 692, 715, 797, 798, 800, 803, 804, 814, 816, 822, 827, 865, 884, 945, 991, 997, 1007, 1013, 1014, 1035, 1039, 1040, 1042], "offer": [2, 115, 381, 387, 391, 392, 393, 396, 402, 413, 414, 416, 417, 981, 982, 993, 996, 1008, 1012, 1013, 1017, 1041, 1053], "offic": 1017, "offici": [374, 381, 393, 396, 493, 497, 1012, 1028, 1043, 1044, 1047], "offlin": [253, 365, 379], "offset": [112, 173, 391, 411, 414, 469, 508, 509, 563, 632, 633, 641, 642, 644, 645, 677, 728, 775, 777, 850, 908, 992, 1006, 1026, 1043], "offset_": [469, 563, 677, 850, 908, 1043], "offset_init": 677, "offsetbox": 219, "offsetimag": 219, "ofmulticlass": 1007, "often": [2, 17, 22, 23, 25, 31, 68, 72, 115, 125, 128, 153, 161, 167, 168, 198, 215, 219, 236, 245, 261, 264, 305, 310, 338, 347, 350, 351, 352, 365, 366, 373, 374, 376, 379, 381, 384, 387, 391, 392, 393, 395, 402, 406, 409, 410, 411, 413, 414, 416, 417, 419, 421, 468, 521, 524, 533, 536, 632, 646, 647, 652, 653, 660, 661, 662, 663, 672, 674, 687, 728, 874, 882, 890, 902, 981, 982, 984, 987, 988, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1002, 1005, 1006, 1008, 1019, 1021, 1026, 1027, 1028, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "og": 417, "ogbonna": 1048, "ogordon100": 1048, "ogrid": 12, "ogrisel": 1053, "ogu": 417, "ogura": 1050, "oh": [877, 1045], "ohad": 1049, "ohayon": [1043, 1044, 1051], "ohio": 374, "ohno": 406, "oj_lappi": 1047, "oja": [421, 533], "ojala": [265, 413, 829], "ojeda": 1049, "ok": [8, 379, 998], "okal": 1039, "okbalefthand": 1041, "okcupid": 1010, "okhlopkov": [1041, 1042], "okon": 1049, "okroshiashvili": 1048, "ol": [176, 187, 192, 194, 195, 203, 214, 318, 656, 988], "ol2001": 982, "olatunji": 1050, "old": [215, 379, 383, 385, 409, 468, 536, 646, 652, 902, 989, 1013, 1035, 1040, 1041, 1043, 1048, 1049, 1050], "olden": 1043, "older": [199, 233, 378, 383, 402, 464, 1010, 1016, 1033, 1038, 1045, 1047], "oldest": [383, 496], "oldid": 992, "oldja": 1047, "oleg": 1045, "oleggio": 1039, "olegovich": 1042, "oleh": [1047, 1049], "oleksandr": [1043, 1044, 1045, 1046, 1049], "oleksii": 1052, "olemiss": 679, "olga": [628, 982], "oli": 1042, "oliblum90": [1042, 1043], "olicairn": 1046, "olimpio": 1043, "oliph": 1035, "oliv": [328, 330, 1043, 1044, 1046, 1047, 1048], "oliveira": [1041, 1043, 1045, 1049], "olivetti": [93, 117, 372, 414, 495, 1030, 1035, 1043], "olivetti_fac": 495, "olivi": [0, 13, 15, 35, 46, 59, 186, 219, 260, 262, 350, 351, 352, 394, 397, 900, 1005, 1011, 1013, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "oll": 1050, "olr": 176, "olsen": 1042, "olshen": [912, 913, 1008], "olson": 1041, "olszewski": 1048, "olvi": [146, 376], "om": 1042, "omar": [0, 397, 1045, 1050, 1051, 1052, 1053, 1054], "omarmanzoor": 1051, "omega": [345, 412, 986], "omega_": 986, "omega_k": [412, 986], "omer": 1040, "omit": [116, 166, 167, 330, 384, 422, 475, 534, 666, 668, 676, 807, 809, 832, 833, 836, 839, 840, 841, 842, 843, 861, 990, 997], "omohundro": 995, "omp": [96, 102, 196, 414, 531, 537, 542, 548, 664, 665, 685, 686, 1015, 1030, 1035, 1043], "omp_cv": 196, "omp_get_max_thread": 380, "omp_num_thread": 366, "omtcyfz": 1042, "onc": [2, 6, 11, 48, 143, 146, 149, 154, 219, 233, 236, 253, 257, 260, 273, 278, 283, 311, 315, 319, 350, 352, 359, 361, 365, 367, 373, 374, 377, 379, 383, 384, 385, 386, 387, 392, 393, 394, 402, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 449, 451, 453, 472, 508, 509, 538, 544, 551, 559, 560, 590, 591, 597, 611, 619, 627, 647, 651, 653, 655, 661, 663, 665, 666, 667, 668, 676, 677, 678, 697, 712, 716, 718, 736, 781, 801, 805, 808, 818, 822, 839, 840, 841, 842, 843, 916, 988, 989, 995, 1002, 1006, 1007, 1008, 1019, 1028, 1032, 1035, 1043, 1045, 1046, 1047, 1048, 1052], "one": [0, 2, 6, 7, 8, 11, 13, 15, 23, 24, 25, 30, 31, 32, 35, 38, 45, 51, 53, 55, 56, 58, 59, 62, 64, 69, 79, 87, 88, 89, 93, 96, 98, 102, 114, 115, 120, 122, 125, 126, 130, 133, 145, 146, 149, 156, 157, 161, 166, 167, 168, 169, 170, 173, 176, 177, 181, 186, 187, 189, 190, 191, 193, 197, 199, 206, 207, 212, 215, 220, 226, 233, 234, 236, 245, 248, 253, 255, 256, 257, 259, 260, 262, 263, 266, 267, 268, 269, 278, 281, 283, 288, 302, 306, 307, 310, 311, 315, 317, 318, 319, 328, 337, 338, 346, 350, 351, 352, 355, 359, 361, 365, 366, 367, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 399, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 464, 469, 474, 487, 488, 490, 491, 492, 493, 494, 495, 496, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 534, 539, 540, 541, 543, 547, 551, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 581, 583, 584, 588, 589, 590, 591, 610, 611, 615, 616, 620, 627, 630, 632, 633, 634, 635, 643, 647, 648, 649, 650, 654, 657, 658, 659, 661, 666, 668, 669, 671, 673, 674, 675, 676, 678, 680, 688, 692, 695, 699, 703, 709, 711, 720, 729, 730, 734, 738, 750, 751, 754, 763, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 803, 804, 806, 807, 808, 810, 812, 814, 818, 819, 822, 823, 825, 827, 828, 830, 831, 832, 833, 834, 836, 837, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 860, 864, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 883, 884, 885, 888, 890, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 920, 930, 933, 943, 963, 981, 982, 984, 986, 987, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1017, 1019, 1023, 1025, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "one_class": 234, "one_hot": 311, "one_hot_encod": [2, 119], "one_hot_encoder_": 566, "one_hot_linear_pipelin": 2, "one_hot_linear_predict": 2, "one_hot_poly_pipelin": 2, "one_hot_poly_predict": 2, "one_hot_result": 119, "one_hot_tim": 2, "one_imag": [417, 584, 587], "one_vs_on": [419, 610, 993], "one_vs_rest": [610, 993], "oneclasssvm": [7, 9, 211, 226, 318, 337, 563, 677, 850, 998, 1006, 1007, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "oned": 396, "onehot": [238, 306, 307, 410, 869, 1002], "onehot_categor": [197, 215], "onehotencod": [2, 69, 114, 119, 130, 167, 168, 197, 215, 228, 236, 238, 240, 311, 316, 318, 321, 322, 373, 393, 410, 416, 466, 467, 566, 581, 582, 867, 871, 872, 875, 878, 885, 982, 1002, 1036, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "onehotencoderonehotencod": [69, 114, 130, 167, 168, 228, 238, 316, 319], "ones": [2, 9, 32, 41, 53, 69, 79, 120, 126, 149, 173, 181, 201, 202, 226, 229, 233, 259, 267, 270, 290, 309, 326, 347, 365, 366, 379, 387, 393, 409, 411, 413, 416, 424, 427, 431, 450, 532, 566, 581, 610, 611, 618, 644, 645, 658, 659, 670, 676, 703, 796, 802, 807, 818, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 879, 883, 946, 988, 992, 997, 998, 1002, 1007, 1026, 1035, 1043, 1044, 1045], "onetoonefeaturemixin": [381, 433], "onevsoneclassifi": [278, 399, 833, 834, 1036, 1038, 1039, 1041, 1042, 1044, 1047, 1049, 1052], "onevsrestclassifi": [28, 189, 212, 234, 266, 268, 278, 399, 406, 658, 659, 832, 834, 904, 1019, 1036, 1037, 1039, 1041, 1042, 1048, 1049, 1052, 1053], "ong": 708, "ongari": 1052, "onggo": 1051, "ongo": [321, 380, 394], "onli": [2, 5, 9, 12, 13, 18, 22, 23, 24, 25, 28, 31, 32, 35, 37, 38, 43, 47, 51, 53, 56, 64, 68, 69, 70, 72, 73, 79, 88, 96, 97, 99, 103, 109, 111, 116, 117, 118, 119, 121, 129, 130, 141, 142, 143, 146, 149, 151, 156, 158, 162, 164, 166, 167, 168, 173, 175, 180, 181, 186, 193, 197, 198, 200, 203, 205, 206, 215, 216, 218, 219, 226, 228, 230, 232, 233, 237, 240, 243, 244, 245, 248, 249, 253, 255, 257, 259, 261, 262, 265, 266, 267, 268, 270, 271, 273, 278, 281, 283, 289, 291, 294, 296, 301, 305, 306, 310, 311, 317, 318, 325, 326, 328, 334, 335, 338, 342, 343, 345, 346, 350, 351, 352, 355, 356, 359, 361, 365, 366, 367, 372, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 489, 490, 491, 492, 494, 496, 497, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 516, 519, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 707, 709, 713, 726, 729, 730, 734, 736, 737, 738, 741, 742, 743, 756, 758, 760, 774, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 928, 930, 933, 941, 943, 946, 948, 953, 958, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1013, 1014, 1017, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "onlin": [3, 4, 6, 13, 34, 49, 66, 93, 96, 117, 164, 175, 205, 211, 216, 235, 253, 300, 367, 374, 378, 384, 393, 414, 417, 419, 442, 446, 447, 449, 495, 502, 531, 536, 537, 538, 539, 545, 546, 582, 584, 658, 666, 667, 668, 676, 678, 830, 839, 840, 841, 842, 843, 846, 847, 852, 854, 855, 873, 874, 884, 904, 905, 984, 988, 996, 998, 1011, 1014, 1015, 1017, 1026, 1030, 1035, 1039, 1040, 1042, 1050], "onlineldavb": 536, "only_non_neg": 1048, "only_physical_cor": 115, "onnx": [1012, 1013, 1030], "onnxruntim": 402, "onto": [84, 219, 220, 231, 305, 391, 414, 417, 421, 446, 448, 461, 533, 539, 543, 627, 628, 630, 688, 986, 990, 995], "onward": [878, 1039, 1053], "onx": 402, "oob": [108, 109, 121, 134, 164, 416, 515, 564, 1013, 1014, 1037, 1048, 1052], "oob_best_it": 121, "oob_color": 121, "oob_decision_function_": [555, 557, 564], "oob_error": 113, "oob_improvement_": [121, 416, 559, 560, 1037], "oob_lin": 121, "oob_prediction_": [556, 558, 565], "oob_scor": [113, 416, 555, 556, 557, 558, 564, 565, 1040, 1042], "oob_score_": [113, 555, 556, 557, 558, 559, 560, 564, 565, 1037, 1051], "oob_scores_": [559, 560, 1051], "op": [383, 428, 658, 659, 666, 667, 668, 676, 677, 678, 861, 862, 904, 1002], "opaqu": 1000, "open": [6, 10, 15, 220, 373, 374, 377, 378, 379, 383, 385, 391, 392, 394, 402, 410, 417, 487, 496, 508, 509, 982, 1012, 1017, 1022, 1038, 1042, 1043, 1045, 1051], "open_pric": 10, "openbla": [365, 366, 377, 391, 960, 1048, 1052, 1053], "openblas_num_thread": 366, "opencv": 374, "opengl": 1028, "opengraph": [379, 396, 401], "openml": [2, 11, 69, 130, 154, 167, 197, 205, 213, 215, 227, 253, 273, 278, 281, 301, 372, 396, 496, 1030, 1043, 1045, 1048], "openml100": 373, "openmp": [316, 377, 382, 391, 393, 409, 416, 960, 1046, 1048, 1051], "openrec": 1012, "opentsn": 692, "oper": [12, 17, 146, 157, 164, 227, 232, 239, 251, 253, 254, 256, 261, 266, 276, 328, 352, 365, 366, 376, 377, 379, 382, 385, 391, 393, 394, 396, 402, 404, 408, 413, 414, 416, 417, 418, 422, 448, 461, 468, 475, 482, 483, 484, 485, 504, 533, 534, 541, 551, 552, 566, 572, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 616, 621, 624, 630, 635, 643, 658, 689, 693, 702, 706, 707, 708, 727, 774, 781, 782, 788, 789, 819, 830, 833, 844, 845, 867, 871, 876, 887, 888, 902, 909, 912, 943, 960, 965, 988, 995, 1002, 1007, 1012, 1014, 1017, 1026, 1039, 1041, 1042, 1043, 1045, 1046, 1051], "operand": 419, "operation": [215, 1017], "operatornam": [414, 741, 988, 992, 1008], "opinion": 394, "opitz": 992, "opportun": [534, 1006], "oppos": [65, 233, 383, 404, 409, 900, 995, 1007, 1019, 1035, 1053], "opposit": [23, 51, 65, 98, 167, 168, 186, 253, 266, 393, 406, 411, 413, 418, 443, 447, 449, 469, 538, 540, 547, 563, 712, 730, 850, 908, 1035], "opposite_lof_scor": 850, "opt": [377, 381], "opta": 897, "optic": [34, 42, 66, 164, 319, 328, 372, 420, 444, 446, 455, 456, 457, 502, 1014, 1029, 1030, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "optim": [5, 11, 12, 25, 51, 52, 55, 58, 70, 76, 77, 93, 120, 121, 123, 125, 145, 146, 149, 150, 153, 154, 155, 156, 157, 181, 185, 186, 190, 205, 213, 232, 236, 253, 257, 264, 267, 272, 273, 278, 281, 287, 302, 305, 310, 319, 328, 340, 345, 350, 351, 352, 361, 365, 368, 373, 376, 379, 381, 382, 391, 393, 396, 403, 405, 408, 409, 411, 413, 414, 416, 418, 419, 420, 444, 447, 448, 449, 450, 452, 457, 461, 462, 472, 473, 479, 531, 534, 535, 537, 539, 543, 557, 558, 559, 560, 574, 610, 611, 619, 620, 635, 638, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 687, 690, 692, 694, 695, 701, 723, 730, 799, 800, 814, 822, 846, 847, 848, 850, 852, 853, 854, 855, 856, 861, 862, 880, 892, 896, 897, 904, 905, 906, 907, 908, 909, 910, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 1006, 1007, 1008, 1012, 1017, 1023, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051], "optima": 419, "optimis": [381, 409, 995, 1038, 1048, 1050], "optimist": [11, 186, 264, 350, 361, 707, 988, 992], "optimum": [59, 155, 167, 173, 253, 272, 408, 414, 472, 988, 991], "option": [2, 28, 44, 50, 100, 115, 123, 155, 162, 178, 181, 198, 236, 253, 262, 268, 316, 350, 355, 361, 367, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 388, 391, 393, 394, 396, 409, 410, 412, 413, 414, 416, 417, 420, 433, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 694, 695, 711, 713, 717, 729, 730, 735, 736, 737, 757, 758, 759, 764, 766, 767, 771, 774, 775, 776, 777, 778, 781, 783, 784, 787, 792, 793, 795, 799, 801, 802, 803, 804, 806, 807, 809, 818, 822, 823, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 931, 978, 981, 982, 988, 991, 992, 995, 1002, 1005, 1007, 1008, 1013, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "option_context": 215, "ora": 1048, "oracl": [31, 197, 215, 422, 469, 470, 473, 474, 475, 476, 986, 1035], "orallo": 992, "orang": [5, 7, 51, 78, 90, 94, 95, 100, 109, 124, 125, 127, 156, 162, 185, 186, 207, 234, 246, 253, 294, 316, 322, 358, 993, 1052], "orazbayev": 1049, "orbit": [350, 351], "order": [2, 12, 18, 22, 25, 45, 53, 62, 63, 70, 76, 87, 102, 117, 118, 119, 123, 125, 138, 154, 166, 167, 170, 173, 186, 190, 193, 197, 198, 203, 211, 215, 220, 230, 233, 236, 240, 245, 254, 257, 259, 266, 281, 302, 305, 310, 311, 312, 317, 318, 345, 350, 352, 361, 365, 366, 374, 379, 380, 381, 384, 385, 388, 393, 396, 399, 402, 409, 410, 411, 413, 414, 415, 416, 417, 419, 421, 440, 443, 446, 447, 449, 450, 455, 456, 457, 459, 464, 488, 489, 490, 495, 497, 515, 534, 535, 539, 540, 541, 543, 547, 551, 553, 555, 556, 557, 558, 559, 563, 564, 565, 566, 567, 581, 588, 591, 593, 594, 597, 606, 607, 608, 610, 622, 627, 631, 640, 658, 659, 665, 676, 685, 686, 688, 689, 693, 697, 699, 700, 702, 704, 712, 713, 718, 722, 726, 729, 730, 738, 740, 741, 742, 754, 756, 778, 782, 783, 784, 787, 788, 789, 794, 799, 800, 801, 803, 804, 805, 807, 811, 814, 818, 819, 822, 825, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 854, 861, 864, 875, 877, 878, 879, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 924, 925, 930, 941, 956, 961, 982, 988, 989, 992, 993, 995, 996, 1002, 1005, 1006, 1007, 1008, 1013, 1023, 1025, 1026, 1028, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "order_": [835, 838], "order_centroid": 351, "ordered_sampl": 215, "ordereddict": 113, "ordering_": [63, 409, 450, 455, 456, 457], "ordin": [2, 51, 69, 130, 236, 308, 311, 312, 317, 320, 373, 393, 416, 496, 567, 709, 869, 872, 877, 878, 885, 988, 989, 1002, 1013, 1043, 1049], "ordinal_encod": [119, 236], "ordinal_result": 119, "ordinalencod": [119, 130, 168, 169, 197, 236, 311, 320, 373, 393, 581, 840, 872, 877, 885, 982, 994, 1002, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052], "ordinalencoderordinalencod": [130, 168, 169, 311], "ordinari": [95, 112, 164, 175, 176, 179, 181, 187, 193, 199, 200, 202, 214, 216, 318, 635, 646, 652, 654, 655, 656, 657, 672, 678, 682, 683, 687, 1006, 1014, 1015, 1030], "ordinarili": [391, 393], "ordowski": 992, "oregon": 311, "oren": 1043, "oresti": 1044, "orfano": [1048, 1049, 1050, 1051, 1052], "org": [2, 10, 12, 13, 15, 22, 24, 30, 35, 44, 46, 59, 64, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 158, 167, 168, 169, 173, 178, 188, 189, 197, 205, 213, 215, 219, 227, 228, 229, 231, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 262, 266, 271, 273, 281, 301, 302, 311, 316, 317, 319, 320, 322, 325, 326, 327, 330, 350, 351, 352, 359, 366, 372, 377, 379, 382, 385, 387, 394, 396, 413, 595, 636, 668, 671, 676, 695, 705, 769, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 988, 992, 1008, 1010, 1030, 1043, 1047], "organ": [0, 9, 11, 68, 78, 350, 373, 378, 379, 394, 852, 1012], "ori": 1041, "orient": [28, 93, 167, 218, 305, 393, 916, 989], "orig": [12, 290], "orig_coin": [44, 45], "orig_data_ax": 98, "origin": [2, 3, 12, 18, 19, 44, 45, 46, 49, 54, 56, 72, 73, 88, 93, 95, 96, 102, 125, 128, 142, 143, 146, 149, 151, 153, 154, 161, 162, 168, 173, 185, 186, 201, 218, 219, 220, 222, 223, 230, 231, 232, 236, 249, 253, 256, 262, 286, 291, 302, 306, 310, 321, 326, 342, 350, 352, 361, 366, 374, 376, 378, 379, 381, 383, 384, 391, 393, 402, 405, 409, 410, 413, 414, 416, 417, 419, 420, 421, 422, 434, 437, 441, 443, 444, 445, 446, 447, 449, 450, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 493, 494, 495, 501, 519, 531, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 581, 582, 584, 588, 590, 591, 594, 607, 608, 610, 611, 614, 630, 632, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 692, 696, 701, 728, 763, 769, 799, 801, 802, 807, 809, 818, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 880, 881, 882, 883, 884, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 922, 924, 925, 929, 930, 951, 963, 966, 985, 986, 988, 989, 991, 992, 995, 998, 1003, 1004, 1005, 1006, 1009, 1012, 1017, 1019, 1028, 1038, 1039, 1041, 1043, 1045, 1047, 1049, 1051], "original_param": 124, "original_shap": 46, "original_sklearn_vers": [402, 576], "original_space_centroid": 351, "orii": 1037, "orphan": [448, 461, 1035], "orr": [996, 1006], "orr\u00f9": 1038, "orthogon": [52, 94, 95, 96, 102, 164, 175, 216, 272, 407, 414, 526, 531, 537, 539, 542, 543, 548, 664, 665, 685, 686, 1004, 1014, 1015, 1030, 1035], "orthogonal_mp": [548, 664, 665, 686, 988], "orthogonal_mp_gram": [664, 665, 685, 1049], "orthogonalmatchingpursuit": [196, 665, 685, 686, 988, 993, 1035, 1037, 1040, 1043, 1048, 1053], "orthogonalmatchingpursuitcv": [196, 399, 664, 1037, 1048, 1052], "orthonorm": [4, 388, 940, 984, 1024], "orthotrop": 995, "ortiz": [1045, 1051], "osa": 1043, "osaid": 1043, "osborn": [1038, 1039], "oscar": [1038, 1042], "oscil": [127, 168, 202, 409, 440], "oscillatori": [198, 1002], "osei": 1049, "osendorf": [1035, 1036], "oserror": [396, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498], "osindero": [860, 997], "osman": [1044, 1050], "osx": 365, "other": [0, 2, 6, 10, 11, 22, 25, 28, 29, 31, 35, 38, 42, 50, 55, 64, 67, 69, 70, 84, 95, 96, 98, 100, 112, 114, 115, 118, 119, 122, 123, 125, 126, 132, 141, 161, 162, 164, 166, 167, 168, 169, 173, 176, 190, 197, 201, 215, 218, 219, 220, 222, 226, 227, 228, 230, 232, 233, 236, 237, 238, 245, 248, 253, 254, 256, 259, 260, 261, 268, 269, 273, 278, 288, 289, 290, 304, 305, 309, 310, 312, 313, 315, 316, 318, 322, 325, 338, 342, 344, 347, 350, 351, 355, 359, 361, 365, 371, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 392, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 437, 443, 444, 446, 447, 448, 449, 450, 452, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 496, 497, 503, 533, 534, 535, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 594, 597, 602, 610, 611, 612, 613, 620, 627, 628, 630, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 696, 699, 704, 718, 763, 774, 778, 785, 792, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 859, 861, 862, 864, 865, 867, 869, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 892, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 935, 949, 981, 982, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1010, 1013, 1014, 1015, 1016, 1017, 1019, 1023, 1026, 1027, 1030, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052], "other_parti": 253, "other_payment_plan": 253, "other_scor": 384, "otherwis": [9, 54, 60, 111, 158, 162, 178, 199, 205, 253, 296, 342, 345, 361, 367, 381, 383, 385, 393, 399, 409, 411, 413, 417, 419, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 527, 533, 534, 535, 536, 538, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 602, 610, 611, 614, 631, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 690, 692, 696, 697, 698, 700, 702, 703, 707, 709, 713, 714, 724, 726, 727, 728, 729, 730, 738, 741, 752, 754, 755, 756, 766, 774, 778, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 822, 823, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 859, 861, 862, 864, 867, 868, 869, 870, 871, 875, 876, 883, 884, 885, 886, 889, 890, 891, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 919, 925, 927, 940, 941, 951, 953, 976, 978, 987, 988, 989, 992, 995, 996, 998, 999, 1002, 1004, 1006, 1007, 1012, 1017, 1019, 1037, 1043, 1044, 1045, 1048, 1051], "ott": 1039, "otto": 1010, "oudshoorn": [627, 982], "ought": 365, "our": [0, 2, 3, 5, 9, 10, 11, 40, 51, 54, 68, 69, 78, 79, 84, 93, 94, 109, 110, 116, 119, 120, 122, 123, 141, 146, 149, 154, 156, 166, 167, 168, 169, 170, 197, 201, 215, 220, 222, 233, 252, 253, 259, 262, 265, 266, 286, 301, 305, 311, 316, 318, 330, 335, 341, 343, 345, 350, 351, 352, 361, 366, 378, 383, 384, 387, 391, 392, 393, 394, 399, 409, 413, 416, 417, 419, 420, 444, 450, 563, 644, 692, 708, 720, 726, 738, 756, 846, 847, 848, 850, 852, 854, 855, 856, 981, 982, 988, 989, 992, 998, 1002, 1005, 1006, 1007, 1013, 1016, 1017, 1019, 1026, 1027, 1028, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "our_rand_r": 1044, "oura": [1048, 1049, 1050], "ourselv": 1017, "ouss1508": [1050, 1051], "out": [0, 1, 2, 5, 7, 8, 10, 11, 13, 14, 15, 24, 28, 38, 48, 53, 54, 68, 69, 100, 107, 108, 113, 115, 116, 123, 124, 134, 138, 157, 164, 166, 167, 169, 181, 197, 199, 201, 205, 215, 233, 236, 243, 245, 253, 257, 259, 262, 267, 271, 278, 281, 310, 311, 318, 328, 330, 334, 335, 338, 345, 350, 364, 374, 376, 377, 379, 381, 382, 383, 385, 391, 393, 402, 409, 412, 414, 416, 417, 419, 425, 435, 436, 442, 443, 445, 446, 447, 449, 472, 482, 483, 484, 485, 499, 515, 516, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 604, 607, 608, 634, 639, 640, 641, 642, 651, 655, 666, 668, 673, 675, 676, 688, 689, 692, 701, 727, 741, 742, 800, 802, 803, 804, 805, 807, 808, 809, 810, 814, 830, 839, 840, 841, 842, 843, 848, 853, 856, 860, 861, 862, 870, 874, 881, 893, 896, 897, 919, 954, 956, 961, 982, 986, 987, 991, 992, 993, 995, 1000, 1002, 1013, 1014, 1015, 1017, 1023, 1026, 1028, 1030, 1035, 1037, 1039, 1041, 1043, 1044, 1047, 1048, 1051, 1053], "out_activation_": [861, 862], "out_bounds_predict": 199, "out_fil": [916, 1008], "out_of_bound": [229, 635], "out_of_cluster_doc": 17, "outcom": [2, 115, 167, 393, 416, 569, 658, 709, 742, 794, 832, 899, 900, 901, 906, 909, 988, 992, 1008, 1016, 1028, 1039, 1043, 1045], "outdat": 382, "outer": [18, 98, 264, 327, 451, 514, 640, 650, 651, 654, 984, 1036], "outer_cv": [264, 322], "outer_numb": 327, "outermost": 342, "outli": [7, 78, 393, 469, 474, 988, 998], "outlier": [1, 14, 32, 42, 52, 78, 79, 80, 122, 126, 149, 164, 175, 177, 195, 199, 200, 201, 202, 203, 211, 216, 225, 241, 284, 297, 304, 309, 312, 313, 337, 347, 374, 393, 409, 411, 416, 431, 446, 464, 466, 469, 470, 473, 474, 475, 476, 490, 491, 492, 496, 510, 512, 522, 524, 563, 631, 639, 649, 670, 671, 672, 676, 677, 678, 679, 692, 702, 830, 850, 854, 865, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 889, 890, 891, 892, 893, 894, 895, 907, 908, 910, 992, 1006, 1007, 1012, 1014, 1015, 1029, 1030, 1035, 1040, 1041, 1043], "outlier_detector": [236, 431], "outlier_label": [854, 1045], "outlier_label_": 854, "outlier_mask": 200, "outlier_plot": 78, "outliermixin": 1052, "outliers_": 649, "outliers_cov": 78, "outliers_fract": 226, "outliers_index": 79, "outliers_offset": 79, "outlin": [64, 118, 379, 381, 393, 394, 395, 409, 981, 1030], "outlying": 998, "outperform": [76, 84, 125, 130, 278, 310, 391, 413, 416, 452, 462, 994, 1002], "output": [10, 13, 23, 25, 35, 48, 51, 57, 96, 108, 109, 110, 112, 118, 130, 133, 134, 137, 138, 141, 149, 157, 161, 162, 164, 167, 193, 225, 233, 237, 240, 241, 246, 252, 253, 257, 259, 262, 266, 268, 269, 273, 278, 283, 306, 309, 311, 312, 315, 318, 319, 321, 351, 352, 354, 355, 357, 359, 360, 372, 373, 374, 376, 379, 381, 385, 387, 391, 392, 393, 406, 407, 408, 409, 410, 412, 413, 416, 417, 418, 419, 425, 430, 433, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 459, 460, 462, 463, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 491, 492, 493, 494, 495, 496, 497, 503, 505, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 658, 660, 661, 662, 663, 666, 667, 668, 671, 673, 674, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 692, 694, 696, 699, 700, 713, 714, 721, 723, 724, 726, 728, 735, 745, 746, 748, 750, 751, 752, 753, 754, 756, 761, 767, 772, 785, 788, 790, 791, 797, 798, 799, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 825, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 847, 848, 849, 853, 854, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 892, 893, 896, 897, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 925, 927, 930, 941, 942, 948, 949, 951, 959, 979, 981, 982, 984, 986, 988, 989, 992, 993, 994, 995, 996, 999, 1002, 1007, 1014, 1015, 1019, 1020, 1022, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "output_dict": [713, 1043, 1047], "output_distribut": [73, 305, 309, 410, 880, 881, 892, 893, 1002], "output_fil": 487, "output_indices_": [464, 1048], "output_label": 327, "output_label_arrai": 327, "outputcodeclassifi": [278, 399, 832, 833, 1042, 1047, 1051, 1052], "outputs_2d_": [846, 854, 1045], "outreach": 394, "outsid": [4, 7, 17, 118, 198, 199, 229, 240, 402, 417, 446, 635, 883, 998, 1024, 1043], "outward": 305, "outweigh": 1039, "ouvert": [758, 759, 990], "ova": [206, 666, 668, 676, 1006], "ovb": [166, 167], "over": [2, 5, 6, 7, 18, 22, 24, 25, 29, 35, 48, 53, 54, 70, 71, 72, 93, 112, 115, 120, 125, 126, 141, 145, 149, 157, 161, 166, 168, 179, 191, 197, 205, 215, 226, 236, 259, 260, 262, 264, 266, 267, 268, 271, 288, 296, 299, 300, 307, 318, 319, 321, 325, 350, 351, 365, 366, 367, 374, 375, 378, 379, 380, 381, 385, 392, 393, 404, 406, 407, 409, 410, 413, 414, 415, 416, 417, 421, 446, 449, 464, 472, 509, 533, 534, 536, 537, 538, 539, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 588, 589, 591, 594, 602, 630, 632, 633, 634, 644, 645, 646, 647, 652, 653, 658, 660, 661, 662, 663, 665, 666, 667, 668, 676, 677, 678, 685, 686, 697, 716, 718, 739, 763, 788, 793, 797, 800, 803, 804, 806, 811, 812, 814, 823, 825, 826, 827, 828, 829, 831, 860, 861, 862, 863, 879, 883, 904, 912, 914, 921, 930, 960, 981, 988, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1024, 1027, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "overal": [2, 41, 46, 109, 112, 115, 120, 130, 154, 215, 253, 256, 283, 310, 311, 351, 365, 378, 379, 385, 405, 406, 416, 447, 449, 464, 471, 472, 478, 549, 885, 989, 992, 1008, 1017, 1045], "overallqu": 130, "overcom": [116, 201, 365, 417], "overcomplet": 414, "overconstrain": 125, "overestim": [100, 361, 413], "overfit": [2, 25, 114, 120, 122, 125, 164, 168, 169, 170, 176, 198, 201, 226, 245, 251, 253, 254, 260, 264, 273, 275, 276, 299, 306, 307, 309, 310, 311, 312, 338, 345, 355, 357, 358, 374, 393, 406, 408, 413, 416, 437, 488, 489, 561, 562, 567, 568, 657, 800, 803, 804, 814, 822, 826, 827, 861, 862, 864, 879, 883, 987, 996, 998, 1000, 1002, 1008, 1014, 1017, 1026, 1038], "overflow": [378, 387, 391, 1016, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "overflowerror": 1045, "overhead": [6, 283, 366, 367, 379, 385, 388, 391, 393, 416, 441, 445, 449, 534, 699, 836, 837, 839, 840, 841, 842, 843, 844, 845, 960, 994, 995, 1038, 1043, 1044, 1047], "overlai": [387, 632], "overlaid": 999, "overlap": [10, 11, 35, 53, 88, 123, 145, 221, 245, 351, 405, 409, 413, 416, 417, 587, 792, 793, 801, 805, 807, 808, 809, 810, 818, 989, 1002, 1041], "overli": [11, 23, 24, 186, 264, 361, 414, 992], "overlin": [259, 405], "overparameter": 988, "overrid": [381, 417, 446, 450, 457, 542, 548, 588, 589, 591, 593, 594, 597, 656, 664, 685, 686, 806, 823, 846, 847, 848, 850, 852, 854, 855, 856, 1035, 1043, 1045, 1049, 1051], "overridden": [381, 393, 419, 542, 548, 616, 621, 624, 694, 1043, 1044, 1051], "oversampl": [544, 1035], "oversc": 1050, "overset": [414, 999], "overst": 167, "oversubscript": [778, 960, 1049], "overview": [73, 164, 264, 277, 279, 281, 355, 380, 382, 392, 393, 496, 734, 743, 800, 816, 827, 832, 833, 834, 912, 994, 1006, 1014, 1029, 1030], "overwhelm": 379, "overwrit": [125, 446, 496, 631, 1019, 1035, 1046, 1051, 1052], "overwrite_": 1035, "overwritten": [442, 532, 533, 534, 536, 541, 548, 607, 608, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 686, 960, 962, 1048], "ovo": [278, 315, 788, 832, 906, 909, 992, 993, 1007], "ovo_tpr": 268, "ovo_tre": 278, "ovr": [28, 189, 212, 278, 281, 315, 346, 658, 659, 788, 833, 904, 906, 909, 992, 993, 1007, 1035, 1040, 1041, 1043, 1044, 1045, 1049, 1050], "ovr_jaccard_scor": 281, "ovr_tre": 278, "ow": 58, "owen": [649, 1044, 1045], "own": [11, 32, 115, 215, 233, 248, 283, 285, 327, 351, 366, 373, 382, 383, 384, 387, 388, 396, 407, 408, 409, 421, 425, 440, 454, 533, 557, 564, 646, 797, 798, 846, 847, 848, 850, 852, 854, 855, 856, 878, 912, 914, 930, 935, 960, 988, 994, 995, 998, 1002, 1007, 1012, 1017, 1027, 1028, 1042, 1043, 1045, 1052], "own_telephon": 253, "owner": [233, 374, 376, 948, 949], "ownership": 381, "oyamada": 1040, "oyindamola": 1050, "oywa": 1045, "ozga": 1043, "ozsvald": 1037, "p": [0, 9, 12, 22, 24, 25, 39, 59, 78, 79, 83, 90, 100, 121, 142, 146, 152, 173, 209, 214, 215, 218, 220, 230, 246, 259, 265, 266, 296, 373, 374, 376, 377, 384, 387, 405, 406, 408, 409, 411, 412, 414, 416, 418, 419, 420, 422, 442, 444, 446, 447, 450, 455, 456, 457, 469, 471, 474, 475, 478, 498, 528, 534, 538, 540, 541, 547, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 564, 565, 566, 590, 592, 593, 594, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 615, 616, 627, 640, 643, 688, 690, 692, 694, 699, 705, 715, 724, 741, 752, 786, 788, 802, 808, 809, 810, 813, 829, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 860, 864, 865, 880, 892, 898, 914, 915, 916, 985, 986, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1002, 1006, 1007, 1010, 1023, 1026, 1035, 1036, 1038, 1041, 1043, 1050, 1051, 1052], "p0": 24, "p1": [24, 132], "p1d": 24, "p2": [24, 132, 215], "p3": 132, "p4": 132, "p5": 941, "p592": 113, "p_": [142, 992, 995, 1008], "p_c": [90, 523], "p_e": 716, "p_grid": 264, "p_i": [992, 995], "p_k": [266, 992], "p_n": [266, 707, 992], "p_o": 716, "p_val": 259, "p_val_uncorrect": 259, "p_valu": [604, 605, 606], "p_w": 90, "p_w_c": [90, 523], "pa": [666, 667, 901, 988, 992, 1005], "pab": [1050, 1051], "pablo": [1045, 1048, 1049], "pabloduque0": 1048, "pace": 374, "pacha": 1043, "pacif": 259, "pack": [388, 1043], "packag": [0, 44, 51, 161, 233, 283, 366, 372, 373, 376, 377, 379, 380, 381, 383, 385, 387, 388, 391, 393, 396, 402, 407, 411, 416, 417, 452, 478, 646, 647, 982, 988, 991, 995, 1002, 1008, 1017, 1022, 1035, 1041, 1043, 1044, 1045], "packet": 365, "pacman": 396, "paczuski": [1043, 1044], "pad": [93, 118, 161, 168, 218, 236, 350, 356, 417, 588, 589, 591], "page": [0, 10, 15, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 146, 154, 167, 168, 169, 178, 218, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 365, 374, 376, 379, 381, 383, 385, 387, 394, 407, 409, 411, 473, 516, 517, 518, 628, 644, 834, 899, 941, 982, 988, 992, 993, 1019, 1028, 1033, 1035, 1039, 1040], "page_links_en": 15, "page_links_filenam": 15, "page_links_url": 15, "pagerank": 15, "pagh": [173, 984], "pai": [0, 167, 215, 253, 379], "paid": 988, "pain": 391, "paint": [916, 918], "pair": [8, 11, 35, 42, 56, 62, 98, 111, 113, 118, 122, 138, 153, 157, 177, 180, 189, 206, 209, 215, 230, 254, 259, 266, 268, 330, 334, 336, 338, 339, 340, 342, 351, 356, 374, 391, 393, 405, 406, 410, 413, 417, 419, 437, 440, 441, 445, 450, 457, 463, 471, 472, 478, 493, 508, 509, 582, 592, 595, 596, 598, 599, 600, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 632, 633, 643, 645, 692, 699, 700, 705, 706, 707, 715, 731, 740, 758, 759, 763, 766, 769, 770, 771, 772, 773, 774, 776, 778, 779, 780, 781, 782, 786, 832, 844, 845, 919, 992, 993, 994, 995, 1002, 1008, 1035, 1047, 1048, 1050, 1051, 1052], "pair_confusion_matrix": [409, 1047], "pair_list": 268, "pair_scor": 268, "paired_dist": [763, 769, 778, 1039], "pairidx": 356, "pairplot": [166, 167], "pairwis": [62, 166, 167, 230, 236, 268, 315, 319, 320, 350, 365, 371, 381, 393, 404, 409, 414, 419, 446, 454, 458, 461, 462, 468, 487, 508, 509, 535, 561, 562, 620, 638, 639, 640, 641, 642, 643, 688, 690, 692, 694, 696, 699, 778, 779, 780, 781, 788, 792, 793, 832, 848, 852, 856, 870, 902, 984, 992, 995, 1004, 1007, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1052, 1053, 1054], "pairwise_bayesian": 259, "pairwise_bayesian_df": 259, "pairwise_comp_df": 259, "pairwise_dist": [38, 393, 409, 420, 444, 446, 450, 457, 688, 696, 762, 771, 779, 780, 792, 793, 848, 850, 852, 856, 990, 1035, 1039, 1041, 1043, 1044, 1046, 1047, 1052, 1053], "pairwise_dist_chunk_s": [468, 902], "pairwise_distance_funct": [692, 696, 778, 781, 995], "pairwise_distances_argmin": [46, 62, 319, 780, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_argmin_min": [319, 779, 1038, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_chunk": [365, 778, 1043, 1046, 1052], "pairwise_indices_": 832, "pairwise_kernel": [393, 419, 452, 462, 643, 765, 870, 990, 1035, 1042, 1052], "pairwise_kernel_funct": [620, 643, 774], "pairwise_kernels_kwarg": 620, "pairwise_t_test": 259, "pairwisedistancesreduct": 366, "pairwisekernel": 419, "paislei": [414, 536], "pakdd": 409, "pal": [1043, 1049], "palac": 46, "palacio": 1048, "palafox": 1035, "palett": [46, 167, 259], "palevioletr": [211, 289, 337], "palioura": [839, 994], "paliw": 1043, "palladium": 1017, "palmol": 10, "paltri": 1026, "pami": [376, 409, 725], "pamnani": 1043, "panchal": 1047, "pancholi": 1042, "panda": [2, 10, 11, 23, 68, 69, 70, 109, 115, 116, 119, 122, 125, 127, 145, 154, 161, 166, 167, 168, 169, 170, 176, 181, 186, 197, 201, 205, 215, 236, 237, 240, 248, 253, 257, 259, 260, 262, 270, 271, 273, 278, 310, 311, 312, 315, 318, 319, 345, 350, 351, 373, 374, 377, 378, 379, 381, 382, 387, 393, 396, 401, 410, 433, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 688, 689, 692, 800, 803, 804, 814, 830, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 920, 981, 982, 1002, 1012, 1013, 1028, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "pandata": [1050, 1051], "pandei": [1042, 1047], "panel": [249, 288, 305, 415, 1012], "panga": [1050, 1051], "panico": [1043, 1047], "pankaj": 1047, "pano": 1041, "panpiort8": [1045, 1047], "paolo": [0, 398, 1035, 1039, 1045, 1053], "papadopoulo": [1048, 1049, 1050, 1051, 1052], "papapanagiot": 1042, "paper": [0, 146, 173, 253, 259, 376, 385, 391, 409, 411, 416, 442, 449, 478, 504, 534, 541, 563, 641, 658, 666, 667, 671, 676, 679, 692, 788, 841, 850, 853, 896, 897, 988, 992, 995, 998, 1007, 1028, 1035, 1042, 1043], "paper355": 671, "papier": [664, 685, 686], "par": 1002, "paraboloid": 988, "paradi": 1050, "paradigm": 988, "paragraph": [417, 503, 1028], "paralel": 1051, "parallel": [12, 108, 113, 115, 116, 118, 134, 164, 168, 169, 170, 199, 260, 316, 317, 319, 343, 359, 364, 371, 377, 379, 380, 382, 383, 391, 393, 410, 418, 420, 421, 437, 444, 446, 448, 449, 450, 452, 457, 458, 461, 464, 467, 472, 495, 531, 533, 534, 535, 537, 539, 541, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 589, 594, 602, 607, 608, 610, 632, 634, 639, 658, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 811, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 960, 962, 1013, 1014, 1023, 1028, 1030, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "parallel_backend": [366, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900, 1043, 1053], "parallel_batch_queri": 283, "parallel_config": 960, "parallel_coordin": 260, "parallel_help": 1045, "parallelbackendbas": 962, "parallelis": [260, 468, 902, 1042], "param": [42, 53, 59, 60, 69, 120, 121, 123, 124, 218, 232, 233, 257, 259, 267, 271, 287, 300, 322, 379, 381, 393, 399, 416, 419, 423, 426, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 812, 814, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 949, 952, 981, 1041, 1045, 1046, 1048, 1049, 1052, 1053], "param1": [381, 1025], "param2": [381, 1025], "param3": 381, "param_": 115, "param_c": [270, 800], "param_classifier__c": 69, "param_covariance_typ": 248, "param_degre": 800, "param_dist": [267, 271, 317], "param_distribut": [69, 149, 260, 267, 271, 317, 392, 804, 812, 814, 1051], "param_gamma": [270, 800, 814], "param_grid": [2, 4, 69, 70, 71, 72, 115, 122, 232, 238, 248, 253, 257, 258, 259, 263, 264, 267, 270, 278, 285, 307, 322, 338, 393, 399, 410, 416, 742, 800, 803, 811, 812, 960, 981, 992, 1023, 1024], "param_kernel": [800, 814], "param_list": 812, "param_min_samples_split": 263, "param_n_compon": 248, "param_nam": [115, 260, 275, 321, 345, 399, 823, 831, 987, 1028], "param_pca__n_compon": 71, "param_preprocessor__cat__selector__percentil": 69, "param_preprocessor__num__imputer__strategi": 69, "param_rang": [275, 321, 345, 823, 831, 987, 1051], "param_reduce_dim__n_compon": 258, "param_valu": 5, "paramet": [2, 3, 7, 8, 9, 12, 13, 25, 32, 42, 52, 53, 56, 58, 59, 60, 69, 70, 71, 77, 79, 80, 90, 93, 107, 109, 111, 113, 115, 118, 119, 120, 123, 124, 125, 136, 143, 146, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 197, 199, 201, 202, 205, 206, 213, 214, 215, 222, 223, 226, 228, 231, 232, 233, 243, 244, 245, 246, 248, 249, 252, 253, 254, 258, 259, 260, 261, 263, 264, 267, 270, 271, 272, 274, 275, 278, 283, 285, 286, 289, 290, 296, 299, 300, 302, 305, 306, 307, 309, 310, 315, 316, 318, 319, 320, 321, 328, 329, 333, 335, 340, 342, 343, 344, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 361, 365, 366, 367, 368, 371, 372, 374, 382, 384, 385, 386, 387, 388, 391, 399, 403, 406, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1020, 1022, 1024, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "parameter": [355, 419, 614, 615, 622, 623, 797, 798, 988, 989, 997, 1002, 1008], "parameter_grid": 260, "parameter_nam": [567, 568, 569, 570], "parametergrid": [800, 1037, 1043], "parameters_str": 53, "parametersampl": [814, 1037, 1043, 1047], "parametr": [7, 22, 23, 80, 229, 287, 309, 318, 406, 410, 415, 416, 437, 551, 553, 635, 685, 696, 880, 892, 935, 936, 988, 991, 994, 995, 1002, 1005, 1008, 1043, 1045, 1048], "parametrize_with_check": [315, 381, 935, 1045, 1046], "params_str": 271, "parcel": [52, 65, 409], "parch": [169, 320], "pardeep": 1047, "parel": 1039, "parent": [6, 166, 233, 379, 383, 393, 409, 442, 463, 949, 950, 1035, 1052], "parent_hourly_wag": 166, "parenthes": 931, "parenthesi": [39, 379], "paresh": [1044, 1045], "pareto": 199, "pargent": 1002, "pari": [0, 376, 410, 466, 764, 872, 1003, 1049], "pariba": 1010, "pariet": [1017, 1035], "parikh": [1044, 1049, 1050, 1051, 1052], "paris_in_radian": 764, "paristech": [0, 22, 23, 40, 226, 1010], "pariti": 1008, "parizi": 1050, "park": [1040, 1045, 1047, 1050, 1051], "parmet": 1052, "parmind": 1042, "parra": 1043, "parri": [1040, 1041, 1042], "parrot": 350, "pars": [6, 15, 365, 373, 374, 380, 508], "parse_vers": [199, 670], "parser": [6, 11, 125, 253, 273, 315, 319, 496, 1050, 1051], "parsimoni": [414, 1002], "parsing_tim": 6, "parson": [1046, 1048], "part": [0, 3, 4, 29, 34, 49, 59, 66, 69, 80, 93, 96, 112, 115, 117, 118, 122, 128, 136, 137, 138, 143, 154, 164, 176, 233, 235, 246, 253, 254, 256, 274, 299, 307, 310, 312, 352, 367, 374, 376, 379, 381, 385, 387, 392, 393, 396, 404, 406, 408, 409, 413, 414, 416, 417, 419, 446, 449, 493, 494, 495, 521, 531, 537, 542, 574, 584, 585, 586, 613, 625, 793, 869, 887, 889, 890, 891, 892, 893, 894, 895, 981, 982, 984, 989, 993, 1011, 1012, 1013, 1014, 1015, 1017, 1021, 1028, 1030, 1035, 1043, 1044, 1046, 1048, 1050], "part3": 413, "part_of_speech": 417, "partev": [1049, 1050, 1051, 1052], "parthiv": 1047, "parti": [215, 278, 321, 366, 378, 391, 402, 802, 809, 960, 1010, 1035, 1046, 1051, 1052], "partial": [2, 6, 10, 48, 82, 83, 85, 95, 127, 164, 165, 171, 215, 225, 241, 317, 320, 376, 393, 395, 411, 412, 414, 416, 419, 464, 482, 483, 484, 485, 496, 501, 534, 536, 541, 562, 589, 632, 633, 657, 788, 830, 832, 833, 860, 861, 862, 865, 877, 878, 881, 884, 913, 989, 996, 1006, 1014, 1028, 1030, 1032, 1036, 1043, 1044, 1048, 1052], "partial_correl": 10, "partial_depend": [168, 632, 999, 1036, 1044, 1045, 1046, 1047, 1050, 1051], "partial_fit": [6, 48, 93, 319, 367, 381, 393, 409, 414, 442, 449, 534, 536, 537, 538, 589, 597, 658, 659, 666, 667, 668, 676, 677, 678, 832, 833, 836, 837, 839, 840, 841, 842, 843, 860, 861, 862, 873, 874, 884, 904, 988, 994, 996, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "partial_fit_": 1048, "partial_fit_classifi": 6, "partial_fit_param": [597, 832, 833, 836, 837], "partialdependencedisplai": [125, 127, 168, 237, 316, 317, 318, 320, 322, 386, 633, 999, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "particip": [0, 378, 379, 394, 1017], "particl": 997, "particular": [0, 2, 9, 12, 25, 35, 37, 38, 58, 69, 76, 90, 98, 101, 119, 122, 125, 126, 153, 161, 167, 168, 197, 199, 205, 231, 253, 256, 260, 262, 268, 283, 292, 296, 305, 315, 316, 319, 351, 352, 361, 365, 366, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 392, 393, 396, 409, 410, 413, 414, 416, 417, 418, 419, 446, 469, 473, 496, 544, 563, 609, 653, 658, 663, 672, 674, 684, 687, 712, 728, 785, 836, 923, 925, 982, 984, 986, 988, 992, 995, 996, 997, 998, 1000, 1002, 1013, 1017, 1027, 1035, 1038, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052], "particularli": [18, 29, 68, 69, 72, 102, 128, 167, 198, 228, 259, 273, 307, 316, 347, 361, 365, 379, 381, 388, 393, 409, 410, 412, 415, 417, 496, 806, 823, 841, 941, 960, 961, 988, 989, 992, 994, 1000, 1013, 1017, 1027, 1035, 1040, 1042, 1043, 1049], "partit": [44, 64, 68, 126, 128, 259, 301, 393, 405, 406, 409, 413, 416, 449, 451, 453, 462, 511, 557, 558, 559, 560, 563, 564, 565, 704, 705, 715, 786, 852, 912, 913, 914, 915, 991, 995, 998, 1002, 1008, 1028], "partli": [44, 769], "partnership": 1017, "parvu": 376, "pasbi": [1042, 1043], "pascal": 992, "pascual": 1038, "paskov": 1042, "pass": [2, 5, 6, 18, 19, 32, 36, 115, 125, 127, 143, 178, 181, 198, 227, 229, 230, 233, 236, 237, 239, 248, 253, 257, 260, 312, 315, 318, 343, 352, 361, 365, 366, 367, 374, 379, 380, 381, 384, 385, 386, 387, 388, 391, 393, 399, 402, 404, 408, 409, 410, 413, 414, 416, 417, 419, 420, 421, 426, 427, 431, 432, 437, 438, 440, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 457, 459, 460, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 492, 495, 496, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 588, 589, 590, 591, 593, 594, 597, 607, 608, 610, 611, 617, 620, 626, 631, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 732, 733, 742, 763, 774, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 881, 883, 884, 885, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 924, 925, 931, 935, 936, 940, 941, 943, 945, 947, 949, 952, 953, 960, 962, 963, 966, 981, 982, 988, 990, 992, 993, 994, 995, 996, 999, 1002, 1005, 1006, 1007, 1013, 1017, 1019, 1023, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "passiv": [6, 204, 666, 667, 1015, 1030, 1036], "passiveaggress": [367, 417], "passiveaggressiveclassifi": [6, 204, 365, 367, 988, 993, 1036, 1039, 1040, 1042, 1043, 1046, 1048, 1053], "passiveaggressiveregressor": [367, 988, 1036, 1039, 1042, 1043, 1046, 1048, 1053], "passo": [0, 398, 1035, 1036], "passthrough": [2, 70, 119, 167, 168, 197, 215, 236, 311, 320, 410, 464, 467, 567, 568, 863, 864, 1002, 1044, 1046, 1049, 1050, 1052], "passthrough_numer": [197, 215], "passthroughpassthrough": [168, 311], "past": [9, 11, 383, 384, 387, 391, 394, 413, 414, 416, 538, 555, 556, 678, 1017, 1020, 1051], "pat": [628, 982], "patch": [32, 48, 236, 243, 244, 245, 248, 249, 254, 374, 383, 391, 414, 416, 555, 556, 583, 584, 587, 1035, 1043], "patch_height": [583, 584, 587], "patch_siz": [48, 96, 417, 583, 584, 587], "patch_width": [583, 584, 587], "patchextractor": [417, 1051], "patel": [1043, 1045, 1046, 1047, 1049], "path": [6, 15, 164, 167, 175, 182, 183, 186, 191, 201, 213, 216, 272, 345, 355, 373, 377, 379, 383, 387, 388, 393, 402, 441, 445, 450, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 508, 509, 548, 557, 558, 563, 564, 565, 566, 593, 594, 597, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 688, 864, 865, 911, 912, 913, 914, 915, 946, 981, 988, 989, 998, 1013, 1014, 1035, 1036, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "path_length": 946, "path_method": [688, 989], "pathak": [1050, 1051], "patheffect": 38, "pathlib": [6, 1050, 1051], "pathlik": [496, 1051], "patholog": [50, 991, 1041], "pathwai": 380, "pati": 1037, "patienc": [387, 393], "patient": [5, 133, 146, 162, 376, 387, 408, 413, 988, 1026], "patil": [1049, 1052], "paton": 1048, "patric": [1047, 1048], "patricio": 1049, "patrick": [1042, 1043, 1048, 1049, 1052, 1053], "patrini": [1040, 1041, 1042], "pattaniyil": 1045, "pattern": [2, 11, 18, 61, 80, 83, 88, 92, 93, 100, 104, 149, 161, 164, 168, 181, 201, 233, 236, 318, 342, 350, 351, 352, 361, 376, 379, 381, 394, 405, 409, 410, 414, 416, 417, 448, 464, 466, 504, 532, 534, 541, 555, 556, 638, 708, 725, 741, 769, 788, 789, 797, 884, 984, 986, 988, 992, 993, 999, 1007, 1009, 1013, 1014, 1017, 1047], "patterson": [494, 1040], "paul": [374, 1038, 1041, 1042, 1043, 1044, 1048, 1049], "paula": [1045, 1046], "pauli": 1040, "paulo": [1042, 1048, 1050], "paus": 44, "pava": 635, "pave": 1026, "pavel": [1036, 1044], "pavlo": [1043, 1044], "pavlyk": [1043, 1044, 1045, 1046], "pawel": 1044, "pawe\u0142": [1038, 1042, 1047, 1048], "payn": 1045, "pazzani": 25, "pb_q": [318, 988], "pbl": 122, "pc": [17, 329, 352, 374], "pca": [1, 4, 14, 30, 31, 43, 49, 67, 68, 70, 72, 73, 74, 76, 84, 92, 95, 102, 103, 104, 137, 164, 180, 194, 219, 221, 229, 231, 234, 238, 258, 267, 270, 283, 287, 292, 302, 318, 361, 371, 381, 393, 404, 407, 409, 410, 415, 425, 473, 476, 484, 496, 502, 504, 514, 532, 533, 534, 535, 539, 540, 543, 544, 549, 643, 658, 688, 690, 692, 696, 800, 826, 830, 853, 860, 863, 864, 866, 874, 882, 884, 984, 986, 989, 995, 1002, 1006, 1008, 1014, 1024, 1029, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053], "pca0": 425, "pca1": [410, 425], "pca2": [410, 425], "pca_2": 84, "pca__n_compon": [71, 1024], "pca_back_proj_ax": 98, "pca_estim": 93, "pca_proj_ax": 98, "pca_scor": 100, "pcapca": [70, 238], "pcd": [860, 997], "pchelintsev": 1047, "pclass": [69, 169, 240, 315, 319, 320], "pcolor": 150, "pcolormesh": [32, 128, 138, 180, 286, 291, 334, 338, 342, 631], "pcr": [84, 412], "pd": [2, 10, 23, 69, 70, 109, 115, 116, 122, 127, 145, 161, 166, 167, 168, 169, 170, 176, 181, 186, 197, 201, 205, 215, 237, 240, 248, 257, 259, 260, 262, 270, 271, 273, 278, 310, 311, 312, 318, 319, 345, 350, 351, 384, 393, 410, 464, 466, 627, 628, 629, 630, 632, 778, 922, 924, 925, 981, 982, 999, 1002, 1046, 1048, 1049, 1050, 1052], "pd2000": 992, "pd_": 999, "pd_line_kw": 632, "pd_result": 632, "pdb": 387, "pdbcl": 387, "pdf": [146, 259, 288, 305, 376, 379, 409, 418, 442, 449, 531, 534, 537, 541, 641, 644, 649, 658, 664, 666, 667, 671, 676, 679, 682, 683, 685, 686, 692, 841, 842, 853, 860, 897, 899, 988, 1005, 1008, 1016, 1031, 1035], "pdist": [692, 778, 781], "pdp": [632, 999, 1049], "pdp_lim": 632, "pdp_line_kw": 632, "pe": 583, "pe_tran": 583, "peai": 1044, "peak": [2, 11, 25, 168, 406, 413, 1049], "pear": 993, "pearson": [606, 609, 1048], "pearu": 1035, "pedersen": [1039, 1051], "pedigo": [1047, 1048], "pedregosa": [0, 184, 202, 219, 295, 398, 1035, 1036, 1037, 1038, 1039, 1041], "pedro": [69, 1036, 1038, 1039, 1043], "peek": [168, 379, 999], "peer": 1017, "peerindex": 1010, "peev": [1043, 1046], "pegaso": 1006, "pei": [409, 1042], "peixinho": 1049, "pelennor": 1049, "penal": [12, 28, 80, 130, 181, 186, 190, 197, 201, 213, 215, 310, 345, 409, 411, 414, 416, 418, 469, 470, 471, 472, 473, 474, 475, 476, 478, 561, 562, 647, 652, 653, 661, 663, 676, 705, 715, 734, 786, 795, 877, 904, 905, 911, 988, 992, 994, 996, 1006, 1007, 1026], "penalis": [182, 195, 212, 696], "penalti": [5, 8, 28, 80, 164, 175, 176, 181, 182, 186, 190, 197, 201, 204, 212, 213, 216, 228, 267, 299, 318, 329, 343, 350, 365, 387, 391, 407, 411, 414, 418, 471, 472, 473, 474, 475, 476, 478, 502, 531, 537, 538, 539, 540, 542, 543, 547, 548, 597, 643, 646, 647, 648, 649, 652, 653, 654, 657, 658, 659, 660, 661, 662, 668, 669, 670, 672, 676, 678, 680, 681, 687, 814, 884, 904, 905, 907, 909, 910, 911, 981, 988, 991, 996, 1002, 1006, 1007, 1014, 1026, 1028, 1037, 1040, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "peng": [679, 988, 1041, 1042, 1043, 1045, 1047], "peopl": [4, 68, 167, 235, 262, 350, 351, 366, 367, 374, 376, 378, 379, 383, 394, 415, 493, 494, 641, 841, 1010, 1012, 1024], "pep": [10, 387, 1035], "pep073": 380, "pep101": 383, "pep257": 393, "pep8": [381, 383, 387], "pepsi": 10, "per": [2, 8, 18, 32, 46, 51, 62, 89, 114, 115, 119, 154, 156, 167, 168, 197, 212, 215, 236, 240, 244, 255, 266, 268, 305, 311, 317, 322, 345, 350, 352, 365, 374, 375, 379, 384, 385, 388, 391, 393, 406, 409, 413, 414, 415, 416, 417, 419, 446, 448, 450, 457, 461, 464, 468, 487, 496, 500, 502, 503, 504, 508, 510, 512, 515, 523, 532, 534, 535, 536, 539, 541, 543, 549, 550, 561, 562, 569, 583, 588, 591, 610, 611, 632, 633, 641, 642, 658, 659, 666, 667, 668, 671, 673, 674, 675, 676, 678, 692, 696, 713, 716, 720, 722, 741, 754, 758, 759, 781, 783, 797, 798, 825, 832, 833, 834, 836, 837, 840, 842, 860, 863, 869, 871, 873, 874, 877, 878, 884, 885, 902, 904, 905, 906, 907, 908, 909, 910, 929, 930, 941, 967, 981, 984, 988, 991, 992, 993, 996, 999, 1006, 1007, 1008, 1012, 1013, 1026, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052], "perc": 254, "percal": 385, "percent": [109, 492, 600, 1005], "percent10": [236, 492], "percentag": [11, 52, 101, 119, 188, 215, 254, 262, 265, 413, 418, 534, 541, 544, 549, 593, 594, 648, 669, 680, 703, 734, 746, 818, 819, 820, 834, 916, 918, 993, 1008, 1037, 1041, 1047, 1048], "percentil": [8, 11, 69, 122, 125, 236, 240, 305, 365, 592, 595, 596, 598, 599, 600, 603, 606, 632, 633, 748, 1002, 1040, 1048], "percentile_5_predict": 11, "percentile_95_predict": 11, "percentile_perf_in_u": 8, "percentiles_class": 254, "percept": [141, 168, 999], "perceptron": [6, 29, 118, 128, 138, 151, 153, 164, 204, 207, 210, 213, 237, 298, 303, 307, 308, 330, 343, 347, 367, 391, 417, 514, 515, 522, 666, 676, 830, 860, 861, 862, 865, 884, 990, 993, 997, 1006, 1014, 1015, 1030, 1039, 1041, 1042, 1043, 1047], "percol": 37, "perdisci": [409, 442], "perdok": 1050, "pere": 1052, "peredachi": [607, 608], "pereira": [1040, 1043, 1044], "peretti": 1050, "perez": [1043, 1050], "perf_count": 236, "perfect": [18, 24, 35, 68, 79, 96, 98, 193, 197, 350, 351, 379, 383, 409, 413, 553, 554, 690, 694, 704, 705, 708, 717, 726, 728, 731, 737, 743, 756, 757, 785, 786, 795, 988, 992, 995, 1007, 1017, 1026, 1049], "perfectli": [24, 25, 35, 262, 274, 342, 395, 409, 416, 438, 567, 606, 704, 705, 715, 717, 736, 737, 757, 786, 795, 877, 987, 989, 992, 1007, 1048, 1049], "perform": [2, 5, 11, 15, 17, 22, 23, 24, 30, 34, 36, 38, 46, 47, 51, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 68, 69, 72, 76, 84, 87, 96, 102, 107, 109, 115, 117, 119, 120, 121, 123, 124, 125, 129, 130, 136, 141, 144, 145, 146, 150, 158, 161, 162, 164, 167, 168, 169, 170, 173, 181, 186, 197, 199, 201, 203, 204, 205, 214, 215, 219, 220, 222, 226, 231, 234, 236, 244, 245, 248, 251, 253, 254, 255, 256, 257, 259, 260, 261, 264, 265, 267, 268, 270, 272, 273, 275, 276, 278, 281, 283, 296, 302, 305, 307, 309, 311, 312, 315, 321, 322, 324, 326, 327, 331, 338, 341, 342, 345, 350, 352, 361, 364, 366, 367, 374, 376, 381, 382, 383, 385, 387, 388, 391, 392, 393, 395, 399, 402, 403, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 427, 431, 440, 442, 443, 444, 446, 447, 448, 450, 452, 454, 455, 459, 461, 468, 469, 482, 483, 484, 485, 494, 502, 512, 515, 531, 532, 533, 535, 537, 542, 543, 544, 545, 546, 548, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 594, 601, 602, 603, 610, 611, 627, 630, 631, 638, 640, 645, 651, 654, 655, 656, 658, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 682, 683, 685, 687, 689, 690, 693, 694, 697, 703, 704, 705, 707, 708, 712, 713, 726, 729, 730, 738, 740, 742, 755, 756, 757, 778, 783, 784, 786, 787, 788, 794, 795, 796, 797, 798, 800, 803, 804, 811, 812, 814, 818, 825, 826, 827, 829, 830, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 851, 853, 859, 860, 861, 862, 864, 865, 867, 870, 871, 873, 874, 876, 877, 878, 880, 881, 884, 885, 887, 889, 890, 891, 893, 894, 895, 899, 900, 902, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 925, 965, 976, 981, 982, 984, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1017, 1019, 1020, 1023, 1026, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "performancetip": 385, "perhap": [68, 118, 376, 378, 387, 393, 415, 1013], "perimet": [146, 376], "period": [11, 125, 149, 154, 158, 383, 393, 394, 406, 419, 615, 821, 883, 1043, 1048, 1050], "periodic_spline_transform": 2, "periodicity_bound": [149, 154, 158, 615], "peripheri": 409, "perla": 1038, "perm_scores_iri": 265, "perm_scores_rand": 265, "perm_sorted_idx": 170, "permalink": 383, "perman": 387, "permiss": [378, 383, 394, 396, 1017, 1050], "permit": [410, 467, 588, 589, 591, 800, 803, 804, 814, 826, 865, 866, 992, 993, 994, 1041], "permut": [18, 19, 35, 79, 115, 117, 123, 138, 141, 164, 165, 171, 213, 251, 259, 276, 309, 312, 328, 395, 403, 409, 416, 464, 496, 500, 504, 559, 560, 564, 565, 627, 630, 634, 679, 704, 705, 717, 736, 737, 755, 757, 795, 817, 819, 829, 830, 864, 878, 909, 912, 913, 941, 961, 963, 966, 992, 1006, 1014, 1023, 1026, 1030, 1035, 1041, 1048, 1050], "permutation_import": [116, 117, 123, 169, 170, 315, 416, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1000, 1045, 1047, 1048, 1052], "permutation_scor": 829, "permutation_test_scor": [265, 399, 413, 1035, 1042, 1047], "permuted_categori": 312, "perp_tol": 536, "perpendicular": [32, 343], "perperogl": 1002, "perplex": [164, 217, 218, 220, 222, 224, 283, 514, 525, 536, 692, 989, 1014, 1040, 1042, 1049], "perri": 1045, "perrin": 1041, "perrot": [0, 1035], "persian": 1012, "persist": [368, 387, 391, 414, 446, 610, 611, 860, 997, 1012, 1030, 1041, 1044], "persola": 1043, "person": [4, 167, 253, 262, 374, 378, 413, 417, 493, 494, 495, 1002, 1024, 1043], "personal_statu": 253, "perspect": [53, 58, 197, 273, 365, 374, 391, 394, 530, 643, 904, 985], "pertin": 197, "perturb": [167, 214, 302, 414, 416, 991], "peru": [9, 296, 374, 498], "pervas": [361, 379], "pessimist": [121, 416], "pessoa": 1048, "pestrickland": 1041, "pet": [318, 322, 788, 992], "pet_cat": 318, "pet_dog": 318, "pet_fish": 318, "petal": [43, 88, 101, 103, 118, 240, 317, 320, 376, 410, 917, 1008, 1025, 1026], "petal_col": 320, "petar": 1050, "pete": [1042, 1046, 1047], "peter": [0, 9, 61, 121, 123, 124, 260, 350, 351, 398, 409, 448, 450, 457, 649, 792, 793, 988, 992, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052], "peterlongo": 1052, "peterson": [1035, 1037], "petfood": 1017, "petrov": [1042, 1043, 1051], "petrushev": 1044, "pe\u00f1a": 1039, "pfaffel": 1048, "pfahring": [835, 993], "pfe": 10, "pfister": 1002, "pfizer": 10, "pft": 198, "pg": [10, 385, 649, 988, 1040], "pg_i": 649, "pgithub": 1047, "ph": 1047, "pham": [173, 984, 1042], "phan": 414, "pharmaceut": 376, "pharuj": 236, "phase": [2, 181, 191, 365, 627, 984, 989, 995, 1017, 1043, 1045], "phase_nois": 38, "phd": [0, 409, 416, 1013, 1017], "phenol": 376, "phenomena": 154, "phenomenon": [351, 1002], "phi": [38, 414, 416, 743, 870, 984, 992, 1002, 1007], "phil": [55, 1040, 1051], "philipp": [1037, 1038, 1041, 1050], "phillip": [9, 296, 374, 498], "phimeca": 1010, "phlypo": 1038, "phongpanagnam": 1048, "phongpanangam": 1048, "photo": 46, "photogrammetr": 988, "php": [992, 1012], "phrase": 417, "phy": [607, 608], "phyo": 1049, "physic": [68, 115, 366, 505, 957, 988, 1051], "physician": 408, "physiolog": [262, 376, 1026], "pi": [2, 12, 32, 37, 38, 94, 102, 127, 129, 141, 149, 177, 181, 185, 191, 198, 220, 243, 244, 245, 248, 249, 274, 296, 316, 322, 358, 396, 415, 419, 516, 517, 518, 615, 642, 986, 987, 988, 994, 1027], "pianomania": 1040, "pick": [46, 53, 58, 170, 234, 267, 319, 325, 374, 379, 383, 409, 416, 443, 460, 523, 673, 914, 915, 981, 988, 989, 991, 1006, 1046], "pickl": [383, 393, 417, 589, 844, 845, 1012, 1013, 1030, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "pickleabl": [868, 1041], "pickup": 1043, "pico": [1038, 1039], "pict": [834, 993], "pictur": [10, 15, 19, 34, 46, 51, 64, 66, 96, 164, 230, 249, 374, 394, 409, 414, 417, 462, 493, 494, 521, 1013, 1014], "piec": [32, 45, 198, 366, 991], "piecewis": [102, 318, 405, 983, 988, 1002, 1008], "pierr": [1035, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "pierreablin": 1043, "pierreattard": [1048, 1049], "pierretallott": [1043, 1044, 1045], "pierron": 1038, "piet": [1049, 1050], "pieter": [15, 1041, 1042, 1049], "pietro": [1035, 1038, 1052], "pietruh": 1043, "pig": 783, "pillow": [379, 396, 401], "pim": 1044, "pin": [385, 402], "pinaki": 1043, "pinbal": [11, 122, 125, 318, 416, 562, 670, 723, 748, 988, 1048, 1049], "pinball_loss_05": 11, "pinball_loss_50": 11, "pinball_loss_95": 11, "ping": [897, 1004, 1041, 1042], "pink": 177, "pinki": 1049, "pinot": 311, "pinto": 1035, "pintor": 1046, "pinvh": [1042, 1044], "piontek": 1051, "piotr": [1043, 1044], "pip": [283, 315, 316, 317, 318, 319, 320, 321, 322, 366, 377, 379, 383, 385, 396, 402, 404, 1008], "pip3": [377, 396], "pipe": [70, 71, 119, 144, 233, 238, 258, 311, 317, 318, 392, 399, 410, 417, 590, 864, 889, 890, 892, 893, 894, 895, 981, 1002, 1024], "pipe_sgd": 211, "pipegraph": 391, "pipelin": [2, 29, 52, 56, 69, 72, 73, 74, 84, 97, 114, 115, 119, 137, 140, 142, 144, 145, 146, 147, 161, 162, 168, 169, 173, 176, 185, 186, 197, 198, 203, 211, 215, 219, 225, 226, 227, 229, 231, 236, 237, 240, 241, 251, 253, 256, 257, 258, 259, 263, 266, 267, 270, 273, 274, 276, 283, 285, 286, 291, 292, 299, 302, 307, 310, 312, 315, 316, 317, 318, 319, 320, 321, 329, 350, 351, 361, 365, 368, 371, 373, 374, 379, 382, 393, 399, 402, 413, 417, 419, 423, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 502, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 607, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 713, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 982, 984, 988, 995, 996, 1001, 1002, 1006, 1007, 1012, 1013, 1014, 1015, 1017, 1020, 1022, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "pipelineifittedpipelin": [69, 114, 143, 167, 169, 227, 237, 240, 266, 319], "pipelineinot": [130, 228, 238, 260, 273, 311, 316], "pipelinepipelin": [69, 70, 238, 253], "pita": 1052, "pitfal": [146, 164, 165, 166, 169, 171, 193, 201, 202, 259, 317, 368, 392, 393, 395, 413, 465, 467, 496, 653, 672, 673, 701, 753, 815, 827, 830, 865, 877, 884, 988, 1014, 1030], "pitkin": [168, 999], "pitt": 17, "pitter": 1050, "pivot": [44, 270, 271], "pivot_t": 270, "pixel": [3, 4, 12, 18, 30, 45, 46, 51, 93, 108, 116, 134, 144, 164, 169, 170, 173, 230, 257, 301, 302, 376, 409, 414, 416, 417, 418, 493, 494, 495, 564, 585, 586, 607, 608, 634, 995, 997, 1008, 1014, 1024, 1027], "pixelwis": 93, "pixi": 402, "piyg": 307, "pkdd": 0, "pkg": 377, "pkgsrc": 396, "pkl": 402, "pl": [11, 71, 84, 154, 201, 322, 376, 412, 482, 483, 484, 485, 1040], "place": [2, 58, 227, 237, 287, 365, 379, 380, 381, 384, 386, 394, 406, 417, 419, 441, 445, 446, 482, 483, 484, 515, 581, 590, 628, 630, 631, 768, 781, 797, 887, 889, 890, 891, 892, 893, 894, 895, 971, 972, 1012, 1035, 1042, 1045, 1046, 1048, 1052, 1053], "placehold": [17, 383, 627, 628, 629, 630, 815, 816, 819, 820, 982], "plagre": 1042, "plai": [94, 123, 151, 180, 206, 252, 294, 334, 335, 365, 1028], "plain": [340, 419, 657, 1006], "plan": [10, 373, 377, 379, 380, 394, 402, 1002, 1038], "planar": 409, "plane": [10, 146, 209, 231, 289, 340, 342, 343, 347, 376, 452, 462, 986, 988, 1007, 1026], "plant": [265, 268, 269, 372, 992, 1030], "plasma": 305, "plasma_r": 305, "plateau": [115, 120, 145, 253, 257, 261], "platform": [382, 393, 394, 1012, 1016, 1017, 1040, 1043, 1044, 1046, 1048, 1049, 1052], "platt": [406, 437, 906, 907, 909, 910, 1007], "platypu": 350, "pldtc325": 1042, "pleas": [0, 10, 15, 24, 69, 70, 114, 116, 117, 123, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 201, 227, 228, 229, 231, 233, 236, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 283, 293, 302, 311, 315, 316, 317, 318, 319, 320, 321, 322, 327, 342, 359, 366, 373, 374, 377, 379, 380, 381, 383, 387, 391, 392, 393, 396, 399, 402, 404, 407, 409, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 610, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 992, 996, 1002, 1006, 1007, 1012, 1013, 1016, 1019, 1026, 1028, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "pleasant": [378, 1017], "plenti": 23, "plgreenliru": 1046, "plo": [373, 607, 608], "plot": [2, 3, 4, 9, 10, 11, 13, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 38, 40, 41, 43, 52, 53, 54, 56, 57, 58, 59, 60, 63, 66, 70, 71, 72, 73, 77, 78, 79, 84, 86, 91, 93, 96, 97, 100, 101, 102, 103, 108, 109, 111, 112, 113, 114, 116, 120, 121, 122, 124, 125, 127, 128, 129, 134, 138, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 169, 170, 171, 173, 175, 179, 180, 182, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 225, 226, 229, 230, 232, 234, 235, 240, 241, 243, 244, 245, 247, 249, 251, 252, 253, 254, 259, 260, 262, 264, 265, 269, 270, 271, 273, 274, 276, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 312, 316, 319, 320, 321, 322, 326, 327, 330, 333, 334, 338, 339, 340, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 368, 379, 382, 388, 391, 395, 396, 403, 406, 409, 411, 413, 415, 416, 438, 441, 446, 450, 456, 464, 471, 496, 501, 502, 504, 512, 515, 519, 523, 553, 557, 560, 562, 564, 565, 569, 570, 610, 622, 631, 632, 633, 657, 658, 672, 676, 697, 698, 700, 701, 702, 703, 718, 727, 735, 761, 782, 784, 787, 788, 789, 800, 806, 817, 823, 825, 826, 827, 828, 831, 833, 842, 846, 862, 865, 877, 878, 879, 881, 884, 904, 906, 909, 912, 913, 918, 985, 986, 988, 989, 991, 992, 995, 996, 998, 1006, 1007, 1008, 1012, 1013, 1014, 1023, 1024, 1026, 1030, 1036, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "plot_": [318, 396], "plot_2d": [90, 218], "plot_3d": 218, "plot_accuraci": 6, "plot_adaboost_multiclass": [109, 134, 1014], "plot_adaboost_regress": [110, 134, 1014], "plot_adaboost_twoclass": [111, 134, 1014], "plot_adjusted_for_chance_measur": [35, 66, 1014], "plot_affinity_propag": [36, 66, 440, 454, 1014], "plot_agglomerative_clust": [37, 66, 1014], "plot_agglomerative_clustering_metr": [38, 66, 1014], "plot_agglomerative_dendrogram": [39, 66, 1014], "plot_all_sc": [305, 313, 1014], "plot_anomaly_comparison": [226, 241, 1014], "plot_ard": [176, 216, 644, 1014], "plot_arg": 300, "plot_bayesian_ridge_curvefit": [177, 216, 1014], "plot_benchmark_throughput": 8, "plot_bias_vari": [112, 134, 1014], "plot_bicluster_newsgroup": [17, 20, 1014], "plot_birch_vs_minibatchkmean": [40, 66, 1014], "plot_bisect_kmean": [41, 66, 1014], "plot_caching_nearest_neighbor": [285, 297, 1014], "plot_calibr": [22, 26, 1014], "plot_calibration_curv": [23, 26, 1014], "plot_calibration_multiclass": [24, 26, 1014], "plot_causal_interpret": [166, 171, 1014], "plot_chance_level": [236, 253, 266, 268, 269, 700, 702, 1051], "plot_classif": [286, 297, 1014], "plot_classification_prob": [28, 33, 1014], "plot_classifier_chain_yeast": [281, 282, 1014], "plot_classifier_comparison": [29, 33, 307, 1014], "plot_clust": 50, "plot_cluster_comparison": [42, 66, 1014], "plot_cluster_iri": [43, 66, 1014], "plot_coin_segment": [44, 66, 1014], "plot_coin_ward_segment": [45, 66, 1014], "plot_color": [111, 356], "plot_color_quant": [46, 66, 1014], "plot_column_transform": [68, 74, 1014], "plot_column_transformer_mixed_typ": [69, 74, 1014], "plot_compare_calibr": [25, 26, 1014], "plot_compare_cross_decomposit": [83, 85, 1014], "plot_compare_gpr_krr": [149, 159, 1014], "plot_compare_method": [218, 224, 1014], "plot_compare_reduct": [70, 74, 1014], "plot_concentration_prior": [243, 250, 1014], "plot_confusion_matrix": [252, 276, 315, 1014, 1045, 1046, 1047, 1048], "plot_cost_complexity_prun": [355, 360, 1014], "plot_cost_sensitive_learn": [253, 276, 1014], "plot_covariance_estim": [76, 81, 1014], "plot_custom_kernel": [334, 348, 1014], "plot_cv_diabet": [136, 139, 1014], "plot_cv_indic": [254, 276, 1014], "plot_cv_predict": [255, 276, 1014], "plot_cyclical_feature_engin": [2, 14, 1014], "plot_dbscan": [47, 66, 420, 444, 1014], "plot_decision_funct": 347, "plot_dendrogram": 39, "plot_det": [256, 276, 1014], "plot_det_curv": [1047, 1048], "plot_dict_face_patch": [48, 66, 1014], "plot_digit": 3, "plot_digits_agglomer": [49, 66, 1014], "plot_digits_classif": [30, 33, 1014], "plot_digits_classification_exercis": [137, 139, 1014], "plot_digits_denois": [3, 14, 1014], "plot_digits_kde_sampl": [287, 297, 1014], "plot_digits_last_imag": [87, 91, 1014], "plot_digits_linkag": [50, 66, 1014], "plot_digits_pip": [71, 74, 1014], "plot_discret": [306, 313, 1014], "plot_discretization_classif": [307, 313, 1014], "plot_discretization_strategi": [308, 313, 1014], "plot_display_object_visu": [227, 241, 1014], "plot_distribut": 305, "plot_document_classification_20newsgroup": [350, 353, 1014], "plot_document_clust": [351, 353, 1014], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [178, 216, 1014], "plot_ellips": [32, 243], "plot_embed": 219, "plot_ensemble_oob": [113, 134, 1014], "plot_estimator_represent": [228, 241, 1014], "plot_f_test_vs_mi": [141, 147, 1014], "plot_face_compress": [51, 66, 1014], "plot_face_recognit": [4, 14, 1014], "plot_faces_decomposit": [93, 104, 1014], "plot_feature_agglomeration_vs_univariate_select": [52, 66, 1014], "plot_feature_effect": 350, "plot_feature_select": [142, 147, 1014], "plot_feature_selection_pipelin": [143, 147, 1014], "plot_feature_transform": [114, 134, 1014], "plot_feature_union": [72, 74, 1014], "plot_fig": 194, "plot_forest_hist_grad_boosting_comparison": [115, 134, 1014], "plot_forest_import": [116, 134, 1014], "plot_forest_importances_fac": [117, 134, 1014], "plot_forest_iri": [118, 134, 1014], "plot_galleri": [4, 93, 1024], "plot_gmm": [244, 250, 1014], "plot_gmm_covari": [245, 250, 1014], "plot_gmm_init": [246, 250, 1014], "plot_gmm_pdf": [247, 250, 1014], "plot_gmm_select": [248, 250, 1014], "plot_gmm_sin": [249, 250, 1014], "plot_gpc": [150, 159, 1014], "plot_gpc_iri": [151, 159, 1014], "plot_gpc_isoprob": [152, 159, 1014], "plot_gpc_xor": [153, 159, 1014], "plot_gpr_co2": [154, 159, 1014], "plot_gpr_noisi": [155, 159, 1014], "plot_gpr_noisy_target": [156, 159, 1014], "plot_gpr_on_structured_data": [157, 159, 1014], "plot_gpr_prior_posterior": [158, 159, 1014], "plot_gpr_sampl": 158, "plot_gradient_boosting_categor": [119, 134, 1014], "plot_gradient_boosting_early_stop": [120, 134, 1014], "plot_gradient_boosting_oob": [121, 134, 1014], "plot_gradient_boosting_quantil": [122, 134, 1014], "plot_gradient_boosting_regress": [123, 134, 1014], "plot_gradient_boosting_regular": [124, 134, 1014], "plot_grid_search_digit": [257, 276, 1014], "plot_grid_search_refit_cal": [258, 276, 1014], "plot_grid_search_stat": [259, 276, 1014], "plot_grid_search_text_feature_extract": [260, 276, 1014], "plot_hashing_vs_dict_vector": [352, 353, 1014], "plot_hdbscan": [53, 66, 1014], "plot_hgbt_regress": [125, 134, 1014], "plot_huber_vs_ridg": [179, 216, 1014], "plot_hyperplan": [189, 206, 234], "plot_ica_blind_source_separ": [94, 104, 1014], "plot_ica_vs_pca": [95, 104, 1014], "plot_idx": 118, "plot_image_denois": [96, 104, 1014], "plot_incremental_pca": [97, 104, 1014], "plot_indic": 262, "plot_inductive_clust": [54, 66, 1014], "plot_influ": 5, "plot_info": 119, "plot_iris_dataset": [88, 91, 1014], "plot_iris_dtc": [356, 360, 1014], "plot_iris_exercis": [138, 139, 1014], "plot_iris_logist": [180, 216, 1014], "plot_iris_svc": [335, 348, 1014], "plot_isolation_forest": [126, 134, 1014], "plot_isotonic_regress": [229, 241, 1014], "plot_iterative_imputer_variants_comparison": [161, 163, 1014], "plot_johnson_lindenstrauss_bound": [230, 241, 1014], "plot_kde_1d": [288, 297, 1014], "plot_kernel_approxim": [231, 241, 1014], "plot_kernel_pca": [98, 104, 1014], "plot_kernel_ridge_regress": [232, 241, 1014], "plot_kind": 2, "plot_kmeans_assumpt": [55, 66, 1014], "plot_kmeans_digit": [56, 66, 1014], "plot_kmeans_plusplu": [57, 66, 1014], "plot_kmeans_silhouette_analysi": [58, 66, 1014], "plot_kmeans_stability_low_dim_dens": [59, 66, 1014], "plot_label_propagation_digit": [325, 331, 1014], "plot_label_propagation_digits_active_learn": [326, 331, 1014], "plot_label_propagation_structur": [327, 331, 1014], "plot_lasso_and_elasticnet": [181, 216, 1014], "plot_lasso_coordinate_descent_path": [182, 216, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 1014], "plot_lasso_dense_vs_sparse_data": [183, 216, 1014], "plot_lasso_lar": [184, 216, 1014], "plot_lasso_lars_": [185, 216, 1014], "plot_lasso_model_select": [186, 216, 647, 653, 1014], "plot_lda": [31, 33, 1014], "plot_lda_qda": [32, 33, 1014], "plot_learning_curv": [261, 276, 1014], "plot_likelihood_ratio": [262, 276, 1014], "plot_linear_model_coefficient_interpret": [167, 171, 1014], "plot_linearsvc_support_vector": [336, 348, 1014], "plot_linkage_comparison": [60, 66, 1014], "plot_lle_digit": [219, 224, 1014], "plot_lof_novelty_detect": [289, 297, 1014], "plot_lof_outlier_detect": [290, 297, 1014], "plot_logist": [187, 216, 1014], "plot_logistic_l1_l2_spars": [188, 216, 1014], "plot_logistic_multinomi": [189, 216, 1014], "plot_logistic_path": [190, 216, 1014], "plot_lw_vs_oa": [77, 81, 1014], "plot_mahalanobis_dist": [78, 81, 1014], "plot_manifold_spher": [220, 224, 1014], "plot_map_data_to_norm": [309, 313, 1014], "plot_md": [221, 224, 1014], "plot_mean_shift": [61, 66, 461, 1014], "plot_metadata_rout": [233, 241, 1014], "plot_method": [7, 32, 180, 211, 286, 291, 334, 336, 337, 339, 340, 342, 631], "plot_mini_batch_kmean": [62, 66, 1014], "plot_missing_valu": [162, 163, 1014], "plot_mlp_alpha": [299, 303, 1014], "plot_mlp_training_curv": [300, 303, 1014], "plot_mnist_filt": [301, 303, 1014], "plot_model_complexity_influ": [5, 14, 1014], "plot_monotonic_constraint": [127, 134, 1014], "plot_multi_metric_evalu": [263, 276, 1014], "plot_multi_task_lasso_support": [191, 216, 1014], "plot_multiclass_overview": [278, 279, 1014], "plot_multilabel": [234, 241, 1014], "plot_multioutput_face_complet": [235, 241, 1014], "plot_n_features_influ": 8, "plot_nca_classif": [291, 297, 1014], "plot_nca_dim_reduct": [292, 297, 1014], "plot_nca_illustr": [293, 297, 1014], "plot_nearest_centroid": [294, 297, 1014], "plot_nested_cross_validation_iri": [264, 276, 1014], "plot_nnl": [192, 216, 1014], "plot_num": [42, 60, 226], "plot_obs_pr": 215, "plot_ol": [193, 216, 1014], "plot_ols_3d": [194, 216, 1014], "plot_ols_ridge_vari": [195, 216, 1014], "plot_omp": [196, 216, 1014], "plot_on_dataset": 300, "plot_oneclass": [337, 348, 1014], "plot_opt": [63, 66, 1014], "plot_out_of_core_classif": [6, 14, 1014], "plot_outlier_detection_bench": [236, 241, 1014], "plot_outlier_detection_win": [7, 14, 1014], "plot_partial_depend": [168, 171, 315, 316, 317, 1014, 1040, 1044, 1045, 1046, 1047, 1048, 1049], "plot_partial_dependence_visualization_api": [237, 241, 1014], "plot_pca_iri": [99, 104, 1014], "plot_pca_vs_fa_model_select": [100, 104, 1014], "plot_pca_vs_lda": [101, 104, 1014], "plot_pcr_vs_pl": [84, 85, 1014], "plot_permutation_import": [169, 170, 171, 1014], "plot_permutation_importance_multicollinear": [170, 171, 1014], "plot_permutation_tests_for_classif": [265, 276, 1014], "plot_pipeline_displai": [238, 241, 1014], "plot_poisson_regression_non_normal_loss": [197, 216, 1014], "plot_polynomial_interpol": [198, 216, 879, 883, 1014], "plot_precision_recal": [266, 276, 1014], "plot_precision_recall_curv": [315, 1045, 1047, 1048], "plot_prediction_lat": [8, 14, 1014], "plot_quantile_regress": [199, 216, 1014], "plot_random_dataset": [89, 91, 1014], "plot_random_forest_embed": [128, 134, 1014], "plot_random_forest_regression_multioutput": [129, 134, 1014], "plot_random_multilabel_dataset": [90, 91, 1014], "plot_randomized_search": [267, 276, 1014], "plot_rang": 111, "plot_ransac": [200, 216, 1014], "plot_rbf_paramet": [338, 348, 1014], "plot_rbm_logistic_classif": [302, 303, 1014], "plot_regress": [295, 297, 1014], "plot_release_highlights_0_22_0": [315, 323, 1014], "plot_release_highlights_0_23_0": [316, 323, 1014], "plot_release_highlights_0_24_0": [317, 323, 1014], "plot_release_highlights_1_0_0": [318, 323, 1014], "plot_release_highlights_1_1_0": [319, 323, 1014], "plot_release_highlights_1_2_0": [320, 323, 1014], "plot_release_highlights_1_3_0": [321, 323, 1014], "plot_release_highlights_1_4_0": [322, 323, 1014], "plot_result": [32, 119, 243, 244, 249], "plot_rfe_digit": [144, 147, 1014], "plot_rfe_with_cross_valid": [145, 147, 1014], "plot_ridge_coeff": [201, 216, 1014], "plot_ridge_path": [202, 216, 1014], "plot_robust_fit": [203, 216, 1014], "plot_robust_vs_empirical_covari": [79, 81, 1014], "plot_roc": [268, 276, 1014], "plot_roc_crossv": [269, 276, 1014], "plot_roc_curv": [315, 1045, 1047], "plot_roc_curve_visualization_api": [239, 241, 1014], "plot_roc_pr_curv": 253, "plot_sampl": [95, 249], "plot_scalable_poly_kernel": [173, 174, 1014], "plot_scaling_import": [310, 313, 1014], "plot_scatt": 54, "plot_segmentation_toi": [64, 66, 1014], "plot_select_from_model_diabet": [146, 147, 1014], "plot_self_training_varying_threshold": [328, 331, 1014], "plot_semi_supervised_newsgroup": [329, 331, 1014], "plot_semi_supervised_versus_svm_iri": [330, 331, 1014], "plot_separating_hyperplan": [339, 348, 1014], "plot_separating_hyperplane_unbalanc": [340, 348, 1014], "plot_set_output": [240, 241, 1014], "plot_sgd_comparison": [204, 216, 1014], "plot_sgd_early_stop": [205, 216, 1014], "plot_sgd_iri": [206, 216, 1014], "plot_sgd_loss_funct": [207, 216, 1014], "plot_sgd_penalti": [208, 216, 1014], "plot_sgd_separating_hyperplan": [209, 216, 1014], "plot_sgd_weighted_sampl": [210, 216, 1014], "plot_sgdocsvm_vs_ocsvm": [211, 216, 1014], "plot_sparse_cod": [102, 104, 1014], "plot_sparse_cov": [80, 81, 1014], "plot_sparse_logistic_regression_20newsgroup": [212, 216, 1014], "plot_sparse_logistic_regression_mnist": [213, 216, 1014], "plot_species_distribut": 9, "plot_species_distribution_model": [9, 14, 498, 1014], "plot_species_kd": [296, 297, 1014], "plot_spectral_biclust": [18, 20, 1014], "plot_spectral_coclust": [19, 20, 1014], "plot_stack_predictor": [130, 134, 1014], "plot_step": [111, 118, 356], "plot_step_coars": 118, "plot_stock_market": [10, 14, 1014], "plot_subfigur": 234, "plot_successive_halving_heatmap": [270, 276, 1014], "plot_successive_halving_iter": [271, 276, 1014], "plot_surfac": [168, 194], "plot_svm_anova": [341, 348, 1014], "plot_svm_kernel": [342, 348, 1014], "plot_svm_margin": [343, 348, 1014], "plot_svm_regress": [344, 348, 1014], "plot_svm_scale_c": [345, 348, 1014], "plot_svm_tie_break": [346, 348, 1014], "plot_swissrol": [222, 224, 1014], "plot_t_sne_perplex": [223, 224, 1014], "plot_target_encod": [311, 313, 1014], "plot_target_encoder_cross_v": [312, 313, 1014], "plot_theilsen": [214, 216, 1014], "plot_time_series_lagged_featur": [11, 14, 1014], "plot_titl": 243, "plot_tomography_l1_reconstruct": [12, 14, 1014], "plot_top_word": 13, "plot_topics_extraction_with_nmf_lda": [13, 14, 1014], "plot_train_error_vs_test_error": [272, 276, 1014], "plot_training_data_with_decision_boundari": 342, "plot_transformed_target": [73, 74, 1014], "plot_tre": [356, 359, 1008, 1044, 1046, 1047, 1048, 1050, 1051, 1053], "plot_tree_regress": [357, 360, 1014], "plot_tree_regression_multioutput": [358, 360, 1014], "plot_tuned_decision_threshold": [273, 276, 1014], "plot_tweedie_regression_insurance_claim": [215, 216, 1014], "plot_underfitting_overfit": [274, 276, 1014], "plot_unveil_tree_structur": [359, 360, 1014], "plot_validation_curv": [275, 276, 1014], "plot_varimax_fa": [103, 104, 1014], "plot_voting_decision_region": [131, 134, 1014], "plot_voting_proba": [132, 134, 1014], "plot_voting_regressor": [133, 134, 1014], "plot_ward_structured_vs_unstructur": [65, 66, 1014], "plot_weighted_sampl": [347, 348, 1014], "plotli": [115, 260, 379, 396, 401], "pls1": [412, 484], "pls2": [412, 484], "plsca": [83, 483], "plscanon": [83, 482, 484, 485, 993, 1015, 1030, 1039, 1043, 1045, 1047, 1049, 1053], "plsregress": [83, 84, 993, 1015, 1030, 1042, 1045, 1047, 1049, 1051, 1053], "plssvd": [482, 483, 1015, 1030, 1047, 1049, 1053], "plsw2a": 412, "plt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 386, 438, 502, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 999, 1023, 1024, 1025, 1026, 1027, 1032], "plu": [266, 376, 384, 679, 835, 838, 993, 1006], "plug": [414, 988, 1017, 1028], "plugin": 396, "plural": 1041, "plusnet": 201, "pm": [158, 168, 269, 416, 992], "pmlr": 696, "pmml": 1012, "png": [0, 30, 916], "pnucci": 1051, "po": [123, 221, 417], "podshumok": [1041, 1042], "poesio": 716, "poetri": 402, "poh": [1043, 1044], "point": [2, 7, 9, 11, 12, 24, 29, 35, 36, 38, 39, 46, 47, 50, 53, 56, 58, 62, 65, 78, 79, 83, 88, 89, 90, 92, 94, 96, 98, 104, 109, 111, 115, 118, 119, 120, 125, 128, 145, 146, 151, 156, 157, 164, 167, 168, 169, 176, 180, 186, 189, 191, 193, 195, 197, 198, 199, 201, 203, 206, 209, 210, 214, 215, 218, 219, 220, 221, 222, 226, 229, 231, 245, 249, 251, 252, 256, 260, 261, 262, 266, 268, 269, 276, 278, 281, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 306, 307, 309, 311, 325, 326, 328, 330, 334, 338, 339, 340, 342, 343, 346, 347, 350, 351, 352, 356, 359, 361, 365, 366, 367, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 387, 391, 393, 394, 407, 408, 409, 414, 415, 416, 417, 420, 421, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 460, 461, 469, 472, 474, 496, 498, 504, 512, 514, 515, 519, 522, 525, 530, 533, 535, 541, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 611, 628, 631, 632, 633, 637, 638, 639, 644, 645, 651, 655, 657, 658, 670, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 701, 706, 707, 710, 713, 717, 723, 725, 731, 736, 737, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 764, 779, 780, 790, 791, 797, 798, 800, 814, 816, 822, 825, 827, 834, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 865, 869, 874, 883, 884, 898, 899, 900, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 922, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1004, 1005, 1007, 1008, 1012, 1013, 1014, 1023, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pointer": [379, 387, 442, 1044], "pointplot": 125, "points_color": 218, "pointwis": [112, 156, 420, 444], "poisson": [2, 11, 164, 175, 216, 234, 375, 416, 464, 465, 496, 523, 552, 558, 562, 565, 648, 669, 672, 680, 706, 724, 745, 749, 750, 752, 830, 864, 865, 868, 869, 877, 878, 879, 884, 913, 915, 945, 988, 1008, 1014, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "poisson_gbrt": 197, "poisson_glm": 197, "poissonregressor": [197, 215, 316, 319, 648, 680, 988, 1046, 1049, 1050], "pokorni": 1050, "pola": 11, "polar": [71, 154, 379, 396, 401, 433, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 1028, 1052, 1053], "pole": 220, "poli": [2, 138, 173, 259, 335, 342, 344, 452, 535, 620, 765, 774, 800, 879, 906, 907, 908, 909, 910, 988, 1002, 1026], "polici": [125, 166, 167, 197, 215, 393, 535, 541, 988, 1050], "policyhold": [197, 215, 988], "polit": [17, 350, 374, 378, 988, 993], "polli": 350, "pollut": [350, 728, 785, 992, 998], "polmauri": 1042, "poloso": 1049, "polycollect": [806, 823], "polynomi": [13, 161, 164, 172, 174, 175, 197, 203, 216, 231, 238, 259, 274, 288, 317, 318, 335, 344, 371, 375, 452, 491, 620, 639, 640, 641, 643, 645, 672, 765, 774, 775, 830, 865, 874, 876, 879, 883, 904, 906, 907, 908, 909, 910, 987, 1007, 1014, 1015, 1030, 1047, 1048], "polynomial_featur": 274, "polynomial_kernel": [765, 990, 1052], "polynomialcountsketch": [173, 639, 641, 984, 1047, 1049, 1052], "polynomialfeatur": [2, 176, 197, 198, 203, 238, 274, 317, 342, 883, 988, 1002, 1039, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "polynomialfeaturespolynomialfeatur": 238, "polysemi": 414, "polytop": 515, "pomegran": 1012, "ponc": [414, 531, 537], "poncho": 1017, "pone": 373, "ponnuthurai": 376, "ponzi": 311, "pooch": [51, 379, 396, 401], "pooja": [1050, 1051, 1052], "pool": [268, 391, 445, 635, 961, 1013, 1046], "pooling_func": [445, 1043], "poolqc": 119, "poolsawat": [1049, 1050], "poor": [168, 173, 265, 275, 328, 406, 413, 414, 690, 694, 738, 841, 844, 845, 986, 987, 989, 994, 1013, 1019, 1042, 1043, 1044, 1046, 1048], "poor_scor": 381, "poorer": [119, 361, 414], "poorest": 994, "poorli": [23, 25, 60, 76, 84, 112, 124, 222, 366, 409, 416, 528, 630, 988, 989, 1041], "poorna": [1045, 1047], "pop": [359, 391, 919, 1023, 1043], "popa": [1045, 1046], "popitem": 919, "popo": 1038, "popul": [70, 76, 78, 125, 167, 197, 236, 262, 305, 374, 388, 393, 411, 440, 490, 712, 718, 846, 847, 848, 850, 852, 854, 855, 856, 961, 992, 998, 1002, 1008], "popular": [161, 222, 374, 377, 384, 387, 391, 393, 407, 415, 416, 417, 419, 452, 462, 982, 984, 988, 990, 997, 1006, 1013, 1023, 1028], "port": [377, 396, 1045], "portabl": [402, 1012], "porter": 1012, "portfolio": [197, 215, 986], "portion": [4, 6, 79, 120, 146, 268, 365, 374, 376, 379, 385, 393, 788, 825, 842, 981, 991, 995, 1024, 1028], "portland": [409, 420, 444], "portnoi": [988, 1052], "portrait": [4, 414, 1024], "pos_class": 6, "pos_label": [227, 236, 253, 273, 393, 408, 438, 439, 698, 700, 702, 706, 707, 709, 727, 729, 730, 738, 782, 783, 784, 787, 789, 799, 871, 888, 992, 1043, 1047, 1049, 1053], "pos_lr": 262, "pos_lr_bas": 262, "pos_lr_base_std": 262, "pos_tagg": 417, "pos_vector": 417, "pos_window": 417, "pose": [201, 267, 988, 1027], "posit": [0, 2, 4, 6, 9, 10, 22, 23, 25, 65, 103, 125, 127, 132, 144, 166, 167, 181, 182, 192, 197, 198, 199, 201, 215, 221, 230, 236, 253, 256, 259, 262, 266, 268, 269, 273, 305, 316, 317, 321, 350, 359, 365, 374, 378, 379, 381, 386, 388, 393, 394, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 438, 439, 442, 446, 447, 449, 464, 467, 494, 498, 500, 504, 508, 509, 510, 525, 527, 529, 530, 531, 533, 535, 536, 537, 542, 545, 546, 548, 549, 550, 557, 561, 562, 563, 564, 592, 593, 594, 595, 596, 598, 599, 600, 606, 610, 611, 620, 631, 632, 643, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 669, 672, 673, 674, 675, 677, 680, 681, 682, 683, 684, 687, 690, 698, 700, 702, 707, 709, 712, 713, 715, 716, 718, 720, 722, 724, 727, 729, 730, 731, 735, 736, 738, 739, 740, 741, 742, 743, 744, 752, 754, 758, 766, 782, 783, 784, 787, 788, 789, 797, 798, 799, 803, 804, 827, 844, 845, 846, 848, 850, 852, 854, 856, 857, 867, 868, 871, 877, 880, 883, 888, 892, 896, 897, 899, 900, 904, 905, 908, 909, 910, 912, 914, 921, 939, 941, 957, 959, 983, 984, 988, 990, 992, 993, 995, 996, 997, 999, 1002, 1007, 1024, 1026, 1028, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "position": 393, "positive_class": [6, 712], "positive_cod": [93, 531, 537, 542, 545, 546], "positive_dict": [93, 531, 537, 545, 546], "positive_featur": 384, "positive_likelihood_ratio": [262, 712], "posix": [366, 391], "possa": 1042, "possibl": [0, 2, 11, 15, 24, 25, 35, 47, 53, 69, 76, 93, 112, 115, 125, 127, 149, 167, 168, 169, 170, 197, 214, 215, 231, 233, 253, 259, 260, 261, 262, 264, 265, 266, 268, 269, 281, 315, 338, 345, 350, 351, 361, 365, 366, 367, 372, 373, 374, 379, 380, 381, 382, 383, 385, 387, 391, 392, 393, 396, 399, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 423, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 709, 721, 722, 723, 724, 728, 742, 756, 778, 783, 785, 788, 797, 798, 799, 800, 802, 803, 804, 806, 812, 813, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 922, 924, 925, 928, 933, 960, 963, 966, 981, 984, 987, 988, 989, 991, 992, 993, 994, 995, 1000, 1002, 1007, 1008, 1013, 1017, 1019, 1026, 1027, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051], "possibli": [55, 84, 146, 197, 212, 342, 351, 376, 378, 387, 402, 409, 416, 417, 451, 453, 589, 839, 840, 841, 842, 843, 909, 910, 912, 913, 914, 915, 981, 984, 989, 995, 1002, 1050], "post": [5, 13, 17, 68, 145, 146, 164, 227, 251, 263, 266, 276, 278, 319, 328, 350, 351, 352, 354, 359, 360, 365, 374, 378, 379, 383, 384, 392, 403, 409, 448, 488, 489, 496, 500, 551, 561, 658, 700, 702, 712, 718, 732, 742, 784, 787, 799, 800, 816, 822, 827, 830, 865, 884, 902, 912, 992, 1008, 1014, 1016, 1017, 1028, 1030, 1046], "post1": 1033, "poster": [350, 378, 379, 1027], "posterior": [55, 148, 149, 150, 155, 159, 164, 176, 253, 259, 273, 414, 419, 549, 550, 552, 610, 611, 613, 614, 615, 619, 622, 623, 627, 644, 645, 708, 797, 799, 822, 986, 1012, 1014, 1041, 1044], "posteriori": [988, 994], "postfit_hook": 5, "postpon": [381, 383], "postprocess": [22, 406, 535, 541], "postprocessor": 1046, "postscript": 916, "potenti": [2, 25, 53, 76, 125, 162, 166, 168, 176, 253, 289, 290, 299, 321, 322, 342, 352, 365, 366, 377, 393, 396, 399, 408, 409, 413, 416, 417, 468, 482, 483, 484, 485, 496, 524, 549, 557, 558, 561, 562, 564, 565, 573, 606, 611, 634, 763, 822, 894, 895, 902, 912, 913, 914, 915, 998, 1006, 1008, 1012, 1028, 1038, 1045, 1046, 1049, 1052, 1053], "poughon": 1042, "poundal": 68, "pour": 992, "pourbozorg": [1043, 1044, 1045], "pow": [676, 677, 678, 861, 862], "powel": [4, 374], "power": [2, 5, 15, 115, 120, 166, 198, 215, 249, 262, 267, 287, 305, 306, 309, 325, 335, 365, 366, 392, 406, 409, 412, 415, 416, 417, 420, 444, 482, 483, 484, 532, 535, 541, 544, 630, 680, 694, 724, 747, 749, 752, 846, 847, 854, 855, 857, 858, 879, 880, 881, 892, 893, 940, 941, 988, 989, 992, 1000, 1002, 1006, 1007, 1017, 1038, 1041, 1043, 1045, 1046, 1048, 1052], "power_iter": 15, "power_iteration_norm": [404, 541, 544, 940, 941, 1049], "power_t": [676, 677, 678, 861, 862, 1006], "power_transform": [880, 893, 1043], "powers_": 879, "powershel": 377, "powertransform": [309, 881, 892, 982, 1002, 1043, 1046, 1049, 1051], "pox": 278, "poznik": [1048, 1049, 1050], "pp": [0, 61, 146, 258, 376, 409, 411, 417, 420, 421, 444, 448, 452, 462, 511, 533, 534, 541, 590, 635, 643, 664, 685, 686, 720, 726, 730, 740, 756, 769, 783, 839, 841, 843, 860, 880, 892, 985, 992, 994, 995, 1005], "pp2013": 984, "pp84": 419, "ppc64le": 387, "ppf": 259, "ppm": 154, "pprint": [15, 122, 233, 260, 374, 936], "pq": 320, "pr": [0, 132, 366, 379, 382, 387, 417, 741, 992, 1016, 1045, 1047], "pr_displai": 227, "pr_number": 387, "prabakaran": [1043, 1044, 1047, 1049, 1050], "prabhakar": 414, "practic": [25, 51, 69, 78, 84, 96, 115, 119, 120, 125, 149, 166, 167, 173, 181, 199, 226, 232, 260, 267, 289, 290, 317, 338, 342, 366, 368, 379, 381, 382, 385, 387, 392, 393, 409, 411, 413, 414, 415, 416, 417, 419, 447, 452, 462, 521, 524, 589, 632, 633, 670, 797, 843, 897, 904, 981, 982, 986, 988, 991, 992, 993, 994, 995, 998, 999, 1002, 1012, 1013, 1015, 1017, 1019, 1028, 1029, 1030, 1037, 1041, 1043, 1045, 1047], "practicalswift": 1041, "practis": 202, "practition": [113, 201], "pradeep": [1043, 1044], "pragmat": 379, "prakash": [1040, 1042, 1048], "pramod": 1049, "pranayanchuri": 1048, "prang": 380, "prasanth": 1050, "pratama": 1046, "pratap": [1039, 1042, 1049], "prathmesh": 1044, "pratik": 1042, "pratiqu": 376, "pravar": 1043, "pravarmahajan": [1042, 1043], "pre": [3, 69, 167, 186, 305, 352, 368, 377, 379, 393, 396, 408, 411, 413, 414, 416, 417, 418, 420, 421, 443, 444, 447, 459, 533, 535, 690, 712, 763, 867, 909, 992, 997, 1002, 1007, 1008, 1012, 1013, 1030, 1038, 1043, 1049, 1053], "pre_dispatch": [800, 806, 814, 823, 825, 826, 827, 828, 831, 958, 1038], "preambl": 53, "prec": [80, 227, 527, 992], "prec_": 80, "prec_macro": 413, "preced": [366, 379, 487, 992, 1035], "precipit": 406, "precis": [4, 11, 23, 30, 68, 73, 80, 93, 143, 155, 156, 164, 173, 227, 251, 252, 253, 257, 276, 302, 305, 325, 326, 379, 381, 393, 405, 406, 407, 408, 409, 411, 414, 416, 443, 469, 470, 471, 472, 473, 474, 475, 476, 478, 504, 523, 532, 534, 541, 544, 644, 645, 646, 648, 650, 651, 652, 654, 655, 656, 669, 672, 674, 680, 682, 683, 687, 699, 700, 706, 707, 708, 713, 727, 729, 730, 731, 739, 741, 763, 782, 783, 784, 787, 788, 797, 798, 822, 830, 833, 844, 845, 850, 865, 884, 888, 904, 909, 916, 918, 941, 986, 988, 995, 996, 1007, 1014, 1024, 1028, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "precision_": [10, 80, 469, 470, 471, 472, 473, 474, 475, 476], "precision_macro": [413, 1023], "precision_recall_curv": [227, 266, 700, 706, 707, 727, 992, 1036, 1037, 1041, 1048, 1049, 1051, 1053], "precision_recall_fscore_support": [713, 729, 730, 784, 787, 992, 1039, 1043, 1045, 1051], "precision_scor": [23, 253, 266, 708, 787, 992, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "precision_threshold": 257, "precisionrecalldisplai": [253, 266, 318, 782, 784, 787, 992, 1045, 1048, 1051, 1052, 1053], "precisions_": [797, 798], "precisions_cholesky_": [797, 798, 1049], "precisions_init": [798, 1049, 1051], "precompil": 377, "precomput": [92, 93, 94, 104, 164, 175, 196, 216, 221, 233, 283, 285, 295, 381, 388, 391, 393, 409, 417, 420, 432, 440, 441, 444, 445, 446, 450, 452, 457, 465, 471, 482, 483, 484, 524, 531, 535, 537, 540, 541, 542, 548, 554, 556, 558, 560, 562, 565, 568, 570, 610, 611, 620, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 682, 684, 685, 688, 690, 691, 692, 696, 774, 778, 781, 792, 793, 837, 838, 846, 847, 848, 850, 851, 852, 854, 855, 856, 862, 905, 906, 907, 908, 909, 910, 913, 915, 968, 969, 970, 984, 988, 990, 995, 1007, 1013, 1014, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "precompute_dist": [1039, 1046], "precompute_gram": 1037, "precomputed_nearest_neighbor": [452, 691], "precondit": [409, 452, 462, 695, 1008, 1051], "pred": [2, 5, 9, 11, 30, 346, 350, 374, 648, 669, 680, 697, 702, 706, 718, 729, 730, 738, 783, 784, 787, 788, 992], "pred1": 133, "pred2": 133, "pred3": 133, "pred4": 133, "pred_background": 9, "pred_decis": [735, 992, 1048], "pred_entropi": [325, 326], "pred_nam": [4, 1024], "pred_ort": 402, "pred_scor": 5, "pred_test": 9, "pred_typ": 8, "predecessor": [109, 450, 455, 456, 457, 1052], "predecessor_": [450, 457], "predecessor_correct": [450, 456], "predefin": [263, 813, 981, 995, 1023, 1050, 1052], "predefinedsplit": [413, 1023, 1039], "predetermin": [409, 989], "predict": [1, 4, 5, 6, 9, 14, 21, 23, 24, 25, 28, 30, 32, 35, 42, 46, 54, 55, 56, 60, 68, 69, 70, 71, 73, 83, 103, 107, 108, 109, 111, 112, 113, 115, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 137, 138, 143, 144, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 168, 169, 170, 173, 176, 179, 180, 181, 189, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 214, 215, 226, 227, 229, 231, 233, 235, 244, 245, 246, 247, 248, 249, 251, 252, 257, 259, 261, 262, 265, 268, 269, 273, 274, 276, 278, 281, 286, 289, 290, 291, 294, 295, 302, 305, 306, 310, 311, 315, 316, 317, 318, 319, 321, 322, 326, 328, 329, 330, 334, 335, 337, 338, 342, 344, 345, 346, 350, 351, 356, 357, 358, 359, 361, 364, 366, 368, 371, 374, 376, 379, 381, 386, 388, 393, 395, 399, 402, 403, 404, 406, 407, 409, 410, 412, 414, 416, 417, 418, 423, 426, 431, 432, 437, 438, 439, 440, 442, 443, 444, 447, 448, 449, 465, 469, 482, 483, 484, 487, 501, 508, 524, 534, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 582, 593, 594, 602, 606, 610, 611, 613, 614, 615, 616, 622, 625, 627, 628, 630, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 714, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 738, 741, 742, 743, 746, 748, 750, 752, 756, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 861, 862, 864, 871, 884, 885, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 966, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1017, 1020, 1022, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "predict_ecoc": 1039, "predict_joint_log_proba": [839, 840, 841, 842, 843, 1050], "predict_log_proba": [381, 393, 549, 550, 551, 553, 555, 557, 559, 564, 593, 594, 658, 659, 676, 799, 800, 803, 804, 814, 822, 825, 835, 839, 840, 841, 842, 843, 861, 864, 901, 906, 909, 912, 914, 1007, 1035, 1048, 1052], "predict_ovo": 1039, "predict_ovr": 1039, "predict_param": [233, 465, 567, 568, 1048], "predict_proba": [22, 23, 24, 25, 28, 32, 128, 132, 146, 150, 151, 152, 153, 253, 268, 273, 281, 299, 307, 310, 315, 317, 350, 381, 386, 393, 406, 407, 408, 416, 437, 438, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 610, 619, 620, 622, 623, 631, 632, 633, 658, 659, 676, 698, 700, 702, 722, 741, 742, 788, 797, 798, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 854, 861, 864, 871, 899, 900, 901, 906, 909, 912, 914, 988, 992, 994, 996, 999, 1005, 1006, 1007, 1008, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "predict_proba_ovr": 1039, "predicted_label": [325, 326], "prediction_df": 125, "prediction_perform": 5, "prediction_performance_comput": 5, "prediction_performance_label": 5, "prediction_pow": 5, "prediction_tim": [5, 6], "prediction_titl": [4, 1024], "predictionerrordisplai": [2, 11, 73, 130, 167, 255, 320, 992, 1050, 1052], "predictions_kr": 149, "predictive_analyt": 1008, "predictive_word": 350, "predictor": [73, 108, 110, 119, 133, 134, 161, 162, 164, 197, 215, 228, 236, 255, 381, 392, 393, 410, 412, 413, 416, 419, 466, 467, 482, 483, 484, 496, 516, 517, 518, 555, 556, 562, 565, 568, 602, 610, 630, 632, 633, 648, 653, 657, 669, 673, 680, 701, 825, 827, 836, 837, 864, 865, 877, 878, 884, 966, 988, 993, 1014, 1036, 1042, 1045], "predispatch": [806, 823, 828, 831], "predit": 84, "predomin": [381, 1036], "prefer": [36, 42, 53, 125, 249, 268, 305, 361, 365, 366, 367, 379, 380, 381, 393, 409, 413, 414, 416, 417, 440, 454, 471, 472, 478, 487, 508, 509, 627, 632, 633, 654, 658, 659, 701, 726, 728, 742, 757, 758, 835, 853, 879, 904, 905, 946, 958, 981, 984, 986, 988, 992, 997, 1007, 1008, 1012, 1016, 1026, 1036, 1042, 1044, 1048, 1049, 1052], "prefetch": 958, "prefit": [24, 253, 393, 406, 408, 418, 437, 567, 568, 597, 822, 1013, 1047, 1048, 1049], "prefix": [15, 68, 260, 285, 315, 379, 383, 385, 387, 419, 425, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 806, 828, 848, 853, 856, 860, 863, 864, 870, 896, 897, 1041, 1042, 1048, 1050, 1053], "prein": [0, 369, 1047, 1048, 1049], "preiss": 1048, "preliminari": 462, "prematur": 1048, "prepar": [198, 233, 350, 365, 381, 382, 385, 387, 1008, 1017, 1043, 1051], "prepend": [167, 1035], "preprint": 376, "preprocess": [2, 3, 4, 8, 25, 29, 40, 42, 47, 51, 53, 56, 60, 68, 69, 70, 71, 73, 84, 93, 103, 114, 119, 142, 144, 146, 154, 158, 169, 173, 176, 178, 185, 186, 188, 197, 198, 203, 213, 215, 219, 227, 228, 237, 240, 253, 256, 266, 268, 273, 274, 286, 291, 292, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 329, 338, 341, 351, 367, 368, 371, 373, 376, 379, 384, 392, 393, 402, 404, 405, 409, 410, 413, 416, 417, 418, 464, 465, 466, 467, 489, 567, 581, 582, 588, 589, 591, 630, 658, 659, 672, 674, 676, 678, 687, 833, 864, 865, 904, 905, 906, 907, 909, 910, 982, 988, 993, 996, 1003, 1006, 1007, 1009, 1012, 1014, 1016, 1017, 1019, 1024, 1025, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1054], "preprocessor": [69, 130, 167, 197, 228, 236, 238, 311, 316, 318, 319, 320, 322, 410, 417, 588, 589, 591, 1012, 1028, 1035, 1038, 1043, 1045], "preprocessor__cat__selector__percentil": 69, "preprocessor__num__imputer__strategi": 69, "preprocessor_list": 236, "prescrib": 393, "presenc": [7, 58, 60, 78, 79, 107, 166, 170, 181, 201, 236, 305, 377, 380, 393, 411, 414, 712, 726, 756, 769, 833, 867, 875, 877, 884, 976, 982, 988, 992, 993, 1006, 1016, 1038, 1039, 1041, 1045, 1047, 1049], "present": [2, 3, 11, 41, 47, 90, 93, 100, 114, 115, 122, 125, 126, 145, 146, 155, 158, 176, 179, 181, 186, 197, 226, 229, 233, 248, 253, 257, 262, 265, 268, 269, 283, 305, 308, 310, 351, 376, 377, 381, 384, 391, 393, 399, 409, 411, 414, 416, 417, 427, 428, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 492, 496, 500, 501, 502, 503, 504, 505, 510, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 549, 550, 561, 562, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 617, 627, 628, 629, 630, 650, 654, 677, 688, 689, 690, 691, 712, 729, 730, 738, 769, 783, 784, 787, 797, 798, 800, 803, 804, 812, 814, 828, 846, 847, 848, 850, 852, 854, 855, 856, 863, 868, 876, 877, 878, 879, 880, 882, 885, 896, 897, 908, 916, 918, 919, 941, 976, 991, 992, 993, 994, 999, 1002, 1011, 1013, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1052], "preserv": [2, 46, 98, 222, 230, 254, 381, 382, 407, 413, 414, 416, 417, 581, 588, 589, 591, 646, 652, 696, 742, 774, 778, 818, 819, 820, 888, 924, 925, 982, 988, 989, 1002, 1004, 1012, 1023, 1027, 1035, 1038, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "preserves_dtyp": 381, "preservs": 1049, "preset": [666, 668, 676, 996], "presort": [1040, 1045], "press": [374, 409, 414, 419, 420, 444, 590, 610, 611, 614, 619, 622, 643, 839, 843, 985, 988, 990, 994], "pressur": [146, 376, 1026], "preston": [1040, 1041, 1042], "presum": [167, 281, 409, 417, 839], "prettenhof": [0, 9, 121, 123, 124, 260, 350, 351, 398, 1035, 1036, 1037, 1038, 1039, 1040], "pretti": [168, 222, 257, 350, 365, 379, 391, 861, 862, 996, 1044], "preuss": 1051, "prev_scor": 15, "preval": [109, 315, 393, 700, 712, 992], "prevalence_pos_label": [266, 700], "prevent": [2, 53, 120, 122, 143, 166, 198, 201, 305, 311, 312, 338, 350, 355, 361, 379, 381, 383, 391, 392, 402, 409, 414, 417, 442, 449, 488, 489, 561, 562, 590, 591, 611, 728, 785, 861, 862, 889, 890, 892, 893, 894, 895, 992, 994, 997, 998, 1002, 1008, 1026, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "previou": [2, 41, 51, 69, 93, 112, 119, 120, 122, 130, 149, 154, 155, 166, 167, 168, 181, 183, 198, 230, 232, 233, 253, 259, 262, 266, 305, 310, 319, 350, 351, 352, 361, 365, 374, 379, 381, 384, 385, 387, 391, 393, 394, 396, 408, 409, 416, 417, 468, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 630, 646, 648, 652, 653, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 707, 819, 835, 838, 853, 861, 862, 901, 918, 988, 992, 996, 1002, 1013, 1019, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "previous": [5, 51, 55, 69, 109, 155, 167, 253, 257, 266, 273, 319, 374, 387, 391, 396, 409, 414, 417, 440, 443, 454, 524, 534, 541, 649, 658, 659, 666, 667, 668, 676, 677, 678, 904, 960, 988, 1002, 1012, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "previous_loss": [666, 667, 668, 677], "previs": 227, "price": [10, 73, 119, 120, 125, 130, 236, 311, 982, 988, 1017, 1024], "priceless": 379, "prieur": 1048, "primal": [658, 659, 677, 904, 905, 1006, 1007], "primari": [381, 393, 414, 515, 999, 1016, 1017], "primarili": [249, 264, 379, 393, 404, 409, 950, 1017, 1044, 1045], "primat": 350, "primdal": 1043, "primit": 1050, "princ": 1048, "princip": [1, 14, 82, 83, 85, 88, 95, 97, 98, 99, 101, 128, 164, 218, 231, 234, 292, 310, 317, 371, 409, 412, 421, 484, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 550, 657, 688, 689, 690, 692, 693, 830, 853, 865, 884, 940, 941, 989, 995, 1014, 1029, 1030, 1035], "principl": [109, 156, 288, 352, 379, 391, 393, 394, 413, 416, 941, 981, 991, 995, 1006, 1042], "print": [2, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 19, 22, 24, 28, 30, 36, 40, 41, 44, 45, 46, 47, 48, 50, 51, 56, 58, 59, 61, 65, 68, 69, 71, 72, 73, 78, 83, 84, 90, 93, 96, 100, 101, 103, 109, 112, 115, 116, 117, 118, 119, 121, 123, 125, 136, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 166, 168, 169, 170, 173, 181, 182, 183, 184, 188, 189, 192, 193, 197, 199, 200, 201, 204, 205, 212, 213, 215, 219, 220, 223, 228, 230, 232, 233, 236, 240, 246, 252, 253, 257, 258, 259, 260, 262, 264, 267, 268, 272, 283, 287, 294, 296, 300, 301, 302, 307, 310, 312, 315, 316, 317, 319, 321, 322, 325, 326, 329, 338, 350, 351, 352, 355, 359, 361, 365, 373, 374, 377, 380, 381, 387, 393, 399, 402, 410, 413, 416, 417, 419, 464, 467, 468, 472, 478, 490, 494, 502, 512, 513, 541, 544, 549, 550, 559, 560, 561, 562, 564, 565, 569, 570, 577, 583, 584, 585, 587, 588, 589, 591, 612, 617, 618, 630, 646, 647, 649, 650, 652, 653, 654, 656, 660, 661, 662, 663, 666, 667, 676, 677, 684, 696, 713, 717, 737, 795, 797, 798, 799, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 831, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 865, 866, 874, 880, 884, 892, 902, 903, 904, 905, 906, 909, 911, 917, 923, 928, 953, 960, 976, 982, 992, 993, 994, 995, 1000, 1008, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1037, 1043, 1044, 1046, 1050], "print_changed_onli": [468, 902, 1044, 1046, 1047], "print_datafram": 257, "print_progress": 958, "print_rout": 233, "printabl": 1016, "prior": [1, 5, 14, 15, 44, 45, 55, 63, 64, 65, 90, 148, 149, 150, 155, 159, 162, 164, 169, 176, 178, 181, 242, 244, 248, 249, 250, 253, 259, 270, 293, 379, 381, 383, 393, 396, 399, 409, 412, 414, 416, 419, 465, 523, 536, 548, 549, 550, 551, 559, 611, 613, 614, 615, 619, 622, 623, 630, 644, 645, 646, 647, 651, 652, 654, 655, 656, 660, 661, 662, 672, 678, 681, 716, 797, 839, 840, 841, 842, 843, 864, 865, 879, 906, 909, 959, 981, 984, 986, 988, 991, 992, 994, 1000, 1008, 1009, 1014, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1051], "prior_k": 549, "priori": [197, 214, 268, 281, 305, 393, 409, 416, 588, 594, 991, 1051], "priorit": [408, 1013, 1042], "prioriti": [378, 632, 832, 833, 1013, 1038], "priors_": [549, 550], "privaci": 1012, "privat": [0, 383, 393, 394, 920, 1017, 1035, 1043, 1045, 1046, 1048, 1049], "privileg": [236, 387], "priyam": 1050, "prng": [80, 1027], "proanthocyanin": 376, "prob_pos_clf": 22, "prob_pos_isoton": 22, "prob_pos_sigmoid": 22, "prob_pr": [438, 439], "prob_tru": [438, 439], "proba": [23, 25, 132, 437, 912, 914], "proba_": [906, 909, 1046], "proba_map": 53, "proba_neg_class": [23, 25], "proba_pos_class": [23, 25], "probabilist": [13, 24, 25, 28, 76, 80, 92, 93, 102, 103, 104, 148, 149, 152, 155, 156, 159, 164, 232, 350, 393, 406, 415, 416, 437, 473, 476, 532, 534, 535, 541, 559, 588, 589, 610, 622, 643, 645, 676, 703, 741, 800, 826, 871, 906, 907, 909, 910, 985, 986, 988, 991, 992, 997, 1002, 1007, 1008, 1012, 1014, 1017, 1035, 1038, 1042], "probabilisticpca": [1035, 1038], "probabilities_": [53, 446], "probabilities_or_label": 569, "probabl": [0, 11, 21, 25, 26, 27, 32, 33, 53, 73, 89, 90, 108, 125, 131, 134, 141, 148, 149, 150, 151, 159, 164, 167, 188, 189, 209, 212, 213, 218, 222, 227, 229, 230, 253, 259, 261, 262, 265, 266, 269, 273, 278, 281, 302, 305, 309, 315, 317, 328, 330, 344, 345, 365, 368, 374, 375, 381, 385, 391, 393, 408, 409, 413, 414, 417, 418, 419, 435, 436, 437, 438, 439, 446, 447, 449, 504, 512, 515, 523, 527, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 570, 593, 594, 610, 613, 614, 622, 627, 631, 632, 633, 658, 659, 671, 676, 692, 698, 700, 702, 703, 706, 707, 709, 712, 716, 720, 722, 726, 727, 729, 739, 740, 741, 742, 756, 782, 784, 787, 788, 789, 794, 797, 798, 799, 800, 803, 804, 814, 822, 829, 830, 833, 835, 836, 839, 840, 841, 842, 843, 846, 849, 854, 860, 861, 885, 897, 898, 899, 900, 901, 904, 906, 909, 912, 914, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1006, 1008, 1013, 1014, 1015, 1028, 1030, 1035, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "probable_clust": 54, "probas_pr": [782, 1053], "probb_": [906, 909, 1046], "probe": 1000, "probinette4": 1047, "probl": [607, 608], "problem": [1, 2, 3, 4, 9, 11, 12, 13, 24, 35, 52, 53, 55, 64, 93, 109, 112, 115, 117, 122, 123, 149, 164, 169, 173, 176, 181, 183, 186, 190, 191, 197, 199, 201, 214, 215, 220, 226, 227, 234, 236, 239, 257, 259, 264, 268, 269, 273, 274, 278, 281, 283, 288, 295, 309, 318, 322, 335, 338, 342, 345, 346, 350, 351, 359, 361, 365, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 391, 393, 406, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 444, 447, 449, 450, 452, 457, 462, 465, 478, 503, 508, 509, 515, 516, 517, 518, 523, 524, 528, 531, 533, 537, 539, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 561, 564, 567, 571, 573, 589, 610, 631, 643, 648, 650, 652, 654, 655, 656, 657, 658, 659, 664, 665, 666, 668, 669, 672, 673, 674, 675, 676, 677, 679, 680, 685, 686, 687, 688, 689, 691, 693, 695, 708, 716, 729, 730, 735, 738, 739, 783, 784, 787, 788, 797, 798, 801, 802, 803, 804, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 832, 833, 834, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 870, 871, 877, 885, 888, 894, 895, 904, 905, 912, 914, 930, 941, 982, 983, 987, 988, 989, 991, 992, 993, 994, 995, 996, 1000, 1002, 1006, 1009, 1013, 1015, 1017, 1020, 1021, 1022, 1028, 1029, 1030, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "problemat": [2, 167, 253, 255, 410, 982, 1043], "proc": [25, 77, 406, 417, 450, 689, 693, 839, 981, 989, 994, 998], "proce": [48, 143, 178, 377, 383, 412, 413, 416, 440, 988], "procedur": [44, 54, 115, 122, 146, 177, 185, 248, 261, 308, 312, 338, 350, 361, 379, 381, 391, 392, 393, 394, 406, 407, 411, 413, 414, 416, 418, 531, 537, 538, 540, 545, 546, 547, 553, 554, 555, 556, 559, 560, 593, 595, 602, 609, 644, 672, 674, 687, 728, 785, 861, 862, 881, 893, 963, 981, 988, 994, 1002, 1005, 1006, 1007, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "proceed": [78, 146, 374, 376, 409, 420, 439, 444, 511, 696, 708, 726, 756, 851, 901, 992, 1004, 1005, 1006], "process": [0, 2, 3, 6, 17, 24, 28, 29, 32, 43, 44, 45, 46, 48, 54, 55, 64, 68, 70, 72, 77, 79, 89, 94, 95, 97, 107, 109, 118, 120, 122, 127, 128, 136, 137, 138, 159, 166, 176, 179, 199, 201, 207, 208, 209, 210, 232, 233, 234, 236, 243, 244, 247, 249, 253, 259, 261, 262, 271, 278, 299, 305, 307, 308, 312, 317, 321, 326, 330, 342, 343, 347, 351, 352, 355, 365, 366, 367, 368, 374, 378, 379, 381, 383, 385, 388, 391, 392, 393, 402, 409, 410, 411, 413, 414, 415, 416, 417, 418, 422, 448, 449, 475, 496, 504, 523, 534, 535, 536, 537, 538, 561, 562, 563, 588, 589, 591, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 632, 633, 639, 643, 664, 672, 685, 686, 703, 723, 741, 781, 797, 799, 800, 803, 804, 814, 822, 825, 826, 827, 836, 837, 853, 867, 871, 873, 874, 875, 884, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 958, 960, 981, 984, 988, 992, 995, 1002, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1027, 1028, 1030, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "process_rout": [233, 1052], "processor": [69, 130, 167, 368, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900], "procter": 10, "prod": [351, 621], "prod_": 994, "prod_i": 984, "proding": 1051, "produc": [11, 12, 23, 24, 42, 55, 68, 96, 122, 123, 124, 126, 181, 265, 302, 328, 361, 366, 374, 375, 379, 381, 384, 393, 394, 409, 410, 413, 414, 416, 440, 443, 446, 452, 519, 536, 559, 563, 581, 588, 593, 594, 632, 633, 802, 803, 804, 812, 817, 820, 825, 869, 879, 906, 909, 983, 984, 988, 990, 991, 992, 995, 998, 999, 1003, 1005, 1006, 1007, 1019, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "product": [18, 69, 93, 131, 149, 154, 168, 342, 361, 365, 381, 382, 385, 388, 405, 414, 416, 451, 538, 540, 547, 582, 589, 590, 591, 613, 614, 633, 640, 664, 665, 685, 686, 761, 763, 775, 777, 876, 879, 896, 897, 942, 981, 984, 988, 990, 1002, 1004, 1006, 1007, 1012, 1017, 1030, 1043], "production": 1017, "prof": 385, "profession": 167, "professor": 1017, "profil": [197, 365, 379, 382, 521, 524, 988, 1017], "profile_default": 385, "profit": [0, 253, 1052], "prog": [146, 376], "prognosi": [146, 376], "program": [0, 48, 146, 351, 361, 366, 367, 376, 377, 379, 381, 385, 391, 508, 635, 670, 894, 895, 988, 1007, 1008, 1012, 1013, 1016, 1035, 1037], "programmat": [381, 499, 1044], "progress": [2, 5, 6, 93, 133, 146, 162, 190, 288, 319, 376, 379, 383, 384, 394, 399, 404, 409, 559, 560, 692, 833, 835, 838, 853, 861, 862, 1017, 1026, 1028, 1035, 1037, 1044, 1049], "prohibit": [166, 236, 413, 416, 627, 997, 1005, 1042], "proj": [12, 649], "proj_gradi": 385, "proj_oper": 12, "project": [4, 6, 9, 12, 15, 31, 43, 53, 56, 65, 88, 92, 93, 95, 97, 99, 103, 104, 111, 153, 155, 157, 158, 164, 168, 189, 194, 206, 218, 219, 220, 221, 222, 225, 231, 234, 241, 244, 254, 287, 292, 296, 302, 335, 343, 351, 356, 365, 368, 371, 373, 377, 378, 379, 384, 385, 388, 393, 394, 396, 405, 412, 414, 415, 421, 440, 446, 451, 452, 462, 474, 482, 483, 484, 485, 489, 502, 504, 531, 533, 534, 535, 537, 539, 541, 542, 543, 544, 548, 549, 573, 582, 589, 641, 642, 649, 672, 674, 688, 691, 695, 696, 834, 853, 881, 896, 897, 898, 940, 941, 986, 988, 989, 990, 993, 995, 996, 998, 1005, 1008, 1010, 1014, 1017, 1019, 1024, 1027, 1030, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "projected_data": 230, "projected_dist": 230, "projectedgradientnmf": 1040, "prokopi": [1040, 1043], "prolifer": 381, "prolin": [17, 310, 376], "promin": [96, 393], "promis": [393, 1013], "promot": [167, 442, 708, 1012, 1046, 1048, 1052], "prompt": [377, 379, 396, 401, 417, 1019], "prone": [25, 197, 245, 309, 391, 406], "pronounc": [37, 38, 50, 154], "proof": [391, 416, 898, 1004], "prop": [71, 79, 203, 245, 289, 337, 359, 1024], "propag": [18, 30, 34, 35, 47, 53, 61, 62, 66, 87, 144, 164, 235, 324, 331, 374, 407, 440, 454, 502, 512, 514, 697, 704, 705, 713, 714, 717, 718, 737, 793, 795, 864, 878, 899, 900, 901, 958, 959, 996, 1014, 1015, 1029, 1030, 1035, 1047, 1050], "proper": [25, 53, 186, 215, 367, 381, 385, 406, 416, 449, 541, 553, 676, 941, 967, 987, 988, 989, 992, 1007, 1035, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "properli": [2, 11, 23, 53, 127, 154, 254, 315, 367, 377, 379, 383, 387, 415, 904, 905, 906, 907, 908, 909, 910, 981, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "properti": [10, 23, 156, 157, 199, 214, 244, 285, 310, 359, 365, 368, 372, 379, 381, 396, 405, 406, 409, 411, 414, 416, 418, 419, 424, 442, 445, 451, 452, 453, 464, 465, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 591, 593, 594, 597, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 646, 652, 655, 660, 662, 674, 675, 699, 704, 705, 708, 799, 800, 803, 804, 814, 822, 832, 833, 863, 864, 877, 878, 879, 885, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 984, 987, 988, 989, 992, 993, 995, 998, 1002, 1005, 1007, 1008, 1009, 1013, 1019, 1040, 1044, 1045, 1048, 1049, 1052, 1053], "property_magnitud": 253, "propon": 68, "proport": [13, 24, 38, 125, 145, 183, 197, 204, 210, 226, 236, 253, 262, 286, 290, 293, 345, 347, 365, 374, 406, 409, 411, 413, 414, 416, 417, 438, 439, 446, 469, 474, 515, 549, 550, 555, 557, 559, 560, 561, 562, 563, 564, 583, 584, 588, 591, 627, 632, 658, 659, 666, 667, 668, 674, 675, 676, 678, 696, 701, 712, 722, 801, 802, 803, 804, 817, 820, 830, 850, 861, 862, 878, 904, 905, 906, 909, 910, 912, 914, 916, 918, 930, 981, 991, 992, 995, 998, 1006, 1007, 1008, 1040, 1052], "propos": [55, 76, 77, 283, 374, 379, 381, 391, 393, 409, 411, 416, 421, 422, 450, 475, 535, 607, 608, 676, 677, 678, 861, 862, 988, 991, 995, 1006, 1010, 1042], "proprietari": 1008, "propto": [415, 994], "prorokovi\u0107": 1053, "protect": [380, 383, 958], "protein": 373, "protocol": [402, 992, 1038, 1051, 1052], "protocol_typ": 236, "prototyp": 1017, "prove": [94, 1017], "proven": [259, 986, 990, 1017], "provenc": 311, "provid": [0, 3, 6, 9, 11, 22, 25, 28, 32, 35, 40, 53, 58, 79, 93, 111, 116, 117, 125, 128, 130, 149, 155, 167, 168, 176, 183, 185, 186, 189, 198, 201, 206, 219, 223, 227, 228, 233, 248, 253, 259, 260, 261, 265, 293, 296, 301, 305, 309, 315, 316, 318, 320, 336, 342, 343, 345, 350, 351, 355, 356, 359, 361, 365, 367, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 388, 391, 392, 393, 395, 396, 399, 402, 404, 405, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 423, 430, 437, 440, 442, 443, 444, 446, 447, 449, 450, 452, 459, 460, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 493, 494, 496, 498, 501, 532, 533, 534, 535, 538, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 593, 594, 601, 605, 610, 611, 627, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 690, 694, 699, 711, 722, 735, 741, 742, 764, 774, 778, 788, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 861, 862, 864, 867, 869, 870, 871, 874, 875, 876, 879, 881, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 930, 935, 949, 951, 968, 969, 970, 981, 982, 984, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1017, 1019, 1023, 1026, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "provinc": 311, "provost": [788, 992], "proxi": [166, 167, 414, 860, 1023, 1040], "prun": 385, "prune": [164, 354, 359, 360, 418, 500, 557, 558, 559, 560, 564, 565, 593, 644, 830, 912, 913, 914, 915, 995, 1014, 1015, 1030, 1035, 1038, 1045, 1046], "przybocki": 992, "ps_lsvm_score": 173, "ps_lsvm_time": 173, "pseudo": [198, 302, 381, 413, 421, 440, 452, 454, 462, 469, 470, 471, 473, 474, 475, 476, 533, 561, 562, 563, 627, 634, 639, 641, 642, 646, 647, 652, 653, 660, 661, 662, 663, 677, 691, 695, 803, 804, 812, 814, 853, 860, 896, 897, 901, 904, 905, 906, 909, 940, 941, 988, 1004, 1040, 1049], "pseudo_likelihood": 860, "pseudocount": [536, 1043], "psf": [0, 379], "psi": 414, "psi_1": 414, "psi_2": 414, "psi_n": 414, "pspachtholz": [1045, 1046, 1047], "psycholog": [409, 705, 716], "psychometrica": 635, "psychometrika": [690, 694, 989], "pt": [9, 374, 418, 880, 1002], "pt_i": 293, "pt_j": 293, "ptocca": 1045, "ptp": 10, "pts_": 9, "pts_test": 9, "pts_train": 9, "pub": [223, 842, 899], "public": [0, 77, 373, 379, 381, 383, 384, 391, 392, 393, 394, 413, 416, 468, 664, 671, 685, 686, 692, 902, 988, 996, 1035, 1040, 1041, 1046, 1047, 1048, 1051], "publica": 1010, "publicli": [379, 1045], "publish": [373, 374, 381, 383, 387, 393, 1004, 1013, 1047], "pubu": [211, 230, 289, 337], "pubu_r": 78, "puerta": 1050, "puggioni": 1039, "puhuk": [1049, 1050], "pujalt": 1049, "pulapakura": 1052, "pulchritud": 350, "pulido": 1048, "pulkit": [1043, 1044, 1046], "pull": [68, 318, 366, 377, 382, 393, 394, 1016, 1045], "puls": 376, "punctuat": [417, 588, 589, 591], "puneet": 1042, "puneeth": 1052, "puor": 96, "puor_r": 153, "pure": [78, 79, 84, 181, 197, 393, 409, 473, 479, 496, 557, 558, 559, 560, 564, 565, 566, 705, 715, 786, 795, 912, 913, 914, 915, 1002], "pure_emp_cov": 79, "pure_loc": 79, "pure_x": 79, "purepremium": 215, "puriti": [111, 916, 918], "purna": 1049, "purpl": [76, 90, 222], "purport": 1042, "purpos": [7, 10, 35, 84, 120, 125, 161, 211, 212, 213, 218, 220, 234, 246, 248, 253, 255, 256, 338, 339, 345, 350, 351, 361, 374, 379, 381, 392, 393, 394, 396, 401, 405, 409, 410, 414, 416, 417, 418, 419, 826, 827, 864, 989, 992, 993, 995, 998, 1010, 1012, 1019, 1047, 1049, 1053], "pursu": 167, "pursuit": [52, 94, 96, 102, 164, 175, 216, 272, 414, 474, 526, 531, 537, 542, 548, 664, 665, 685, 686, 1014, 1015, 1030, 1035], "push": [25, 379, 383, 406, 1016], "pushd": 387, "put": [38, 56, 138, 149, 151, 231, 238, 243, 273, 299, 307, 319, 330, 343, 347, 367, 381, 383, 384, 387, 402, 419, 443, 447, 459, 515, 614, 647, 661, 797, 881, 885, 893, 906, 907, 908, 909, 910, 931, 982, 989, 991, 992, 993, 999, 1002, 1020, 1022, 1028], "putnam": 1041, "putschblo": 1048, "pvalu": [592, 595, 596, 598, 599, 600, 829], "pvalue_iri": 265, "pvalue_rand": 265, "pvalues_": [142, 592, 595, 596, 598, 599, 600, 1035], "pvnguyen": 1039, "pwalchessen": 1047, "pwd": 387, "px": [115, 260], "pxd": 379, "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 366, 377, 379, 380, 383, 385, 387, 393, 396, 417, 420, 440, 444, 454, 461, 498, 530, 644, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 879, 883, 936, 992, 1007, 1012, 1014, 1026, 1028, 1035, 1037, 1041, 1045, 1049], "py3": 396, "py39": 396, "pyamg": [44, 396, 401, 409, 452, 462, 691, 695], "pyarrow": [396, 401], "pybrain": 1035, "pycon": [402, 1011], "pyd": 380, "pydata": [2, 387, 402, 1011, 1017], "pydata_2013": 1017, "pydebug": 385, "pyflak": 381, "pyfunc": [699, 995], "pyfuncdist": 699, "pymc": 1012, "pynndesc": 283, "pynndescenttransform": 283, "pyodid": [379, 960], "pyoxid": 1048, "pypi": [366, 377, 379, 381, 383, 385, 396, 1008, 1043, 1047, 1049, 1050, 1052], "pyplot": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 170, 173, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 379, 386, 438, 502, 631, 632, 697, 698, 700, 701, 702, 806, 823, 1023, 1024, 1025, 1026, 1027, 1032, 1049], "pyplpt": 373, "pyproject": 383, "pypy3": 1043, "pysniak": 1038, "pystruct": [391, 1012], "pytabl": 373, "pytb": 387, "pytest": [315, 366, 377, 379, 381, 382, 396, 401, 404, 935, 936, 1045, 1048], "python": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 365, 367, 373, 377, 379, 380, 381, 382, 383, 384, 387, 388, 391, 393, 396, 401, 402, 404, 410, 417, 496, 508, 509, 581, 699, 811, 878, 960, 992, 1002, 1007, 1008, 1010, 1013, 1016, 1017, 1019, 1020, 1022, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "python2": 1043, "python3": [377, 396], "python37": 396, "pythonsoftwarefound": 396, "pythonx": 377, "pytorch": [4, 391, 1012, 1013, 1024, 1051, 1052], "pytorch_enable_mps_fallback": 404, "pyx": [379, 380, 385, 387], "p\u00e9rez": 1043, "p\u00f6lsterl": [1042, 1045, 1048], "q": [10, 69, 83, 122, 197, 318, 405, 409, 414, 940, 988, 1007], "q1": 509, "q327": 376, "q_": 1007, "q_m": 1008, "q_max": [882, 894], "q_min": [882, 894], "qaiser": 1052, "qda": [29, 376, 549, 550, 1015, 1030, 1040], "qdeffens": [1045, 1048], "qemu": 387, "qi": [509, 1047], "qian": [1041, 1046], "qiang": 1039, "qianm": 1047, "qid": [487, 508, 509, 1036, 1041], "qimu": 1041, "qin": [0, 306, 376, 397, 417, 1042, 1043, 1044, 1045, 1046], "qingi": 1043, "qinhanmin2005": 306, "qizhi": 1046, "qmarcou": 1052, "qn": 509, "qp": 1007, "qr": [44, 199, 404, 534, 541, 544, 940, 941, 989, 1041, 1052], "qt": [309, 881], "qtconsol": 385, "quad": [419, 995, 1006], "quadcontourset": 631, "quadmesh": 631, "quadrant": 305, "quadrat": [2, 7, 27, 31, 33, 78, 79, 80, 154, 158, 164, 211, 236, 248, 261, 318, 407, 440, 458, 461, 549, 550, 623, 631, 648, 658, 659, 669, 676, 680, 716, 909, 910, 988, 989, 992, 995, 998, 1002, 1006, 1007, 1014, 1015, 1030, 1036], "quadraticdiscriminantanalysi": [29, 32, 549, 986, 993, 995, 1035, 1040, 1042, 1050], "quadro": 1048, "quadv": 1049, "qualifi": 384, "qualit": [3, 4, 51, 53, 59, 115, 122, 197, 320, 374, 409, 439, 701, 1024, 1050], "qualiti": [0, 4, 18, 22, 35, 44, 46, 47, 56, 96, 118, 125, 167, 203, 252, 257, 266, 267, 268, 342, 379, 387, 391, 393, 403, 407, 409, 411, 414, 452, 462, 469, 474, 557, 558, 559, 560, 564, 565, 743, 814, 896, 897, 912, 913, 914, 915, 941, 987, 989, 997, 1004, 1008, 1012, 1013, 1017, 1023, 1024, 1030], "quang": 1046, "quansight": 0, "quantifi": [2, 35, 47, 76, 154, 215, 253, 266, 381, 393, 403, 407, 573, 867, 987, 1000, 1002, 1030], "quantil": [42, 51, 61, 89, 109, 111, 164, 175, 216, 305, 308, 309, 391, 416, 438, 439, 458, 519, 552, 553, 560, 562, 657, 670, 723, 745, 748, 750, 827, 869, 881, 882, 883, 893, 894, 992, 1002, 1014, 1015, 1030, 1035, 1039, 1042, 1044, 1048, 1049, 1051, 1053], "quantile_list": 11, "quantile_rang": [305, 882, 894, 1041], "quantile_regress": 199, "quantile_transform": [73, 881, 892, 1002, 1042, 1043, 1044, 1053], "quantileregressor": [318, 988, 992, 1048, 1049, 1050], "quantiles_": [881, 1002, 1045], "quantiletransform": [73, 168, 309, 410, 465, 880, 893, 982, 1002, 1042, 1043, 1044, 1045, 1046, 1051, 1053], "quantiletransformerquantiletransform": 168, "quantit": [2, 3, 4, 11, 23, 59, 122, 125, 133, 146, 255, 274, 376, 1024], "quantiti": [10, 119, 259, 266, 317, 365, 393, 409, 416, 721, 722, 723, 724, 785, 860, 981, 983, 986, 988, 1040], "quantiz": [4, 34, 44, 56, 66, 96, 164, 373, 374, 409, 443, 447, 449, 506, 779, 869, 966, 1002, 1014], "quantum": 990, "quartil": 882, "quartimax": [532, 1047], "quasi": [381, 861, 862, 988], "quazi": [1042, 1043], "queensland": 376, "quentin": [1042, 1043, 1044, 1051, 1052], "queqichao": 1039, "queri": [176, 286, 296, 365, 383, 415, 420, 444, 446, 450, 457, 552, 610, 611, 628, 644, 645, 726, 756, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 992, 995, 1008, 1012, 1016, 1037, 1039, 1040, 1043], "query_id": [487, 508, 509], "query_radiu": [844, 845], "question": [0, 136, 166, 253, 259, 345, 368, 378, 379, 384, 387, 402, 413, 416, 833, 906, 909, 988, 991, 992, 998, 1010, 1017], "queue": [6, 995, 1038], "quick": [2, 98, 239, 379, 381, 385, 396, 606, 830, 992, 993, 1002, 1017, 1026, 1032], "quicker": 991, "quickest": 377, "quickli": [37, 237, 300, 315, 376, 379, 380, 413, 416, 692, 778, 988, 995, 996, 1017, 1028, 1046], "quinlan": 1008, "quinonez": 1043, "quintana": 992, "quiroz": [35, 55, 115, 125, 176, 181, 236, 260, 262, 310, 350, 351, 352], "quit": [2, 11, 25, 51, 55, 84, 112, 136, 146, 167, 168, 195, 215, 253, 267, 278, 318, 350, 365, 384, 392, 409, 417, 987, 989, 994, 1017, 1043], "quiver": 95, "quot": [10, 11, 13, 68, 260, 350, 351, 366, 373, 374, 377, 383, 404, 407, 488, 489, 496, 992, 1004, 1007, 1028, 1050], "quota": [1048, 1049], "quotat": 374, "quotient": 992, "r": [0, 6, 8, 9, 10, 11, 12, 22, 23, 24, 25, 37, 41, 63, 73, 76, 77, 78, 79, 84, 93, 100, 103, 109, 112, 113, 118, 122, 123, 124, 133, 142, 150, 151, 152, 156, 157, 158, 161, 162, 167, 179, 181, 182, 186, 197, 204, 207, 215, 223, 229, 232, 243, 246, 249, 258, 259, 262, 264, 265, 266, 269, 272, 275, 281, 285, 286, 290, 294, 296, 311, 319, 340, 342, 352, 361, 374, 376, 380, 383, 391, 393, 402, 405, 406, 409, 411, 412, 413, 414, 416, 417, 426, 432, 437, 446, 451, 453, 465, 469, 474, 478, 482, 483, 484, 498, 504, 513, 520, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 588, 589, 590, 591, 606, 609, 610, 611, 627, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 685, 686, 692, 696, 716, 721, 722, 723, 724, 728, 730, 781, 785, 788, 799, 800, 814, 817, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 861, 862, 875, 880, 892, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 917, 958, 982, 984, 986, 988, 989, 992, 993, 994, 995, 996, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1028, 1035, 1039, 1042, 1045, 1046, 1047, 1048, 1050, 1052], "r0": [803, 804], "r1": 570, "r11": [197, 215], "r2": [73, 110, 115, 130, 166, 168, 192, 232, 381, 410, 416, 554, 570, 673, 827, 862, 992, 1000, 1044], "r2007": 416, "r22": 197, "r25": 215, "r26": 197, "r2_score": [73, 166, 181, 192, 193, 404, 416, 432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 724, 728, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 981, 992, 1036, 1038, 1044, 1048, 1049, 1053], "r2_score_ard": 181, "r2_score_enet": 181, "r2_score_lasso": 181, "r2_score_nnl": 192, "r2_score_ol": 192, "r2_with_abl": 166, "r2_without_": 166, "r3": 570, "r72": 197, "r73": 215, "r82": 197, "r93": 197, "r_": [9, 102, 210, 211, 244, 266, 289, 290, 337, 343, 347, 409, 707, 992, 1008], "r_0": 981, "r_k": 266, "r_multi": 1000, "r_n": [266, 707, 992], "r_regress": [418, 606, 1048, 1049, 1052], "r_squar": 392, "ra": 236, "raamana": [1043, 1044], "rabbit": [319, 321, 1002], "raccoon": [51, 96, 414], "raccoon_fac": [51, 96], "race": [167, 322, 374, 496, 1038], "race_hispan": 167, "race_oth": 167, "race_whit": 167, "rachel": [1047, 1050], "rachelcjordan": 1046, "rachez": [1040, 1041], "rachit": [1041, 1047, 1050], "rachum": 1047, "radar": 1017, "radford": 988, "radhakrishnan": 1043, "radial": [3, 98, 149, 154, 156, 338, 342, 371, 452, 622, 691, 990, 1007, 1030], "radian": [296, 699, 764], "radii": [844, 845], "radiu": [146, 275, 290, 338, 376, 409, 442, 450, 688, 764, 781, 844, 845, 846, 847, 848, 852, 854, 855, 856, 858, 995, 1037, 1039, 1049, 1052], "radius1": 64, "radius2": 64, "radius3": 64, "radius4": 64, "radius_neighbor": [319, 852, 854, 855, 856, 1039, 1044, 1045, 1047, 1048, 1049, 1050], "radius_neighbors_graph": [409, 420, 444, 846, 847, 848, 850, 852, 854, 855, 856, 857, 995, 1039, 1044, 1047], "radiusneighborsclassifi": [319, 846, 847, 852, 855, 993, 995, 1035, 1037, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "radiusneighborsregressor": [319, 846, 847, 852, 854, 993, 995, 1035, 1037, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "radiusneighborstransform": [315, 848, 995, 1045, 1047, 1049, 1050], "radostin": [1043, 1044], "raduspaimoc": 1046, "raf": 1044, "rafael": [1017, 1036, 1037, 1039, 1042], "rafal": [1050, 1051], "rafei": 1047, "raff": 1038, "raffaello": 1044, "rafiqu": [1043, 1044], "raghav": [0, 263, 305, 398, 1039, 1040, 1041, 1042, 1043, 1047], "raghavan": [414, 590, 839, 843, 990, 992, 994], "raghu": [409, 442], "raghunathan": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "raghuv": [1050, 1051], "raghuwanshi": 1049, "rah": 641, "rahiel": 1039, "rahil": [1049, 1050, 1051, 1052], "rahimi": [641, 984], "rahmaan": 1045, "rahman": [1042, 1043, 1047], "rahn": [1042, 1045], "rahul": [1047, 1052], "rai": [0, 398, 960, 992, 1035, 1045, 1047, 1048], "raimundo": 1043, "rain": [2, 11, 168, 408, 988], "rainbow": [22, 220], "rainfal": 988, "rais": [107, 198, 233, 234, 253, 262, 309, 318, 379, 381, 383, 384, 385, 388, 391, 393, 399, 402, 410, 413, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 509, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 577, 581, 582, 588, 589, 590, 591, 593, 594, 602, 603, 610, 611, 617, 629, 632, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 696, 698, 702, 709, 711, 712, 713, 714, 727, 729, 730, 738, 778, 782, 783, 784, 787, 788, 789, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 853, 854, 855, 859, 861, 862, 863, 864, 867, 868, 869, 870, 871, 876, 877, 878, 882, 883, 884, 891, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 922, 924, 925, 927, 928, 945, 949, 953, 976, 977, 978, 979, 992, 1002, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "raise_except": 978, "raise_warn": [262, 712, 978], "raj": 1052, "rajagopalan": [0, 398, 1043, 1047], "rajaona": [1041, 1042], "rajat": [1038, 1045], "rajborirug": 236, "rajdeep": 1044, "rajendra": 1043, "raji": [1050, 1051], "rakotoarison": [1042, 1043, 1045], "ralf": [1038, 1041, 1042, 1050, 1051], "ralph": 1053, "ram": [15, 51, 367, 402, 416, 896, 897, 994, 1007, 1028, 1041, 1047, 1050, 1051], "ramakrishnan": [409, 442], "ramana": [1041, 1042], "ramanath": 1040, "ramesh": [374, 1017, 1038, 1041, 1045], "rameshwar": [1042, 1043], "ramil": [1043, 1044], "rammig": [1017, 1041], "ramo": 1050, "rampin": 1042, "ramyanp": [1047, 1048], "ramzi": 1047, "ram\u00edrez": 992, "rand": [12, 22, 35, 36, 37, 38, 42, 47, 56, 60, 100, 112, 127, 129, 141, 176, 181, 220, 221, 226, 232, 233, 274, 295, 316, 317, 322, 329, 330, 344, 351, 357, 358, 388, 399, 544, 704, 705, 715, 757, 781, 786, 896, 897, 899, 900, 901, 1004, 1019, 1035, 1046, 1047], "rand_index": 705, "rand_scor": [35, 409, 715, 992, 1047], "randal": [884, 1039, 1049], "randi": 1041, "randint": [9, 35, 79, 90, 121, 162, 169, 221, 229, 233, 235, 271, 317, 322, 381, 384, 392, 399, 804, 821, 839, 840, 841, 843, 981, 982], "randn": [12, 31, 32, 37, 52, 63, 64, 78, 79, 96, 100, 126, 141, 149, 153, 166, 169, 186, 191, 192, 196, 210, 211, 214, 244, 247, 248, 254, 266, 268, 269, 274, 289, 290, 312, 316, 317, 322, 337, 342, 343, 347, 381, 384, 643, 670, 672, 678, 687, 821, 907, 910], "random": [2, 3, 4, 5, 9, 10, 11, 12, 18, 19, 22, 23, 24, 25, 29, 31, 32, 35, 37, 38, 42, 43, 46, 48, 50, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 69, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 90, 94, 95, 96, 99, 100, 108, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 134, 138, 141, 142, 145, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 166, 171, 176, 177, 178, 179, 181, 186, 187, 191, 192, 195, 196, 197, 198, 199, 200, 203, 204, 206, 210, 211, 214, 215, 218, 219, 221, 222, 223, 225, 226, 231, 232, 233, 234, 235, 236, 241, 243, 244, 246, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 262, 264, 266, 268, 269, 270, 271, 274, 276, 281, 283, 288, 289, 290, 295, 299, 306, 308, 309, 312, 316, 317, 319, 321, 325, 326, 329, 330, 337, 338, 340, 341, 342, 343, 344, 347, 350, 351, 357, 358, 365, 366, 368, 371, 375, 382, 384, 391, 392, 393, 399, 403, 404, 406, 409, 417, 418, 422, 434, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 488, 489, 490, 491, 492, 495, 496, 497, 502, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 536, 538, 539, 540, 541, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 582, 583, 584, 589, 607, 608, 610, 611, 627, 630, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 660, 661, 662, 663, 670, 671, 672, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 704, 705, 708, 731, 743, 781, 788, 793, 797, 798, 800, 802, 803, 804, 805, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 829, 830, 835, 837, 838, 839, 840, 841, 843, 844, 845, 849, 853, 860, 861, 862, 864, 867, 869, 878, 881, 885, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 927, 938, 940, 941, 963, 966, 982, 984, 987, 989, 991, 992, 996, 997, 998, 1000, 1002, 1007, 1008, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1026, 1027, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "random_": 186, "random_02": 186, "random_05": 186, "random_08": 186, "random_11": 186, "random_cat": [169, 1000], "random_choice_csc": 1045, "random_forest": 114, "random_from_data": [246, 797, 798, 991], "random_label": 35, "random_num": [169, 1000], "random_offset_": [641, 642], "random_project": [219, 230, 368, 1004, 1009, 1036, 1041, 1051, 1052], "random_sampl": [181, 844, 845, 849], "random_se": [8, 90, 118], "random_search": [260, 267], "random_st": [2, 3, 4, 5, 8, 10, 11, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 36, 40, 41, 42, 44, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 68, 69, 73, 80, 84, 90, 93, 95, 98, 109, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 142, 143, 145, 149, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 178, 179, 183, 189, 196, 197, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 231, 234, 235, 236, 237, 239, 240, 243, 245, 246, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 278, 281, 283, 286, 287, 291, 292, 293, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 336, 338, 339, 340, 345, 346, 350, 351, 355, 359, 361, 381, 384, 388, 392, 393, 404, 408, 409, 410, 413, 414, 416, 417, 421, 434, 437, 438, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 474, 478, 487, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 584, 593, 594, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 632, 633, 634, 635, 638, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 710, 735, 788, 792, 793, 797, 798, 799, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 849, 853, 860, 861, 862, 864, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 911, 912, 913, 914, 915, 917, 918, 938, 940, 941, 961, 963, 966, 981, 982, 984, 987, 992, 993, 994, 995, 996, 999, 1000, 1002, 1007, 1008, 1019, 1023, 1024, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "random_state_": [381, 536, 627, 853, 1049], "random_tre": 566, "random_tree_embed": 114, "random_unlabeled_point": [317, 899, 900, 901], "random_weights_": [641, 642], "randomforest": [8, 118, 365, 416, 912, 913, 1040], "randomforestclassifi": [24, 25, 29, 54, 113, 114, 115, 116, 117, 118, 132, 169, 170, 238, 239, 256, 271, 315, 317, 322, 350, 361, 392, 393, 406, 416, 418, 557, 558, 559, 561, 566, 567, 569, 803, 804, 822, 834, 914, 981, 982, 993, 1000, 1017, 1032, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "randomforestclassifierifittedrandomforestclassifi": [24, 116, 117, 322], "randomforestclassifierinot": 322, "randomforestclassifierrandomforestclassifi": [24, 169, 238, 271], "randomforestregressor": [8, 115, 129, 130, 133, 161, 162, 317, 322, 392, 416, 557, 558, 560, 562, 566, 568, 570, 632, 633, 914, 982, 993, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "randomforestregressorrandomforestregressor": [130, 133], "randomgeek78": 1049, "randomized_range_find": [388, 1036, 1041], "randomized_svd": [15, 388, 451, 453, 532, 541, 544, 546, 1035, 1036, 1041, 1048, 1049, 1050], "randomized_svd_low_rank": 1042, "randomizedlasso": 1042, "randomizedlogisticregress": 1042, "randomizedpca": [1017, 1035, 1037, 1038, 1040, 1041, 1042], "randomizedsearchcv": [4, 69, 149, 260, 267, 317, 361, 392, 399, 575, 981, 992, 1006, 1012, 1024, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053], "randomizedsearchcvinot": 69, "randomli": [11, 35, 46, 48, 59, 69, 83, 86, 91, 111, 112, 125, 126, 152, 161, 164, 168, 209, 214, 230, 234, 248, 254, 265, 278, 281, 325, 361, 366, 388, 391, 392, 409, 413, 416, 419, 449, 458, 512, 515, 519, 523, 531, 537, 545, 546, 551, 559, 560, 561, 562, 563, 564, 565, 610, 611, 671, 679, 690, 694, 716, 797, 798, 860, 898, 912, 913, 914, 915, 991, 993, 995, 998, 1000, 1004, 1008, 1014, 1026, 1028, 1046, 1050, 1052], "randomst": [3, 12, 18, 19, 22, 29, 32, 35, 42, 48, 59, 60, 79, 80, 84, 93, 95, 100, 110, 121, 122, 125, 126, 127, 129, 142, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 181, 186, 191, 198, 199, 204, 211, 221, 226, 232, 233, 243, 246, 254, 262, 265, 266, 268, 269, 270, 271, 299, 306, 308, 309, 312, 316, 317, 319, 321, 322, 325, 326, 330, 341, 357, 358, 381, 384, 388, 393, 399, 414, 421, 422, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 470, 474, 475, 476, 478, 479, 480, 481, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 781, 793, 797, 798, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 828, 829, 830, 834, 835, 838, 839, 840, 841, 843, 844, 845, 849, 853, 860, 861, 862, 869, 881, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 909, 910, 912, 913, 914, 915, 927, 940, 941, 961, 963, 966, 1002, 1019, 1030], "randomtreesembed": [114, 128, 219, 416, 914, 1036, 1043, 1044, 1048, 1049, 1050], "randomtreesembedding_": 566, "randomtreesembeddingrandomtreesembed": 114, "rang": [2, 3, 4, 5, 6, 8, 10, 15, 17, 18, 23, 24, 25, 30, 31, 35, 36, 38, 40, 44, 45, 46, 48, 49, 53, 58, 59, 61, 62, 76, 77, 79, 80, 109, 111, 112, 113, 116, 122, 125, 129, 141, 144, 145, 150, 167, 168, 173, 181, 186, 187, 191, 195, 197, 198, 201, 204, 205, 213, 215, 219, 221, 229, 230, 235, 236, 243, 245, 248, 249, 253, 254, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 274, 281, 287, 293, 296, 302, 305, 310, 311, 315, 319, 320, 326, 338, 345, 350, 351, 356, 359, 366, 373, 374, 376, 379, 381, 385, 388, 393, 402, 409, 413, 416, 419, 440, 461, 469, 471, 472, 473, 474, 475, 476, 478, 481, 491, 494, 495, 514, 527, 541, 553, 554, 559, 560, 563, 588, 589, 591, 629, 632, 638, 640, 648, 649, 669, 671, 676, 677, 678, 680, 692, 712, 731, 746, 788, 830, 836, 850, 852, 854, 855, 860, 874, 881, 882, 883, 889, 890, 893, 894, 897, 898, 940, 941, 960, 981, 988, 992, 996, 1006, 1013, 1017, 1022, 1023, 1024, 1026, 1040, 1041, 1042, 1043, 1045, 1048, 1051], "range_n_clust": 58, "range_n_outli": 79, "rangeindex": [167, 253, 496], "rangespan": 1010, "rangl": [984, 992, 1006, 1007], "ranjanikrishnan": 1048, "rank": [2, 15, 23, 78, 97, 100, 116, 144, 169, 170, 215, 257, 259, 267, 375, 403, 405, 406, 411, 412, 414, 416, 417, 508, 509, 521, 524, 549, 550, 593, 594, 606, 648, 657, 669, 680, 696, 720, 726, 727, 739, 740, 756, 788, 794, 803, 804, 941, 981, 983, 984, 989, 1000, 1002, 1017, 1030, 1036, 1041, 1044, 1045, 1049, 1050, 1053], "rank_": 657, "rank_t": 800, "rank_test_": 263, "rank_test_precis": [257, 263], "rank_test_recal": 257, "rank_test_scor": [259, 267, 800, 814, 1041], "rankdata": 1042, "ranked_exposur": [197, 215], "ranked_frequ": 197, "ranked_pure_premium": 215, "ranking_": [144, 593, 594], "rankylau": 1043, "ransac": [78, 164, 175, 203, 214, 216, 524, 649, 657, 671, 678, 679, 1014], "ransacregressor": [200, 203, 214, 399, 649, 678, 679, 988, 993, 1038, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1053], "rao": [413, 1047, 1050], "raphael": 1052, "rapha\u00ebl": 1045, "raphson": [648, 669, 680], "rapid": 1017, "rapidli": [201, 261, 1007, 1017, 1022], "rare": [25, 168, 311, 361, 383, 391, 393, 395, 406, 409, 413, 589, 648, 658, 659, 669, 680, 904, 929, 960, 988, 1002, 1017, 1042, 1043, 1044, 1048, 1050, 1053], "rarer": [350, 352, 417], "raschka": [310, 1040, 1041, 1042, 1043, 1044, 1047], "rashchedrin": 1042, "rasmu": [173, 1042], "rasmussen": [419, 610, 611, 614, 619, 622], "raspberri": 396, "raster": 68, "rastgoo": 1052, "rastogi": 1043, "rastrojo": 705, "rasul": [1040, 1042, 1043], "rat": [9, 296, 374, 498], "rate": [2, 109, 113, 119, 125, 141, 168, 197, 204, 215, 230, 236, 253, 256, 259, 266, 268, 269, 300, 301, 302, 367, 379, 408, 409, 410, 414, 418, 446, 466, 536, 553, 554, 559, 560, 561, 562, 592, 595, 596, 598, 599, 600, 606, 644, 645, 668, 676, 677, 678, 692, 698, 702, 727, 782, 789, 860, 861, 862, 898, 981, 988, 989, 992, 995, 996, 1006, 1008, 1017, 1039, 1043, 1044], "rather": [10, 25, 51, 80, 109, 112, 125, 161, 167, 197, 198, 211, 236, 273, 309, 310, 350, 351, 361, 366, 375, 377, 379, 381, 384, 385, 387, 391, 392, 393, 394, 409, 413, 414, 416, 417, 419, 448, 461, 463, 464, 467, 565, 581, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 629, 646, 647, 652, 653, 660, 661, 662, 663, 781, 814, 835, 837, 838, 867, 904, 905, 916, 941, 986, 988, 989, 992, 994, 995, 999, 1013, 1023, 1026, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1050, 1051, 1053], "ratio": [5, 51, 64, 71, 101, 164, 230, 232, 246, 251, 273, 276, 365, 379, 409, 411, 413, 416, 450, 456, 493, 494, 515, 541, 549, 550, 551, 631, 658, 710, 712, 716, 725, 730, 736, 739, 782, 783, 784, 787, 795, 827, 830, 850, 897, 961, 986, 998, 1008, 1014, 1024, 1050, 1052], "ration": [154, 253, 623, 990], "rationalquadrat": [154, 158, 419, 616], "raton": 988, "raul": [1037, 1038], "rausch": [328, 330, 1043, 1044, 1047], "rauscho": [328, 330], "rauwuckl": 1047, "ravel": [3, 12, 15, 17, 24, 40, 51, 52, 56, 78, 102, 110, 112, 118, 122, 128, 129, 130, 138, 149, 151, 153, 154, 155, 156, 167, 176, 187, 188, 190, 197, 210, 211, 219, 223, 226, 230, 232, 236, 240, 245, 247, 253, 262, 266, 268, 273, 283, 288, 289, 295, 296, 299, 300, 301, 302, 307, 308, 319, 330, 338, 343, 344, 346, 347, 350, 357, 358, 465, 493, 494, 495, 631, 718, 979, 992, 1051], "ravi": [1047, 1050], "raw": [2, 10, 13, 35, 79, 95, 130, 154, 167, 173, 302, 312, 327, 352, 365, 374, 381, 387, 393, 406, 407, 409, 411, 414, 417, 469, 474, 501, 502, 503, 559, 560, 561, 563, 582, 588, 589, 590, 591, 634, 677, 690, 694, 705, 786, 850, 908, 989, 992, 996, 998, 999, 1002, 1005, 1025, 1027, 1036, 1040, 1043, 1046, 1052], "raw_coef_": [904, 905], "raw_covariance_": [411, 469, 474], "raw_data": 352, "raw_docu": [588, 591], "raw_location_": [411, 469, 474], "raw_model": 312, "raw_pixel_classifi": 302, "raw_support_": [469, 474], "raw_target_regr": 410, "raw_valu": [721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 992, 1043, 1046], "raw_x": [417, 582], "raytheon": 10, "raz": 1049, "razor": 1026, "ra\u00fal": 1044, "rb": [6, 402], "rbf": [3, 4, 5, 8, 9, 28, 29, 98, 131, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 173, 211, 225, 226, 232, 241, 257, 259, 261, 264, 274, 275, 289, 290, 328, 330, 333, 335, 344, 348, 371, 410, 414, 416, 452, 462, 502, 504, 535, 541, 610, 611, 612, 613, 616, 618, 619, 620, 621, 623, 624, 631, 639, 640, 641, 642, 643, 676, 691, 765, 774, 776, 800, 811, 814, 820, 864, 884, 899, 900, 904, 906, 907, 908, 909, 910, 981, 984, 985, 987, 989, 992, 998, 1002, 1005, 1014, 1019, 1024, 1030, 1041, 1046], "rbf_featur": [641, 984], "rbf_kernel": [765, 990, 1039], "rbf_svc": [330, 1007], "rbfsampler": [231, 639, 640, 642, 984, 1019, 1039, 1049, 1050], "rbm": [302, 860, 861, 862, 997], "rbm_features_classifi": 302, "rc": [211, 383], "rc1": 383, "rceil": [405, 998], "rcond": 102, "rcparam": [6, 226, 231, 312], "rcv1": [372, 497, 1030, 1040], "rcwoolston": 1046, "rd": 417, "rda": 376, "rdbu": [29, 32, 93, 213, 299, 338, 343], "rdbu_r": [52, 80, 103, 338], "rdownload": 6, "rdylbu": [118, 356], "re": [2, 6, 12, 24, 25, 54, 68, 69, 109, 119, 152, 166, 167, 215, 233, 244, 248, 262, 264, 268, 316, 350, 352, 366, 379, 380, 383, 387, 392, 394, 399, 406, 413, 417, 469, 470, 471, 472, 473, 474, 475, 476, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 646, 652, 660, 662, 802, 817, 820, 912, 913, 914, 915, 988, 993, 995, 1002, 1007, 1013, 1017, 1028, 1035, 1039, 1040, 1042, 1044], "reach": [59, 115, 120, 146, 197, 199, 213, 215, 253, 261, 319, 338, 359, 384, 394, 396, 409, 414, 418, 450, 457, 508, 509, 593, 594, 627, 644, 645, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 682, 683, 684, 729, 730, 783, 797, 798, 861, 862, 901, 981, 992, 996, 1006, 1008, 1017, 1046, 1050, 1051, 1052], "reachability_": [63, 409, 450, 455, 456, 457], "reachabl": [53, 63, 446, 450, 455, 456, 457, 850, 946], "reactiv": 385, "read": [6, 11, 15, 93, 218, 266, 315, 316, 317, 319, 321, 365, 373, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 402, 409, 420, 421, 422, 423, 426, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 937, 981, 988, 992, 993, 1012, 1017, 1028, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053], "read_byt": 6, "read_csv": [10, 384, 496, 1050], "read_csv_kwarg": [496, 1051], "readabl": [80, 260, 318, 384, 385, 387, 534, 1044, 1047, 1048, 1049, 1050], "reader": [4, 40, 318, 367, 379, 1024], "readi": [2, 5, 154, 198, 253, 374, 383, 387], "readili": [319, 414, 1008, 1017], "readm": [387, 417, 493], "readonli": [904, 905, 1048, 1050, 1051], "readonly_memmap": 1052, "readthedoc": 393, "real": [11, 14, 29, 32, 53, 55, 68, 72, 76, 78, 79, 80, 109, 125, 152, 167, 201, 222, 226, 236, 252, 253, 265, 274, 287, 290, 306, 307, 337, 342, 352, 365, 368, 372, 373, 376, 383, 385, 388, 391, 392, 393, 405, 406, 409, 411, 413, 414, 416, 417, 469, 489, 490, 493, 494, 495, 496, 497, 500, 501, 504, 510, 551, 552, 553, 555, 556, 557, 558, 559, 560, 564, 565, 592, 594, 595, 596, 597, 598, 599, 600, 631, 699, 704, 724, 728, 752, 755, 757, 785, 795, 829, 861, 862, 906, 907, 908, 909, 910, 913, 915, 982, 983, 984, 989, 992, 994, 996, 997, 998, 1008, 1011, 1014, 1030, 1035, 1048, 1052], "real_cov": [76, 77, 422, 470, 473, 474, 475, 476, 479, 480, 481], "real_data": 287, "realist": [2, 6, 261, 268, 269, 335, 374, 992], "realiti": 375, "realiz": [197, 1017], "realli": [76, 169, 186, 383, 384, 385, 992, 998, 1017, 1049], "reappli": 416, "rearrang": [18, 19, 405], "reason": [2, 6, 10, 25, 40, 51, 68, 122, 125, 146, 167, 168, 173, 197, 198, 205, 215, 226, 230, 231, 233, 236, 253, 256, 259, 260, 265, 278, 283, 306, 310, 342, 351, 352, 361, 365, 366, 367, 374, 378, 379, 380, 381, 383, 387, 391, 392, 393, 394, 408, 409, 410, 411, 414, 416, 417, 508, 532, 574, 638, 646, 652, 654, 672, 687, 692, 763, 800, 814, 848, 853, 860, 879, 901, 981, 982, 987, 988, 989, 992, 994, 995, 996, 998, 1002, 1006, 1007, 1017, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "reassign": [48, 379, 447, 449, 1036, 1040], "reassignment_ratio": 449, "rebalanc": 393, "rebas": 383, "rebecca": 1042, "rebekah": [1043, 1044, 1045], "reboul": 1045, "rebuild": [365, 377, 402, 417, 442], "rebuilt": [30, 377, 844, 845], "rec": [17, 352, 374, 641], "rec_l1": 12, "rec_l2": 12, "rec_macro": 413, "recal": [4, 23, 30, 68, 80, 98, 143, 164, 227, 236, 251, 253, 257, 276, 278, 302, 325, 326, 379, 393, 408, 409, 504, 604, 700, 706, 707, 708, 712, 713, 727, 729, 730, 731, 782, 783, 784, 787, 788, 822, 830, 833, 865, 884, 888, 904, 988, 1008, 1014, 1024, 1028, 1038, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "recalcul": [237, 239, 409, 1032, 1035], "recall_macro": [413, 992], "recall_scor": [23, 253, 266, 413, 708, 784, 992, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "recant": 394, "receiv": [0, 17, 136, 164, 227, 233, 239, 251, 253, 254, 256, 261, 266, 276, 328, 352, 361, 379, 381, 387, 393, 408, 413, 416, 504, 658, 702, 706, 708, 727, 782, 788, 789, 819, 830, 832, 833, 871, 909, 993, 996, 997, 1006, 1014, 1045, 1046], "recent": [11, 199, 233, 368, 377, 380, 384, 387, 393, 409, 468, 538, 565, 1006, 1017, 1038, 1047], "recherch": 0, "recht": [641, 984], "recip": [383, 402, 989, 1017], "reciproc": [375, 992], "reckon": 374, "recogn": [2, 3, 27, 33, 49, 51, 84, 87, 96, 117, 144, 164, 198, 252, 287, 302, 318, 325, 326, 385, 399, 409, 417, 502, 697, 713, 830, 909, 992, 1014, 1019, 1052], "recognit": [1, 7, 13, 14, 46, 93, 164, 232, 235, 302, 310, 350, 372, 384, 414, 416, 418, 494, 502, 532, 534, 541, 697, 708, 713, 741, 769, 788, 789, 797, 814, 830, 884, 909, 984, 988, 992, 993, 997, 1007, 1009, 1014, 1019, 1022, 1030, 1035], "recommend": [84, 117, 161, 214, 227, 233, 255, 268, 309, 317, 342, 365, 366, 368, 373, 377, 379, 381, 385, 387, 391, 396, 402, 412, 413, 414, 416, 418, 438, 447, 449, 451, 460, 496, 508, 535, 538, 544, 549, 561, 562, 569, 582, 583, 589, 606, 611, 631, 632, 638, 658, 659, 670, 676, 692, 697, 698, 700, 702, 806, 812, 814, 823, 860, 867, 869, 876, 883, 884, 889, 890, 892, 893, 894, 895, 897, 906, 909, 941, 960, 981, 989, 992, 994, 996, 999, 1002, 1004, 1006, 1007, 1008, 1011, 1017, 1030, 1037, 1038, 1044, 1045, 1046, 1047, 1049, 1051], "recompil": [380, 385, 396], "recomput": [53, 54, 237, 239, 285, 315, 469, 474, 988, 1004, 1040, 1051], "reconstruct": [1, 14, 15, 18, 64, 93, 94, 98, 164, 196, 221, 222, 319, 402, 414, 417, 482, 483, 484, 531, 533, 535, 537, 538, 539, 540, 542, 543, 545, 546, 548, 583, 587, 652, 672, 688, 689, 693, 896, 897, 988, 989, 1014, 1049], "reconstruct_from_patches_2d": [96, 417, 583], "reconstruction_err_": [538, 540], "reconstruction_error": 688, "reconstruction_error_": 689, "record": [9, 94, 113, 125, 169, 233, 253, 311, 352, 365, 379, 402, 409, 411, 450, 457, 498, 620, 643, 692, 771, 774, 778, 779, 780, 781, 827, 850, 1048, 1049], "recov": [38, 63, 80, 94, 95, 100, 119, 149, 166, 181, 196, 197, 201, 218, 352, 411, 415, 418, 421, 460, 533, 559, 988, 989, 991, 1013, 1027, 1041], "recoveri": [10, 80, 181, 196, 411, 418], "recreat": [46, 237], "recreate_imag": 46, "rect": [6, 50, 176], "rect_colorbar": 305, "rect_histi": 305, "rect_histx": 305, "rect_scatt": 305, "rectangl": 6, "rectangular": [374, 393, 941, 1013], "rectifi": [861, 862], "recurs": [11, 49, 89, 126, 136, 140, 143, 146, 147, 164, 254, 257, 258, 264, 273, 287, 355, 381, 407, 409, 413, 440, 441, 442, 445, 463, 502, 515, 563, 593, 594, 597, 602, 632, 633, 658, 819, 864, 874, 992, 995, 998, 999, 1008, 1014, 1015, 1027, 1030, 1035, 1045, 1046], "recursionerror": 1053, "red": [7, 8, 9, 24, 31, 32, 58, 78, 90, 93, 94, 95, 112, 130, 133, 158, 173, 176, 177, 187, 195, 223, 237, 254, 265, 296, 300, 306, 310, 311, 327, 338, 358, 377, 393, 409, 414, 993], "reda": 1041, "redden": 1046, "reddi": [1042, 1043, 1044, 1049, 1052], "redefin": [18, 122, 167], "redesign": [391, 1035], "redirects_en": 15, "redirects_filenam": 15, "redirects_url": 15, "redistribut": 442, "redo": 351, "reduc": [2, 5, 40, 43, 44, 45, 46, 51, 69, 70, 76, 112, 122, 124, 125, 128, 143, 167, 176, 177, 181, 195, 201, 202, 205, 228, 230, 233, 236, 260, 266, 278, 292, 307, 310, 311, 320, 351, 352, 361, 371, 373, 376, 379, 385, 391, 393, 402, 406, 407, 408, 409, 411, 413, 414, 416, 417, 418, 420, 444, 445, 450, 457, 460, 493, 534, 544, 549, 555, 556, 557, 558, 563, 564, 565, 566, 573, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 627, 643, 652, 672, 673, 674, 675, 687, 692, 695, 781, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 831, 873, 874, 881, 893, 896, 897, 904, 905, 912, 913, 914, 915, 981, 984, 986, 987, 988, 989, 992, 995, 1004, 1005, 1007, 1009, 1019, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1053], "reduce_dim": [70, 238, 258, 410], "reduce_dim__k": 70, "reduce_dim__n_compon": [70, 258, 410], "reduce_func": [781, 1046], "reduced_data": 56, "reducer_label": 70, "reduct": [4, 17, 31, 52, 55, 67, 71, 74, 84, 93, 97, 101, 112, 128, 164, 217, 219, 220, 223, 224, 230, 234, 284, 291, 293, 297, 319, 335, 361, 365, 371, 407, 409, 410, 412, 414, 416, 418, 468, 482, 483, 484, 485, 502, 530, 532, 534, 535, 538, 539, 540, 541, 544, 547, 549, 553, 554, 557, 558, 559, 560, 564, 565, 566, 599, 607, 688, 689, 690, 691, 692, 693, 781, 800, 830, 846, 853, 860, 864, 865, 874, 884, 902, 904, 912, 913, 914, 915, 984, 989, 1004, 1008, 1013, 1014, 1015, 1017, 1024, 1030, 1036, 1037, 1038, 1041, 1049, 1050, 1051], "redund": [23, 25, 103, 145, 244, 249, 322, 361, 375, 378, 379, 384, 393, 406, 515, 634, 1013, 1028, 1047], "redundantli": 393, "ref": [379, 387, 982, 1041], "ref_lin": 438, "refactor": [319, 1035, 1037, 1038, 1039, 1045, 1048, 1049, 1050], "refer": [2, 35, 36, 58, 61, 69, 88, 123, 125, 130, 146, 158, 215, 233, 236, 253, 266, 273, 286, 293, 305, 315, 316, 317, 318, 319, 320, 321, 322, 351, 366, 368, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 396, 399, 402, 408, 410, 412, 413, 420, 421, 422, 437, 438, 439, 440, 442, 444, 446, 447, 448, 450, 451, 452, 453, 454, 457, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 498, 503, 511, 513, 515, 516, 517, 518, 519, 520, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 590, 593, 594, 595, 602, 607, 608, 610, 611, 614, 619, 622, 623, 627, 628, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 649, 651, 653, 655, 656, 658, 661, 663, 665, 666, 667, 668, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 738, 740, 741, 743, 756, 758, 759, 769, 783, 785, 786, 788, 789, 792, 793, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 839, 840, 841, 843, 846, 849, 850, 851, 853, 860, 861, 862, 864, 869, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 884, 885, 892, 897, 898, 899, 900, 901, 902, 904, 906, 907, 909, 910, 912, 913, 914, 915, 929, 941, 958, 994, 996, 1003, 1008, 1013, 1016, 1019, 1023, 1027, 1028, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "referenc": [376, 379, 381, 387, 393, 896, 897, 995, 1042, 1048], "references_": 881, "refin": [23, 80, 472, 709, 992, 1028], "refit": [116, 136, 143, 145, 164, 251, 258, 260, 263, 266, 267, 271, 276, 393, 408, 413, 419, 502, 567, 627, 659, 665, 713, 800, 803, 804, 814, 822, 830, 909, 981, 988, 992, 1014, 1042, 1043, 1044, 1053], "refit_strategi": 257, "refit_time_": [800, 803, 804, 814, 1043], "reflect": [10, 38, 44, 45, 78, 90, 94, 119, 168, 169, 197, 215, 268, 287, 351, 375, 378, 383, 393, 395, 405, 450, 456, 989, 992, 998, 1000, 1027, 1036, 1044, 1053], "reformul": 378, "refrain": [198, 379], "refug": 63, "refurbish": 407, "refus": [253, 391, 894, 895], "reg": [123, 167, 177, 233, 306, 316, 343, 416, 558, 560, 568, 650, 651, 653, 654, 655, 656, 657, 663, 664, 665, 670, 671, 678, 679, 689, 693, 915, 988, 1040], "reg1": [133, 416], "reg2": [133, 416], "reg3": [133, 416], "reg_covar": [243, 797, 798], "reg_nnl": 192, "reg_ol": 192, "reg_param": 550, "regard": [0, 3, 5, 9, 11, 51, 53, 69, 88, 98, 137, 149, 154, 168, 169, 186, 194, 199, 220, 232, 236, 261, 268, 269, 286, 351, 374, 375, 379, 380, 384, 391, 393, 402, 407, 409, 414, 416, 417, 419, 443, 447, 452, 459, 462, 501, 614, 619, 656, 658, 701, 743, 798, 806, 822, 823, 828, 846, 847, 985, 988, 992, 994, 995, 997, 999, 1006, 1007, 1008, 1021, 1028, 1042, 1045], "regardless": [215, 260, 261, 262, 366, 379, 409, 535, 632, 633, 658, 704, 715, 992, 1004, 1043, 1050, 1051], "regedit": 396, "regener": 869, "regex": [259, 352, 464, 466], "regexp": [588, 589, 591], "regim": [2, 393, 904, 905, 991], "region": [10, 15, 19, 23, 34, 45, 46, 47, 51, 54, 64, 66, 96, 131, 156, 164, 167, 197, 215, 226, 230, 231, 249, 308, 338, 345, 376, 386, 393, 409, 416, 419, 448, 450, 456, 462, 587, 989, 992, 995, 998, 1002, 1006, 1008, 1014, 1027], "region_1": 311, "region_2": 311, "regist": [181, 350, 385, 960, 962], "register_parallel_backend": [960, 1043, 1053], "register_rai": 960, "registri": [377, 396, 1012], "regr": [193, 410, 554, 556, 565, 646, 647, 667, 837, 862, 905, 907, 910, 1007, 1026], "regr_1": [110, 357, 358], "regr_2": [110, 357, 358], "regr_3": 358, "regr_multirf": 129, "regr_rf": 129, "regress": [5, 8, 12, 22, 23, 25, 28, 43, 52, 67, 69, 74, 78, 79, 82, 85, 88, 94, 95, 96, 101, 103, 108, 109, 112, 114, 115, 116, 117, 120, 121, 124, 125, 129, 130, 134, 137, 141, 144, 146, 148, 150, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 175, 179, 181, 182, 183, 184, 187, 191, 192, 194, 198, 200, 201, 202, 203, 206, 208, 213, 216, 221, 225, 227, 235, 236, 237, 240, 241, 253, 255, 258, 267, 270, 272, 273, 274, 281, 284, 286, 291, 294, 297, 301, 302, 305, 306, 309, 310, 312, 317, 318, 319, 320, 322, 333, 334, 335, 345, 346, 348, 350, 354, 355, 359, 360, 366, 367, 368, 371, 372, 374, 376, 379, 381, 384, 387, 388, 391, 392, 393, 403, 406, 411, 412, 413, 414, 416, 418, 432, 437, 464, 465, 474, 484, 489, 490, 492, 496, 501, 502, 504, 505, 512, 516, 517, 518, 524, 528, 531, 535, 537, 539, 541, 542, 543, 545, 546, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 570, 571, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 609, 610, 611, 614, 615, 622, 623, 625, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 701, 706, 721, 723, 724, 728, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 785, 790, 791, 800, 803, 804, 806, 814, 823, 827, 828, 830, 831, 833, 835, 837, 838, 846, 847, 852, 854, 855, 861, 862, 864, 865, 868, 869, 871, 877, 878, 879, 881, 884, 885, 888, 893, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 924, 927, 929, 945, 981, 982, 984, 987, 989, 999, 1000, 1002, 1003, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1025, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "regression_data": 5, "regression_model": 1042, "regression_test": 387, "regressioncriterion": 1043, "regressor": [2, 73, 84, 123, 129, 130, 133, 149, 154, 162, 164, 167, 175, 177, 179, 181, 197, 198, 200, 203, 214, 215, 216, 233, 262, 274, 288, 310, 316, 317, 365, 379, 381, 391, 393, 406, 410, 419, 432, 435, 436, 465, 482, 483, 484, 485, 524, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 565, 566, 567, 568, 569, 570, 605, 606, 609, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 701, 832, 833, 836, 837, 838, 847, 855, 860, 861, 862, 865, 871, 879, 884, 885, 905, 907, 910, 912, 913, 914, 915, 918, 933, 935, 981, 982, 988, 992, 993, 995, 1000, 1006, 1012, 1014, 1015, 1023, 1030, 1035, 1036, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1050, 1052], "regressor_": [167, 465, 593, 594, 597], "regressor__sample_weight": 197, "regressor_with_": 166, "regressor_without_": 166, "regressorchain": [399, 835, 837, 1043, 1046, 1050], "regressormixin": [233, 381, 393, 465, 1046], "regul": 0, "regular": [23, 25, 29, 34, 38, 55, 57, 58, 59, 66, 69, 71, 77, 98, 108, 118, 120, 121, 123, 128, 134, 136, 138, 149, 150, 151, 153, 156, 158, 161, 164, 166, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 192, 193, 195, 197, 204, 207, 210, 211, 213, 215, 216, 232, 244, 252, 255, 260, 261, 263, 272, 288, 289, 298, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 330, 333, 335, 337, 338, 339, 342, 343, 347, 348, 350, 352, 355, 365, 379, 391, 392, 406, 409, 411, 412, 414, 415, 416, 419, 437, 443, 447, 471, 472, 476, 478, 479, 480, 481, 504, 512, 514, 515, 520, 522, 524, 528, 538, 539, 540, 543, 547, 548, 550, 559, 561, 562, 588, 589, 591, 638, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 693, 735, 741, 750, 797, 798, 817, 830, 831, 861, 862, 865, 884, 904, 905, 906, 907, 909, 910, 911, 981, 982, 984, 985, 986, 989, 991, 997, 998, 1002, 1005, 1006, 1007, 1014, 1015, 1017, 1023, 1024, 1026, 1030, 1035, 1036, 1037, 1039, 1040, 1044, 1045, 1047, 1048], "regularis": [201, 422, 473, 475], "regularli": [118, 278, 391, 994], "regulatori": 125, "rehan": 1050, "rehman": 1043, "reiichiro": [1042, 1043], "reilli": 1052, "reimburs": 253, "reimplement": [385, 391, 393, 1041, 1045], "reinforc": 1013, "reinit": 387, "reiniti": 391, "reinstal": 396, "reintroduc": 1051, "reitsam": 1047, "reject": [234, 393, 394, 523, 671, 727, 924, 925, 988, 992, 1043], "rel": [2, 4, 6, 15, 18, 25, 53, 59, 98, 116, 154, 170, 173, 177, 197, 215, 246, 289, 290, 306, 316, 319, 338, 342, 350, 351, 374, 378, 381, 387, 393, 406, 409, 413, 416, 417, 419, 440, 443, 447, 449, 459, 521, 524, 531, 534, 537, 541, 545, 546, 557, 558, 559, 560, 564, 565, 566, 604, 649, 658, 659, 671, 672, 674, 690, 694, 729, 747, 800, 803, 804, 806, 814, 823, 828, 831, 844, 845, 849, 861, 862, 873, 874, 884, 900, 904, 905, 906, 909, 911, 912, 913, 914, 915, 988, 989, 992, 994, 995, 996, 998, 1024], "relabel": [378, 818, 819, 901], "relat": [1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 368, 374, 375, 378, 379, 383, 384, 386, 387, 388, 391, 393, 394, 395, 399, 402, 407, 408, 409, 410, 411, 412, 413, 414, 416, 419, 450, 464, 469, 496, 549, 550, 562, 563, 639, 673, 677, 692, 701, 723, 743, 821, 827, 862, 863, 865, 868, 869, 874, 877, 879, 880, 883, 892, 908, 981, 984, 986, 992, 993, 995, 996, 999, 1002, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1051], "relate_point": 293, "relationship": [2, 11, 18, 109, 110, 125, 155, 166, 167, 176, 181, 197, 199, 200, 266, 273, 281, 306, 312, 322, 393, 409, 411, 413, 462, 496, 636, 714, 989, 992, 994, 995, 999, 1000, 1026, 1040], "relative_tim": 246, "relax": [5, 409, 417, 453, 1005, 1042], "releas": [0, 11, 13, 53, 69, 113, 114, 116, 119, 125, 127, 143, 146, 161, 162, 168, 169, 173, 178, 197, 198, 199, 228, 233, 237, 238, 239, 240, 254, 255, 256, 268, 271, 278, 285, 311, 323, 366, 368, 377, 379, 380, 382, 387, 391, 393, 417, 443, 446, 447, 464, 467, 490, 491, 496, 501, 502, 504, 512, 515, 521, 524, 538, 541, 561, 562, 564, 565, 567, 599, 602, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 680, 688, 701, 702, 717, 732, 748, 788, 795, 800, 801, 803, 804, 806, 814, 823, 826, 827, 830, 846, 848, 865, 869, 874, 877, 878, 879, 883, 884, 885, 901, 902, 904, 909, 912, 913, 936, 960, 1008, 1010, 1014, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "release_highlight": [323, 1014], "relev": [5, 7, 17, 75, 79, 81, 100, 146, 164, 176, 191, 200, 259, 260, 266, 361, 365, 367, 374, 376, 378, 379, 381, 383, 384, 385, 393, 394, 399, 411, 412, 418, 419, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 726, 740, 756, 799, 801, 802, 803, 804, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 882, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 992, 993, 998, 1009, 1013, 1014, 1038, 1043, 1049], "reli": [98, 115, 119, 146, 170, 185, 186, 278, 283, 316, 320, 350, 365, 366, 381, 384, 387, 388, 391, 393, 404, 405, 409, 414, 416, 417, 549, 593, 597, 607, 608, 778, 828, 831, 869, 958, 981, 984, 986, 988, 992, 995, 1000, 1002, 1007, 1017, 1043, 1044, 1045, 1049, 1051, 1052], "reliabl": [23, 25, 406, 413, 438, 439, 646, 1008, 1017], "relianc": [98, 201], "religion": [17, 260, 350, 351, 352, 374, 993, 1028], "reloc": 1044, "relova": 1048, "relu": [861, 862], "remain": [6, 23, 25, 69, 109, 116, 121, 123, 145, 167, 197, 201, 213, 243, 257, 261, 265, 268, 405, 409, 410, 411, 413, 417, 446, 464, 467, 515, 516, 521, 528, 534, 570, 610, 611, 763, 769, 802, 803, 804, 805, 808, 810, 839, 840, 841, 843, 945, 981, 982, 984, 991, 992, 996, 1002, 1008, 1013, 1037, 1043, 1049, 1052], "remaind": [2, 119, 167, 186, 197, 199, 215, 236, 320, 355, 410, 464, 467, 1035, 1042, 1043, 1044, 1047, 1048, 1051, 1053], "remaining_column": 464, "remark": [53, 84, 146, 253, 367, 379, 1002], "remedi": 214, "rememb": [53, 381, 384, 396, 417, 995, 999, 1008], "remi": 1042, "remind": 233, "reminisc": 96, "remot": [173, 326, 379, 382], "remov": [3, 13, 15, 52, 53, 68, 73, 144, 146, 161, 162, 167, 170, 260, 305, 312, 315, 316, 317, 322, 350, 351, 355, 361, 371, 374, 378, 379, 380, 381, 383, 384, 388, 393, 409, 410, 413, 416, 417, 419, 420, 441, 442, 444, 445, 450, 457, 482, 483, 484, 485, 488, 489, 527, 534, 535, 537, 538, 539, 540, 541, 546, 553, 567, 568, 569, 570, 579, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 630, 644, 654, 655, 656, 658, 659, 673, 675, 676, 677, 692, 709, 742, 750, 751, 778, 779, 780, 782, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 851, 863, 864, 868, 869, 881, 882, 884, 893, 919, 935, 936, 982, 989, 995, 1008, 1015, 1020, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "remove_zero_eig": [535, 1037, 1044], "rempfler": 1046, "renam": [248, 260, 379, 383, 409, 446, 447, 459, 471, 472, 478, 527, 536, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 877, 1035, 1036, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "rename_axi": 259, "render": [10, 24, 51, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 192, 201, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 379, 381, 383, 384, 385, 393, 551, 589, 631, 700, 702, 881, 893, 916, 918, 991, 1008, 1048, 1052], "rene": 1048, "renni": [839, 841, 994, 1043], "renorm": 24, "rent": 2, "rental": [2, 11, 168, 999], "reorder": [18, 99, 393, 697, 718, 1013, 1043], "reordered_data": 18, "reordered_row": 18, "reorgan": 1041, "rep": 376, "reparameter": 1007, "reparametr": 345, "repartit": 2, "repeat": [8, 31, 64, 77, 79, 121, 146, 149, 155, 156, 168, 173, 199, 253, 254, 259, 260, 271, 278, 326, 351, 352, 381, 388, 393, 394, 405, 406, 407, 409, 414, 417, 418, 588, 593, 607, 608, 615, 627, 634, 659, 805, 815, 816, 819, 930, 982, 991, 1030, 1043, 1045], "repeatedkfold": [167, 413, 805, 816, 1042], "repeatedli": [109, 319, 361, 393, 409, 416, 419, 508, 546, 666, 667, 676, 677, 678, 781, 982, 996, 1023], "repeatedstratifiedkfold": [259, 273, 278, 413, 815, 819, 1042], "repercuss": 310, "repetit": [259, 273, 278, 384, 413, 815, 816, 1000, 1049], "replac": [2, 11, 23, 78, 97, 109, 125, 149, 154, 156, 161, 168, 183, 198, 262, 283, 307, 312, 317, 340, 377, 379, 381, 383, 385, 388, 393, 402, 410, 413, 416, 417, 441, 445, 464, 503, 515, 555, 556, 563, 582, 588, 589, 590, 591, 607, 608, 627, 630, 634, 639, 641, 728, 785, 806, 812, 814, 823, 863, 864, 867, 887, 900, 907, 961, 963, 966, 981, 982, 984, 988, 992, 1002, 1007, 1008, 1012, 1013, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "replai": [803, 804], "repli": [13, 350, 378, 379, 382], "replic": [259, 378, 381, 1030], "repo": [379, 383, 1013, 1016], "report": [0, 2, 6, 11, 30, 68, 73, 143, 157, 185, 253, 257, 267, 273, 278, 315, 325, 361, 374, 378, 380, 381, 382, 385, 387, 391, 393, 396, 402, 409, 413, 611, 649, 658, 664, 685, 686, 700, 713, 729, 730, 738, 783, 784, 787, 833, 842, 861, 862, 899, 917, 935, 988, 995, 1000, 1012, 1013, 1016, 1036, 1039, 1042, 1043, 1045, 1046, 1048, 1050, 1051], "reporthook": 6, "repositori": [2, 6, 11, 173, 253, 321, 372, 374, 376, 377, 379, 381, 383, 387, 391, 394, 396, 504, 1012, 1016, 1030], "repr": [577, 1046, 1047, 1049], "repreat": 259, "repres": [2, 6, 8, 10, 11, 13, 18, 24, 30, 32, 42, 46, 47, 48, 51, 89, 93, 95, 101, 102, 116, 117, 126, 167, 176, 184, 189, 199, 201, 202, 206, 220, 222, 231, 236, 246, 252, 253, 256, 259, 262, 266, 288, 307, 342, 350, 352, 359, 367, 371, 374, 376, 381, 391, 392, 393, 394, 402, 406, 409, 413, 414, 415, 416, 417, 418, 438, 442, 446, 452, 463, 464, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 492, 494, 496, 498, 500, 501, 502, 504, 505, 510, 527, 534, 536, 538, 540, 541, 547, 555, 563, 581, 588, 591, 594, 629, 632, 634, 640, 676, 678, 697, 699, 701, 711, 730, 743, 789, 800, 802, 813, 814, 817, 820, 822, 827, 829, 830, 833, 834, 840, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 871, 877, 878, 901, 904, 905, 924, 925, 945, 982, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1019, 1024, 1025, 1027, 1041, 1043, 1046, 1047, 1050, 1053], "represent": [2, 10, 15, 18, 24, 51, 69, 70, 93, 96, 114, 116, 117, 126, 127, 128, 130, 133, 143, 154, 167, 169, 173, 178, 181, 218, 219, 220, 227, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 278, 293, 302, 311, 317, 319, 320, 322, 327, 351, 352, 359, 361, 371, 373, 382, 393, 402, 409, 410, 414, 415, 416, 423, 463, 531, 535, 537, 540, 542, 548, 566, 588, 590, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 643, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 769, 797, 798, 806, 823, 860, 873, 877, 878, 882, 884, 897, 904, 916, 918, 921, 937, 958, 984, 989, 991, 993, 995, 996, 997, 999, 1002, 1007, 1013, 1019, 1020, 1022, 1026, 1028, 1035, 1036, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "reproduc": [3, 10, 58, 109, 167, 173, 185, 268, 278, 302, 366, 368, 378, 379, 381, 382, 387, 391, 393, 409, 413, 414, 417, 421, 440, 454, 460, 469, 474, 488, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 607, 608, 610, 611, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 666, 667, 668, 671, 676, 678, 679, 689, 690, 692, 693, 694, 793, 797, 798, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 828, 829, 830, 834, 835, 838, 849, 853, 860, 861, 862, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 940, 941, 963, 966, 984, 1012, 1016, 1035, 1043, 1048, 1049], "reproduct": [391, 988], "request": [6, 15, 44, 197, 215, 233, 318, 366, 373, 377, 378, 382, 393, 394, 399, 402, 414, 417, 418, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 588, 590, 591, 594, 599, 600, 610, 611, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 699, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 949, 951, 992, 995, 1016, 1028, 1041, 1042, 1043, 1052, 1053], "request_rout": 233, "requir": [2, 5, 12, 23, 43, 44, 46, 51, 53, 55, 56, 65, 68, 88, 97, 99, 114, 115, 119, 120, 123, 125, 126, 130, 146, 168, 181, 186, 194, 197, 218, 220, 227, 230, 233, 236, 240, 253, 260, 268, 270, 273, 283, 285, 305, 310, 317, 318, 350, 351, 352, 373, 376, 377, 379, 380, 381, 383, 385, 387, 391, 393, 394, 396, 399, 402, 404, 407, 409, 410, 411, 413, 414, 416, 417, 418, 420, 426, 432, 437, 438, 439, 444, 446, 450, 452, 457, 462, 464, 467, 469, 482, 483, 484, 496, 508, 521, 524, 535, 541, 549, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 579, 580, 581, 610, 611, 619, 627, 632, 633, 634, 643, 646, 647, 652, 653, 658, 659, 666, 667, 668, 671, 674, 675, 676, 677, 678, 686, 689, 691, 692, 693, 695, 699, 724, 729, 730, 742, 747, 749, 752, 763, 784, 787, 799, 800, 803, 804, 807, 809, 814, 822, 827, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 864, 865, 866, 868, 878, 879, 880, 884, 892, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 914, 915, 949, 952, 958, 978, 981, 986, 987, 988, 989, 992, 993, 994, 995, 996, 998, 999, 1002, 1006, 1007, 1008, 1013, 1019, 1026, 1028, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "requires_fit": 381, "requires_i": [381, 426, 432, 1046], "requires_positive_i": 381, "requires_positive_x": [381, 1045, 1050], "requires_vector_input": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "requisit": 381, "rerais": 1052, "rerun": [10, 24, 40, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 387], "resampl": [50, 122, 167, 215, 287, 388, 391, 393, 555, 556, 966, 1013, 1044, 1048], "resampled_arrai": 963, "rescal": [2, 44, 45, 53, 98, 178, 185, 221, 236, 305, 347, 411, 416, 421, 469, 470, 471, 472, 473, 474, 475, 476, 533, 538, 646, 649, 652, 876, 882, 906, 907, 908, 909, 910, 992, 1002, 1027, 1039, 1040], "rescaled_coin": [44, 45, 1027], "rescu": [402, 417], "research": [0, 146, 166, 253, 259, 265, 278, 374, 376, 391, 409, 501, 513, 635, 645, 692, 735, 829, 834, 981, 989, 993, 995, 1007, 1012, 1013, 1017], "resembl": [37, 201, 233], "reserv": [253, 311, 561, 562, 1017, 1019], "reserva": 311, "reservoir": 961, "reservoir_sampl": 961, "reset": [240, 361, 387, 534, 676, 677, 678, 844, 845, 873, 874, 884, 1037], "reset_n_cal": [844, 845], "reshama": [0, 363, 369, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "reshap": [2, 3, 4, 12, 22, 30, 44, 45, 46, 48, 49, 51, 52, 56, 70, 78, 83, 93, 96, 102, 112, 117, 118, 128, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 176, 188, 194, 210, 211, 213, 214, 219, 221, 223, 226, 231, 235, 247, 257, 287, 289, 296, 299, 301, 302, 306, 307, 308, 312, 315, 318, 319, 321, 322, 330, 337, 338, 343, 346, 347, 391, 405, 414, 416, 417, 445, 465, 584, 631, 732, 830, 879, 883, 988, 1002, 1008, 1024, 1027, 1040], "resid": 374, "residence_sinc": 253, "residenti": 130, "residu": [73, 193, 199, 255, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 678, 679, 685, 686, 701, 744, 785, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 988, 992, 1026, 1047, 1048, 1050], "residual_metr": 1041, "residual_threshold": [214, 671, 988, 1048], "residual_vs_predict": [2, 11, 73, 255, 320, 701], "residues_": 1040, "resign": 394, "resili": 417, "resist": [78, 79, 379], "resiz": [4, 44, 45, 237, 374, 493, 494, 1024], "resolut": [2, 9, 15, 102, 168, 295, 296, 338, 394, 406, 1019, 1045], "resolv": [15, 378, 379, 383, 387, 394, 417, 446, 452, 462, 691, 695, 941, 982, 992, 1042, 1044, 1045, 1048, 1053], "resort": [261, 374, 402, 555, 1045], "resourc": [15, 40, 122, 125, 161, 197, 301, 317, 364, 368, 382, 392, 393, 408, 416, 803, 804, 993, 1010, 1013, 1017, 1020, 1030, 1043, 1048, 1049], "resourcewarn": 1038, "resp": [374, 416, 597, 797, 798, 1006, 1043], "respect": [25, 53, 65, 88, 98, 109, 113, 115, 118, 127, 157, 173, 176, 181, 186, 199, 211, 214, 218, 220, 227, 230, 232, 236, 248, 253, 268, 289, 290, 302, 310, 319, 335, 342, 365, 366, 374, 375, 379, 406, 409, 412, 414, 416, 417, 419, 446, 464, 467, 470, 471, 472, 473, 474, 475, 476, 534, 540, 541, 547, 553, 561, 562, 597, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 636, 643, 671, 690, 694, 712, 728, 782, 785, 797, 798, 840, 850, 861, 862, 916, 918, 981, 985, 986, 988, 989, 992, 995, 996, 997, 998, 1002, 1007, 1012, 1016, 1017, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "respond": [167, 379, 409], "respons": [0, 146, 168, 193, 197, 200, 233, 269, 350, 376, 385, 393, 407, 409, 410, 416, 446, 464, 482, 483, 484, 631, 632, 633, 674, 675, 698, 700, 702, 742, 797, 798, 993, 999, 1010, 1019, 1052], "response_method": [7, 28, 32, 54, 111, 126, 131, 180, 189, 206, 211, 253, 262, 286, 291, 294, 310, 334, 335, 337, 342, 356, 631, 632, 633, 698, 700, 702, 742, 799, 822, 992, 1052], "rest": [23, 28, 119, 123, 164, 175, 181, 206, 212, 216, 233, 236, 246, 253, 278, 281, 315, 329, 335, 346, 385, 393, 407, 419, 512, 610, 631, 644, 658, 659, 676, 754, 788, 832, 833, 834, 853, 904, 906, 909, 988, 992, 993, 996, 999, 1007, 1014, 1017, 1039, 1040, 1049, 1050, 1051, 1053], "restart": [55, 382, 387, 447, 531, 537, 538, 543, 545, 546, 610, 611, 989, 1048], "restor": [1038, 1043, 1044, 1045, 1046, 1050], "restrict": [25, 64, 65, 71, 83, 137, 161, 164, 187, 212, 214, 298, 303, 381, 385, 391, 406, 409, 416, 417, 465, 493, 502, 532, 581, 610, 653, 654, 655, 656, 658, 682, 683, 713, 782, 788, 789, 830, 852, 854, 855, 856, 858, 860, 861, 862, 864, 890, 992, 1008, 1014, 1029, 1030, 1035, 1037, 1045, 1047, 1052], "restructuredtext": 379, "result": [2, 3, 4, 7, 11, 12, 17, 22, 23, 24, 28, 30, 32, 35, 38, 40, 41, 42, 44, 46, 51, 52, 53, 58, 60, 64, 69, 71, 73, 79, 84, 93, 96, 98, 99, 103, 112, 113, 114, 116, 119, 120, 122, 123, 126, 128, 129, 138, 145, 146, 149, 151, 153, 157, 161, 167, 168, 169, 170, 177, 182, 183, 186, 187, 192, 198, 199, 201, 205, 211, 212, 215, 218, 219, 222, 226, 229, 231, 237, 243, 248, 249, 252, 253, 254, 257, 259, 260, 262, 265, 266, 267, 268, 270, 271, 273, 275, 278, 283, 285, 289, 299, 300, 301, 305, 306, 307, 310, 315, 317, 319, 320, 321, 322, 325, 328, 330, 338, 342, 343, 345, 350, 352, 357, 358, 359, 365, 366, 367, 373, 374, 376, 379, 381, 383, 384, 385, 387, 391, 392, 393, 394, 402, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 434, 440, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 459, 462, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 489, 508, 509, 511, 513, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 579, 580, 581, 582, 584, 588, 589, 591, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 634, 636, 640, 643, 652, 653, 658, 664, 665, 666, 667, 675, 676, 677, 678, 686, 689, 690, 691, 692, 693, 694, 695, 708, 710, 712, 717, 725, 726, 728, 729, 730, 731, 732, 736, 737, 738, 754, 756, 757, 764, 771, 774, 778, 779, 780, 781, 783, 784, 785, 787, 793, 794, 797, 798, 800, 802, 803, 804, 805, 810, 814, 815, 816, 819, 820, 825, 831, 832, 833, 835, 836, 837, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 868, 869, 877, 878, 881, 882, 885, 893, 897, 901, 904, 906, 909, 912, 913, 914, 915, 916, 917, 924, 925, 940, 941, 943, 947, 957, 963, 966, 982, 984, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1012, 1013, 1016, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "results_df": [205, 259, 311], "results_for_preval": 262, "results_sc": 345, "retail": 1017, "retain": [176, 393, 409, 412, 413, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 494, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 695, 696, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 877, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 1005, 1035], "retbin": 1002, "retent": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "retrac": 233, "retract": 379, "retrain": [402, 1013, 1051, 1053], "retri": [169, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1043, 1049, 1053], "retriev": [84, 167, 201, 266, 351, 359, 383, 393, 414, 417, 418, 468, 496, 590, 593, 594, 626, 653, 663, 684, 699, 726, 730, 732, 733, 756, 781, 839, 843, 876, 902, 988, 990, 992, 994, 1012, 1013, 1027, 1040, 1045, 1047, 1049, 1052], "return": [2, 4, 5, 6, 8, 9, 11, 12, 15, 17, 22, 23, 25, 31, 32, 35, 38, 46, 51, 54, 59, 68, 73, 90, 100, 102, 107, 109, 112, 114, 121, 122, 125, 126, 130, 146, 152, 155, 157, 162, 170, 176, 177, 185, 186, 189, 197, 198, 205, 206, 207, 215, 233, 236, 239, 240, 246, 248, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266, 274, 283, 288, 293, 296, 302, 305, 307, 310, 315, 334, 338, 350, 352, 355, 359, 365, 372, 373, 374, 379, 380, 381, 385, 386, 388, 391, 393, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 973, 976, 977, 978, 979, 980, 982, 992, 995, 999, 1000, 1007, 1008, 1013, 1019, 1024, 1026, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "return_a": [585, 586, 958, 1038], "return_cent": [512, 1046], "return_cod": 546, "return_cost": [471, 472, 478], "return_count": [328, 351, 856], "return_cov": [393, 567, 568, 611, 864], "return_dist": [52, 463, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 995, 1039], "return_distribut": [90, 523], "return_estim": [2, 167, 273, 322, 413, 827, 1043], "return_ind": 523, "return_indic": [413, 827, 1051], "return_inner_stat": 1049, "return_intercept": [687, 1044], "return_invers": [124, 381], "return_log": [844, 845], "return_model": [1037, 1039], "return_n_it": [421, 454, 459, 478, 545, 546, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 694, 1049], "return_norm": [891, 1042], "return_path": [682, 683, 685, 686], "return_std": [149, 154, 155, 156, 158, 176, 177, 393, 552, 567, 568, 611, 613, 614, 615, 616, 625, 627, 644, 645, 864, 1042, 1043, 1047, 1052], "return_sum_weight": 973, "return_tim": [261, 828, 1045], "return_train_scor": [115, 263, 273, 311, 413, 800, 803, 804, 814, 827, 1041, 1042, 1044], "return_x_i": [3, 5, 13, 56, 68, 69, 70, 71, 93, 115, 119, 133, 136, 137, 142, 161, 162, 169, 170, 173, 182, 184, 185, 186, 188, 193, 194, 204, 212, 213, 227, 235, 236, 239, 240, 255, 258, 261, 266, 267, 275, 278, 281, 285, 292, 300, 301, 302, 310, 315, 317, 319, 320, 321, 322, 328, 341, 352, 355, 372, 384, 385, 392, 402, 409, 410, 413, 416, 418, 421, 429, 446, 488, 489, 490, 491, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 532, 533, 534, 535, 558, 561, 562, 567, 568, 592, 595, 596, 598, 599, 600, 601, 602, 610, 619, 620, 622, 623, 638, 639, 658, 659, 668, 673, 674, 675, 688, 689, 690, 691, 693, 695, 701, 711, 788, 803, 804, 806, 832, 837, 848, 853, 856, 913, 914, 915, 982, 987, 992, 993, 994, 995, 1002, 1019, 1023, 1024, 1026, 1027, 1032, 1041, 1043, 1045, 1048], "return_x_mean": 421, "reuben": 1035, "reus": [11, 149, 190, 253, 260, 315, 352, 381, 393, 409, 410, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 634, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 861, 862, 1000, 1004, 1017, 1042, 1052], "reuter": [365, 374], "reuters21578": 6, "reuterspars": 6, "rev": [379, 607, 608], "revamp": 1045, "reveal": [2, 11, 167, 169, 350, 385, 405, 989, 1051], "revers": [17, 73, 146, 202, 259, 534, 541, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 789, 864, 992, 1035, 1036, 1045, 1047, 1051], "revert": [94, 630, 632, 633, 1042, 1047, 1052], "review": [278, 311, 365, 374, 381, 382, 383, 384, 385, 391, 394, 413, 414, 535, 541, 992, 1002, 1020], "revillet": 1035, "revis": [394, 670], "revisit": [409, 420, 444], "revolv": 989, "reward": 379, "reweight": [109, 351, 393, 411, 416, 590, 591, 648, 669, 680], "reweight_covari": [469, 474], "rewrit": [385, 391, 1008, 1027, 1035], "rewritten": [379, 649, 1037, 1039], "rey": 1050, "reza": 1045, "rezazadeh": 1048, "rf": [114, 115, 129, 132, 133, 169, 315, 361, 416, 567, 569, 570], "rf_123": 361, "rf__n_estim": 416, "rf_appli": 114, "rf_cst": 322, "rf_inst": 361, "rf_leaves_yield": 114, "rf_model": 114, "rf_no_cst": 322, "rf_pipelin": 130, "rfc": [25, 239, 315, 1032], "rfc_disp": [239, 315, 1032], "rfe": [144, 145, 399, 418, 594, 597, 602, 1035, 1039, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "rfecv": [145, 399, 418, 593, 597, 602, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "rgb": [46, 374, 417, 493, 494, 583, 584, 587], "rgr_lasso": 12, "rgr_ridg": 12, "rhinehart": 1042, "rho": [208, 414, 677, 988, 1006, 1036], "rho_k": 415, "ri": [409, 705, 786], "ribeiro": [590, 730, 1048], "ricardo": [1038, 1048, 1049, 1052], "ricardojnf": 1048, "riccadonna": 743, "riccardo": [1046, 1052], "rice": [9, 296, 374, 498, 1048], "rich": [50, 125, 387, 391, 409, 439, 1017, 1046, 1049], "richard": [374, 418, 658, 1036, 1045, 1047, 1049, 1050], "richardscottoz": 1048, "richer": [50, 102, 409], "richi": 1043, "rick": 1046, "ricker": 102, "ricker_funct": 102, "ricker_matrix": 102, "rickiepark": 1042, "rid": [7, 1006], "riddel": [1038, 1040, 1042], "ridg": [3, 8, 12, 52, 73, 94, 95, 112, 130, 136, 146, 148, 154, 155, 156, 158, 159, 161, 164, 166, 167, 168, 175, 176, 181, 184, 187, 190, 192, 193, 197, 198, 203, 216, 225, 235, 241, 272, 306, 309, 344, 345, 350, 365, 368, 391, 404, 414, 416, 419, 524, 535, 539, 543, 611, 615, 622, 625, 643, 644, 645, 647, 649, 657, 661, 673, 674, 675, 678, 687, 701, 750, 800, 806, 814, 837, 910, 992, 993, 1000, 1002, 1006, 1007, 1014, 1015, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "ridge_alpha": [539, 543, 1042], "ridge_cv": 73, "ridge_cv_with_trans_target": 73, "ridge_glm": 197, "ridge_regress": [1043, 1044, 1050], "ridgeclassifi": [350, 365, 672, 673, 675, 988, 993, 1040, 1044, 1048, 1049, 1050, 1053], "ridgeclassifiercv": [399, 673, 674, 788, 988, 992, 993, 1043, 1045, 1046, 1048, 1049, 1053], "ridgecv": [2, 73, 130, 146, 167, 235, 393, 399, 416, 568, 643, 672, 675, 988, 993, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "ridgecvridgecv": [130, 167], "ridgeregress": 381, "ridgeridg": 167, "ridgewai": [121, 416], "riedmann": 1047, "ries": 1049, "rifkin": 988, "right": [4, 5, 9, 10, 12, 13, 29, 32, 37, 40, 41, 42, 43, 49, 51, 58, 60, 62, 77, 78, 80, 88, 89, 90, 95, 96, 98, 100, 102, 109, 111, 112, 113, 122, 123, 124, 125, 132, 142, 149, 152, 162, 170, 187, 198, 199, 200, 201, 203, 204, 207, 208, 226, 229, 230, 243, 245, 246, 248, 249, 253, 254, 255, 259, 262, 266, 269, 270, 272, 273, 288, 296, 299, 302, 305, 307, 310, 321, 322, 326, 338, 340, 342, 345, 347, 350, 356, 359, 361, 368, 379, 381, 391, 394, 405, 408, 409, 412, 414, 415, 416, 419, 464, 482, 483, 484, 485, 534, 541, 544, 557, 558, 559, 560, 561, 562, 564, 565, 566, 587, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 676, 678, 869, 912, 913, 914, 915, 916, 928, 941, 981, 984, 986, 988, 990, 992, 994, 995, 999, 1004, 1006, 1007, 1008, 1012, 1013, 1017, 1020, 1024, 1026, 1027, 1037, 1043, 1049, 1051, 1052], "right_impur": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "rightarrow": [419, 619, 996], "rijn": [373, 1043], "rileran": 1049, "rio": [1045, 1047, 1048, 1049], "ripe": 311, "rise": 154, "rishabh": 1049, "rishi": 1047, "rishikesh": 1042, "risk": [7, 53, 125, 197, 201, 215, 306, 345, 361, 378, 379, 393, 407, 408, 413, 416, 567, 568, 889, 890, 892, 893, 894, 895, 988, 992, 1017, 1042], "riski": 215, "riskiest": [197, 215], "ritchi": 1046, "rithvik": 1047, "ritter": [1049, 1050], "ritual": 350, "rival": [2, 901, 1005], "rk": 63, "rkf": [413, 815], "rl2007": 988, "rlm": 1045, "rm": [78, 152, 383, 387, 411], "rmse": [2, 11, 79, 125, 311, 750, 992, 1046], "rmse_": 311, "rmse_test_mean": 311, "rmse_test_scor": 311, "rmse_test_std": 311, "rmse_train_mean": 311, "rmse_train_scor": 311, "rmse_train_std": 311, "rmsle": [751, 992], "rmtree": [52, 70, 410], "rna": 391, "rnd": 306, "rng": [3, 18, 19, 29, 32, 35, 42, 48, 60, 79, 84, 93, 95, 100, 110, 122, 125, 126, 127, 129, 149, 150, 153, 155, 156, 158, 161, 162, 166, 169, 176, 177, 178, 179, 181, 186, 191, 198, 199, 204, 211, 226, 232, 233, 235, 243, 254, 262, 265, 270, 271, 299, 309, 312, 316, 317, 319, 321, 322, 325, 326, 330, 341, 357, 358, 361, 366, 381, 384, 399, 422, 470, 474, 475, 476, 478, 479, 480, 481, 643, 649, 670, 672, 678, 687, 812, 839, 840, 841, 843, 844, 845, 849, 852, 854, 855, 856, 881, 893, 896, 897, 899, 900, 901, 910, 1019], "ro": 24, "road": 391, "roadmap": [368, 1010], "rob": [204, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1047, 1050], "robert": [0, 46, 70, 146, 185, 278, 376, 398, 414, 528, 535, 628, 656, 721, 723, 724, 735, 870, 982, 988, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1050], "robertlayton": 46, "roberto": [409, 442], "robertson": 1048, "robin": [161, 162, 627, 982, 1041, 1044, 1049, 1050], "robinson": 1048, "robl": 1042, "robson": 1045, "robust": [7, 32, 59, 61, 75, 77, 81, 100, 120, 122, 146, 162, 164, 167, 168, 175, 187, 199, 201, 214, 216, 226, 236, 274, 305, 321, 367, 376, 381, 387, 409, 416, 417, 446, 448, 469, 470, 473, 474, 475, 476, 524, 534, 559, 560, 649, 657, 670, 671, 678, 679, 750, 834, 865, 879, 881, 882, 893, 899, 939, 992, 996, 998, 1002, 1005, 1006, 1012, 1014, 1015, 1017, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1051], "robust_contour": 78, "robust_cov": 78, "robust_mah": 78, "robust_scal": [882, 893, 1043], "robustli": [200, 407], "robustscal": [236, 881, 894, 982, 1002, 1040, 1041, 1043, 1045, 1046, 1047, 1051], "roc": [9, 23, 114, 146, 164, 225, 227, 236, 237, 241, 251, 253, 254, 261, 266, 276, 322, 328, 386, 406, 408, 413, 504, 510, 564, 658, 702, 706, 707, 708, 727, 742, 782, 788, 789, 819, 830, 833, 871, 909, 998, 1014, 1032, 1037, 1038, 1040, 1041, 1045, 1047, 1051], "roc_auc": [9, 146, 259, 263, 268, 269, 386, 634, 702, 733, 992, 1032], "roc_auc_ovo": [992, 1045], "roc_auc_ovo_weight": [992, 1045], "roc_auc_ovr": [992, 1045], "roc_auc_ovr_weight": [992, 1045], "roc_auc_scor": [23, 146, 259, 268, 315, 322, 702, 706, 707, 708, 789, 992, 1037, 1038, 1043, 1045, 1049, 1050], "roc_curv": [9, 227, 256, 268, 702, 706, 727, 782, 788, 992, 1035, 1036, 1037, 1040, 1041, 1043, 1048, 1051, 1053], "roc_displai": 227, "rocchio": [350, 851], "rocco": [1048, 1049, 1050], "roccurvedisplai": [114, 236, 239, 253, 256, 268, 269, 315, 386, 788, 789, 998, 1032, 1045, 1051, 1052, 1053], "rock": 79, "rocklin": [378, 384], "rocktalu": 63, "roddi": [1044, 1045], "rodent": [9, 296, 374, 498], "roderick": 982, "rodion": 1048, "rodrigo": 1043, "rodrigu": [1042, 1043, 1048], "rodr\u00edguez": 311, "roeder": 1045, "roehr": [1051, 1052], "roei": 1047, "roeschk": 1044, "roger": [723, 1042, 1043, 1047], "rogerstanimoto": [450, 457, 699, 778, 779, 780, 995], "rogerstanimotodist": 699, "rohan": [1040, 1041, 1043, 1044, 1048], "rohit": [1038, 1039, 1043, 1044], "roi": [1035, 1049], "roi_siz": 52, "roic": 1050, "rok": 1045, "rokem": [1035, 1041], "rokhlin": [535, 541, 941], "roland": [1037, 1038], "rolando": [1036, 1037], "role": [0, 268, 365, 378, 414, 1010], "roll": [65, 164, 217, 218, 219, 220, 223, 224, 382, 409, 530, 692, 693, 935, 1014, 1017, 1045, 1050], "rolling_max": 11, "rolling_mean": 11, "rolling_min": 11, "romain": [1042, 1047], "roman": [0, 397, 627, 918, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "roman4oo": 1050, "romaniuk": 1039, "romijnd": 1047, "romuald": 1044, "ron": [0, 245, 398, 1035], "ronald": [374, 996, 1038, 1048], "ronan": [1035, 1038, 1043], "ronchetti": [649, 988], "rong": 1007, "ronrubin": [664, 685, 686, 988], "ronsin": [1043, 1044, 1052], "ronweiss": 245, "room": [305, 374, 384, 409, 1016], "roopam": [1043, 1044], "root": [2, 78, 125, 146, 178, 359, 376, 379, 387, 409, 442, 501, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 639, 750, 751, 790, 791, 912, 913, 914, 915, 916, 918, 992, 998, 1008, 1037, 1043, 1044, 1045, 1046, 1049, 1050], "root_": 442, "root_mean_squared_error": [11, 125, 750, 992, 1052], "root_mean_squared_log_error": [751, 992, 1052], "rope": 259, "rope_interv": 259, "rope_prob": 259, "rori": 1046, "rosa": 1050, "rosal": 413, "rose": 374, "rosenberg": [409, 717, 737, 795], "rosenfeld": 1043, "ross": [534, 607, 608, 1008, 1049, 1050], "rosset": [109, 416, 519, 553], "rossi": 1038, "rosslimlinyang_ijcv": 534, "rostamizadeh": 981, "rostomyan": 1043, "rotat": [6, 38, 83, 92, 93, 95, 98, 100, 104, 121, 132, 164, 170, 221, 270, 271, 281, 338, 344, 412, 414, 419, 421, 504, 532, 541, 550, 614, 697, 884, 916, 988, 1014, 1046, 1047], "rotation_mod": 270, "rotations_": 550, "roth": [55, 1040, 1043, 1050], "rough": [407, 998, 1021], "roughli": [109, 122, 186, 249, 269, 283, 310, 365, 393, 414, 417, 519, 989, 1035], "rouli": 1038, "round": [5, 7, 23, 83, 115, 125, 161, 162, 204, 215, 259, 265, 307, 309, 350, 393, 450, 456, 457, 564, 565, 593, 594, 597, 627, 692, 713, 802, 812, 869, 901, 916, 918, 982, 996, 1008, 1037, 1039, 1041, 1043, 1044, 1046, 1048, 1049, 1051, 1052], "rounded_list": 812, "rouseeuw1984": 474, "rousseeuw": [78, 79, 409, 411, 469, 474, 792, 793, 998], "rousseuw": [78, 79], "rout": [6, 54, 107, 157, 164, 178, 225, 241, 253, 368, 423, 426, 429, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 949, 950, 951, 952, 976, 1014, 1030, 1049, 1051], "route_param": [233, 949], "routed_param": [233, 952], "routemappingpair": 949, "router": [233, 393, 399, 949, 950, 951, 952], "routerconsumerclassifi": 233, "routerconsumerclassifierifittedrouterconsumerclassifi": 233, "routin": [322, 367, 373, 376, 379, 380, 381, 382, 387, 391, 393, 418, 672, 674, 687, 847, 906, 907, 908, 909, 910, 989, 995, 1002, 1003, 1006, 1012, 1017, 1035, 1049, 1050, 1051], "routing_info": 949, "routlei": 1041, "rouvinen": 1040, "roux": [658, 988, 1005], "row": [2, 17, 18, 19, 23, 25, 32, 42, 58, 73, 88, 90, 115, 118, 128, 131, 161, 197, 198, 199, 227, 230, 236, 237, 253, 307, 359, 365, 374, 381, 388, 392, 393, 405, 409, 412, 417, 424, 442, 443, 447, 449, 450, 451, 453, 456, 457, 459, 464, 468, 488, 490, 491, 492, 493, 494, 495, 500, 501, 502, 504, 505, 510, 511, 513, 526, 534, 542, 548, 551, 590, 591, 620, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 692, 696, 697, 710, 718, 719, 725, 758, 759, 763, 766, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 797, 798, 833, 839, 840, 841, 842, 843, 849, 852, 853, 854, 855, 856, 859, 870, 874, 876, 877, 879, 889, 890, 891, 894, 895, 898, 902, 920, 924, 925, 941, 963, 966, 970, 972, 974, 975, 978, 979, 981, 982, 984, 986, 988, 990, 992, 993, 995, 1002, 1003, 1006, 1007, 1013, 1042, 1043, 1044, 1045, 1050], "row_compl": 17, "row_id_attribut": 373, "row_idx": [19, 197], "row_idx_shuffl": 18, "row_ind": [424, 451, 453], "row_indic": 125, "row_labels_": [17, 18, 19, 405, 451, 453], "row_norm": 246, "rowan": 1050, "rowei": [689, 693, 853, 989, 995], "rows_": [17, 405, 424, 451, 453], "royal": [541, 627, 880, 892, 1006], "rp": 230, "rpath": 377, "rr2007": 984, "rragundez": 1043, "rrr": 383, "rrrcn": 383, "rsalakhu": 644, "rsh": [271, 317], "rskf": 816, "rsme": 992, "rsnegrin": 1049, "rsplit": [4, 15, 260, 1024], "rst": [366, 379, 383, 387, 1028, 1035, 1040], "rstride": 168, "rt": 114, "rt_model": 114, "rtn": 10, "rtol": [381, 844, 845, 849], "ru": 199, "ruben": 1050, "rubi": 1047, "rubia": 1038, "rubial": 1048, "rubin": 982, "rubinstein": [664, 685, 686], "rubric": 989, "ruchitagard": 1045, "rudi": 1041, "rudresh": 1050, "ruff": [379, 396, 401], "ruifeng": [1041, 1042, 1047], "ruin": 379, "ruiter": 1050, "rule": [2, 25, 115, 173, 356, 359, 361, 365, 376, 379, 380, 381, 391, 393, 394, 403, 406, 407, 408, 409, 413, 414, 416, 418, 536, 549, 550, 551, 552, 553, 561, 562, 569, 570, 602, 634, 645, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 706, 707, 711, 800, 803, 804, 806, 814, 823, 826, 827, 828, 829, 831, 853, 904, 917, 981, 986, 994, 995, 1006, 1008, 1013, 1019, 1026, 1030, 1037, 1040, 1047, 1052], "ruleset": 1008, "rumelhart": 996, "rumsfeld": [4, 374], "run": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 393, 394, 396, 402, 404, 409, 411, 413, 416, 419, 420, 421, 437, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 468, 471, 472, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 582, 592, 594, 595, 596, 598, 599, 600, 602, 610, 611, 630, 634, 640, 646, 647, 649, 651, 652, 653, 655, 656, 660, 661, 662, 663, 682, 683, 688, 689, 690, 691, 692, 693, 694, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 866, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 935, 936, 960, 963, 966, 981, 991, 993, 996, 1005, 1007, 1008, 1012, 1013, 1017, 1019, 1026, 1028, 1035, 1038, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "run_histori": 6, "run_id": 59, "run_tim": [212, 213], "rung": 1002, "runnabl": [13, 383, 384], "runtim": [6, 8, 56, 109, 183, 212, 214, 231, 302, 307, 366, 381, 382, 391, 393, 402, 407, 409, 416, 450, 563, 679, 814, 904, 905, 906, 907, 908, 909, 910, 1006, 1007, 1038, 1042, 1043, 1049, 1050, 1052, 1053], "runtime_histori": 6, "runxfail": 387, "rupesh": 1038, "rush": [2, 11, 379], "rushabh": 1046, "rushil": [1050, 1051], "russ": [628, 982], "russel": [1041, 1042], "russellrao": [450, 457, 699, 778, 779, 780, 995], "russellraodist": 699, "russian": 417, "rust": 1012, "ruth": 1045, "rutter": 1048, "ruusmann": 1041, "rv": [0, 263, 305, 804, 812, 814, 981, 1035, 1036, 1039, 1040, 1041, 1042, 1043], "rv_discrete_frozen": 271, "rvd": [469, 474], "rvdriessen": [469, 474], "rvraghav93": [263, 305], "rw2006": [154, 419, 610, 611], "ryad": 1041, "ryan": [1038, 1041, 1043, 1044], "ryb": 356, "ryder": 10, "ryotaro": 1047, "r\u00e9my": 1041, "r\u00fcdiger": [1043, 1044, 1046], "s1": [94, 146, 157, 185, 186, 376, 1027], "s2": [94, 146, 157, 185, 186, 376, 550, 1027], "s22": 498, "s3": [17, 94, 146, 185, 186, 376, 1027], "s4": [146, 185, 186, 376], "s5": [146, 185, 186, 376, 1000], "s6": [146, 185, 186, 376], "s_": [94, 263, 988, 989, 1000, 1002, 1027], "s__p": 864, "s_color": 218, "s_hessian": 218, "s_i": [409, 988, 1002], "s_ica_": 95, "s_isomap": 218, "s_j": 409, "s_ltsa": 218, "s_mod": 218, "s_pca_": 95, "s_point": 218, "s_scale": 218, "s_spectral": 218, "s_standard": 218, "s_t_sne": 218, "sa": [374, 492], "saaba": 1040, "sabharw": 1045, "sabri": 1050, "sach": 10, "sachdev": 1050, "sachdeva": 1042, "sachin": [1042, 1043, 1049], "sackei": 1045, "saclai": 0, "sacr": 1012, "sad": [818, 819], "sadak": 1047, "sadhana": 1043, "sadli": 122, "sadra": 1051, "sad\u0142ocha": 1048, "saeed": 992, "saeger": [1040, 1041, 1042], "safari": 1002, "safe": [35, 167, 186, 253, 351, 379, 381, 409, 410, 434, 508, 509, 567, 568, 597, 774, 778, 828, 863, 898, 958, 964, 995, 1041, 1042, 1043, 1048, 1049], "safe_copi": 1042, "safe_index": [388, 1045], "safe_mask": 388, "safe_realloc": 1038, "safe_sparse_dot": [388, 1045], "safe_sqr": 388, "safeguard": 402, "safer": [351, 361, 377, 409, 413, 1035], "safest": [197, 215, 361, 373], "safeti": [68, 391, 410, 958, 1013, 1045], "safikh": 1050, "safiuddin": 1050, "sag": [189, 204, 658, 659, 672, 674, 687, 988, 1006, 1012, 1040, 1041, 1042, 1044, 1045], "sag_solv": 1044, "saga": [28, 188, 212, 213, 658, 659, 672, 674, 687, 814, 988, 1042, 1044], "sagar": 1045, "sagnik": 1043, "saha": 1049, "sahil": 1051, "sahin": 1045, "sahu": 1047, "sai": [183, 226, 345, 350, 351, 379, 406, 409, 410, 414, 416, 417, 446, 447, 500, 504, 510, 677, 981, 998, 1005, 1017, 1025, 1026, 1028, 1052, 1053], "said": [125, 167, 226, 260, 374, 379, 792, 990, 998, 1019, 1026], "saihttam": 1041, "sailesh": [1042, 1043], "saint": 1041, "saito": [414, 538, 540, 547, 1042], "saiw": 1041, "sake": [2, 25, 122, 125, 162, 167, 197, 310, 342, 350, 352, 387, 391, 670], "saket": [1039, 1040, 1047], "sakinaouisrani": 1049, "salahuddin": 1050, "salakhutdinov": [644, 853, 995], "salamin": 1039, "sale": [119, 236, 259, 992, 1017], "saleem": 1045, "salerno": 376, "salim": 1052, "sallisaw": [410, 466], "salman": [0, 397, 1050, 1051, 1052, 1053, 1054], "salmon": 1019, "salt": [29, 231, 307, 1049], "salvator": [1035, 1049, 1050, 1052], "salz": 1042, "salzmann": [197, 215], "sam": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "sambhav": 1046, "same": [2, 5, 6, 11, 18, 24, 32, 35, 38, 42, 51, 53, 55, 56, 62, 68, 69, 70, 90, 93, 95, 98, 100, 102, 110, 112, 116, 119, 122, 123, 125, 128, 146, 149, 167, 168, 170, 183, 185, 186, 191, 197, 198, 199, 205, 215, 233, 237, 248, 253, 254, 255, 256, 257, 259, 260, 262, 264, 265, 267, 272, 273, 283, 286, 288, 301, 305, 306, 308, 310, 311, 315, 317, 328, 338, 350, 351, 352, 359, 361, 365, 366, 367, 373, 374, 376, 378, 379, 381, 383, 385, 388, 391, 392, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 434, 438, 439, 446, 450, 456, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 493, 495, 496, 498, 504, 508, 509, 531, 532, 535, 536, 537, 538, 539, 540, 543, 547, 549, 551, 552, 553, 554, 557, 559, 560, 561, 562, 564, 565, 567, 568, 589, 590, 602, 603, 606, 610, 611, 613, 622, 627, 628, 629, 632, 633, 646, 649, 652, 653, 655, 658, 659, 663, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 684, 687, 699, 704, 705, 712, 713, 715, 717, 726, 731, 732, 736, 742, 755, 756, 757, 778, 779, 780, 786, 788, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 808, 809, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 846, 847, 848, 852, 854, 855, 856, 867, 868, 869, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 893, 904, 905, 912, 914, 926, 930, 941, 958, 963, 966, 967, 977, 981, 982, 984, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1013, 1023, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "same_kind": 1052, "samesh": [1045, 1046], "samm": [29, 109, 111, 118, 416, 553, 1051, 1052], "samoocha": 1043, "sampl": [2, 3, 6, 9, 12, 22, 23, 24, 25, 30, 31, 32, 35, 37, 39, 40, 41, 44, 46, 47, 51, 54, 55, 56, 57, 58, 63, 78, 79, 80, 84, 88, 90, 93, 97, 98, 101, 102, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 126, 131, 132, 133, 138, 143, 145, 146, 149, 153, 154, 155, 156, 158, 161, 164, 167, 168, 173, 175, 181, 183, 185, 186, 197, 199, 201, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 218, 226, 230, 231, 233, 234, 236, 243, 244, 246, 247, 248, 249, 251, 253, 254, 258, 259, 261, 262, 263, 265, 267, 271, 273, 274, 276, 281, 283, 287, 288, 289, 290, 292, 293, 294, 296, 301, 302, 305, 307, 308, 309, 310, 312, 315, 317, 318, 320, 322, 325, 327, 328, 329, 330, 333, 334, 336, 338, 340, 342, 343, 345, 346, 348, 350, 351, 356, 359, 365, 368, 372, 374, 375, 378, 379, 381, 382, 391, 392, 399, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 426, 427, 428, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 456, 457, 458, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 611, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 763, 764, 768, 769, 770, 771, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 924, 925, 929, 930, 941, 945, 961, 963, 966, 967, 970, 973, 981, 982, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1016, 1019, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sample_i": [158, 419, 611, 1049], "sample_id": [359, 374, 497], "sample_interv": 638, "sample_interval_": 1051, "sample_posterior": [162, 627, 982], "sample_s": [56, 231, 351, 793], "sample_score_mean": 263, "sample_score_std": 263, "sample_silhouette_valu": 58, "sample_step": 638, "sample_weight": [22, 178, 197, 210, 215, 233, 316, 321, 322, 347, 379, 393, 399, 409, 416, 420, 426, 432, 437, 443, 444, 447, 449, 459, 460, 465, 469, 482, 483, 484, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 610, 611, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 800, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 869, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 952, 980, 992, 1006, 1007, 1008, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "sample_weight1": 233, "sample_weight2": 233, "sample_weight_const": 347, "sample_weight_last_ten": 347, "sample_weight_vect": 930, "sample_without_replac": [388, 1041], "samples_weight": 210, "samplewis": [754, 992], "samson": 1042, "samuel": [696, 1017, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "samuela": 1038, "samu\u00ebl": 1042, "san": [146, 376, 417, 1004], "sanchez": [173, 1043, 1044], "sandbox": 402, "sandeep": 1047, "sander": [409, 420, 444, 446, 450, 457, 850, 998, 1044, 1045], "sandi": 1048, "sandip": 1052, "sandra": [1044, 1050], "sandro": [1043, 1050], "sandrocasagrand": [1043, 1044], "sandrovskii": 1042, "sangam": 1050, "sangamswadik": 1050, "sangeeth": 1044, "saniti": [382, 868, 992, 1035, 1036], "sanjabi": 1045, "sanjai": 1049, "sanjai_3": [1050, 1051], "sanjoi": [898, 1004], "sano": 1049, "sanofi": 10, "santa": [157, 1050], "santana": [1046, 1049], "santhanam": 1043, "santhosh": 1046, "santhoshbala18": 1046, "santi": [1040, 1042, 1043], "santiago": 1046, "sap": 10, "sapiro": [414, 531, 537], "saqib": 1043, "sara": 1048, "sarah": [1042, 1044, 1047], "sarahremu": 1050, "sarajpoor": 1050, "sarat": 1046, "sarawagi": 783, "sarra": 1045, "sartaj": 1041, "sasank": 1041, "sashka": [1050, 1051], "sassenhagen": [103, 1047, 1052], "sat": [2, 125, 168, 417], "satellit": 995, "satisfi": [409, 650, 654, 699, 717, 736, 737, 844, 845], "satish": 1043, "sato": 1038, "satrajit": [0, 398, 1035, 1036], "satur": [35, 167, 305], "sauerbrei": 1002, "sauerkraut": 417, "saul": [689, 693, 989, 1042, 1043, 1045], "saurabh": [1039, 1040, 1041, 1042, 1043, 1047], "sauvignon": 311, "saval": 1044, "savard": 1035, "save": [51, 68, 70, 236, 302, 378, 379, 383, 385, 386, 387, 393, 402, 413, 421, 468, 534, 535, 627, 844, 845, 902, 988, 992, 1002, 1008, 1017, 1028, 1035, 1038, 1042, 1045, 1053], "saver": 1012, "savings_statu": 253, "savkomax": 1050, "saw": [94, 198, 201, 1027], "sawtooth": [94, 1027], "say_hello": 953, "sc": [373, 409], "scaja": 1052, "scala": 1013, "scalabl": [40, 42, 60, 164, 172, 174, 231, 251, 276, 320, 351, 379, 409, 416, 417, 448, 491, 502, 589, 640, 806, 817, 828, 830, 842, 865, 874, 876, 904, 906, 909, 910, 984, 987, 989, 992, 1005, 1007, 1014, 1017, 1035, 1038, 1039, 1045, 1046, 1049, 1050], "scalar": [93, 318, 385, 393, 404, 410, 419, 421, 464, 467, 524, 533, 615, 616, 617, 622, 623, 627, 628, 630, 738, 742, 920, 928, 984, 996, 998, 1002, 1006, 1012, 1045, 1046, 1049, 1051], "scalarmapp": 28, "scale": [2, 3, 10, 23, 25, 35, 38, 41, 44, 45, 54, 56, 59, 69, 70, 77, 80, 84, 95, 98, 120, 127, 146, 149, 150, 151, 154, 155, 156, 158, 164, 168, 173, 177, 178, 185, 188, 197, 199, 201, 211, 212, 213, 215, 217, 220, 224, 226, 232, 236, 248, 256, 259, 260, 261, 262, 266, 286, 288, 300, 301, 302, 304, 305, 309, 313, 316, 319, 321, 322, 330, 333, 335, 338, 342, 348, 361, 364, 365, 371, 372, 373, 376, 379, 384, 388, 391, 392, 393, 407, 409, 410, 414, 416, 417, 418, 419, 446, 447, 450, 451, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 510, 514, 515, 524, 534, 538, 540, 541, 547, 549, 550, 561, 562, 582, 590, 591, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 641, 644, 645, 646, 647, 649, 652, 658, 659, 660, 661, 662, 672, 674, 676, 677, 678, 681, 687, 688, 689, 690, 692, 694, 699, 703, 716, 741, 747, 757, 759, 769, 775, 777, 814, 817, 830, 831, 832, 844, 845, 846, 861, 862, 865, 868, 873, 874, 876, 879, 881, 882, 884, 889, 890, 891, 893, 894, 896, 897, 904, 905, 906, 907, 908, 909, 910, 967, 968, 969, 970, 973, 981, 984, 985, 988, 992, 993, 994, 995, 996, 1000, 1006, 1007, 1013, 1014, 1017, 1019, 1026, 1027, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scale_": [649, 873, 874, 882, 884, 894, 1002, 1040], "scaled_clf": 310, "scaled_pca": 310, "scaled_x_train": 310, "scaler": [4, 69, 71, 126, 144, 164, 213, 214, 231, 236, 238, 240, 273, 286, 291, 304, 309, 310, 313, 320, 338, 341, 361, 384, 410, 413, 490, 658, 659, 672, 674, 687, 864, 873, 874, 876, 880, 881, 882, 884, 889, 890, 891, 892, 893, 894, 895, 996, 1002, 1006, 1014, 1024, 1035, 1040, 1043, 1048], "scaler2": 240, "scalewai": 387, "scaling_": 550, "scalings_": [549, 550], "scanpi": 1052, "scatter": [2, 7, 9, 10, 22, 28, 29, 32, 36, 37, 40, 41, 42, 43, 47, 50, 54, 55, 56, 57, 58, 60, 65, 78, 84, 89, 90, 95, 97, 98, 99, 101, 110, 111, 115, 118, 126, 128, 129, 131, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 167, 173, 177, 180, 187, 189, 193, 194, 195, 198, 199, 200, 206, 209, 210, 211, 214, 218, 219, 220, 221, 222, 223, 226, 231, 232, 234, 243, 244, 245, 246, 247, 248, 249, 254, 260, 262, 274, 283, 286, 289, 290, 291, 292, 293, 294, 295, 299, 305, 307, 308, 310, 319, 327, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 350, 356, 357, 358, 411, 631, 701, 960, 986, 988, 1026, 1027], "scatter_": 701, "scatter_fig": 115, "scatter_kwarg": [2, 11, 73, 130, 167, 701], "scatter_trac": 115, "scatterplot": [83, 176, 259], "scatterpoint": [97, 101, 221, 245, 327], "scenario": [55, 68, 125, 149, 173, 201, 262, 361, 386, 396, 408, 413, 416, 537, 543, 545, 546, 986, 992, 1002, 1045], "scene": [376, 387, 995, 997, 1048], "schapir": [9, 278, 296, 374, 416, 498, 553, 554], "schedul": [125, 300, 366, 676, 677, 678, 861, 862, 1006, 1017, 1042], "scheidegg": 1035, "scheme": [268, 288, 311, 312, 374, 393, 409, 413, 415, 417, 566, 590, 658, 659, 705, 813, 871, 872, 875, 877, 881, 885, 888, 893, 904, 909, 981, 988, 1002, 1006, 1035, 1043, 1046, 1047, 1052, 1053], "scherer": 1041, "scheubrein": 1047, "schloss": 992, "schl\u00fcter": [1035, 1043], "schmerler": 1050, "schmid": [758, 759, 990], "schmidt": [658, 988, 1038], "schmitt": [1045, 1046], "schmitz": 1052, "schneider": [350, 1048], "schoelkopf": 900, "schoentgen": [1043, 1044], "schofield": 1035, "schole": 1047, "scholkopf1997": 414, "scholkopf1998": 1002, "school": [68, 167, 376, 409, 788, 992], "schreiber": [0, 398, 1040, 1041, 1042], "schroeder": [4, 374], "schubert": [409, 420, 444, 450, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049], "schucker": 1041, "schuder": [1043, 1044, 1045], "schuetz": [839, 843], "schuldt": 1039, "schult": 15, "schulz": 1035, "schumach": [1038, 1039, 1040], "schut": 1035, "schwardt": 1035, "schwartz": [1035, 1037, 1049], "schwetlick": [1046, 1047], "sch\u00f6lkopf": [3, 414, 535, 870, 998, 1002, 1007], "sch\u00f6nberger": [1037, 1038], "sch\u00fctze": [414, 590, 990, 992, 994], "sci": [17, 68, 350, 351, 352, 374, 391, 488, 689, 693, 875, 989, 1002, 1028], "scibol": 1046, "scienc": [0, 36, 78, 146, 157, 167, 278, 373, 376, 391, 409, 440, 454, 538, 540, 547, 688, 689, 693, 851, 982, 984, 988, 989, 992, 995, 1004, 1013, 1017, 1022, 1043], "scientif": [0, 30, 136, 137, 138, 231, 368, 373, 377, 391, 396, 409, 452, 462, 501, 1017, 1020], "scientifiqu": 0, "scientist": [982, 1017], "scikera": 1012, "scikit": [4, 6, 8, 10, 11, 13, 15, 29, 30, 48, 53, 68, 69, 107, 113, 114, 115, 116, 119, 125, 127, 130, 143, 146, 158, 161, 162, 164, 167, 168, 169, 170, 173, 178, 185, 186, 197, 198, 199, 215, 225, 228, 236, 237, 238, 239, 240, 251, 253, 255, 256, 264, 268, 269, 271, 276, 278, 283, 285, 288, 290, 311, 314, 323, 342, 350, 351, 355, 356, 361, 366, 367, 368, 371, 373, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 392, 393, 399, 401, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 431, 432, 433, 438, 443, 446, 447, 450, 457, 464, 465, 467, 468, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 512, 515, 521, 524, 538, 541, 561, 562, 564, 565, 567, 576, 581, 582, 583, 589, 599, 602, 611, 626, 628, 630, 632, 634, 638, 640, 646, 648, 652, 658, 669, 680, 688, 700, 701, 702, 717, 732, 742, 748, 778, 779, 780, 788, 795, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 823, 826, 827, 830, 832, 833, 846, 848, 864, 865, 867, 869, 871, 874, 876, 877, 878, 879, 883, 884, 885, 888, 901, 902, 904, 909, 912, 913, 935, 936, 958, 959, 960, 981, 982, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1005, 1006, 1007, 1008, 1011, 1014, 1016, 1022, 1023, 1024, 1026, 1027, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scikit_learn": 1012, "scikit_learn_data": [374, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499], "scipi": [0, 4, 12, 15, 17, 39, 44, 45, 51, 52, 76, 77, 80, 94, 96, 100, 121, 149, 167, 170, 183, 187, 199, 244, 248, 249, 256, 259, 267, 271, 283, 288, 293, 302, 316, 317, 322, 325, 326, 365, 373, 374, 377, 379, 381, 385, 387, 388, 391, 392, 393, 396, 401, 402, 407, 409, 414, 417, 450, 451, 452, 453, 457, 462, 463, 496, 503, 508, 532, 534, 535, 541, 544, 581, 582, 585, 586, 588, 589, 610, 611, 648, 649, 653, 657, 658, 659, 663, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 684, 687, 691, 692, 695, 760, 763, 778, 779, 780, 781, 792, 793, 804, 812, 814, 830, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 867, 876, 877, 882, 883, 884, 887, 891, 894, 895, 904, 906, 907, 909, 910, 938, 942, 943, 947, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 981, 982, 988, 990, 993, 995, 996, 1002, 1006, 1007, 1011, 1013, 1022, 1024, 1027, 1028, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "sckit": 1051, "scls19fr": 1040, "scognamiglio": 416, "scope": [4, 17, 253, 365, 367, 379, 391, 417, 1012, 1013, 1024], "score": [2, 4, 6, 9, 11, 18, 19, 22, 23, 24, 25, 29, 30, 31, 35, 56, 58, 68, 69, 70, 71, 72, 73, 76, 80, 84, 100, 107, 109, 111, 118, 119, 120, 121, 122, 125, 126, 129, 130, 137, 141, 142, 143, 146, 161, 164, 166, 167, 168, 169, 170, 173, 181, 188, 189, 192, 197, 199, 203, 205, 213, 215, 226, 231, 232, 233, 236, 240, 247, 251, 253, 257, 259, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 281, 290, 291, 292, 299, 300, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 322, 325, 326, 328, 329, 338, 345, 350, 351, 355, 361, 374, 379, 381, 384, 392, 393, 402, 403, 404, 405, 406, 407, 408, 410, 412, 414, 416, 418, 426, 428, 432, 437, 443, 447, 449, 452, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 502, 504, 532, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 739, 740, 742, 755, 756, 757, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 803, 804, 806, 814, 819, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 853, 854, 855, 860, 861, 862, 864, 884, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 943, 981, 984, 988, 990, 995, 998, 1000, 1002, 1006, 1013, 1014, 1022, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "score_clf1": 31, "score_clf2": 31, "score_clf3": 31, "score_df": 23, "score_differ": 264, "score_estim": [197, 215], "score_full_data": 161, "score_func": [35, 69, 70, 418, 592, 595, 596, 598, 599, 600, 742, 1035, 1037, 1052], "score_iri": 265, "score_iterative_imput": 161, "score_label": [215, 265], "score_mean": 341, "score_nam": [23, 35, 232, 261, 275, 321, 351, 806, 823], "score_param": [659, 1052], "score_rand": 265, "score_sampl": [247, 288, 289, 290, 296, 393, 415, 469, 532, 541, 563, 677, 797, 798, 800, 803, 804, 814, 849, 850, 860, 864, 908, 998, 1038, 1043, 1045, 1047], "score_simple_imput": 161, "score_std": 341, "score_tim": [261, 413, 827, 828], "score_times_nb": 261, "score_times_svm": 261, "score_typ": [232, 261, 275, 321, 806, 823, 1051], "score_valu": 351, "scorer": [125, 130, 215, 233, 253, 263, 322, 381, 393, 399, 408, 413, 416, 418, 561, 562, 594, 602, 634, 659, 673, 675, 711, 732, 733, 742, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 831, 950, 981, 988, 992, 1000, 1013, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "scorer1_nam": 413, "scorer2_nam": 413, "scorer_": [800, 803, 804, 814], "scorer_nam": [263, 800, 814], "scores_": [176, 177, 592, 595, 596, 598, 599, 600, 644, 645, 659, 1035, 1045], "scores_df": 11, "scores_glm_pure_premium": 215, "scores_matrix": 270, "scores_max": 15, "scores_product_model": 215, "scores_std": [136, 1023], "scoring_inner_cv": 322, "scoring_on_bootstrap": 262, "scoring_weight": 399, "scott": [415, 849, 1035, 1036, 1041, 1043, 1044, 1045, 1050, 1051], "scratch": [380, 442, 992, 1037], "screen": [7, 1048], "screenporch": 119, "screenshot": 377, "script": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 366, 379, 380, 381, 382, 383, 385, 391, 393, 396, 402, 417, 1013, 1016, 1028], "scrollbar": 384, "scrutin": 268, "scsi": 17, "scullei": 409, "sd345": 1028, "sdca": 1012, "sdenton4": 1038, "sdg_param": 329, "se": [146, 220, 376, 396], "seabold": [1038, 1040, 1041], "seaborn": [35, 110, 125, 166, 167, 176, 181, 248, 259, 379, 396, 401, 1012], "seagreen": 191, "seal": 1041, "seamu": 1037, "sean": [1047, 1048, 1050], "seanpwilliam": 1042, "sear": 1041, "search": [4, 25, 44, 52, 69, 70, 71, 72, 122, 141, 143, 145, 146, 149, 164, 215, 232, 233, 248, 251, 253, 258, 260, 263, 264, 266, 271, 276, 281, 283, 285, 287, 302, 307, 320, 338, 344, 350, 361, 368, 376, 377, 379, 381, 391, 393, 403, 409, 410, 413, 416, 417, 418, 420, 443, 448, 450, 452, 457, 458, 461, 464, 471, 472, 478, 502, 515, 522, 557, 558, 559, 560, 564, 565, 566, 579, 599, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 628, 653, 676, 688, 689, 692, 693, 713, 728, 785, 788, 800, 803, 804, 811, 812, 814, 816, 830, 831, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 864, 909, 912, 913, 914, 915, 946, 980, 985, 987, 989, 992, 995, 996, 1006, 1008, 1012, 1013, 1014, 1019, 1020, 1022, 1024, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050, 1052], "search_05p": 122, "search_95p": 122, "search_cv": 69, "searchcv": [392, 1050], "searcher": 1028, "searchforpass": 1051, "searchgrid": 1013, "searchsort": 9, "season": [2, 11, 154, 168, 198, 378], "seasonal_kernel": 154, "seasoncountstru32": 11, "sebastian": [310, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "sebastianraschka": 310, "sebastien": 1043, "sebastin": [1042, 1043], "sebasti\u00e1n": 1041, "seberg": 1036, "sec": [8, 205, 220, 223, 283], "sec65": 1050, "secant": 642, "second": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 374, 381, 383, 385, 393, 405, 408, 409, 413, 414, 416, 417, 419, 464, 467, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 504, 510, 553, 583, 588, 589, 590, 591, 621, 624, 631, 632, 699, 712, 716, 758, 759, 763, 764, 766, 767, 774, 775, 776, 777, 778, 781, 800, 803, 804, 814, 828, 834, 835, 838, 841, 852, 854, 855, 856, 861, 862, 981, 982, 986, 987, 988, 989, 992, 993, 994, 995, 996, 999, 1002, 1003, 1008, 1019, 1025, 1027, 1050], "secondari": [635, 1039], "secondli": [377, 391, 409, 416, 657, 988, 1028], "sect": 3, "section": [2, 35, 93, 98, 112, 120, 125, 130, 136, 137, 138, 154, 158, 166, 167, 168, 170, 176, 181, 185, 186, 199, 222, 227, 233, 236, 238, 253, 257, 259, 262, 268, 310, 311, 312, 317, 350, 351, 352, 361, 372, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 394, 399, 406, 407, 408, 410, 412, 413, 414, 416, 417, 418, 419, 439, 443, 459, 534, 614, 619, 622, 637, 645, 788, 798, 906, 909, 981, 986, 988, 992, 993, 995, 996, 998, 999, 1006, 1007, 1009, 1011, 1026, 1028, 1035, 1037, 1038, 1039, 1042], "sector": 167, "sector_construct": 167, "sector_manufactur": 167, "sector_oth": 167, "secur": [383, 393, 1012, 1013, 1017, 1030], "sed": [383, 1035], "sedamaki": 1049, "sedykh": 1050, "see": [0, 2, 3, 5, 11, 18, 22, 23, 25, 35, 42, 47, 48, 51, 53, 55, 56, 60, 62, 63, 65, 67, 78, 84, 87, 88, 93, 98, 99, 103, 109, 110, 111, 112, 115, 116, 117, 118, 119, 121, 122, 123, 125, 127, 130, 136, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 167, 168, 170, 173, 176, 177, 178, 181, 188, 198, 199, 200, 201, 203, 214, 215, 218, 220, 228, 230, 233, 236, 237, 238, 240, 244, 245, 246, 252, 253, 254, 256, 258, 259, 260, 261, 262, 266, 268, 269, 270, 273, 274, 275, 278, 283, 289, 290, 292, 296, 305, 311, 312, 315, 316, 317, 318, 319, 320, 321, 327, 338, 342, 345, 350, 351, 352, 355, 356, 357, 358, 361, 365, 366, 367, 371, 372, 373, 374, 376, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 396, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 433, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 706, 708, 711, 713, 743, 763, 774, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 940, 941, 961, 963, 966, 976, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1017, 1019, 1021, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "seed": [5, 9, 24, 25, 32, 37, 38, 42, 43, 50, 52, 55, 57, 58, 62, 63, 69, 76, 77, 78, 90, 94, 99, 112, 118, 138, 141, 169, 187, 192, 195, 200, 203, 206, 210, 214, 221, 244, 246, 247, 248, 249, 262, 265, 274, 288, 289, 290, 295, 342, 343, 347, 351, 361, 366, 381, 388, 391, 393, 409, 413, 414, 443, 447, 448, 450, 452, 457, 459, 460, 461, 462, 471, 472, 473, 536, 544, 553, 554, 555, 556, 559, 560, 627, 646, 647, 652, 653, 660, 661, 662, 663, 677, 689, 691, 693, 695, 797, 798, 804, 835, 838, 853, 907, 927, 940, 941, 957, 961, 981, 982, 987, 989, 1026, 1027, 1039, 1040, 1044, 1045, 1051], "seeger": [639, 984], "seek": [218, 220, 222, 378, 379, 391, 394, 508, 509, 989, 1020, 1022], "seel": 1049, "seem": [2, 7, 11, 44, 53, 122, 125, 168, 197, 222, 226, 260, 278, 300, 309, 345, 350, 351, 378, 379, 384, 408, 413, 501, 988, 992], "seemingli": [215, 361, 391], "seen": [15, 23, 38, 53, 64, 80, 96, 102, 116, 122, 125, 167, 168, 193, 222, 229, 233, 300, 305, 338, 350, 374, 381, 383, 392, 393, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 425, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 521, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 623, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 967, 973, 981, 987, 992, 995, 996, 1002, 1008, 1017, 1023, 1024, 1026, 1027, 1047, 1048, 1049, 1050, 1051, 1052], "segfault": [366, 380, 1035, 1043, 1048], "seglearn": 1012, "segment": [10, 12, 15, 19, 34, 45, 46, 51, 66, 96, 164, 221, 229, 374, 387, 409, 417, 452, 462, 508, 509, 691, 860, 992, 1012, 1014, 1017, 1043, 1045, 1047], "seguin": 1040, "sei": 417, "seismic_r": [176, 181], "sejourn": 1044, "sel": [399, 418], "seladu": 1051, "seldom": 904, "sele": [1049, 1050], "selecci\u00f3n": 311, "select": [2, 5, 7, 8, 11, 18, 32, 34, 35, 42, 45, 53, 55, 60, 63, 66, 67, 69, 72, 74, 76, 80, 90, 92, 93, 97, 102, 103, 104, 109, 111, 117, 119, 122, 125, 130, 141, 143, 147, 154, 156, 167, 168, 170, 173, 175, 177, 179, 181, 183, 184, 196, 201, 205, 212, 215, 216, 219, 226, 230, 232, 236, 242, 243, 244, 245, 249, 250, 253, 257, 258, 259, 260, 264, 272, 273, 287, 305, 310, 311, 317, 321, 325, 326, 329, 333, 338, 345, 348, 350, 351, 352, 361, 365, 366, 368, 374, 376, 377, 379, 381, 387, 392, 393, 405, 409, 410, 411, 414, 416, 417, 419, 443, 445, 446, 447, 449, 451, 453, 458, 459, 460, 464, 466, 467, 472, 473, 476, 488, 489, 492, 493, 496, 497, 500, 501, 502, 504, 512, 515, 532, 534, 535, 540, 541, 544, 549, 551, 558, 559, 560, 563, 565, 581, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 627, 631, 632, 645, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 671, 673, 676, 678, 682, 683, 691, 692, 697, 712, 716, 718, 754, 788, 792, 793, 797, 798, 800, 803, 804, 805, 806, 814, 826, 827, 828, 830, 832, 846, 847, 848, 850, 852, 854, 855, 856, 864, 865, 869, 874, 880, 884, 901, 904, 905, 909, 912, 913, 914, 915, 920, 961, 962, 986, 987, 989, 991, 992, 993, 995, 996, 998, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1022, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "select__k": 981, "select_dtyp": [73, 119, 320, 466], "selected_featur": 170, "selected_features_nam": 170, "selectfdr": [418, 592, 596, 598, 599, 600, 606, 1039, 1041, 1042, 1051], "selectfpr": [379, 418, 592, 595, 598, 599, 600, 606, 1051], "selectfrommodel": [146, 393, 399, 593, 602, 603, 1015, 1030, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1052], "selectfw": [418, 592, 595, 596, 599, 600, 606, 1051], "selectkbest": [70, 72, 142, 143, 319, 361, 379, 399, 410, 418, 581, 592, 595, 596, 598, 600, 606, 981, 1036, 1041, 1051, 1052], "selectkbestselectkbest": [143, 319], "selector": [11, 69, 142, 143, 236, 345, 387, 417, 418, 466, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1037, 1045, 1047, 1051], "selectormixin": 1046, "selectpercentil": [52, 69, 240, 341, 418, 592, 595, 596, 598, 599, 603, 606, 1036, 1041, 1051, 1052], "selectpercentileselectpercentil": [69, 240], "self": [6, 17, 23, 25, 54, 63, 90, 107, 157, 164, 170, 233, 271, 273, 283, 324, 330, 331, 338, 350, 373, 379, 380, 381, 384, 385, 386, 387, 409, 417, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 500, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 703, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 819, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 949, 950, 952, 953, 958, 966, 995, 1013, 1014, 1015, 1017, 1030, 1037, 1042, 1049], "self_request": 233, "self_training_clf": 328, "self_training_model": [317, 901], "selftrain": 329, "selftrainingclassifi": [317, 328, 329, 330, 399, 1005, 1047, 1052], "selftrainingclassifierifittedselftrainingclassifi": 317, "seljak": 1050, "sell": 73, "selvan": 1047, "semant": [13, 350, 351, 393, 544, 1028, 1029, 1030, 1037], "semi": [6, 17, 29, 54, 68, 107, 118, 128, 138, 151, 157, 231, 234, 299, 307, 317, 331, 335, 338, 341, 342, 352, 368, 374, 393, 488, 504, 535, 588, 590, 676, 729, 830, 864, 868, 899, 900, 901, 909, 990, 995, 998, 1014, 1015, 1030, 1035, 1047, 1050], "semi_supervis": [164, 317, 319, 324, 325, 326, 327, 328, 329, 330, 331, 368, 399, 993, 1005, 1014, 1036, 1041, 1042, 1049, 1050], "semiconductor": 1017, "semidefinit": [1002, 1007], "semilogi": 230, "semilogx": [136, 186, 272, 1023], "semin": 416, "seminar": 992, "semisupervis": [325, 393], "sen": [164, 175, 200, 203, 216, 305, 649, 657, 671, 678, 679, 1014], "send": [379, 409, 421, 533], "sender": [350, 374], "sendyk": 1044, "seng": 1047, "senger": [0, 1051, 1052, 1053, 1054], "senior": [1002, 1017], "sens": [1, 2, 11, 14, 15, 23, 53, 64, 155, 164, 167, 173, 230, 305, 311, 326, 338, 350, 361, 365, 379, 380, 393, 409, 411, 413, 418, 462, 469, 470, 471, 472, 473, 474, 475, 476, 652, 655, 656, 672, 801, 811, 901, 986, 988, 995, 996, 998, 1002, 1005, 1014], "sensibl": [50, 161, 278, 351, 381, 988, 1002], "sensit": [2, 42, 53, 78, 79, 112, 122, 164, 168, 199, 200, 201, 226, 227, 236, 251, 263, 266, 273, 276, 305, 338, 366, 367, 394, 408, 411, 416, 452, 462, 496, 551, 561, 658, 692, 700, 702, 712, 713, 718, 732, 742, 784, 787, 788, 799, 800, 822, 830, 865, 884, 902, 987, 988, 989, 991, 992, 996, 998, 1006, 1007, 1014, 1019, 1027, 1039, 1053], "sensor": 181, "sent": [125, 409, 833], "sentenc": [68, 350, 352, 374, 394, 417], "sentiment": 1020, "seoeun": 1051, "sep": [90, 268], "sepal": [43, 88, 101, 103, 118, 151, 180, 240, 286, 317, 320, 335, 376, 1002, 1025, 1026], "sepal_col": 320, "separ": [11, 12, 22, 23, 28, 29, 38, 53, 58, 60, 64, 71, 78, 89, 92, 93, 95, 98, 104, 109, 111, 114, 117, 121, 128, 146, 152, 162, 164, 168, 169, 173, 175, 196, 198, 216, 219, 234, 245, 259, 262, 268, 269, 305, 307, 310, 317, 328, 333, 334, 336, 337, 338, 342, 343, 348, 350, 361, 365, 375, 376, 381, 384, 387, 391, 393, 402, 406, 409, 410, 411, 414, 416, 417, 419, 464, 512, 519, 533, 538, 540, 541, 547, 549, 581, 588, 589, 591, 610, 631, 638, 646, 647, 673, 676, 677, 690, 694, 725, 732, 745, 746, 748, 753, 792, 819, 836, 837, 863, 864, 906, 908, 909, 914, 915, 981, 982, 984, 986, 988, 989, 991, 998, 999, 1002, 1006, 1007, 1014, 1024, 1026, 1027, 1035, 1038, 1040, 1041, 1045, 1047, 1048, 1051, 1052], "seper": 553, "septemb": [734, 992, 1035, 1038, 1041, 1043, 1048, 1051], "seq": 633, "seq_dataset": [1035, 1045], "seqlearn": 391, "sequenc": [10, 109, 118, 185, 221, 381, 393, 410, 413, 414, 416, 417, 503, 512, 553, 561, 562, 569, 570, 581, 582, 588, 589, 591, 646, 800, 803, 811, 830, 864, 888, 944, 945, 955, 963, 966, 1012, 1035, 1038, 1040, 1041], "sequencekernel": 157, "sequenti": [11, 118, 140, 143, 147, 164, 191, 260, 273, 317, 377, 414, 416, 417, 500, 501, 534, 593, 597, 602, 603, 605, 606, 646, 647, 652, 653, 658, 660, 661, 662, 663, 673, 788, 864, 865, 884, 982, 1000, 1006, 1012, 1014, 1015, 1030, 1035, 1044, 1047], "sequentialfeatureselector": [146, 399, 418, 593, 597, 603, 1047, 1048, 1049, 1050, 1051], "sergei": [409, 1037, 1041, 1042, 1043, 1044, 1045], "sergeyf": 1037, "sergio": [1035, 1037, 1038, 1047, 1050], "sergiodsr": 1046, "sergul": [1042, 1043, 1046], "seri": [1, 2, 10, 14, 18, 80, 116, 122, 125, 164, 166, 169, 170, 179, 197, 199, 201, 215, 218, 240, 264, 273, 312, 319, 325, 371, 374, 384, 393, 409, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 541, 562, 690, 694, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 920, 983, 988, 989, 993, 995, 1006, 1012, 1014, 1038, 1041, 1042, 1043, 1047, 1050, 1052, 1053], "serial": [393, 402, 423, 948, 1012, 1013, 1035, 1043, 1047, 1052], "serializetostr": 402, "serious": 994, "serum": [146, 376], "serv": [68, 97, 109, 155, 262, 342, 410, 551, 984, 1030, 1049], "server": [0, 146, 365, 376, 377, 496, 1016, 1043], "servic": [0, 2, 227, 236, 379, 383, 402, 1017, 1043], "sess": 402, "session": [381, 385, 391, 396, 1011, 1017, 1028], "set": [1, 2, 3, 4, 5, 6, 9, 11, 12, 14, 18, 23, 24, 25, 28, 29, 32, 35, 39, 40, 42, 43, 44, 47, 48, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 68, 69, 71, 78, 79, 80, 84, 88, 92, 93, 97, 98, 101, 104, 107, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 132, 136, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 176, 180, 181, 182, 185, 186, 188, 190, 192, 193, 194, 196, 197, 198, 199, 202, 205, 210, 211, 215, 218, 219, 220, 226, 227, 228, 229, 231, 232, 233, 236, 240, 243, 245, 247, 248, 252, 254, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 274, 278, 281, 285, 289, 290, 291, 292, 293, 296, 300, 301, 302, 305, 307, 309, 310, 311, 312, 315, 317, 318, 322, 325, 326, 329, 330, 335, 337, 340, 342, 345, 350, 351, 352, 357, 358, 359, 361, 365, 366, 367, 368, 371, 372, 374, 376, 377, 379, 381, 383, 384, 386, 387, 392, 393, 394, 396, 399, 402, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 493, 495, 496, 497, 499, 502, 503, 504, 508, 509, 510, 515, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 700, 701, 702, 703, 713, 714, 719, 721, 723, 726, 727, 728, 729, 730, 731, 734, 738, 740, 745, 746, 748, 750, 751, 753, 756, 779, 780, 782, 783, 784, 785, 787, 789, 790, 791, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 924, 925, 935, 936, 941, 945, 948, 949, 960, 961, 962, 963, 966, 967, 973, 976, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1020, 1022, 1023, 1024, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "set1": [259, 292, 293], "set_": [233, 399, 1053], "set_alpha": [32, 243, 244, 245, 248, 249], "set_arrai": [10, 221, 229], "set_aspect": [2, 152, 208, 245, 346], "set_autoscaley_on": 40, "set_axis_bgcolor": 80, "set_axis_off": 30, "set_axisbelow": 8, "set_box_aspect": 32, "set_clim": 287, "set_clip_box": [32, 243, 244, 245, 248, 249], "set_color": [5, 208], "set_config": [233, 238, 240, 253, 312, 316, 322, 365, 366, 399, 410, 437, 443, 444, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 610, 611, 626, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1044, 1046, 1049, 1051], "set_constrained_layout_pad": 93, "set_edgecolor": 93, "set_facecolor": [80, 243], "set_fit_request": [233, 322, 399, 437, 443, 444, 447, 449, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 588, 591, 594, 635, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 836, 837, 839, 840, 841, 842, 843, 849, 869, 870, 883, 884, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "set_fmt_str_length": 11, "set_i": 55, "set_index": [23, 109, 122, 186, 215, 259, 311, 351], "set_inverse_transform_request": [533, 581, 871, 884], "set_label": [38, 152, 230], "set_label_posit": 5, "set_linewidth": [10, 221, 229], "set_major_formatt": [218, 220, 223, 283, 288], "set_major_loc": [218, 288], "set_output": [69, 164, 168, 225, 238, 241, 310, 311, 382, 433, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 496, 504, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 688, 689, 692, 830, 848, 853, 856, 860, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 1014, 1050, 1051, 1052], "set_param": [96, 103, 113, 119, 122, 168, 169, 177, 185, 186, 190, 201, 205, 231, 236, 253, 272, 286, 315, 341, 351, 382, 393, 409, 410, 416, 419, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 982, 998, 1019, 1026, 1027, 1035, 1041, 1042, 1043, 1048, 1049], "set_partial_fit_request": [449, 534, 666, 667, 668, 676, 677, 678, 832, 833, 836, 837, 839, 840, 841, 842, 843, 861, 884], "set_path_effect": 38, "set_posit": [65, 99, 208, 305], "set_predict_proba_request": [912, 914], "set_predict_request": [233, 482, 483, 484, 552, 611, 635, 644, 645, 912, 913, 914, 915], "set_printopt": 252, "set_prop_cycl": 198, "set_score_request": [233, 253, 322, 399, 437, 443, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 799, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 854, 855, 861, 862, 864, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 992], "set_siz": 290, "set_size_inch": [58, 136, 237], "set_split_request": [801, 802, 807, 809, 818], "set_start_method": 391, "set_stat": 981, "set_tick_param": 243, "set_ticklabel": [43, 88, 99, 194, 350], "set_titl": [6, 8, 13, 23, 25, 28, 29, 30, 32, 40, 41, 43, 51, 53, 55, 58, 62, 63, 70, 73, 78, 88, 90, 98, 103, 109, 114, 116, 120, 126, 128, 130, 131, 158, 161, 162, 166, 167, 168, 169, 170, 176, 177, 186, 188, 195, 197, 198, 199, 205, 218, 219, 222, 223, 229, 231, 232, 236, 237, 243, 252, 253, 254, 255, 256, 259, 261, 262, 266, 270, 271, 273, 275, 278, 281, 283, 286, 287, 288, 293, 299, 300, 305, 306, 307, 308, 309, 310, 315, 319, 325, 326, 335, 342, 345, 346, 347, 350, 355], "set_transform_request": [233, 482, 483, 484, 533, 582, 588, 590, 591, 635, 867, 870, 876, 884], "set_vis": [13, 32, 287, 293, 305], "set_xlabel": [5, 8, 43, 51, 58, 70, 71, 73, 88, 90, 98, 120, 158, 161, 162, 166, 168, 169, 170, 173, 186, 192, 194, 195, 197, 199, 212, 213, 231, 253, 259, 261, 265, 270, 271, 273, 275, 278, 288, 305, 306, 310, 328, 351, 352, 355], "set_xlim": [29, 40, 58, 73, 78, 90, 114, 128, 162, 168, 195, 197, 202, 231, 243, 263, 265, 278, 288, 299, 305, 307, 308, 309, 310, 316, 322, 346], "set_xscal": [186, 202], "set_xtick": [2, 6, 8, 29, 41, 58, 62, 103, 128, 132, 168, 170, 188, 213, 231, 243, 270, 271, 281, 299, 301, 307, 308, 335], "set_xticklabel": [6, 8, 78, 103, 132, 152, 168, 170, 270, 271, 281], "set_ylabel": [5, 6, 8, 28, 32, 43, 51, 58, 63, 70, 71, 73, 78, 88, 90, 98, 103, 109, 116, 120, 158, 168, 173, 186, 188, 192, 194, 195, 197, 199, 201, 212, 231, 243, 253, 259, 261, 265, 270, 271, 273, 281, 288, 305, 306, 310, 315, 328, 345, 351, 355, 1024], "set_ylim": [6, 8, 29, 40, 58, 70, 90, 114, 127, 128, 158, 168, 177, 195, 197, 198, 231, 243, 263, 275, 281, 288, 299, 305, 307, 308, 310, 316, 322, 328, 346], "set_yscal": [120, 197], "set_ytick": [2, 29, 41, 58, 62, 103, 128, 161, 162, 170, 188, 213, 243, 270, 299, 301, 307, 308, 335, 352], "set_yticklabel": [103, 152, 161, 162, 170, 270, 352], "set_zlabel": [43, 88, 194], "set_zord": 95, "setattr": 381, "setdefault": [15, 919], "setdiff1d": 344, "seth": 1041, "sethdandridg": 1039, "setminu": 1008, "setosa": [43, 88, 99, 101, 268, 269, 376, 504, 1019, 1026], "setp": [6, 8, 270, 274], "settabl": 992, "settingwithcopywarn": 168, "setup": [266, 268, 365, 377, 381, 385, 387, 995, 1020], "setuptool": [377, 1053], "seuclidean": [450, 457, 699, 778, 779, 780, 995, 1043, 1046, 1047], "seuclideandist": 699, "seung": 414, "seven": [374, 985], "seventh": [511, 1004], "sever": [0, 2, 7, 10, 11, 23, 25, 29, 32, 35, 53, 54, 55, 59, 72, 89, 112, 125, 128, 130, 133, 143, 146, 149, 154, 155, 164, 167, 173, 181, 186, 197, 201, 217, 218, 221, 222, 223, 224, 230, 245, 254, 259, 264, 273, 283, 285, 300, 305, 318, 345, 350, 351, 365, 373, 374, 376, 379, 381, 384, 387, 391, 393, 405, 407, 409, 410, 413, 415, 416, 417, 419, 447, 449, 464, 487, 499, 508, 509, 538, 555, 556, 559, 560, 563, 564, 565, 570, 588, 589, 591, 610, 645, 646, 652, 688, 689, 690, 691, 692, 693, 797, 798, 800, 803, 804, 814, 832, 833, 839, 840, 841, 842, 843, 863, 864, 871, 888, 912, 913, 914, 915, 927, 981, 984, 989, 992, 993, 995, 1000, 1002, 1006, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1019, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1051, 1052], "sevin": 1043, "sewook": 1045, "sex": [69, 146, 167, 169, 185, 186, 240, 320, 322, 376, 496, 1000, 1026], "sex_mal": 167, "seyedsaman": 1049, "sf": [146, 259, 317, 374, 418, 492, 602], "sfm": 146, "sfs_backward": 146, "sfs_forward": 146, "sfu": [409, 442], "sgd": [5, 6, 9, 77, 89, 102, 111, 121, 122, 131, 138, 152, 153, 164, 175, 178, 182, 188, 189, 204, 211, 216, 226, 247, 267, 289, 296, 300, 301, 318, 334, 339, 340, 343, 347, 350, 356, 361, 367, 504, 512, 631, 649, 666, 667, 668, 671, 676, 677, 678, 679, 861, 862, 981, 996, 1014, 1015, 1030, 1035, 1038, 1039, 1040, 1042, 1046, 1048], "sgdclassifi": [5, 6, 204, 205, 206, 207, 208, 209, 210, 231, 267, 329, 340, 350, 361, 365, 367, 385, 393, 406, 407, 417, 638, 640, 641, 642, 646, 658, 666, 668, 904, 909, 984, 988, 993, 1006, 1007, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "sgdoneclasssvm": [211, 226, 318, 908, 998, 1006, 1048, 1050, 1051, 1052, 1053], "sgdregressor": [8, 208, 365, 367, 391, 407, 646, 649, 667, 671, 676, 679, 862, 905, 910, 988, 1006, 1037, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1053], "sgi": 350, "sgkf": [413, 818], "sgm": 6, "sgml": [6, 365], "sh": [270, 383, 387, 981], "sh_color": 222, "sh_err": 222, "sh_lle": 222, "sh_point": 222, "sh_tsne": 222, "sha256": [6, 1050], "shack": [1045, 1046, 1047], "shade": [18, 51, 144, 180, 286, 291, 334, 414], "shader": 404, "shadi": [1050, 1051], "shadow": [97, 101, 102, 221, 327, 344, 352, 417], "shafer": 68, "shagun": 1041, "shah": [1039, 1040, 1041, 1047], "shahebaz": 1043, "shahriar": 1037, "shaikh": [0, 363, 369, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "shail": 1047, "shakerimoff": 1049, "shalev": [666, 667, 988, 1006], "shalil": 1043, "shall": 154, "shallow": [385, 416, 561, 562, 919], "shamsi": 1043, "shandeng123": 1049, "shane": [63, 1044, 1047, 1050], "shanghai": [689, 693, 989], "shangwu": [1043, 1044], "shankar": 1045, "shanmuga": 1041, "shanno": 988, "shannon": [557, 564, 912, 914, 989, 1008], "shantanu": 783, "shao": [1047, 1048, 1049], "shape": [2, 3, 4, 6, 7, 8, 9, 11, 12, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 39, 44, 45, 46, 49, 50, 51, 52, 53, 56, 58, 59, 64, 68, 72, 73, 78, 93, 94, 96, 110, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 138, 142, 144, 150, 151, 153, 154, 155, 156, 161, 162, 164, 168, 169, 185, 186, 197, 199, 204, 206, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 224, 226, 229, 230, 231, 232, 233, 235, 236, 243, 245, 247, 248, 249, 257, 259, 261, 262, 265, 266, 268, 269, 283, 288, 289, 293, 296, 299, 301, 307, 308, 315, 317, 320, 321, 322, 327, 328, 330, 335, 338, 341, 342, 343, 346, 347, 350, 351, 359, 365, 372, 373, 374, 379, 381, 393, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 926, 929, 930, 935, 939, 941, 943, 946, 954, 956, 961, 963, 967, 968, 969, 970, 971, 972, 973, 974, 975, 982, 987, 988, 992, 993, 994, 995, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1014, 1024, 1025, 1027, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052], "shape_fit_": [906, 907, 908, 909, 910], "shape_img": 585, "sharad": 1043, "sharan": [1042, 1043], "share": [32, 83, 128, 167, 248, 350, 359, 361, 365, 366, 381, 387, 402, 409, 414, 417, 549, 668, 704, 708, 797, 798, 803, 804, 986, 999, 1016, 1035, 1037, 1043, 1045, 1047, 1050], "shared_yax": 115, "sharedmem": 1043, "sharei": [2, 11, 32, 73, 90, 98, 103, 131, 158, 168, 197, 199, 205, 261, 270, 273, 288, 306, 311, 344, 345, 351], "sharex": [2, 5, 13, 32, 71, 90, 98, 131, 158, 168, 199, 261, 273, 288, 328, 1024], "sharma": [1039, 1041, 1043, 1044, 1046, 1047, 1049, 1052], "sharmadharmp": 1049, "sharon": [4, 374], "sharova": 1042, "sharp": [2, 168, 999, 1002], "sharper": 726, "shashank": [1041, 1047], "shaun": 1036, "shawpan": 1041, "shaymernaturalint": 1049, "she": [379, 894, 895, 1045], "shea": [1043, 1044], "shebanov": [1043, 1044], "sheep": 1017, "sheer": [379, 1017], "sheerman": 1035, "sheet": 1037, "shekhar": 1041, "shell": [380, 387, 391, 1019, 1028], "shellyfung": 1050, "shen": 1048, "sheng": 1045, "shengxiduan": 1041, "shenhanc78": 1043, "sheni": 1047, "shenk": 1043, "shenoi": 1042, "sherlock": [628, 982], "sheth": 1043, "shetti": 1048, "shi": [409, 452, 462, 691], "shibata": 1045, "shiebler": 1041, "shield": 393, "shift": [11, 34, 36, 42, 47, 62, 66, 164, 176, 221, 248, 288, 302, 305, 342, 411, 415, 440, 448, 458, 461, 469, 512, 515, 689, 693, 850, 873, 1002, 1014, 1029, 1030, 1035, 1039, 1043], "shifted_gaussian": 247, "shifted_opposite_lof_scor": 850, "shih": [841, 994], "shiki": 1046, "shilt": 1038, "shinehid": 1048, "shinitski": 1052, "shinnar": 1048, "shinsuk": 1050, "ship": [17, 130, 162, 356, 366, 377, 396, 417, 988, 1035, 1044], "shiqiao": [0, 398, 1035, 1036], "shirsat": 1050, "shiva": [1050, 1051], "shivam": [1043, 1044, 1045], "shivamgargsya": [1042, 1046, 1048], "shivan": 1040, "shivram": 1043, "shiyu": 1044, "shleifer": [1041, 1042], "shmelkov": 1040, "shoaib": 1050, "shoemak": 1046, "shogo": [1050, 1051], "shooter23": [1047, 1048], "shop": 1017, "short": [3, 88, 119, 126, 188, 257, 301, 350, 379, 387, 413, 417, 421, 988, 989, 995, 1016, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "short_nam": 15, "shortcom": 988, "shortcut": [387, 402, 419], "shorten": [379, 1007, 1048], "shorten_param": 260, "shorter": [2, 155, 246, 391, 409, 414, 450, 457, 563, 697, 994, 998, 1028, 1046], "shortest": [37, 384, 388, 688, 946, 989, 1048], "shortest_path": 1048, "shorthand": [56, 393, 410, 467, 561, 562, 865, 866, 1038], "shortlog": 383, "shortname_slic": 15, "shota": 1041, "should": [2, 3, 4, 6, 7, 11, 13, 15, 23, 25, 29, 35, 51, 107, 109, 112, 115, 119, 122, 125, 146, 161, 167, 173, 176, 177, 181, 197, 199, 215, 226, 231, 232, 233, 236, 253, 259, 262, 265, 266, 268, 273, 278, 283, 306, 307, 312, 327, 338, 345, 351, 361, 365, 366, 367, 374, 377, 378, 379, 381, 383, 384, 386, 387, 388, 392, 393, 396, 399, 402, 404, 406, 408, 409, 411, 413, 414, 416, 417, 418, 419, 420, 421, 423, 426, 432, 437, 440, 442, 443, 444, 445, 447, 449, 450, 452, 454, 457, 458, 459, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 496, 503, 508, 509, 516, 521, 523, 524, 527, 532, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 620, 627, 628, 629, 631, 632, 633, 635, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 689, 690, 691, 692, 693, 694, 695, 696, 701, 709, 727, 728, 742, 766, 771, 774, 778, 779, 780, 781, 782, 785, 788, 789, 792, 799, 801, 802, 807, 808, 809, 810, 817, 818, 819, 820, 822, 826, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 883, 884, 885, 887, 891, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 928, 930, 933, 941, 949, 953, 958, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 981, 982, 986, 987, 988, 989, 992, 993, 995, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1013, 1016, 1017, 1024, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "shouldn": [244, 249, 379], "show": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 157, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 355, 356, 357, 358, 359, 366, 367, 379, 385, 391, 392, 396, 399, 405, 406, 408, 411, 413, 414, 415, 416, 418, 419, 438, 502, 559, 593, 594, 631, 632, 697, 698, 700, 701, 702, 713, 806, 823, 846, 864, 916, 917, 918, 981, 984, 986, 987, 989, 991, 992, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1007, 1013, 1023, 1024, 1028, 1037, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "show_top10": 374, "show_vers": [365, 377, 379, 387, 396, 1043], "show_weight": 917, "show_with_diff": 96, "showcas": [107, 110, 115, 119, 122, 123, 125, 381], "shown": [23, 46, 55, 87, 107, 111, 115, 122, 158, 166, 168, 181, 187, 195, 215, 223, 226, 231, 236, 245, 259, 262, 265, 268, 278, 288, 300, 301, 305, 306, 307, 325, 345, 350, 351, 379, 384, 394, 406, 409, 410, 413, 414, 415, 417, 419, 438, 460, 632, 698, 700, 701, 702, 713, 800, 814, 916, 918, 987, 988, 989, 992, 995, 1002, 1006, 1007, 1008, 1028, 1039, 1044, 1045, 1046, 1049], "shown_imag": 219, "shrankhla": 1050, "shreesha": [1051, 1052], "shreya": 1045, "shrink": [24, 80, 93, 123, 168, 181, 192, 195, 201, 218, 247, 305, 345, 414, 559, 560, 676, 678, 851, 861, 862, 906, 907, 908, 909, 910, 995, 1007, 1026], "shrink_threshold": [294, 851, 995, 1035, 1047], "shrinkag": [31, 75, 77, 80, 81, 100, 124, 164, 294, 422, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 539, 543, 549, 561, 562, 800, 988, 1002, 1014, 1015, 1030, 1035, 1039, 1040, 1042], "shrinkage_": [76, 77, 473, 475], "shrinkage_coeffici": 480, "shrunk": [76, 100, 305, 312, 321, 422, 473, 475, 476, 479, 480, 481, 549, 885, 986, 1006, 1029, 1030], "shrunk_cov": [422, 479, 481], "shrunk_cov_scor": 100, "shrunk_covari": [411, 1052], "shrunkcovari": [76, 100, 411, 469, 470, 473, 474, 475], "shrunken": [851, 1035], "shu": [1036, 1039, 1043], "shuangchi": [1049, 1050], "shubernetskii": 1037, "shubh": 1046, "shubhal": 1052, "shubham": [1042, 1045], "shubhanshu": 1047, "shubhraneel": 1049, "shuckle16": 1041, "shuffl": [8, 11, 13, 18, 19, 22, 25, 30, 46, 58, 59, 93, 115, 116, 118, 125, 130, 162, 181, 205, 206, 211, 226, 260, 264, 265, 272, 283, 312, 325, 326, 327, 328, 340, 350, 351, 361, 374, 388, 393, 403, 469, 474, 488, 489, 491, 492, 495, 497, 503, 511, 512, 513, 514, 515, 519, 522, 524, 531, 537, 539, 540, 546, 547, 553, 554, 555, 556, 564, 565, 567, 568, 602, 605, 607, 658, 659, 666, 667, 668, 672, 674, 676, 677, 678, 687, 800, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 861, 862, 885, 904, 905, 906, 909, 940, 941, 961, 963, 987, 988, 993, 1000, 1006, 1007, 1023, 1028, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "shuffle_param": 345, "shuffled_arrai": 966, "shufflesplit": [254, 261, 345, 413, 802, 808, 810, 820, 830, 1023, 1035, 1036, 1038, 1040, 1041], "shuhei": 1048, "shuhua": 1047, "shutil": [52, 70, 410], "shuttl": 351, "shuzh": 1045, "shwartz": [666, 667, 988, 1006], "shwed": 1043, "shyam": 1048, "si": 68, "siam": [409, 413, 452, 460, 462, 535, 541], "siang": 1038, "siavash": 1048, "siavrez": 1049, "sibsp": [169, 320], "sid": 1042, "siddharth": [1042, 1046], "side": [2, 25, 57, 122, 190, 201, 215, 220, 229, 253, 305, 342, 350, 361, 374, 391, 406, 410, 413, 414, 417, 426, 432, 515, 988, 989, 992, 994, 1007, 1044], "sidhpura": 1050, "siebert": 1043, "sierra": [531, 537], "sievert": 1045, "siftikha": 1043, "sig": 94, "sigh": 350, "sigkdd": [373, 374, 511, 676, 885, 1002, 1004], "sigma": [12, 44, 45, 52, 78, 100, 122, 257, 259, 405, 411, 414, 416, 614, 649, 986, 988, 990, 994, 997, 1027], "sigma2": [534, 541], "sigma_": [411, 644, 645, 1048, 1052], "sigma_0": [152, 153, 158, 419, 614], "sigma_0_bound": [158, 614], "sigma_i": [994, 1002], "sigma_k": [414, 986], "sigmod": [409, 450, 457, 850, 998], "sigmoid": [22, 23, 24, 25, 371, 416, 437, 452, 535, 561, 620, 639, 643, 765, 774, 777, 861, 862, 906, 907, 908, 909, 910, 997, 1007, 1030, 1048, 1052], "sigmoid_kernel": [765, 990], "sign": [38, 77, 84, 94, 97, 111, 181, 248, 299, 345, 379, 409, 414, 417, 544, 582, 589, 606, 635, 636, 658, 659, 666, 668, 674, 675, 676, 677, 735, 742, 904, 908, 939, 941, 957, 988, 992, 997, 1002, 1006, 1007, 1027, 1035, 1039, 1044, 1048, 1050, 1053], "signal": [12, 79, 93, 94, 95, 102, 120, 122, 149, 154, 155, 164, 166, 175, 176, 182, 183, 185, 186, 191, 192, 196, 198, 216, 249, 318, 407, 409, 411, 417, 418, 419, 422, 475, 503, 521, 526, 531, 534, 537, 541, 545, 546, 625, 644, 645, 646, 647, 652, 653, 663, 664, 672, 684, 685, 686, 785, 821, 830, 878, 988, 992, 1009, 1014, 1017, 1022, 1029, 1030], "signatur": [233, 350, 351, 374, 488, 489, 557, 558, 564, 565, 594, 610, 611, 659, 673, 675, 711, 742, 806, 823, 826, 828, 831, 877, 952, 981, 1042, 1048, 1052], "signif": [4, 984, 1024], "signifi": [381, 409, 581, 811, 997], "signific": [2, 53, 115, 122, 141, 142, 144, 164, 201, 215, 251, 259, 276, 281, 283, 309, 350, 361, 373, 374, 391, 409, 412, 413, 416, 504, 532, 534, 549, 550, 627, 658, 659, 666, 667, 668, 676, 677, 678, 819, 829, 904, 906, 907, 908, 909, 910, 991, 992, 995, 1014, 1035, 1037, 1038, 1039, 1043], "significantli": [2, 22, 23, 25, 35, 76, 77, 109, 115, 120, 122, 125, 146, 167, 168, 169, 197, 201, 205, 213, 215, 253, 259, 283, 316, 317, 351, 352, 361, 366, 383, 409, 414, 416, 417, 422, 469, 474, 479, 480, 538, 540, 547, 558, 565, 646, 647, 652, 653, 660, 661, 662, 663, 684, 692, 844, 845, 984, 988, 989, 995, 1000, 1007, 1035, 1037, 1038, 1042, 1043, 1048, 1049, 1050], "sijaranamu": 1041, "silenc": 233, "silent": [233, 417, 581, 860, 1002, 1040, 1041, 1043, 1044, 1048, 1049], "silhouett": [18, 34, 35, 36, 47, 55, 56, 63, 66, 164, 351, 379, 447, 512, 792, 793, 1014, 1035, 1039], "silhouette_avg": 58, "silhouette_sampl": [58, 793, 1039, 1041, 1043, 1051], "silhouette_scor": [36, 47, 56, 58, 351, 379, 409, 1035, 1039, 1041, 1043, 1045, 1049], "silicon": 377, "silk": 1049, "sillanp\u00e4\u00e4": 1035, "silva": [406, 688, 989, 1046, 1048, 1053], "silverman": [849, 1050], "silvermann": 415, "silverthorn": 1035, "silvestrin": 1052, "sim": [414, 1026], "sim4n6": 1050, "simd": [393, 1050], "similar": [2, 3, 5, 10, 15, 18, 23, 24, 32, 35, 47, 49, 55, 58, 73, 84, 93, 97, 109, 122, 145, 149, 156, 166, 167, 168, 169, 181, 197, 199, 211, 218, 220, 221, 222, 226, 232, 233, 249, 253, 256, 259, 262, 265, 266, 267, 278, 281, 283, 305, 318, 337, 342, 345, 351, 352, 361, 365, 371, 373, 375, 378, 379, 381, 384, 385, 387, 388, 391, 393, 402, 405, 406, 409, 412, 413, 414, 416, 417, 418, 419, 420, 440, 443, 444, 450, 452, 454, 455, 503, 508, 509, 536, 582, 589, 590, 591, 610, 677, 692, 695, 703, 705, 715, 719, 725, 728, 729, 731, 734, 738, 740, 755, 760, 761, 786, 792, 793, 796, 797, 798, 826, 831, 876, 897, 900, 904, 905, 906, 907, 925, 981, 984, 985, 987, 988, 989, 991, 993, 995, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1019, 1027, 1030, 1035, 1039, 1040, 1041, 1043, 1047, 1048], "similarli": [2, 10, 35, 53, 90, 126, 168, 170, 181, 186, 197, 227, 236, 253, 259, 299, 305, 321, 338, 361, 366, 375, 377, 381, 384, 393, 402, 404, 405, 412, 413, 417, 729, 730, 738, 783, 784, 787, 822, 987, 989, 990, 992, 999, 1006, 1007, 1009, 1019, 1023, 1043, 1049, 1051], "simmon": 1017, "simon": [988, 1017, 1038, 1039, 1048, 1049, 1050, 1051], "simona": [1046, 1047, 1048], "simonamaggio": [1046, 1047, 1048], "simoncw": 1045, "simonpl": 1040, "simpl": [2, 25, 53, 69, 73, 76, 83, 84, 93, 115, 120, 156, 164, 168, 181, 198, 214, 239, 260, 278, 284, 287, 296, 297, 310, 319, 334, 350, 352, 356, 361, 377, 379, 381, 382, 383, 384, 386, 391, 392, 393, 394, 399, 405, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 423, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 514, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 786, 788, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 984, 986, 987, 988, 989, 991, 992, 995, 1002, 1004, 1006, 1008, 1013, 1014, 1017, 1019, 1028, 1032, 1035], "simplefilt": 402, "simpleimput": [69, 130, 161, 162, 169, 228, 238, 240, 316, 319, 361, 393, 627, 628, 629, 982, 1002, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "simpleimputersimpleimput": [69, 130, 169, 228, 238, 316, 319], "simplepipelin": 233, "simpler": [215, 338, 365, 378, 409, 414, 988, 993, 1026, 1040], "simplest": [51, 413, 989, 1026, 1027], "simplex": [24, 670, 797, 879], "simpli": [37, 84, 128, 149, 157, 222, 234, 236, 268, 296, 317, 318, 365, 374, 379, 381, 384, 391, 393, 411, 412, 413, 414, 416, 417, 485, 695, 762, 765, 871, 943, 984, 992, 993, 994, 995, 1006, 1020, 1028, 1042, 1043, 1044], "simplic": [2, 12, 29, 181, 342, 350, 352, 393, 415, 995, 996, 997, 1007], "simplif": [375, 378, 384, 1035, 1041], "simplifi": [2, 69, 185, 233, 338, 378, 380, 384, 409, 412, 515, 562, 863, 864, 992, 994, 1002], "simplist": [197, 417], "simul": [77, 95, 125, 167, 191, 234, 259, 1017], "simultan": [18, 53, 94, 263, 267, 321, 345, 358, 371, 405, 409, 981, 992, 993, 1008, 1017, 1042], "sin": [2, 12, 17, 37, 94, 110, 121, 122, 127, 129, 141, 149, 155, 156, 158, 176, 177, 181, 191, 198, 203, 220, 232, 249, 295, 306, 316, 322, 344, 357, 358, 419, 516, 615, 699, 764, 1027], "sin_transform": 2, "sina": [306, 1048], "sinayev": 1037, "sinc": [0, 2, 3, 9, 11, 23, 32, 35, 47, 51, 53, 64, 68, 69, 70, 94, 119, 136, 143, 146, 149, 154, 167, 168, 170, 173, 179, 197, 199, 201, 214, 227, 231, 232, 233, 245, 248, 253, 255, 259, 261, 262, 268, 269, 273, 278, 281, 283, 285, 286, 311, 318, 319, 330, 335, 338, 345, 350, 351, 352, 361, 366, 374, 377, 379, 380, 381, 383, 384, 387, 391, 392, 393, 396, 399, 402, 406, 409, 410, 411, 412, 413, 414, 416, 417, 419, 426, 437, 441, 445, 446, 450, 453, 456, 469, 482, 483, 484, 485, 496, 527, 536, 537, 538, 539, 540, 546, 547, 549, 550, 551, 552, 553, 555, 557, 559, 561, 562, 563, 564, 567, 569, 588, 589, 591, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 632, 633, 638, 651, 655, 658, 659, 666, 668, 673, 674, 675, 676, 677, 679, 692, 707, 709, 735, 742, 750, 751, 782, 789, 799, 800, 803, 804, 814, 822, 825, 826, 827, 828, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 862, 864, 869, 894, 895, 899, 900, 904, 906, 909, 912, 914, 941, 949, 981, 984, 985, 986, 988, 989, 993, 994, 995, 996, 998, 1000, 1002, 1006, 1007, 1008, 1017, 1019, 1028, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "sinclert": 1043, "sind": 417, "sine": [2, 149, 154, 155, 164, 191, 203, 242, 243, 244, 245, 246, 247, 248, 250, 357, 375, 615, 797, 798, 991, 1008, 1014], "singer": [278, 666, 667, 735, 988, 992, 1006, 1007], "singh": [1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "singl": [8, 32, 37, 46, 50, 51, 53, 56, 59, 60, 70, 95, 108, 109, 110, 118, 119, 129, 134, 146, 149, 155, 161, 164, 168, 170, 173, 181, 197, 199, 201, 237, 239, 248, 253, 255, 268, 278, 301, 319, 321, 338, 350, 351, 352, 356, 358, 361, 365, 366, 373, 374, 379, 384, 386, 387, 388, 391, 392, 393, 399, 406, 407, 408, 410, 412, 413, 414, 416, 417, 418, 434, 437, 440, 441, 445, 446, 447, 449, 454, 464, 466, 467, 493, 494, 496, 506, 509, 534, 553, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 582, 592, 599, 600, 602, 606, 627, 632, 634, 643, 666, 667, 673, 676, 677, 678, 690, 692, 694, 710, 711, 721, 722, 723, 724, 725, 736, 737, 738, 741, 774, 785, 797, 798, 800, 803, 804, 814, 821, 822, 826, 827, 829, 830, 833, 841, 844, 845, 849, 861, 862, 863, 873, 874, 877, 878, 879, 884, 885, 899, 900, 912, 913, 914, 915, 920, 956, 960, 979, 981, 987, 988, 989, 992, 993, 995, 997, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1014, 1017, 1019, 1026, 1028, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "single_prior": 158, "single_source_shortest_path_length": 388, "singleton": [366, 808, 927, 1048, 1051], "singular": [93, 388, 405, 409, 412, 451, 453, 482, 483, 484, 485, 521, 524, 534, 538, 540, 541, 544, 547, 549, 550, 657, 672, 673, 674, 687, 941, 988, 989, 991, 1029, 1030, 1041, 1042, 1053], "singular_": 657, "singular_values_": [534, 541, 544, 1042], "sinha": [1043, 1052], "sinhrk": [1039, 1040], "sink": [641, 984], "sinoisoid": 122, "sinusoid": [94, 110, 122, 181, 232, 645, 985, 1027], "sio": 402, "siola": [1050, 1051], "sip\u0151cz": [1045, 1046, 1047, 1051], "siqi": 1049, "siqueira": 1045, "sir": 376, "sister": 1012, "site": [377, 379, 382, 387, 396, 416, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 1017, 1043], "situat": [23, 42, 55, 70, 166, 167, 203, 226, 262, 379, 387, 402, 411, 413, 414, 416, 468, 528, 534, 582, 877, 880, 892, 902, 986, 988, 994, 995, 1005, 1008, 1043], "situp": 376, "sivamani": 1045, "sivaprasad": [1038, 1039], "six": [146, 198, 219, 309, 376, 1044], "sixteenth": 1004, "sixth": 374, "size": [1, 2, 3, 4, 6, 9, 10, 11, 12, 22, 25, 29, 31, 35, 37, 38, 40, 42, 44, 45, 50, 52, 53, 55, 56, 58, 59, 60, 64, 65, 71, 76, 77, 78, 79, 80, 83, 84, 90, 93, 94, 95, 96, 97, 100, 102, 112, 121, 122, 125, 126, 127, 142, 149, 151, 152, 155, 156, 164, 166, 168, 169, 176, 177, 178, 179, 183, 187, 192, 195, 198, 199, 200, 203, 210, 211, 218, 223, 226, 229, 230, 231, 232, 233, 235, 236, 245, 252, 255, 257, 259, 261, 262, 264, 265, 266, 278, 289, 290, 291, 299, 302, 306, 307, 308, 309, 312, 316, 319, 321, 322, 326, 330, 334, 336, 337, 338, 345, 347, 350, 351, 352, 355, 365, 366, 367, 374, 375, 379, 384, 388, 391, 392, 393, 396, 399, 405, 406, 407, 409, 411, 413, 414, 417, 419, 420, 422, 444, 445, 446, 448, 449, 450, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 493, 494, 495, 515, 527, 534, 536, 538, 540, 547, 557, 558, 559, 560, 561, 562, 564, 565, 583, 587, 588, 594, 632, 633, 643, 657, 666, 667, 679, 683, 692, 695, 705, 719, 738, 740, 743, 781, 793, 802, 805, 806, 810, 817, 820, 821, 822, 825, 828, 830, 839, 840, 841, 843, 846, 847, 848, 849, 850, 852, 854, 855, 856, 861, 862, 879, 881, 893, 898, 902, 906, 907, 908, 909, 910, 912, 913, 914, 915, 918, 940, 944, 945, 955, 956, 958, 961, 967, 982, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 999, 1002, 1004, 1006, 1007, 1008, 1016, 1017, 1022, 1024, 1026, 1027, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051], "size_cluster_i": 58, "size_mb": 350, "sizeabl": [817, 820], "skaft": 1049, "skeleton": [1028, 1038], "sketch": [173, 367, 371, 388, 407, 639, 640, 641, 957, 1030, 1047], "skew": [7, 122, 200, 230, 236, 305, 321, 371, 413, 639, 640, 641, 642, 880, 892, 988, 1002, 1030, 1038, 1042, 1051], "skewed": [642, 1042], "skewedchi2sampl": [638, 639, 640, 641, 984, 1042, 1049, 1050], "skf": [245, 413, 819], "skfold": 328, "skforecast": 1012, "skill": 992, "skimag": [44, 45, 373, 1027], "skip": [366, 379, 381, 388, 404, 417, 468, 568, 646, 647, 652, 660, 661, 662, 671, 681, 902, 1028, 1039, 1042, 1045, 1047, 1049, 1051], "skip_complet": 627, "skip_comput": 1045, "skip_parameter_valid": [468, 902, 1051], "skipper": [1038, 1040, 1041], "skiptestwarn": 381, "skl2onnx": 402, "sklear": 380, "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 365, 366, 367, 368, 372, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 395, 396, 399, 402, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1054], "sklearn2pmml": 1012, "sklearn_api": 0, "sklearn_assume_finit": 365, "sklearn_cache_": 315, "sklearn_enable_debug_cython_direct": 380, "sklearn_fail_no_openmp": 377, "sklearn_graph_cache_": 285, "sklearn_is_fit": [106, 107, 1014], "sklearn_panda": 1012, "sklearn_run_float32_test": 379, "sklearn_site_joblib": 1043, "sklearn_tut_workspac": 1028, "sklearn_warning_as_error": 366, "sklearn_xarrai": 1012, "sklearnex": 396, "skop": [1012, 1030], "skorch": 1012, "sktime": [11, 1012], "sl": 197, "slack": 1006, "slai": 350, "slama": [1045, 1047], "slep": [379, 393, 1010], "slep000": 394, "slep009": [1046, 1048, 1049], "slep010": [381, 1046], "slep011": 1013, "slep018": [240, 381, 1050], "slep020": 394, "slice": [2, 11, 15, 118, 125, 206, 220, 223, 231, 291, 294, 318, 319, 334, 374, 380, 381, 388, 410, 464, 467, 493, 494, 508, 546, 639, 774, 778, 781, 920, 944, 945, 963, 1047, 1049, 1053], "slice_": [493, 494, 1050], "sliceabl": 947, "slide": [260, 644, 988, 1011, 1012], "slight": [119, 202, 317, 402, 416, 449, 1045], "slightli": [2, 23, 25, 62, 80, 112, 115, 119, 122, 126, 130, 146, 149, 150, 151, 169, 176, 197, 215, 221, 223, 233, 236, 267, 273, 283, 315, 335, 352, 378, 379, 391, 406, 409, 416, 417, 419, 421, 446, 588, 589, 591, 638, 658, 803, 804, 904, 906, 909, 940, 941, 981, 988, 1002, 1006, 1007, 1044, 1048, 1049, 1051, 1053], "slishak": 1049, "sloan": 0, "slogdet": 939, "slope": [168, 195, 199, 214, 409, 491, 723, 748, 990, 992], "sloppili": 417, "sloth": [9, 296, 374, 498], "slow": [285, 305, 350, 365, 373, 377, 379, 414, 417, 447, 699, 878, 879, 883, 906, 909, 941, 989, 995, 1013, 1027, 1042], "slower": [70, 96, 115, 119, 161, 232, 268, 352, 393, 416, 417, 418, 446, 451, 453, 538, 540, 547, 555, 556, 557, 558, 563, 564, 565, 566, 588, 589, 591, 631, 632, 633, 643, 659, 672, 674, 687, 692, 704, 832, 836, 837, 985, 989, 990, 991, 993, 995, 1008, 1028, 1039, 1046], "slowest": [119, 940, 941], "slowli": [391, 393, 544, 941], "slug": 68, "smacof": [690, 1050], "small": [3, 9, 11, 19, 25, 37, 46, 47, 51, 53, 68, 76, 80, 84, 89, 98, 110, 112, 119, 121, 122, 154, 156, 167, 168, 177, 183, 187, 188, 198, 201, 203, 212, 214, 215, 245, 253, 259, 266, 271, 273, 285, 296, 300, 302, 305, 307, 309, 317, 325, 330, 338, 343, 345, 350, 351, 367, 372, 374, 376, 379, 382, 388, 393, 402, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 422, 441, 443, 445, 446, 447, 449, 458, 459, 463, 475, 496, 498, 538, 540, 541, 547, 555, 556, 557, 561, 562, 564, 582, 589, 590, 602, 607, 608, 650, 654, 655, 656, 658, 659, 679, 682, 683, 746, 803, 804, 818, 829, 832, 861, 862, 869, 897, 906, 909, 941, 981, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1008, 1013, 1017, 1026, 1027, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "smaller": [6, 22, 38, 44, 53, 80, 109, 125, 146, 154, 155, 158, 161, 182, 186, 188, 201, 230, 278, 289, 290, 299, 305, 338, 345, 351, 379, 405, 407, 409, 411, 413, 414, 416, 418, 439, 440, 446, 450, 454, 456, 514, 534, 535, 557, 558, 559, 560, 561, 562, 564, 565, 593, 610, 619, 633, 646, 647, 649, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 672, 674, 682, 683, 692, 709, 797, 803, 804, 850, 853, 877, 878, 896, 897, 904, 912, 913, 914, 915, 941, 986, 988, 989, 991, 992, 993, 995, 996, 998, 1002, 1004, 1006, 1007, 1008, 1013, 1028, 1043, 1048, 1052], "smallest": [78, 79, 197, 283, 355, 374, 409, 411, 418, 527, 541, 630, 654, 655, 656, 682, 683, 690, 694, 695, 800, 803, 804, 814, 819, 874, 921, 1008, 1048], "smallest_coef": [80, 527], "smari": [1044, 1045, 1046], "smart": [233, 443, 459, 460, 590], "smartphon": 1017, "smedbergm": 1041, "smedemark": 1045, "smile": [73, 374, 1049], "sminchisescu": [642, 984], "smirnov": 1047, "smith": [1041, 1042, 1043, 1044, 1045, 1047], "sml": [860, 997], "smo": [904, 905], "smola": [414, 417, 535, 870, 1002, 1007], "smolskii": 1050, "smooth": [2, 44, 45, 52, 146, 154, 190, 198, 213, 311, 338, 376, 394, 409, 415, 416, 419, 448, 449, 537, 538, 539, 546, 557, 558, 559, 560, 564, 565, 566, 590, 591, 619, 622, 676, 839, 840, 841, 843, 881, 885, 893, 912, 913, 914, 915, 988, 994, 1002, 1006, 1007, 1008, 1028], "smooth_idf": [417, 590, 591], "smoothened_coin": [44, 45], "smoother": [2, 3, 122, 168, 301, 415], "smoothli": 373, "smt": 1051, "smtp": [374, 492], "smujjiga": 1045, "sn": [35, 110, 125, 166, 167, 176, 181, 248, 259], "snake": [319, 321, 582, 885, 1002], "snapshot": [402, 559, 560, 1013], "sne": [10, 164, 217, 218, 219, 220, 222, 224, 283, 514, 525, 692, 1014, 1029, 1030], "snippet": [107, 361, 379, 384, 387, 391, 404, 416, 417, 418, 982, 1002, 1016, 1048], "snowhit": 1046, "snr": 52, "snuderl": 1039, "sny": 10, "snyder": [692, 989], "so": [2, 7, 10, 11, 15, 25, 40, 46, 53, 54, 59, 63, 79, 115, 118, 119, 120, 121, 125, 129, 149, 154, 167, 169, 173, 177, 197, 198, 226, 233, 236, 253, 259, 278, 283, 289, 290, 293, 300, 301, 306, 311, 312, 316, 328, 338, 350, 352, 359, 361, 365, 366, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 393, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 422, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 496, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 705, 708, 716, 726, 756, 778, 788, 797, 798, 799, 800, 803, 804, 806, 807, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 941, 958, 967, 981, 982, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1002, 1004, 1005, 1006, 1007, 1012, 1013, 1017, 1026, 1027, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052], "soar": 1050, "sobkevich": 1047, "sobolev": 1039, "soc": [17, 374, 1028], "socastro": [1045, 1051], "socg2006": 447, "social": [167, 394, 409, 1010, 1017], "societi": [146, 376, 409, 411, 469, 474, 541, 627, 880, 892, 988, 1006], "sodhani": 1041, "soft": [102, 131, 132, 379, 393, 569, 570, 900, 908, 1006, 1017, 1040], "softmax": [416, 561, 658, 659, 988, 995, 996], "softw": 988, "softwar": [0, 146, 365, 376, 379, 387, 391, 393, 402, 417, 627, 635, 658, 982, 1017], "soil_typ": 236, "sokalmichen": [450, 457, 699, 778, 779, 780, 995], "sokalmichenerdist": 699, "sokalsneath": [450, 457, 699, 778, 779, 780, 995], "sokalsneathdist": 699, "sok\u00f3\u0142": 1052, "sole": [65, 391, 409], "soledad": 1047, "soler": [0, 398], "solid": [9, 29, 31, 121, 152, 209, 210, 226, 236, 296, 307, 1017], "solido": 1010, "solntz": 350, "solosil": 1048, "solut": [44, 176, 181, 186, 188, 202, 211, 226, 232, 318, 338, 377, 381, 393, 402, 405, 408, 409, 411, 413, 414, 417, 418, 449, 451, 453, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 646, 648, 650, 652, 654, 655, 656, 658, 660, 662, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 797, 798, 814, 853, 861, 862, 985, 986, 988, 989, 991, 996, 998, 1006, 1007, 1011, 1017, 1023, 1026, 1028, 1035, 1038, 1048, 1049, 1050], "solutu": 1043, "solutusimmensu": 1043, "solv": [3, 4, 64, 149, 186, 231, 259, 281, 378, 379, 380, 381, 384, 391, 409, 411, 413, 414, 419, 447, 453, 462, 478, 531, 537, 538, 539, 543, 545, 546, 547, 548, 635, 637, 646, 652, 654, 655, 664, 665, 670, 672, 674, 677, 685, 686, 687, 834, 904, 905, 908, 941, 983, 986, 988, 989, 992, 993, 1006, 1007, 1008, 1011, 1012, 1017, 1021, 1024, 1028, 1041, 1045, 1048], "solvabl": 409, "solver": [13, 28, 31, 32, 44, 64, 164, 175, 186, 188, 189, 190, 197, 199, 205, 212, 213, 215, 216, 299, 300, 301, 302, 312, 322, 350, 385, 391, 393, 396, 404, 409, 421, 452, 462, 471, 472, 478, 502, 533, 535, 540, 541, 544, 547, 549, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 674, 676, 680, 681, 684, 687, 688, 689, 691, 693, 695, 788, 814, 830, 835, 838, 861, 862, 906, 907, 908, 909, 910, 986, 989, 992, 993, 996, 1006, 1007, 1012, 1014, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "solver_": [672, 674], "solver_opt": 670, "somani": 1047, "some": [0, 1, 2, 3, 6, 7, 11, 17, 22, 23, 25, 35, 42, 48, 51, 53, 54, 56, 60, 65, 69, 72, 76, 78, 79, 84, 93, 110, 111, 115, 119, 122, 123, 125, 126, 127, 130, 131, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 170, 173, 176, 178, 180, 181, 185, 186, 187, 191, 192, 197, 198, 201, 205, 206, 211, 214, 215, 218, 220, 226, 230, 233, 236, 244, 245, 246, 252, 253, 254, 259, 260, 261, 262, 265, 267, 273, 278, 281, 286, 289, 294, 300, 301, 305, 310, 316, 317, 318, 319, 320, 321, 322, 334, 335, 337, 338, 345, 347, 350, 351, 352, 359, 361, 365, 366, 367, 372, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 399, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 437, 443, 444, 447, 449, 451, 453, 459, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 499, 508, 509, 515, 523, 524, 533, 534, 536, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 581, 582, 588, 590, 591, 594, 606, 609, 610, 611, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 689, 690, 692, 693, 697, 698, 700, 701, 702, 707, 708, 715, 720, 726, 727, 738, 739, 740, 746, 754, 756, 757, 763, 782, 784, 787, 788, 789, 794, 797, 799, 801, 802, 807, 809, 818, 819, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 924, 925, 949, 960, 981, 982, 984, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1017, 1019, 1024, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "some_funct": [379, 931], "some_integ": 413, "some_iter": 379, "some_param": 379, "somebodi": 394, "someestim": 378, "somehow": 168, "someon": [379, 383, 393, 1035], "someth": [167, 219, 278, 350, 379, 381, 382, 383, 387, 417, 992, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "sometim": [70, 130, 166, 253, 259, 301, 351, 361, 366, 367, 379, 381, 383, 385, 392, 393, 409, 411, 414, 416, 417, 449, 534, 535, 538, 540, 541, 869, 870, 871, 919, 987, 988, 989, 992, 997, 1002, 1003, 1007, 1019, 1027, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "somewhat": [345, 361, 367, 379, 381, 414, 416, 906, 909, 988, 1007, 1008], "somewher": [385, 992, 1028], "somya": 1043, "son": [376, 982], "song": 989, "soni": [10, 1045, 1047], "sonni": 1040, "sonniv": [1050, 1051], "sonoiya": 1045, "sonoma": 311, "soon": [79, 393, 1026], "sooner": 1052, "sophist": [982, 994], "sorbaro": 1040, "sorensen": 414, "soriano": 1044, "sornarajah": 1040, "sorri": 1043, "sorro": 1044, "sorski": [1049, 1050], "sort": [2, 6, 8, 10, 17, 18, 22, 58, 68, 71, 107, 112, 119, 122, 129, 146, 154, 176, 181, 197, 198, 215, 235, 259, 260, 263, 274, 295, 344, 350, 357, 358, 379, 383, 387, 388, 393, 413, 416, 417, 419, 534, 541, 555, 566, 581, 594, 610, 617, 697, 712, 718, 729, 730, 738, 754, 783, 784, 787, 789, 800, 827, 839, 840, 841, 842, 843, 844, 845, 852, 854, 855, 856, 859, 869, 875, 877, 878, 881, 883, 885, 893, 906, 909, 941, 946, 988, 995, 998, 1002, 1017, 1028, 1035, 1039, 1045, 1046, 1047, 1049, 1050, 1053], "sort_graph_by_row_valu": [388, 1050], "sort_index": 278, "sort_result": [844, 845, 852, 854, 855, 856, 1047], "sort_valu": [69, 169, 170, 240, 248, 259, 270, 311, 312], "sort_whats_new": 383, "sorted_idx": [123, 315], "sorted_importances_idx": 169, "sortofamudkip": [1050, 1051], "sought": 781, "soumirai": 1045, "sound": [146, 361], "sounder": 1041, "sourav": [1042, 1045], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 373, 376, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 396, 402, 405, 410, 414, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 989, 1002, 1008, 1012, 1014, 1017, 1027, 1028, 1045, 1049, 1053], "south": [9, 125, 167, 296, 374, 415], "south_y": 167, "sp": [2, 167, 322, 982, 1027], "sp_version": [199, 670], "space": [2, 6, 8, 17, 29, 44, 46, 51, 55, 56, 58, 59, 61, 63, 68, 69, 72, 84, 93, 95, 101, 103, 114, 118, 122, 128, 143, 146, 149, 155, 173, 181, 198, 218, 219, 220, 222, 230, 231, 232, 236, 237, 244, 249, 267, 270, 271, 283, 292, 293, 307, 317, 342, 350, 351, 352, 359, 361, 365, 371, 374, 375, 376, 379, 386, 391, 392, 393, 405, 407, 409, 412, 414, 415, 416, 417, 419, 443, 447, 448, 449, 452, 462, 464, 465, 466, 467, 482, 483, 484, 488, 498, 532, 534, 535, 538, 539, 540, 541, 543, 544, 549, 573, 582, 588, 589, 591, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 638, 640, 641, 642, 643, 688, 689, 690, 692, 693, 694, 696, 699, 800, 803, 804, 806, 814, 823, 834, 844, 845, 852, 853, 854, 855, 864, 869, 870, 876, 881, 896, 897, 898, 917, 945, 984, 985, 986, 987, 988, 990, 992, 993, 995, 996, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1019, 1026, 1028, 1029, 1030, 1035, 1036, 1038, 1043, 1044, 1045, 1049, 1050, 1051], "spacek": 1040, "spain": 311, "spam": [581, 709, 741, 839, 992, 994, 1017], "span": [11, 53, 76, 122, 231, 253, 256, 374, 409, 417, 549, 636, 800, 803, 992, 1027], "spanish": 1012, "spannbauer": 1047, "sparciti": 351, "spare": [373, 674, 675], "spark": [374, 1013], "sparrai": 1052, "spars": [4, 5, 10, 12, 15, 17, 28, 32, 37, 38, 52, 53, 55, 68, 75, 76, 77, 79, 81, 92, 94, 104, 114, 128, 164, 166, 175, 176, 182, 185, 186, 189, 191, 192, 196, 213, 216, 230, 232, 252, 253, 260, 266, 283, 302, 316, 320, 329, 349, 352, 353, 359, 365, 371, 373, 374, 375, 379, 381, 382, 383, 384, 391, 392, 393, 402, 409, 410, 416, 417, 419, 420, 424, 431, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 487, 488, 489, 496, 497, 503, 508, 523, 524, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 585, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 608, 609, 629, 630, 631, 633, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 712, 713, 714, 729, 730, 731, 734, 738, 739, 740, 754, 755, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 792, 793, 796, 799, 800, 803, 804, 814, 821, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 873, 874, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 920, 922, 923, 924, 925, 930, 938, 941, 942, 945, 946, 947, 955, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 982, 985, 988, 989, 990, 992, 993, 995, 1005, 1007, 1008, 1013, 1014, 1015, 1026, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "sparse_cg": [350, 672, 674, 687, 988, 1036, 1042, 1044, 1045, 1049, 1051], "sparse_coef_": [646, 652, 660, 662, 1035], "sparse_encod": [542, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 682, 683, 684, 685, 686, 1035, 1042, 1043, 1045, 1049], "sparse_encode_parallel": 1035, "sparse_format": [527, 1052], "sparse_func": [1041, 1047], "sparse_input_": 871, "sparse_lasso": 183, "sparse_output": [2, 119, 240, 311, 319, 322, 566, 871, 875, 877, 883, 888, 1002, 1050, 1051], "sparse_output_": [464, 551], "sparse_symmetric_arrai": 978, "sparse_threshold": [168, 464, 467, 1043], "sparsearrai": 1046, "sparsecod": [102, 414, 531, 537, 540, 548, 1042, 1043, 1045, 1047, 1049], "sparsecodingmixin": 1035, "sparsefunc": [388, 407, 1048], "sparsefuncs_fast": [388, 407], "sparsepca": [93, 531, 533, 534, 535, 537, 539, 540, 541, 542, 545, 546, 1035, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1053], "sparser": [53, 176, 188, 414, 471, 478, 539, 543, 988, 995, 1006], "sparserandomproject": [219, 230, 896, 1004, 1036, 1041, 1049, 1051, 1052], "sparsetool": 1042, "sparsifi": [5, 181, 365, 658, 659, 666, 667, 668, 676, 677, 678, 904, 976, 1037], "sparsiti": [12, 28, 43, 80, 99, 164, 175, 181, 182, 190, 208, 212, 213, 216, 232, 345, 351, 365, 393, 411, 414, 416, 418, 501, 502, 527, 531, 537, 538, 539, 540, 543, 545, 546, 547, 646, 652, 657, 658, 676, 678, 721, 723, 724, 873, 879, 884, 889, 985, 988, 995, 1002, 1014, 1022, 1027, 1037], "sparsity_en_lr": 188, "sparsity_l1_lr": 188, "sparsity_l2_lr": 188, "sparsity_ratio": 365, "spatial": [45, 47, 53, 170, 181, 214, 301, 374, 393, 409, 420, 444, 446, 450, 452, 457, 679, 692, 760, 763, 778, 779, 780, 781, 792, 793, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 988, 995, 1002, 1037, 1041, 1048, 1051], "spawn": [365, 391, 800, 814, 825, 826, 827, 1046], "speak": [351, 365, 379, 1006], "spearman": [170, 635, 636, 983], "spearmanr": 170, "spec": [1050, 1051], "speci": [1, 14, 88, 164, 236, 284, 297, 350, 372, 415, 498, 706, 789, 849, 908, 919, 992, 998, 1014, 1030, 1035], "special": [121, 167, 187, 215, 278, 293, 311, 338, 373, 375, 381, 385, 391, 393, 409, 412, 414, 464, 467, 553, 555, 559, 825, 916, 981, 986, 988, 990, 991, 992, 993, 995, 1008, 1042, 1045, 1047, 1049], "special_charact": [916, 1008], "species_nam": [9, 296], "specif": [2, 9, 10, 18, 25, 32, 42, 53, 60, 63, 68, 70, 115, 125, 130, 154, 157, 167, 168, 173, 201, 215, 253, 254, 259, 278, 305, 315, 316, 320, 342, 350, 351, 352, 361, 365, 366, 374, 379, 382, 384, 385, 387, 391, 393, 396, 402, 404, 407, 409, 410, 413, 414, 416, 417, 418, 419, 433, 496, 503, 534, 551, 557, 564, 567, 568, 569, 570, 574, 588, 591, 593, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 640, 643, 646, 647, 652, 658, 672, 687, 697, 699, 712, 713, 746, 800, 801, 802, 807, 808, 809, 814, 827, 840, 933, 935, 936, 955, 968, 969, 970, 986, 988, 989, 991, 992, 994, 995, 997, 999, 1000, 1002, 1006, 1008, 1009, 1010, 1011, 1016, 1028, 1035, 1039, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "specifi": [2, 18, 25, 53, 93, 119, 120, 125, 150, 153, 155, 156, 157, 186, 198, 205, 243, 253, 267, 365, 366, 373, 377, 379, 381, 388, 392, 393, 399, 402, 406, 409, 410, 413, 414, 416, 418, 419, 421, 423, 429, 437, 441, 445, 450, 452, 463, 464, 467, 469, 470, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 515, 527, 531, 533, 537, 538, 540, 541, 546, 547, 552, 557, 559, 560, 561, 562, 564, 567, 568, 583, 584, 593, 594, 597, 602, 610, 611, 620, 631, 632, 633, 638, 643, 646, 647, 648, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 665, 668, 669, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 687, 691, 698, 700, 702, 709, 711, 729, 730, 738, 742, 754, 771, 779, 780, 783, 784, 787, 800, 802, 803, 804, 806, 807, 809, 813, 814, 817, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 839, 840, 842, 843, 844, 845, 849, 854, 877, 878, 879, 882, 883, 885, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 936, 943, 976, 982, 988, 989, 991, 992, 995, 999, 1000, 1002, 1005, 1006, 1007, 1023, 1027, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "spector": 413, "spectral": [12, 16, 20, 34, 42, 44, 47, 53, 66, 68, 164, 219, 220, 327, 329, 350, 351, 352, 379, 417, 449, 451, 452, 453, 462, 469, 470, 471, 472, 473, 474, 475, 476, 488, 511, 513, 591, 688, 689, 690, 691, 692, 695, 719, 795, 995, 1005, 1014, 1029, 1030, 1035, 1036], "spectral_clust": [44, 64, 1043, 1045, 1047, 1048, 1049, 1050, 1052], "spectral_embed": [393, 989, 1036, 1039, 1041, 1043, 1045, 1048, 1049, 1050, 1052], "spectralbiclust": [405, 453, 1037, 1041, 1042, 1046], "spectralclust": [42, 319, 409, 440, 995, 1035, 1036, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "spectralcoclust": [17, 19, 405, 451, 1037, 1042, 1046], "spectralembed": [50, 218, 219, 220, 688, 689, 690, 692, 989, 1036, 1041, 1045, 1049, 1050, 1052], "spectrum": [71, 524, 544, 695, 941, 1017, 1024, 1043], "speech": [417, 992], "speed": [44, 45, 55, 68, 96, 107, 115, 162, 168, 183, 186, 190, 236, 283, 317, 326, 350, 352, 367, 368, 379, 382, 388, 391, 393, 404, 406, 409, 414, 416, 417, 420, 443, 444, 447, 448, 449, 450, 452, 457, 459, 460, 461, 462, 531, 532, 610, 627, 632, 633, 634, 639, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 684, 692, 797, 798, 806, 828, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 879, 941, 981, 984, 989, 991, 993, 1006, 1017, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "speedi": 365, "speedup": [322, 365, 414, 416, 650, 654, 657, 1035, 1036, 1037, 1038, 1050], "speer": 1037, "spell": 417, "spend": 417, "spent": [283, 311, 380, 385, 828, 1050], "sphere": [109, 164, 217, 218, 221, 222, 223, 224, 283, 351, 415, 519, 589, 688, 689, 690, 691, 692, 764, 927, 986, 990, 995, 1014], "sphere_data": 220, "sphereclust": 1012, "spheric": [32, 55, 83, 126, 220, 245, 247, 248, 296, 375, 764, 797, 798, 988, 991, 995, 1012], "sphinx": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 366, 379, 383, 393, 396, 401, 1028, 1035, 1042], "sphinxext": [379, 396, 401], "sphx_glr_auto_examples_applications_svm_gui": 1035, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1035, "sphx_glr_auto_examples_svm_plot_svm_nonlinear": 1007, "spidlen": [692, 989], "spie": [146, 376], "spielman": 1045, "spike": 168, "spikebh": 1049, "spikhalskii": 1040, "spiki": 2, "spin": 387, "spine": [5, 13, 32, 208, 305], "spirit": 414, "spite": 994, "spline": [164, 175, 176, 216, 274, 288, 516, 517, 518, 672, 865, 879, 883, 1012, 1014, 1048], "spline_": 2, "splines_df": 2, "splinetransform": [2, 198, 236, 318, 879, 1002, 1048, 1050, 1051], "split": [2, 3, 4, 9, 11, 13, 15, 22, 24, 25, 29, 30, 68, 98, 109, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 136, 142, 146, 166, 167, 170, 181, 192, 193, 197, 200, 205, 215, 227, 236, 244, 245, 252, 253, 254, 257, 259, 264, 266, 269, 273, 278, 286, 292, 299, 301, 306, 307, 312, 319, 321, 328, 338, 350, 352, 359, 374, 379, 386, 392, 393, 396, 399, 406, 408, 409, 414, 416, 417, 418, 437, 442, 443, 472, 473, 479, 480, 497, 531, 537, 539, 542, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 591, 594, 602, 647, 651, 653, 655, 661, 663, 665, 673, 675, 695, 704, 705, 717, 731, 737, 757, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 844, 845, 861, 862, 885, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 963, 981, 984, 988, 989, 995, 998, 999, 1000, 1002, 1006, 1008, 1013, 1019, 1023, 1024, 1026, 1027, 1028, 1030, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "split0_test_precis": [800, 814], "split0_test_scor": [800, 814, 1041], "split0_train_scor": [800, 814, 1041], "split1_test_scor": [800, 814], "split1_train_scor": [800, 814], "split2_test_scor": 800, "split_cod": 414, "split_sign": [531, 537, 542], "splitter": [2, 233, 321, 322, 393, 399, 413, 437, 472, 564, 565, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 802, 803, 804, 805, 806, 814, 815, 816, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 912, 913, 914, 915, 1008, 1013, 1041, 1042, 1043, 1044, 1051, 1052, 1053, 1054], "splot": [244, 249], "splt": 198, "sply88": 1049, "spmatrix": 1052, "spolski": 417, "sport": [17, 374], "spot": [51, 228, 409], "spotifi": 1010, "spottabl": 385, "spread": [2, 38, 220, 260, 305, 325, 326, 327, 330, 345, 365, 379, 409, 452, 462, 515, 881, 893, 901, 992], "spring": [2, 11, 168], "springer": [112, 113, 124, 258, 406, 409, 413, 414, 416, 520, 535, 559, 560, 690, 694, 696, 705, 720, 726, 740, 741, 756, 797, 912, 913, 989, 992, 993, 999, 1008], "sprint": [378, 379, 1010, 1035], "spuriou": [338, 387, 1002, 1048, 1049, 1050], "spy": 191, "sq": 769, "sqeuclidean": [36, 450, 457, 778, 779, 780], "sqft": 236, "sql": 373, "sqr": 38, "sqrt": [10, 78, 79, 80, 96, 102, 113, 136, 170, 176, 178, 221, 223, 238, 243, 244, 245, 248, 249, 259, 343, 345, 409, 416, 417, 419, 463, 469, 470, 471, 472, 473, 474, 475, 476, 538, 540, 547, 557, 558, 559, 560, 564, 565, 619, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 699, 731, 763, 764, 769, 884, 897, 912, 913, 914, 915, 984, 988, 989, 992, 994, 1004, 1049], "squar": [2, 3, 11, 59, 69, 77, 78, 79, 82, 83, 85, 94, 95, 103, 112, 123, 125, 126, 146, 149, 154, 164, 166, 167, 175, 176, 178, 179, 181, 186, 187, 193, 194, 197, 199, 202, 207, 214, 215, 216, 229, 230, 232, 246, 274, 309, 317, 318, 320, 335, 350, 371, 376, 379, 385, 388, 393, 409, 411, 412, 414, 415, 416, 420, 421, 432, 440, 442, 443, 444, 446, 447, 449, 450, 454, 457, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 531, 537, 539, 541, 543, 545, 546, 547, 549, 552, 554, 556, 558, 559, 560, 562, 565, 568, 570, 590, 591, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 611, 615, 622, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 690, 692, 694, 696, 709, 721, 722, 723, 724, 750, 751, 758, 759, 763, 769, 770, 785, 790, 791, 830, 837, 838, 846, 847, 850, 851, 852, 854, 855, 862, 865, 884, 904, 905, 907, 909, 910, 911, 913, 915, 939, 965, 978, 983, 985, 986, 995, 996, 1000, 1006, 1008, 1014, 1015, 1026, 1027, 1030, 1035, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "square_dist": 1047, "squared_epsilon_insensit": [667, 676, 678, 905, 988, 1041], "squared_error": [5, 11, 102, 122, 123, 318, 416, 558, 559, 560, 562, 565, 671, 676, 678, 693, 913, 915, 1006, 1008, 1048, 1051, 1052], "squared_hing": [204, 345, 666, 676, 904, 911, 988, 1007], "squared_loss": [391, 1048], "squareform": 170, "squash": [236, 383, 419, 531, 537, 542, 548], "squeez": [73, 155, 156, 236, 283, 305, 1027], "sr": 1017, "sr_color": 222, "sr_err": 222, "sr_lle": 222, "sr_point": 222, "sr_tsne": 222, "srajan": 1043, "sre": 1050, "srebro": 1006, "srep30750": 409, "sri": [671, 988, 1042, 1043], "sridharan": 1040, "sriharsha": [1043, 1044], "srikantan": 988, "srimukh": 1047, "srinath": [1049, 1050], "srinivasan": [1043, 1046], "sripada": 1047, "srivastava": [1038, 1050], "srivatsan": [1041, 1042, 1045], "srvanrel": 1041, "ss": 413, "sse": 443, "sseg": 1040, "ssrn": [197, 215], "sss": 820, "ssvm": 391, "st": [45, 65, 259, 320, 1038, 1041, 1043], "st30": 330, "st50": 330, "st_pipelin": 329, "sta4273": 644, "stabil": [35, 113, 120, 167, 219, 264, 305, 345, 351, 393, 405, 446, 650, 654, 670, 842, 861, 862, 880, 892, 940, 982, 988, 991, 1002, 1013, 1019, 1035, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "stabilis": 176, "stabl": [2, 25, 158, 167, 191, 195, 199, 283, 316, 345, 351, 377, 379, 383, 385, 388, 393, 396, 413, 417, 421, 471, 472, 478, 533, 541, 655, 672, 674, 687, 692, 724, 752, 940, 941, 988, 994, 995, 1002, 1013, 1031, 1035, 1036, 1041, 1046, 1048, 1052], "stack": [73, 108, 110, 119, 133, 134, 161, 162, 164, 197, 228, 236, 255, 288, 359, 378, 387, 391, 393, 407, 415, 464, 466, 467, 496, 515, 562, 565, 567, 568, 612, 627, 628, 630, 653, 673, 701, 825, 827, 865, 869, 877, 878, 884, 966, 982, 1012, 1013, 1014, 1015, 1016, 1030, 1035, 1038, 1042, 1043, 1044, 1045, 1046], "stack_method": [416, 567], "stack_method_": [416, 567, 568], "stacking_regressor": 130, "stackingclassifi": [315, 361, 393, 399, 416, 568, 982, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "stackingregressor": [130, 315, 393, 399, 416, 567, 982, 1045, 1046, 1047, 1048, 1049, 1052, 1054], "stackingregressorinot": 130, "stackoverflow": [384, 387, 391], "stade": 1039, "stage": [0, 5, 24, 70, 109, 114, 120, 123, 253, 377, 383, 393, 404, 409, 416, 448, 553, 554, 559, 560, 561, 562, 588, 589, 591, 602, 989, 1002, 1011, 1043, 1047], "staged_decision_funct": [553, 559, 561], "staged_predict": [109, 120, 123, 416, 553, 554, 559, 560, 561, 562, 1035, 1047], "staged_predict_proba": [121, 124, 553, 559, 561, 1035], "staged_scor": [553, 554], "stagewis": 109, "stagg": 1048, "stai": [2, 11, 24, 35, 102, 167, 351, 378, 379, 383, 393, 394, 997, 1016, 1041], "stairstep": 266, "stalei": [1044, 1045], "stall": [378, 382], "stallei": 1047, "stan": [842, 1052], "stand": [262, 352, 383, 391, 414, 531, 537, 545, 546, 596, 609, 678, 705, 717, 736, 737, 757, 786, 788, 795, 991, 992, 998], "standalon": [385, 658, 904], "standard": [9, 10, 11, 18, 24, 30, 32, 53, 59, 68, 69, 71, 78, 79, 84, 94, 109, 112, 114, 115, 116, 117, 118, 126, 130, 146, 149, 154, 156, 158, 167, 176, 182, 186, 195, 197, 206, 218, 219, 220, 231, 236, 248, 253, 254, 257, 258, 259, 260, 262, 305, 310, 336, 350, 365, 366, 371, 372, 373, 375, 376, 377, 379, 381, 382, 384, 385, 388, 391, 393, 396, 402, 404, 409, 411, 412, 413, 417, 419, 446, 468, 472, 488, 496, 501, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 524, 525, 530, 532, 535, 541, 552, 590, 594, 611, 634, 644, 645, 672, 673, 674, 675, 676, 678, 687, 689, 693, 788, 806, 821, 823, 841, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 868, 873, 874, 877, 880, 881, 882, 884, 892, 893, 894, 895, 902, 904, 905, 924, 981, 984, 988, 989, 992, 994, 995, 996, 998, 1006, 1007, 1013, 1017, 1019, 1024, 1026, 1027, 1028, 1030, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1053], "standard_coef_": 1046, "standard_intercept_": 1046, "standard_norm": [361, 687], "standard_scal": 238, "standard_t": 95, "standardscal": [4, 8, 29, 42, 47, 53, 56, 60, 69, 71, 84, 103, 130, 146, 167, 176, 185, 186, 188, 197, 213, 215, 227, 228, 236, 237, 238, 240, 253, 256, 266, 273, 286, 291, 292, 299, 307, 310, 315, 316, 318, 319, 320, 322, 338, 341, 361, 367, 379, 381, 384, 388, 392, 410, 413, 430, 466, 467, 567, 676, 678, 864, 865, 868, 881, 895, 904, 905, 906, 907, 909, 910, 982, 989, 996, 1002, 1006, 1007, 1009, 1024, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "standardscalerifittedstandardscal": 240, "standardscalerstandardscal": [69, 130, 167, 227, 228, 237, 238, 240, 253, 266, 273, 316, 319], "standpoint": 48, "stanford": [146, 376, 649, 682, 683, 839, 842, 843, 897, 990], "stanislav": [1050, 1051], "stanlei": [1049, 1050, 1051], "stap": 1043, "stapl": 1039, "star": [32, 90, 133, 379], "stareh": 1046, "start": [0, 2, 5, 8, 10, 11, 18, 24, 51, 56, 62, 65, 72, 84, 96, 114, 120, 122, 143, 146, 154, 156, 168, 173, 177, 178, 186, 197, 198, 199, 205, 215, 218, 222, 231, 233, 246, 253, 259, 267, 283, 319, 321, 326, 350, 359, 361, 365, 366, 367, 368, 372, 379, 380, 381, 383, 384, 385, 391, 393, 396, 405, 409, 413, 414, 418, 419, 440, 442, 450, 454, 456, 538, 610, 617, 632, 645, 653, 659, 666, 667, 668, 676, 677, 678, 690, 694, 781, 782, 789, 797, 798, 800, 803, 804, 814, 846, 847, 848, 850, 852, 860, 946, 976, 981, 988, 991, 996, 997, 1006, 1013, 1017, 1019, 1027, 1028, 1038, 1040, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "start_": 6, "start_bodi": 6, "start_d": 6, "start_idx": [10, 221], "start_reut": 6, "start_tim": [5, 8, 17, 116, 117, 120, 130, 149, 186, 219], "start_titl": 6, "start_top": 6, "startswith": [11, 68, 219, 296], "startup": 1017, "stat": [4, 6, 8, 68, 78, 146, 149, 170, 256, 259, 267, 271, 288, 317, 325, 326, 376, 388, 392, 411, 474, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 682, 683, 804, 812, 814, 912, 913, 943, 981, 988, 1002, 1024, 1042, 1044, 1048], "state": [51, 55, 68, 70, 78, 125, 199, 230, 238, 244, 253, 265, 317, 361, 366, 367, 379, 381, 385, 387, 391, 393, 394, 407, 408, 416, 417, 422, 440, 443, 447, 449, 454, 459, 475, 544, 589, 679, 803, 804, 812, 814, 816, 844, 845, 851, 899, 900, 927, 981, 982, 988, 994, 997, 1004, 1012, 1013, 1017, 1037, 1039, 1041, 1043, 1045, 1048, 1051], "state_to_print": 380, "stateless": [68, 351, 367, 381, 393, 417, 582, 583, 589, 638, 867, 868, 876, 1002, 1051], "statement": [167, 381, 384, 387, 391, 393, 414, 1010, 1028], "static": [379, 381, 385, 387, 646, 647, 652, 653, 660, 661, 662, 663], "station": 154, "stationari": [153, 419, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "statist": [6, 11, 79, 109, 112, 113, 124, 136, 137, 138, 141, 145, 146, 164, 166, 167, 168, 169, 181, 185, 201, 251, 253, 256, 258, 261, 268, 276, 278, 281, 305, 311, 317, 361, 368, 372, 374, 376, 379, 385, 393, 406, 408, 409, 410, 411, 413, 414, 416, 418, 434, 469, 474, 493, 494, 516, 517, 518, 520, 522, 541, 553, 559, 560, 562, 604, 605, 606, 609, 627, 630, 634, 635, 644, 649, 656, 690, 694, 696, 710, 716, 721, 723, 724, 731, 743, 788, 800, 816, 834, 861, 862, 880, 881, 882, 884, 889, 892, 893, 895, 909, 912, 913, 967, 981, 982, 986, 988, 989, 991, 992, 993, 994, 999, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1020, 1026, 1027, 1040, 1043, 1046, 1047, 1049, 1050, 1053], "statistician": [393, 884], "statistics_": 630, "statisticyearmonthhourweekdaytempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64f64f64": 11, "statlearnspars": [721, 723, 724], "statlib": 374, "statnikov": 992, "statsmodel": [988, 1012], "statu": [107, 158, 322, 373, 383, 396, 496, 844, 845, 1053], "statweb": [649, 682, 683], "staub": 1041, "staubda": 1038, "std": [2, 9, 10, 11, 35, 44, 48, 52, 59, 64, 77, 79, 80, 94, 95, 96, 116, 118, 119, 125, 130, 158, 161, 162, 167, 177, 182, 206, 230, 257, 258, 259, 261, 262, 264, 267, 269, 273, 274, 311, 328, 341, 351, 361, 393, 409, 413, 416, 515, 606, 609, 829, 884, 895, 1002, 1023, 1027, 1043, 1047], "std_": [263, 1040], "std_auc": 269, "std_display_styl": [232, 261, 806, 823], "std_error": 136, "std_fit_tim": [115, 285, 800, 814], "std_i": 167, "std_precis": 257, "std_predict": 156, "std_predictions_gpr": 149, "std_recal": 257, "std_score": [351, 1048], "std_score_tim": [115, 260, 800, 814], "std_test_precis": 257, "std_test_recal": 257, "std_test_scor": [69, 71, 115, 136, 145, 258, 259, 260, 267, 285, 472, 594, 800, 814, 1041, 1048], "std_time": 1041, "std_tpr": 269, "std_train_scor": [800, 814, 1041], "std_y_pr": 154, "stderr": [10, 833], "stdin": [387, 1028], "stdout": [6, 93, 205, 833, 853, 861, 862], "stds_california": 162, "stds_diabet": 162, "steadi": [899, 900], "steelblu": [94, 95, 132], "steep": [150, 168, 268, 269, 409, 413, 419, 450, 456], "stef": [627, 982], "stefan": [1038, 1039, 1043, 1045], "stefani": [0, 1048, 1050, 1051, 1052, 1053, 1054], "stefanini": 1049, "stefano": 1037, "stehl": [1049, 1050], "stein": 1041, "steinbach": [409, 1050, 1052], "steinfurt": [1045, 1047], "steingold": [1042, 1043], "steinlei": [409, 705], "steinley2004": 705, "stella": [409, 452, 462], "stellalin7": 1050, "stem": [112, 120, 169, 196, 249, 413, 417, 984, 994], "step": [18, 24, 31, 40, 52, 53, 56, 65, 68, 69, 70, 71, 72, 79, 84, 96, 100, 109, 114, 118, 119, 120, 130, 143, 144, 145, 151, 154, 167, 169, 197, 205, 215, 227, 228, 231, 237, 240, 249, 253, 257, 260, 266, 268, 273, 283, 285, 286, 291, 299, 302, 307, 310, 311, 316, 319, 330, 334, 338, 351, 352, 355, 361, 365, 368, 374, 377, 378, 379, 381, 383, 384, 387, 391, 393, 402, 405, 406, 409, 411, 412, 414, 416, 417, 418, 442, 447, 449, 536, 537, 538, 539, 546, 563, 588, 589, 591, 593, 594, 597, 606, 627, 644, 648, 666, 667, 669, 676, 678, 679, 680, 694, 700, 797, 798, 800, 803, 804, 814, 835, 836, 837, 838, 860, 861, 862, 864, 865, 867, 904, 905, 906, 907, 909, 910, 940, 941, 963, 967, 982, 988, 991, 996, 997, 1002, 1006, 1008, 1009, 1012, 1016, 1024, 1028, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053], "stephan": [708, 1038, 1044, 1045, 1047], "stephani": 1046, "stephen": [1017, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "stepwis": [125, 635, 654, 655, 656, 682, 683, 988], "stern": [788, 992], "steve": [1037, 1039, 1043, 1048, 1050], "steven": [1037, 1038, 1040, 1042, 1043, 1048, 1050, 1051], "steward": 1042, "stewart": [1040, 1045, 1048, 1050], "stick": [7, 797, 991], "stijn": 1042, "stikhin": 1045, "still": [2, 11, 25, 30, 42, 51, 53, 55, 60, 80, 88, 97, 117, 122, 125, 130, 149, 155, 166, 167, 169, 170, 176, 181, 197, 199, 215, 231, 262, 268, 305, 317, 318, 321, 350, 351, 361, 367, 373, 378, 379, 381, 383, 384, 385, 387, 391, 393, 409, 413, 416, 417, 420, 440, 444, 454, 474, 496, 627, 632, 635, 637, 658, 659, 717, 756, 778, 781, 792, 793, 803, 804, 817, 820, 882, 884, 904, 922, 981, 982, 986, 988, 991, 992, 995, 998, 1000, 1007, 1008, 1011, 1013, 1016, 1017, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "stine": [1043, 1044], "stochast": [5, 56, 120, 121, 124, 137, 164, 173, 175, 185, 186, 204, 216, 220, 222, 226, 231, 289, 291, 292, 298, 301, 303, 318, 336, 337, 409, 414, 416, 462, 488, 496, 502, 503, 504, 514, 522, 536, 544, 559, 560, 571, 604, 627, 631, 639, 658, 659, 668, 672, 674, 676, 677, 678, 679, 687, 688, 689, 690, 692, 830, 853, 860, 861, 862, 865, 874, 908, 940, 941, 966, 981, 995, 996, 998, 1014, 1015, 1029, 1030, 1035, 1036, 1039, 1040, 1042, 1044, 1046], "stochastic_gradi": [1037, 1038, 1044], "stock": [1, 14, 44, 50, 64, 164, 218, 219, 222, 409, 411, 454, 472, 689, 1014, 1022], "stogbauer": [607, 608], "stojanov": [1049, 1050], "stolbunov": 1040, "stone": [379, 912, 913, 1008], "stop": [2, 5, 10, 15, 42, 60, 108, 109, 115, 123, 134, 154, 156, 164, 168, 175, 185, 186, 199, 204, 216, 309, 316, 344, 379, 381, 387, 388, 393, 409, 414, 416, 418, 440, 441, 443, 445, 447, 449, 452, 454, 462, 463, 471, 472, 478, 482, 483, 484, 490, 496, 508, 509, 532, 536, 537, 538, 539, 540, 543, 545, 546, 547, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 571, 588, 589, 591, 602, 617, 627, 644, 645, 646, 648, 649, 652, 656, 658, 659, 666, 667, 668, 669, 671, 676, 677, 678, 680, 691, 692, 695, 714, 750, 797, 798, 830, 861, 862, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 946, 966, 981, 988, 996, 997, 1007, 1008, 1013, 1014, 1015, 1017, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "stop_n_inli": [671, 988], "stop_prob": 671, "stop_scor": [671, 988], "stop_word": [13, 17, 350, 351, 417, 588, 589, 591], "stop_words_": 1053, "stopiter": 1047, "stopword": [489, 1028], "storag": [0, 352, 393, 658, 659, 666, 667, 668, 676, 677, 678, 904, 995, 1007, 1038, 1043], "storch": 1044, "store": [30, 51, 52, 68, 70, 79, 88, 143, 157, 173, 183, 186, 201, 219, 227, 237, 248, 253, 264, 268, 325, 352, 359, 365, 373, 374, 379, 381, 386, 387, 388, 391, 393, 402, 404, 410, 412, 414, 416, 417, 419, 420, 438, 440, 444, 446, 450, 457, 464, 467, 469, 470, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 508, 534, 535, 541, 549, 550, 555, 556, 557, 558, 563, 564, 565, 566, 569, 570, 589, 610, 611, 627, 631, 632, 635, 649, 650, 654, 660, 661, 662, 663, 666, 667, 673, 675, 676, 677, 678, 688, 689, 690, 692, 697, 698, 700, 701, 702, 781, 797, 798, 800, 806, 814, 822, 823, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 875, 882, 884, 885, 899, 900, 901, 924, 925, 949, 950, 963, 966, 978, 982, 984, 988, 995, 1004, 1007, 1008, 1012, 1019, 1028, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "store_cent": [446, 1052], "store_covari": [32, 549, 550, 1040, 1042], "store_cv_result": [253, 673, 675, 822, 1053], "store_cv_valu": [673, 675, 1043, 1046, 1053], "store_precis": [31, 77, 469, 470, 473, 474, 475, 476], "stori": [166, 259, 278, 374, 991], "stork": 986, "stott": 1043, "stoyanov": [1043, 1044], "str": [6, 8, 11, 56, 58, 101, 103, 118, 144, 215, 236, 259, 271, 283, 293, 336, 350, 373, 374, 388, 417, 420, 421, 425, 430, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 457, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 696, 697, 698, 699, 700, 702, 707, 709, 711, 713, 727, 729, 730, 732, 733, 738, 742, 771, 774, 778, 779, 780, 781, 782, 783, 784, 787, 789, 792, 793, 799, 800, 801, 802, 803, 804, 806, 807, 809, 811, 812, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 928, 931, 933, 937, 948, 949, 950, 952, 955, 976, 977, 980, 1050], "strai": 997, "straight": [98, 187, 193, 195, 256, 342, 365], "straightforward": [306, 378, 408, 414, 1017], "straka": 1047, "strateg": 394, "strategi": [2, 11, 50, 52, 56, 59, 69, 119, 124, 125, 130, 137, 143, 145, 161, 162, 164, 169, 181, 186, 197, 205, 215, 228, 236, 238, 251, 253, 258, 260, 262, 263, 264, 266, 267, 268, 269, 271, 273, 276, 281, 298, 301, 303, 304, 306, 307, 311, 312, 313, 315, 316, 319, 352, 364, 381, 385, 392, 393, 402, 408, 413, 416, 417, 418, 421, 437, 438, 439, 447, 452, 462, 472, 502, 504, 512, 514, 522, 533, 538, 551, 552, 561, 562, 564, 565, 567, 568, 571, 588, 589, 591, 592, 594, 602, 627, 628, 630, 634, 645, 647, 651, 653, 655, 661, 663, 665, 673, 675, 691, 695, 704, 711, 713, 732, 755, 757, 795, 800, 803, 804, 806, 814, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 861, 862, 869, 874, 885, 899, 904, 906, 909, 912, 913, 914, 915, 963, 981, 982, 991, 993, 994, 995, 996, 998, 1000, 1002, 1006, 1007, 1008, 1012, 1014, 1023, 1028, 1030, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "stratif": [801, 802, 808, 809, 818, 819, 820, 963, 1044], "stratifi": [3, 98, 116, 126, 142, 169, 212, 227, 236, 240, 253, 254, 259, 262, 268, 286, 291, 292, 315, 381, 393, 408, 551, 559, 567, 568, 602, 659, 666, 668, 676, 799, 800, 803, 804, 806, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 853, 861, 963, 992, 995, 1023, 1040, 1041, 1042, 1044, 1045, 1048], "stratifiedgroupkfold": [254, 1048], "stratifiedkfold": [145, 245, 254, 265, 269, 328, 413, 437, 567, 568, 594, 602, 659, 673, 800, 801, 803, 804, 805, 806, 808, 810, 814, 818, 820, 823, 824, 825, 826, 827, 828, 829, 831, 885, 1023, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1048], "stratifiedshufflesplit": [254, 338, 413, 1023, 1035, 1036, 1041, 1042, 1048], "stream": [6, 409, 414, 417, 462, 589, 873, 874, 884, 984, 1012, 1043, 1046], "stream_reuters_docu": 6, "streamhandl": 1046, "streamlin": 988, "street": [130, 146, 376], "strehl": 409, "strength": [10, 130, 156, 197, 201, 260, 315, 365, 412, 416, 446, 567, 568, 643, 648, 649, 652, 658, 659, 669, 672, 673, 674, 675, 676, 678, 680, 687, 783, 861, 862, 904, 905, 909, 910, 981, 988, 995, 998, 1006, 1007], "stress": [690, 694, 989, 1050], "stress_": 690, "stretch": [222, 247], "stretched_gaussian": 247, "strickland": 1041, "strict": [361, 377, 393, 404, 414, 503, 535, 588, 589, 591, 988, 1035, 1044, 1047, 1053], "stricter": 161, "strictli": [25, 197, 215, 233, 305, 321, 351, 384, 393, 406, 412, 414, 417, 508, 509, 535, 541, 544, 561, 562, 588, 591, 642, 670, 671, 673, 675, 695, 700, 739, 766, 800, 803, 804, 810, 814, 827, 853, 880, 892, 896, 897, 899, 900, 904, 905, 909, 910, 939, 981, 983, 988, 992, 1002, 1006, 1036, 1046, 1051], "striebel": [1041, 1042], "strife": 989, "strike": [120, 168, 201], "string": [6, 69, 118, 157, 215, 228, 253, 263, 318, 352, 365, 373, 374, 379, 380, 381, 385, 393, 410, 413, 416, 417, 418, 420, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 489, 490, 496, 505, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 617, 620, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 699, 709, 711, 719, 732, 762, 765, 771, 774, 778, 779, 780, 781, 792, 793, 797, 798, 800, 803, 804, 806, 814, 822, 823, 827, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 922, 924, 925, 932, 933, 934, 956, 960, 976, 977, 981, 982, 992, 1005, 1007, 1019, 1026, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "strip": [13, 215, 351, 365, 373, 374, 496], "strip_acc": [588, 589, 591], "strip_accents_unicod": 1045, "stripe": 308, "stripplot": 167, "strive": [378, 394, 1017], "strong": [2, 11, 52, 149, 164, 166, 167, 175, 177, 190, 194, 195, 201, 202, 203, 216, 232, 281, 312, 345, 406, 407, 414, 416, 524, 649, 672, 985, 986, 988, 989, 991, 999, 1007, 1014, 1026], "stronger": [260, 643, 652, 658, 659, 672, 673, 674, 675, 676, 678, 687], "strongest": [15, 190], "strongli": [23, 25, 80, 84, 96, 119, 123, 167, 179, 212, 233, 265, 350, 379, 395, 396, 406, 416, 658, 736, 795, 988, 989, 1030, 1044, 1051], "stroudsburg": [901, 1005], "strubel": 1048, "struct": [377, 393, 1038], "structur": [0, 1, 6, 7, 11, 12, 13, 14, 15, 18, 19, 34, 38, 39, 40, 41, 42, 44, 50, 51, 52, 53, 54, 60, 64, 66, 80, 103, 107, 126, 148, 159, 164, 218, 219, 222, 228, 233, 249, 254, 265, 285, 288, 310, 316, 319, 324, 331, 338, 342, 354, 355, 356, 360, 365, 374, 376, 379, 381, 384, 391, 393, 394, 396, 405, 409, 411, 412, 413, 414, 416, 417, 418, 419, 441, 442, 445, 446, 450, 451, 452, 453, 454, 457, 462, 463, 472, 496, 503, 504, 508, 511, 513, 514, 521, 530, 535, 541, 544, 563, 610, 611, 612, 616, 617, 618, 689, 696, 709, 713, 830, 852, 857, 884, 896, 897, 900, 912, 913, 914, 915, 918, 940, 941, 963, 966, 989, 991, 992, 995, 997, 998, 1002, 1005, 1008, 1012, 1013, 1014, 1022, 1027, 1028, 1035, 1036, 1038, 1039, 1041, 1045], "struggl": [378, 394, 409], "stuck": [59, 692, 989], "student": [0, 95, 259, 989, 1013, 1017], "studi": [2, 25, 58, 122, 197, 215, 262, 265, 266, 273, 350, 374, 376, 413, 418, 696, 708, 758, 759, 829, 990, 992, 1006, 1019], "studio": [377, 1017], "study_135": 373, "study_14": 373, "study_34": 373, "study_98": 373, "study_99": 373, "stuff": 1017, "stump": [111, 416, 559, 1046], "stupp": [1041, 1042], "stupperich": 1047, "sturla": 1037, "style": [22, 24, 79, 122, 186, 205, 215, 263, 379, 386, 409, 417, 443, 447, 459, 700, 806, 823, 924, 925, 937, 1035, 1038, 1049], "st\u00e9fan": 380, "st\u00e9phan": 1045, "st\u00e9phane": [1044, 1045, 1049, 1050], "su": [721, 723, 724], "sub": [6, 35, 46, 51, 53, 55, 58, 68, 102, 233, 235, 243, 317, 325, 326, 335, 338, 346, 374, 379, 381, 385, 393, 410, 416, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 594, 597, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 863, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 950, 988, 992, 1006, 1028, 1045, 1049, 1051, 1052], "sub_sampl": 536, "subclass": [107, 381, 419, 574, 958, 1040, 1043, 1048, 1052], "subclust": [409, 442], "subcluster_centers_": [40, 442], "subcluster_labels_": 442, "subcompon": [93, 414], "subdirectori": 379, "subdivid": [374, 419], "subestim": 381, "subestimator__c": 381, "subestimator__class_weight": 381, "subestimator__du": 381, "subestimator__fit_intercept": 381, "subestimator__intercept_sc": 381, "subestimator__l1_ratio": 381, "subestimator__max_it": 381, "subestimator__multi_class": 381, "subestimator__n_job": 381, "subestimator__penalti": 381, "subestimator__random_st": 381, "subestimator__solv": 381, "subestimator__tol": 381, "subestimator__verbos": 381, "subestimator__warm_start": 381, "subexpress": 11, "subfold": [377, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 1048], "subgraph": 405, "subhash": 1049, "subhodeep": [1035, 1036, 1037], "subi": [1044, 1045, 1050], "subject": [68, 127, 249, 262, 350, 374, 379, 381, 383, 391, 393, 394, 406, 407, 411, 413, 414, 495, 658, 659, 685, 822, 867, 962, 983, 988, 1007, 1011, 1028, 1044, 1045, 1048, 1050], "subject_body_extractor": 68, "subject_body_transform": 68, "subjectbodi": 68, "subjectbodyextractor": 68, "sublinear": [414, 590, 591], "sublinear_tf": [350, 414, 417, 590, 591], "submatric": 405, "submatrix": [405, 424, 451, 453], "submit": [376, 377, 378, 381, 382, 383, 384, 387, 393, 394], "submitt": 378, "submodel": 413, "submodul": [379, 383, 385, 407, 984, 990, 1035], "subobject": [423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "suboptim": [413, 700, 702, 782, 789, 995, 1043, 1051], "subpackag": [379, 383, 1010, 1039, 1044], "subplot": [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 28, 29, 30, 32, 37, 41, 42, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 64, 71, 73, 77, 78, 79, 80, 83, 84, 88, 89, 90, 93, 94, 95, 96, 98, 102, 103, 109, 111, 112, 114, 115, 116, 118, 119, 120, 123, 125, 127, 128, 130, 131, 132, 141, 151, 153, 158, 161, 162, 167, 168, 170, 173, 177, 180, 188, 189, 191, 192, 195, 196, 197, 198, 199, 201, 205, 210, 211, 213, 215, 218, 219, 222, 223, 226, 227, 229, 231, 232, 234, 235, 236, 237, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 259, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 281, 283, 285, 286, 287, 288, 291, 292, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 315, 319, 320, 328, 330, 335, 336, 337, 338, 342, 344, 345, 346, 347, 350, 351, 352, 355, 356, 386, 1024], "subplot_kw": [218, 287], "subplot_spec": 386, "subplot_titl": 115, "subplots_adjust": [4, 5, 12, 13, 37, 40, 42, 43, 48, 49, 52, 60, 62, 78, 80, 89, 90, 95, 96, 102, 111, 112, 130, 167, 196, 197, 212, 215, 226, 234, 243, 245, 246, 249, 254, 270, 272, 288, 296, 299, 302, 307, 317, 326, 335, 338, 1024], "subpopul": [214, 679, 988], "subproblem": 1040, "subrahmanyam": [1035, 1038], "subramaniam": [1050, 1051, 1052], "subramaniyan": 1047, "subramanyam": 1042, "subrat": 1047, "subrat93": 1047, "subsampl": [102, 121, 124, 168, 214, 255, 312, 317, 458, 559, 560, 561, 562, 563, 632, 679, 701, 803, 804, 830, 869, 881, 893, 920, 930, 984, 988, 1013, 1035, 1045, 1049, 1051, 1052, 1053], "subscrib": 1033, "subscript": [366, 1048], "subsect": [366, 379, 407], "subsembl": 1012, "subsequ": [5, 30, 56, 73, 96, 109, 143, 185, 199, 261, 264, 283, 285, 338, 361, 379, 381, 385, 393, 404, 409, 410, 416, 419, 437, 496, 508, 553, 554, 559, 561, 562, 666, 668, 676, 803, 804, 832, 833, 836, 839, 840, 841, 842, 843, 861, 879, 883, 982, 991, 993, 1044, 1045, 1049, 1051, 1053], "subset": [5, 17, 18, 24, 25, 30, 68, 69, 78, 79, 116, 118, 119, 120, 136, 143, 146, 168, 170, 186, 198, 212, 213, 214, 215, 229, 231, 235, 236, 253, 257, 260, 262, 268, 269, 271, 278, 310, 311, 317, 325, 329, 350, 351, 352, 361, 374, 379, 387, 391, 393, 405, 406, 409, 410, 413, 416, 417, 419, 426, 437, 449, 464, 466, 467, 469, 488, 489, 492, 493, 497, 508, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 602, 610, 629, 639, 640, 641, 642, 651, 655, 658, 666, 667, 668, 671, 674, 675, 676, 677, 678, 679, 697, 703, 704, 713, 716, 718, 731, 734, 755, 757, 793, 796, 799, 802, 822, 828, 830, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 870, 899, 900, 904, 906, 909, 912, 914, 920, 961, 981, 988, 992, 993, 1003, 1005, 1007, 1008, 1028, 1038, 1043, 1044, 1046, 1048, 1053], "subset_featur": 69, "subset_label": 215, "subset_mask": 275, "subsidi": 167, "subspac": [100, 412, 416, 452, 515, 555, 556, 691, 695, 941, 986, 995, 998, 1004, 1017, 1027], "substanti": [136, 285, 289, 290, 306, 379, 850, 998, 1039, 1042], "substitut": [399, 976, 1013, 1041], "subtl": [347, 361, 991, 1013], "subtleti": 1030, "subtract": [154, 167, 236, 412, 414, 443, 447, 459, 534, 644, 645, 1042, 1052], "subtre": [557, 558, 559, 560, 564, 565, 912, 913, 914, 915, 1008], "subwindow": 1008, "succe": [100, 125, 181, 273], "succeed": 379, "success": [48, 141, 164, 251, 263, 266, 267, 276, 344, 361, 403, 409, 413, 414, 416, 515, 564, 579, 800, 803, 804, 821, 909, 995, 1014, 1017, 1023, 1027, 1030, 1047], "successfulli": [2, 12, 309, 378, 383, 402, 409, 417, 1006], "successor": [450, 456, 1008, 1012], "suchak": 1048, "sudo": [377, 396], "suen": 996, "suffer": [84, 117, 169, 283, 305, 351, 365, 409, 416, 544, 763, 987, 988, 992, 995, 1027, 1044], "suffic": [55, 56, 381, 1028], "suffici": [25, 53, 130, 205, 274, 338, 365, 393, 409, 418, 532, 657, 682, 683, 819, 820, 993, 995, 1013, 1044, 1050, 1051], "suffix": [383, 396, 827, 992, 1045], "suganthan": 376, "sugar": [146, 376], "suggest": [78, 96, 112, 116, 167, 170, 259, 338, 365, 378, 379, 386, 393, 413, 414, 416, 469, 474, 565, 645, 829, 986, 988, 989, 997, 1000, 1007, 1028, 1039, 1046, 1049, 1052], "suh": 1043, "suit": [18, 93, 128, 167, 197, 198, 226, 248, 318, 319, 321, 350, 366, 379, 381, 384, 385, 387, 391, 396, 402, 412, 414, 416, 450, 452, 503, 677, 841, 885, 935, 981, 984, 989, 992, 994, 995, 1006, 1012, 1013, 1017, 1021, 1042, 1049], "suitabl": [113, 122, 181, 183, 201, 300, 352, 373, 374, 385, 388, 402, 409, 414, 417, 452, 462, 468, 487, 505, 508, 627, 635, 839, 840, 843, 878, 879, 902, 957, 961, 986, 988, 991, 1002, 1004, 1006, 1012, 1028, 1049, 1050], "sullivan": [1038, 1039, 1040], "sultan": 1049, "sum": [6, 15, 17, 24, 59, 79, 90, 96, 102, 121, 122, 142, 146, 157, 167, 178, 184, 193, 197, 201, 212, 215, 219, 221, 236, 253, 268, 283, 290, 293, 319, 329, 342, 343, 345, 350, 351, 352, 359, 376, 385, 393, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 419, 432, 442, 443, 447, 449, 459, 464, 465, 482, 483, 484, 515, 520, 523, 531, 534, 536, 537, 541, 544, 545, 546, 549, 550, 552, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 590, 591, 611, 613, 623, 625, 635, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 676, 677, 678, 679, 681, 684, 690, 694, 696, 699, 709, 710, 719, 726, 741, 756, 758, 759, 763, 788, 832, 833, 837, 838, 847, 851, 855, 862, 863, 883, 884, 904, 905, 907, 910, 912, 913, 914, 915, 943, 967, 973, 978, 988, 992, 993, 994, 995, 1007, 1008, 1026, 1038, 1039, 1041, 1043, 1044, 1046, 1051, 1052], "sum_": [259, 268, 345, 405, 406, 409, 414, 415, 416, 538, 540, 547, 696, 755, 986, 988, 989, 992, 994, 996, 997, 999, 1000, 1002, 1006, 1007, 1008], "sum_gradi": 416, "sum_h": 997, "sum_hessian": 416, "sum_i": [318, 416, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 983, 984, 988, 990, 992, 997], "sum_j": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 988, 992, 997], "sum_k": [416, 549, 1008], "sum_m": 416, "sum_n": [266, 707, 992], "sum_n_compon": [464, 863], "sum_over_featur": [1035, 1050], "sum_weight": 973, "sumit": 1049, "summar": [197, 249, 266, 268, 352, 379, 381, 395, 416, 521, 658, 694, 706, 707, 988, 989, 992, 998, 1030], "summari": [11, 146, 319, 359, 361, 376, 391, 692, 713, 788, 917, 990, 993, 1012, 1028], "summaris": [228, 316], "summat": [994, 996], "summer": [0, 2, 11, 46, 1035], "sun": [2, 125, 168, 1043, 1048, 1049], "sundai": 2, "sundaramahalingam": 1052, "sung": 1046, "sunglok": 988, "sunita": 783, "sunitha": 1047, "sunmi": 1046, "super": [17, 23, 25, 381, 417, 1043], "superflu": 414, "superimpos": 414, "superior": 416, "superposit": 181, "supersed": [378, 1040], "superset": [413, 821, 992], "supervis": [6, 17, 23, 25, 29, 35, 47, 52, 54, 56, 68, 84, 101, 107, 114, 118, 125, 128, 137, 138, 151, 157, 219, 231, 234, 245, 259, 292, 299, 307, 317, 328, 331, 335, 338, 341, 342, 351, 352, 365, 368, 374, 381, 392, 393, 406, 409, 412, 413, 414, 416, 417, 419, 437, 439, 464, 488, 503, 504, 553, 588, 590, 593, 594, 634, 676, 729, 801, 802, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 830, 853, 863, 864, 868, 878, 885, 899, 900, 901, 909, 986, 989, 992, 994, 995, 998, 1002, 1003, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1019, 1020, 1022, 1028, 1030, 1035, 1041, 1047], "supp": 387, "suppli": [125, 391, 409, 646, 924, 925, 995, 1017, 1039, 1041, 1043, 1048], "support": [2, 4, 5, 6, 7, 8, 11, 22, 28, 30, 44, 68, 69, 70, 108, 113, 129, 130, 134, 142, 143, 154, 168, 198, 207, 208, 209, 211, 215, 231, 232, 233, 239, 252, 257, 264, 266, 278, 283, 302, 305, 309, 319, 325, 326, 329, 330, 334, 335, 338, 339, 340, 341, 342, 343, 345, 348, 365, 366, 367, 368, 373, 377, 379, 381, 383, 384, 385, 386, 388, 389, 392, 393, 394, 402, 409, 413, 414, 417, 418, 419, 437, 440, 450, 452, 453, 464, 465, 466, 467, 469, 474, 487, 496, 512, 538, 540, 541, 544, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 631, 632, 633, 643, 645, 657, 658, 659, 670, 671, 672, 674, 675, 676, 677, 678, 687, 690, 694, 699, 707, 713, 729, 730, 738, 743, 778, 779, 780, 783, 784, 787, 788, 800, 803, 804, 806, 814, 822, 827, 828, 836, 837, 842, 844, 845, 848, 850, 856, 864, 865, 869, 875, 877, 878, 880, 884, 892, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 930, 935, 936, 980, 981, 982, 984, 985, 986, 988, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1006, 1010, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "support_": [232, 344, 469, 474, 593, 594, 602, 906, 907, 908, 909, 910, 1007], "support_fract": [7, 469, 474], "support_reweight": [469, 474], "support_vector": [336, 342], "support_vector_indic": 336, "support_vectors_": [5, 8, 339, 342, 343, 906, 907, 908, 909, 910, 1007], "suppos": [233, 262, 325, 365, 366, 381, 385, 411, 416, 417, 418, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 742, 850, 904, 906, 909, 912, 914, 930, 996, 1044, 1046, 1052], "suppress": [167, 365, 387, 692, 995, 1042], "suptitl": [2, 3, 11, 13, 30, 31, 32, 37, 38, 48, 51, 55, 58, 65, 73, 93, 96, 103, 109, 118, 119, 127, 130, 158, 167, 168, 170, 191, 196, 212, 213, 218, 219, 220, 235, 246, 253, 255, 273, 302, 305, 307, 315, 317, 325, 326, 330, 344, 345, 356], "surac": 1045, "sure": [24, 54, 190, 203, 233, 234, 253, 361, 365, 366, 373, 377, 378, 379, 380, 381, 383, 384, 387, 391, 406, 410, 417, 493, 523, 649, 924, 925, 935, 978, 982, 989, 1006, 1012, 1013, 1042, 1043, 1045, 1050], "suresh": 1049, "surf": 168, "surfac": [29, 88, 97, 108, 109, 110, 111, 113, 131, 134, 151, 164, 180, 189, 206, 265, 286, 334, 335, 354, 355, 357, 358, 359, 360, 416, 504, 553, 557, 564, 631, 764, 912, 918, 986, 991, 1006, 1007, 1008, 1014], "surface_": 631, "surgan12": 1044, "surpass": [109, 342, 861, 862], "surplu": 413, "surpris": [51, 168, 253, 377, 988, 1012, 1037], "surprisingli": [215, 374, 417], "surrend": 17, "surrog": [253, 1017], "surround": [234, 379, 850, 998], "survei": [167, 412], "surviv": [69, 169, 981, 1012], "surya": [1048, 1049], "suscept": 402, "susik": 1039, "suspect": 2, "suspici": 374, "sustain": 0, "sutherland": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "sutiono": 1046, "suzuki": [1046, 1047], "sv": 1007, "sv_ind": 232, "sv_ratio": 232, "svc": [4, 23, 25, 28, 29, 30, 68, 72, 120, 131, 138, 150, 164, 173, 188, 201, 213, 231, 234, 238, 252, 257, 259, 261, 264, 265, 266, 269, 270, 275, 307, 309, 310, 315, 317, 328, 330, 333, 334, 335, 336, 338, 339, 340, 341, 343, 346, 347, 348, 350, 365, 381, 385, 393, 406, 410, 413, 416, 435, 436, 437, 468, 515, 555, 697, 698, 700, 702, 800, 817, 831, 833, 864, 901, 902, 904, 906, 907, 910, 980, 981, 987, 990, 992, 993, 1002, 1014, 1019, 1023, 1024, 1026, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "svc__c": [307, 864], "svc_disp": [239, 315, 1032], "svc_isoton": 23, "svc_sigmoid": 23, "svcifittedsvc": 239, "svcsvc": [238, 257, 259, 317], "svd": [32, 100, 128, 219, 351, 388, 404, 412, 421, 451, 453, 482, 483, 485, 521, 532, 533, 534, 535, 539, 540, 541, 544, 546, 549, 550, 664, 672, 673, 674, 685, 686, 687, 863, 941, 986, 1028, 1037, 1041, 1042, 1048, 1050, 1053], "svd__n_compon": 863, "svd_lapack_driv": 941, "svd_method": [17, 451, 453, 532, 1038], "svd_solver": [4, 68, 93, 100, 322, 404, 414, 535, 541, 1024, 1041, 1053], "sven": [1049, 1050], "svg": 0, "svm": [1, 5, 6, 7, 8, 9, 13, 14, 23, 25, 28, 29, 30, 46, 54, 68, 70, 72, 93, 107, 118, 128, 131, 135, 137, 139, 140, 145, 146, 147, 151, 153, 157, 164, 175, 178, 180, 189, 190, 206, 207, 208, 209, 210, 216, 226, 232, 234, 235, 238, 239, 247, 252, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 269, 270, 274, 275, 289, 290, 294, 295, 299, 301, 307, 308, 315, 317, 324, 328, 329, 331, 333, 336, 344, 345, 348, 350, 365, 368, 374, 381, 385, 393, 410, 413, 414, 416, 418, 435, 436, 437, 494, 504, 512, 515, 541, 555, 556, 563, 567, 568, 577, 593, 594, 599, 600, 605, 631, 639, 643, 668, 676, 677, 678, 689, 697, 698, 700, 702, 713, 735, 742, 761, 800, 814, 820, 826, 827, 830, 832, 833, 850, 864, 865, 877, 879, 884, 900, 901, 980, 981, 984, 987, 989, 990, 992, 993, 997, 1005, 1007, 1009, 1014, 1015, 1019, 1022, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "svm1": 410, "svm2": 410, "svm__c": 72, "svm_gui": 1026, "svm_weight": 142, "svm_weights_select": 142, "svmlight": [372, 487, 508, 509, 1030, 1035, 1036, 1042, 1044], "svmlight_file_test": 509, "svmlight_file_train": 509, "svmsgd": 1006, "svr": [5, 8, 164, 225, 241, 315, 333, 348, 365, 435, 436, 556, 567, 568, 593, 594, 643, 678, 800, 806, 905, 907, 909, 985, 1014, 1026, 1035, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "svr_fit": 232, "svr_lin": 344, "svr_poli": 344, "svr_predict": 232, "svr_rbf": 344, "svrg": 1012, "sw": 283, "sw_test": [22, 316], "sw_train": [22, 316], "swap": [409, 414, 716, 736, 971, 972, 1035], "swapnil": 1049, "swart": 15, "sweep": 860, "swier": [1046, 1047], "swiss": [65, 164, 217, 218, 219, 220, 223, 224, 409, 530, 692, 693, 1014, 1049], "switch": [364, 678, 704, 717, 737, 755, 757, 795, 844, 845, 940, 941, 992, 995, 1030, 1035], "swpeas": 1048, "swu": 1039, "sy": [6, 10, 17, 205, 230, 283, 329, 352, 374, 391, 617], "syd": 1050, "sydnei": 0, "syhw": [1036, 1037], "sylvain": [0, 369, 1039, 1044, 1045, 1046, 1047, 1048, 1049], "sylvainlan": [1043, 1044, 1045, 1046, 1047], "symbol": [10, 352, 366, 381, 385, 411, 417, 499, 582, 588, 589, 591, 916, 918, 1012], "symbol_dict": 10, "symlink": 383, "symlognorm": [176, 181], "symmetr": [42, 122, 170, 199, 393, 406, 409, 452, 462, 463, 474, 519, 527, 529, 690, 694, 695, 704, 705, 715, 716, 717, 722, 724, 728, 736, 737, 755, 757, 763, 785, 795, 797, 798, 978, 981, 988, 992, 995, 1051], "symmetri": [146, 376, 699, 877, 880, 892, 990], "symmetric_arrai": 978, "symposium": [146, 376, 409, 460], "symptomat": 253, "sync": 383, "synchron": [379, 417], "syndrom": 373, "synnaev": 302, "synonym": [393, 846, 847, 848, 854, 855, 856], "synonymi": 414, "syntax": [366, 379, 384, 387, 410, 468, 863, 864, 902, 981, 1019, 1046, 1048], "synthet": [2, 12, 23, 25, 29, 32, 35, 40, 47, 116, 122, 128, 149, 154, 156, 168, 187, 199, 214, 299, 307, 345, 361, 365, 372, 382, 394, 409, 411, 418, 658, 659, 904, 905, 911, 986, 1026, 1027, 1041], "synthetic_feature_weight": [658, 659], "syonekura": 1043, "sysconfig": 377, "system": [3, 98, 181, 259, 266, 361, 365, 366, 367, 374, 376, 379, 380, 381, 382, 387, 391, 396, 402, 409, 414, 416, 420, 444, 471, 472, 478, 535, 539, 543, 550, 639, 645, 650, 651, 654, 655, 656, 682, 683, 726, 756, 769, 797, 853, 899, 900, 960, 988, 992, 995, 1004, 1012, 1013, 1017, 1028, 1035, 1043, 1044], "systemat": [2, 125, 259, 381, 712, 728, 992, 1050], "sysuresh": 1049, "szabo": [1037, 1038], "szepieniec": 1041, "szlam": [414, 940, 941], "szpak": [1042, 1045], "szyma\u0144ski": [1043, 1044], "s\u00e1nchez": 1047, "s\u00e4ger": [1038, 1041], "s\u00e9bastien": [1017, 1041, 1043], "s\u00f6nke": 1045, "s\u00f8ren": 1052, "s\u0142apek": 1046, "t": [6, 9, 10, 15, 24, 25, 32, 37, 38, 40, 41, 42, 50, 52, 56, 68, 70, 76, 77, 78, 80, 83, 90, 94, 95, 100, 102, 103, 109, 112, 113, 121, 122, 123, 124, 125, 129, 130, 146, 150, 152, 153, 154, 157, 158, 164, 167, 168, 169, 170, 176, 178, 181, 184, 191, 194, 195, 196, 197, 198, 215, 217, 219, 220, 221, 222, 224, 233, 234, 244, 247, 249, 253, 258, 259, 273, 281, 283, 295, 296, 301, 315, 318, 319, 321, 325, 326, 328, 334, 335, 338, 339, 343, 350, 351, 352, 358, 359, 361, 365, 366, 373, 374, 376, 379, 381, 383, 385, 387, 392, 393, 396, 399, 402, 406, 407, 409, 410, 412, 413, 414, 416, 417, 418, 422, 426, 432, 434, 437, 447, 448, 450, 456, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 495, 496, 513, 514, 515, 519, 520, 525, 530, 532, 534, 541, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 590, 591, 594, 607, 608, 610, 611, 627, 628, 630, 631, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 695, 696, 704, 710, 716, 717, 726, 736, 737, 755, 756, 757, 767, 788, 789, 794, 795, 799, 800, 803, 804, 814, 822, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 860, 861, 862, 870, 873, 874, 875, 877, 878, 884, 885, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 941, 942, 956, 981, 984, 986, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1006, 1007, 1008, 1014, 1019, 1026, 1027, 1028, 1029, 1030, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "t0": [4, 6, 9, 13, 15, 37, 40, 42, 44, 46, 48, 50, 56, 60, 62, 96, 181, 183, 212, 213, 214, 220, 223, 226, 230, 232, 260, 322, 350, 351, 352, 676, 677, 678, 1024], "t1": [42, 44, 60, 212, 220, 223, 226], "t15h": 1042, "t_": [666, 667, 668, 676, 677, 678, 861, 862, 1006], "t_0": 1006, "t_batch": 62, "t_i": 994, "t_k": [416, 992, 1008], "t_m": 1008, "t_mini_batch": [40, 62], "t_p": 266, "t_post": 259, "t_sne": [218, 1043], "t_stat": 259, "t_stat_uncorrect": 259, "t_t": 1008, "taa": 157, "taac": 157, "tab": [5, 7, 32, 51, 78, 109, 125, 127, 130, 149, 154, 156, 185, 186, 253, 316, 322, 410, 1042], "tab10": [231, 248], "tab20b": 2, "tabea": [1050, 1051], "tabibian": 1041, "tabl": [56, 215, 259, 379, 380, 383, 388, 409, 417, 582, 658, 680, 800, 814, 841, 957, 988, 992, 993, 998, 1012, 1036], "tabular": [2, 11, 168, 381, 416, 1000], "tacit": 393, "tacitli": 1037, "tackl": [123, 259, 366, 379, 409, 841, 994, 1017, 1022], "tadej": [1036, 1037], "tae": 1047, "taehoon": [1042, 1043], "taemin": 988, "tag": [6, 47, 69, 226, 327, 373, 378, 382, 383, 387, 391, 393, 404, 417, 426, 432, 496, 832, 1013, 1016, 1040, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "tahar": 1042, "tahiri": 1047, "taifi": 1041, "tail": [11, 122, 162, 167, 197, 199, 259, 305, 521, 524, 988], "tail_strength": [521, 524], "takanori": 1043, "take": [3, 6, 11, 18, 28, 44, 51, 53, 55, 64, 73, 78, 90, 93, 109, 118, 149, 151, 154, 158, 167, 173, 180, 201, 205, 206, 222, 233, 245, 246, 253, 254, 260, 264, 268, 269, 281, 283, 286, 289, 290, 291, 293, 294, 305, 319, 328, 334, 335, 338, 347, 351, 352, 356, 365, 366, 367, 373, 374, 377, 379, 381, 384, 385, 386, 387, 391, 393, 394, 399, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 421, 437, 443, 446, 447, 449, 450, 452, 457, 458, 459, 461, 463, 469, 519, 533, 538, 539, 540, 546, 547, 581, 592, 595, 596, 598, 599, 600, 610, 611, 616, 620, 621, 624, 632, 643, 649, 671, 673, 674, 675, 676, 679, 691, 692, 699, 705, 707, 709, 719, 729, 730, 738, 742, 743, 756, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 800, 801, 805, 806, 814, 818, 828, 846, 847, 848, 850, 852, 853, 854, 855, 856, 868, 878, 899, 900, 904, 905, 906, 907, 908, 909, 910, 928, 962, 981, 984, 988, 989, 991, 992, 993, 995, 997, 998, 999, 1002, 1007, 1008, 1017, 1019, 1023, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "takeawai": 281, "taken": [2, 5, 29, 40, 51, 53, 124, 146, 154, 167, 230, 231, 246, 265, 278, 307, 374, 376, 378, 379, 383, 393, 407, 409, 413, 417, 421, 440, 533, 561, 562, 583, 584, 646, 647, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 677, 679, 681, 684, 695, 877, 878, 898, 901, 907, 908, 951, 992, 994, 1002, 1004, 1041, 1044, 1047, 1048], "takeshi": [1043, 1048, 1049, 1050], "takeuchi": 374, "takingitcasu": [1043, 1044], "talbot": 264, "talgatomarov": 1046, "talk": [17, 68, 260, 350, 351, 352, 368, 374, 393, 402, 1017, 1020, 1028], "talli": 415, "tallott": 1043, "talwalkar": 981, "tamara": [374, 1052], "tamer": 1050, "tami": 56, "tamir": [1046, 1049], "tamirlan1": 1046, "tamper": 6, "tampermonkei": 387, "tan": [861, 862, 996, 1042], "tandfonlin": 409, "tang": [376, 1045, 1046, 1047], "tangent": [218, 342, 689, 693, 990, 1029, 1030], "tanh": [342, 777, 861, 862, 990, 1007], "tanjina": 1052, "tann": [1043, 1048], "tao": [1051, 1052], "tar": [6, 383], "taranjeet": 1041, "tarashanski": 1052, "tarbal": [383, 1050], "tarcusx": 1043, "tarfil": 6, "target": [2, 4, 11, 15, 17, 24, 28, 30, 31, 43, 50, 67, 69, 71, 72, 74, 84, 88, 97, 99, 101, 110, 117, 118, 119, 120, 122, 123, 125, 127, 129, 130, 131, 133, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 176, 179, 180, 181, 190, 193, 197, 199, 201, 202, 205, 206, 219, 227, 229, 230, 231, 232, 235, 236, 237, 238, 245, 252, 253, 255, 257, 260, 262, 264, 265, 268, 269, 273, 278, 281, 283, 286, 291, 294, 295, 300, 304, 305, 313, 316, 317, 319, 321, 325, 326, 329, 330, 334, 335, 338, 342, 344, 350, 351, 356, 357, 358, 359, 361, 365, 367, 368, 371, 372, 373, 374, 375, 376, 381, 383, 384, 387, 388, 392, 395, 402, 409, 412, 413, 416, 419, 433, 437, 438, 439, 442, 445, 464, 465, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 508, 510, 520, 524, 531, 532, 534, 536, 537, 539, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 573, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 697, 698, 700, 701, 702, 707, 708, 709, 712, 713, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 735, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 888, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 954, 955, 956, 983, 984, 985, 988, 989, 992, 996, 999, 1000, 1006, 1007, 1008, 1013, 1014, 1016, 1017, 1019, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "target_class": 310, "target_column": [489, 490, 496], "target_encod": 312, "target_filenam": [501, 505], "target_gener": 155, "target_idx": 632, "target_mean_": [885, 1002], "target_nam": [4, 17, 28, 50, 88, 97, 101, 166, 206, 219, 245, 252, 260, 268, 269, 286, 311, 329, 350, 356, 372, 374, 488, 489, 491, 492, 493, 494, 496, 497, 500, 502, 503, 504, 505, 510, 713, 992, 1008, 1019, 1024, 1028, 1045], "target_opset": 402, "target_test": [253, 509], "target_train": [253, 509], "target_typ": [311, 885, 928, 955, 1052], "target_type_": 885, "targetencod": [311, 312, 393, 877, 878, 982, 1002, 1012, 1051, 1052], "targetencodertargetencod": 311, "targets_test": 231, "targets_train": 231, "tari": 56, "tashai": [1043, 1044], "task": [2, 5, 96, 116, 117, 123, 125, 145, 157, 164, 175, 181, 183, 184, 185, 186, 196, 197, 213, 216, 218, 236, 253, 256, 273, 281, 342, 352, 365, 367, 374, 376, 378, 379, 383, 384, 385, 388, 391, 392, 393, 414, 416, 417, 418, 419, 448, 461, 493, 505, 515, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 632, 633, 646, 647, 652, 653, 660, 661, 662, 663, 674, 681, 684, 727, 729, 730, 754, 782, 784, 787, 789, 801, 805, 818, 824, 958, 959, 989, 992, 993, 994, 995, 1003, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1026, 1027, 1028, 1030, 1035, 1040, 1044, 1050], "tast": 1035, "tata": 1052, "tau": 1002, "tau_0": 536, "tavenard": 1047, "tax": 0, "taxonom": 376, "taxonomist": 1027, "taylor": [416, 1043, 1045, 1046, 1049], "tb": [387, 571, 572, 573, 574, 575, 576, 577, 578], "tc": [146, 376, 394], "tcg": 157, "tch": [146, 376], "tcompl": 56, "tcpdump": 374, "tda": 1012, "teach": 379, "teacher": 68, "teal": [198, 207, 266], "team": [374, 382, 391, 393, 394, 1010, 1012, 1017, 1035], "teas": 167, "tech": [10, 376, 842], "technic": [157, 167, 198, 219, 319, 374, 376, 379, 393, 416, 652, 664, 685, 686, 899, 988, 989, 995], "technion": [664, 685, 686, 988], "techniqu": [10, 16, 68, 70, 95, 103, 110, 120, 137, 145, 146, 162, 164, 166, 205, 220, 222, 264, 278, 287, 318, 326, 342, 355, 367, 376, 391, 393, 402, 406, 407, 409, 413, 414, 415, 416, 417, 418, 447, 448, 449, 450, 534, 554, 677, 689, 693, 694, 726, 756, 984, 988, 989, 991, 992, 995, 998, 1000, 1004, 1006, 1008, 1013, 1017, 1022, 1027, 1028, 1048], "technolog": 376, "technologi": [146, 376, 409, 1012, 1017], "technometr": [376, 411, 469, 474, 998], "tediou": [130, 253], "teen": 1002, "teevan": [841, 994], "teh": [860, 997], "tejesh95": 1039, "telecom": [22, 23, 40, 226, 1017], "telenczuk": [5, 123, 130, 146, 162, 1044, 1047, 1048, 1050], "tell": [149, 167, 168, 233, 259, 338, 343, 366, 374, 409, 417, 563, 579, 981, 986, 999, 1028], "temp": [2, 168], "temp_fold": 958, "temperatur": [168, 417, 999], "tempfil": [52, 285, 315, 410, 995], "templat": [379, 383, 384, 393, 394, 557, 558, 563, 564, 565, 566, 1012], "templateclassifi": 381, "tempor": [11, 125, 181, 1012, 1013], "temporari": [52, 68, 70, 365, 468, 687, 781, 902, 995, 1038, 1039, 1042, 1048, 1049], "temporarili": [409, 1040], "temporarydirectori": [285, 315], "tempt": 167, "temptat": [361, 379], "ten": [13, 17, 109, 115, 125, 146, 219, 249, 374, 376, 416, 520, 909, 1044], "tenavi": 1049, "tend": [2, 10, 25, 35, 37, 41, 50, 53, 55, 144, 146, 167, 168, 186, 197, 202, 215, 236, 243, 246, 256, 260, 281, 302, 342, 352, 365, 367, 379, 381, 393, 406, 409, 411, 414, 416, 418, 437, 448, 653, 850, 881, 893, 941, 988, 989, 995, 1008, 1028], "tendenc": [125, 223, 988, 989, 991, 994, 997], "tenenbaum": [688, 989], "tenenhau": 376, "tensor": [173, 371, 404, 414, 538, 540, 547, 639, 640, 641, 1030, 1047], "tensorflow": [4, 391, 1012, 1024], "tensorsketch": 984, "tent": 385, "tenur": 1017, "teon": 1047, "terenc": [1047, 1048], "term": [2, 12, 13, 23, 30, 56, 98, 112, 115, 119, 122, 154, 166, 181, 185, 186, 197, 199, 201, 211, 214, 215, 236, 253, 257, 261, 283, 299, 318, 342, 345, 350, 352, 367, 368, 379, 381, 383, 391, 406, 407, 409, 411, 413, 414, 416, 443, 447, 449, 452, 459, 462, 524, 535, 538, 540, 544, 547, 549, 588, 589, 590, 591, 604, 607, 608, 632, 633, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 672, 673, 674, 675, 676, 678, 680, 687, 695, 730, 738, 783, 784, 787, 861, 862, 879, 883, 886, 904, 905, 906, 907, 908, 909, 910, 981, 983, 984, 986, 987, 988, 989, 992, 993, 994, 996, 997, 1002, 1006, 1007, 1019, 1028, 1043, 1049, 1050, 1051], "term1": 417, "term2": 417, "term3": 417, "termin": [366, 384, 385, 387, 396, 409, 423, 448, 461, 553, 554, 558, 559, 560, 563, 565, 666, 667, 668, 676, 678, 861, 862, 913, 915, 998, 1008], "terminalipythonapp": 385, "terminalpdb": 387, "termination_condition_": 901, "terminologi": [393, 1043], "terraza": 1047, "terri": [68, 1039], "terrycojon": 1039, "tesson": 409, "test": [2, 4, 6, 8, 9, 11, 22, 23, 24, 25, 29, 30, 31, 52, 68, 69, 83, 98, 109, 112, 114, 115, 116, 117, 121, 122, 123, 124, 125, 136, 138, 140, 142, 145, 147, 149, 150, 164, 166, 167, 168, 169, 170, 173, 181, 186, 192, 193, 196, 197, 198, 199, 200, 201, 204, 205, 212, 213, 215, 222, 227, 232, 233, 235, 245, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 266, 267, 269, 270, 271, 273, 276, 281, 286, 291, 292, 299, 301, 307, 309, 310, 311, 312, 322, 329, 338, 345, 352, 361, 365, 366, 373, 374, 376, 382, 383, 384, 385, 391, 392, 393, 395, 396, 401, 403, 404, 406, 408, 410, 411, 414, 416, 417, 418, 419, 426, 428, 432, 435, 436, 437, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 493, 497, 498, 502, 504, 524, 531, 537, 539, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 592, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 608, 609, 610, 611, 627, 628, 630, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 712, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 854, 855, 861, 862, 864, 889, 890, 892, 893, 894, 895, 899, 900, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 923, 933, 935, 936, 987, 988, 991, 992, 995, 996, 1000, 1002, 1006, 1007, 1008, 1012, 1013, 1014, 1016, 1017, 1020, 1023, 1024, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "test_": [11, 130, 413], "test_0": 2, "test_4": 2, "test_accuraci": [245, 260, 273], "test_auc": 827, "test_ax": 98, "test_balanced_accuraci": 273, "test_best_it": 121, "test_check_estim": 936, "test_color": 121, "test_common": [379, 387], "test_dataset": 373, "test_devi": 124, "test_enable_hist_gradient_boost": 383, "test_error": 272, "test_fn": 992, "test_fold": [413, 813], "test_fract": 1035, "test_idx": [11, 393], "test_import": 169, "test_index": [245, 328, 413, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "test_indic": 1023, "test_indx": 413, "test_lin": 121, "test_logist": [379, 387], "test_ms": 322, "test_neg_mean_absolute_error": [2, 199], "test_neg_mean_squared_error": [199, 827], "test_neg_root_mean_squared_error": 2, "test_negative_likelihood_ratio": 262, "test_positive_likelihood_ratio": 262, "test_prec_macro": 413, "test_precision_macro": 413, "test_r2": 827, "test_rec_macro": 413, "test_recall_macro": 413, "test_requiring_mpl_fixtur": 379, "test_result": 169, "test_scor": [119, 121, 123, 125, 205, 258, 261, 278, 311, 345, 355, 392, 413, 806, 823, 827, 828, 831], "test_scores_nb": 261, "test_scores_svm": 261, "test_set": 406, "test_siz": [2, 3, 4, 8, 11, 22, 23, 25, 29, 30, 69, 114, 120, 121, 123, 124, 125, 129, 166, 173, 181, 192, 197, 204, 205, 212, 213, 253, 256, 257, 261, 266, 268, 272, 281, 291, 292, 299, 301, 302, 307, 309, 310, 317, 338, 345, 361, 384, 413, 698, 802, 817, 820, 821, 830, 832, 853, 982, 994, 995, 1023, 1024, 1035, 1036, 1041, 1042, 1047], "test_sklearn_compatible_estim": [315, 936], "test_sparsifi": 387, "test_stat": 6, "test_tim": [232, 350], "test_tp": 992, "test_val": 380, "test_your_test_nam": 366, "tested_neg": 273, "tested_posit": 273, "testpypi": 383, "tests_for_packag": 379, "teunp": 1049, "texa": [10, 68], "text": [1, 4, 5, 8, 9, 10, 13, 14, 15, 17, 29, 30, 35, 38, 42, 51, 54, 55, 56, 58, 59, 60, 62, 68, 78, 79, 107, 115, 120, 144, 157, 170, 177, 191, 192, 226, 230, 233, 237, 238, 243, 245, 251, 252, 253, 258, 259, 263, 265, 266, 270, 276, 288, 291, 293, 299, 307, 318, 324, 326, 331, 344, 353, 355, 365, 367, 368, 371, 372, 373, 379, 384, 391, 393, 406, 409, 410, 412, 413, 414, 416, 419, 447, 449, 464, 468, 487, 488, 489, 499, 503, 508, 521, 536, 544, 564, 615, 625, 652, 658, 666, 668, 674, 676, 697, 703, 705, 707, 713, 717, 729, 730, 737, 793, 795, 800, 814, 830, 839, 841, 843, 846, 851, 864, 865, 867, 868, 876, 900, 901, 902, 904, 916, 917, 918, 938, 981, 984, 988, 990, 992, 993, 994, 996, 999, 1002, 1004, 1006, 1007, 1011, 1013, 1014, 1017, 1020, 1030, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "text1": 417, "text2": 417, "text2d": 222, "text3": 417, "text3d": [43, 99], "text_": 697, "text_analyt": 1028, "text_clf": 1028, "text_kw": [697, 1050], "text_preprocess": 464, "text_stat": 68, "text_stats_transform": 68, "textbook": [417, 590], "textcoord": [7, 173], "textrm": [1007, 1026], "texttt": 992, "textual": [414, 423, 1008, 1044], "textur": [146, 376, 758, 759, 990], "tf": [13, 17, 230, 350, 351, 352, 374, 414, 521, 544, 588, 589, 590, 591, 843, 851, 876, 981, 990, 994, 1002, 1012, 1028], "tf_feature_nam": 13, "tf_transform": 1028, "tf_vector": 13, "tfid": 590, "tfidf": [13, 68, 329, 417, 591, 1028], "tfidf__use_idf": 1028, "tfidf_feature_nam": 13, "tfidf_transform": 1028, "tfidf_vector": 13, "tfidftransform": [329, 351, 352, 417, 489, 591, 1028, 1042, 1043, 1049, 1051, 1052, 1053], "tfidfvector": [13, 17, 68, 260, 350, 374, 414, 417, 489, 588, 589, 590, 1028, 1035, 1037, 1043, 1044, 1045, 1048, 1049, 1053], "tfidfvectorizertfidfvector": 260, "tfifi": 1048, "tfrac": 419, "tgct": 157, "tgz": [4, 1024], "th": [109, 236, 318, 359, 392, 409, 413, 416, 424, 441, 445, 451, 453, 459, 463, 472, 557, 558, 559, 560, 561, 562, 564, 565, 566, 593, 594, 632, 648, 649, 669, 671, 680, 696, 718, 780, 821, 885, 929, 982, 988, 992, 996, 999, 1006, 1007, 1050], "th0rwa": [1045, 1046], "thakur": [1038, 1039], "thaler": 1041, "than": [2, 3, 5, 9, 10, 12, 17, 25, 28, 29, 38, 42, 45, 51, 53, 70, 73, 78, 80, 84, 90, 93, 96, 98, 100, 109, 111, 112, 114, 115, 116, 118, 119, 122, 125, 144, 146, 149, 155, 158, 161, 167, 168, 169, 173, 176, 181, 183, 186, 197, 199, 203, 213, 214, 215, 222, 226, 232, 233, 234, 236, 244, 253, 256, 257, 259, 260, 261, 262, 265, 268, 273, 278, 281, 283, 289, 290, 302, 305, 309, 310, 311, 312, 317, 319, 321, 326, 342, 350, 351, 352, 361, 365, 366, 367, 373, 374, 375, 377, 378, 379, 381, 384, 385, 387, 393, 394, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 454, 457, 460, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 493, 494, 496, 509, 514, 515, 523, 531, 534, 535, 536, 537, 538, 540, 541, 542, 544, 547, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 630, 634, 640, 642, 643, 644, 646, 647, 652, 653, 655, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 687, 692, 694, 696, 704, 705, 712, 720, 721, 722, 723, 724, 735, 736, 739, 764, 779, 780, 781, 783, 785, 795, 797, 798, 800, 803, 804, 810, 814, 819, 821, 822, 825, 826, 827, 828, 829, 832, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 858, 861, 862, 867, 877, 878, 879, 881, 882, 884, 887, 893, 894, 898, 901, 904, 905, 906, 909, 910, 912, 913, 914, 915, 916, 930, 941, 943, 944, 949, 955, 961, 963, 966, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1013, 1016, 1019, 1023, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thanh": 1053, "thank": [0, 2, 15, 23, 53, 84, 169, 173, 197, 268, 350, 351, 378, 387, 1012, 1017, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "tharak": 1052, "thebabush": 1052, "thedevpanda": 1050, "thei": [0, 2, 11, 24, 35, 48, 55, 80, 95, 107, 110, 116, 117, 119, 121, 123, 125, 126, 142, 145, 146, 149, 150, 154, 167, 168, 181, 183, 186, 192, 197, 198, 215, 219, 222, 226, 232, 233, 236, 252, 256, 259, 260, 262, 268, 273, 278, 283, 285, 300, 305, 310, 317, 319, 342, 350, 351, 357, 358, 361, 365, 366, 367, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 387, 388, 391, 392, 393, 394, 399, 402, 405, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 421, 440, 442, 446, 453, 454, 467, 496, 508, 509, 533, 535, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 597, 610, 619, 629, 643, 646, 647, 652, 658, 659, 660, 661, 662, 670, 672, 676, 678, 681, 687, 762, 763, 765, 768, 774, 789, 800, 814, 833, 839, 840, 841, 842, 843, 861, 864, 866, 872, 883, 884, 906, 909, 912, 913, 914, 915, 919, 981, 982, 984, 986, 988, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1017, 1019, 1023, 1025, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "theil": [164, 175, 200, 203, 216, 305, 649, 657, 671, 678, 679, 1014], "theilsen": 203, "theilsenregressor": [203, 214, 649, 671, 678, 988, 1039, 1047, 1049], "theirs": 350, "them": [2, 3, 6, 30, 37, 38, 47, 51, 53, 54, 58, 63, 64, 68, 69, 84, 93, 95, 98, 110, 126, 141, 146, 149, 161, 162, 167, 168, 169, 173, 176, 181, 192, 198, 199, 201, 215, 230, 233, 236, 237, 253, 257, 259, 260, 262, 268, 278, 285, 305, 310, 312, 318, 329, 338, 352, 359, 365, 367, 374, 377, 379, 380, 381, 382, 383, 387, 391, 393, 394, 395, 399, 402, 406, 407, 408, 409, 410, 413, 414, 416, 417, 419, 444, 447, 449, 450, 457, 464, 467, 493, 494, 508, 567, 568, 569, 570, 607, 608, 616, 620, 621, 624, 632, 639, 664, 692, 768, 771, 774, 778, 779, 780, 781, 789, 800, 814, 821, 829, 864, 868, 873, 874, 878, 882, 884, 885, 894, 895, 901, 912, 913, 949, 958, 981, 982, 988, 991, 992, 993, 995, 996, 997, 1002, 1007, 1008, 1011, 1012, 1016, 1017, 1019, 1026, 1027, 1028, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "themat": 393, "theme": [374, 1035], "themrmax": [1041, 1042], "themselv": [25, 167, 305, 375, 381, 387, 393, 399, 405, 409, 416, 417, 419, 446, 615, 792, 1008, 1028, 1045], "theodor": 1040, "theofilo": 1042, "theoptip": [1045, 1046], "theorem": [149, 345, 407, 994], "theoret": [35, 55, 149, 253, 407, 409, 416, 553, 554, 639, 704, 726, 756, 904, 981, 988, 989, 991, 992, 994, 1004, 1006, 1007, 1017], "theori": [119, 232, 248, 345, 376, 407, 409, 413, 416, 690, 694, 726, 756, 896, 897, 941, 981, 988, 989, 991, 992, 993, 1007, 1008], "theotheo": 1045, "thereaft": [167, 176], "therebi": [2, 167, 413, 416, 984, 1045], "therefor": [2, 7, 12, 18, 22, 25, 32, 35, 50, 51, 69, 70, 73, 78, 84, 98, 102, 109, 112, 114, 122, 125, 128, 130, 145, 166, 169, 197, 201, 213, 214, 243, 248, 249, 253, 260, 262, 273, 278, 281, 286, 301, 305, 310, 325, 338, 345, 346, 350, 351, 359, 365, 373, 377, 384, 391, 399, 402, 404, 409, 410, 411, 413, 414, 416, 417, 437, 535, 541, 549, 551, 553, 554, 559, 560, 564, 565, 604, 606, 658, 659, 665, 668, 671, 676, 678, 679, 701, 712, 735, 757, 797, 864, 865, 877, 881, 885, 893, 982, 986, 988, 989, 992, 994, 995, 996, 997, 1000, 1002, 1007, 1008, 1013, 1019, 1026, 1027, 1028, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "therein": 668, "thereof": 393, "theriley106": 1043, "thesi": [0, 376, 409, 416], "theta": [150, 151, 153, 155, 157, 158, 234, 414, 419, 523, 536, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 692, 994, 1008], "theta0": 150, "theta1": 150, "theta_": [842, 994], "theta_c": [234, 523], "theta_d": 414, "theta_i": 994, "theta_l": 419, "theta_opt": [610, 611], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 482, 483, 484, 485, 487, 489, 490, 493, 496, 497, 498, 499, 501, 502, 503, 505, 508, 509, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 707, 709, 711, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 736, 737, 738, 739, 740, 741, 742, 743, 748, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 768, 769, 774, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 924, 925, 930, 931, 933, 935, 936, 941, 943, 948, 949, 950, 951, 952, 953, 955, 958, 959, 960, 962, 963, 966, 967, 976, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thibault": 1044, "thibaut": 1049, "thibsej": 1044, "thick": [58, 293, 995], "thierno": 1045, "thierri": [0, 243, 245, 1017, 1041, 1042, 1049], "thij": [1047, 1050, 1051], "thin": [220, 620], "thing": [7, 32, 219, 254, 350, 366, 367, 374, 378, 379, 381, 391, 394, 409, 411, 417, 559, 560, 988, 1002, 1017, 1041], "think": [3, 35, 167, 168, 350, 351, 379, 415, 991, 1013, 1017, 1019], "thinner": 65, "third": [32, 118, 123, 141, 146, 157, 215, 226, 249, 278, 288, 307, 321, 366, 374, 378, 391, 394, 402, 417, 534, 588, 589, 590, 591, 802, 803, 804, 809, 846, 847, 848, 850, 852, 882, 894, 960, 981, 1003, 1010, 1035, 1046, 1051, 1052], "thirion": [0, 397, 1035, 1041, 1042, 1048], "thirteen": 376, "thirti": 1011, "thiruvenkadam": 1049, "this_centroid": 40, "this_cov": 80, "this_cv": 254, "this_di": 10, "this_dx": 10, "this_i": [22, 203], "this_max_it": 212, "this_p": 24, "this_prec": 80, "this_scor": [341, 1023], "this_sw": 22, "this_x": [22, 195, 203, 1026], "thoma": [0, 100, 226, 305, 366, 369, 394, 397, 900, 988, 1002, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "thomas9292": 1047, "thomaz": 1046, "thomo": 56, "thompson": [1038, 1050, 1051], "thorben": 1047, "thorough": 1017, "thoroughli": 997, "thorsten": 1017, "those": [2, 5, 10, 15, 17, 53, 58, 69, 110, 122, 125, 144, 146, 158, 166, 167, 168, 169, 170, 197, 199, 201, 215, 223, 230, 233, 235, 236, 249, 252, 253, 259, 262, 265, 278, 300, 305, 310, 335, 338, 350, 351, 352, 365, 366, 373, 379, 381, 383, 384, 385, 386, 391, 393, 394, 396, 405, 406, 408, 409, 413, 414, 416, 417, 419, 448, 450, 461, 464, 468, 494, 495, 496, 503, 557, 558, 564, 565, 569, 570, 581, 692, 697, 712, 718, 736, 800, 803, 804, 812, 814, 821, 846, 847, 848, 850, 852, 853, 854, 855, 856, 904, 905, 906, 909, 912, 913, 914, 915, 952, 981, 984, 988, 991, 992, 994, 995, 996, 999, 1002, 1008, 1011, 1012, 1017, 1019, 1028, 1035, 1038, 1041, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1053], "though": [43, 53, 115, 146, 173, 176, 236, 265, 288, 307, 309, 351, 352, 361, 365, 373, 376, 379, 381, 392, 393, 409, 414, 415, 416, 417, 418, 699, 807, 809, 904, 981, 982, 984, 989, 992, 995, 1000, 1002, 1006, 1028, 1043], "thought": [218, 288, 393, 409, 446, 989, 993], "thoui": [0, 398, 1035], "thousand": [40, 115, 125, 230, 232, 309, 351, 374, 409, 416, 861, 862, 909, 989, 1028, 1044, 1046], "thread": [283, 316, 319, 377, 391, 393, 409, 416, 836, 837, 958, 959, 960, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "threadpool": 960, "threadpoolctl": [366, 377, 396, 401], "threadsaf": 1048, "three": [2, 5, 24, 32, 38, 39, 43, 44, 53, 56, 76, 88, 89, 109, 114, 116, 119, 120, 121, 131, 132, 133, 143, 146, 157, 167, 181, 189, 194, 197, 199, 206, 208, 232, 233, 243, 246, 281, 311, 312, 316, 366, 372, 376, 383, 396, 402, 405, 409, 413, 414, 415, 417, 451, 462, 498, 709, 943, 985, 987, 988, 989, 992, 995, 1002, 1006, 1007, 1011, 1019, 1027, 1035], "thresh": 1039, "threshold": [9, 23, 40, 63, 90, 96, 102, 146, 164, 168, 170, 192, 227, 229, 251, 256, 257, 258, 263, 266, 271, 276, 281, 321, 322, 324, 331, 356, 359, 393, 403, 409, 414, 416, 418, 441, 442, 445, 446, 469, 496, 500, 508, 509, 531, 537, 542, 548, 549, 550, 551, 561, 563, 588, 591, 593, 597, 602, 603, 644, 658, 667, 671, 676, 678, 692, 698, 700, 702, 703, 706, 707, 718, 720, 726, 727, 732, 739, 740, 742, 756, 782, 784, 787, 788, 789, 794, 797, 798, 799, 800, 819, 822, 830, 839, 850, 851, 865, 867, 869, 871, 884, 887, 899, 900, 901, 902, 909, 916, 918, 966, 988, 992, 995, 996, 998, 1002, 1005, 1007, 1008, 1013, 1014, 1030, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053], "threshold_": [597, 1042], "threshold_lambda": 644, "threshold_sign": 359, "thriller": [417, 875], "thrive": [0, 379], "throat": [9, 296, 374, 498], "through": [0, 5, 11, 32, 114, 146, 157, 167, 201, 218, 231, 254, 259, 262, 288, 309, 310, 336, 343, 352, 359, 376, 377, 379, 381, 386, 388, 393, 394, 396, 399, 408, 409, 412, 414, 416, 418, 419, 426, 432, 446, 464, 467, 472, 535, 541, 557, 558, 561, 564, 565, 566, 581, 593, 594, 597, 647, 651, 653, 655, 658, 659, 661, 663, 665, 668, 676, 677, 688, 691, 720, 806, 823, 880, 892, 896, 897, 912, 913, 914, 915, 947, 950, 981, 982, 989, 992, 994, 995, 996, 998, 1000, 1002, 1006, 1007, 1008, 1017, 1019, 1026, 1028, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "throughout": [321, 361, 393, 627, 801, 861, 862, 1019, 1038, 1043], "throughput": [364, 1012, 1030, 1038], "throw": [301, 388, 923, 1039, 1042, 1043, 1044, 1045, 1049], "thrown": [711, 1044, 1045], "thu": [2, 3, 22, 23, 24, 25, 38, 51, 53, 58, 76, 80, 96, 98, 112, 114, 115, 117, 119, 125, 142, 149, 154, 155, 168, 181, 185, 186, 197, 199, 215, 226, 232, 237, 245, 253, 257, 259, 264, 265, 266, 273, 286, 312, 315, 318, 355, 361, 365, 366, 374, 381, 385, 391, 393, 399, 406, 408, 409, 413, 414, 416, 417, 419, 420, 437, 439, 463, 515, 527, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 603, 606, 610, 622, 627, 632, 633, 643, 645, 658, 677, 705, 718, 725, 788, 795, 802, 807, 809, 821, 835, 838, 873, 904, 983, 984, 985, 986, 987, 988, 989, 992, 993, 998, 999, 1002, 1004, 1005, 1006, 1007, 1013, 1017, 1035, 1037, 1041, 1043, 1044, 1045, 1047, 1051], "thuan": 1046, "thukarama": 1050, "thumb": [115, 173, 365, 379, 380, 391, 409, 658, 659, 666, 667, 668, 676, 677, 678, 904, 992], "thumbnail": 1035, "th\u00e9ophil": 1051, "ti": [68, 197, 245, 248, 257, 346, 365, 406, 409, 599, 600, 635, 720, 726, 756, 797, 798, 906, 909, 912, 991, 992, 1007, 1036, 1038, 1039, 1043, 1045, 1049, 1050, 1051], "tiago": [1036, 1040], "tialo": 1052, "tian": [409, 442, 1040, 1041, 1042], "tianqi": 416, "tiao": [1040, 1041], "tib": [682, 683], "tibshirani": [112, 113, 124, 146, 185, 258, 376, 413, 416, 520, 559, 560, 628, 656, 721, 723, 724, 834, 851, 912, 913, 982, 986, 988, 993, 999, 1008], "tic": [146, 168, 236, 270, 994], "tic_bwd": 146, "tic_fwd": 146, "ticconi": 1041, "tick": [6, 41, 58, 152, 237, 270, 632, 828], "tick_bottom": 305, "tick_left": 305, "tick_param": [5, 13, 133, 243, 259, 309, 328], "tick_right": 5, "ticker": [218, 220, 223, 283], "ticket": [320, 379], "tidelift": 0, "tie": [164, 189, 333, 348, 391, 416, 512, 832, 909, 993, 1007, 1008, 1014, 1036, 1051], "tieleman": [860, 997], "tien": 1040, "tiernei": [1043, 1044, 1045], "tight": [38, 102, 111, 118, 138, 142, 182, 184, 189, 190, 191, 202, 206, 209, 214, 220, 223, 247, 283, 289, 290, 294, 295, 334, 338, 341, 343, 356, 582, 692, 1047], "tight_layout": [4, 6, 23, 25, 29, 38, 50, 53, 63, 71, 73, 84, 93, 94, 95, 103, 109, 111, 116, 118, 120, 123, 128, 130, 132, 151, 153, 158, 161, 166, 167, 169, 170, 176, 177, 181, 187, 195, 197, 205, 208, 212, 215, 218, 231, 236, 254, 255, 271, 281, 283, 285, 295, 306, 307, 308, 309, 310, 315, 319, 336, 351, 355, 356, 1024], "tightli": 1022, "tijanajovanov": 1047, "tikhonov": [156, 419, 672], "tild": [870, 1000, 1002], "tilen": 1045, "till": [409, 442, 788, 992], "tim": [0, 114, 129, 397, 1035, 1040, 1041, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "time": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 399, 402, 404, 405, 406, 407, 409, 411, 412, 414, 416, 417, 420, 437, 441, 443, 444, 445, 446, 447, 450, 452, 455, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 472, 496, 499, 501, 519, 523, 534, 536, 538, 540, 541, 547, 562, 567, 568, 569, 570, 590, 610, 619, 627, 628, 629, 630, 634, 639, 640, 643, 646, 650, 652, 654, 660, 662, 664, 666, 667, 672, 673, 674, 676, 677, 678, 685, 686, 690, 692, 694, 701, 742, 745, 746, 748, 790, 794, 797, 798, 800, 802, 803, 804, 805, 807, 809, 814, 815, 816, 819, 821, 825, 826, 827, 828, 829, 830, 832, 834, 839, 840, 841, 842, 843, 844, 845, 852, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 874, 877, 879, 883, 888, 896, 897, 901, 902, 906, 909, 910, 918, 943, 958, 981, 982, 984, 985, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1017, 1019, 1024, 1026, 1027, 1028, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "time_dens": 322, "time_spars": 322, "time_step": [181, 862], "timeit": [212, 246, 385], "timeout": [496, 958, 1049], "timer": [246, 385], "times_init": 246, "timescal": 231, "timeseri": 2, "timeseriessplit": [2, 11, 125, 181, 254, 413, 1041, 1042, 1047], "timo": 1047, "timofei": 1050, "timotheemathieu": 1048, "timothi": [1040, 1048], "timsaur": 1045, "tinertia": 56, "ting": [563, 998, 1043, 1044], "tingshan": 1048, "tini": [1037, 1050, 1053], "tinoco": 1052, "tinta": 311, "tinyclu": 0, "tip": [361, 364, 368, 379, 382, 385, 403, 417, 534, 541, 645, 692, 988, 1015, 1016, 1029, 1030, 1038], "tiphain": 1046, "tirth": [1045, 1046], "titan": [69, 169, 240, 315, 319, 320, 1000], "titl": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 18, 19, 22, 23, 24, 25, 28, 30, 35, 36, 37, 39, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 76, 77, 79, 80, 83, 84, 88, 89, 93, 94, 95, 96, 97, 100, 101, 102, 110, 111, 112, 115, 117, 118, 119, 122, 123, 125, 126, 129, 132, 133, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 167, 176, 177, 179, 181, 182, 184, 185, 186, 189, 190, 196, 197, 199, 201, 202, 203, 205, 206, 211, 214, 215, 218, 219, 220, 226, 230, 231, 232, 234, 235, 236, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 258, 259, 260, 262, 263, 264, 268, 269, 274, 285, 286, 289, 290, 291, 292, 294, 295, 296, 305, 309, 310, 311, 312, 327, 330, 334, 335, 336, 337, 338, 341, 342, 346, 347, 350, 356, 357, 358, 378, 379, 383, 387, 410, 992, 1016, 1024], "title_bow": 410, "titles_opt": 252, "titov": [1043, 1045, 1048, 1049], "titu": 1046, "tiwari": 1047, "tiziano": 1035, "tjoa": 1039, "tkammi": 1041, "tkdd": 563, "tliu68": 1048, "tm": [10, 995], "tmp": 383, "tmpdir": [285, 315], "tn": [253, 712, 718, 992], "tn_c": 268, "tnr": 253, "tnwei": 1047, "to_british": 417, "to_fram": 73, "to_list": 170, "to_numpi": [11, 154, 253], "to_onnx": 402, "to_replac": [2, 168], "toarrai": [5, 322, 329, 359, 410, 417, 566, 582, 588, 590, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 877, 894, 895, 942, 963, 964, 966, 974, 975, 982, 995, 1002, 1052], "toastedcornflak": [1041, 1042], "toastedyeast": [1049, 1050], "tobia": [1043, 1048, 1050], "tobychees": [1042, 1043], "toc": [146, 236], "toc_bwd": 146, "toc_fwd": 146, "toccac": 1045, "tocsc": 183, "tocsr": 15, "tod": [409, 420, 444], "todai": [154, 1028], "todens": [967, 968, 969, 970, 971, 972, 973], "todo": [44, 230, 383, 387, 409, 1053, 1054], "toeplitz": 77, "togeth": [2, 10, 49, 58, 69, 118, 130, 149, 155, 167, 178, 219, 222, 236, 255, 311, 319, 341, 356, 361, 381, 383, 391, 392, 393, 409, 416, 417, 418, 424, 451, 453, 567, 568, 594, 689, 715, 800, 814, 864, 865, 878, 988, 989, 992, 993, 999, 1002, 1008, 1009, 1017, 1020, 1022, 1041, 1052], "toi": [7, 18, 34, 37, 38, 39, 40, 45, 47, 50, 51, 53, 55, 65, 66, 78, 84, 97, 112, 126, 131, 132, 164, 179, 187, 201, 211, 225, 236, 241, 243, 289, 290, 300, 335, 344, 372, 385, 391, 409, 416, 417, 440, 441, 442, 444, 446, 448, 449, 450, 452, 458, 469, 512, 514, 522, 563, 639, 677, 726, 756, 798, 850, 857, 865, 884, 908, 989, 991, 992, 998, 1002, 1014, 1030], "tok": [352, 417], "token": [17, 352, 365, 374, 383, 417, 536, 588, 589, 590, 591, 1035, 1043, 1047, 1053], "token_featur": 417, "token_freq": 352, "token_pattern": [352, 417, 588, 589, 591], "tokoroten": 1040, "tokyo": [872, 1003], "tol": [5, 8, 15, 71, 93, 120, 125, 146, 161, 177, 188, 190, 204, 205, 211, 213, 226, 237, 244, 246, 302, 318, 345, 350, 381, 385, 416, 421, 443, 447, 449, 452, 459, 462, 471, 472, 478, 482, 483, 484, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 559, 560, 561, 562, 602, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 797, 798, 814, 853, 861, 862, 899, 900, 904, 905, 906, 907, 908, 909, 910, 978, 988, 1006, 1007, 1024, 1028, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "tola": 1045, "told": 417, "toledano": 1043, "toler": [44, 71, 125, 161, 188, 190, 213, 214, 342, 352, 374, 381, 388, 409, 421, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 531, 532, 533, 535, 536, 540, 541, 542, 543, 544, 545, 547, 548, 559, 560, 561, 562, 627, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 691, 693, 694, 695, 844, 845, 849, 853, 861, 862, 899, 900, 904, 905, 906, 907, 908, 909, 910, 978, 988, 992, 1006, 1007, 1024, 1047, 1048, 1049, 1050], "toleranbc": 1044, "tolist": [2, 121, 161, 258, 317, 374], "tom": [0, 189, 205, 283, 285, 307, 308, 397, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tom1092": 1048, "toma": 1039, "tomasz": 1048, "tomato": 198, "tomatti": 1050, "tomdlt": 1041, "tomiock": [1050, 1051], "toml": 383, "tommaso": 1048, "tommi": [1042, 1043, 1044], "tomographi": [1, 14, 15, 64, 164, 652, 672, 988, 1014], "tomohiro": 1048, "tomorrow": 408, "tom\u00e1": [1048, 1049], "tongyu": 1052, "toni": [4, 374, 563, 884, 998, 1048, 1049], "tonk": 1042, "tony_blair": 1024, "too": [2, 5, 10, 11, 15, 25, 42, 48, 53, 55, 60, 68, 72, 80, 97, 122, 125, 161, 167, 169, 181, 198, 201, 219, 230, 236, 244, 252, 253, 257, 266, 275, 301, 311, 338, 350, 357, 358, 365, 376, 379, 385, 387, 391, 393, 406, 409, 411, 413, 416, 417, 418, 421, 437, 449, 538, 679, 692, 707, 839, 840, 841, 842, 843, 869, 882, 884, 987, 989, 991, 992, 994, 995, 999, 1026, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1053], "took": [0, 2, 40, 267], "tool": [7, 9, 120, 167, 233, 253, 257, 262, 361, 368, 372, 373, 374, 377, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 399, 402, 409, 410, 411, 487, 692, 701, 981, 987, 988, 992, 998, 1002, 1007, 1009, 1012, 1013, 1017, 1019, 1028, 1042, 1045, 1048, 1049, 1050], "toolbox": [391, 1012, 1017], "toolchain": 377, "toolkit": [365, 1012, 1017], "toolset": 1017, "tooth": [94, 1027], "tootoonian": 1048, "top": [4, 10, 12, 13, 15, 32, 35, 37, 39, 40, 41, 42, 43, 49, 60, 62, 69, 89, 95, 107, 114, 115, 118, 125, 130, 133, 167, 197, 199, 208, 212, 226, 236, 237, 243, 245, 246, 249, 256, 260, 268, 269, 288, 305, 307, 311, 316, 322, 325, 326, 338, 342, 350, 361, 379, 381, 385, 391, 405, 406, 409, 414, 415, 416, 487, 587, 588, 591, 599, 726, 756, 794, 916, 918, 981, 984, 988, 990, 1000, 1012, 1017, 1024, 1027, 1028, 1049], "top10": 374, "top5": 350, "top_featur": 13, "top_features_ind": 13, "top_indic": 350, "top_k_accuraci": 992, "top_k_accuracy_scor": [992, 1047, 1049], "tophat": [288, 415, 844, 845, 849], "topic": [1, 4, 5, 6, 14, 68, 164, 223, 253, 319, 350, 351, 352, 374, 375, 413, 414, 417, 488, 497, 536, 538, 540, 547, 588, 591, 988, 993, 1012, 1013, 1014, 1028, 1040, 1042], "topic_d": 6, "topic_idx": 13, "topic_word_prior": [414, 536], "topic_word_prior_": 536, "topisan": 1045, "toplak": 1051, "topolog": [463, 1012], "topologi": [222, 223], "torch": 404, "torgo": 373, "toro": 311, "toronto": [534, 644, 860], "torr": 1044, "torrella": [1044, 1045, 1051], "tortois": 988, "tosequ": 1053, "toshihiro": [1041, 1042, 1048], "toshniw": 1047, "tot": 10, "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 360, 366, 373, 374, 376, 385, 393, 405, 409, 415, 417, 420, 432, 444, 465, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 512, 514, 515, 519, 522, 523, 536, 544, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 583, 584, 590, 594, 596, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 678, 679, 697, 704, 705, 713, 729, 730, 731, 734, 738, 739, 757, 769, 783, 784, 787, 794, 795, 796, 800, 814, 825, 826, 827, 837, 838, 839, 840, 847, 849, 855, 862, 879, 883, 905, 907, 910, 912, 913, 914, 915, 941, 981, 988, 989, 992, 993, 994, 995, 1002, 1006, 1007, 1008, 1014, 1024, 1028, 1036, 1041, 1043, 1051], "total_cel": 125, "total_fit_tim": 6, "total_sampl": [328, 536], "total_sz_mb": 6, "total_vect_tim": 6, "totalbsmtsf": 130, "totrmsabvgrd": 119, "tottim": 385, "tour": [0, 189, 205, 283, 285, 307, 308, 397, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tournament": 981, "toward": [0, 24, 25, 61, 80, 116, 122, 129, 149, 169, 176, 201, 202, 223, 236, 345, 379, 393, 409, 448, 452, 462, 676, 678, 695, 878, 991, 1006, 1008, 1011, 1013], "toyota": 10, "tp": [409, 712, 718, 729, 730, 731, 782, 783, 784, 787, 916, 992], "tp_c": 268, "tpng": 916, "tpot": 1012, "tpr": [9, 227, 236, 253, 256, 268, 269, 386, 702, 706, 789, 992, 1032, 1035, 1051], "tpr_a": 268, "tpr_b": 268, "tpr_score": 253, "tprs_lower": 269, "tprs_upper": 269, "tr": [254, 376, 383, 409, 411, 469, 470, 471, 472, 473, 474, 475, 476, 842], "trace": [387, 409, 422, 473, 475, 476, 479, 480, 481, 689, 693, 989, 1046], "traceback": [379, 384, 387, 391, 468, 1016, 1052], "traceord": 115, "tracer0tong": 1041, "trach": 1035, "track": [107, 113, 121, 326, 379, 382, 383, 404, 534, 961, 993, 1012, 1013, 1042, 1045], "tracker": [378, 382, 387, 391, 394, 396, 402, 1010, 1013], "tracking_select": 961, "tractabl": [2, 413, 541, 634, 1012, 1048], "trade": [59, 76, 115, 125, 169, 201, 258, 260, 261, 338, 350, 393, 407, 408, 409, 411, 553, 554, 559, 560, 634, 656, 692, 800, 803, 804, 814, 827, 989, 996, 1004, 1006, 1007, 1013], "tradeoff": [53, 112, 164, 231, 239, 251, 266, 267, 268, 269, 276, 350, 365, 379, 387, 415, 515, 564, 698, 702, 727, 789, 830, 865, 884, 904, 989, 1014, 1026, 1044, 1047], "tradit": [15, 53, 197, 212, 351, 367, 406, 416, 417, 632, 694, 988, 991, 1002, 1012, 1017], "tradition": 1008, "traffic": 1017, "trail": [381, 976], "train": [2, 3, 4, 5, 6, 8, 9, 11, 22, 24, 25, 28, 29, 30, 31, 52, 54, 56, 62, 63, 68, 69, 73, 83, 84, 88, 90, 93, 96, 97, 98, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 127, 130, 131, 132, 136, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 170, 173, 180, 181, 183, 185, 186, 188, 189, 190, 192, 193, 196, 197, 198, 199, 200, 204, 205, 206, 209, 211, 212, 215, 226, 229, 231, 235, 245, 247, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 281, 283, 286, 289, 290, 291, 292, 294, 296, 299, 300, 301, 305, 307, 309, 310, 315, 318, 322, 324, 325, 326, 329, 330, 331, 334, 335, 337, 344, 345, 352, 354, 357, 358, 360, 361, 365, 366, 367, 371, 374, 376, 381, 384, 391, 392, 393, 404, 406, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 421, 437, 440, 441, 443, 444, 447, 449, 451, 452, 453, 454, 459, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 493, 496, 497, 498, 500, 504, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 691, 692, 696, 703, 741, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 869, 870, 873, 874, 877, 878, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 966, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1017, 1020, 1023, 1024, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "train_0": 2, "train_4": 2, "train_accuraci": [245, 273], "train_auc": 827, "train_ax": 98, "train_balanced_accuraci": 273, "train_cover_std": 9, "train_dataset": [167, 373], "train_error": 272, "train_errors_with": 120, "train_errors_without": 120, "train_fract": 1035, "train_idx": [11, 167, 393], "train_import": 169, "train_index": [245, 328, 413, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "train_indic": 1023, "train_indx": 413, "train_pr": 120, "train_prec_macro": 413, "train_r2": 827, "train_rec_macro": 413, "train_result": 169, "train_sampl": [25, 212, 213], "train_scor": [205, 311, 345, 355, 806, 823, 827, 828, 831, 987], "train_score_": [123, 416, 559, 560, 561, 562], "train_set": 406, "train_siz": [3, 5, 8, 109, 129, 150, 173, 213, 232, 236, 261, 272, 317, 320, 345, 802, 806, 817, 820, 828, 830, 987, 1023, 1035, 1036, 1041, 1042], "train_size_ab": 828, "train_size_idx": 345, "train_sizes_ab": 828, "train_test_s": 232, "train_test_scor": 1053, "train_test_split": [3, 4, 5, 8, 11, 22, 23, 25, 29, 30, 69, 73, 84, 98, 109, 114, 116, 120, 121, 122, 123, 124, 125, 126, 129, 142, 143, 166, 167, 169, 170, 173, 181, 192, 197, 204, 205, 212, 213, 215, 227, 236, 239, 240, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 329, 355, 359, 361, 384, 392, 404, 410, 413, 416, 437, 438, 558, 560, 567, 568, 697, 698, 700, 702, 799, 800, 822, 832, 835, 853, 861, 862, 864, 914, 915, 981, 982, 992, 994, 995, 1000, 1002, 1007, 1024, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1052], "train_tim": [212, 232, 350, 351], "trainabl": 381, "traine": 1017, "training_data": 149, "training_data_": 1045, "training_idx": 157, "training_indic": 156, "training_noisy_target": 149, "training_sample_indic": 149, "training_tim": [120, 350], "training_time_early_stop": 120, "training_time_ful": 120, "trajectori": 113, "tran": 77, "trans_data": 220, "transact": [61, 253, 376, 409, 411, 420, 422, 444, 448, 475, 534, 538, 540, 547, 563, 644, 664, 685, 686, 725, 726, 756, 769, 988, 992], "transax": [42, 60, 222, 226, 245, 291, 307], "transcript": 379, "transcriptom": 692, "transduc": 326, "transduct": [393, 409, 899, 900, 1013], "transduction_": [325, 326, 327, 899, 900, 901], "transfer": [125, 399, 404, 988, 1013], "transform": [2, 3, 4, 6, 8, 10, 12, 23, 42, 44, 45, 46, 49, 52, 55, 60, 67, 71, 72, 74, 84, 87, 88, 95, 96, 98, 99, 101, 102, 108, 113, 115, 119, 129, 130, 132, 134, 143, 155, 162, 164, 167, 168, 169, 173, 189, 197, 198, 205, 211, 213, 215, 219, 222, 226, 228, 229, 231, 233, 234, 236, 240, 245, 255, 256, 257, 260, 268, 281, 283, 285, 291, 292, 293, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 320, 322, 338, 341, 342, 350, 352, 361, 368, 373, 374, 375, 376, 379, 381, 384, 388, 393, 399, 402, 404, 406, 407, 409, 411, 412, 413, 414, 416, 417, 418, 419, 425, 430, 433, 437, 441, 442, 443, 445, 447, 449, 452, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 489, 496, 503, 508, 509, 514, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 557, 559, 561, 564, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 636, 638, 639, 640, 641, 642, 653, 658, 663, 673, 676, 684, 688, 689, 690, 691, 692, 694, 701, 702, 713, 753, 754, 785, 800, 803, 804, 814, 830, 833, 839, 848, 853, 856, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 904, 906, 909, 910, 933, 935, 981, 982, 984, 986, 988, 989, 992, 993, 996, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1019, 1024, 1025, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "transform_algorithm": [96, 102, 531, 537, 542, 1051], "transform_alpha": [96, 102, 531, 537, 542, 1048], "transform_dur": 283, "transform_func": 260, "transform_list": 863, "transform_max_it": [531, 537, 538, 542, 1045], "transform_method": 414, "transform_n_nonzero_coef": [96, 102, 531, 537, 542], "transform_n_nozero_coef": 102, "transform_output": [240, 253, 312, 468, 902, 1050, 1051], "transformed_grid": 128, "transformedtargetregressor": [73, 167, 197, 391, 399, 410, 593, 594, 597, 993, 1043, 1045, 1048, 1053], "transformedtargetregressortransformedtargetregressor": 167, "transformer_": [233, 465], "transformer_list": [72, 410, 863, 866, 982, 1046, 1047], "transformer_nam": 283, "transformer_weight": [68, 464, 467, 863, 1040, 1047], "transformermixin": [233, 283, 381, 393, 465, 1043, 1050, 1051, 1052], "transformers_": [464, 467, 1052, 1053], "transfus": 227, "transit": [15, 345, 383, 402, 1046], "transitive_target": 15, "translat": [73, 381, 419, 527, 614, 873, 874, 890, 989, 992, 1010, 1017], "transluc": 136, "transpar": [29, 307, 977, 1017], "transpil": 1012, "transpos": [23, 259, 421, 538, 540, 547, 660, 661, 662, 663, 788, 941, 978, 984, 992, 1004, 1027, 1035, 1049], "transposit": 941, "trapezoid": [266, 706, 707, 992], "travel": 0, "travers": [359, 995, 999, 1053], "travi": [1035, 1043], "treat": [2, 4, 69, 119, 130, 161, 167, 197, 268, 311, 317, 322, 328, 361, 379, 391, 393, 405, 416, 417, 442, 561, 562, 588, 589, 591, 607, 608, 632, 638, 645, 671, 674, 729, 730, 738, 754, 783, 784, 787, 788, 873, 874, 880, 881, 884, 885, 889, 892, 893, 895, 904, 905, 949, 982, 984, 988, 992, 993, 999, 1002, 1006, 1008, 1024, 1039, 1047, 1051, 1052], "treatment": [79, 166, 373, 408, 414, 469, 474], "tree": [2, 5, 10, 11, 24, 25, 29, 39, 42, 53, 60, 88, 97, 108, 111, 112, 113, 115, 119, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 141, 146, 151, 157, 161, 168, 170, 180, 205, 206, 219, 233, 234, 235, 236, 237, 256, 263, 265, 278, 281, 283, 286, 288, 296, 305, 306, 308, 310, 316, 317, 319, 335, 360, 361, 365, 368, 374, 376, 385, 392, 393, 395, 406, 408, 409, 415, 420, 437, 441, 442, 443, 444, 445, 446, 448, 450, 457, 463, 495, 496, 500, 504, 514, 515, 519, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 631, 632, 633, 634, 658, 688, 692, 702, 703, 711, 742, 748, 788, 790, 806, 821, 827, 828, 830, 839, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 865, 868, 877, 936, 982, 989, 992, 993, 998, 999, 1012, 1013, 1014, 1015, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "tree_": [315, 355, 359, 849, 912, 913, 914, 915], "tree_copi": [844, 845], "tree_disp": 237, "tree_importance_sorted_idx": 170, "tree_indic": 170, "tree_optim": 278, "tree_preprocessor": [130, 197], "tree_stat": [844, 845], "treelit": 1012, "trein": 1038, "tremend": [311, 416], "trend": [127, 154, 168, 229, 300, 1017, 1042], "trent": [1017, 1041], "trevor": [146, 185, 320, 376, 628, 656, 721, 723, 724, 982, 988, 1004, 1039, 1040, 1043, 1044, 1045, 1047], "trevorstephen": [1039, 1041], "tri": [64, 101, 218, 292, 342, 366, 381, 384, 391, 394, 406, 449, 451, 453, 631, 632, 633, 670, 692, 698, 700, 702, 814, 960, 997, 1019, 1037, 1043, 1047, 1053], "triag": [0, 368, 379, 382, 394], "trial": [2, 264, 447, 449, 460, 671, 797, 798, 988, 1041], "triangl": [393, 414, 443, 447, 459, 699, 990, 995], "triangular": [409, 463, 611, 989], "tribe": 374, "trick": [149, 232, 293, 342, 352, 364, 367, 368, 382, 391, 410, 582, 589, 643, 672, 984, 985, 996, 1006, 1007, 1026, 1027, 1030, 1036, 1044, 1052], "tricki": [406, 989], "trickiest": 379, "trigg": 566, "trigger": [69, 70, 383, 393, 402, 410, 861, 862, 864, 865, 924, 925, 941, 988, 1028, 1043, 1049, 1050], "triglycerid": [146, 376], "trim": [212, 409, 844, 845], "trimeta": 1046, "trinh": 1050, "tripl": 384, "triplet": 509, "tripramudya": 1051, "trishnendu": 1043, "tristan": 988, "triu": 10, "trivial": [7, 199, 253, 355, 379, 409, 818, 906, 909, 989, 1013, 1035], "troillard": [1051, 1052], "tropp": [535, 541], "troubl": [28, 417], "troubleshoot": [417, 1010], "troyanskaya": [628, 982], "true": [2, 3, 4, 5, 6, 8, 9, 11, 13, 15, 17, 24, 25, 28, 30, 32, 35, 42, 47, 48, 51, 52, 53, 55, 56, 58, 61, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 90, 93, 94, 95, 96, 98, 103, 107, 109, 113, 115, 119, 121, 122, 124, 125, 126, 127, 130, 131, 133, 136, 137, 142, 145, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 181, 182, 184, 185, 186, 188, 190, 192, 193, 194, 197, 199, 200, 201, 204, 205, 211, 212, 213, 215, 218, 221, 222, 226, 227, 230, 232, 233, 234, 235, 236, 239, 240, 243, 246, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 292, 296, 299, 300, 301, 302, 306, 310, 311, 312, 315, 317, 319, 320, 321, 322, 326, 328, 329, 330, 341, 342, 344, 345, 346, 350, 351, 352, 355, 356, 359, 361, 365, 366, 372, 374, 375, 377, 379, 380, 381, 384, 385, 386, 388, 392, 393, 395, 399, 402, 404, 405, 406, 409, 410, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 426, 428, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 711, 712, 713, 714, 715, 718, 719, 720, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 750, 751, 752, 754, 756, 761, 767, 769, 778, 782, 783, 784, 785, 786, 787, 788, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 923, 924, 925, 935, 941, 942, 953, 954, 957, 958, 962, 963, 964, 965, 973, 978, 980, 981, 982, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1019, 1023, 1024, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "true_coef": [166, 181, 192, 646, 647, 652, 660, 661, 662, 681, 682, 683], "true_cov": [469, 471, 472, 478], "true_den": 288, "true_fac": 235, "true_fun": 274, "true_h": 319, "true_k": 351, "true_label": [321, 325, 326], "true_nam": [4, 1024], "true_relev": [726, 756], "true_w": 319, "true_weight": 176, "trujillo": [1049, 1050], "truli": [262, 266, 367, 712, 992], "truncat": [71, 128, 219, 388, 534, 535, 539, 540, 541, 544, 676, 678, 726, 756, 797, 853, 917, 941, 981, 991, 992, 1006, 1024, 1028, 1029, 1030, 1041, 1043], "truncate_mod": 39, "truncatedsvd": [128, 219, 351, 414, 534, 535, 539, 540, 541, 692, 863, 866, 1037, 1042, 1046, 1047, 1049, 1053], "truong": 1041, "trust": [10, 24, 69, 70, 79, 109, 114, 116, 117, 126, 127, 130, 133, 143, 154, 167, 168, 169, 170, 178, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 383, 394, 402, 406, 1023, 1049], "trustworthi": [319, 1043, 1044, 1049, 1050, 1051, 1052], "truth": [18, 30, 38, 43, 47, 55, 56, 59, 76, 80, 84, 96, 100, 126, 157, 181, 191, 197, 198, 236, 249, 262, 351, 393, 407, 409, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 723, 724, 726, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 783, 784, 785, 786, 787, 790, 791, 795, 796, 992, 1019, 1027, 1043, 1049], "truthi": 953, "try": [2, 4, 9, 10, 11, 13, 23, 24, 37, 51, 69, 70, 96, 109, 114, 115, 116, 117, 118, 125, 126, 127, 130, 133, 143, 149, 154, 162, 166, 167, 168, 169, 173, 176, 178, 186, 227, 228, 229, 233, 237, 238, 239, 240, 244, 245, 248, 253, 257, 259, 260, 266, 271, 273, 278, 283, 296, 302, 311, 316, 317, 319, 320, 322, 327, 340, 345, 350, 351, 359, 374, 377, 378, 379, 381, 384, 385, 387, 391, 393, 399, 402, 409, 412, 413, 416, 417, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 503, 567, 577, 589, 658, 673, 675, 689, 693, 799, 800, 803, 804, 812, 814, 822, 825, 826, 827, 829, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 904, 923, 976, 981, 988, 989, 998, 1007, 1008, 1013, 1016, 1017, 1019, 1021, 1024, 1026, 1027, 1028, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "tr\u00e9segni": [0, 1037], "ts_cv": [2, 11, 125], "tscv": [413, 821], "tseng": 409, "tsetogl": 1050, "tsilhouett": 56, "tslearn": 1012, "tsne": [164, 218, 219, 220, 222, 223, 284, 285, 297, 319, 393, 423, 433, 496, 688, 689, 690, 848, 852, 865, 966, 989, 995, 1014, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tsne_param": 283, "tsoumaka": [720, 734, 740, 992], "tspeng": [1050, 1051], "tsuga": 1048, "tsujii": 1006, "tsukada": 1047, "tsuruoka": 1006, "tsutomu": 1046, "tt": [131, 254, 465], "ttang131": 1045, "ttime": 56, "tttthomasssss": 1039, "tube": [910, 1007], "tue": [2, 125, 168, 1041], "tuft": 449, "tulio": [1043, 1044], "tulken": 1045, "tulloch": [1038, 1039], "tumor": [146, 376, 408], "tune": [2, 25, 42, 53, 69, 98, 109, 115, 125, 145, 146, 149, 161, 164, 168, 186, 201, 202, 214, 222, 227, 236, 251, 252, 262, 263, 264, 266, 276, 278, 285, 306, 328, 338, 342, 345, 350, 359, 361, 365, 366, 367, 392, 393, 403, 406, 409, 413, 416, 418, 419, 452, 462, 496, 551, 559, 560, 561, 594, 613, 614, 615, 617, 619, 620, 622, 623, 625, 643, 658, 659, 690, 694, 700, 702, 718, 732, 742, 784, 787, 799, 800, 816, 822, 827, 830, 860, 865, 884, 902, 909, 986, 987, 988, 989, 991, 992, 995, 996, 998, 1006, 1007, 1014, 1020, 1030, 1035, 1049, 1051, 1053], "tuned_model": [253, 273], "tuned_model_coef": 273, "tuned_param": 5, "tuned_paramet": [76, 136, 257], "tunedthresholdclassifiercv": [253, 273, 408, 799, 1053], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 253, "tupl": [6, 46, 47, 53, 102, 168, 215, 372, 373, 374, 381, 393, 413, 421, 434, 451, 453, 464, 467, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 508, 510, 511, 512, 513, 514, 522, 533, 561, 562, 567, 568, 569, 570, 582, 583, 584, 587, 588, 589, 591, 627, 632, 633, 634, 711, 712, 719, 742, 781, 783, 797, 800, 814, 827, 844, 845, 863, 864, 874, 875, 879, 882, 890, 894, 906, 907, 908, 909, 910, 919, 925, 926, 928, 932, 933, 934, 935, 950, 959, 976, 999, 1041, 1042, 1046, 1047, 1048, 1053], "turn": [2, 30, 76, 161, 162, 167, 181, 212, 213, 231, 259, 287, 352, 365, 366, 367, 374, 391, 393, 394, 407, 409, 410, 412, 414, 417, 418, 419, 581, 582, 589, 607, 608, 833, 837, 906, 909, 927, 982, 986, 994, 997, 1002, 1017, 1028, 1040, 1042, 1043, 1048], "turquois": [97, 101, 102, 124, 203, 214, 221, 245, 246, 266], "tutori": [79, 136, 137, 138, 186, 199, 215, 259, 368, 379, 380, 385, 387, 392, 402, 409, 452, 462, 691, 1007, 1026, 1038], "tutorial_hom": 1028, "tuveri": 1050, "tuzova": 1043, "tv": 56, "tw": [173, 373, 487, 508, 509, 658, 1007], "tweak": [80, 233, 413, 958, 991, 1028, 1046], "tweedi": [164, 175, 197, 216, 464, 496, 552, 648, 669, 680, 706, 724, 745, 747, 749, 750, 752, 830, 865, 868, 869, 877, 884, 988, 1014, 1045, 1046, 1048], "tweedie_pow": 215, "tweedieregressor": [2, 316, 319, 648, 669, 988, 1046, 1049, 1050], "tweet": 1017, "twelfth": 696, "twenti": [17, 230, 376, 405, 409, 1028], "twenty_test": 1028, "twenty_train": 1028, "twice": [25, 253, 271, 273, 350, 352, 381, 419, 619, 730, 732, 943, 1044, 1052], "twine": 383, "twinx": 328, "twister": 1046, "twitter": 383, "two": [2, 5, 7, 9, 13, 18, 22, 24, 28, 32, 35, 37, 38, 41, 53, 58, 62, 68, 69, 73, 78, 83, 84, 88, 89, 90, 93, 95, 96, 98, 101, 108, 109, 110, 117, 118, 119, 120, 122, 125, 126, 127, 128, 131, 134, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 167, 168, 169, 176, 180, 181, 185, 186, 187, 188, 193, 197, 198, 199, 205, 206, 209, 214, 215, 220, 222, 223, 226, 231, 233, 234, 236, 243, 244, 245, 247, 248, 249, 253, 254, 256, 260, 266, 278, 286, 288, 291, 292, 294, 296, 305, 307, 310, 315, 316, 318, 319, 327, 334, 335, 338, 339, 340, 342, 346, 350, 351, 352, 356, 361, 372, 373, 374, 375, 376, 377, 379, 381, 383, 385, 386, 387, 391, 393, 394, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 457, 459, 464, 469, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 510, 514, 519, 522, 536, 538, 540, 544, 547, 549, 550, 553, 560, 570, 581, 584, 590, 591, 592, 595, 596, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 620, 621, 624, 628, 631, 632, 639, 643, 645, 670, 671, 673, 692, 699, 703, 704, 705, 712, 715, 716, 719, 721, 722, 723, 724, 731, 732, 735, 736, 738, 741, 743, 754, 755, 757, 763, 764, 771, 774, 777, 778, 779, 780, 781, 785, 786, 794, 795, 796, 797, 833, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 868, 869, 876, 877, 878, 879, 898, 899, 900, 904, 905, 912, 914, 915, 955, 971, 972, 978, 981, 982, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1019, 1023, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "two_mean": 42, "two_point_correl": [844, 845], "twoclass_output": 111, "twosigmajab": 1043, "twx": 10, "tx": 412, "tx_k": [412, 986], "txn": 10, "txt": [350, 373, 493, 503], "txt_sentoken": 1028, "ty": 412, "ty_k": 412, "tyagi": 1049, "tygert": [535, 541, 941], "tyler": [310, 1042, 1048, 1049, 1050], "tylerlanigan": 310, "type": [5, 51, 52, 63, 67, 68, 74, 79, 88, 90, 102, 118, 119, 121, 154, 162, 164, 166, 167, 168, 173, 181, 197, 199, 228, 233, 238, 240, 242, 244, 245, 248, 249, 250, 253, 254, 260, 265, 266, 268, 269, 270, 273, 278, 293, 311, 322, 342, 350, 352, 359, 361, 366, 368, 372, 373, 374, 376, 379, 382, 383, 384, 385, 391, 392, 396, 402, 405, 410, 417, 433, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 496, 508, 509, 515, 567, 572, 581, 582, 588, 589, 591, 600, 604, 617, 627, 629, 630, 638, 656, 658, 672, 674, 679, 687, 689, 692, 693, 699, 701, 707, 714, 716, 729, 730, 733, 738, 783, 784, 787, 788, 797, 798, 800, 806, 814, 823, 828, 830, 831, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 864, 865, 866, 869, 871, 877, 878, 884, 885, 902, 906, 907, 908, 909, 910, 920, 922, 924, 925, 928, 932, 933, 955, 956, 963, 966, 978, 979, 982, 984, 989, 991, 992, 993, 994, 995, 996, 1002, 1004, 1008, 1014, 1016, 1017, 1021, 1026, 1027, 1028, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "type_check": 383, "type_filt": 933, "type_of_target": [393, 871, 885, 993, 1049, 1050, 1052, 1053], "type_of_target_": 885, "typed_ndarrai": 379, "typeerror": [233, 318, 384, 711, 928, 949, 976, 1042, 1043, 1046, 1048, 1052], "typic": [23, 25, 97, 107, 120, 173, 181, 197, 201, 215, 232, 261, 262, 266, 268, 269, 289, 290, 317, 338, 351, 365, 372, 373, 374, 377, 381, 382, 383, 388, 392, 393, 402, 404, 406, 407, 409, 410, 413, 414, 416, 417, 419, 443, 447, 449, 496, 541, 551, 553, 555, 556, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 629, 638, 640, 643, 654, 655, 656, 671, 682, 683, 712, 871, 878, 882, 885, 940, 941, 949, 952, 977, 981, 985, 988, 989, 991, 992, 993, 994, 998, 1000, 1017, 1028, 1044, 1048, 1051, 1052], "typo": [379, 394, 399, 1035], "tzu": 1039, "t\u00e9l\u00e9com": [0, 1010], "u": [2, 8, 9, 10, 11, 15, 32, 48, 50, 54, 88, 93, 100, 119, 120, 125, 149, 158, 166, 167, 168, 194, 198, 201, 205, 215, 219, 222, 230, 233, 239, 240, 244, 245, 249, 253, 254, 259, 262, 266, 273, 309, 311, 342, 350, 359, 366, 368, 374, 379, 383, 385, 387, 391, 396, 399, 405, 409, 412, 414, 416, 417, 432, 463, 465, 482, 483, 484, 531, 537, 545, 546, 550, 552, 554, 556, 558, 560, 562, 565, 568, 570, 588, 589, 591, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 689, 693, 704, 720, 740, 755, 837, 838, 847, 855, 862, 884, 898, 905, 907, 910, 913, 915, 941, 984, 986, 991, 992, 999, 1002, 1010, 1017, 1028, 1032, 1045], "u2uwz2": [146, 376], "u_": [405, 482, 483, 484], "u_1": [405, 984], "u_2": [405, 984], "u_i": [409, 482, 483, 484, 755], "u_init": 543, "u_k": [412, 414], "uai": 1004, "ubuntu": [365, 377, 385, 387], "ucdenv": 44, "uchida": [177, 1045], "uci": [6, 146, 253, 310, 373, 376, 500, 502, 504, 510], "ucl": 1005, "ucla": [258, 988], "udi": 1035, "udit": 1049, "ufmay": 1047, "ufunc": [167, 1052], "ugli": [206, 291, 294, 334], "ugo": 1049, "ugurcaliskan": 1039, "ugurthemast": [1038, 1039], "uhmann": 1048, "uieda": 1048, "uint": 1046, "uint32": [374, 497], "uint8": [51, 96, 373, 497, 506, 507, 1047], "uk": [1005, 1028], "ulloa": 1041, "ulrik": [409, 452, 462, 691], "ulterior": 11, "ultim": [53, 222, 380], "umar": [1043, 1044], "umass": [4, 17, 374, 1024], "umberto": 1047, "umbrella": 408, "umpi": 417, "un": [10, 379, 406, 417, 421, 533, 589, 795, 867, 876, 887, 891, 1044], "unabl": [10, 24, 69, 70, 114, 116, 117, 126, 127, 130, 133, 143, 154, 166, 167, 168, 169, 178, 181, 197, 227, 228, 229, 233, 237, 238, 239, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 320, 322, 327, 359, 367, 884, 1002, 1044], "unadjust": [409, 992, 1047], "unaffect": 995, "unalt": 992, "unambigu": [268, 993, 1041], "unanim": 394, "unavail": [393, 658, 659, 953, 1042, 1048], "unbalanc": [164, 262, 333, 336, 339, 348, 413, 512, 631, 909, 929, 930, 981, 1006, 1014], "unbias": [76, 406, 411, 414, 437, 550, 656, 672, 674, 687, 988, 1023], "unbound": [35, 991, 1049, 1053], "uncalibr": [22, 23, 24, 437], "uncent": 178, "uncertain": [259, 326, 378], "uncertainti": [23, 125, 149, 156, 176, 261, 406, 409, 567, 568, 643, 864, 982, 1004], "uncertainty_index": [325, 326], "unchang": [167, 215, 266, 416, 433, 437, 442, 443, 444, 445, 446, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 763, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 995, 1019, 1043, 1049, 1051], "unclaim": 382, "unclear": [378, 379, 501], "unclust": 446, "uncommon": [411, 658, 904, 1007], "uncompress": [6, 508, 509, 1028], "unconstrain": [125, 127, 168, 316, 322, 374, 1006], "uncorrect": [259, 595, 598], "uncorrel": [265, 375, 528, 534, 541, 992, 1026], "uncorrupt": 3, "uncov": [103, 695], "undefin": [11, 262, 393, 712, 729, 738, 783, 961, 992, 1043, 1047, 1051], "undefinedmetricwarn": [302, 729, 730, 783, 784, 787, 1044], "under": [2, 5, 9, 22, 23, 25, 39, 65, 76, 77, 100, 119, 122, 168, 197, 226, 236, 259, 266, 268, 269, 306, 321, 368, 373, 379, 381, 383, 385, 387, 393, 396, 402, 406, 409, 411, 413, 414, 417, 418, 446, 451, 453, 470, 471, 472, 473, 474, 475, 476, 532, 539, 541, 543, 654, 655, 656, 702, 706, 707, 708, 715, 742, 754, 788, 789, 797, 798, 849, 948, 988, 989, 990, 992, 995, 1002, 1006, 1007, 1008, 1012, 1013, 1028, 1035, 1037, 1038, 1040, 1043, 1047], "underdetermin": 181, "underestim": [11, 122, 168, 197, 215, 259, 379], "underfit": [2, 32, 122, 149, 164, 169, 198, 201, 251, 275, 276, 299, 311, 345, 416, 657, 800, 803, 804, 814, 826, 827, 864, 879, 987, 988, 1014], "underflow": [1043, 1048], "undergo": 265, "undergrad": 1017, "underli": [25, 54, 78, 129, 146, 167, 170, 198, 200, 201, 233, 253, 264, 287, 288, 342, 358, 366, 379, 391, 393, 395, 399, 404, 406, 409, 411, 413, 414, 415, 416, 418, 419, 437, 451, 452, 453, 462, 464, 465, 471, 472, 478, 524, 555, 556, 564, 565, 567, 568, 569, 570, 593, 594, 597, 602, 658, 659, 665, 668, 673, 675, 680, 691, 695, 799, 800, 803, 804, 814, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 847, 849, 904, 912, 913, 914, 915, 957, 988, 989, 993, 998, 1005, 1007, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052, 1053, 1054], "underrepres": 379, "underscor": [352, 381, 393, 976, 1025, 1035, 1045, 1048], "underset": [414, 988, 995, 1008], "understand": [2, 7, 11, 39, 109, 154, 164, 168, 233, 253, 254, 257, 273, 317, 318, 335, 342, 350, 354, 355, 360, 361, 378, 379, 380, 385, 391, 395, 409, 416, 417, 504, 830, 861, 862, 912, 913, 914, 915, 918, 981, 982, 989, 991, 1008, 1011, 1012, 1014, 1017, 1035, 1049], "understood": [260, 379, 409, 949, 1025], "undertak": 391, "undesir": [55, 150, 419, 822], "undistinguish": 413, "undistort": 96, "undo": [260, 874, 1039], "undocu": 1042, "unequ": [55, 1043], "uneth": 166, "uneven": [50, 254, 409, 413], "unevenli": [55, 197, 254], "unexpect": [55, 233, 361, 379, 384, 387, 402, 535, 696, 992, 1007, 1037, 1043, 1044, 1047, 1049, 1051], "unexpectedli": [393, 1043], "unfair": 361, "unfinish": [378, 379], "unfit": [54, 410, 434, 464, 569, 570, 602, 611, 1043, 1045, 1052], "unfold": [98, 382, 989], "unfortun": [122, 166, 167, 215, 387, 391, 416, 508, 509], "unhandl": 1044, "unhelp": 379, "uni": [22, 23, 24, 25, 72, 113, 149, 150, 152, 153, 154, 155, 156, 158, 188, 231, 232, 327, 345], "unicod": [352, 417, 487, 503, 582, 588, 589, 591, 957, 1035, 1043, 1047], "unicodedata": [588, 589, 591], "unicodedecodeerror": [417, 588, 589, 591], "unifi": [278, 380, 388, 391, 392, 416, 637, 1012, 1035], "unifom": 286, "uniform": [18, 29, 35, 51, 121, 122, 126, 142, 150, 155, 158, 176, 177, 211, 223, 226, 229, 267, 286, 289, 290, 295, 299, 306, 308, 309, 312, 319, 321, 337, 381, 384, 402, 409, 438, 439, 551, 569, 570, 610, 611, 628, 639, 649, 650, 654, 668, 676, 677, 678, 699, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 804, 812, 814, 839, 840, 843, 846, 847, 854, 855, 869, 881, 883, 893, 929, 943, 981, 982, 991, 992, 995, 1041, 1043, 1045, 1049, 1051], "uniform_averag": [432, 465, 482, 483, 484, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 992, 1044], "uniform_labelings_scor": 35, "uniformli": [35, 115, 122, 141, 226, 243, 315, 381, 516, 517, 518, 551, 642, 804, 812, 814, 883, 981, 982, 992, 995, 1002, 1039, 1044], "unigram": [260, 374, 417, 588, 589, 591, 1042], "unilev": 10, "unimod": [226, 474], "unimport": [418, 1000], "uninform": [23, 25, 312, 375, 384, 417, 981, 988, 1043], "uniniti": 387, "uninstal": 377, "unintention": 1002, "unintuit": 55, "union": [68, 167, 410, 738, 754, 863, 1042], "union_not_memb": 167, "uniqu": [2, 22, 28, 40, 45, 46, 55, 56, 61, 65, 71, 116, 117, 123, 124, 125, 167, 169, 181, 212, 215, 245, 268, 292, 311, 312, 321, 328, 350, 351, 352, 373, 381, 388, 393, 409, 410, 413, 416, 417, 440, 450, 454, 456, 464, 467, 496, 549, 550, 551, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 610, 633, 634, 635, 666, 668, 676, 697, 709, 711, 754, 782, 800, 802, 814, 827, 832, 833, 836, 842, 851, 854, 856, 861, 863, 875, 877, 878, 885, 888, 904, 906, 912, 913, 914, 915, 929, 941, 955, 956, 988, 993, 1002, 1017, 1026, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "unique_label": [47, 53, 351, 381, 388], "unit": [24, 68, 78, 167, 173, 197, 215, 288, 301, 305, 351, 374, 379, 380, 381, 385, 387, 388, 414, 417, 421, 464, 489, 490, 519, 524, 532, 533, 534, 541, 542, 589, 590, 591, 607, 608, 611, 658, 659, 676, 685, 699, 770, 851, 860, 861, 862, 868, 874, 876, 880, 882, 884, 890, 891, 892, 894, 895, 904, 905, 988, 990, 991, 992, 997, 1002, 1008, 1012, 1026, 1039, 1043, 1049, 1050], "unit_eig_vec": 243, "unit_vari": [882, 894, 1047], "unitari": 941, "uniti": 407, "unittest": 379, "univ": [689, 693, 989], "univ_select": 72, "univari": [7, 8, 34, 45, 66, 70, 72, 140, 141, 143, 147, 164, 179, 196, 212, 272, 333, 348, 371, 407, 409, 410, 417, 445, 504, 525, 530, 592, 595, 596, 598, 599, 600, 602, 605, 606, 607, 608, 609, 627, 628, 629, 630, 645, 800, 805, 826, 830, 864, 865, 874, 879, 883, 884, 904, 909, 988, 1007, 1009, 1014, 1015, 1027, 1030, 1035, 1041], "univers": [0, 157, 167, 350, 374, 376, 382, 409, 414, 417, 590, 788, 839, 843, 899, 988, 990, 992, 994], "unix": 417, "unknown": [11, 54, 167, 233, 259, 325, 327, 367, 374, 393, 402, 405, 417, 871, 877, 878, 955, 991, 1002, 1019, 1039, 1043, 1047, 1048], "unknown_typ": 402, "unknown_v": 130, "unknown_valu": [119, 130, 169, 236, 311, 878, 1002, 1047, 1049, 1050], "unlabel": [4, 234, 317, 325, 326, 327, 329, 330, 393, 407, 409, 899, 900, 901, 991, 1019, 1022, 1024, 1026, 1047], "unlabeled_indic": 326, "unlabeled_set": 325, "unless": [166, 233, 244, 249, 379, 381, 382, 391, 393, 402, 406, 409, 412, 420, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 489, 496, 508, 509, 531, 535, 536, 537, 539, 542, 543, 545, 546, 547, 548, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 611, 632, 634, 639, 646, 647, 651, 652, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 709, 714, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 861, 862, 863, 866, 885, 889, 890, 892, 893, 894, 895, 899, 900, 912, 913, 914, 915, 920, 924, 925, 941, 960, 988, 991, 993, 1035, 1037, 1041, 1043, 1046, 1047, 1052, 1053], "unlik": [53, 54, 115, 167, 168, 218, 220, 248, 305, 336, 379, 381, 385, 391, 393, 399, 402, 411, 413, 414, 417, 446, 450, 535, 650, 651, 654, 655, 656, 682, 683, 785, 821, 844, 845, 884, 895, 907, 988, 991, 992, 999, 1007, 1035, 1041], "unlimit": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "unlucki": 361, "unmaintain": 1035, "unmarri": 167, "unmeaning": 1042, "unmix": [94, 421, 533], "unmixing_matrix": 533, "unmodifi": [381, 393], "unnecessari": [115, 243, 384, 443, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 705, 995, 1002, 1013, 1017, 1038, 1040, 1045, 1046, 1048, 1051], "unnecessarili": [222, 1042, 1045], "unnorm": [393, 536, 989, 1041, 1042], "unobserv": [125, 166, 167, 414], "unord": [409, 416, 1002], "unpack": 381, "unpen": [406, 648, 669, 680, 988], "unpickl": [393, 576, 844, 845, 1041, 1047, 1051], "unpleas": 1037, "unpract": 991, "unprefix": 1041, "unprocess": [450, 588, 589, 591], "unprotect": 958, "unprun": [557, 558, 564, 565, 912, 913, 914, 915], "unquot": 215, "unrealist": 374, "unreason": [215, 413], "unreg": 343, "unregular": [877, 900, 1026, 1044], "unrel": [311, 366, 384, 387, 417, 515], "unreli": [253, 410], "unrepresent": 919, "unrestrict": 493, "unrol": 222, "unrot": 103, "unsaf": 534, "unsampl": 984, "unscal": [305, 310, 988, 992, 1043, 1049], "unscaled_clf": 310, "unseen": [76, 120, 143, 186, 201, 205, 272, 289, 342, 367, 371, 381, 392, 393, 409, 413, 850, 881, 893, 983, 992, 998, 1000, 1002, 1008, 1019, 1038, 1043, 1047], "unseen_featur": [417, 581], "unset": [366, 393, 1043], "unsetmetadatapassederror": 399, "unshad": 414, "unshifft": 677, "unshift": 908, "unsign": [51, 97, 374, 582, 957], "unsmooth": 415, "unsort": [995, 1036, 1039, 1043], "unspecifi": [599, 600, 802, 989], "unstabl": [37, 64, 167, 409, 411, 412, 689, 693, 940, 941, 1008, 1039, 1040, 1042, 1047, 1049, 1051], "unstack": [215, 262], "unstructur": [12, 34, 37, 38, 39, 42, 45, 66, 164, 222, 301, 409, 441, 445, 463, 503, 530, 857, 1004, 1014, 1017, 1039], "unsuccess": 9, "unsupervis": [4, 10, 35, 47, 70, 71, 84, 93, 114, 128, 226, 234, 289, 290, 337, 350, 351, 361, 368, 371, 374, 381, 392, 393, 407, 409, 412, 414, 415, 416, 417, 418, 433, 442, 445, 532, 534, 536, 537, 539, 542, 543, 549, 563, 566, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 634, 635, 638, 639, 640, 641, 642, 677, 800, 803, 804, 806, 814, 823, 828, 831, 846, 847, 850, 852, 853, 854, 855, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 896, 897, 901, 908, 989, 992, 998, 1005, 1015, 1019, 1020, 1022, 1024, 1030, 1035, 1038, 1048, 1052], "unsupport": [399, 402, 493, 1043, 1048], "unsur": 905, "untangl": 98, "untar": 6, "unterthin": [305, 1038, 1039, 1040], "until": [53, 146, 205, 271, 317, 319, 384, 393, 394, 405, 409, 413, 418, 508, 509, 557, 558, 559, 560, 564, 565, 566, 593, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 676, 677, 678, 694, 797, 798, 803, 804, 861, 862, 901, 904, 912, 913, 914, 915, 967, 981, 988, 989, 997, 1005, 1008, 1028, 1038, 1042, 1043, 1049], "untransform": [342, 464, 467, 1003], "untru": 992, "untrust": 402, "untun": 122, "unus": [88, 99, 168, 194, 218, 220, 463, 579, 763, 771, 981, 989, 1035, 1043, 1045, 1046, 1048, 1050], "unusu": [25, 405, 998, 1002, 1043], "unveil": 1041, "unvendor": 1043, "unwant": [198, 350], "unweight": [162, 210, 463, 647, 653, 678, 707, 713, 729, 730, 738, 783, 784, 787, 788, 839, 840, 841, 842, 843, 982], "unwieldi": 875, "uoa": 897, "up": [6, 9, 35, 42, 44, 45, 46, 50, 53, 55, 60, 68, 78, 79, 87, 90, 107, 114, 125, 162, 167, 168, 176, 181, 190, 198, 213, 214, 245, 253, 261, 264, 283, 296, 302, 306, 311, 319, 326, 335, 342, 345, 350, 352, 367, 373, 374, 379, 383, 385, 386, 387, 388, 391, 393, 394, 406, 409, 414, 416, 417, 443, 447, 448, 449, 450, 452, 456, 459, 460, 461, 508, 509, 536, 549, 550, 557, 558, 559, 560, 561, 562, 564, 565, 566, 610, 627, 632, 633, 639, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 682, 683, 684, 692, 705, 769, 797, 798, 802, 803, 804, 806, 828, 878, 879, 882, 894, 912, 913, 914, 915, 918, 941, 944, 945, 981, 984, 988, 989, 992, 995, 1002, 1006, 1007, 1013, 1016, 1017, 1027, 1028, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "upadhyai": [1041, 1042, 1043, 1044], "upcast": [1045, 1049], "upcom": [154, 377], "updat": [6, 42, 60, 109, 115, 124, 231, 315, 352, 378, 379, 383, 387, 393, 402, 409, 414, 416, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 967, 988, 995, 996, 997, 1006, 1016, 1017, 1036, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1053, 1054], "update_from": 290, "update_func": 290, "update_h": 547, "update_layout": [115, 260], "update_legend_marker_s": 290, "update_terminal_region": 1044, "upgrad": [315, 316, 317, 318, 319, 320, 321, 322, 396, 1013, 1035, 1040, 1043], "upload": [373, 377, 383, 391, 671], "upload_d": 373, "upon": [215, 223, 233, 296, 374, 379, 391, 393, 402, 561, 562, 627, 630, 671, 789, 797, 798, 844, 845, 981, 988, 1008, 1019, 1028, 1049], "upper": [2, 5, 7, 22, 70, 73, 77, 78, 79, 111, 112, 113, 121, 122, 123, 124, 130, 132, 142, 153, 155, 158, 167, 191, 197, 203, 204, 207, 211, 214, 215, 230, 234, 235, 258, 259, 260, 273, 288, 289, 300, 310, 328, 337, 340, 342, 344, 409, 415, 463, 588, 589, 591, 595, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 650, 654, 677, 735, 788, 877, 878, 906, 907, 908, 928, 991, 992, 995, 1002, 1006, 1007, 1008, 1043], "upperbound": 734, "uppercas": [393, 1048], "uppercase_initi": 417, "upperlimit": 704, "upright": 374, "upstream": [365, 379, 383, 387, 391, 1002, 1044], "upward": [450, 456], "ur": 1046, "urbanowicz": 992, "urbanowicz2015": 992, "urcrnrlat": [9, 296], "urcrnrlon": [9, 296], "uri": 15, "url": [10, 15, 146, 373, 376, 381, 383], "urllib": [6, 15], "urlopen": 15, "urlretriev": 6, "urlu": 1053, "urvang": [1043, 1045], "us": [0, 1, 2, 5, 6, 7, 9, 11, 12, 13, 14, 17, 18, 19, 22, 23, 24, 25, 28, 30, 32, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 84, 88, 89, 90, 92, 95, 97, 98, 100, 101, 102, 104, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 148, 149, 150, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 209, 212, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 276, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 352, 353, 355, 357, 358, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 388, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 422, 425, 427, 428, 430, 431, 439, 456, 457, 459, 461, 463, 471, 478, 480, 481, 485, 487, 493, 503, 508, 509, 516, 531, 545, 546, 547, 548, 555, 572, 574, 575, 577, 578, 583, 585, 586, 592, 595, 596, 598, 601, 603, 609, 616, 620, 621, 624, 629, 636, 638, 642, 650, 651, 654, 660, 661, 663, 667, 675, 683, 685, 686, 687, 694, 695, 696, 699, 711, 714, 715, 716, 721, 723, 724, 726, 728, 730, 736, 739, 743, 751, 756, 758, 759, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 780, 781, 783, 791, 794, 807, 808, 809, 811, 812, 813, 824, 836, 838, 840, 844, 845, 854, 855, 856, 858, 866, 867, 870, 872, 875, 886, 887, 889, 891, 892, 894, 895, 896, 899, 903, 905, 906, 914, 915, 916, 917, 920, 923, 924, 925, 930, 931, 940, 941, 948, 955, 959, 960, 961, 963, 964, 968, 969, 970, 981, 982, 984, 985, 987, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "usa": [258, 374, 901, 982, 989, 1004, 1005], "usabl": [125, 373, 379, 381, 393, 402, 417, 800, 960, 1035, 1042, 1049, 1050], "usag": [40, 51, 69, 72, 83, 97, 107, 143, 167, 168, 227, 231, 233, 252, 253, 292, 294, 301, 334, 352, 365, 374, 378, 379, 381, 382, 386, 387, 389, 393, 394, 396, 402, 407, 409, 413, 414, 419, 420, 444, 446, 450, 464, 489, 496, 512, 515, 519, 523, 534, 535, 541, 549, 561, 562, 591, 609, 640, 648, 658, 659, 660, 666, 667, 668, 669, 676, 677, 678, 679, 680, 690, 778, 781, 792, 793, 860, 861, 863, 904, 912, 913, 914, 915, 941, 981, 982, 984, 991, 992, 993, 995, 1007, 1015, 1016, 1019, 1023, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "usal": 173, "usd": 236, "use_encoded_valu": [119, 130, 169, 236, 311, 878, 1002, 1047], "use_idf": [414, 417, 590, 591, 1028], "usecas": [316, 319, 321, 409, 562], "useless": [13, 118, 262, 385, 418, 515, 528, 658, 712, 988, 1002, 1044], "user": [1, 11, 23, 25, 53, 67, 93, 115, 158, 164, 167, 185, 218, 233, 248, 256, 266, 268, 278, 283, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 361, 365, 366, 368, 373, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 396, 399, 402, 406, 407, 409, 410, 411, 413, 414, 416, 417, 418, 420, 421, 422, 423, 426, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 937, 941, 981, 982, 988, 989, 991, 992, 993, 995, 1002, 1006, 1010, 1012, 1013, 1017, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "user_guid": 2, "user_r": 410, "userguid": 1042, "usernam": 396, "userscript": 387, "userwarn": [42, 60, 111, 158, 189, 206, 254, 343, 356, 384, 712, 1002, 1041, 1043, 1048], "ushtanit": [1047, 1048], "usp": 3, "usr": 377, "usual": [2, 11, 38, 76, 77, 79, 121, 122, 124, 130, 166, 168, 183, 197, 198, 252, 253, 256, 259, 268, 269, 273, 306, 318, 338, 361, 365, 366, 377, 379, 381, 387, 391, 392, 393, 399, 405, 409, 410, 413, 414, 416, 417, 418, 450, 456, 538, 540, 542, 547, 559, 560, 607, 608, 630, 640, 658, 659, 666, 667, 668, 676, 677, 678, 692, 726, 758, 806, 828, 832, 904, 941, 981, 982, 984, 987, 988, 989, 991, 992, 993, 996, 997, 998, 999, 1002, 1006, 1007, 1008, 1019, 1025, 1026, 1050], "utc": 992, "utf": [350, 352, 417, 487, 503, 582, 588, 589, 591], "util": [6, 8, 9, 46, 53, 54, 59, 87, 107, 109, 130, 197, 199, 205, 213, 220, 229, 233, 235, 246, 265, 267, 283, 307, 315, 328, 338, 342, 350, 366, 368, 373, 374, 379, 380, 381, 382, 391, 392, 393, 404, 408, 409, 410, 413, 414, 417, 437, 443, 444, 447, 449, 453, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 533, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 581, 582, 588, 590, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 807, 809, 818, 822, 824, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 987, 990, 992, 993, 1002, 1003, 1012, 1017, 1020, 1030, 1035, 1036, 1038, 1039, 1041, 1042], "utilis": 1041, "utkarsh": [1041, 1042, 1043, 1044], "utl": 418, "utstat": 644, "uttam": 1048, "uv": [93, 414], "uw": [146, 376, 1047], "uwha": [1048, 1049], "v": [0, 2, 7, 11, 12, 15, 17, 25, 28, 31, 32, 34, 35, 36, 37, 38, 39, 42, 45, 47, 53, 56, 66, 68, 70, 73, 75, 78, 80, 81, 82, 83, 85, 93, 95, 96, 100, 113, 115, 116, 117, 122, 123, 124, 136, 142, 149, 164, 165, 170, 171, 175, 177, 186, 195, 196, 197, 198, 200, 201, 202, 203, 206, 212, 216, 222, 230, 244, 245, 248, 249, 251, 255, 275, 276, 278, 281, 294, 312, 315, 335, 346, 351, 361, 366, 371, 376, 379, 385, 387, 393, 404, 405, 406, 407, 411, 412, 414, 417, 432, 441, 445, 452, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 482, 483, 484, 496, 512, 524, 530, 531, 537, 541, 545, 546, 550, 552, 554, 556, 558, 560, 562, 564, 565, 568, 570, 581, 589, 593, 594, 600, 606, 611, 630, 631, 634, 635, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 688, 695, 699, 701, 704, 717, 736, 737, 739, 754, 755, 757, 788, 795, 800, 805, 812, 814, 826, 830, 832, 833, 834, 837, 838, 839, 847, 855, 857, 860, 862, 864, 865, 868, 871, 877, 878, 879, 884, 885, 888, 898, 904, 905, 906, 907, 909, 910, 913, 915, 919, 986, 987, 988, 989, 992, 993, 994, 997, 1000, 1002, 1006, 1007, 1009, 1014, 1030, 1035, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1053], "v0": [383, 471, 472, 478, 512, 588, 589, 591, 800, 814, 863, 866, 1036, 1043, 1044, 1045], "v1": [253, 320, 373, 396, 561, 562, 797, 798, 1047, 1050, 1051, 1052, 1053], "v10": 253, "v11": 253, "v12": 253, "v13": 253, "v14": 253, "v15": 253, "v16": 253, "v17": 253, "v18": 253, "v19": 253, "v2": [253, 374, 497, 664, 685, 686, 988], "v20": 253, "v21": 253, "v22": 253, "v23": 253, "v24": 253, "v25": 253, "v26": 253, "v27": 253, "v28": 253, "v3": 253, "v4": 253, "v5": [253, 1043], "v6": 253, "v7": 253, "v8": 253, "v9": 253, "v_": [405, 417], "v_1": 405, "v_2": 405, "v_i": 997, "v_ih_j": 997, "v_init": 543, "v_j": [409, 755, 997], "v_k": [412, 414, 531, 537, 545, 546], "v_measur": [736, 795], "v_measure_scor": [17, 35, 36, 47, 56, 321, 351, 409, 717, 736, 737, 757, 992, 1044], "v_new": 860, "va": [6, 120, 144, 270, 291, 293, 344], "vac": 278, "vacaliuc": [1043, 1044], "vacat": 374, "vachan": 1046, "vadim": [1043, 1047, 1048], "vaerenbergh": [1050, 1051], "vaggi": [1037, 1038], "vaillant": 1047, "val": [71, 209, 259, 943], "val_errors_with": 120, "val_errors_without": 120, "val_pr": 120, "val_scor": 121, "vale": 1045, "valencia": [1049, 1051], "valentin": [1038, 1040, 1050, 1051], "valero": 10, "valgrind": 382, "valid": [6, 11, 12, 24, 25, 52, 53, 54, 55, 69, 70, 72, 73, 76, 80, 89, 100, 107, 113, 115, 118, 119, 120, 121, 122, 125, 126, 135, 139, 140, 143, 144, 146, 147, 157, 164, 167, 169, 175, 181, 183, 184, 185, 191, 197, 199, 205, 215, 216, 227, 233, 235, 239, 245, 248, 251, 256, 259, 260, 261, 263, 265, 266, 267, 268, 271, 272, 273, 274, 276, 278, 287, 302, 306, 311, 315, 317, 322, 328, 338, 345, 355, 366, 374, 379, 382, 391, 392, 393, 402, 403, 406, 409, 410, 411, 414, 415, 416, 417, 418, 423, 425, 437, 442, 443, 445, 446, 447, 449, 450, 457, 463, 464, 468, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 493, 501, 502, 504, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 575, 577, 582, 583, 589, 593, 594, 597, 602, 632, 634, 638, 639, 640, 641, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 692, 699, 701, 702, 706, 713, 728, 762, 765, 774, 778, 779, 780, 785, 792, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 870, 876, 884, 896, 897, 899, 900, 902, 904, 906, 909, 911, 912, 913, 914, 915, 924, 925, 926, 927, 928, 935, 947, 949, 952, 982, 991, 992, 993, 995, 996, 1000, 1002, 1004, 1006, 1007, 1008, 1012, 1013, 1014, 1017, 1019, 1022, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valid_metr": [844, 845, 995, 1051], "valid_scor": 987, "validate_metadata": [233, 949], "validation_curv": [321, 345, 399, 823, 987, 1042, 1043, 1044, 1047, 1051], "validation_fract": [120, 125, 205, 318, 416, 559, 560, 561, 562, 666, 667, 668, 676, 678, 861, 862, 1006, 1043, 1049], "validation_score_": [125, 561, 562], "validation_scores_": [861, 862, 1050], "validationcurvedisplai": [275, 987, 1051], "validationerror": 1049, "vallei": 311, "vall\u00e9": 1042, "valu": [2, 3, 5, 9, 10, 11, 12, 15, 17, 18, 19, 24, 25, 30, 35, 38, 40, 42, 44, 51, 53, 58, 59, 60, 64, 69, 71, 73, 76, 78, 80, 93, 96, 103, 107, 109, 111, 113, 114, 115, 116, 117, 119, 122, 123, 126, 127, 129, 130, 141, 142, 144, 145, 149, 152, 153, 155, 157, 163, 166, 167, 168, 169, 170, 173, 176, 177, 179, 181, 183, 185, 186, 187, 188, 190, 195, 197, 198, 199, 201, 203, 212, 215, 217, 218, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 236, 239, 240, 243, 249, 252, 253, 255, 257, 259, 260, 262, 264, 265, 266, 268, 270, 271, 272, 273, 275, 283, 286, 296, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 317, 328, 338, 342, 343, 345, 350, 351, 352, 355, 361, 365, 366, 367, 368, 371, 372, 373, 374, 376, 380, 381, 382, 384, 385, 386, 388, 391, 392, 393, 395, 396, 399, 405, 406, 407, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 490, 491, 493, 496, 497, 498, 501, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 769, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 925, 928, 929, 930, 931, 933, 941, 943, 949, 952, 953, 954, 955, 956, 960, 968, 969, 970, 981, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1003, 1005, 1006, 1007, 1014, 1015, 1017, 1019, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valuabl": [120, 379, 982, 1017], "valuat": 416, "value_count": [2, 11, 168, 253, 273, 278], "value_kei": [391, 919], "value_typ": [419, 617], "valueerror": [233, 234, 381, 385, 399, 468, 577, 603, 617, 635, 671, 714, 836, 854, 863, 869, 883, 923, 927, 928, 977, 978, 979, 1002, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "values_format": [697, 1045], "vamsi": 1050, "van": [0, 373, 397, 411, 469, 474, 534, 627, 692, 696, 982, 989, 992, 998, 1017, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "vandana": 1046, "vander": 177, "vandermond": [198, 1002], "vanderpla": [0, 9, 156, 198, 218, 246, 288, 296, 398, 1011, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "vang": 1048, "vanilla": [197, 404, 408, 409, 447, 449, 460, 629], "vanilla_model": 253, "vanilla_model_coef": 273, "vanrel": 1041, "vanschoren": [373, 1047], "vapnik": [593, 594], "var": [83, 84, 112, 146, 177, 259, 376, 380, 418, 641, 645, 906, 907, 908, 909, 910, 992, 1043], "var_": [534, 842, 884, 1048], "var_smooth": [842, 1043], "varanasi": [1035, 1038], "vardhan": 1039, "varepsilon": [409, 1006, 1007], "vari": [5, 11, 25, 29, 32, 42, 44, 53, 60, 63, 73, 90, 115, 116, 118, 128, 138, 145, 151, 153, 164, 167, 168, 170, 186, 188, 191, 195, 204, 207, 210, 223, 231, 236, 248, 255, 259, 262, 271, 273, 298, 303, 305, 307, 308, 310, 321, 324, 330, 331, 338, 341, 343, 347, 361, 365, 367, 374, 393, 402, 441, 445, 446, 500, 508, 514, 515, 522, 559, 560, 564, 565, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 684, 703, 763, 819, 823, 828, 830, 831, 861, 865, 869, 884, 901, 909, 912, 913, 966, 984, 987, 988, 992, 995, 996, 1005, 1008, 1014, 1017, 1042, 1043, 1051], "variabl": [2, 7, 9, 10, 11, 35, 68, 112, 116, 119, 122, 123, 125, 137, 138, 141, 146, 156, 157, 161, 162, 168, 169, 173, 181, 186, 197, 201, 202, 215, 220, 233, 236, 249, 253, 259, 262, 269, 278, 281, 310, 311, 312, 361, 365, 367, 374, 376, 377, 379, 381, 383, 384, 387, 393, 399, 404, 409, 410, 411, 412, 414, 416, 417, 418, 450, 482, 483, 484, 487, 499, 501, 508, 515, 532, 534, 536, 541, 544, 553, 559, 560, 604, 606, 607, 608, 640, 650, 651, 654, 655, 661, 682, 683, 695, 709, 747, 801, 802, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 832, 836, 837, 867, 878, 881, 885, 893, 905, 981, 982, 984, 988, 991, 992, 993, 994, 995, 997, 999, 1000, 1002, 1006, 1008, 1012, 1013, 1019, 1020, 1022, 1024, 1035, 1040, 1043, 1045, 1048, 1050], "varianc": [2, 3, 8, 11, 25, 42, 53, 55, 60, 71, 76, 78, 83, 84, 88, 93, 94, 95, 98, 100, 101, 103, 108, 124, 125, 134, 156, 158, 164, 167, 175, 177, 179, 181, 186, 187, 193, 197, 199, 202, 215, 216, 248, 253, 256, 259, 262, 268, 269, 272, 273, 292, 299, 305, 310, 351, 361, 371, 375, 388, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 421, 441, 445, 449, 463, 521, 524, 532, 533, 534, 541, 544, 549, 550, 555, 556, 558, 559, 560, 565, 603, 607, 608, 611, 625, 643, 644, 645, 652, 656, 657, 660, 662, 672, 673, 674, 675, 676, 687, 710, 728, 785, 797, 798, 842, 853, 868, 874, 880, 882, 884, 890, 892, 894, 895, 913, 915, 967, 968, 969, 973, 986, 987, 988, 990, 995, 996, 997, 1000, 1004, 1006, 1007, 1008, 1009, 1014, 1015, 1024, 1026, 1027, 1030, 1035, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "variance_weight": [728, 785, 992], "variances_": 603, "variancethreshold": [418, 869, 982, 1038, 1045, 1048, 1051], "variant": [25, 41, 93, 160, 162, 163, 164, 228, 259, 318, 319, 351, 352, 385, 409, 412, 414, 417, 419, 449, 460, 490, 493, 494, 512, 515, 543, 559, 560, 565, 615, 619, 622, 623, 627, 630, 638, 639, 641, 645, 672, 704, 801, 805, 807, 808, 809, 818, 826, 847, 865, 901, 982, 988, 989, 990, 991, 992, 994, 995, 1006, 1013, 1014, 1028, 1035, 1043], "variat": [2, 5, 10, 35, 63, 90, 127, 146, 154, 155, 162, 164, 167, 202, 242, 244, 249, 250, 256, 270, 281, 293, 316, 338, 376, 402, 413, 414, 443, 447, 459, 536, 643, 672, 674, 675, 797, 798, 818, 819, 821, 981, 992, 1002, 1005, 1008, 1012, 1014, 1024, 1026, 1029, 1030, 1038, 1040, 1041], "variegatu": [9, 296, 374, 498], "variet": 311, "varieti": [23, 161, 245, 311, 338, 387, 407, 409, 411, 417, 643, 995, 1008, 1012, 1017, 1037, 1050, 1051], "varimax": [103, 414, 532, 1047], "variou": [2, 10, 34, 35, 37, 39, 53, 56, 58, 59, 60, 66, 79, 83, 87, 96, 164, 167, 175, 205, 207, 216, 217, 218, 219, 220, 224, 230, 278, 283, 300, 309, 316, 325, 326, 350, 352, 359, 361, 365, 373, 374, 375, 376, 379, 381, 384, 392, 394, 406, 407, 409, 411, 437, 441, 472, 502, 514, 515, 525, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 594, 602, 647, 651, 653, 655, 658, 661, 663, 665, 666, 668, 673, 675, 676, 691, 692, 699, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 864, 904, 905, 981, 982, 989, 992, 995, 999, 1002, 1006, 1008, 1012, 1014, 1016, 1017, 1027, 1028, 1035, 1038, 1039, 1052], "varma": 1044, "varoquaux": [0, 10, 29, 30, 37, 38, 43, 44, 49, 50, 51, 64, 65, 71, 80, 87, 88, 95, 99, 180, 186, 187, 194, 195, 219, 221, 229, 231, 245, 307, 342, 343, 394, 397, 1011, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "varun": [1041, 1042, 1043, 1049, 1050], "vasani": 1046, "vasilei": [1017, 1042], "vasileva": 1049, "vasiloudi": 1040, "vassard": 1049, "vassilvitskii": [409, 447, 460], "vast": 379, "vastli": 310, "vathsala": [1042, 1043, 1044, 1045], "vatsan": 1041, "vavrova": 1042, "vazelh": [1043, 1044, 1045], "vazirgianni": 409, "vb": 536, "vbgmm": [1035, 1039, 1041], "vc": 377, "vcvarsal": 377, "vd": 1053, "ve": [351, 379, 417, 1017, 1028, 1042], "veal": 17, "veb2009": 409, "veb2010": 409, "vec": [93, 417, 538, 540, 547], "veclib": [365, 391], "vect": [6, 68, 260, 329, 417, 1028], "vect__": 260, "vect__max_df": 260, "vect__min_df": 260, "vect__ngram_rang": [260, 1028], "vect__norm": 260, "vector": [5, 6, 7, 8, 10, 13, 17, 18, 24, 28, 30, 34, 38, 46, 66, 70, 87, 93, 95, 96, 142, 149, 157, 178, 184, 201, 202, 209, 211, 213, 231, 232, 239, 257, 259, 260, 264, 289, 302, 305, 330, 334, 335, 338, 339, 340, 341, 342, 343, 345, 347, 348, 351, 365, 367, 368, 374, 384, 385, 388, 391, 393, 405, 406, 409, 411, 412, 413, 414, 416, 419, 420, 421, 437, 443, 444, 445, 447, 449, 450, 451, 453, 464, 465, 467, 468, 482, 483, 484, 485, 487, 489, 497, 509, 512, 521, 524, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 551, 552, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 631, 638, 640, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 691, 692, 693, 695, 699, 719, 735, 763, 768, 769, 770, 771, 773, 774, 775, 777, 778, 799, 800, 803, 804, 814, 822, 828, 831, 832, 833, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 869, 871, 876, 884, 888, 891, 902, 904, 905, 906, 907, 908, 909, 910, 911, 924, 938, 940, 941, 955, 961, 981, 984, 985, 986, 988, 989, 990, 992, 993, 994, 996, 997, 998, 1002, 1006, 1008, 1014, 1015, 1019, 1022, 1025, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1048, 1053], "vectori": [393, 1045], "vectorizer2": 588, "vectorizer_param": 329, "vectorizermixin": 1045, "vectorizing_tim": 6, "vectors_test": 374, "ved": 1052, "vedaldi": [638, 984], "veenhui": [1050, 1051, 1052], "veerkhar": 1050, "veerlosar": 1045, "veghit": 1051, "vehag": [197, 215], "vehbrand": [197, 215], "vehga": [197, 215], "vehicl": [197, 215], "vehpow": [197, 215], "vel": 376, "velkov": 1037, "veloc": 379, "vembu": 406, "vempati": 984, "vendor": [233, 1040, 1043, 1044], "venezuela": [9, 296, 374, 498], "venkat": [0, 398], "venkatachalam": [1045, 1046, 1047, 1048, 1049, 1052, 1053], "venkatesh": 1045, "venna": 696, "venthur": 1043, "venu": 393, "venv": [377, 396], "vera": [1049, 1050], "verbos": [8, 40, 48, 52, 62, 68, 70, 72, 130, 184, 260, 301, 302, 305, 318, 329, 350, 377, 383, 393, 440, 443, 447, 449, 452, 454, 459, 462, 464, 467, 471, 472, 478, 531, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 593, 594, 627, 632, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 694, 765, 778, 797, 798, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 833, 835, 838, 853, 860, 861, 862, 863, 864, 865, 866, 901, 904, 905, 906, 907, 908, 909, 910, 958, 1013, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1053], "verbose_feature_names_out": [119, 167, 168, 169, 240, 311, 318, 319, 320, 322, 410, 464, 467, 863, 1048, 1052, 1053], "verbose_interv": [797, 798], "veri": [2, 11, 23, 25, 37, 38, 40, 42, 48, 50, 58, 60, 78, 79, 80, 83, 90, 96, 122, 128, 136, 154, 161, 167, 168, 169, 186, 197, 198, 199, 202, 205, 215, 222, 226, 232, 233, 236, 243, 261, 262, 265, 266, 268, 269, 275, 283, 301, 305, 318, 325, 328, 338, 342, 347, 350, 352, 361, 365, 374, 378, 379, 381, 384, 385, 387, 391, 392, 393, 402, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 442, 447, 452, 462, 471, 472, 478, 500, 504, 510, 541, 557, 558, 561, 562, 564, 565, 567, 568, 589, 590, 622, 650, 651, 654, 655, 656, 664, 682, 683, 685, 691, 692, 695, 705, 743, 746, 792, 797, 800, 808, 810, 814, 817, 820, 844, 845, 869, 873, 874, 875, 884, 896, 897, 906, 909, 912, 913, 914, 915, 941, 981, 984, 985, 987, 988, 989, 990, 991, 992, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1017, 1026, 1027, 1035, 1040, 1041, 1043, 1046, 1048, 1050, 1051, 1052], "verif": [374, 992, 1017], "verifi": [51, 58, 107, 125, 167, 197, 379, 384, 402, 404, 976, 995], "verlag": 696, "vermeil": 1043, "veronda": 1036, "verrier": 1050, "versa": [167, 256, 350, 409, 419, 442, 607, 608, 833, 1039], "versatil": [419, 1007, 1017], "versicolor": [88, 268, 269, 504], "versicolour": [43, 88, 99, 101, 376, 1026], "version": [2, 11, 28, 44, 51, 53, 69, 93, 98, 109, 125, 151, 162, 168, 169, 173, 181, 195, 198, 199, 205, 211, 213, 233, 236, 240, 281, 301, 310, 315, 316, 317, 318, 320, 321, 322, 338, 350, 365, 368, 374, 378, 379, 380, 381, 382, 385, 387, 388, 391, 393, 394, 396, 399, 401, 402, 407, 409, 410, 412, 414, 416, 417, 419, 420, 421, 427, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 508, 509, 510, 512, 514, 522, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 707, 708, 709, 713, 714, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 739, 740, 741, 742, 743, 746, 750, 751, 753, 754, 757, 758, 759, 761, 766, 767, 769, 778, 782, 783, 784, 785, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 892, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 922, 924, 925, 935, 936, 940, 941, 948, 949, 950, 951, 952, 955, 958, 959, 960, 962, 967, 973, 978, 979, 981, 984, 986, 989, 992, 994, 996, 998, 1000, 1005, 1006, 1008, 1010, 1012, 1013, 1016, 1027, 1031, 1033], "versionad": [800, 803, 804, 814], "versionchang": 379, "versionwarn": 383, "versu": [6, 8, 29, 54, 95, 107, 108, 118, 128, 130, 134, 136, 138, 151, 157, 164, 167, 175, 206, 212, 216, 226, 231, 232, 234, 246, 251, 254, 276, 278, 289, 291, 299, 307, 324, 329, 331, 335, 336, 337, 338, 341, 342, 409, 413, 416, 419, 504, 534, 556, 610, 631, 639, 658, 659, 666, 668, 674, 675, 676, 677, 783, 800, 805, 826, 836, 865, 900, 901, 908, 909, 913, 981, 988, 992, 993, 998, 1005, 1006, 1007, 1014, 1026, 1043], "vert": [123, 169, 170, 315, 1006], "vertex": [15, 24, 409, 453, 1048], "vertic": [4, 15, 58, 121, 170, 186, 230, 231, 263, 281, 305, 308, 343, 344, 393, 405, 409, 414, 515, 697, 781, 1024], "verticalalign": [10, 24, 37, 38], "vese": 1047, "vesteghem": 1045, "veto": 394, "vettigli": 1044, "vga": 17, "vh": 941, "vi": [4, 6, 374, 699, 1024, 1043, 1046], "via": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 371, 376, 377, 380, 381, 383, 387, 391, 392, 393, 394, 396, 399, 405, 406, 409, 410, 412, 413, 414, 418, 419, 437, 501, 535, 539, 541, 543, 546, 559, 560, 567, 568, 597, 611, 616, 621, 624, 627, 638, 639, 640, 641, 656, 666, 668, 671, 673, 676, 687, 689, 692, 693, 709, 800, 824, 825, 826, 827, 828, 832, 833, 834, 836, 842, 850, 861, 863, 864, 865, 884, 885, 981, 986, 988, 989, 991, 992, 993, 999, 1000, 1006, 1007, 1013, 1014, 1017, 1019, 1030, 1035, 1039, 1040, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "viacheslav": 1041, "viard": 1046, "vibrantabhi19": 1042, "vicdemand": 125, "vice": [167, 256, 350, 409, 419, 442, 607, 608, 833, 1039], "vicent": [1048, 1049, 1050], "vicpric": 125, "victoireloui": 1049, "victor": [409, 452, 462, 1042, 1045], "victoria": 125, "video": [320, 368, 373, 382, 503, 993, 1017, 1020], "vie": 1041, "viega": 992, "view": [2, 40, 44, 76, 95, 125, 168, 194, 238, 365, 367, 379, 409, 417, 536, 645, 657, 844, 845, 919, 988, 989], "view_init": [168, 218, 220, 222], "viewabl": 379, "vighnesh": [1040, 1041, 1043], "vignesh": 1051, "vigni": 1052, "vijai": [1017, 1038], "vijalapuram": 1043, "vijeth": [1051, 1052], "vijitbenjaronk": [1042, 1043], "vika": [1047, 1049], "vikram": [1041, 1050, 1051], "vikrant": 1049, "vila": [1045, 1047], "vilhelm": [1042, 1043], "villalba": [1040, 1043, 1047], "villanova": [1047, 1048], "villaz\u00f3n": 1047, "villu": 1041, "vil\u00e9m": 1048, "vinayak": [1039, 1040, 1041, 1043, 1044, 1050, 1051], "vincent": [0, 45, 65, 152, 156, 398, 1017, 1035, 1037, 1039, 1040, 1042, 1045, 1050, 1051, 1052], "vineet": 1053, "vineyard": 311, "vinh": [409, 704], "vinh10a": 409, "viniciu": [1047, 1048], "vinit": 1043, "vink": [1046, 1048], "vinod": 1043, "vin\u00edciu": 1043, "viola": [374, 1043], "violat": [23, 338, 387, 391, 393, 635, 928, 999, 1006, 1008], "violet": [100, 1051], "violeta": 1047, "vipin": 409, "viraj": 1043, "virgil": [0, 7, 398, 1035, 1036, 1038], "virgilefritsch": 1035, "virginica": [43, 88, 99, 101, 268, 269, 376, 504, 992, 1026], "viridi": [28, 36, 283, 697], "viridis_r": 260, "virshup": 1052, "virtanen": 1040, "virtual": [380, 396, 413, 1017], "virtualenv": [377, 379, 396], "visag": 1017, "visconti": 1039, "vishaal": [1043, 1044], "vishal": 1050, "vishwakarma": 1049, "visibl": [11, 167, 168, 199, 347, 373, 379, 409, 860, 997, 1040, 1050], "vision": [534, 758, 759, 984, 988, 990, 1008, 1012, 1017, 1036], "visit": [359, 379, 999, 1016], "visual": [1, 2, 7, 11, 14, 18, 23, 28, 30, 41, 44, 47, 50, 55, 58, 59, 64, 78, 83, 89, 92, 93, 95, 97, 100, 102, 104, 114, 115, 123, 125, 126, 128, 132, 133, 144, 157, 162, 164, 168, 170, 181, 188, 197, 199, 215, 218, 219, 222, 223, 225, 228, 231, 237, 238, 241, 248, 251, 252, 253, 255, 256, 260, 261, 264, 266, 268, 269, 276, 288, 292, 293, 298, 300, 303, 305, 309, 310, 315, 317, 326, 342, 368, 371, 375, 377, 385, 386, 405, 411, 413, 414, 415, 416, 438, 441, 445, 446, 454, 472, 496, 502, 504, 507, 510, 514, 522, 532, 534, 541, 564, 566, 571, 631, 633, 645, 658, 689, 692, 697, 698, 700, 701, 702, 718, 727, 782, 789, 801, 802, 805, 806, 817, 818, 819, 820, 821, 823, 830, 861, 865, 869, 873, 874, 876, 880, 881, 882, 884, 904, 906, 907, 909, 910, 918, 937, 987, 989, 990, 995, 996, 998, 999, 1002, 1008, 1012, 1014, 1019, 1030, 1038, 1045, 1046, 1047, 1049], "visualis": [93, 96, 103, 234, 544, 801, 802, 805, 817, 818, 819, 820, 821, 995, 1013], "visualize_group": 254, "vitor": 1050, "vivek": [1042, 1043, 1044, 1052], "viz": [269, 386], "vjacheslav": 1039, "vlad": [0, 93, 234, 302, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "vladimir": [535, 941, 988, 1045, 1049, 1052], "vlahava": [720, 740, 992], "vlajic": [1046, 1047], "vlasio": [1017, 1042], "vlasovet": 1048, "vlb": 17, "vliet": 1047, "vline": [76, 95, 184, 185, 186, 198, 259, 272, 306], "vlines_": 632, "vlo": 10, "vmax": [28, 49, 80, 93, 96, 103, 152, 155, 176, 181, 188, 213, 231, 247, 254, 301, 338], "vmin": [28, 38, 80, 93, 96, 103, 152, 155, 176, 181, 188, 213, 231, 247, 254, 301, 338], "vnherdeiro": 1045, "vo": [1041, 1049], "voc": 992, "vocabulari": [90, 212, 350, 351, 391, 417, 588, 589, 590, 591, 994, 1019, 1028, 1035, 1037, 1040, 1043, 1046, 1048], "vocabulary_": [352, 417, 581, 588, 591, 1028, 1035], "void": 380, "vol": [25, 157, 181, 253, 265, 376, 409, 474, 559, 560, 628, 635, 645, 664, 685, 686, 797, 829, 841, 982, 994, 995], "voltag": 17, "volum": [0, 64, 77, 146, 154, 374, 376, 409, 411, 473, 534, 769, 988, 1007, 1017], "volume11": 409, "volume2": 676, "volume7": [666, 667], "volunt": 387, "voluntari": 350, "von": [409, 452, 462, 691, 1012, 1042, 1043], "voronoi": [44, 64, 409], "voss": 1043, "vote": [108, 110, 115, 129, 130, 131, 132, 134, 164, 193, 281, 342, 393, 394, 407, 501, 555, 556, 557, 560, 564, 565, 569, 570, 657, 832, 846, 847, 852, 854, 993, 995, 1014, 1015, 1026, 1030, 1035, 1038, 1040, 1045], "votingclassifi": [22, 24, 108, 134, 164, 206, 356, 399, 416, 504, 564, 570, 631, 658, 842, 846, 909, 912, 981, 982, 1014, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053], "votingregressor": [133, 399, 416, 569, 982, 1044, 1045, 1046, 1049, 1052, 1053], "votingregressorifittedvotingregressor": 133, "voxel": [44, 64, 585], "vp": 1017, "vq": [46, 56], "vqean3": [1043, 1044], "vredevoogd": [1037, 1038], "vrigazov": 1050, "vrishank": [1042, 1043], "vs_buildtool": 377, "vstack": [10, 24, 55, 63, 152, 153, 179, 243, 247, 283, 296, 343, 631, 993, 1043], "vstolbunov": 1040, "vt": 550, "vufg": 1043, "vukolov": [1043, 1044], "vulner": 402, "vuw": 530, "vvz2010": 984, "vx": 35, "vya": [1043, 1044, 1045], "vyom": [1050, 1051], "vz2010": 984, "v\u00e1zquez": 1038, "v\u0103n": 1050, "w": [4, 10, 12, 28, 32, 38, 40, 43, 46, 56, 62, 99, 102, 146, 161, 196, 201, 214, 233, 234, 243, 244, 245, 248, 249, 270, 302, 318, 319, 342, 343, 345, 352, 361, 366, 374, 376, 385, 402, 409, 410, 414, 416, 417, 421, 426, 432, 437, 465, 469, 472, 474, 482, 483, 484, 523, 538, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 588, 589, 591, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 699, 725, 726, 756, 799, 800, 814, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 861, 862, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 938, 943, 988, 992, 996, 997, 1002, 1004, 1006, 1007, 1024, 1028, 1045, 1049, 1050, 1051, 1052], "w0": 90, "w1": [90, 416, 657], "w1992": 416, "w2": 416, "w3": 416, "w_": [414, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 988, 992, 994, 997], "w_0": 988, "w_1": [416, 988, 996], "w_1x_1": 996, "w_2": [416, 988, 996], "w_2x_2": 996, "w_3": 988, "w_4": 988, "w_5": 988, "w_i": [416, 983, 992], "w_ij": 660, "w_init": [421, 533], "w_intercept": [904, 905], "w_j": [646, 652, 992, 1006], "w_k": [409, 416, 988], "w_l": 988, "w_mx_m": 996, "w_n": 416, "w_new": 414, "w_p": 988, "w_pad": [93, 118, 356], "w_x_1": [904, 905], "w_x_n": [904, 905], "wa": [0, 2, 6, 12, 25, 38, 68, 69, 78, 84, 90, 127, 130, 146, 158, 167, 173, 201, 222, 233, 236, 249, 252, 253, 255, 257, 259, 265, 266, 273, 278, 301, 310, 315, 316, 320, 327, 328, 350, 352, 359, 361, 365, 374, 376, 377, 379, 383, 384, 393, 396, 399, 402, 404, 405, 408, 409, 412, 413, 417, 421, 433, 440, 441, 442, 443, 445, 446, 447, 449, 450, 454, 457, 460, 464, 468, 469, 474, 482, 483, 484, 485, 515, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 659, 664, 672, 674, 676, 677, 685, 686, 688, 689, 692, 713, 729, 730, 783, 784, 787, 797, 798, 800, 803, 804, 814, 827, 829, 841, 848, 851, 853, 856, 860, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 901, 902, 935, 936, 959, 980, 981, 982, 991, 992, 995, 998, 1002, 1005, 1008, 1012, 1019, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wadawson": 1039, "wadsworth": [912, 913, 1008], "waelbenamara": 1046, "wagner": 1049, "wai": [0, 2, 15, 25, 48, 58, 69, 72, 114, 121, 126, 128, 146, 156, 167, 169, 170, 198, 201, 202, 212, 215, 228, 229, 232, 233, 236, 237, 254, 259, 266, 268, 305, 306, 318, 320, 321, 361, 365, 366, 367, 373, 375, 377, 378, 381, 382, 387, 388, 393, 394, 396, 399, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 424, 443, 444, 451, 452, 453, 459, 460, 462, 463, 469, 496, 555, 556, 563, 572, 589, 599, 600, 611, 632, 666, 667, 676, 677, 678, 699, 704, 706, 717, 736, 737, 754, 755, 757, 763, 774, 778, 788, 795, 825, 833, 850, 871, 877, 882, 888, 914, 915, 963, 966, 981, 982, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1012, 1013, 1016, 1017, 1019, 1027, 1028, 1035, 1037, 1043, 1048, 1049, 1053], "waijean": 1048, "wainwright": [721, 723, 724], "waist": 376, "wait": [15, 377, 379, 383, 393, 666, 667, 668, 676, 678, 1047], "waithera": 1045, "wal": 10, "waldo": 320, "wale": 125, "walk": [409, 415, 1038], "walker": 1039, "wall": 409, "wallach": [1039, 1040], "walli": 1043, "wallygauz": 1043, "walsh": [246, 1047, 1049], "walt": [1038, 1039, 1043], "walter": 1041, "walton": 320, "wan": 1043, "wang": [414, 536, 679, 689, 693, 726, 756, 988, 989, 992, 1038, 1040, 1041, 1042, 1043, 1047, 1050, 1051, 1053], "wangz10": 1040, "want": [0, 2, 10, 18, 22, 23, 24, 53, 62, 69, 146, 162, 167, 197, 198, 199, 233, 236, 249, 253, 259, 274, 278, 286, 301, 330, 335, 350, 361, 365, 366, 367, 377, 378, 380, 381, 383, 384, 385, 391, 392, 393, 394, 396, 399, 402, 406, 407, 408, 409, 410, 411, 416, 417, 418, 500, 503, 504, 510, 535, 549, 654, 655, 656, 658, 659, 666, 668, 674, 675, 676, 764, 799, 822, 850, 853, 869, 876, 897, 904, 981, 988, 991, 992, 993, 996, 998, 1002, 1003, 1007, 1012, 1013, 1019, 1027, 1035, 1049, 1053], "ward": [0, 12, 19, 34, 37, 38, 39, 40, 42, 44, 50, 51, 52, 54, 60, 66, 164, 170, 222, 398, 417, 441, 445, 463, 530, 857, 1014, 1035, 1038, 1040], "ward__n_clust": 52, "ward_tre": [52, 441, 445, 1035, 1039], "wardagglom": 1040, "wardagglomer": 1038, "wardclust": 1038, "wareh": 734, "warm": [382, 393, 531, 537, 543, 545, 546, 610, 653, 659, 666, 667, 668, 676, 677, 678, 988, 1013, 1045, 1047, 1049], "warm_start": [113, 153, 190, 318, 381, 385, 393, 416, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 797, 798, 853, 861, 862, 998, 1015, 1030, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049, 1051], "warn": [42, 60, 70, 197, 212, 233, 262, 283, 300, 301, 309, 365, 366, 368, 379, 382, 383, 384, 393, 402, 410, 417, 496, 538, 540, 547, 550, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 571, 572, 573, 574, 575, 576, 578, 602, 636, 693, 712, 713, 729, 730, 738, 783, 784, 787, 854, 868, 869, 907, 908, 909, 910, 912, 913, 914, 915, 924, 925, 931, 941, 949, 958, 962, 978, 979, 981, 992, 1002, 1026, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "warn_for": 783, "warn_on_dtyp": 1044, "warn_when_not_sort": 859, "warner": [10, 1050, 1051], "warshal": [688, 989], "warshaw": 1041, "warut": [1042, 1043], "wase": 1052, "washington": [9, 156, 218, 246, 288, 296], "wasn": [68, 233, 1044], "waspa": 538, "wast": [115, 385, 413, 414, 981], "watanab": 1052, "watch": [11, 366], "watchtheblur": 1047, "water": 9, "waterburi": [1043, 1044], "waterland": 1038, "waterponei": [1041, 1042], "watson": [311, 410], "wattai": 1050, "wav": 373, "wave": [191, 379, 991], "waveform": 38, "wavelet": [12, 102, 414], "wavfil": 373, "waweru": 1052, "wb": [15, 402], "wchathura": 1050, "wclf": 340, "wconnel": 1046, "wdbc": [146, 376], "wderos": 1046, "wdevazelh": 1043, "wdisp": 340, "we": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 22, 23, 24, 25, 28, 30, 32, 35, 38, 39, 40, 42, 45, 47, 48, 51, 53, 54, 55, 56, 60, 62, 63, 64, 68, 69, 70, 71, 73, 76, 78, 79, 80, 84, 87, 88, 90, 93, 94, 95, 96, 98, 100, 101, 103, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 132, 133, 136, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 180, 181, 183, 185, 186, 188, 190, 192, 194, 197, 198, 199, 200, 201, 203, 205, 206, 209, 210, 211, 212, 213, 215, 218, 219, 222, 223, 226, 227, 229, 230, 231, 233, 234, 236, 237, 239, 240, 243, 244, 245, 246, 248, 249, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 273, 274, 278, 281, 283, 285, 286, 288, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 399, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 450, 469, 470, 471, 472, 473, 474, 475, 476, 501, 523, 531, 532, 534, 537, 545, 546, 549, 561, 562, 563, 569, 570, 582, 583, 589, 611, 617, 627, 632, 633, 638, 640, 651, 655, 658, 659, 666, 668, 673, 674, 675, 676, 677, 692, 711, 718, 720, 726, 746, 756, 764, 781, 799, 806, 822, 823, 825, 846, 847, 848, 850, 852, 853, 854, 855, 856, 867, 876, 877, 878, 884, 889, 890, 892, 893, 894, 895, 897, 900, 904, 908, 956, 958, 981, 982, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1017, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053], "wea": 406, "weak": [83, 120, 123, 201, 215, 265, 413, 559, 630, 995, 1017, 1051], "weak_learn": 109, "weak_learners_info": 109, "weak_learners_misclassification_error": 109, "weaker": [73, 561, 562], "weakest": [355, 1008], "weaklearn": 553, "weakli": 64, "weather": [2, 11, 154, 168, 408, 988, 992], "web": [146, 373, 374, 376, 379, 382, 387, 402, 409, 417, 521, 897, 992, 1002, 1031, 1035], "weber": 1042, "weblog": 409, "webpag": [15, 173, 379], "websit": [373, 374, 376, 379, 394, 996, 1006, 1016, 1017, 1028, 1036, 1037, 1038], "wed": [2, 125, 168], "weed": 604, "week": [2, 11, 125, 322, 378, 379, 394, 496, 1017, 1049], "weekdai": [2, 168], "weekday_co": 2, "weekday_sin": 2, "weekend": [2, 125], "weezel": [1050, 1051], "wegelin": 412, "wehenkel": [416, 557, 558, 565, 566, 914, 915], "wei": [0, 398, 1006, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1048, 1051], "weibul": 309, "weidemann": 1049, "weigh": [413, 1042], "weight": [4, 9, 12, 13, 17, 22, 30, 52, 68, 103, 122, 131, 132, 138, 142, 143, 153, 154, 162, 164, 167, 175, 181, 186, 188, 197, 201, 202, 204, 207, 208, 209, 211, 212, 213, 215, 216, 233, 238, 243, 247, 253, 257, 262, 266, 268, 286, 289, 295, 296, 298, 299, 300, 302, 303, 310, 312, 315, 318, 322, 325, 326, 333, 338, 340, 342, 343, 345, 346, 348, 350, 351, 352, 359, 361, 375, 376, 388, 391, 393, 408, 409, 411, 412, 414, 415, 418, 420, 426, 432, 437, 440, 443, 444, 446, 447, 449, 453, 459, 460, 463, 464, 465, 467, 469, 474, 482, 483, 484, 496, 515, 524, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 589, 590, 591, 593, 597, 602, 603, 610, 611, 628, 632, 633, 634, 635, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 689, 693, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 769, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 866, 869, 883, 884, 885, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 929, 930, 943, 967, 973, 982, 983, 988, 989, 991, 992, 994, 995, 996, 997, 999, 1002, 1005, 1006, 1007, 1008, 1013, 1014, 1019, 1026, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "weight_concentration_": 797, "weight_concentration_prior": [243, 249, 797, 991], "weight_concentration_prior_": 797, "weight_concentration_prior_typ": [243, 249, 797, 991, 1041], "weight_vector": [1035, 1045], "weighted_acc": 399, "weighted_mod": 388, "weighted_n_node_sampl": 359, "weightedmetaregressor": 233, "weights_": [243, 797, 798, 1049], "weights_handl": 210, "weights_init": 798, "weijiadu": 1049, "weinberg": 417, "weinsberg": 1035, "weinstein": 1036, "weisberg": 988, "weiss": [0, 245, 398, 409, 691, 1035], "weitzenfeld": 1017, "weka": 841, "welch": 1041, "welcom": [368, 378, 379, 387, 394, 1013], "welind": 1035, "well": [0, 2, 7, 10, 18, 22, 23, 25, 32, 37, 46, 51, 55, 56, 60, 68, 76, 84, 109, 110, 112, 115, 120, 122, 128, 130, 146, 154, 156, 166, 167, 168, 169, 173, 181, 185, 195, 197, 198, 199, 201, 205, 218, 219, 220, 223, 226, 230, 233, 236, 245, 253, 259, 266, 268, 270, 275, 278, 283, 286, 288, 289, 290, 312, 316, 317, 318, 319, 320, 321, 322, 342, 345, 350, 351, 352, 361, 374, 376, 378, 379, 383, 385, 387, 388, 391, 392, 393, 394, 402, 406, 409, 411, 413, 414, 416, 418, 420, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 721, 722, 723, 724, 785, 788, 792, 795, 797, 798, 799, 800, 803, 804, 814, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 939, 940, 960, 981, 982, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1005, 1006, 1008, 1009, 1012, 1013, 1017, 1027, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1046, 1053], "wen": 1050, "wenbo": [1045, 1047], "wendi": 1045, "wendling": 1042, "weng": 1007, "wenhao": [258, 1043, 1044], "wenhaoz": 258, "wenhua": 1041, "wenjian": 1041, "wenliwyan": 1046, "went": [383, 992], "were": [0, 2, 30, 68, 69, 72, 78, 79, 115, 119, 122, 125, 143, 146, 154, 162, 197, 198, 201, 227, 236, 268, 270, 301, 302, 310, 316, 317, 319, 320, 321, 322, 328, 342, 350, 352, 359, 361, 373, 374, 376, 379, 380, 383, 391, 393, 399, 405, 410, 416, 417, 464, 467, 468, 496, 561, 562, 602, 803, 804, 819, 828, 851, 901, 902, 981, 984, 992, 993, 1008, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "weren": [350, 878, 1044], "werman": 1047, "werneck": 1043, "werner": [1042, 1047], "werror": 387, "wersd\u00f6rfer": 1037, "weslei": [590, 730], "westermann": [0, 369, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "western": 417, "weston": [3, 414, 535, 593, 594, 900], "westov": 1043, "wetter": 168, "wfc": 10, "wget": 387, "wh": [414, 538, 540, 547], "wh_i": 414, "what": [0, 2, 7, 10, 11, 38, 43, 50, 51, 84, 94, 98, 118, 166, 167, 186, 203, 205, 213, 228, 233, 240, 301, 350, 352, 355, 361, 366, 374, 377, 379, 380, 381, 383, 385, 387, 392, 393, 394, 395, 408, 409, 415, 416, 417, 503, 536, 588, 589, 591, 646, 652, 696, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 991, 992, 993, 995, 1008, 1013, 1019, 1035, 1042], "whatnot": 350, "whats_miss": 383, "whats_new": [383, 387], "wheel": [377, 379, 383, 396, 1045, 1047, 1049], "wheeler": [1046, 1047], "wheelhouse_upload": 383, "when": [0, 2, 7, 8, 9, 11, 18, 22, 23, 24, 25, 32, 37, 38, 41, 54, 58, 65, 68, 69, 70, 76, 78, 79, 84, 93, 96, 97, 98, 100, 112, 115, 118, 119, 120, 122, 125, 126, 130, 131, 132, 143, 149, 161, 166, 167, 168, 169, 170, 176, 177, 181, 186, 188, 190, 194, 197, 199, 201, 202, 213, 226, 227, 228, 232, 233, 240, 244, 246, 255, 258, 259, 260, 261, 262, 266, 268, 269, 273, 278, 283, 285, 286, 289, 290, 291, 305, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 322, 327, 328, 330, 338, 341, 342, 345, 350, 351, 352, 355, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 425, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 578, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 712, 713, 716, 727, 728, 729, 730, 732, 734, 735, 738, 746, 748, 751, 754, 755, 757, 761, 763, 767, 768, 769, 771, 774, 778, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 795, 797, 798, 799, 800, 803, 804, 805, 806, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 891, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 923, 924, 925, 931, 935, 939, 940, 941, 942, 944, 945, 950, 953, 960, 961, 981, 982, 984, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1016, 1017, 1019, 1025, 1026, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whenev": [156, 166, 253, 361, 373, 387, 393, 396, 406, 482, 483, 484, 496, 628, 630, 983, 991, 1013, 1045], "where": [6, 9, 10, 12, 15, 17, 18, 22, 23, 24, 30, 51, 53, 55, 78, 84, 90, 93, 96, 102, 103, 109, 111, 113, 115, 119, 120, 122, 125, 127, 143, 144, 146, 149, 155, 158, 162, 167, 176, 181, 189, 198, 201, 206, 207, 208, 210, 214, 215, 218, 220, 221, 226, 227, 230, 233, 234, 236, 238, 249, 253, 255, 256, 259, 261, 265, 266, 268, 270, 271, 273, 278, 281, 302, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 326, 327, 336, 342, 345, 346, 347, 350, 355, 356, 361, 365, 366, 367, 373, 375, 376, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 394, 396, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 432, 437, 444, 447, 448, 452, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 496, 526, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 582, 583, 584, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 613, 615, 619, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 691, 692, 693, 696, 707, 711, 712, 716, 725, 729, 730, 731, 739, 741, 755, 763, 768, 769, 770, 773, 781, 782, 783, 784, 787, 788, 792, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 847, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 874, 877, 879, 880, 883, 884, 890, 892, 898, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 932, 933, 934, 935, 941, 949, 952, 977, 981, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1013, 1019, 1020, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wherea": [11, 32, 46, 51, 65, 78, 126, 211, 236, 260, 261, 262, 268, 286, 310, 342, 345, 346, 367, 394, 413, 416, 444, 446, 565, 658, 659, 802, 818, 832, 984, 991, 993, 995, 1002, 1008, 1048, 1053], "wherein": 393, "whether": [6, 8, 11, 69, 107, 126, 152, 155, 157, 167, 168, 197, 201, 215, 219, 227, 233, 253, 257, 305, 359, 361, 366, 374, 377, 378, 379, 381, 383, 384, 385, 393, 399, 408, 409, 410, 411, 413, 414, 416, 418, 421, 440, 442, 451, 453, 454, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 491, 492, 496, 497, 503, 508, 509, 514, 522, 527, 531, 532, 537, 538, 539, 540, 542, 545, 546, 548, 552, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 581, 588, 589, 590, 591, 597, 602, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 636, 637, 638, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 690, 694, 695, 697, 698, 700, 702, 704, 712, 742, 761, 767, 774, 778, 782, 789, 800, 803, 804, 805, 806, 814, 818, 819, 822, 823, 824, 827, 828, 830, 833, 835, 838, 839, 840, 841, 843, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 868, 885, 891, 904, 905, 906, 907, 908, 909, 910, 916, 918, 922, 924, 925, 926, 928, 940, 941, 948, 949, 965, 976, 980, 981, 982, 987, 988, 992, 997, 998, 1004, 1006, 1007, 1017, 1042, 1043, 1044, 1052], "whi": [167, 169], "which": [0, 2, 5, 8, 10, 11, 12, 13, 15, 17, 18, 19, 23, 24, 25, 32, 35, 37, 38, 41, 42, 44, 47, 51, 53, 54, 55, 56, 63, 65, 68, 69, 70, 73, 76, 78, 79, 84, 88, 90, 95, 97, 98, 103, 109, 112, 113, 114, 115, 119, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 136, 141, 143, 145, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 168, 170, 173, 176, 177, 181, 186, 190, 197, 198, 199, 201, 203, 205, 211, 213, 214, 215, 218, 219, 220, 222, 226, 227, 230, 231, 232, 233, 234, 236, 237, 243, 244, 248, 249, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 278, 281, 283, 288, 289, 290, 300, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 338, 342, 345, 347, 350, 351, 352, 355, 359, 361, 365, 366, 367, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 487, 523, 531, 532, 533, 534, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 579, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 617, 619, 622, 627, 628, 629, 630, 632, 633, 634, 640, 642, 643, 644, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 709, 716, 717, 719, 720, 723, 725, 726, 734, 735, 736, 737, 742, 743, 746, 756, 758, 778, 779, 780, 781, 782, 783, 789, 797, 798, 799, 800, 803, 804, 805, 806, 808, 810, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 861, 864, 868, 871, 875, 877, 878, 879, 882, 883, 884, 885, 886, 888, 896, 897, 899, 900, 901, 904, 906, 909, 910, 912, 913, 914, 915, 916, 920, 933, 936, 940, 941, 943, 948, 949, 950, 952, 960, 961, 964, 967, 973, 976, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1017, 1019, 1021, 1023, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whichev": [409, 416, 446, 544, 561, 562, 633, 650, 654, 656, 664, 682, 683, 697], "whidou": 1048, "while": [0, 2, 5, 6, 8, 10, 15, 18, 22, 25, 32, 35, 37, 41, 42, 46, 53, 60, 64, 68, 71, 73, 90, 97, 98, 109, 112, 115, 116, 120, 125, 127, 130, 146, 150, 155, 157, 158, 161, 166, 167, 168, 169, 173, 176, 178, 181, 186, 191, 197, 199, 201, 213, 226, 229, 230, 233, 234, 244, 245, 249, 252, 253, 254, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 285, 305, 306, 307, 310, 311, 312, 315, 318, 321, 322, 335, 338, 350, 352, 359, 361, 366, 371, 372, 373, 374, 375, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 394, 402, 406, 407, 408, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 444, 464, 467, 468, 483, 485, 496, 521, 532, 552, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 575, 582, 588, 589, 590, 591, 594, 597, 602, 606, 634, 643, 646, 647, 649, 656, 657, 658, 659, 676, 677, 678, 679, 708, 730, 754, 774, 778, 788, 794, 797, 800, 801, 802, 805, 806, 807, 808, 809, 810, 814, 815, 816, 818, 823, 825, 826, 827, 828, 829, 831, 839, 850, 852, 854, 855, 856, 863, 864, 865, 866, 867, 880, 892, 897, 902, 904, 905, 912, 913, 914, 915, 920, 945, 981, 982, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 998, 999, 1002, 1004, 1007, 1008, 1012, 1013, 1019, 1025, 1026, 1027, 1028, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "whilst": [113, 220], "whisker": 8, "white": [56, 58, 93, 154, 167, 211, 218, 289, 302, 307, 330, 337, 414, 417, 625, 1008, 1035, 1038, 1041, 1045, 1049], "whitekernel": [149, 154, 155, 419, 611, 612, 614, 1046], "whiten": [4, 93, 94, 95, 287, 414, 421, 533, 534, 541, 882, 884, 1002, 1024, 1039, 1041, 1049, 1050, 1053], "whiten_solv": [421, 533, 1050], "whitening_": 533, "whitespac": 417, "whl": 383, "who": [0, 68, 167, 366, 368, 374, 379, 386, 394, 396, 846, 847, 848, 850, 852, 854, 855, 856, 1010, 1012, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "whole": [8, 48, 72, 125, 133, 162, 198, 236, 256, 263, 338, 342, 355, 365, 379, 391, 392, 410, 412, 416, 419, 449, 483, 538, 555, 556, 557, 558, 563, 564, 565, 566, 570, 685, 686, 800, 803, 804, 814, 828, 839, 840, 841, 842, 843, 981, 992, 1002, 1028, 1043, 1045], "whose": [53, 77, 78, 79, 146, 154, 197, 336, 374, 387, 388, 393, 406, 409, 411, 416, 418, 419, 422, 437, 438, 439, 448, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 515, 534, 538, 540, 541, 544, 547, 549, 572, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 640, 671, 695, 718, 800, 807, 814, 829, 850, 869, 896, 897, 940, 971, 972, 986, 993, 997, 998, 999, 1007, 1038, 1043, 1044, 1046, 1049], "why": [25, 35, 50, 93, 109, 115, 125, 167, 169, 173, 186, 253, 256, 259, 278, 350, 351, 379, 387, 393, 409, 411, 414, 420, 444, 447, 451, 992, 994, 1007, 1023, 1026, 1038], "wick": 1047, "wide": [25, 58, 59, 88, 112, 230, 306, 391, 409, 414, 417, 981, 988, 1012, 1017, 1028, 1035, 1037, 1051], "widehat": 152, "wider": [11, 199, 417, 917, 988], "widetild": 1008, "width": [6, 8, 11, 43, 51, 78, 88, 95, 96, 101, 102, 103, 112, 118, 119, 122, 132, 142, 151, 157, 180, 240, 243, 258, 286, 305, 307, 308, 311, 317, 320, 335, 376, 410, 438, 439, 452, 464, 493, 494, 506, 521, 586, 869, 917, 1002, 1006, 1008, 1025, 1026, 1043], "wiesel": [411, 422, 475], "wignal": [1038, 1039, 1045, 1046], "wijewardena": [0, 1038, 1039, 1040], "wiki": [15, 22, 385, 387, 595, 636, 668, 671, 695, 705, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 988, 1008], "wikic": 984, "wikipedia": [1, 14, 22, 164, 387, 407, 409, 595, 607, 608, 636, 656, 668, 671, 682, 683, 695, 704, 705, 707, 709, 712, 716, 718, 726, 729, 730, 731, 734, 735, 738, 743, 756, 783, 785, 786, 788, 789, 792, 793, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 984, 988, 992, 995, 1004, 1008, 1014, 1028, 1035, 1042], "wikipedia_principal_eigenvector": [14, 15, 1014], "wikipediadet2017": 992, "wil": 1047, "wild": [4, 372, 493, 494, 508, 509, 1024, 1030, 1035], "wilderness_area": 236, "wildli": [288, 991], "wilei": [376, 982], "wilhelm": [214, 1039, 1041, 1045], "wilk": 406, "wilksch": 1050, "willamett": 311, "willard": 1047, "willdarnel": 1045, "willduan": 1042, "william": [146, 374, 376, 419, 610, 611, 614, 619, 622, 639, 984, 992, 996, 1042, 1043, 1044, 1045, 1050, 1051], "williamson": 1045, "willing": [166, 256, 408], "willocx": 1045, "willpeppo": 1047, "wilson": [78, 376, 1035, 1038], "wiman": 1035, "wimld": 1049, "winata": [1045, 1047], "wind": [168, 993], "windber": 1046, "windiana42": 1051, "window": [17, 329, 374, 379, 381, 382, 417, 1012, 1035, 1038, 1042, 1046, 1048, 1049, 1053], "windowsapp": 396, "windowserror": 1051, "windspe": [2, 168], "wine": [7, 239, 310, 311, 372, 510, 1030], "wine_review": 311, "wineri": 311, "winn": 992, "winter": [2, 11], "winterman": 1036, "wip": [379, 387, 396], "wipf": [645, 988], "wire": [385, 534, 541], "wiryadi": 1047, "wisc": [146, 376, 899], "wisconsin": [146, 170, 372, 500, 1000, 1030, 1040], "wise": [5, 24, 46, 157, 198, 226, 269, 305, 351, 365, 393, 406, 409, 413, 414, 418, 458, 531, 534, 537, 541, 545, 546, 549, 550, 553, 555, 556, 559, 560, 592, 595, 596, 598, 599, 600, 606, 640, 652, 700, 754, 832, 851, 881, 894, 895, 898, 965, 967, 968, 969, 970, 973, 984, 986, 988, 992, 993, 1006, 1013, 1035, 1040, 1043, 1044, 1045], "wish": [373, 379, 386, 388, 396, 409, 941, 1020, 1028, 1042], "wishart": 797, "wissen": 450, "with_cent": [882, 894], "with_error": 701, "with_mean": [384, 884, 895, 1002, 1043, 1048], "with_scal": [882, 894], "with_std": [884, 895, 1002, 1043], "with_traceback": [571, 572, 573, 574, 575, 576, 577, 578], "withheld": 413, "within": [2, 18, 58, 114, 116, 117, 120, 125, 129, 143, 145, 146, 193, 198, 199, 209, 215, 233, 237, 257, 258, 262, 272, 305, 306, 317, 336, 339, 342, 345, 352, 361, 365, 374, 379, 383, 388, 391, 393, 394, 399, 405, 406, 407, 409, 410, 413, 415, 416, 420, 444, 448, 461, 463, 464, 466, 469, 474, 515, 549, 567, 568, 569, 570, 593, 594, 632, 692, 696, 699, 710, 725, 781, 797, 798, 805, 806, 818, 819, 828, 829, 844, 845, 846, 847, 852, 854, 855, 856, 863, 864, 865, 877, 885, 889, 890, 892, 893, 894, 895, 906, 907, 908, 909, 910, 912, 913, 914, 915, 981, 986, 988, 989, 995, 998, 1002, 1005, 1007, 1008, 1013, 1017, 1019, 1023, 1026, 1028, 1037, 1038, 1042, 1043, 1048, 1049, 1051, 1052, 1053], "without": [2, 3, 11, 12, 22, 34, 40, 42, 45, 50, 53, 54, 60, 64, 65, 66, 73, 98, 115, 120, 121, 124, 125, 127, 130, 137, 142, 146, 156, 164, 166, 167, 168, 181, 186, 205, 226, 230, 233, 234, 236, 237, 239, 252, 253, 260, 264, 266, 278, 284, 285, 286, 292, 293, 294, 295, 297, 305, 306, 310, 312, 315, 342, 345, 351, 367, 374, 375, 377, 379, 380, 381, 383, 384, 385, 388, 391, 392, 393, 399, 402, 409, 410, 414, 416, 417, 418, 419, 434, 439, 441, 446, 458, 469, 474, 496, 504, 515, 532, 534, 555, 556, 563, 579, 580, 611, 627, 631, 634, 639, 659, 692, 700, 781, 803, 804, 805, 812, 814, 829, 830, 846, 853, 857, 863, 864, 867, 870, 873, 874, 876, 880, 881, 882, 884, 889, 904, 920, 961, 981, 982, 984, 986, 988, 989, 992, 995, 998, 1002, 1006, 1007, 1008, 1012, 1013, 1014, 1019, 1020, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "withstrok": 38, "witten": 413, "wittenau": 1040, "wk": 705, "wl": 377, "wminkowski": [1047, 1049], "wmt": 10, "wnl": 417, "wo": 417, "wojdyla": [1050, 1051], "wolberg": [146, 376], "wolf": [8, 13, 27, 32, 33, 75, 76, 79, 80, 81, 164, 292, 473, 475, 479, 480, 512, 549, 986, 1014, 1042], "wolframalpha": 1045, "wolodzko": 1048, "wolosonovich": 1043, "wolpert": [416, 567, 568], "wompner": 1043, "won": [130, 301, 351, 383, 409, 468, 496, 627, 628, 630, 687, 704, 717, 736, 737, 755, 757, 795, 991, 1002, 1040, 1041, 1046], "wonder": [350, 377], "wonpil": 988, "wood": 1044, "woolam": [325, 326, 327, 330, 1035], "word": [6, 13, 17, 68, 149, 230, 234, 338, 351, 352, 365, 374, 375, 379, 381, 384, 393, 405, 408, 409, 411, 412, 413, 414, 453, 511, 523, 534, 536, 541, 588, 589, 591, 696, 833, 843, 901, 986, 990, 994, 997, 1002, 1005, 1006, 1017, 1026, 1027, 1035, 1043], "word_col": 17, "word_scor": 17, "word_token": 417, "wordnetlemmat": 417, "work": [0, 2, 7, 11, 15, 30, 42, 43, 46, 50, 65, 76, 112, 119, 133, 146, 155, 156, 166, 167, 168, 186, 201, 214, 233, 243, 245, 257, 278, 289, 290, 311, 316, 318, 319, 321, 340, 342, 351, 352, 361, 366, 367, 368, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 402, 404, 405, 406, 409, 410, 411, 414, 416, 417, 418, 421, 422, 423, 424, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 460, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 504, 508, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 708, 742, 774, 778, 779, 780, 781, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 941, 945, 960, 981, 982, 984, 986, 987, 988, 989, 991, 992, 994, 995, 998, 999, 1002, 1005, 1006, 1012, 1013, 1017, 1019, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "work_directori": 1028, "workabl": 384, "workaround": [311, 379, 800, 814], "workclass": [322, 496], "worker": [366, 393, 417, 958, 959, 960, 1050], "workflow": [379, 382, 383, 392, 413, 1016, 1030], "working_memori": [365, 366, 468, 781, 902, 1043], "workingdai": [2, 168], "workload": [960, 1012], "workshop": [0, 409, 417, 839, 994, 1011], "workspac": 1028, "workstat": 387, "world": [0, 53, 68, 72, 167, 201, 222, 236, 253, 350, 365, 368, 372, 376, 409, 414, 417, 957, 982, 992, 994, 1011, 1013, 1017, 1022, 1030, 1035], "worldwid": 1017, "wornbb": 1046, "worri": [52, 989, 1020], "wors": [2, 84, 109, 150, 168, 203, 259, 267, 281, 310, 361, 406, 409, 419, 432, 465, 482, 483, 484, 552, 554, 556, 558, 560, 562, 565, 568, 570, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 705, 721, 722, 723, 724, 728, 785, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 992, 1002, 1044], "worse_prob": 259, "worsen": 120, "worst": [146, 197, 311, 376, 409, 444, 447, 708, 729, 730, 783, 784, 787, 792, 793, 829, 992, 1017, 1035, 1048], "worth": [53, 118, 168, 197, 379, 387, 1017], "worthwhil": [70, 393], "would": [0, 2, 4, 7, 11, 24, 25, 30, 43, 51, 53, 56, 68, 76, 78, 79, 84, 90, 98, 109, 122, 146, 149, 154, 155, 167, 168, 169, 170, 173, 181, 187, 197, 198, 199, 212, 215, 226, 233, 236, 245, 253, 255, 259, 260, 265, 267, 269, 273, 278, 283, 289, 301, 305, 306, 310, 311, 318, 321, 328, 338, 342, 345, 346, 350, 352, 359, 361, 365, 374, 375, 379, 380, 381, 385, 387, 388, 391, 392, 393, 394, 399, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 432, 446, 465, 468, 482, 483, 484, 489, 527, 532, 534, 536, 541, 544, 552, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 583, 584, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 700, 702, 708, 712, 713, 720, 756, 778, 782, 785, 789, 800, 802, 814, 829, 837, 838, 847, 855, 862, 889, 890, 892, 893, 894, 895, 896, 897, 902, 904, 905, 907, 910, 912, 913, 914, 915, 949, 952, 981, 982, 985, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1007, 1012, 1013, 1017, 1019, 1024, 1026, 1028, 1032, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wp": [417, 657, 671], "wpd": 350, "wprd": 417, "wrap": [93, 114, 122, 283, 373, 381, 393, 402, 433, 508, 657, 676, 830, 888, 982, 992, 995, 1007, 1012, 1035, 1040, 1043, 1045, 1046, 1048, 1050], "wraparound": 380, "wrapper": [25, 283, 385, 388, 413, 419, 544, 620, 668, 671, 742, 904, 988, 1008, 1012, 1039, 1047], "wrapt": [658, 659], "wrath": 410, "write": [6, 15, 162, 233, 350, 365, 366, 373, 377, 378, 379, 383, 384, 385, 387, 388, 391, 393, 402, 404, 410, 414, 417, 1003, 1013, 1028, 1036, 1048, 1052], "writer": 350, "written": [3, 5, 27, 33, 49, 51, 87, 96, 144, 164, 204, 252, 287, 302, 318, 325, 326, 366, 376, 379, 380, 381, 385, 387, 391, 393, 407, 410, 415, 487, 502, 508, 697, 713, 830, 909, 916, 986, 988, 992, 996, 997, 1006, 1011, 1014, 1019, 1020, 1025, 1028, 1044], "wrong": [58, 197, 253, 289, 350, 361, 376, 379, 381, 417, 504, 726, 756, 793, 992, 998, 1007, 1038, 1040, 1042, 1043, 1044, 1045, 1048, 1052], "wrongli": [197, 338, 1053], "wrote": [130, 374], "ws2001": 984, "wspace": [12, 13, 37, 42, 43, 60, 78, 93, 111, 197, 215, 226, 243, 245, 246, 249, 288, 296, 326, 335], "wstate": 1048, "wtv": 385, "wtw": 385, "wu": [1007, 1039, 1047], "wurp": [1049, 1050], "wuthrich": [197, 215], "ww": 414, "www": [4, 69, 173, 197, 213, 215, 227, 273, 281, 301, 373, 374, 379, 387, 396, 409, 413, 442, 449, 487, 508, 509, 531, 534, 537, 541, 644, 658, 664, 671, 685, 686, 853, 860, 912, 913, 988, 1005, 1024], "www4": [146, 376], "wyseguy7": 1041, "w\u00fcthrich": 406, "x": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 22, 23, 24, 25, 28, 29, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 77, 78, 79, 80, 83, 84, 89, 90, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 218, 219, 220, 223, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 372, 373, 374, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 399, 402, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 493, 494, 495, 498, 500, 501, 502, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 710, 711, 725, 732, 735, 742, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 928, 938, 940, 941, 942, 943, 952, 953, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 981, 982, 983, 984, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1019, 1023, 1024, 1026, 1027, 1028, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "x0": [10, 189, 206, 221, 305, 335, 393, 430, 464, 567, 568, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "x00": 417, "x006": 1036, "x00a": 417, "x00b": 417, "x00c": 417, "x00d": 417, "x00e": 417, "x00f": 417, "x00g": 417, "x00h": 417, "x00i": 417, "x00l": 417, "x00n": 417, "x00o": 417, "x00r": 417, "x00t": 417, "x00u": 417, "x00z": 417, "x0_cat": [319, 1002], "x0_infrequent_sklearn": [319, 1002], "x0_label": 305, "x0_rabbit": [319, 1002], "x0_str_femal": 877, "x0_str_male": 877, "x0l": 1039, "x1": [10, 83, 89, 111, 121, 152, 209, 221, 305, 335, 381, 393, 430, 464, 509, 567, 568, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 699, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 1027], "x110": 1050, "x1_int_1": 877, "x1_int_2": 877, "x1_int_3": 877, "x1_label": 305, "x2": [83, 89, 111, 121, 152, 209, 381, 410, 588, 629, 699, 1027], "x27": [24, 69, 70, 114, 130, 133, 143, 167, 168, 169, 227, 228, 237, 238, 240, 248, 253, 257, 259, 260, 266, 271, 273, 302, 311, 316, 317, 319, 327], "x2_tr": 629, "x3": [121, 410, 1027], "x64": 377, "x8": 51, "x86": 377, "x86_64": [382, 396], "x9ft": 417, "x_": [141, 150, 249, 259, 315, 381, 409, 412, 414, 627, 635, 764, 859, 899, 900, 988, 994, 999, 1041], "x_0": [198, 657], "x_1": [93, 141, 152, 194, 198, 412, 414, 416, 419, 613, 625, 657, 877, 904, 905, 988, 994, 996, 1002, 1006], "x_1d": 319, "x_1x_2": 1002, "x_1x_2x_3": 1002, "x_1x_3": 1002, "x_2": [141, 152, 194, 414, 416, 417, 419, 613, 625, 988, 996, 1002], "x_20": 329, "x_2d": 338, "x_2x_3": 1002, "x_3": [141, 1002], "x_6": 877, "x_7": 877, "x_a": 309, "x_adult": 322, "x_aniso": [42, 55, 60], "x_approx": 1027, "x_axi": [95, 205, 263], "x_b": 309, "x_bimod": 309, "x_bin": 306, "x_bound": [419, 617], "x_c": [482, 483, 485, 999], "x_calib": 437, "x_california": 162, "x_cardiotocographi": 236, "x_center": 178, "x_check": 925, "x_chisq": 309, "x_cluster": 856, "x_convert": 924, "x_copi": 1046, "x_cu": 404, "x_d": [419, 614], "x_dens": [322, 544], "x_df": 127, "x_diabet": [162, 1023], "x_different_covari": 32, "x_digit": [71, 137, 300, 410, 1023, 1024, 1026], "x_dist_graph": 848, "x_embed": [292, 293, 692, 696, 853, 995], "x_error": 203, "x_errors_larg": 203, "x_featur": [72, 640, 641, 642, 984], "x_filter": 55, "x_fit": 688, "x_fit_": [535, 643], "x_fold": 1023, "x_forestcov": 236, "x_full": [161, 162, 305], "x_full_train": 114, "x_gaussian": 309, "x_hashed_lsa": 351, "x_hat": [531, 537, 545, 546], "x_hetero": 100, "x_homo": 100, "x_i": [11, 78, 113, 141, 167, 198, 318, 345, 409, 414, 415, 416, 419, 614, 615, 619, 622, 623, 625, 839, 840, 843, 983, 984, 988, 994, 995, 996, 1002, 1006, 1007, 1008], "x_idx_sort": 1047, "x_imput": 630, "x_indic": 142, "x_inform": 312, "x_inlier": 290, "x_inv": [588, 591], "x_ipca": 97, "x_iri": [264, 1027], "x_isotropic_covari": 32, "x_j": [409, 419, 614, 615, 619, 622, 623, 625, 983, 984, 988, 995, 1007, 1008], "x_k": [412, 414, 986, 995], "x_label": 162, "x_leav": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "x_left_lower_corn": [9, 296, 374, 498], "x_legend": 6, "x_list": 308, "x_loadings_": [482, 483, 484], "x_lognorm": [309, 1002], "x_lsa": 351, "x_m": 996, "x_max": [29, 50, 56, 111, 118, 128, 138, 151, 231, 299, 307, 330, 342, 343], "x_max_": 635, "x_mean": 421, "x_mean_": 1047, "x_min": [29, 50, 56, 111, 118, 122, 128, 138, 151, 186, 231, 299, 307, 330, 342, 343], "x_min_": 635, "x_miss": [125, 161, 162], "x_miss_california": 162, "x_miss_diabet": 162, "x_n": [93, 414, 904, 905, 994, 996, 1006], "x_near_unique_categori": 312, "x_new": [54, 410, 414, 418, 433, 442, 443, 445, 447, 449, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 853, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 896, 897, 1004, 1019], "x_new_again": 1004, "x_new_count": 1028, "x_new_invers": 1004, "x_new_tfidf": 1028, "x_norm_squar": [763, 1040, 1052], "x_normal": 1002, "x_np": 404, "x_offset": 178, "x_offset_": [644, 645, 1047], "x_origin": [534, 539, 541, 543, 544, 630, 896, 897], "x_out": [320, 868, 877, 878], "x_outlier": [179, 211, 289, 290, 337], "x_p": [409, 988], "x_pca": 97, "x_plot": [176, 198, 203, 232, 262, 288, 310], "x_plot_ext": 198, "x_plot_scal": 310, "x_po": 281, "x_q": 409, "x_r": [101, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "x_r2": 101, "x_rand": 265, "x_random": 186, "x_reconstruct": [319, 482, 483, 484, 583], "x_reconstructed_kernel_pca": [3, 98], "x_reconstructed_pca": [3, 98], "x_red": 50, "x_reduc": [49, 88, 128, 445, 1027], "x_restor": 49, "x_right": 32, "x_rope": 259, "x_rotations_": [412, 482, 483, 484], "x_scale": [178, 874, 890, 1002], "x_scale_": [644, 645, 1047], "x_scaler": 8, "x_score": [290, 482, 483, 484, 485], "x_scores_": [484, 1047], "x_select": 361, "x_shared_covari": 32, "x_shuffl": 312, "x_size": 79, "x_sp": 183, "x_spars": [322, 534, 963, 966], "x_sparse_embed": 566, "x_squared_norm": [246, 460], "x_src": 288, "x_std": [874, 890, 1002], "x_std_": 1047, "x_t": [464, 627, 863], "x_test": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 76, 83, 84, 98, 109, 112, 114, 116, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 170, 173, 177, 181, 187, 192, 194, 195, 203, 204, 205, 211, 212, 213, 215, 227, 229, 235, 239, 240, 245, 252, 253, 256, 257, 262, 266, 268, 272, 274, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 328, 329, 337, 350, 355, 357, 358, 359, 361, 365, 373, 381, 384, 392, 402, 410, 413, 416, 438, 470, 471, 472, 473, 474, 475, 476, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 878, 914, 915, 982, 992, 994, 995, 996, 998, 1002, 1006, 1007, 1008, 1023, 1024, 1026, 1032, 1035], "x_test_df": 240, "x_test_kernel_pca": 98, "x_test_maxab": 1002, "x_test_minmax": 1002, "x_test_miss": 125, "x_test_no_cf_encod": 312, "x_test_noisi": 3, "x_test_np": 240, "x_test_pca": [4, 98, 1024], "x_test_r": 83, "x_test_scal": 240, "x_test_sel": 170, "x_test_select": 361, "x_test_text": 6, "x_test_tran": 1002, "x_test_transform": [361, 413], "x_text": 6, "x_tfidf": 351, "x_thresholds_": [229, 635, 1047], "x_torch": 404, "x_tr": [867, 873, 876, 877, 878, 882, 884, 887, 889, 890, 894, 895], "x_train": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 76, 83, 84, 98, 109, 112, 116, 120, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 211, 212, 213, 215, 227, 235, 239, 240, 245, 247, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 328, 329, 337, 350, 355, 359, 361, 365, 373, 381, 384, 392, 410, 413, 416, 437, 438, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 878, 914, 915, 982, 992, 994, 995, 996, 998, 1000, 1002, 1006, 1007, 1023, 1024, 1032], "x_train_": 611, "x_train_count": 1028, "x_train_ensembl": 114, "x_train_linear": 114, "x_train_maxab": 1002, "x_train_minmax": 1002, "x_train_miss": 125, "x_train_no_cf_encod": 312, "x_train_noisi": 3, "x_train_pca": [4, 1024], "x_train_preprocess": 167, "x_train_r": 83, "x_train_sel": 170, "x_train_select": 361, "x_train_std_transform": 310, "x_train_text": 6, "x_train_tf": 1028, "x_train_tfidf": 1028, "x_train_tran": 1002, "x_train_transform": [310, 361, 413], "x_train_valid": 24, "x_tran": [309, 321, 381, 404, 442, 464, 880, 885, 892, 1002], "x_trans_bc": 309, "x_trans_qt": 309, "x_trans_yj": 309, "x_transform": [97, 128, 233, 485, 531, 532, 533, 534, 535, 537, 539, 543, 566, 638, 639, 688, 689, 690, 691], "x_transformed_fit_": 535, "x_true": 221, "x_type": 381, "x_uniform": 309, "x_val": [120, 1000], "x_valid": 24, "x_valu": 328, "x_vari": 55, "x_weibul": 309, "x_weights_": [412, 482, 483, 484, 485], "x_wrong": 32, "xa": 581, "xanchor": 260, "xarg": 1035, "xarrai": 1012, "xavier": [861, 862, 1043, 1044, 1045, 1047, 1048], "xaxi": [43, 88, 99, 115, 194, 218, 220, 223, 283, 288, 350], "xaxis2": 115, "xb": [83, 883], "xbar_": 549, "xbc": 417, "xc3": 417, "xcjason": 1045, "xcode": 377, "xd": 526, "xdang": 679, "xerox": 10, "xerr": [161, 162, 351], "xethan": 1047, "xfail": [381, 387], "xfc": 417, "xfcche": 417, "xfea": 417, "xff": 417, "xgamma": 685, "xgboost": [125, 127, 416, 1012], "xgrid": [9, 296], "xhan": 1044, "xhy": 1042, "xi": [42, 63, 376, 409, 412, 417, 450, 456, 509, 1006, 1046], "xi_i": 1006, "xi_k": 412, "xiangyin": 1048, "xiao": [0, 390, 397, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "xiaojin": 899, "xiaoyu": 1047, "xiaoyuchai": 1048, "xin": [679, 988, 1043], "xinfan": [1035, 1036, 1039], "xing": [1043, 1044], "xinv": 869, "xinyu": 409, "xinyuliu12": 1044, "xiong": [1043, 1044, 1049], "xj": 406, "xk": [63, 550], "xlabel": [2, 6, 7, 11, 22, 23, 24, 25, 31, 35, 39, 59, 76, 77, 79, 80, 83, 84, 88, 95, 100, 110, 111, 113, 119, 121, 122, 123, 124, 125, 129, 133, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 202, 204, 206, 207, 211, 215, 230, 232, 234, 236, 254, 258, 259, 263, 264, 268, 269, 272, 274, 285, 286, 289, 290, 311, 312, 335, 337, 338, 341, 350, 356, 357, 358, 631, 1023, 1027], "xlim": [10, 24, 42, 56, 60, 71, 76, 77, 78, 95, 111, 112, 113, 129, 136, 150, 151, 167, 176, 187, 189, 196, 203, 206, 211, 226, 234, 244, 249, 254, 268, 274, 289, 290, 337, 342, 343, 346, 358], "xm": [10, 221], "xmax": [9, 76, 187, 189, 206, 207, 296], "xmin": [9, 76, 187, 189, 206, 207, 296], "xn": 509, "xom": 10, "xor": [148, 150, 151, 152, 154, 155, 156, 159, 164, 207, 208, 210, 247, 308, 343, 347, 610, 614, 622, 988, 1008, 1014, 1042], "xp": [412, 879], "xpreprocessor": 377, "xrang": 1041, "xred": [445, 1051], "xrot": 12, "xrx": 10, "xs_sp": 183, "xsat": 1045, "xscale": [150, 155, 232], "xt": [133, 283, 393, 445, 538, 540, 627, 629, 800, 803, 804, 814, 848, 856, 864, 869, 874, 881, 893, 922, 1051, 1053], "xtick": [2, 4, 6, 9, 28, 32, 38, 42, 44, 48, 49, 50, 56, 57, 60, 80, 83, 96, 119, 121, 125, 151, 152, 153, 157, 180, 187, 193, 210, 226, 234, 244, 245, 246, 249, 258, 259, 274, 287, 296, 302, 311, 325, 338, 341, 343, 697, 1024], "xtick_period": 168, "xtick_start": 168, "xticklabel": [2, 8, 119, 125, 168, 311], "xticks_label": 121, "xticks_po": 121, "xticks_rot": [4, 697, 1024], "xtrain": 296, "xu": [409, 412, 420, 444, 1006, 1048, 1049, 1052, 1053], "xue": [0, 1039, 1040, 1041, 1043, 1044, 1047], "xuefeng": [1052, 1053], "xueqin": [679, 988], "xun": [1045, 1047], "xuniu": 1050, "xval": 162, "xw": [196, 318, 646, 647, 649, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684, 988], "xx": [40, 56, 78, 118, 122, 128, 138, 151, 152, 153, 168, 184, 204, 207, 208, 209, 210, 211, 223, 226, 234, 247, 289, 299, 307, 308, 330, 337, 338, 342, 343, 346, 347, 383], "xx0": [111, 631], "xx1": [111, 631], "xx_coarser": 118, "xxx": 393, "xy": [7, 24, 47, 266, 296, 343, 396, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 681, 682, 683, 684, 686], "xycoord": [7, 24], "xyguo": [1041, 1043], "xytext": [7, 24, 173], "xyz": 378, "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 22, 23, 24, 25, 28, 29, 31, 32, 37, 38, 40, 41, 42, 43, 50, 52, 54, 55, 58, 59, 60, 63, 64, 69, 70, 72, 73, 79, 83, 84, 89, 90, 95, 97, 98, 99, 101, 102, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 218, 219, 220, 223, 227, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 243, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 355, 356, 357, 358, 359, 361, 371, 372, 373, 374, 377, 379, 381, 384, 386, 388, 392, 393, 399, 402, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 498, 500, 502, 505, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 706, 711, 726, 732, 735, 741, 742, 756, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 788, 789, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 924, 929, 930, 952, 954, 955, 956, 960, 963, 966, 979, 981, 982, 983, 984, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 999, 1002, 1006, 1007, 1008, 1013, 1019, 1023, 1024, 1026, 1027, 1030, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "y0": [10, 221], "y1": [10, 89, 111, 221, 509, 716, 993, 994], "y1_label": 5, "y2": [89, 111, 716, 993], "y2_label": 5, "y3": 993, "y_": [229, 244, 248, 249, 295, 381, 412, 414, 637, 648, 669, 680, 729, 730, 738, 764, 783, 784, 787, 988, 992, 1041], "y_1": [110, 357, 358, 412, 992, 996, 1006], "y_2": [110, 357, 358, 996], "y_20": 329, "y_2d": 338, "y_3": 358, "y_30": 330, "y_50": 330, "y_adult": 322, "y_all": [666, 668, 676, 832, 833, 861], "y_ard": 176, "y_ard_std": 176, "y_axi": [95, 205], "y_bia": 112, "y_brr": 176, "y_brr_std": 176, "y_c": [482, 483, 485], "y_calib": 437, "y_california": 162, "y_coclust": 17, "y_convert": 924, "y_cov": 611, "y_cu": 404, "y_decis": [322, 835], "y_dens": 993, "y_diabet": [162, 1023], "y_different_covari": 32, "y_digit": [71, 137, 300, 410, 1023, 1024, 1026], "y_error": [112, 203], "y_errors_larg": 203, "y_filter": 55, "y_fold": 1023, "y_full": [161, 162, 305], "y_full_train": 114, "y_grid_pr": 128, "y_hat": 465, "y_high": 122, "y_i": [113, 318, 345, 406, 416, 983, 984, 988, 992, 996, 1006, 1007, 1008], "y_indic": 875, "y_iri": [264, 1027], "y_isotropic_covari": 32, "y_j": [984, 992, 994, 1002, 1007], "y_k": [412, 1002], "y_kmean": 17, "y_kr": 232, "y_l": 992, "y_label": 215, "y_left_lower_corn": [9, 296, 374, 498], "y_limit": 119, "y_loadings_": [482, 483, 484], "y_loc": 350, "y_log_prob": 835, "y_log_proba": 864, "y_low": 122, "y_lower": [58, 122], "y_mask": 329, "y_max": [29, 56, 111, 118, 128, 138, 151, 215, 231, 299, 307, 330, 342, 343, 635, 637], "y_mean": [154, 155, 158, 611, 644, 645], "y_mean_": 1047, "y_med": 122, "y_min": [29, 56, 111, 118, 128, 138, 151, 231, 299, 307, 330, 342, 343, 635, 637], "y_miss": [161, 162], "y_miss_california": 162, "y_miss_diabet": 162, "y_multirf": 129, "y_n": [992, 996, 1006], "y_new": 54, "y_nois": 112, "y_noisi": 196, "y_norm_squar": 763, "y_normal": 199, "y_np": 404, "y_numer": 924, "y_onehot_test": 268, "y_org": 929, "y_outlier": 179, "y_pareto": 199, "y_plot": [176, 198, 203, 262], "y_plot_ext": 198, "y_po": 352, "y_pred": [2, 4, 5, 11, 23, 28, 30, 32, 42, 55, 60, 68, 73, 109, 122, 123, 125, 130, 143, 167, 197, 199, 204, 207, 212, 214, 215, 226, 227, 236, 253, 255, 257, 262, 290, 294, 302, 310, 328, 329, 361, 379, 386, 393, 416, 432, 439, 465, 482, 483, 484, 549, 552, 554, 556, 557, 558, 560, 562, 564, 565, 567, 568, 570, 611, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 697, 698, 700, 701, 702, 703, 708, 712, 713, 718, 721, 722, 723, 724, 728, 729, 730, 734, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 783, 784, 785, 787, 788, 790, 791, 796, 800, 803, 804, 814, 825, 835, 837, 838, 847, 855, 862, 864, 904, 905, 906, 907, 908, 909, 910, 913, 915, 992, 994, 1024, 1041, 1042, 1044, 1046, 1050, 1051, 1052], "y_pred_ard": 181, "y_pred_bin": 197, "y_pred_chain": 281, "y_pred_empti": [729, 730], "y_pred_enet": 181, "y_pred_ensembl": 281, "y_pred_lasso": 181, "y_pred_lr": 199, "y_pred_nnl": 192, "y_pred_ol": 192, "y_pred_outli": [211, 289, 337], "y_pred_outliers_sgd": 211, "y_pred_ovr": 281, "y_pred_product": 215, "y_pred_qr": 199, "y_pred_ridg": 73, "y_pred_ridge_with_trans_target": 73, "y_pred_scal": 310, "y_pred_seg": 197, "y_pred_test": [211, 289, 337], "y_pred_test_sgd": 211, "y_pred_tot": 215, "y_pred_train": [211, 337], "y_pred_train_sgd": 211, "y_pred_with_": 166, "y_pred_without_": 166, "y_predict": [112, 381, 1035], "y_prob": [23, 25, 152, 438, 439, 709, 835, 861, 992, 1049, 1053], "y_proba": [121, 124, 310, 393, 709, 864, 1053], "y_proba_sc": 310, "y_rand": 330, "y_reconstruct": [482, 483, 484], "y_rf": 129, "y_right": 32, "y_rotations_": [412, 482, 483, 484], "y_sampl": [158, 611], "y_scaler": 8, "y_score": [227, 266, 268, 393, 482, 483, 484, 707, 720, 726, 727, 739, 740, 756, 782, 788, 789, 794, 800, 803, 804, 814, 864, 992, 1041, 1049, 1051, 1053], "y_scores_": [484, 1047], "y_shared_covari": 32, "y_spars": 993, "y_std": [155, 158, 552, 611, 644, 645, 1048], "y_std_": 1047, "y_svr": 232, "y_test": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 83, 84, 98, 109, 112, 114, 116, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 157, 166, 167, 168, 169, 170, 173, 181, 192, 194, 197, 203, 204, 205, 212, 213, 215, 227, 235, 239, 240, 245, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 328, 329, 350, 355, 359, 361, 373, 384, 392, 410, 413, 416, 438, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 914, 915, 992, 994, 995, 1002, 1007, 1023, 1024, 1032, 1035], "y_test_pr": 245, "y_test_predict": 235, "y_test_r": 83, "y_test_tru": 328, "y_thresholds_": [229, 635, 1047], "y_torch": 404, "y_train": [3, 4, 5, 6, 8, 11, 22, 23, 24, 25, 29, 30, 68, 69, 73, 83, 84, 98, 109, 112, 116, 120, 121, 122, 123, 124, 125, 126, 129, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 170, 173, 177, 181, 192, 194, 195, 198, 204, 205, 212, 213, 227, 235, 239, 240, 245, 252, 253, 256, 257, 262, 266, 268, 272, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 325, 326, 328, 329, 330, 350, 355, 359, 361, 365, 373, 381, 384, 392, 410, 413, 416, 437, 438, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 914, 915, 982, 992, 994, 995, 1000, 1002, 1007, 1023, 1024, 1032], "y_train_": 611, "y_train_ensembl": 114, "y_train_linear": 114, "y_train_noisi": 156, "y_train_pr": 245, "y_train_r": 83, "y_train_valid": 24, "y_tran": 73, "y_transform": 485, "y_true": [2, 11, 17, 30, 57, 73, 109, 130, 152, 197, 207, 215, 236, 246, 253, 328, 379, 432, 438, 439, 465, 482, 483, 484, 552, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 697, 698, 700, 701, 702, 703, 707, 708, 709, 712, 713, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 992, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1052], "y_true_bin": 197, "y_true_categor": [709, 992], "y_true_empti": 729, "y_true_mean": 199, "y_true_seg": 197, "y_type_": 871, "y_uniqu": 22, "y_upper": [58, 122], "y_val": [120, 1000], "y_valid": 24, "y_var": 112, "y_vari": 55, "y_weights_": [412, 482, 483, 484, 485], "y_wrong": 32, "yacin": 1043, "yadav": 1049, "yagi": 1047, "yahoo": 10, "yair": [409, 691], "yakov": 1047, "yalburgi": [1042, 1043], "yaman": 1050, "yamanishi": 374, "yamin": 1035, "yaml": 383, "yan": [1039, 1047], "yanchor": 260, "yang": [374, 409, 414, 534, 639, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052], "yangarbit": 1042, "yanhong": 1050, "yanlend": 1041, "yann": [302, 1035, 1037], "yanni": 409, "yannick": [1035, 1037], "yao": [0, 376, 390, 397, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "yap": 1042, "yar": 1049, "yaroslav": [0, 397, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051, 1052], "yarowski": [317, 901, 1005], "yashika": 1047, "yasmeen": 1048, "yat2016": 409, "yate": [590, 730], "yates2011": 590, "yau": [13, 1038, 1039, 1040, 1041, 1042], "yaxi": [5, 8, 43, 58, 88, 99, 115, 194, 218, 220, 223, 243, 283, 288, 350], "ye": [350, 387, 393, 402, 658, 659, 871, 888, 988], "year": [0, 2, 133, 146, 154, 166, 167, 168, 197, 198, 215, 376, 378, 383, 391, 413, 417, 802, 807, 809, 883, 988, 992, 1013, 1017, 1026], "yearli": 2, "yearremodadd": 130, "yeast": [281, 835], "yee": [1042, 1043], "yegelwel": 1047, "yeh": 1048, "yelit": 1041, "yellow": [32, 90, 338, 993], "yellowbrick": 1012, "yellowgreen": [198, 200, 207, 357], "yen": [1041, 1042], "yenchen": [0, 1041], "yenchenlin": 1041, "yenugula": 1053, "yeo": [305, 309, 880, 892, 1002, 1043, 1049, 1051], "yep": 382, "yerr": [71, 77, 79, 116, 119, 145, 285, 311, 328], "yet": [7, 55, 181, 215, 248, 260, 352, 367, 374, 378, 383, 391, 395, 396, 399, 413, 414, 416, 417, 419, 448, 452, 461, 462, 465, 553, 554, 577, 593, 594, 602, 778, 901, 976, 981, 988, 992, 998, 1006, 1013, 1044, 1052], "yeung": 1041, "ygrid": [9, 296], "yhat": 1010, "yhoo": 10, "yi": [509, 994, 1039, 1043, 1044, 1047], "yichuan": [1041, 1042], "yield": [6, 7, 23, 43, 53, 76, 77, 78, 79, 122, 181, 192, 197, 212, 215, 264, 281, 299, 305, 335, 340, 350, 351, 361, 365, 367, 373, 384, 393, 405, 409, 411, 413, 414, 416, 417, 418, 437, 449, 468, 472, 508, 509, 537, 538, 539, 541, 546, 553, 554, 559, 560, 561, 562, 567, 568, 594, 602, 647, 651, 652, 653, 655, 661, 663, 665, 673, 675, 686, 726, 781, 788, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 835, 838, 896, 897, 935, 942, 944, 945, 950, 984, 986, 988, 989, 992, 1007, 1008, 1023, 1040, 1041, 1043, 1046, 1048], "yifan": 996, "yime": 1043, "ying": [409, 452, 462, 1049], "yinglr": 1045, "yisheng": 1052, "yiyangq": 1049, "yj": [83, 309], "ylabel": [2, 6, 7, 11, 22, 23, 24, 25, 31, 35, 59, 76, 77, 79, 80, 83, 84, 88, 95, 100, 110, 111, 113, 121, 122, 123, 124, 125, 129, 133, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 167, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 191, 197, 199, 200, 202, 204, 206, 207, 215, 230, 232, 234, 254, 258, 259, 262, 263, 264, 268, 269, 272, 274, 286, 312, 335, 338, 341, 350, 356, 357, 358, 631, 1023, 1027], "ylim": [10, 22, 24, 31, 35, 42, 56, 60, 76, 77, 78, 95, 111, 112, 119, 122, 129, 132, 150, 151, 167, 184, 186, 187, 189, 190, 191, 203, 206, 207, 211, 226, 234, 244, 249, 254, 258, 262, 268, 272, 274, 289, 290, 337, 342, 343, 346, 350, 358, 1023], "ylorbr_r": 78, "ym": [10, 221], "ymax": [6, 8, 9, 76, 184, 186, 189, 190, 198, 206, 259, 296], "ymazari": 1043, "ymean": 177, "ymin": [9, 76, 184, 186, 189, 190, 198, 206, 259, 296], "yn": [509, 993, 994], "yoav": 1041, "yoch": 1048, "yogendrasingh": 1050, "yojana": 1050, "yokasr": 1045, "yoni": 1038, "yoon": 1046, "yoram": [278, 735], "york": [258, 788, 797, 982, 992, 1004], "yoshihiro": [177, 1045], "yoshiki": [1038, 1041], "yoshizawa": 1043, "yoshua": [861, 862, 1005], "yosshi999": 1049, "yosuk": [1047, 1048], "yotam": 1051, "you": [0, 13, 18, 22, 69, 88, 117, 118, 121, 123, 143, 146, 162, 168, 185, 198, 199, 201, 228, 233, 240, 246, 254, 259, 260, 266, 275, 289, 315, 316, 319, 321, 322, 326, 329, 342, 350, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 396, 399, 402, 404, 406, 407, 408, 409, 410, 411, 413, 416, 417, 418, 420, 421, 426, 437, 443, 444, 446, 447, 449, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 500, 503, 504, 509, 510, 532, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 588, 589, 590, 591, 594, 607, 608, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 699, 700, 785, 798, 799, 801, 802, 803, 804, 805, 807, 809, 815, 816, 818, 819, 820, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 863, 864, 867, 868, 869, 870, 871, 876, 877, 878, 883, 884, 889, 890, 892, 893, 894, 895, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 941, 958, 960, 981, 982, 987, 988, 992, 993, 996, 998, 999, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1016, 1017, 1019, 1020, 1023, 1026, 1028, 1035, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "youden": 992, "younger": 215, "your": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 377, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 393, 396, 402, 404, 407, 408, 409, 410, 411, 416, 417, 420, 421, 444, 446, 503, 533, 561, 562, 602, 634, 646, 687, 711, 800, 803, 804, 806, 814, 823, 827, 829, 935, 989, 996, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1021, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "your_regex_goes_her": 379, "yourlogin": 379, "yourself": [69, 378, 379, 380, 384, 387, 996], "ypred": 1042, "yrsold": 130, "yscale": [150, 155, 197, 232, 350], "ystd": 177, "yt": 875, "ython": 0, "ytick": [4, 9, 28, 32, 38, 42, 44, 48, 49, 50, 56, 57, 60, 80, 83, 96, 123, 142, 151, 152, 153, 157, 180, 187, 193, 210, 226, 234, 244, 245, 246, 249, 254, 274, 287, 296, 302, 325, 338, 343, 350, 1023, 1024], "yticklabel": [254, 350], "ytrain": 296, "ytrue": 1042, "yu": [181, 409, 452, 462, 658, 988, 996, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuan": [1049, 1050, 1051, 1052, 1053], "yuchen": [1051, 1052], "yucheng": 1040, "yue": 1047, "yufeng": 1043, "yuichi": 1042, "yuki": 1049, "yule": [450, 457, 778, 779, 780], "yulia": 1045, "yum": 377, "yun": [1050, 1051], "yung": [1038, 1041], "yunqian": 988, "yurchak": [0, 397, 417, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuri": [1038, 1040], "yusuf": [1050, 1051], "yusuk": 1048, "yusukenagasaka": 1048, "yutaro": 1047, "yuusuk": 1052, "yuval": [405, 451], "yv": 412, "yve": 1048, "yy": [40, 56, 78, 118, 128, 138, 151, 153, 168, 204, 208, 209, 210, 211, 223, 226, 234, 289, 299, 307, 308, 330, 337, 338, 342, 343, 346, 347], "yy_": 204, "yy_coars": 118, "yy_down": 343, "yy_up": 343, "yzhenman": 1048, "z": [9, 56, 118, 138, 151, 153, 168, 207, 209, 210, 218, 220, 226, 231, 247, 289, 296, 299, 307, 310, 330, 338, 343, 347, 376, 405, 414, 416, 553, 554, 585, 639, 664, 671, 685, 686, 689, 693, 699, 724, 785, 884, 988, 989, 996, 997, 1027, 1050], "z_": 414, "z_1": 988, "z_2": 988, "z_3": 988, "z_4": 988, "z_5": 988, "z_i": [113, 996], "z_l": 996, "z_points_coars": 118, "zablit": 1050, "zac": 1040, "zacchari": 1047, "zach": [1043, 1044, 1049], "zachariah": 1043, "zadrozni": [25, 406, 437, 676], "zaffalon": 259, "zahlii": 1048, "zain": [0, 397, 1049, 1050, 1051, 1052], "zalkow": 1040, "zambelli": 1038, "zamrii": 1045, "zanouda": 1042, "zaxi": [43, 88, 99, 194, 218], "zayd": 1044, "zaytsev": 1038, "zdzieblo": 1052, "zebra": 712, "zedan": 1051, "zeel": 1049, "zeeshan": [1050, 1051], "zempleni": 1049, "zen": 929, "zenin": 1041, "zentrum": 992, "zero": [8, 9, 12, 25, 32, 35, 38, 39, 50, 52, 77, 79, 80, 93, 96, 98, 111, 112, 121, 123, 124, 129, 143, 146, 162, 176, 181, 183, 188, 190, 191, 196, 197, 198, 201, 202, 203, 207, 212, 215, 230, 233, 234, 236, 243, 247, 249, 256, 259, 264, 268, 269, 288, 305, 316, 317, 342, 345, 351, 352, 355, 359, 365, 366, 374, 381, 385, 393, 406, 407, 409, 411, 414, 416, 417, 418, 419, 422, 446, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 487, 497, 508, 509, 523, 526, 527, 531, 532, 535, 537, 538, 539, 540, 542, 543, 547, 548, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 581, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 636, 639, 643, 644, 645, 650, 658, 659, 664, 665, 666, 667, 668, 671, 676, 677, 678, 685, 686, 703, 709, 712, 713, 715, 716, 725, 729, 730, 734, 738, 740, 746, 783, 784, 785, 787, 796, 797, 815, 816, 819, 820, 833, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 867, 874, 876, 877, 879, 880, 881, 883, 884, 890, 891, 892, 893, 897, 904, 912, 913, 914, 915, 939, 967, 978, 982, 988, 990, 991, 994, 995, 996, 1002, 1003, 1004, 1006, 1007, 1008, 1019, 1026, 1028, 1035, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "zero_bas": [487, 508, 509], "zero_class": 234, "zero_divis": [302, 713, 729, 730, 738, 783, 784, 787, 992, 1045, 1047, 1051], "zero_impute_scor": 162, "zero_on": [379, 1036], "zero_one_loss": [379, 404, 703, 734, 992, 1036, 1037, 1038, 1052], "zero_one_scor": 1036, "zerodivisionerror": [1042, 1045, 1051], "zeros_lik": [47, 199, 268], "zeta": 1007, "zeta_i": 1007, "zev": [1041, 1042, 1043, 1044], "zeyusun": 1048, "zha": [689, 693, 989], "zhai_pro": 1040, "zhan": 1050, "zhang": [258, 409, 442, 664, 679, 685, 686, 689, 693, 758, 759, 988, 989, 990, 994, 1006, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "zhang02c": 676, "zhang96": [409, 442], "zhao": [1045, 1047, 1048, 1049, 1050], "zhaowei": 1047, "zhaoweiwang": 1048, "zhauniarovich": 1040, "zhdanovich": 1043, "zhechev": 1050, "zhehao": [1048, 1049, 1050, 1051, 1053], "zhenfish": 1049, "zheng": [1041, 1042, 1047], "zhenq": 1043, "zhi": [563, 998], "zhiqe": 1043, "zhou": [563, 639, 900, 998, 1043, 1051, 1052], "zht2007": 185, "zhu": [109, 416, 519, 553, 658, 899], "zhuyi": [1043, 1044], "zhuzhunashvili": [409, 462], "zibulevski": [664, 685, 686], "zichen": 1040, "zielinska": 1046, "zihna": 1048, "ziji": [1043, 1044], "zijlstra": 1038, "zike": 1041, "zimek": 446, "zimmer": [1039, 1049], "zinkov": [204, 1035, 1036, 1037, 1039, 1040], "zip": [2, 3, 6, 7, 10, 11, 22, 24, 29, 30, 32, 35, 36, 38, 40, 43, 47, 53, 61, 62, 73, 84, 90, 93, 94, 97, 101, 102, 103, 111, 113, 120, 130, 131, 155, 161, 164, 167, 168, 169, 182, 188, 189, 197, 205, 206, 218, 230, 236, 244, 248, 249, 253, 257, 261, 262, 263, 266, 268, 283, 286, 288, 291, 299, 300, 301, 307, 309, 310, 311, 329, 335, 345, 346, 356, 377, 416, 828, 1002, 1028, 1031], "zisserman": [638, 984, 992], "zito": [1035, 1048], "ziv": 1041, "zivori": 1041, "zj": [1043, 1044], "zlabel": 1027, "zoj613": 1047, "zolisa": 1047, "zoom": [2, 114, 305], "zoom_in_percentile_rang": 305, "zopa": 1010, "zorder": [10, 56, 95, 127, 138, 150, 158, 187, 195, 219, 221, 229, 232, 243, 316, 322, 343], "zou": [109, 185, 416, 519, 553, 656, 988, 1006], "zou_et_al_criterion_resc": 185, "zoubin": 899, "zoubir": 79, "zouhar": 1048, "zsh": 366, "zuckerberg": 0, "zwinck": 1037, "zxcvbniu": 1042, "zz": 78, "zzrh2009": 416, "z\u00e9": 1043, "\u00e4yr\u00e4m\u00f6": 988, "\u00f3scar": [1039, 1040, 1041, 1042], "\u00f6zer": 1048, "\u0142ukasz": 1050, "\u015fahin": 1049, "\u675c\u4e16\u6a4b": [0, 398], "\u8d75\u4e30": 1049}, "titles": ["About us", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "Computation times", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_log_loss_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.FixedThresholdClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TunedThresholdClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [169, 310, 312, 382, 391, 416, 992], "0": [162, 315, 316, 317, 318, 1008, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "1": [168, 194, 318, 319, 320, 321, 322, 391, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "10": [65, 1035], "11": 1035, "12": 1035, "13": 1036, "14": 1037, "15": 1038, "16": 1039, "17": 1040, "18": 1041, "19": 1042, "1d": 288, "2": [194, 320, 1028, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "20": [68, 350, 374, 1028, 1043], "2018": 1013, "20newgroup": 212, "21": 1044, "22": [315, 1045], "23": [316, 1046], "24": [317, 1047], "2d": [10, 50, 95, 101, 168], "3": [24, 180, 321, 1028, 1043, 1044, 1049, 1051], "3d": 168, "4": [322, 1035, 1043, 1052], "5": [1008, 1035, 1053], "6": [1035, 1054], "7": 1035, "8": 1035, "9": 1035, "99": 374, "A": [11, 18, 19, 45, 56, 61, 197, 318, 378, 385, 413, 1022, 1025], "And": [222, 394], "In": 266, "NOT": 384, "Of": 368, "One": [189, 211, 268, 318, 337, 413, 998, 1006], "The": [0, 84, 87, 88, 166, 167, 197, 223, 230, 253, 257, 266, 273, 278, 374, 383, 387, 413, 417, 991, 992, 1004, 1026, 1027], "Will": 391, "With": [237, 1028], "__sklearn_is_fitted__": 107, "_safe_index": 920, "abil": 155, "ablat": 236, "about": [0, 167, 391], "absolut": 992, "access": 410, "accuraci": [169, 231, 350, 355, 992], "accuracy_scor": 703, "across": 361, "action": 379, "activ": 326, "ad": 409, "adaboost": [109, 110, 111, 416], "adaboostclassifi": [109, 553], "adaboostregressor": 554, "add": [322, 391], "add_dummy_featur": 886, "addit": [416, 984], "additive_chi2_kernel": 758, "additivechi2sampl": 638, "address": 253, "adjac": 15, "adjust": 35, "adjusted_mutual_info_scor": 704, "adjusted_rand_scor": 705, "advanc": 237, "advantag": 409, "affin": [10, 36, 409, 990], "affinity_propag": 454, "affinitypropag": 440, "agglom": [37, 38, 50, 1027], "agglomer": [49, 52, 1009, 1027], "agglomerativeclust": 441, "aggress": [981, 988], "aic": [186, 988], "algebra": [365, 388], "algorithm": [17, 18, 19, 36, 42, 47, 53, 61, 62, 63, 218, 226, 385, 391, 986, 988, 993, 995, 996, 1000, 1008, 1026], "alias": 387, "align": 989, "all": [259, 268, 319, 396, 1024, 1050, 1051, 1052], "all_displai": 932, "all_estim": 933, "all_funct": 934, "alloc": [13, 414], "alpha": [136, 355], "alpin": 396, "alreadi": 15, "also": [264, 383, 410], "altern": [377, 981], "am": [119, 236], "amount": [271, 981], "an": [45, 57, 107, 162, 178, 186, 293, 315, 319, 391, 417, 981, 998, 1019, 1025, 1026], "anaconda": 396, "analysi": [2, 25, 31, 32, 58, 93, 100, 103, 109, 122, 168, 181, 243, 261, 262, 269, 291, 292, 293, 350, 407, 412, 414, 986, 995, 1009, 1027, 1028], "analyz": [11, 981], "angl": [186, 988], "ani": 391, "anomali": 226, "anova": [143, 341], "api": [107, 239, 240, 315, 318, 320, 366, 381, 386, 393, 399, 404, 407, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1052, 1053, 1054], "appli": 136, "applic": [417, 1027], "approach": [76, 186, 259], "approxim": [164, 172, 173, 231, 283, 317, 407, 411, 984], "ar": [65, 253, 318, 391], "arch": 396, "architectur": 1013, "ard": [181, 988], "ardregress": 644, "arff": 373, "argument": [318, 381, 1046, 1048], "arm64": 387, "arrai": [320, 359, 388, 404, 407, 1019, 1052, 1053, 1054], "arrayfunc": 921, "artifact": 402, "artwork": 0, "as_float_arrai": 922, "ask": 391, "assert": 381, "assert_all_finit": 923, "assign": 409, "assumpt": 55, "atom": [8, 365], "attent": 391, "attribut": [381, 393, 404, 981], "auc": [315, 706], "author": 1035, "automat": [181, 392, 988], "avail": [319, 981, 1031, 1032], "available_if": 953, "averag": [266, 268, 409, 416, 992], "average_precision_scor": 707, "avoid": [361, 410], "aweb": 1017, "ax": 386, "b": 83, "backend": 387, "backward": 379, "bag": [112, 121, 350, 416, 417, 981, 1028], "baggingclassifi": 555, "baggingregressor": 556, "balanc": [258, 992], "balanced_accuracy_scor": 708, "ball": 995, "balltre": [844, 995], "base": [1, 2, 83, 116, 117, 146, 164, 181, 232, 315, 316, 318, 320, 321, 322, 379, 407, 409, 413, 416, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 988, 1000, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "baseestim": [381, 423], "baselin": [173, 197], "basi": [3, 158, 419, 984, 988, 1026], "basic": [156, 215, 392, 411, 419], "batch": [409, 414], "bay": [22, 23, 407, 994], "bayesian": [176, 177, 243, 259, 407, 988, 991], "bayesiangaussianmixtur": 797, "bayesianridg": 645, "befor": [162, 383], "behavior": 254, "behind": 0, "being": 167, "benchmark": [5, 8, 56, 350], "bernoulli": [994, 997], "bernoullinb": 839, "bernoullirbm": 860, "best": [248, 380, 391], "bestofmedia": 1017, "beta": 414, "betawork": 1017, "between": [62, 270, 988], "bia": 112, "bic": [186, 248, 988], "biclust": [16, 17, 18, 164, 375, 405, 407], "biclustermixin": 424, "bigger": 367, "bike": [2, 11, 168], "bin": 1002, "binar": [867, 887, 1002, 1003], "binari": [266, 281, 988, 992], "birch": [40, 409, 442], "birchbox": 1017, "bisect": [41, 409], "bisectingkmean": [319, 443], "blind": 94, "bnp": 1017, "boil": 384, "boltzmann": [302, 997], "bonu": 136, "book": 1017, "boost": [2, 115, 119, 120, 121, 122, 123, 124, 125, 168, 197, 315, 316, 318, 320, 321, 416], "bouldin": 409, "bound": 230, "boundari": [126, 131, 286, 330, 342], "branch": 387, "break": 346, "breast": [170, 376], "brier": 992, "brier_score_loss": 709, "brute": [981, 995], "bug": [378, 379, 383, 1016, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "build": [154, 162, 377, 379, 387, 410, 1028, 1053], "bulk": [8, 365], "bunch": [391, 919], "busi": 253, "c": 385, "c4": 1008, "c5": 1008, "cach": [70, 285, 410], "calcul": [120, 132], "calibr": [21, 22, 23, 24, 25, 122, 164, 197, 406, 407, 437, 438, 439, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercv": 437, "calibration_curv": 439, "calibrationdisplai": 438, "california": 374, "calinski": 409, "calinski_harabasz_scor": 710, "call": [361, 378], "callgrind": 385, "can": [136, 391], "cancer": [170, 376], "candid": [271, 981], "canon": [83, 412], "card": 253, "cardif": 1017, "cardiotocographi": 236, "cart": 1008, "case": [345, 988, 992], "cast": 1019, "categor": [119, 311, 317, 322, 391, 416, 994, 1002], "categori": [2, 319, 321, 1002], "categoricalnb": 840, "caus": 396, "causal": [166, 167], "cautiou": 167, "cca": [83, 482], "center": [93, 1002], "central": 15, "centroid": [294, 995], "chain": [71, 238, 281, 392, 410], "chanc": 35, "chang": [233, 379, 394, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "changelog": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "characterist": [268, 269, 992], "check": [167, 261, 315, 387, 404, 1043, 1044, 1045], "check_arrai": 925, "check_consistent_length": 926, "check_cv": 824, "check_estim": 935, "check_increas": 636, "check_is_fit": [381, 976], "check_memori": 977, "check_random_st": 927, "check_scalar": 928, "check_scor": 711, "check_symmetr": 978, "check_x_i": 924, "checker": 407, "checklist": [379, 383], "chi": [984, 990], "chi2": 604, "chi2_kernel": 759, "choic": 414, "choos": [5, 981, 1019, 1021, 1023], "ci": 379, "circl": 64, "cite": 0, "claim": [197, 215], "class": [24, 35, 109, 111, 132, 180, 206, 211, 262, 266, 268, 318, 337, 340, 393, 407, 408, 413, 416, 417, 992, 995, 998, 1006, 1007, 1035, 1036], "class_likelihood_ratio": 712, "class_weight": [929, 930], "classic": 407, "classif": [6, 24, 27, 28, 30, 31, 68, 89, 137, 150, 151, 152, 153, 157, 164, 213, 234, 262, 265, 266, 269, 281, 286, 294, 302, 315, 324, 329, 342, 350, 375, 407, 419, 988, 992, 993, 995, 996, 1006, 1007, 1008, 1026, 1028], "classifi": [22, 23, 25, 29, 107, 133, 180, 238, 256, 273, 281, 286, 315, 330, 335, 338, 350, 359, 406, 407, 416, 986, 995, 1026, 1028], "classification_report": 713, "classifierchain": [835, 993], "classifiermixin": 426, "classnameprefixfeaturesoutmixin": 425, "clear": 1045, "clear_data_hom": 486, "cli": 1028, "clone": [381, 434], "close": 378, "cloud": 95, "cloudpickl": 402, "cluster": [10, 17, 19, 34, 35, 36, 37, 38, 39, 42, 43, 45, 47, 50, 53, 54, 56, 58, 61, 62, 63, 64, 65, 93, 164, 319, 321, 351, 375, 405, 407, 409, 414, 420, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 714, 715, 992, 1027, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cluster_optics_dbscan": 455, "cluster_optics_xi": 456, "clustermixin": 427, "co": [17, 19, 405], "co2": 154, "code": [5, 93, 102, 379, 381, 384, 385, 387, 414, 1039, 1040, 1041, 1042, 1043], "coeffici": [146, 167, 176, 201, 202, 409, 992], "cohen": 992, "cohen_kappa_scor": 716, "coin": [44, 45], "color": 46, "column": [68, 69, 238], "column_or_1d": 979, "columntransform": [410, 464], "com": 1017, "combin": [130, 227], "comment": 384, "committe": 394, "common": [167, 361, 393, 404, 417, 992], "commun": [0, 379], "compact": 228, "compar": [24, 40, 42, 60, 76, 83, 115, 129, 142, 173, 176, 183, 199, 204, 226, 232, 259, 267, 291, 300, 305, 311, 391], "comparison": [25, 29, 32, 41, 62, 78, 101, 119, 120, 141, 149, 218, 219, 232, 259, 270, 278, 352, 988], "compat": [315, 379, 381, 404, 407], "compil": [377, 385], "complement": 994, "complementnb": 841, "complet": [235, 409], "completeness_scor": 717, "complex": [5, 228, 238, 258, 261, 327, 355, 365, 988, 995, 996, 1006, 1007, 1008], "compon": [84, 93, 291, 292, 293, 414, 995, 1009, 1027], "compos": [407, 464, 465, 466, 467, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "composit": [67, 164, 407, 410, 981], "compoundkernel": 612, "compress": [12, 51, 365], "comput": [14, 15, 20, 26, 33, 36, 45, 47, 61, 62, 65, 66, 74, 76, 81, 85, 91, 104, 106, 115, 134, 139, 147, 159, 163, 171, 174, 190, 202, 216, 224, 241, 250, 272, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 353, 360, 364, 365, 407, 410, 413, 999, 1014], "computation": 367, "compute_class_weight": 929, "compute_optics_graph": 457, "compute_sample_weight": 930, "con": 991, "concaten": 72, "concentr": 243, "concept": [393, 988], "conclud": [2, 222], "conclus": [5, 11, 149, 181, 186, 278, 286, 312, 342], "conda": 377, "condit": [168, 317, 999], "confid": 122, "config_context": 468, "configur": [365, 366], "confus": [252, 409, 992], "confusion_matrix": 718, "confusionmatrixdisplai": [227, 697], "connect": [409, 417, 1027], "consensu": 988, "consensus_scor": 719, "consider": [253, 374], "constant": [197, 253, 982], "constantkernel": 613, "constrain": 1027, "constraint": [125, 127, 320, 322, 409, 416], "construct": 232, "consum": 233, "content": [368, 391, 1019], "conting": 409, "contingency_matrix": 714, "continu": [306, 379], "contribut": [379, 391], "contributor": [0, 378, 379, 394, 1039, 1040, 1041, 1042, 1043], "control": [361, 416, 996], "convent": [380, 1019], "converg": 109, "convergencewarn": 571, "convex": 207, "cookbook": 158, "coordin": 186, "core": [0, 6, 367, 378, 383, 385, 391, 394, 994], "corpu": 417, "correl": [167, 170, 412, 992, 1000], "cosin": 990, "cosine_dist": 760, "cosine_similar": 761, "cost": [253, 355, 1008], "countvector": 588, "covari": [32, 75, 76, 78, 79, 80, 164, 245, 407, 411, 422, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 986, 1043, 1047, 1048, 1049, 1051, 1052], "coverag": [379, 387, 992], "coverage_error": 720, "covertyp": [236, 374], "craft": 384, "crash": 391, "creat": [68, 100, 109, 201, 227, 266, 312, 341, 342, 391], "credit": 253, "criteria": [185, 391, 988, 1008], "criterion": [186, 317, 981, 1006], "cross": [2, 82, 83, 136, 145, 164, 186, 253, 254, 255, 257, 258, 262, 264, 269, 312, 341, 361, 407, 408, 412, 413, 981, 988, 1023], "cross_decomposit": [407, 482, 483, 484, 485, 1045, 1047, 1049, 1051, 1053], "cross_val_predict": 825, "cross_val_scor": [263, 826], "cross_valid": [413, 827], "cubic": 177, "cumul": 992, "curat": 378, "curs": 1026, "curv": [23, 25, 177, 232, 239, 249, 256, 261, 266, 268, 275, 406, 987], "custom": [107, 257, 334, 417, 1002, 1007], "cut": [253, 273], "cv": [254, 361], "cv_results_": 981, "cython": [380, 385, 387], "d": [413, 995], "d2_absolute_error_scor": 721, "d2_log_loss_scor": 722, "d2_pinball_scor": 723, "d2_tweedie_scor": 724, "data": [2, 5, 7, 10, 15, 18, 22, 24, 32, 36, 45, 47, 48, 53, 55, 56, 61, 62, 64, 65, 68, 73, 76, 78, 80, 83, 84, 94, 95, 98, 99, 100, 110, 116, 117, 120, 123, 125, 126, 130, 142, 145, 146, 155, 157, 162, 166, 169, 170, 173, 177, 183, 190, 191, 201, 227, 232, 239, 248, 254, 256, 260, 265, 266, 268, 269, 272, 286, 290, 295, 302, 305, 309, 310, 311, 322, 325, 338, 341, 344, 345, 351, 352, 361, 365, 367, 374, 384, 391, 393, 409, 410, 413, 418, 1002, 1006, 1017, 1019, 1022, 1025, 1027, 1028], "dataconversionwarn": 572, "datadimensionalitywarn": 573, "datafram": [315, 322, 391, 1052], "dataiku": 1017, "datarobot": 1017, "dataset": [1, 2, 3, 6, 11, 22, 23, 25, 30, 42, 56, 60, 68, 83, 86, 87, 88, 89, 90, 93, 101, 109, 115, 118, 119, 130, 136, 149, 151, 153, 154, 156, 158, 164, 166, 167, 168, 176, 179, 181, 186, 197, 199, 206, 215, 218, 219, 226, 231, 236, 237, 253, 257, 265, 266, 273, 278, 281, 312, 329, 330, 335, 342, 350, 356, 371, 372, 373, 374, 375, 376, 384, 391, 407, 419, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 1019, 1025, 1026, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davi": 409, "davies_bouldin_scor": 725, "dbscan": [47, 409, 420, 444], "dbscan_clust": 53, "dcg_score": 726, "deal": [391, 407], "debian": 396, "debug": 387, "debugg": 385, "decis": [109, 110, 118, 126, 131, 164, 231, 253, 273, 286, 321, 330, 342, 354, 355, 356, 357, 358, 359, 391, 394, 407, 408, 1008], "decisionboundarydisplai": 631, "decisiontre": 110, "decisiontreeclassifi": 912, "decisiontreeregressor": [317, 913], "decod": 417, "decompos": 414, "decomposit": [82, 83, 92, 93, 112, 164, 375, 407, 412, 414, 421, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 1027, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decreas": [116, 117, 169], "deep": 391, "default": [233, 290, 379], "defin": [35, 45, 56, 65, 218, 254, 256, 257, 352, 992], "definit": [215, 302, 999, 1045], "deflat": 83, "delai": 959, "demand": [2, 11], "demo": [18, 19, 36, 45, 47, 53, 56, 61, 63], "demonstr": [55, 263, 308, 325], "dendrogram": 39, "denois": [3, 96], "dens": 183, "densiti": [247, 287, 288, 296, 321, 415, 938, 1007], "densitymixin": 428, "depend": [168, 233, 237, 377, 999, 1035, 1048, 1049], "deploi": 391, "deploy": 396, "deprec": [233, 379, 407, 931, 1045], "descent": [186, 205, 211, 988, 1006], "descript": 166, "design": 154, "det": [256, 992], "det_curv": 727, "detail": [984, 1006, 1007], "detcurvedisplai": 698, "detect": [7, 226, 236, 256, 289, 290, 992, 998, 1007], "determin": [79, 181, 411, 988, 992], "develop": [0, 105, 107, 164, 233, 377, 380, 381, 382, 383, 386, 387, 388, 981, 1030, 1051], "devianc": [123, 992], "devic": 404, "diabet": [136, 237, 273, 376, 1026], "diagnost": 376, "dict": 417, "dict_learn": 545, "dict_learning_onlin": 546, "dictionari": [48, 93, 96, 102, 414], "dictionarylearn": 531, "dictvector": [352, 581], "did": 391, "diff": 387, "differ": [38, 42, 60, 76, 158, 168, 305, 308, 311, 335, 342, 381, 391, 399, 409, 988, 1026], "digit": [30, 50, 56, 87, 137, 219, 302, 325, 326, 376, 1025], "dimension": [70, 218, 221, 238, 292, 310, 351, 986, 989, 995, 1009, 1026], "direct": 214, "directli": 391, "dirichlet": [13, 414, 991], "discount": 992, "discoveri": [407, 932, 933, 934], "discret": [126, 157, 306, 307, 1002], "discrimin": [31, 32, 407, 986], "discriminant_analysi": [407, 549, 550, 1043, 1044, 1047, 1049, 1050, 1051], "discuss": 378, "disk": 15, "dispatch": 389, "displai": [96, 202, 227, 228, 238, 320, 321, 322, 387, 1032, 1051], "distanc": [78, 407], "distance_metr": 762, "distancemetr": 699, "distort": 96, "distribut": [9, 215, 218, 296, 309, 374, 396, 989, 1002], "diverg": 414, "divid": 319, "do": [384, 391], "document": [0, 6, 17, 164, 317, 318, 349, 350, 351, 379, 1012, 1013, 1016, 1031, 1035, 1038, 1039, 1042, 1043], "doe": 391, "domain": 1012, "donat": 0, "dot": [158, 419], "dotproduct": 614, "down": 384, "download": [15, 130, 162, 373], "drawback": 409, "drop": 119, "dtype": 322, "dummi": [407, 551, 552, 992, 1043, 1044, 1045, 1048, 1049, 1053], "dummyclassifi": 551, "dummyregressor": 552, "dump_svmlight_fil": 487, "dure": 361, "d\u00b2": 992, "each": [266, 271, 350, 981], "earli": [120, 125, 205], "earlier": 1035, "eas": 380, "easi": 379, "effect": [73, 125, 166, 223, 305, 310, 328, 355], "effici": [320, 322, 388], "efficiencywarn": 574, "eigenfac": [4, 93, 1024], "eigenmap": 989, "eigenvector": 15, "elast": [178, 182, 988], "elasticnet": [181, 316, 646], "elasticnetcv": 647, "element": 393, "elimin": [144, 145, 418, 981], "ellipsoid": [32, 244], "ellipt": 998, "ellipticenvelop": 469, "embed": [10, 50, 218, 219, 230, 293, 416, 989], "emeritu": 0, "empir": [59, 79, 230, 411], "empirical_covari": 477, "empiricalcovari": 470, "enable_halving_search_cv": 579, "enable_iterative_imput": 580, "encod": [51, 119, 311, 312, 321, 1002, 1003], "enet_path": 681, "enforc": [1046, 1048], "engin": [2, 11, 169, 1012, 1017], "enhanc": [320, 394, 1012, 1038, 1039, 1040, 1041, 1042], "enrich": 322, "ensembl": [108, 114, 118, 164, 319, 407, 416, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "enthought": 396, "entir": 391, "entri": 1005, "envelop": 998, "environ": [366, 402], "equival": 259, "error": [109, 113, 120, 122, 136, 176, 201, 256, 272, 387, 396, 988, 992], "establish": [62, 173], "estim": [67, 75, 76, 77, 78, 79, 80, 105, 107, 112, 119, 121, 129, 155, 162, 164, 176, 200, 203, 228, 233, 235, 236, 247, 267, 278, 287, 288, 296, 315, 316, 317, 320, 322, 361, 381, 391, 392, 393, 404, 407, 410, 411, 413, 415, 416, 981, 982, 986, 988, 992, 1007, 1012, 1021, 1023, 1025, 1036, 1043, 1044, 1045], "estimate_bandwidth": 458, "estimator_check": [935, 936], "estimator_html_repr": 937, "euclidean_dist": 763, "evalu": [11, 35, 56, 59, 79, 197, 236, 253, 260, 263, 302, 311, 351, 392, 403, 405, 409, 413, 416, 981, 987, 992, 1028], "evernot": 1017, "exact": 414, "exampl": [1, 4, 7, 51, 57, 73, 86, 99, 107, 126, 156, 164, 193, 194, 201, 343, 346, 367, 373, 374, 384, 391, 395, 399, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 510, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 584, 587, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 727, 729, 732, 734, 735, 737, 738, 741, 742, 745, 746, 748, 749, 750, 752, 753, 755, 757, 761, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 893, 897, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 913, 918, 919, 927, 936, 938, 945, 949, 950, 951, 952, 953, 966, 976, 981, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1019, 1025, 1026, 1027, 1032, 1035], "except": [388, 407, 571, 572, 573, 574, 575, 576, 577, 578, 1047, 1051], "execut": [361, 391], "exercis": [135, 136, 137, 138, 164, 1023, 1026, 1028], "exhaust": 981, "exist": 379, "exp": [158, 419], "expans": 176, "expect": [168, 317, 999], "experi": [0, 35, 378], "experiment": [320, 383, 404, 407, 579, 580, 1051], "explain": 992, "explained_variance_scor": 728, "explicit": 231, "explor": 2, "exponenti": 616, "export": 391, "export_graphviz": 916, "export_text": 917, "expsinesquar": 615, "extend": 988, "extens": [385, 396], "extern": [373, 1011, 1019, 1035, 1044], "extmath": [938, 939, 940, 941, 942, 943], "extract": [13, 72, 96, 215, 260, 351, 365, 367, 407, 417, 1028], "extract_patches_2d": 584, "extrapol": 154, "extratreeclassifi": 914, "extratreeregressor": 915, "extratreesclassifi": 557, "extratreesregressor": 558, "extrem": [384, 416], "f": [141, 992], "f1": 266, "f1_score": 729, "f_classif": 605, "f_regress": 606, "fa": [93, 100], "face": [4, 48, 93, 235, 374, 1017, 1024], "factor": [13, 93, 100, 103, 289, 290, 414, 998], "factoranalysi": 532, "fail": 384, "failur": [166, 981], "fast_logdet": 939, "faster": [320, 416], "fastica": [93, 94, 95, 421, 533], "fbeta_scor": 730, "featur": [2, 11, 49, 52, 72, 98, 114, 116, 117, 119, 123, 125, 127, 128, 140, 142, 144, 145, 146, 164, 169, 170, 173, 176, 191, 194, 215, 231, 237, 260, 302, 306, 307, 310, 311, 315, 317, 318, 341, 350, 351, 365, 367, 379, 383, 399, 407, 410, 416, 417, 418, 982, 1000, 1002, 1009, 1027, 1028, 1038, 1039, 1040, 1041, 1042], "feature_extract": [407, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "feature_select": [407, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "featureagglomer": [409, 445], "featurehash": [352, 582], "featureunion": [410, 863], "fedora": 396, "fetch_20newsgroup": 488, "fetch_20newsgroups_vector": 489, "fetch_california_h": 490, "fetch_covtyp": 491, "fetch_kddcup99": 492, "fetch_lfw_pair": 493, "fetch_lfw_peopl": 494, "fetch_olivetti_fac": 495, "fetch_openml": [320, 496], "fetch_rcv1": 497, "fetch_species_distribut": 498, "file": [15, 396, 417, 1028], "final": [55, 149], "find": 995, "first": [7, 35, 379], "fit": [18, 24, 55, 94, 100, 116, 117, 122, 123, 154, 176, 177, 178, 191, 194, 199, 203, 266, 281, 290, 295, 312, 344, 361, 381, 392, 399, 404, 407, 416, 994, 998, 1019], "fitfailedwarn": 575, "fix": [35, 383, 1035, 1038, 1039, 1040, 1041, 1042, 1048], "fixedthresholdclassifi": 799, "flag": 387, "flexibl": [318, 982], "fold": [387, 413], "footprint": 51, "forc": [981, 995], "forecast": [11, 154], "forest": [113, 115, 116, 117, 129, 169, 170, 236, 239, 322, 374, 416, 998], "forg": 377, "format": [373, 384, 391, 993], "formul": [405, 416, 986, 995, 1006, 1007, 1008], "four": 64, "fowlk": 409, "fowlkes_mallows_scor": 731, "framework": 1012, "free": 156, "freebsd": 377, "freez": 391, "french": 197, "frequenc": [215, 1028], "frequent": 391, "frequentist": 259, "frobeniu": 414, "from": [10, 96, 146, 169, 311, 315, 366, 373, 377, 391, 407, 417, 992, 1019, 1026, 1027, 1028, 1045], "from_estim": [438, 631, 632, 697, 698, 700, 701, 702, 806, 823], "from_predict": [697, 700, 701, 702], "fruit": 378, "fulli": 166, "function": [8, 32, 158, 187, 201, 202, 207, 219, 254, 272, 273, 317, 341, 352, 388, 407, 413, 416, 419, 984, 988, 992, 1007, 1026, 1052], "functiontransform": 868, "fund": 0, "futur": 391, "futurewarn": 1045, "gain": [253, 992], "gamma": [215, 321, 992], "gammaregressor": 648, "gaussian": [22, 23, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 242, 243, 244, 247, 248, 249, 305, 407, 419, 991, 994, 1002, 1004], "gaussian_process": [407, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaussianmixtur": 798, "gaussiannb": 842, "gaussianprocessclassifi": 610, "gaussianprocessregressor": 611, "gaussianrandomproject": 896, "gdb": 385, "gen_batch": 944, "gen_even_slic": 945, "gener": [11, 18, 22, 32, 36, 45, 47, 53, 55, 61, 62, 64, 65, 76, 78, 80, 89, 90, 94, 95, 96, 116, 126, 142, 145, 149, 155, 156, 158, 164, 175, 176, 177, 181, 191, 197, 199, 232, 248, 256, 272, 290, 295, 302, 316, 325, 344, 345, 361, 375, 379, 393, 407, 414, 416, 988, 1002, 1013, 1023], "genericunivariateselect": 592, "german": 253, "get": [361, 391, 392], "get_config": 626, "get_data_hom": 499, "get_feature_names_out": 319, "get_param": 381, "get_routing_for_object": 951, "get_scor": 732, "get_scorer_nam": 733, "git": 379, "github": 379, "gitter": 1016, "glm": 407, "glossari": 393, "gmm": [245, 246], "goal": 1013, "good": [379, 384], "govern": [0, 394], "gpc": [150, 151, 152, 153, 419], "gperftool": 385, "gpr": [154, 155, 419], "gprof": 385, "gpu": 391, "gradient": [2, 115, 119, 120, 121, 122, 123, 124, 125, 168, 197, 205, 211, 315, 316, 318, 320, 321, 416, 988, 1006], "gradientboostingclassifi": [416, 559], "gradientboostingregressor": [416, 560], "gram": 178, "graph": [10, 315, 388, 391, 407, 409, 417, 946], "graphic": [391, 997], "graphical_lasso": 478, "graphicallasso": 471, "graphicallassocv": 472, "greek": 44, "grid": [238, 257, 259, 267, 270, 981, 1023, 1028], "grid_to_graph": 585, "gridsearchcv": [70, 136, 263, 800], "ground": [35, 176], "group": [319, 321, 413, 1017, 1027], "groupkfold": 801, "groupshufflesplit": 802, "grow": 35, "guid": [382, 1030], "guidelin": [379, 381], "halv": [270, 271, 317, 981], "halvinggridsearchcv": 803, "halvingrandomsearchcv": 804, "ham": 992, "hamming_loss": 734, "hand": 30, "handl": [170, 407, 982], "handwritten": [56, 219, 376], "harabasz": 409, "hard": 416, "has_fit_paramet": 980, "hash": [128, 388, 417], "hashingvector": [351, 589], "haversine_dist": 764, "hdbscan": [53, 321, 409, 446], "help": [378, 379, 391], "helper": [8, 158, 219, 388], "here": [359, 1028], "hessian": 989, "heterogen": [68, 410], "hierarch": [39, 45, 60, 65, 321, 409, 1027], "hierarchi": 409, "high": 1026, "higher": 366, "highlight": [164, 314, 315, 316, 317, 318, 319, 320, 321, 322, 1035, 1038, 1039, 1042, 1043], "hing": 992, "hinge_loss": 735, "histgradientboost": [317, 322], "histgradientboostingclassifi": [416, 561], "histgradientboostingregressor": [319, 562], "histogram": [115, 125, 316, 318, 320, 415, 416], "histori": [0, 1033], "hmm": 391, "hoc": 273, "hole": 222, "home": 259, "homebrew": 377, "homogen": 409, "homogeneity_completeness_v_measur": 736, "homogeneity_scor": 737, "hot": 119, "hour": 11, "hourli": 166, "hous": [119, 236, 374], "how": [136, 361, 379, 385, 391], "howaboutw": 1017, "html": [228, 381], "huber": 988, "huberregressor": [179, 649], "hug": 1017, "hyper": [122, 257, 317, 407, 981], "hyperparamet": [53, 154, 155, 260, 267, 278, 617], "hyperplan": [209, 339, 340], "i": [359, 384, 391, 413, 1017], "ic": [168, 999], "ica": [94, 414, 1027], "id3": 1008, "identif": 1028, "idf": 417, "illustr": [70, 153, 158, 293, 419], "imag": [3, 45, 48, 51, 64, 96, 373, 391, 407, 417, 583, 584, 585, 586, 587], "img_to_graph": 586, "impact": [2, 59, 1050, 1051, 1052, 1053], "implement": [107, 183, 391, 992, 995, 1006, 1007], "import": [116, 117, 123, 146, 169, 170, 231, 278, 310, 315, 408, 416, 1000], "improv": [316, 317, 318, 319, 320, 322, 378, 379, 1038, 1039], "impur": [116, 117, 169, 355, 1000], "imput": [160, 161, 162, 164, 315, 407, 627, 628, 629, 630, 982, 1002, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "includ": 391, "inclus": 391, "incom": 166, "inconsist": 361, "inconsistentversionwarn": 576, "incr_mean_variance_axi": 967, "increment": [97, 367, 414], "incrementalpca": 534, "independ": [93, 414, 1027], "index": [409, 947], "indic": 254, "individu": [133, 168, 317, 999], "induct": 54, "infer": 166, "influenc": [5, 8, 365], "infonea": 1017, "inform": [141, 162, 185, 186, 383, 407, 409, 981, 988], "infrastructur": 0, "infrequ": [319, 321, 1002], "init": 381, "initi": [57, 59, 246], "inplace_column_scal": 968, "inplace_csr_column_scal": 969, "inplace_csr_row_normalize_l1": 974, "inplace_csr_row_normalize_l2": 975, "inplace_row_scal": 970, "inplace_swap_column": 971, "inplace_swap_row": 972, "input": [365, 381, 404, 407, 409, 1002], "inria": 1017, "inspect": [164, 165, 395, 407, 631, 632, 633, 634, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instal": [377, 396], "instanc": [361, 367], "instanti": 381, "instead": 253, "instruct": 377, "insur": 215, "integr": 379, "intel": 396, "interact": [2, 168, 320, 416, 1026], "interfac": [399, 407], "intern": [312, 408], "internet": 10, "interoper": 1012, "interpol": 198, "interpret": [154, 167, 201, 236, 281, 414, 416], "interv": 122, "introduc": 240, "introduct": [989, 1019], "introductori": 156, "invari": [53, 262], "invers": [80, 411, 1004], "inverse_transform": 1027, "io": 402, "iri": [88, 99, 101, 118, 151, 206, 330, 335, 356, 376, 419, 1025], "iris": 1026, "is_classifi": 435, "is_multilabel": 954, "is_regressor": 436, "iso": [152, 266], "isol": 998, "isolationforest": [126, 563], "isomap": [218, 219, 688, 989], "isoton": [229, 406, 407, 635, 636, 637, 983, 1043, 1044, 1045, 1047, 1049, 1050], "isotonic_regress": 637, "isotonicregress": 635, "issu": [378, 379], "iter": [162, 271, 413, 981], "iterativeimput": [161, 627, 982], "j": 1017, "jaccard": 992, "jaccard_scor": 738, "job": 391, "joblib": [366, 385, 402], "johnson": [230, 1004], "johnson_lindenstrauss_min_dim": 898, "joint": 191, "k": [41, 43, 46, 55, 56, 57, 59, 62, 65, 83, 286, 310, 351, 409, 413, 992, 995, 1002, 1026, 1027], "k_mean": 459, "kappa": 992, "kbinsdiscret": [306, 308, 869], "kcachegrind": 385, "kddcup": 374, "kddcup99": 236, "kdtree": [845, 995], "keep": 982, "kei": 402, "kernel": [2, 3, 98, 149, 154, 155, 157, 158, 164, 172, 173, 231, 232, 287, 288, 296, 317, 334, 337, 342, 344, 407, 414, 415, 419, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 984, 985, 990, 1002, 1007, 1026], "kernel_approxim": [407, 638, 639, 640, 641, 642, 1045, 1047, 1048, 1049, 1050, 1051], "kernel_metr": 765, "kernel_ridg": [407, 643, 1052], "kernelcenter": 870, "kerneldens": 849, "kernelpca": [98, 535], "kernelridg": 643, "keyword": [318, 1046, 1048], "kfold": 805, "kmean": [58, 62, 316, 447], "kmeans_plusplu": 460, "kneighbors_graph": 857, "kneighborsclassifi": 846, "kneighborsregressor": 847, "kneighborstransform": 848, "knn": [162, 315], "knnimput": 628, "knowledg": 380, "known": [383, 1043, 1044], "kpca": 414, "l": 177, "l1": [12, 181, 188, 190, 213, 345, 418], "l1_min_c": 911, "l2": [201, 345], "label": [35, 266, 325, 326, 327, 374, 375, 407, 409, 413, 416, 992, 1003, 1005], "label_binar": 888, "label_ranking_average_precision_scor": 739, "label_ranking_loss": 740, "labelbinar": [871, 1003], "labelencod": 872, "labelpropag": 899, "labelspread": 900, "lag": 11, "languag": 1028, "laplacian": 990, "laplacian_kernel": 766, "lar": [184, 650, 988], "larg": 417, "lars_path": 682, "lars_path_gram": 683, "larscv": 651, "lasso": [12, 181, 182, 183, 184, 185, 186, 191, 316, 652, 988], "lasso_path": 684, "lassocv": 653, "lassolar": 654, "lassolars": 656, "lassolarscv": 655, "latenc": [8, 365], "latent": [13, 83, 414], "latentdirichletalloc": 536, "latest": 396, "layer": [168, 299, 996], "lda": [32, 101, 414, 986], "leakag": 361, "learn": [0, 3, 10, 48, 93, 96, 148, 164, 166, 167, 168, 173, 217, 218, 219, 220, 232, 233, 253, 254, 261, 293, 300, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 364, 365, 367, 375, 377, 379, 380, 381, 383, 384, 391, 394, 396, 407, 414, 416, 987, 989, 997, 1005, 1010, 1012, 1013, 1015, 1017, 1019, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1031], "learner": [109, 416], "learning_curv": 828, "learningcurvedisplai": 806, "least": [84, 122, 186, 192, 195, 988], "leav": [355, 413, 988], "leaveonegroupout": 807, "leaveoneout": 808, "leavepgroupsout": 809, "leavepout": 810, "ledoit": [31, 77, 411], "ledoit_wolf": 479, "ledoit_wolf_shrinkag": 480, "ledoitwolf": [76, 473], "lemma": 1004, "length": [126, 396], "lesson": [166, 167], "level": [154, 155, 366, 409, 416], "liabil": 197, "librari": [365, 366], "libsvm": 373, "likelihood": [76, 176, 177, 262, 992, 997], "limit": [119, 149, 365, 396, 402, 417], "lindenstrauss": [230, 1004], "line": [136, 152], "linear": [2, 23, 31, 32, 122, 149, 164, 167, 175, 176, 193, 197, 200, 203, 218, 219, 231, 316, 337, 342, 344, 365, 388, 391, 407, 986, 988, 989, 990, 1002, 1026], "linear_kernel": 767, "linear_model": [407, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lineardiscriminantanalysi": [320, 549], "linearregress": [199, 657], "linearsvc": [336, 904], "linearsvr": 905, "link": [365, 373, 992], "linkag": [60, 409], "linnerrud": 376, "linux": [377, 391, 396], "list": [35, 1016], "loa": 154, "load": [3, 5, 15, 48, 56, 88, 115, 117, 119, 123, 136, 146, 169, 190, 215, 219, 227, 231, 239, 260, 268, 269, 281, 286, 310, 311, 338, 341, 350, 351, 352, 372, 373, 384, 391, 417, 1019, 1027, 1028], "load_breast_canc": 500, "load_diabet": 501, "load_digit": 502, "load_fil": 503, "load_iri": 504, "load_linnerud": 505, "load_sample_imag": [506, 507], "load_svmlight_fil": [508, 509], "load_win": 510, "loader": 407, "local": [218, 219, 289, 290, 989, 998], "locally_linear_embed": 693, "locallylinearembed": 689, "localoutlierfactor": 850, "lof": [289, 290], "log": [176, 177, 992], "log_loss": 741, "logarithm": 992, "logist": [71, 180, 187, 188, 189, 190, 212, 213, 988, 1026], "logisticregress": [281, 658], "logisticregressioncv": 659, "loo": 413, "look": [11, 232, 344], "loss": [125, 197, 207, 316, 319, 321, 416, 992, 1052], "lot": 391, "love": 1017, "low": [409, 416, 418], "lower": 366, "lpo": 413, "lsa": 351, "mac": 396, "machin": [148, 164, 166, 167, 168, 302, 333, 387, 407, 997, 1007, 1019, 1026], "machinali": 1017, "maco": 377, "macport": 396, "macro": 268, "mahalanobi": 78, "mail": 1016, "main": [6, 197], "maintain": [0, 379, 383, 402], "major": [383, 416, 1043, 1044], "make": [130, 133, 162, 379, 383, 394], "make_biclust": 511, "make_blob": [384, 512], "make_checkerboard": 513, "make_circl": 514, "make_classif": [384, 515], "make_column_selector": 466, "make_column_transform": 467, "make_friedman1": 516, "make_friedman2": 517, "make_friedman3": 518, "make_gaussian_quantil": 519, "make_hastie_10_2": 520, "make_low_rank_matrix": 521, "make_moon": 522, "make_multilabel_classif": 523, "make_pipelin": 865, "make_regress": [384, 524], "make_s_curv": 525, "make_scor": 742, "make_sparse_coded_sign": 526, "make_sparse_spd_matrix": 527, "make_sparse_uncorrel": 528, "make_spd_matrix": 529, "make_swiss_rol": 530, "make_union": 866, "mallow": 409, "manag": [366, 396], "manhattan_dist": 768, "mani": [254, 320, 366, 391, 1052, 1053], "manifold": [164, 217, 218, 219, 220, 375, 407, 688, 689, 690, 691, 692, 693, 694, 695, 696, 989, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "manual": [253, 408], "map": [231, 309, 1002], "mar": 1017, "margin": [176, 177, 209, 339, 343], "mark": 982, "markdown": 384, "market": [10, 1024], "match": [196, 988], "matern": 619, "mathemat": [405, 407, 416, 984, 986, 995, 999, 1006, 1007, 1008], "matric": [388, 407, 1002], "matrix": [13, 15, 157, 178, 252, 407, 409, 414, 992], "matter": 167, "matthew": 992, "matthews_corrcoef": 743, "mat\u00e9rn": [158, 419], "max": [76, 992], "max_error": 744, "maxabs_scal": 889, "maxabsscal": [305, 873], "maximum": [209, 339, 997], "md": [690, 989], "mdi": [117, 169], "mean": [41, 43, 46, 55, 56, 57, 59, 61, 62, 116, 117, 162, 169, 201, 351, 409, 992, 1002, 1027], "mean_absolute_error": 745, "mean_absolute_percentage_error": 746, "mean_gamma_devi": 747, "mean_pinball_loss": 748, "mean_poisson_devi": 749, "mean_shift": 461, "mean_squared_error": 750, "mean_squared_log_error": 751, "mean_tweedie_devi": 752, "mean_variance_axi": 973, "meanshift": [61, 448], "measur": [130, 262, 409, 992], "media": 1016, "median": [988, 992], "median_absolute_error": 753, "member": 378, "memori": [51, 322, 365, 385, 387], "merg": 383, "meson": [387, 1053], "messag": 259, "meta": [129, 233, 278, 317, 407, 416], "metadata": [233, 321, 322, 350, 393, 399, 407, 1052, 1053, 1054], "metadata_rout": [948, 949, 950, 951, 952], "metadatarequest": 948, "metadatarout": 949, "metaestim": 953, "metaestimatormixin": 429, "method": [60, 72, 83, 108, 149, 164, 218, 220, 246, 277, 280, 393, 407, 409, 984, 998, 999, 1027], "methodmap": 950, "metric": [35, 38, 122, 253, 263, 404, 407, 409, 413, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 981, 990, 992, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "micro": [266, 268], "min_cluster_s": 53, "min_po": 921, "min_resourc": 981, "min_sampl": 53, "mincovdet": 474, "mini": [409, 414], "minibatchdictionarylearn": 537, "minibatchkmean": [40, 62, 93, 449], "minibatchnmf": [319, 538], "minibatchsparsepca": [93, 414, 539], "minim": [384, 1008, 1048, 1049], "minimum": [79, 411], "minmax_scal": 890, "minmaxscal": [305, 874], "minor": 383, "misc": 1035, "miscellan": [164, 225, 407, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "mislead": 1000, "miss": [125, 160, 161, 162, 164, 315, 321, 322, 416, 982, 1002, 1008], "missingind": 629, "mix": 69, "mixin": 381, "mixtur": [164, 242, 243, 244, 247, 248, 249, 407, 797, 798, 991, 1043, 1044, 1048, 1049, 1051, 1053], "mlp": 301, "mlpclassifi": [300, 861], "mlpregressor": 862, "mnist": [213, 301], "mode": [83, 365], "model": [2, 5, 9, 11, 55, 73, 83, 94, 100, 115, 116, 117, 119, 120, 123, 126, 145, 146, 149, 154, 164, 167, 168, 169, 173, 175, 176, 181, 185, 186, 191, 197, 200, 215, 227, 232, 236, 237, 242, 244, 248, 249, 251, 253, 258, 259, 261, 266, 281, 290, 295, 302, 310, 316, 318, 322, 342, 344, 350, 365, 381, 391, 392, 394, 402, 403, 407, 413, 981, 987, 988, 991, 992, 994, 996, 997, 1019, 1023, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "model_select": [321, 407, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "modifi": 989, "modul": [1035, 1043, 1044, 1050, 1051, 1052, 1053], "mona": 154, "monitor": 379, "monoton": [125, 127, 322, 416], "more": [318, 391, 996], "morgan": 1017, "most": 325, "motor": 197, "movi": 1028, "mp": 404, "much": 136, "multi": [53, 109, 129, 168, 191, 206, 221, 235, 263, 266, 299, 358, 385, 407, 988, 989, 992, 996, 1007, 1008], "multiclass": [164, 212, 268, 277, 278, 315, 388, 406, 407, 832, 833, 834, 954, 955, 956, 992, 993, 1019, 1026, 1044, 1047, 1048, 1049], "multicollinear": 170, "multidimension": 218, "multilabel": [90, 234, 281, 375, 388, 407, 992, 993, 1019], "multilabel_confusion_matrix": 754, "multilabelbinar": [875, 1003], "multinomi": [189, 213, 988, 994], "multinomialnb": 843, "multioutput": [164, 280, 407, 835, 836, 837, 838, 993, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "multioutputclassifi": [836, 993], "multioutputregressor": [837, 993], "multipl": [72, 238, 263, 361, 386, 413, 981, 982, 992, 1043, 1044], "multitaskelasticnet": 660, "multitaskelasticnetcv": 661, "multitasklasso": 662, "multitasklassocv": 663, "multivari": [83, 982], "murmurhash3_32": 957, "mutual": [141, 409], "mutual_info_classif": 607, "mutual_info_regress": 608, "mutual_info_scor": 755, "my": 391, "n_featur": 8, "n_job": 391, "naiv": [2, 11, 22, 23, 407, 994], "naive_bay": [407, 839, 840, 841, 842, 843, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "name": [127, 318, 391, 410], "nan": 982, "nan_euclidean_dist": 769, "nativ": [119, 311, 315, 317, 322], "ndcg_score": 756, "nearest": [65, 164, 283, 284, 285, 286, 291, 294, 295, 315, 407, 982, 995, 1026], "nearestcentroid": 851, "nearestneighbor": 852, "necessari": 384, "need": 391, "neg": [13, 93, 146, 192, 414, 988], "neighbor": [65, 164, 218, 283, 284, 285, 286, 291, 295, 310, 315, 407, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 982, 989, 995, 1026, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "neighborhood": [291, 292, 293, 995], "neighborhoodcomponentsanalysi": 853, "nest": [264, 410, 1023], "net": [178, 182, 988], "netbsd": 396, "network": [164, 168, 298, 407, 996, 997], "neural": [164, 168, 298, 407, 996, 997], "neural_network": [407, 860, 861, 862, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "new": [315, 317, 318, 320, 321, 379, 391, 1011, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "newsgroup": [68, 350, 374, 1028], "next": [11, 392], "nightli": 377, "nmf": [93, 319, 414, 540], "nnmf": 414, "nois": [155, 156, 177], "noisi": [96, 156, 201], "non": [2, 13, 93, 122, 192, 197, 201, 218, 264, 337, 344, 414, 988, 1002], "non_negative_factor": 547, "none": 361, "norm": 414, "normal": [31, 173, 197, 305, 309, 407, 876, 891, 992, 1002], "normalized_mutual_info_scor": 757, "note": [367, 404, 408, 413], "notfittederror": 577, "novelti": [289, 998, 1007], "now": [315, 318, 1045], "number": [35, 58, 119, 125, 145, 271, 365, 381, 981, 982], "numer": [167, 366, 381], "numpi": [366, 384], "nusvc": 906, "nusvr": 907, "nystroem": [639, 984], "oa": [31, 76, 77, 422, 475], "object": [227, 254, 381, 391, 407, 981, 992, 1025, 1032], "observ": [166, 1026, 1027], "obtain": [391, 413], "occurr": 1028, "off": [253, 273, 988], "okcupid": 1017, "older": 1035, "olivetti": 374, "omp": 988, "one": [84, 119, 237, 988, 992], "oneclasssvm": 908, "onehotencod": [319, 877], "onetoonefeaturemixin": 430, "onevsoneclassifi": [832, 993], "onevsrestclassifi": [281, 833, 993], "onli": [194, 214, 1046, 1048], "onlin": [48, 204, 318, 319, 1006], "onnx": 402, "oob": 113, "open": 1024, "openml": [3, 311, 315, 373], "openmp": [366, 380], "oper": [268, 269, 378, 388, 407, 419, 992], "optic": [63, 376, 409, 450], "optim": [385, 407, 981], "optimis": 155, "option": [381, 408], "oracl": 411, "ordin": 119, "ordinalencod": [321, 878], "ordinari": [195, 988], "org": [373, 383, 1017], "origin": [51, 98, 265, 293, 305], "orthogon": [196, 988], "orthogonal_mp": 685, "orthogonal_mp_gram": 686, "orthogonalmatchingpursuit": 664, "orthogonalmatchingpursuitcv": 665, "osx": [391, 396], "other": [311, 373, 391, 416, 1012, 1035], "otto": 1017, "our": [56, 254, 257, 273, 379], "out": [6, 121, 367, 387, 413, 981, 988, 994], "outdat": 387, "outlier": [7, 179, 214, 226, 236, 289, 290, 305, 407, 988, 998, 1002], "outliermixin": 431, "outlin": 1000, "output": [129, 235, 305, 320, 322, 358, 1008, 1026], "outputcodeclassifi": [834, 993], "over": 238, "overfit": 274, "overhead": 365, "oversubscript": 366, "overview": [278, 386, 402, 409, 998], "ovo": 268, "ovr": 268, "own": [381, 391, 992], "p": [413, 1017], "packag": [231, 1012, 1047], "pair": 409, "pair_confusion_matrix": 715, "paired_cosine_dist": 770, "paired_dist": 771, "paired_euclidean_dist": 772, "paired_manhattan_dist": 773, "pairwis": [2, 259, 407, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 990], "pairwise_dist": 778, "pairwise_distances_argmin": 779, "pairwise_distances_argmin_min": 780, "pairwise_distances_chunk": 781, "pairwise_kernel": 774, "pairwisekernel": 620, "panda": [320, 384, 391], "parallel": [117, 366, 385, 407, 409, 416, 958, 959, 981], "parallel_backend": 960, "paramet": [5, 76, 122, 257, 317, 338, 345, 379, 381, 392, 393, 407, 410, 416, 981, 988, 992, 1007, 1019, 1023, 1028], "parametergrid": 811, "parametersampl": 812, "parametr": 997, "parametrize_with_check": 936, "pariba": 1017, "paristech": 1017, "pariti": 62, "parser": [320, 373], "part": [48, 418], "parti": [197, 233, 396], "partial": [84, 166, 168, 237, 999], "partial_depend": 633, "partialdependencedisplai": 632, "partit": 173, "passiv": 988, "passiveaggressiveclassifi": 666, "passiveaggressiveregressor": 667, "past": 0, "patch": [96, 417], "patchextractor": 583, "path": [126, 184, 190, 202, 359, 396], "pattern": 103, "pca": [3, 56, 71, 88, 93, 94, 97, 98, 99, 100, 101, 310, 322, 414, 541, 1009, 1027], "pdp": 168, "peerindex": 1017, "penalti": [188, 208, 345], "peopl": [0, 391, 1035, 1036, 1037, 1038], "per": 351, "percentag": 992, "percentil": 341, "perceptron": [168, 299, 668, 988, 996], "perform": [35, 41, 262, 310, 317, 319, 325, 351, 365, 379, 380, 409, 413, 1028], "period": [2, 198], "permiss": 391, "permut": [116, 169, 170, 265, 315, 413, 1000], "permutation_import": 634, "permutation_test_scor": 829, "perplex": 223, "persist": 402, "phimeca": 1017, "pickl": 402, "pictur": 44, "pinbal": 992, "pipelin": [67, 68, 70, 71, 130, 143, 164, 167, 228, 233, 238, 260, 311, 341, 381, 391, 392, 407, 410, 418, 863, 864, 865, 866, 1009, 1024, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "pitfal": [167, 361], "pixel": 117, "pl": 83, "plai": 341, "plan": 391, "plant": 376, "platform": [377, 387, 396], "plot": [5, 6, 8, 18, 22, 28, 32, 36, 39, 45, 47, 48, 55, 61, 62, 64, 65, 76, 80, 83, 88, 89, 90, 94, 95, 110, 115, 118, 123, 126, 130, 131, 132, 133, 136, 145, 162, 168, 176, 177, 181, 189, 190, 191, 201, 202, 206, 219, 227, 231, 236, 237, 239, 248, 255, 256, 261, 263, 266, 268, 272, 275, 281, 290, 302, 311, 315, 317, 318, 325, 335, 336, 341, 342, 350, 356, 386, 407, 987, 999, 1032], "plot_tre": 918, "pls1": 83, "pls2": 83, "plscanon": [412, 483], "plsregress": [412, 484], "plssvd": [412, 485], "point": [95, 253, 273, 293, 402], "poisson": [197, 215, 316, 317, 992], "poissonregressor": 669, "polar": [11, 322], "polynomi": [2, 173, 176, 177, 198, 342, 984, 988, 990, 1002, 1026], "polynomial_kernel": 775, "polynomialcountsketch": [317, 640], "polynomialfeatur": 879, "posit": [93, 318], "possibl": [55, 384], "post": [253, 262, 273, 355, 407, 408], "post1": 1045, "posterior": 158, "power": [84, 197], "power_transform": 892, "powertransform": [305, 880], "pr": [378, 383], "practic": [259, 361, 380, 384, 989, 996, 1006, 1007, 1008], "pre": [262, 361, 392], "precis": [266, 992], "precision_recall_curv": 782, "precision_recall_fscore_support": 783, "precision_scor": 784, "precisionrecalldisplai": [227, 700], "precomput": [102, 178, 315, 414], "predefin": [413, 992], "predefinedsplit": 813, "predict": [2, 8, 11, 22, 84, 110, 122, 133, 150, 166, 177, 197, 232, 253, 255, 266, 325, 365, 391, 392, 408, 413, 419, 992, 1003, 1019, 1026], "predictionerrordisplai": 701, "predictor": 130, "premium": 215, "prepar": [93, 110, 120, 125, 173, 218, 268, 269, 310, 338, 383], "preprocess": [123, 130, 164, 167, 168, 236, 238, 304, 321, 352, 361, 391, 407, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 1002, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "preprocessor": 168, "preserv": 387, "preval": 262, "princip": [15, 84, 414, 1009, 1027], "prior": [12, 158, 243], "privat": 1052, "pro": 991, "probabilist": [100, 150, 414, 419], "probabl": [22, 23, 24, 28, 132, 152, 406, 407, 416, 1007], "problem": [167, 253, 414, 1007, 1008, 1019, 1024, 1026, 1027], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 167, 361, 394, 407, 419, 991, 1022], "process_rout": 952, "processor": 392, "product": [158, 215, 387, 391, 402, 419, 621], "profil": 385, "project": [0, 84, 98, 101, 230, 381, 391, 407, 1004, 1009, 1012], "pronounc": 391, "propag": [10, 36, 325, 326, 327, 409, 1005], "proper": [11, 154], "properti": 393, "propos": 394, "provid": 384, "prune": [315, 355, 1008], "public": 1045, "publica": 1017, "pull": [379, 383, 387, 391], "pure": 215, "purpos": [201, 352, 1013], "pursuit": [196, 988], "put": 1024, "pypi": 391, "pytest": 387, "python": [231, 366, 385, 1011, 1012], "pytorch": 404, "qda": [32, 986], "quadradt": 158, "quadrat": [32, 419, 986], "quadraticdiscriminantanalysi": 550, "qualit": [2, 11], "qualiti": [351, 992], "quantifi": [351, 992], "quantil": [11, 122, 125, 199, 318, 319, 988], "quantile_transform": 893, "quantileregressor": [199, 670], "quantiletransform": [305, 881], "quantiz": [46, 51, 1027], "question": [391, 1016], "r2_score": 785, "r_regress": 609, "radial": [158, 419, 984, 1026], "radius_neighbors_graph": 858, "radiusneighborsclassifi": 854, "radiusneighborsregressor": 855, "radiusneighborstransform": 856, "rand": 409, "rand_scor": 786, "random": [15, 93, 113, 115, 128, 129, 169, 170, 230, 239, 265, 267, 322, 361, 381, 388, 407, 413, 414, 416, 961, 981, 988, 1004, 1009], "random_project": [407, 896, 897, 898, 1049], "random_st": 391, "randomforestclassifi": 564, "randomforestregressor": 565, "randomized_range_find": 940, "randomized_svd": 941, "randomizedsearchcv": 814, "randomli": [89, 90], "randomst": 361, "randomtreesembed": 566, "rang": 1002, "rangespan": 1017, "rank": [197, 407, 992], "ransac": [200, 988], "ransacregressor": 671, "rate": 416, "ratio": [262, 992], "ration": [158, 419], "rationalquadrat": 623, "rbf": [231, 337, 338, 342, 419, 622, 990, 1007, 1026], "rbf_kernel": 776, "rbfsampler": 641, "rcv1": 374, "reachabl": 409, "read": 379, "real": [1, 7, 73, 164, 374], "recal": [266, 992], "recall_scor": 787, "receiv": [268, 269, 992], "recent": 407, "recogn": 30, "recognit": [4, 374, 376, 1024], "recommend": [361, 374, 1012], "reconstruct": [3, 12, 96], "reconstruct_from_patches_2d": 587, "recov": 176, "recurs": [144, 145, 418], "redirect": 15, "reduc": [56, 365], "reduct": [70, 218, 222, 238, 292, 310, 351, 986, 995, 1009], "refer": [3, 9, 23, 25, 78, 79, 96, 109, 112, 169, 173, 181, 185, 259, 264, 265, 278, 296, 373, 374, 405, 406, 407, 409, 411, 414, 416, 417, 418, 419, 981, 982, 984, 985, 986, 988, 989, 990, 992, 993, 995, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007], "refit": [253, 257, 1019], "regard": [253, 408], "region": [44, 259], "register_parallel_backend": 962, "regress": [2, 11, 71, 73, 83, 84, 110, 122, 123, 133, 149, 154, 155, 156, 157, 176, 177, 180, 186, 188, 189, 190, 193, 195, 197, 199, 212, 214, 215, 229, 232, 295, 344, 357, 358, 375, 407, 410, 419, 983, 985, 988, 992, 993, 995, 996, 1006, 1007, 1008, 1026], "regressor": [8, 110, 122, 176, 201, 312, 315, 318, 407, 416], "regressorchain": [838, 993], "regressormixin": 432, "regular": [41, 76, 124, 167, 190, 201, 202, 299, 345, 988, 996], "reinforc": 391, "relat": [2, 6, 373, 1000, 1012, 1042], "releas": [164, 314, 315, 316, 317, 318, 319, 320, 321, 322, 383, 396, 1033], "relev": [78, 181, 988], "remark": [2, 55, 222, 230], "remot": 387, "remov": [391, 418, 1002, 1035], "repeat": [361, 410, 413], "repeatedkfold": 815, "repeatedstratifiedkfold": 816, "replac": 162, "repli": 387, "replic": 402, "report": [379, 384, 992], "repositori": 373, "represent": [88, 168, 228, 316, 365, 381, 417, 1027], "reproduc": [361, 384], "request": [379, 383, 387, 391], "resampl": 963, "rescal": 310, "reshap": [365, 1025], "resourc": [271, 366, 379, 981, 1011, 1016], "respect": 262, "respons": [83, 394], "rest": [189, 268], "restart": 385, "restrict": [302, 997], "result": [5, 6, 18, 25, 36, 45, 47, 48, 55, 56, 61, 62, 65, 76, 78, 80, 94, 95, 110, 115, 130, 133, 162, 173, 181, 202, 232, 236, 263, 272, 281, 290, 311, 344, 351, 361, 981], "retriev": [10, 315], "return": 404, "reuter": 6, "review": [378, 379, 387, 1028], "rfe": 593, "rfecv": 594, "rich": [228, 316], "ridg": [149, 177, 179, 195, 201, 202, 232, 312, 407, 672, 985, 988], "ridge_regress": 687, "ridgeclassifi": 674, "ridgeclassifiercv": 675, "ridgecv": 673, "right": 1021, "roadmap": 1013, "robust": [53, 78, 79, 176, 200, 203, 361, 407, 411, 981, 988], "robust_scal": 894, "robustscal": [305, 882], "roc": [239, 256, 268, 269, 315, 992], "roc_auc_scor": 788, "roc_curv": 789, "roccurvedisplai": [227, 702], "role": 394, "roll": [222, 381], "root_mean_squared_error": 790, "root_mean_squared_log_error": 791, "rotat": 103, "rout": [233, 321, 322, 393, 399, 407, 1052, 1053, 1054], "routin": [6, 366, 388], "rule": 992, "run": [5, 56, 263], "runtim": [322, 377], "r\u00b2": 992, "sa": 236, "safe_mask": 964, "safe_sparse_dot": 942, "safe_sqr": 965, "same": 1026, "sampl": [18, 36, 53, 61, 76, 94, 95, 142, 178, 210, 232, 260, 272, 295, 316, 344, 347, 373, 388, 393, 407, 416, 988], "sample_without_replac": 961, "saniti": 387, "save": 391, "scalabl": [173, 261, 316], "scale": [53, 167, 218, 221, 310, 345, 367, 895, 989, 998, 1002, 1009], "scaler": 305, "scatter": [83, 88], "scenario": 988, "scientif": [1011, 1022], "scikit": [0, 233, 254, 315, 316, 317, 318, 319, 320, 321, 322, 364, 365, 377, 380, 381, 383, 384, 391, 394, 396, 407, 1010, 1012, 1013, 1017, 1019, 1020, 1025, 1028, 1031], "scipi": [366, 1052], "score": [15, 83, 115, 136, 145, 162, 176, 248, 258, 265, 266, 341, 399, 409, 413, 987, 992, 1007, 1023], "script": 384, "search": [238, 257, 259, 267, 270, 278, 392, 981, 1023, 1028], "second": [7, 35], "section": 1019, "secur": [402, 1053], "see": [264, 410], "seek": 1027, "segment": [44, 64], "select": [52, 58, 70, 100, 136, 140, 142, 145, 146, 164, 185, 186, 191, 248, 251, 341, 391, 399, 403, 407, 413, 418, 981, 988, 1023, 1041], "selectfdr": 595, "selectfpr": 596, "selectfrommodel": [418, 597], "selectfw": 598, "selectkbest": 599, "selectormixin": 601, "selectpercentil": 600, "self": [317, 328, 1005], "selftrainingclassifi": 901, "semant": 414, "semi": [164, 324, 325, 329, 330, 407, 1005], "semi_supervis": [407, 899, 900, 901, 1045, 1046, 1047, 1051], "sen": [214, 988], "sens": 12, "sensit": 253, "sentiment": 1028, "separ": [94, 209, 339, 340], "sequenc": [157, 391], "sequenti": [146, 418], "sequentialfeatureselector": [317, 602], "seri": [11, 191, 413], "serv": 402, "set": [7, 73, 76, 99, 130, 162, 201, 253, 266, 338, 355, 391, 407, 408, 413, 988, 1019, 1025, 1026, 1028], "set_config": 902, "set_output": [240, 320, 322, 381], "set_param": 381, "setup": 1028, "sever": [215, 220], "sgd": [206, 207, 208, 209, 210, 988, 1006], "sgdclassifi": 676, "sgdoneclasssvm": 677, "sgdregressor": 678, "shape": [223, 1019], "share": [2, 11, 168], "shift": [61, 409], "ship": 1025, "should": 391, "show": [136, 268], "show_vers": 903, "shrinkag": [76, 411, 416, 986, 1026], "shrunk": 411, "shrunk_covari": 481, "shrunkcovari": 476, "shrunken": 995, "shuffl": [413, 966], "shufflesplit": 817, "sigmoid": [342, 406, 990, 1026], "sigmoid_kernel": 777, "signal": [181, 414, 1027], "signific": 265, "silhouett": [58, 409], "silhouette_sampl": 792, "silhouette_scor": 793, "similar": [157, 990, 992], "simpl": [107, 149, 233, 288, 385, 1025], "simpleimput": 630, "simul": 166, "sine": [158, 249, 419], "singl": [112, 130, 215, 227, 375, 409, 982], "single_source_shortest_path_length": 946, "singular": [15, 414], "sinusoid": 177, "site": 383, "size": 416, "sketch": 984, "skew": 984, "skewedchi2sampl": 642, "sklearn": [407, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sklearn_assume_finit": 366, "sklearn_build_enable_debug_symbol": 366, "sklearn_enable_debug_cython_direct": 366, "sklearn_pairwise_dist_chunk_s": 366, "sklearn_run_float32_test": 366, "sklearn_se": 366, "sklearn_skip_network_test": 366, "sklearn_tests_global_random_se": 366, "sklearn_warnings_as_error": 366, "sklearn_working_memori": 366, "skop": 402, "slep": 394, "smacof": 694, "small": 384, "sne": [223, 989], "so": 391, "social": 1016, "soft": 416, "solido": 1017, "solut": 55, "solv": [1026, 1027], "solver": [204, 414, 988], "some": 341, "someth": 384, "sometim": 391, "sort_graph_by_row_valu": 859, "sourc": [68, 94, 377], "space": [10, 98, 410, 981, 989], "spars": [80, 93, 102, 167, 181, 183, 212, 315, 322, 350, 351, 388, 407, 411, 414, 418, 1002, 1004, 1006, 1052], "sparse_encod": 548, "sparsecod": 542, "sparsefunc": [967, 968, 969, 970, 971, 972, 973, 1044], "sparsefuncs_fast": [974, 975], "sparsepca": [414, 543], "sparserandomproject": 897, "sparsiti": [188, 194, 417, 1026], "spawn": 366, "speci": [9, 296, 374], "special": 352, "specif": [268, 377, 381, 981, 1012, 1013], "specifi": [127, 391, 981], "spectral": [17, 18, 19, 64, 218, 405, 409, 989], "spectral_clust": 462, "spectral_embed": 695, "spectralbiclust": [18, 451], "spectralclust": 452, "spectralcoclust": 453, "spectralembed": 691, "speed": [8, 385], "sphere": 220, "spline": [2, 198, 318, 1002], "splinetransform": 883, "split": [119, 317, 361, 413], "splitter": [361, 407], "sponsor": 0, "spotifi": 1017, "sprint": 0, "squar": [84, 122, 158, 192, 195, 201, 419, 984, 988, 990, 992], "stabil": 316, "stabl": 318, "stack": [130, 315, 416], "stackingclassifi": 567, "stackingregressor": 568, "stall": 379, "standard": [387, 1002], "standardscal": [305, 884], "start": 392, "statement": 1013, "statist": [259, 1012, 1022, 1025], "statlog": 253, "statu": 399, "std": [136, 176], "step": [2, 238, 392, 410], "stochast": [205, 211, 218, 300, 988, 989, 997, 1006], "stock": [10, 1024], "stop": [120, 125, 205, 417, 1006], "strategi": [51, 257, 278, 300, 308, 321, 367, 407, 409, 992], "stratif": 413, "stratifi": 413, "stratifiedgroupkfold": [413, 818], "stratifiedkfold": 819, "stratifiedshufflesplit": 820, "stream": 367, "string": 391, "strip": 350, "strong": 179, "strongli": 1000, "structur": [10, 37, 45, 65, 157, 327, 359, 1024], "studi": 236, "submit": 379, "subpackag": 1013, "subsampl": 416, "subtleti": 361, "success": [270, 271, 317, 981], "sum": 624, "summar": 402, "summari": [23, 120, 186, 351, 352, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "supervis": [164, 324, 325, 329, 330, 407, 996, 1005, 1015, 1026], "support": [0, 23, 119, 125, 164, 191, 311, 315, 316, 317, 318, 320, 321, 322, 333, 336, 344, 391, 396, 399, 404, 406, 407, 416, 1007, 1008, 1016, 1026, 1052, 1053, 1054], "surfac": [118, 231, 356], "svc": [239, 342, 345, 909, 1007], "svd": [15, 93, 414], "svm": [4, 138, 142, 143, 173, 211, 231, 318, 330, 334, 335, 337, 338, 339, 340, 341, 342, 343, 346, 347, 407, 904, 905, 906, 907, 908, 909, 910, 911, 988, 998, 1006, 1026, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "svmlight": 373, "svr": [232, 344, 910, 1007], "swiss": 222, "switch": 366, "symmetr": 83, "synthet": [22, 73, 176, 181, 256, 312, 384], "system": 377, "t": [218, 223, 989], "tabl": [368, 391], "tag": [377, 379, 381], "take": 259, "takeawai": 197, "talk": 1011, "tangent": 989, "target": [73, 156, 215, 311, 312, 391, 393, 407, 410, 993, 1002, 1003], "targetencod": [321, 885], "task": [191, 407, 988, 1012], "team": [0, 378], "technic": 394, "techniqu": 219, "templat": 381, "tensor": 984, "term": [351, 393, 417], "test": [3, 76, 141, 262, 265, 272, 350, 355, 377, 379, 381, 387, 388, 413, 1019, 1026, 1028], "text": [6, 164, 228, 260, 329, 349, 350, 351, 352, 374, 407, 417, 588, 589, 590, 591, 1028], "tf": 417, "tfidftransform": 590, "tfidfvector": [351, 352, 591], "than": 391, "theil": [214, 988], "theilsenregressor": 679, "them": [96, 378], "theoret": 230, "thi": [201, 1013], "third": [197, 233, 396], "thread": 366, "threshold": [253, 273, 328, 408], "throughput": [8, 365], "tie": 346, "time": [2, 11, 14, 20, 26, 33, 66, 74, 81, 85, 91, 104, 106, 115, 134, 139, 147, 159, 163, 171, 174, 191, 216, 224, 231, 232, 241, 250, 276, 279, 282, 297, 303, 313, 323, 331, 332, 348, 350, 353, 360, 413, 1014], "timeseriessplit": 821, "tip": [365, 380, 387, 981, 989, 996, 1006, 1007, 1008], "togeth": [237, 268, 1024, 1027], "toi": [42, 60, 226, 376], "token": 1028, "toler": 146, "tomographi": 12, "too": 366, "tool": [388, 391, 404, 407], "top": [351, 992], "top_k_accuracy_scor": 794, "topic": 13, "total": [128, 355, 416], "tough": 378, "track": [387, 410], "tracker": [379, 1016], "trade": 988, "tradeoff": [256, 992], "train": [109, 110, 120, 123, 126, 133, 145, 201, 227, 232, 236, 237, 239, 248, 272, 278, 302, 311, 312, 317, 328, 338, 342, 350, 355, 356, 359, 402, 413, 995, 1005, 1019, 1026, 1028], "train_test_split": 830, "transform": [68, 69, 70, 73, 83, 114, 128, 238, 317, 318, 319, 371, 391, 392, 410, 995, 1002, 1003, 1004, 1027], "transformedtargetregressor": 465, "transformermixin": 433, "translat": 1012, "tree": [109, 110, 114, 116, 117, 118, 125, 128, 164, 169, 197, 315, 320, 321, 322, 354, 355, 356, 357, 358, 359, 391, 407, 416, 418, 912, 913, 914, 915, 916, 917, 918, 995, 1000, 1008, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "triag": 378, "trick": [365, 385, 387, 417], "trigonometr": 2, "troubleshoot": 396, "true": [176, 177], "truncat": 414, "truncatedsvd": 544, "trust": 136, "trustworthi": 696, "truth": [35, 176], "tsne": [283, 692], "tune": [122, 253, 257, 260, 273, 317, 407, 408, 981, 1028], "tunedthresholdclassifiercv": 822, "tutori": [135, 164, 1011, 1020, 1022, 1028], "tweedi": [215, 992], "tweedieregressor": [215, 680], "two": [64, 111, 183, 237, 259], "type": [69, 243, 380, 381, 393, 404, 409, 1019], "type_of_target": 955, "typic": 378, "t\u00e9l\u00e9com": 1017, "u": 0, "ubuntu": 396, "uci": 278, "unbalanc": [340, 1007], "uncertain": 325, "uncertainti": 11, "unclaim": 379, "undefinedmetricwarn": 578, "under": [157, 391, 1030, 1051], "underfit": 274, "understand": 359, "unfold": 387, "uniform": [305, 1002], "unique_label": 956, "univari": [52, 83, 142, 341, 418, 982], "univers": 381, "unlabel": 1005, "unless": 384, "unstructur": 65, "unsupervis": [995, 997, 1009, 1027, 1029], "unweight": 399, "up": 998, "updat": [1019, 1045], "us": [3, 4, 10, 15, 46, 93, 94, 96, 127, 128, 130, 146, 154, 184, 200, 211, 213, 259, 263, 268, 281, 306, 344, 350, 351, 359, 361, 367, 380, 384, 385, 387, 391, 407, 413, 414, 417, 418, 423, 426, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 510, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 584, 587, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 727, 729, 732, 734, 735, 737, 738, 741, 742, 745, 746, 748, 749, 750, 752, 753, 755, 757, 761, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 893, 897, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 913, 918, 919, 927, 936, 938, 945, 949, 950, 951, 952, 953, 966, 976, 986, 988, 989, 992, 996, 1006, 1007, 1008, 1017, 1026, 1028, 1045], "usabl": 391, "usag": [385, 391, 399, 404, 406, 410, 416, 417, 988], "user": [1016, 1030], "util": [372, 384, 388, 407, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1028, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "v": [52, 65, 76, 77, 79, 84, 98, 145, 168, 169, 179, 189, 215, 262, 268, 272, 274, 355, 409, 416, 982, 1019], "v_measure_scor": 795, "valgrind": [385, 387], "valid": [2, 136, 145, 186, 230, 253, 254, 255, 257, 258, 262, 264, 269, 275, 341, 361, 365, 381, 388, 407, 408, 413, 976, 977, 978, 979, 980, 981, 987, 988, 1023], "validation_curv": 831, "validationcurvedisplai": [321, 823], "valu": [125, 146, 160, 161, 162, 164, 223, 233, 315, 321, 322, 359, 379, 404, 414, 416, 982, 992, 1000, 1002, 1008], "vanilla": [253, 273], "vari": [35, 299, 328, 409], "variabl": [83, 166, 167, 366, 391, 407, 1026], "varianc": [112, 195, 418, 992, 1002], "variancethreshold": 603, "variant": 161, "variat": [243, 991], "variou": [8, 50, 204, 223], "vector": [15, 23, 51, 164, 333, 336, 344, 350, 352, 407, 417, 1007, 1026, 1027], "version": [319, 373, 377, 383, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "versu": [112, 211, 264, 330, 365], "via": [3, 11, 51, 185, 186, 215, 416, 984], "video": [379, 1011], "visual": [10, 56, 103, 120, 227, 232, 239, 254, 301, 316, 338, 407, 409, 410, 992, 1032], "vocabulari": 1026, "vote": [133, 416], "votingclassifi": [131, 132, 569], "votingregressor": 570, "wage": [166, 167], "wai": [168, 379, 391], "want": 379, "ward": [45, 65, 409, 1027], "ward_tre": 463, "warm": 385, "warm_start": 996, "warn": [388, 407], "we": 65, "weak": [109, 416], "web": 383, "websit": 1045, "weight": [109, 176, 178, 210, 301, 316, 347, 399, 407, 416, 417], "weighted_mod": 943, "welcom": 1010, "what": [359, 391], "when": 253, "where": 1028, "which": 988, "whitekernel": 625, "who": 1017, "why": [391, 416], "wikipedia": 15, "wild": 374, "window": [377, 396], "wine": 376, "winpython": 396, "wisconsin": 376, "within": 70, "without": [37, 291, 350], "wolf": [31, 77, 411], "word": [350, 417, 1028], "work": [164, 349, 365, 378, 391, 407, 1028], "workflow": [378, 402], "world": [1, 73, 164, 374], "would": 1025, "wrap": 281, "written": 30, "wrong": [167, 391], "x": 214, "x86_64": 387, "xor": [153, 342, 419], "y": [214, 391, 1003, 1005], "yeast": 278, "yep": 385, "yhat": 1017, "you": [136, 391], "your": [381, 384, 992], "zero": 992, "zero_one_loss": 796, "zopa": 1017}})